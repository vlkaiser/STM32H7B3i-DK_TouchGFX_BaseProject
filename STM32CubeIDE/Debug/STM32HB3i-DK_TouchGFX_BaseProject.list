
STM32HB3i-DK_TouchGFX_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002600c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c0  080262bc  080262bc  000362bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000004c  0802847c  0802847c  0003847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080284c8  080284c8  000384c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  080284d0  080284d0  000384d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  080284e4  080284e4  000384e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000110  24000000  080284ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000787c  24000110  080285fc  00040110  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  2400798c  080285fc  0004798c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00158298  2**0
                  CONTENTS, READONLY
 11 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 FontFlashSection 00000ba4  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 000000d4  90000ba4  90000ba4  00110ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00047620  90000c78  90000c78  00110c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      000000c2  00000000  00000000  001582c6  2**0
                  CONTENTS, READONLY
 16 .debug_info   000aa615  00000000  00000000  00158388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00012f38  00000000  00000000  0020299d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004330  00000000  00000000  002158d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000328c  00000000  00000000  00219c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00011e67  00000000  00000000  0021ce94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052856  00000000  00000000  0022ecfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017a4de  00000000  00000000  00281551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00012654  00000000  00000000  003fba30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000b1  00000000  00000000  0040e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080262a4 	.word	0x080262a4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	080262a4 	.word	0x080262a4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x128>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069e:	f3bf 8f4f 	dsb	sy
}
 80006a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a4:	f3bf 8f6f 	isb	sy
}
 80006a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <main+0x128>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <main+0x128>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <main+0x128>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x128>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d138      	bne.n	8000756 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <main+0x128>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <main+0x128>)
 80006f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000702:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	4925      	ldr	r1, [pc, #148]	; (80007b4 <main+0x128>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x82>
    } while(sets-- != 0U);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0x128>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <main+0x128>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f00a f886 	bl	800a868 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800075c:	f000 fc10 	bl	8000f80 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f836 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 fa9a 	bl	8000c9c <MX_GPIO_Init>
  MX_CRC_Init();
 8000768:	f000 f8a8 	bl	80008bc <MX_CRC_Init>
  MX_DMA2D_Init();
 800076c:	f000 f8c8 	bl	8000900 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000770:	f000 f900 	bl	8000974 <MX_I2C4_Init>
  MX_LTDC_Init();
 8000774:	f000 f93e 	bl	80009f4 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000778:	f000 f9be 	bl	8000af8 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 800077c:	f000 fa2e 	bl	8000bdc <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8000780:	f001 f8dc 	bl	800193c <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000784:	f001 f8d3 	bl	800192e <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000788:	f011 fe2a 	bl	80123e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <main+0x12c>)
 800078e:	2100      	movs	r1, #0
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <main+0x130>)
 8000792:	f011 fe6f 	bl	8012474 <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <main+0x134>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of LEDblink_task */
  LEDblink_taskHandle = osThreadNew(Start_LEDblink_task, NULL, &LEDblink_task_attributes);
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <main+0x138>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <main+0x13c>)
 80007a2:	f011 fe67 	bl	8012474 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <main+0x140>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ac:	f011 fe3c 	bl	8012428 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x124>
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	08026fcc 	.word	0x08026fcc
 80007bc:	0800194d 	.word	0x0800194d
 80007c0:	240003a4 	.word	0x240003a4
 80007c4:	08026ff0 	.word	0x08026ff0
 80007c8:	08000f3d 	.word	0x08000f3d
 80007cc:	240003a8 	.word	0x240003a8

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	; 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f024 ff3b 	bl	802565a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f024 ff35 	bl	802565a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <SystemClock_Config+0xe4>)
 80007f2:	f04f 32ff 	mov.w	r2, #4294967295
 80007f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fa:	2004      	movs	r0, #4
 80007fc:	f00d fa30 	bl	800dc60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <SystemClock_Config+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <SystemClock_Config+0xe8>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <SystemClock_Config+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <SystemClock_Config+0xe8>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800083e:	230c      	movs	r3, #12
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000842:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000854:	2304      	movs	r3, #4
 8000856:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000858:	2300      	movs	r3, #0
 800085a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4618      	mov	r0, r3
 8000866:	f00d fa55 	bl	800dd14 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000870:	f000 fbea 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	233f      	movs	r3, #63	; 0x3f
 8000876:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000880:	2308      	movs	r3, #8
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2103      	movs	r1, #3
 800089a:	4618      	mov	r0, r3
 800089c:	f00d fe6c 	bl	800e578 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008a6:	f000 fbcf 	bl	8001048 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3770      	adds	r7, #112	; 0x70
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58024800 	.word	0x58024800

080008bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <MX_CRC_Init+0x40>)
 80008c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008e6:	f00a f9cd 	bl	800ac84 <HAL_CRC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008f0:	f000 fbaa 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2400012c 	.word	0x2400012c
 80008fc:	40023000 	.word	0x40023000

08000900 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <MX_DMA2D_Init+0x70>)
 8000908:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_DMA2D_Init+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000912:	2202      	movs	r2, #2
 8000914:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_DMA2D_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000924:	2202      	movs	r2, #2
 8000926:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_DMA2D_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000930:	2200      	movs	r2, #0
 8000932:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DMA2D_Init+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000942:	2200      	movs	r2, #0
 8000944:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000948:	f00a fa8e 	bl	800ae68 <HAL_DMA2D_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 fb79 	bl	8001048 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000956:	2101      	movs	r1, #1
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_DMA2D_Init+0x6c>)
 800095a:	f00a fbf9 	bl	800b150 <HAL_DMA2D_ConfigLayer>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000964:	f000 fb70 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	24000150 	.word	0x24000150
 8000970:	52001000 	.word	0x52001000

08000974 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C4_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C4_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10808AD0;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C4_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C4_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C4_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009b0:	f00a ff84 	bl	800b8bc <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fb45 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009c4:	f00b fd3a 	bl	800c43c <HAL_I2CEx_ConfigAnalogFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f000 fb3b 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009d6:	f00b fd7c 	bl	800c4d2 <HAL_I2CEx_ConfigDigitalFilter>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80009e0:	f000 fb32 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240001b8 	.word	0x240001b8
 80009ec:	58001c00 	.word	0x58001c00
 80009f0:	10808ad0 	.word	0x10808ad0

080009f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2234      	movs	r2, #52	; 0x34
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f024 fe2a 	bl	802565a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a08:	4a3a      	ldr	r2, [pc, #232]	; (8000af4 <MX_LTDC_Init+0x100>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a26:	2228      	movs	r2, #40	; 0x28
 8000a28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a32:	222a      	movs	r2, #42	; 0x2a
 8000a34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a38:	220b      	movs	r2, #11
 8000a3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a3e:	f240 220a 	movw	r2, #522	; 0x20a
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a46:	f240 121b 	movw	r2, #283	; 0x11b
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a4e:	f240 222a 	movw	r2, #554	; 0x22a
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a56:	f240 121d 	movw	r2, #285	; 0x11d
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a76:	f00b fd79 	bl	800c56c <HAL_LTDC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 fae2 	bl	8001048 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a96:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ab2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ab8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000abe:	23ff      	movs	r3, #255	; 0xff
 8000ac0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000ad8:	f00b fed0 	bl	800c87c <HAL_LTDC_ConfigLayer>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 fab1 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2400020c 	.word	0x2400020c
 8000af4:	50001000 	.word	0x50001000

08000af8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b08:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <MX_OCTOSPI1_Init+0xe0>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 32;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b20:	221a      	movs	r2, #26
 8000b22:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b3e:	2203      	movs	r2, #3
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b58:	2208      	movs	r2, #8
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b6a:	f00c f919 	bl	800cda0 <HAL_OSPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_OCTOSPI1_Init+0x80>
  {
    Error_Handler();
 8000b74:	f000 fa68 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeOutPeriod = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b86:	f00c fd5b 	bl	800d640 <HAL_OSPI_MemoryMapped>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000b90:	f000 fa5a 	bl	8001048 <Error_Handler>
  }
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f008 fdd9 	bl	8009754 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f008 fd4a 	bl	8009640 <BSP_OSPI_NOR_Init>
 8000bac:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000bb4:	f000 fa48 	bl	8001048 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f008 fe67 	bl	800988c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8000bbe:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_OCTOSPI1_Init+0xd2>
  {
    Error_Handler();
 8000bc6:	f000 fa3f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240002b4 	.word	0x240002b4
 8000bd8:	52005000 	.word	0x52005000

08000bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <MX_USART1_UART_Init+0xb8>)
 8000be6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c04:	220c      	movs	r2, #12
 8000c06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c28:	f010 f92e 	bl	8010e88 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 fa09 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c3a:	f011 fac2 	bl	80121c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f000 fa00 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c4c:	f011 faf7 	bl	801223e <HAL_UARTEx_SetRxFifoThreshold>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 f9f7 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c5c:	f011 fa78 	bl	8012150 <HAL_UARTEx_DisableFifoMode>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c66:	f000 f9ef 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
#ifdef DEBUG
  uint8_t MSG[] = "Initializing...\n\r";
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART1_UART_Init+0xbc>)
 8000c6c:	1d3c      	adds	r4, r7, #4
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2212      	movs	r2, #18
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c82:	f010 f951 	bl	8010f28 <HAL_UART_Transmit>
#endif
  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000310 	.word	0x24000310
 8000c94:	40011000 	.word	0x40011000
 8000c98:	080262d8 	.word	0x080262d8

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb2:	4b8b      	ldr	r3, [pc, #556]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	4a89      	ldr	r2, [pc, #548]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc2:	4b87      	ldr	r3, [pc, #540]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ccc:	623b      	str	r3, [r7, #32]
 8000cce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b83      	ldr	r3, [pc, #524]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce0:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cee:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfe:	4b78      	ldr	r3, [pc, #480]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0c:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d12:	4a73      	ldr	r2, [pc, #460]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1c:	4b70      	ldr	r3, [pc, #448]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d30:	4a6b      	ldr	r2, [pc, #428]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d3a:	4b69      	ldr	r3, [pc, #420]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b65      	ldr	r3, [pc, #404]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	4a64      	ldr	r2, [pc, #400]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d58:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b5e      	ldr	r3, [pc, #376]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d94:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000da4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f640 0104 	movw	r1, #2052	; 0x804
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <MX_GPIO_Init+0x248>)
 8000dc8:	f00a fd2a 	bl	800b820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4845      	ldr	r0, [pc, #276]	; (8000ee8 <MX_GPIO_Init+0x24c>)
 8000dd2:	f00a fd25 	bl	800b820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f241 0106 	movw	r1, #4102	; 0x1006
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <MX_GPIO_Init+0x250>)
 8000dde:	f00a fd1f 	bl	800b820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000de8:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <MX_GPIO_Init+0x254>)
 8000dea:	f00a fd19 	bl	800b820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000dee:	f640 0304 	movw	r3, #2052	; 0x804
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <MX_GPIO_Init+0x248>)
 8000e08:	f00a fa50 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <MX_GPIO_Init+0x24c>)
 8000e24:	f00a fa42 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8000e28:	f241 0302 	movw	r3, #4098	; 0x1002
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_GPIO_Init+0x250>)
 8000e42:	f00a fa33 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0x258>)
 8000e5e:	f00a fa25 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e62:	2304      	movs	r3, #4
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x25c>)
 8000e78:	f00a fa18 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8000e7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <MX_GPIO_Init+0x254>)
 8000e96:	f00a fa09 	bl	800b2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_GPIO_Init+0x250>)
 8000eb2:	f00a f9fb 	bl	800b2ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f009 fe30 	bl	800ab20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ec0:	2008      	movs	r0, #8
 8000ec2:	f009 fe47 	bl	800ab54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f009 fe28 	bl	800ab20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed0:	2028      	movs	r0, #40	; 0x28
 8000ed2:	f009 fe3f 	bl	800ab54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58022000 	.word	0x58022000
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58020800 	.word	0x58020800
 8000ef8:	58021c00 	.word	0x58021c00

08000efc <TOGGLE_LED3>:

/* USER CODE BEGIN 4 */

void TOGGLE_LED3()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	//Toggle Red On-Board LED
	HAL_GPIO_TogglePin(GPIOG, LED3_Pin);
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TOGGLE_LED3+0x14>)
 8000f06:	f00a fca4 	bl	800b852 <HAL_GPIO_TogglePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58021800 	.word	0x58021800

08000f14 <HAL_GPIO_EXTI_Callback>:


volatile uint32_t userButtonPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f24:	d102      	bne.n	8000f2c <HAL_GPIO_EXTI_Callback+0x18>
	{
		//On-Board User Button (Blue)
		userButtonPressed = 1;
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	240003ac 	.word	0x240003ac

08000f3c <Start_LEDblink_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LEDblink_task */
void Start_LEDblink_task(void *argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LEDblink_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f44:	2104      	movs	r1, #4
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <Start_LEDblink_task+0x38>)
 8000f48:	f00a fc83 	bl	800b852 <HAL_GPIO_TogglePin>
	#ifdef DEBUG
	  uint8_t MSG[] = "Blink\n\r";
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <Start_LEDblink_task+0x3c>)
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8000f5a:	f107 0108 	add.w	r1, r7, #8
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2208      	movs	r2, #8
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <Start_LEDblink_task+0x40>)
 8000f66:	f00f ffdf 	bl	8010f28 <HAL_UART_Transmit>
	#endif
	  osDelay(2000);
 8000f6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f6e:	f011 fb13 	bl	8012598 <osDelay>
  {
 8000f72:	e7e7      	b.n	8000f44 <Start_LEDblink_task+0x8>
 8000f74:	58021800 	.word	0x58021800
 8000f78:	080262ec 	.word	0x080262ec
 8000f7c:	24000310 	.word	0x24000310

08000f80 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f92:	f009 fdfb 	bl	800ab8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fa2:	231f      	movs	r3, #31
 8000fa4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fa6:	2387      	movs	r3, #135	; 0x87
 8000fa8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 fe19 	bl	800abfc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000fce:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000fd2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f009 fe08 	bl	800abfc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000ff0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000ff4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000ff6:	2313      	movs	r3, #19
 8000ff8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f009 fdfd 	bl	800abfc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001002:	2303      	movs	r3, #3
 8001004:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001006:	2311      	movs	r3, #17
 8001008:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fdf3 	bl	800abfc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001016:	2004      	movs	r0, #4
 8001018:	f009 fdd0 	bl	800abbc <HAL_MPU_Enable>

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001036:	f009 fc53 	bl	800a8e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x38>)
 8001060:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_MspInit+0x38>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_MspInit+0x38>)
 8001070:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	210f      	movs	r1, #15
 8001080:	f06f 0001 	mvn.w	r0, #1
 8001084:	f009 fd4c 	bl	800ab20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400

08001094 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_CRC_MspInit+0x3c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10e      	bne.n	80010c4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_CRC_MspInit+0x40>)
 80010a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_CRC_MspInit+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_CRC_MspInit+0x40>)
 80010b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40023000 	.word	0x40023000
 80010d4:	58024400 	.word	0x58024400

080010d8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_DMA2D_MspInit+0x48>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d116      	bne.n	8001118 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_DMA2D_MspInit+0x4c>)
 80010ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_DMA2D_MspInit+0x4c>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_DMA2D_MspInit+0x4c>)
 80010fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2105      	movs	r1, #5
 800110c:	205a      	movs	r0, #90	; 0x5a
 800110e:	f009 fd07 	bl	800ab20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001112:	205a      	movs	r0, #90	; 0x5a
 8001114:	f009 fd1e 	bl	800ab54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	52001000 	.word	0x52001000
 8001124:	58024400 	.word	0x58024400

08001128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0ba      	sub	sp, #232	; 0xe8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	22c0      	movs	r2, #192	; 0xc0
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f024 fa86 	bl	802565a <memset>
  if(hi2c->Instance==I2C4)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_I2C_MspInit+0xc8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d146      	bne.n	80011e6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001158:	f04f 0210 	mov.w	r2, #16
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f00d fdd0 	bl	800ed14 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800117a:	f7ff ff65 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 8001180:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 8001190:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800119c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a4:	2312      	movs	r3, #18
 80011a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011b6:	2304      	movs	r3, #4
 80011b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HAL_I2C_MspInit+0xd0>)
 80011c4:	f00a f872 	bl	800b2ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 80011ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0xcc>)
 80011da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	37e8      	adds	r7, #232	; 0xe8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	58001c00 	.word	0x58001c00
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020c00 	.word	0x58020c00

080011fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_I2C_MspDeInit+0x40>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d111      	bne.n	8001232 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_I2C_MspDeInit+0x44>)
 8001210:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_I2C_MspDeInit+0x44>)
 8001216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800121a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_I2C_MspDeInit+0x48>)
 8001224:	f00a f9f2 	bl	800b60c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_I2C_MspDeInit+0x48>)
 800122e:	f00a f9ed 	bl	800b60c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	58001c00 	.word	0x58001c00
 8001240:	58024400 	.word	0x58024400
 8001244:	58020c00 	.word	0x58020c00

08001248 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0bc      	sub	sp, #240	; 0xf0
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	22c0      	movs	r2, #192	; 0xc0
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f024 f9f6 	bl	802565a <memset>
  if(hltdc->Instance==LTDC)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_LTDC_MspInit+0x188>)
 8001274:	4293      	cmp	r3, r2
 8001276:	f040 80a6 	bne.w	80013c6 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800127a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001286:	2318      	movs	r3, #24
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 800128a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001290:	2311      	movs	r3, #17
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001298:	231e      	movs	r3, #30
 800129a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800129c:	2300      	movs	r3, #0
 800129e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00d fd31 	bl	800ed14 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80012b8:	f7ff fec6 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012be:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012c2:	4a44      	ldr	r2, [pc, #272]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e0:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 80012fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fe:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 8001300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001304:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 800130a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800130e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 8001318:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800131c:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_LTDC_MspInit+0x18c>)
 8001328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8001334:	23ff      	movs	r3, #255	; 0xff
 8001336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800134c:	230e      	movs	r3, #14
 800134e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001352:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001356:	4619      	mov	r1, r3
 8001358:	481f      	ldr	r0, [pc, #124]	; (80013d8 <HAL_LTDC_MspInit+0x190>)
 800135a:	f009 ffa7 	bl	800b2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800135e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001378:	230e      	movs	r3, #14
 800137a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800137e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001382:	4619      	mov	r1, r3
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <HAL_LTDC_MspInit+0x194>)
 8001386:	f009 ff91 	bl	800b2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800138a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800138e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a4:	230e      	movs	r3, #14
 80013a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_LTDC_MspInit+0x198>)
 80013b2:	f009 ff7b 	bl	800b2ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	2058      	movs	r0, #88	; 0x58
 80013bc:	f009 fbb0 	bl	800ab20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013c0:	2058      	movs	r0, #88	; 0x58
 80013c2:	f009 fbc7 	bl	800ab54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	37f0      	adds	r7, #240	; 0xf0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	50001000 	.word	0x50001000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58022800 	.word	0x58022800
 80013dc:	58022400 	.word	0x58022400
 80013e0:	58022000 	.word	0x58022000

080013e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b4      	sub	sp, #208	; 0xd0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	22c0      	movs	r2, #192	; 0xc0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f024 f930 	bl	802565a <memset>
  if(hospi->Instance==OCTOSPI1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_OSPI_MspInit+0xd4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d154      	bne.n	80014ae <HAL_OSPI_MspInit+0xca>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */
	__HAL_RCC_OSPI1_FORCE_RESET();
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001408:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140e:	67d3      	str	r3, [r2, #124]	; 0x7c
	__HAL_RCC_OSPI1_RELEASE_RESET();
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800141a:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800141c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800142c:	230a      	movs	r3, #10
 800142e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800143c:	23c0      	movs	r3, #192	; 0xc0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 5462;
 8001444:	f241 5356 	movw	r3, #5462	; 0x1556
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800144a:	2320      	movs	r3, #32
 800144c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f00d fc5e 	bl	800ed14 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_OSPI_MspInit+0x7e>
    {
      Error_Handler();
 800145e:	f7ff fdf3 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001464:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001474:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001482:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_OSPI_MspInit+0xd8>)
 8001492:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	205c      	movs	r0, #92	; 0x5c
 80014a4:	f009 fb3c 	bl	800ab20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80014a8:	205c      	movs	r0, #92	; 0x5c
 80014aa:	f009 fb53 	bl	800ab54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37d0      	adds	r7, #208	; 0xd0
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	52005000 	.word	0x52005000
 80014bc:	58024400 	.word	0x58024400

080014c0 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_OSPI_MspDeInit+0x40>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d112      	bne.n	80014f8 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_OSPI_MspDeInit+0x44>)
 80014d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_OSPI_MspDeInit+0x44>)
 80014da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_OSPI_MspDeInit+0x44>)
 80014e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_OSPI_MspDeInit+0x44>)
 80014ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80014f2:	205c      	movs	r0, #92	; 0x5c
 80014f4:	f009 fb3c 	bl	800ab70 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	52005000 	.word	0x52005000
 8001504:	58024400 	.word	0x58024400

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0ba      	sub	sp, #232	; 0xe8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	22c0      	movs	r2, #192	; 0xc0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f024 f896 	bl	802565a <memset>
  if(huart->Instance==USART1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <HAL_UART_MspInit+0xc8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d146      	bne.n	80015c6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001538:	f04f 0201 	mov.w	r2, #1
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4618      	mov	r0, r3
 8001550:	f00d fbe0 	bl	800ed14 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800155a:	f7ff fd75 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 8001560:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 8001570:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 800157e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_UART_MspInit+0xcc>)
 800158e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800159a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_MspInit+0xd0>)
 80015c2:	f009 fe73 	bl	800b2ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	37e8      	adds	r7, #232	; 0xe8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40011000 	.word	0x40011000
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020000 	.word	0x58020000

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b090      	sub	sp, #64	; 0x40
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d827      	bhi.n	800163a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015ea:	2200      	movs	r2, #0
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	2036      	movs	r0, #54	; 0x36
 80015f0:	f009 fa96 	bl	800ab20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015f4:	2036      	movs	r0, #54	; 0x36
 80015f6:	f009 faad 	bl	800ab54 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015fa:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HAL_InitTick+0xc4>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_InitTick+0xc8>)
 8001602:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_InitTick+0xc8>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_InitTick+0xc8>)
 8001612:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800161e:	f107 0210 	add.w	r2, r7, #16
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f00d fb31 	bl	800ec90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <HAL_InitTick+0x6a>
 8001638:	e001      	b.n	800163e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e02b      	b.n	8001696 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163e:	f00d fafb 	bl	800ec38 <HAL_RCC_GetPCLK1Freq>
 8001642:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001644:	e004      	b.n	8001650 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001646:	f00d faf7 	bl	800ec38 <HAL_RCC_GetPCLK1Freq>
 800164a:	4603      	mov	r3, r0
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_InitTick+0xcc>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9b      	lsrs	r3, r3, #18
 800165a:	3b01      	subs	r3, #1
 800165c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_InitTick+0xd0>)
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_InitTick+0xd4>)
 8001662:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0xd0>)
 8001666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800166a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_InitTick+0xd0>)
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_InitTick+0xd0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_InitTick+0xd0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_InitTick+0xd0>)
 8001680:	f00f f928 	bl	80108d4 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d104      	bne.n	8001694 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <HAL_InitTick+0xd0>)
 800168c:	f00f f984 	bl	8010998 <HAL_TIM_Base_Start_IT>
 8001690:	4603      	mov	r3, r0
 8001692:	e000      	b.n	8001696 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	3740      	adds	r7, #64	; 0x40
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000044 	.word	0x24000044
 80016a4:	58024400 	.word	0x58024400
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	240003b0 	.word	0x240003b0
 80016b0:	40001000 	.word	0x40001000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80016e4:	2004      	movs	r0, #4
 80016e6:	f00a f8ce 	bl	800b886 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80016f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016f6:	f00a f8c6 	bl	800b886 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM6_DAC_IRQHandler+0x10>)
 8001706:	f00f f9bf 	bl	8010a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240003b0 	.word	0x240003b0

08001714 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <LTDC_IRQHandler+0x10>)
 800171a:	f00a fff7 	bl	800c70c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2400020c 	.word	0x2400020c

08001728 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA2D_IRQHandler+0x10>)
 800172e:	f009 fbff 	bl	800af30 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000150 	.word	0x24000150

0800173c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <OCTOSPI1_IRQHandler+0x10>)
 8001742:	f00b fc11 	bl	800cf68 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240002b4 	.word	0x240002b4

08001750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_kill>:

int _kill(int pid, int sig)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176a:	f024 f819 	bl	80257a0 <__errno>
 800176e:	4603      	mov	r3, r0
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_exit>:

void _exit (int status)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001792:	e7fe      	b.n	8001792 <_exit+0x12>

08001794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e00a      	b.n	80017bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a6:	f3af 8000 	nop.w
 80017aa:	4601      	mov	r1, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf0      	blt.n	80017a6 <_read+0x12>
  }

  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e009      	b.n	80017f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf1      	blt.n	80017e0 <_write+0x12>
  }
  return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_close>:

int _close(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182e:	605a      	str	r2, [r3, #4]
  return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_isatty>:

int _isatty(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f023 ff7e 	bl	80257a0 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24040000 	.word	0x24040000
 80018d0:	00001000 	.word	0x00001000
 80018d4:	240003fc 	.word	0x240003fc
 80018d8:	24007990 	.word	0x24007990

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e0:	f008 ff4a 	bl	800a778 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800190a:	f023 ff4f 	bl	80257ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7fe febd 	bl	800068c <main>
  bx  lr
 8001912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001918:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800191c:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8001920:	080284ec 	.word	0x080284ec
  ldr r2, =_sbss
 8001924:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8001928:	2400798c 	.word	0x2400798c

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>

0800192e <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001940:	f001 fd4e 	bl	80033e0 <touchgfx_components_init>
  touchgfx_init();
 8001944:	f001 fd22 	bl	800338c <touchgfx_init>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001954:	f001 fd4c 	bl	80033f0 <touchgfx_taskEntry>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    {
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
    }
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	08027034 	.word	0x08027034

08001980 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    }
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe9 	bl	8001960 <_ZN8touchgfx15TouchControllerD1Ev>
 800198e:	2104      	movs	r1, #4
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f023 fc2e 	bl	80251f2 <_ZdlPvj>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 80019a8:	2308      	movs	r3, #8
 80019aa:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_ZN20STM32TouchController4initEv+0x30>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_ZN20STM32TouchController4initEv+0x34>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4619      	mov	r1, r3
 80019c2:	2000      	movs	r0, #0
 80019c4:	f008 fcba 	bl	800a33c <BSP_TS_Init>
}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24006d76 	.word	0x24006d76
 80019d4:	24006d78 	.word	0x24006d78

080019d8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	2000      	movs	r0, #0
 80019f8:	f008 fd46 	bl	800a488 <BSP_TS_GetState>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00a      	beq.n	8001a22 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a10:	f383 8811 	msr	BASEPRI, r3
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a1e:	bf00      	nop
    {
        configASSERT(0);
 8001a20:	e7fe      	b.n	8001a20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d009      	beq.n	8001a3c <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]

        return true;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff81 	bl	8001960 <_ZN8touchgfx15TouchControllerD1Ev>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0802701c 	.word	0x0802701c

08001a6c <_ZN20STM32TouchControllerD0Ev>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_ZN20STM32TouchControllerD1Ev>
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f023 fbb8 	bl	80251f2 <_ZdlPvj>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d826      	bhi.n	8001afa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
 8001aac:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001ad3 	.word	0x08001ad3
 8001abc:	08001ae1 	.word	0x08001ae1
 8001ac0:	08001aef 	.word	0x08001aef
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8001acc:	f009 fea8 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001ad0:	e013      	b.n	8001afa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8001ada:	f009 fea1 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001ade:	e00c      	b.n	8001afa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8001ae8:	f009 fe9a 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001aec:	e005      	b.n	8001afa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2101      	movs	r1, #1
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8001af4:	f009 fe94 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001af8:	bf00      	nop
    }
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	58020000 	.word	0x58020000
 8001b08:	58020400 	.word	0x58020400
 8001b0c:	58022000 	.word	0x58022000

08001b10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d826      	bhi.n	8001b6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b47 	.word	0x08001b47
 8001b30:	08001b55 	.word	0x08001b55
 8001b34:	08001b63 	.word	0x08001b63
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001b40:	f009 fe6e 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001b44:	e013      	b.n	8001b6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001b4e:	f009 fe67 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001b52:	e00c      	b.n	8001b6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001b5c:	f009 fe60 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001b60:	e005      	b.n	8001b6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2101      	movs	r1, #1
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x70>)
 8001b68:	f009 fe5a 	bl	800b820 <HAL_GPIO_WritePin>
#endif
        break;
 8001b6c:	bf00      	nop
    }
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	58020000 	.word	0x58020000
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	58022000 	.word	0x58022000

08001b84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d822      	bhi.n	8001bda <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bc5 	.word	0x08001bc5
 8001ba8:	08001bd1 	.word	0x08001bd1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8001bb2:	f009 fe4e 	bl	800b852 <HAL_GPIO_TogglePin>
#endif
        break;
 8001bb6:	e010      	b.n	8001bda <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bbc:	480a      	ldr	r0, [pc, #40]	; (8001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8001bbe:	f009 fe48 	bl	800b852 <HAL_GPIO_TogglePin>
#endif
        break;
 8001bc2:	e00a      	b.n	8001bda <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8001bca:	f009 fe42 	bl	800b852 <HAL_GPIO_TogglePin>
#endif
        break;
 8001bce:	e004      	b.n	8001bda <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>)
 8001bd4:	f009 fe3d 	bl	800b852 <HAL_GPIO_TogglePin>
#endif
        break;
 8001bd8:	bf00      	nop
    }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	58020000 	.word	0x58020000
 8001be8:	58020400 	.word	0x58020400
 8001bec:	58022000 	.word	0x58022000

08001bf0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    {
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
    }
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	08027d4c 	.word	0x08027d4c

08001c10 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    }
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe9 	bl	8001bf0 <_ZN8touchgfx3HALD1Ev>
 8001c1e:	217c      	movs	r1, #124	; 0x7c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f023 fae6 	bl	80251f2 <_ZdlPvj>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d304      	bcc.n	8001c7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	883a      	ldrh	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d205      	bcs.n	8001c88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001c80:	219e      	movs	r1, #158	; 0x9e
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001c84:	f023 fae4 	bl	8025250 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001c90:	883b      	ldrh	r3, [r7, #0]
 8001c92:	8013      	strh	r3, [r2, #0]
    }
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	24006d70 	.word	0x24006d70
 8001ca0:	24006d72 	.word	0x24006d72
 8001ca4:	080262f4 	.word	0x080262f4
 8001ca8:	08026358 	.word	0x08026358
 8001cac:	0802639c 	.word	0x0802639c
 8001cb0:	24006d76 	.word	0x24006d76
 8001cb4:	24006d78 	.word	0x24006d78

08001cb8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4798      	blx	r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	e000      	b.n	8001ce0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001cde:	2300      	movs	r3, #0
    }
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f014 ff9f 	bl	8016c34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	33ac      	adds	r3, #172	; 0xac
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    }
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001d14:	2300      	movs	r3, #0
    }
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001d3c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001d40:	480f      	ldr	r0, [pc, #60]	; (8001d80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001d42:	f023 fa85 	bl	8025250 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001d60:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	338c      	adds	r3, #140	; 0x8c
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	4798      	blx	r3
    }
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	080263e4 	.word	0x080263e4
 8001d7c:	0802641c 	.word	0x0802641c
 8001d80:	0802639c 	.word	0x0802639c
 8001d84:	24006d7a 	.word	0x24006d7a

08001d88 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001da6:	701a      	strb	r2, [r3, #0]
    }
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	24006d7b 	.word	0x24006d7b

08001db8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001dc0:	2300      	movs	r3, #0
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	4610      	mov	r0, r2
 8001dea:	4798      	blx	r3
        }
    }
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3318      	adds	r3, #24
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4610      	mov	r0, r2
 8001e24:	4798      	blx	r3
 8001e26:	4603      	mov	r3, r0
    }
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d011      	beq.n	8001e6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11e      	bne.n	8001e8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e5c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001e6a:	e010      	b.n	8001e8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00c      	beq.n	8001e8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e80:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    }
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	24006d74 	.word	0x24006d74
 8001ea0:	24006d72 	.word	0x24006d72
 8001ea4:	24006d70 	.word	0x24006d70

08001ea8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f014 f91c 	bl	80160f0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe8d 	bl	8001bf0 <_ZN8touchgfx3HALD1Ev>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	080273d4 	.word	0x080273d4

08001ee4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001ef2:	217c      	movs	r1, #124	; 0x7c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f023 f97c 	bl	80251f2 <_ZdlPvj>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ffca 	bl	8001ea8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fd52 	bl	80039d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3380      	adds	r3, #128	; 0x80
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
    enableInterrupts();
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3378      	adds	r3, #120	; 0x78
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001f54:	f000 f954 	bl	8002200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3370      	adds	r3, #112	; 0x70
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4610      	mov	r0, r2
 8001f64:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8001f6c:	f009 fc58 	bl	800b820 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2104      	movs	r1, #4
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001f76:	f009 fc53 	bl	800b820 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001f80:	f009 fc4e 	bl	800b820 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001f84:	f000 f93c 	bl	8002200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3370      	adds	r3, #112	; 0x70
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4610      	mov	r0, r2
 8001f94:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8001f96:	e7f5      	b.n	8001f84 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8001f98:	58022800 	.word	0x58022800
 8001f9c:	58020000 	.word	0x58020000

08001fa0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 fda8 	bl	8003b00 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fda7 	bl	8003b1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fdae 	bl	8003b48 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff4:	f3bf 8f4f 	dsb	sy
}
 8001ff8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002000:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	0b5b      	lsrs	r3, r3, #13
 8002006:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800200a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800201e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002024:	4911      	ldr	r1, [pc, #68]	; (800206c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	60fa      	str	r2, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ea      	bne.n	8002016 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	613a      	str	r2, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1db      	bne.n	800200c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8002054:	f3bf 8f4f 	dsb	sy
}
 8002058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800205a:	f3bf 8f6f 	isb	sy
}
 800205e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002060:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 fccc 	bl	8003a18 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fcd0 	bl	8003a38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fcd2 	bl	8003a54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fcd4 	bl	8003a70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_ZN11TouchGFXHALD1Ev+0x20>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff feed 	bl	8001ec0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0802704c 	.word	0x0802704c

080020f4 <_ZN11TouchGFXHALD0Ev>:
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_ZN11TouchGFXHALD1Ev>
 8002102:	217c      	movs	r1, #124	; 0x7c
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f023 f874 	bl	80251f2 <_ZdlPvj>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	2001      	movs	r0, #1
 800211e:	f010 fa56 	bl	80125ce <osSemaphoreNew>
 8002122:	4603      	mov	r3, r0
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002126:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8002132:	4a0e      	ldr	r2, [pc, #56]	; (800216c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002134:	2128      	movs	r1, #40	; 0x28
 8002136:	480e      	ldr	r0, [pc, #56]	; (8002170 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002138:	f023 f88a 	bl	8025250 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800213c:	2200      	movs	r2, #0
 800213e:	2104      	movs	r1, #4
 8002140:	2001      	movs	r0, #1
 8002142:	f010 fb63 	bl	801280c <osMessageQueueNew>
 8002146:	4603      	mov	r3, r0
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800214a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800215c:	f023 f878 	bl	8025250 <__assert_func>
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	24000400 	.word	0x24000400
 8002168:	0802646c 	.word	0x0802646c
 800216c:	080264b8 	.word	0x080264b8
 8002170:	080264e8 	.word	0x080264e8
 8002174:	24000404 	.word	0x24000404
 8002178:	0802657c 	.word	0x0802657c

0800217c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	4618      	mov	r0, r3
 800218a:	f010 faa9 	bl	80126e0 <osSemaphoreAcquire>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	24000400 	.word	0x24000400

08002198 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f010 faef 	bl	8012784 <osSemaphoreRelease>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	24000400 	.word	0x24000400

080021b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f010 fa90 	bl	80126e0 <osSemaphoreAcquire>
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24000400 	.word	0x24000400

080021c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f010 fad7 	bl	8012784 <osSemaphoreRelease>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	24000400 	.word	0x24000400

080021e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	2200      	movs	r2, #0
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80021ee:	f010 fb81 	bl	80128f4 <osMessageQueuePut>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000404 	.word	0x24000404
 80021fc:	24000004 	.word	0x24000004

08002200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	1d39      	adds	r1, r7, #4
 800220c:	2300      	movs	r3, #0
 800220e:	2200      	movs	r2, #0
 8002210:	f010 fbd0 	bl	80129b4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	1d39      	adds	r1, r7, #4
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	2200      	movs	r2, #0
 8002220:	f010 fbc8 	bl	80129b4 <osMessageQueueGet>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	24000404 	.word	0x24000404

08002230 <__NVIC_EnableIRQ>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_DisableIRQ>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db12      	blt.n	80022a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	490a      	ldr	r1, [pc, #40]	; (80022b0 <__NVIC_DisableIRQ+0x44>)
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	3320      	adds	r3, #32
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002298:	f3bf 8f4f 	dsb	sy
}
 800229c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800229e:	f3bf 8f6f 	isb	sy
}
 80022a2:	bf00      	nop
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
        : color(0)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    {
    }
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    {
        return color;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    {
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
    }
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	08027174 	.word	0x08027174

08002308 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    }
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffe9 	bl	80022e8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002316:	2104      	movs	r1, #4
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f022 ff6a 	bl	80251f2 <_ZdlPvj>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3344      	adds	r3, #68	; 0x44
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
    }
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    {
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
    }
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	08027e24 	.word	0x08027e24

08002364 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    }
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe9 	bl	8002344 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002372:	210c      	movs	r1, #12
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f022 ff3c 	bl	80251f2 <_ZdlPvj>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	721a      	strb	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	725a      	strb	r2, [r3, #9]
    {
    }
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	08027e24 	.word	0x08027e24

080023b8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80023c0:	2301      	movs	r3, #1
    }
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3328      	adds	r3, #40	; 0x28
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4610      	mov	r0, r2
 80023e2:	4798      	blx	r3
    }
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
        return instance;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	24006d7c 	.word	0x24006d7c

08002404 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4610      	mov	r0, r2
 800241c:	4798      	blx	r3
    }
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800242e:	f7ff ffdd 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ffe5 	bl	8002404 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	330c      	adds	r3, #12
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff30 	bl	80022b4 <_ZN8touchgfx9colortypeC1Ev>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	330c      	adds	r3, #12
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f7ff ff87 	bl	8002384 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <_ZN8STM32DMAC1Ev+0x50>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 000c 	add.w	r0, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3320      	adds	r3, #32
 8002486:	2260      	movs	r2, #96	; 0x60
 8002488:	4619      	mov	r1, r3
 800248a:	f014 fd0d 	bl	8016ea8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	245f      	movs	r4, #95	; 0x5f
 8002494:	461d      	mov	r5, r3
 8002496:	e004      	b.n	80024a2 <_ZN8STM32DMAC1Ev+0x42>
 8002498:	4628      	mov	r0, r5
 800249a:	f7ff ffd2 	bl	8002442 <_ZN8touchgfx6BlitOpC1Ev>
 800249e:	3524      	adds	r5, #36	; 0x24
 80024a0:	3c01      	subs	r4, #1
 80024a2:	2c00      	cmp	r4, #0
 80024a4:	daf8      	bge.n	8002498 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	08027124 	.word	0x08027124

080024b4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <_ZN8STM32DMAD1Ev+0x30>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80024c2:	205a      	movs	r0, #90	; 0x5a
 80024c4:	f7ff fed2 	bl	800226c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330c      	adds	r3, #12
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fab3 	bl	8002a38 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff35 	bl	8002344 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08027124 	.word	0x08027124

080024e8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
}
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffdf 	bl	80024b4 <_ZN8STM32DMAD1Ev>
 80024f6:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f022 fe79 	bl	80251f2 <_ZdlPvj>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002516:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002526:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002538:	f043 0310 	orr.w	r3, r3, #16
 800253c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <_ZN8STM32DMA10initializeEv+0x54>)
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <_ZN8STM32DMA10initializeEv+0x58>)
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <_ZN8STM32DMA10initializeEv+0x5c>)
 800254e:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002550:	205a      	movs	r0, #90	; 0x5a
 8002552:	f7ff fe6d 	bl	8002230 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	24000150 	.word	0x24000150
 8002568:	08002427 	.word	0x08002427

0800256c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b0b      	cmp	r3, #11
 8002580:	d826      	bhi.n	80025d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	080025c5 	.word	0x080025c5
 800258c:	080025bf 	.word	0x080025bf
 8002590:	080025b9 	.word	0x080025b9
 8002594:	080025d1 	.word	0x080025d1
 8002598:	080025d1 	.word	0x080025d1
 800259c:	080025d1 	.word	0x080025d1
 80025a0:	080025d1 	.word	0x080025d1
 80025a4:	080025cb 	.word	0x080025cb
 80025a8:	080025cb 	.word	0x080025cb
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025cb 	.word	0x080025cb
 80025b4:	080025cb 	.word	0x080025cb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
        break;
 80025bc:	e00e      	b.n	80025dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80025be:	2301      	movs	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
        break;
 80025c2:	e00b      	b.n	80025dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80025c4:	2302      	movs	r3, #2
 80025c6:	60fb      	str	r3, [r7, #12]
        break;
 80025c8:	e008      	b.n	80025dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80025ca:	2305      	movs	r3, #5
 80025cc:	60fb      	str	r3, [r7, #12]
        break;
 80025ce:	e005      	b.n	80025dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80025d2:	4a06      	ldr	r2, [pc, #24]	; (80025ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80025d4:	2165      	movs	r1, #101	; 0x65
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80025d8:	f022 fe3a 	bl	8025250 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80025dc:	68fb      	ldr	r3, [r7, #12]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	080265c0 	.word	0x080265c0
 80025ec:	080265dc 	.word	0x080265dc
 80025f0:	08026628 	.word	0x08026628

080025f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	2b0a      	cmp	r3, #10
 8002608:	d821      	bhi.n	800264e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002649 	.word	0x08002649
 8002614:	08002643 	.word	0x08002643
 8002618:	0800263d 	.word	0x0800263d
 800261c:	0800264f 	.word	0x0800264f
 8002620:	0800264f 	.word	0x0800264f
 8002624:	0800264f 	.word	0x0800264f
 8002628:	0800264f 	.word	0x0800264f
 800262c:	08002643 	.word	0x08002643
 8002630:	08002643 	.word	0x08002643
 8002634:	08002643 	.word	0x08002643
 8002638:	08002643 	.word	0x08002643
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
        break;
 8002640:	e00b      	b.n	800265a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002642:	2301      	movs	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
        break;
 8002646:	e008      	b.n	800265a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002648:	2302      	movs	r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
        break;
 800264c:	e005      	b.n	800265a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002650:	4a05      	ldr	r2, [pc, #20]	; (8002668 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002652:	2186      	movs	r1, #134	; 0x86
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002656:	f022 fdfb 	bl	8025250 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	080265c0 	.word	0x080265c0
 8002668:	080266b8 	.word	0x080266b8
 800266c:	08026628 	.word	0x08026628

08002670 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002678:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7f5b      	ldrb	r3, [r3, #29]
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff67 	bl	800256c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800269e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7f9b      	ldrb	r3, [r3, #30]
 80026a4:	4619      	mov	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff60 	bl	800256c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80026ac:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7f9b      	ldrb	r3, [r3, #30]
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff9d 	bl	80025f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80026ba:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	8b5b      	ldrh	r3, [r3, #26]
 80026c0:	461a      	mov	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	8a9b      	ldrh	r3, [r3, #20]
 80026c6:	1ad2      	subs	r2, r2, r3
 80026c8:	4b92      	ldr	r3, [pc, #584]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	8b5b      	ldrh	r3, [r3, #26]
 80026d0:	461a      	mov	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	8a9b      	ldrh	r3, [r3, #20]
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026da:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	8b1b      	ldrh	r3, [r3, #24]
 80026e0:	461a      	mov	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	8a9b      	ldrh	r3, [r3, #20]
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ea:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80026ec:	4a89      	ldr	r2, [pc, #548]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	8adb      	ldrh	r3, [r3, #22]
 80026f6:	461a      	mov	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	8a9b      	ldrh	r3, [r3, #20]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	4b84      	ldr	r3, [pc, #528]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	4b82      	ldr	r3, [pc, #520]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4b80      	ldr	r3, [pc, #512]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002712:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	d037      	beq.n	800278e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800271e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002722:	f200 80e3 	bhi.w	80028ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272a:	d015      	beq.n	8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	f200 80dc 	bhi.w	80028ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d045      	beq.n	80027c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	f200 80d7 	bhi.w	80028ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	f000 80bf 	beq.w	80028c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	f200 80d1 	bhi.w	80028ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800274a:	2b04      	cmp	r3, #4
 800274c:	f000 80a4 	beq.w	8002898 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002750:	2b20      	cmp	r3, #32
 8002752:	f000 80b6 	beq.w	80028c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002756:	e0c9      	b.n	80028ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7f1b      	ldrb	r3, [r3, #28]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	4619      	mov	r1, r3
 8002760:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002762:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002764:	430b      	orrs	r3, r1
 8002766:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	4c69      	ldr	r4, [pc, #420]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fdae 	bl	80022d0 <_ZNK8touchgfx9colortypecvmEv>
 8002774:	4603      	mov	r3, r0
 8002776:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002778:	4a66      	ldr	r2, [pc, #408]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	4b64      	ldr	r3, [pc, #400]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002784:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002788:	4a64      	ldr	r2, [pc, #400]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800278a:	601a      	str	r2, [r3, #0]
        break;
 800278c:	e0d9      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4619      	mov	r1, r3
 8002796:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800279a:	430b      	orrs	r3, r1
 800279c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	4c5c      	ldr	r4, [pc, #368]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fd93 	bl	80022d0 <_ZNK8touchgfx9colortypecvmEv>
 80027aa:	4603      	mov	r3, r0
 80027ac:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027ae:	4a59      	ldr	r2, [pc, #356]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	4b56      	ldr	r3, [pc, #344]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027ba:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027be:	4a57      	ldr	r2, [pc, #348]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80027c0:	601a      	str	r2, [r3, #0]
        break;
 80027c2:	e0be      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	7f1b      	ldrb	r3, [r3, #28]
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	461a      	mov	r2, r3
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027e2:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027ee:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1d1a      	adds	r2, r3, #4
 80027f4:	4b47      	ldr	r3, [pc, #284]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002802:	2b01      	cmp	r3, #1
 8002804:	d00d      	beq.n	8002822 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002806:	e020      	b.n	800284a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002808:	4b42      	ldr	r3, [pc, #264]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800280e:	4013      	ands	r3, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	8852      	ldrh	r2, [r2, #2]
 8002814:	3a01      	subs	r2, #1
 8002816:	0212      	lsls	r2, r2, #8
 8002818:	4611      	mov	r1, r2
 800281a:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800281c:	430b      	orrs	r3, r1
 800281e:	61d3      	str	r3, [r2, #28]
                break;
 8002820:	e01a      	b.n	8002858 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d101      	bne.n	800282e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800282a:	2300      	movs	r3, #0
 800282c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002834:	4013      	ands	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	8852      	ldrh	r2, [r2, #2]
 800283a:	3a01      	subs	r2, #1
 800283c:	0212      	lsls	r2, r2, #8
 800283e:	4313      	orrs	r3, r2
 8002840:	4a34      	ldr	r2, [pc, #208]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	61d3      	str	r3, [r2, #28]
                break;
 8002848:	e006      	b.n	8002858 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800284c:	4a37      	ldr	r2, [pc, #220]	; (800292c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800284e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002854:	f022 fcfc 	bl	8025250 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800285e:	f043 0320 	orr.w	r3, r3, #32
 8002862:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002864:	bf00      	nop
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f4      	bne.n	8002866 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800287e:	2210      	movs	r2, #16
 8002880:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800288c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800288e:	e058      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002892:	4a28      	ldr	r2, [pc, #160]	; (8002934 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002894:	601a      	str	r2, [r3, #0]
        break;
 8002896:	e054      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	461a      	mov	r2, r3
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80028be:	601a      	str	r2, [r3, #0]
        break;
 80028c0:	e03f      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	7f1b      	ldrb	r3, [r3, #28]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	461a      	mov	r2, r3
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4a11      	ldr	r2, [pc, #68]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028e2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028e6:	4a0d      	ldr	r2, [pc, #52]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80028e8:	601a      	str	r2, [r3, #0]
        break;
 80028ea:	e02a      	b.n	8002942 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7f1b      	ldrb	r3, [r3, #28]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	461a      	mov	r2, r3
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fe:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	7f5a      	ldrb	r2, [r3, #29]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	7f9b      	ldrb	r3, [r3, #30]
 8002908:	429a      	cmp	r2, r3
 800290a:	d015      	beq.n	8002938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800290c:	4b01      	ldr	r3, [pc, #4]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002910:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002912:	e015      	b.n	8002940 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002914:	52001000 	.word	0x52001000
 8002918:	0002000a 	.word	0x0002000a
 800291c:	00020201 	.word	0x00020201
 8002920:	00020009 	.word	0x00020009
 8002924:	ffff00ef 	.word	0xffff00ef
 8002928:	08026704 	.word	0x08026704
 800292c:	08026720 	.word	0x08026720
 8002930:	08026628 	.word	0x08026628
 8002934:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800293a:	f240 2201 	movw	r2, #513	; 0x201
 800293e:	601a      	str	r2, [r3, #0]
        break;
 8002940:	bf00      	nop
    }
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop
 800294c:	52001000 	.word	0x52001000

08002950 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7f9b      	ldrb	r3, [r3, #30]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fe47 	bl	80025f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002966:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002968:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	8adb      	ldrh	r3, [r3, #22]
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	8a9b      	ldrh	r3, [r3, #20]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800297e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	8b5b      	ldrh	r3, [r3, #26]
 800298c:	461a      	mov	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	8a9b      	ldrh	r3, [r3, #20]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d12e      	bne.n	80029fe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	8b5b      	ldrh	r3, [r3, #26]
 80029a4:	461a      	mov	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	8a9b      	ldrh	r3, [r3, #20]
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029ae:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	8b5b      	ldrh	r3, [r3, #26]
 80029b4:	461a      	mov	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	8a9b      	ldrh	r3, [r3, #20]
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029be:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f1b      	ldrb	r3, [r3, #28]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80029d2:	430b      	orrs	r3, r1
 80029d4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	4c13      	ldr	r4, [pc, #76]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fc77 	bl	80022d0 <_ZNK8touchgfx9colortypecvmEv>
 80029e2:	4603      	mov	r3, r0
 80029e4:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029ec:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029f4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80029fa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80029fc:	e010      	b.n	8002a20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	4c06      	ldr	r4, [pc, #24]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fc5d 	bl	80022d0 <_ZNK8touchgfx9colortypecvmEv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002a1a:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002a1c:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002a1e:	601a      	str	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	52001000 	.word	0x52001000
 8002a2c:	00010009 	.word	0x00010009
 8002a30:	00020201 	.word	0x00020201
 8002a34:	00030201 	.word	0x00030201

08002a38 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fc4d 	bl	80022e8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	08027e74 	.word	0x08027e74

08002a5c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffe7 	bl	8002a38 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002a6a:	2114      	movs	r1, #20
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f022 fbc0 	bl	80251f2 <_ZdlPvj>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	805a      	strh	r2, [r3, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	809a      	strh	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	80da      	strh	r2, [r3, #6]
    {
    }
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
    }
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	24006dd8 	.word	0x24006dd8

08002acc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    {
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
    }
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	080273c0 	.word	0x080273c0

08002aec <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    }
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ffe9 	bl	8002acc <_ZN8touchgfx12FontProviderD1Ev>
 8002afa:	2104      	movs	r1, #4
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f022 fb78 	bl	80251f2 <_ZdlPvj>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	611a      	str	r2, [r3, #16]
    {
    }
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	080273b0 	.word	0x080273b0

08002b4c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    {
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
    }
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	080273b0 	.word	0x080273b0

08002b6c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    }
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffe9 	bl	8002b4c <_ZN8touchgfx7MVPHeapD1Ev>
 8002b7a:	2114      	movs	r1, #20
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f022 fb38 	bl	80251f2 <_ZdlPvj>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
    {
    }
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
    {
    }
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    {
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
    }
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	08027388 	.word	0x08027388

08002c30 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    }
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ffe9 	bl	8002c10 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002c3e:	2104      	movs	r1, #4
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f022 fad6 	bl	80251f2 <_ZdlPvj>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    {
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
    }
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	08027ffc 	.word	0x08027ffc

08002c70 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    }
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ffe9 	bl	8002c50 <_ZN8touchgfx3LCDD1Ev>
 8002c7e:	2108      	movs	r1, #8
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f022 fab6 	bl	80251f2 <_ZdlPvj>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    {
    }
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002cce:	6810      	ldr	r0, [r2, #0]
 8002cd0:	6851      	ldr	r1, [r2, #4]
 8002cd2:	c303      	stmia	r3!, {r0, r1}
    }
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    {
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
    }
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	08027370 	.word	0x08027370

08002d00 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    }
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffe9 	bl	8002ce0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002d0e:	2104      	movs	r1, #4
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f022 fa6e 	bl	80251f2 <_ZdlPvj>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	739a      	strb	r2, [r3, #14]
        {
        }
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ffd5 	bl	8002d20 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	829a      	strh	r2, [r3, #20]
    {
    }
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002d9a:	4a55      	ldr	r2, [pc, #340]	; (8002ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
          gestures(),
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	331c      	adds	r3, #28
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ffcc 	bl	8002d66 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3350      	adds	r3, #80	; 0x50
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fe2f 	bl	8002a7c <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002eae:	8b3b      	ldrh	r3, [r7, #24]
 8002eb0:	8013      	strh	r3, [r2, #0]
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002eb8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002ebc:	8bbb      	ldrh	r3, [r7, #28]
 8002ebe:	8013      	strh	r3, [r2, #0]
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002ec6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002ece:	8b3a      	ldrh	r2, [r7, #24]
 8002ed0:	8bbb      	ldrh	r3, [r7, #28]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf34      	ite	cc
 8002ed6:	2301      	movcc	r3, #1
 8002ed8:	2300      	movcs	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	08027d4c 	.word	0x08027d4c
 8002ef4:	24006d7c 	.word	0x24006d7c
 8002ef8:	24006d70 	.word	0x24006d70
 8002efc:	24006d76 	.word	0x24006d76
 8002f00:	24006d72 	.word	0x24006d72
 8002f04:	24006d78 	.word	0x24006d78
 8002f08:	24006d74 	.word	0x24006d74

08002f0c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fe77 	bl	8002c10 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	08028054 	.word	0x08028054

08002f30 <_ZN8touchgfx11ApplicationD0Ev>:
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe7 	bl	8002f0c <_ZN8touchgfx11ApplicationD1Ev>
 8002f3e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f022 f955 	bl	80251f2 <_ZdlPvj>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f804 	bl	8002f68 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00f      	beq.n	8002f9a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff97 	bl	8002f0c <_ZN8touchgfx11ApplicationD1Ev>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	0802731c 	.word	0x0802731c

08002fec <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ffe7 	bl	8002fc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ffa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f022 f8f7 	bl	80251f2 <_ZdlPvj>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	4a08      	ldr	r2, [pc, #32]	; (800303c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fb1b 	bl	8003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ffcb 	bl	8002fc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	080272b0 	.word	0x080272b0

08003040 <_ZN23FrontendApplicationBaseD0Ev>:
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffe1 	bl	8003010 <_ZN23FrontendApplicationBaseD1Ev>
 800304e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f022 f8cd 	bl	80251f2 <_ZdlPvj>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
    {
        gotoScreen_LEDScreenNoTransition();
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f001 fb94 	bl	8004798 <_ZN23FrontendApplicationBase32gotoScreen_LEDScreenNoTransitionEv>
    }
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ffc1 	bl	8003010 <_ZN23FrontendApplicationBaseD1Ev>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	0802725c 	.word	0x0802725c

0800309c <_ZN19FrontendApplicationD0Ev>:
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ffe7 	bl	8003078 <_ZN19FrontendApplicationD1Ev>
 80030aa:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f022 f89f 	bl	80251f2 <_ZdlPvj>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fbe9 	bl	80078a4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f016 f8f7 	bl	80192c8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen_LEDScreenNoTransition();
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fb52 	bl	8004798 <_ZN23FrontendApplicationBase32gotoScreen_LEDScreenNoTransitionEv>
    }
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	f7ff fcf9 	bl	8002b0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]
    {

    }
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08027248 	.word	0x08027248

08003130 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__tcf_0+0xc>)
 8003136:	f000 f965 	bl	8003404 <_ZN12FrontendHeapD1Ev>
 800313a:	bd80      	pop	{r7, pc}
 800313c:	24000408 	.word	0x24000408

08003140 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f3bf 8f5b 	dmb	ish
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800315e:	480b      	ldr	r0, [pc, #44]	; (800318c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003160:	f022 f849 	bl	80251f6 <__cxa_guard_acquire>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003174:	4806      	ldr	r0, [pc, #24]	; (8003190 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003176:	f000 f867 	bl	8003248 <_ZN12FrontendHeapC1Ev>
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800317c:	f022 f886 	bl	802528c <atexit>
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003182:	f022 f844 	bl	802520e <__cxa_guard_release>
        return instance;
 8003186:	4b02      	ldr	r3, [pc, #8]	; (8003190 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	240009d0 	.word	0x240009d0
 8003190:	24000408 	.word	0x24000408
 8003194:	08003131 	.word	0x08003131

08003198 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fccf 	bl	8002b4c <_ZN8touchgfx7MVPHeapD1Ev>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	08027248 	.word	0x08027248

080031bc <_ZN16FrontendHeapBaseD0Ev>:
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ffe7 	bl	8003198 <_ZN16FrontendHeapBaseD1Ev>
 80031ca:	2114      	movs	r1, #20
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f022 f810 	bl	80251f2 <_ZdlPvj>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f012 fce2 	bl	8015bb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	08027214 	.word	0x08027214

08003200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4618      	mov	r0, r3
 800320c:	f012 fcd0 	bl	8015bb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	080271e0 	.word	0x080271e0

08003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f012 fcbe 	bl	8015bb0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003234:	4a03      	ldr	r2, [pc, #12]	; (8003244 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	080271ac 	.word	0x080271ac

08003248 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af02      	add	r7, sp, #8
 800324e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f103 0114 	add.w	r1, r3, #20
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f503 6485 	add.w	r4, r3, #1064	; 0x428
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f203 436c 	addw	r3, r3, #1132	; 0x46c
                     app(model, *this)
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4623      	mov	r3, r4
 800326e:	f7ff ff45 	bl	80030fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3314      	adds	r3, #20
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffad 	bl	80031dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	332c      	adds	r3, #44	; 0x2c
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ffba 	bl	8003200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ffc6 	bl	8003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 faf2 	bl	8007888 <_ZN5ModelC1Ev>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f203 406c 	addw	r0, r3, #1132	; 0x46c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4619      	mov	r1, r3
 80032b4:	f004 fad2 	bl	800785c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7ff ff0d 	bl	80030e2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}
 80032d2:	bf00      	nop
 80032d4:	08027198 	.word	0x08027198

080032d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	8bbb      	ldrh	r3, [r7, #28]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	8b3b      	ldrh	r3, [r7, #24]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	f7ff fd49 	bl	8002d8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]
    }
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	080273d4 	.word	0x080273d4

08003310 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	8bbb      	ldrh	r3, [r7, #28]
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	8b3b      	ldrh	r3, [r7, #24]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	f7ff ffd3 	bl	80032d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]
    }
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0802704c 	.word	0x0802704c

08003348 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	08027034 	.word	0x08027034

08003368 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ffe8 	bl	8003348 <_ZN8touchgfx15TouchControllerC1Ev>
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	0802701c 	.word	0x0802701c

0800338c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b085      	sub	sp, #20
 8003390:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003392:	f000 fd0d 	bl	8003db0 <_ZN14BitmapDatabase11getInstanceEv>
 8003396:	4604      	mov	r4, r0
 8003398:	f000 fd14 	bl	8003dc4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800339c:	4603      	mov	r3, r0
 800339e:	4619      	mov	r1, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	2200      	movs	r2, #0
 80033a8:	4620      	mov	r0, r4
 80033aa:	f018 fcb7 	bl	801bd1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80033ae:	4809      	ldr	r0, [pc, #36]	; (80033d4 <touchgfx_init+0x48>)
 80033b0:	f7ff fb7c 	bl	8002aac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f004 f9a5 	bl	8007704 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <touchgfx_init+0x4c>)
 80033bc:	f018 fb66 	bl	801ba8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80033c0:	f7ff febe 	bl	8003140 <_ZN12FrontendHeap11getInstanceEv>
 80033c4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <touchgfx_init+0x50>)
 80033c8:	f7fe fda8 	bl	8001f1c <_ZN11TouchGFXHAL10initializeEv>
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	240017dc 	.word	0x240017dc
 80033d8:	24000008 	.word	0x24000008
 80033dc:	240017e0 	.word	0x240017e0

080033e0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <touchgfx_taskEntry+0x10>)
 80033f6:	f7fe fd9d 	bl	8001f34 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	240017e0 	.word	0x240017e0

08003404 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	4a10      	ldr	r2, [pc, #64]	; (8003450 <_ZN12FrontendHeapD1Ev+0x4c>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe2d 	bl	8003078 <_ZN19FrontendApplicationD1Ev>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f827 	bl	8003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	332c      	adds	r3, #44	; 0x2c
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f844 	bl	80034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3314      	adds	r3, #20
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f863 	bl	8003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fea9 	bl	8003198 <_ZN16FrontendHeapBaseD1Ev>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	08027198 	.word	0x08027198

08003454 <_ZN12FrontendHeapD0Ev>:
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffd1 	bl	8003404 <_ZN12FrontendHeapD1Ev>
 8003462:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f021 fec3 	bl	80251f2 <_ZdlPvj>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	4a05      	ldr	r2, [pc, #20]	; (8003498 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	f012 fb90 	bl	8015bae <_ZN8touchgfx17AbstractPartitionD1Ev>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	080271ac 	.word	0x080271ac

0800349c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ffe7 	bl	8003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f021 fea0 	bl	80251f2 <_ZdlPvj>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	4a05      	ldr	r2, [pc, #20]	; (80034dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f012 fb6e 	bl	8015bae <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	080271e0 	.word	0x080271e0

080034e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffe7 	bl	80034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034ee:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f021 fe7d 	bl	80251f2 <_ZdlPvj>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f012 fb4a 	bl	8015bae <_ZN8touchgfx17AbstractPartitionD1Ev>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	08027214 	.word	0x08027214

08003528 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ffe7 	bl	8003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003536:	2118      	movs	r1, #24
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f021 fe5a 	bl	80251f2 <_ZdlPvj>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	4a05      	ldr	r2, [pc, #20]	; (8003568 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fab7 	bl	8002acc <_ZN8touchgfx12FontProviderD1Ev>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	080274ac 	.word	0x080274ac

0800356c <_ZN23ApplicationFontProviderD0Ev>:
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ffe7 	bl	8003548 <_ZN23ApplicationFontProviderD1Ev>
 800357a:	2104      	movs	r1, #4
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f021 fe38 	bl	80251f2 <_ZdlPvj>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fb57 	bl	8002c50 <_ZN8touchgfx3LCDD1Ev>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	080283b8 	.word	0x080283b8

080035b0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ffe7 	bl	800358c <_ZN8touchgfx8LCD24bppD1Ev>
 80035be:	2164      	movs	r1, #100	; 0x64
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f021 fe16 	bl	80251f2 <_ZdlPvj>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_Z41__static_initialization_and_destruction_0ii>:
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d119      	bne.n	8003614 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d114      	bne.n	8003614 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80035ea:	4818      	ldr	r0, [pc, #96]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80035ec:	f7ff febc 	bl	8003368 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80035f0:	4817      	ldr	r0, [pc, #92]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80035f2:	f7fe ff35 	bl	8002460 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80035f8:	f01b fc36 	bl	801ee68 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80035fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800360c:	4910      	ldr	r1, [pc, #64]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800360e:	4812      	ldr	r0, [pc, #72]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003610:	f7ff fe7e 	bl	8003310 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d113      	bne.n	8003642 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003620:	4293      	cmp	r3, r2
 8003622:	d10e      	bne.n	8003642 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003626:	f7fe fd53 	bl	80020d0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800362c:	f7ff ff8c 	bl	8003548 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003630:	4808      	ldr	r0, [pc, #32]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003632:	f7ff ffab 	bl	800358c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8003636:	4806      	ldr	r0, [pc, #24]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003638:	f7fe ff3c 	bl	80024b4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800363e:	f7fe fa03 	bl	8001a48 <_ZN20STM32TouchControllerD1Ev>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	240009d4 	.word	0x240009d4
 8003650:	240009d8 	.word	0x240009d8
 8003654:	24001778 	.word	0x24001778
 8003658:	240017e0 	.word	0x240017e0
 800365c:	24000008 	.word	0x24000008

08003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	4a05      	ldr	r2, [pc, #20]	; (8003680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fb35 	bl	8002ce0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	08027304 	.word	0x08027304

08003684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ffe7 	bl	8003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003692:	2110      	movs	r1, #16
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f021 fdac 	bl	80251f2 <_ZdlPvj>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80036ac:	2301      	movs	r3, #1
    }
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80036c2:	2338      	movs	r3, #56	; 0x38
    }
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	3308      	adds	r3, #8
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
    }
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	3308      	adds	r3, #8
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
    }
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003728:	2301      	movs	r3, #1
    }
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800373e:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
    }
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <_ZN8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	3308      	adds	r3, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
    }
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14Screen_LEDViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	3308      	adds	r3, #8
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
    }
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80037a6:	2301      	movs	r3, #1
    }
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80037bc:	2310      	movs	r3, #16
    }
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3308      	adds	r3, #8
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
    }
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19Screen_LEDPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	3308      	adds	r3, #8
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
    }
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	1052      	asrs	r2, r2, #1
 8003820:	1899      	adds	r1, r3, r2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	e00a      	b.n	800384a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68d2      	ldr	r2, [r2, #12]
 800383c:	1052      	asrs	r2, r2, #1
 800383e:	4413      	add	r3, r2
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	4413      	add	r3, r2
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4608      	mov	r0, r1
 800384c:	4798      	blx	r3
    }
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800387e:	2300      	movs	r3, #0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d001      	beq.n	8003888 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003888:	2300      	movs	r3, #0
    }
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_GLOBAL__sub_I_touchgfx_init>:
 8003896:	b580      	push	{r7, lr}
 8003898:	af00      	add	r7, sp, #0
 800389a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800389e:	2001      	movs	r0, #1
 80038a0:	f7ff fe96 	bl	80035d0 <_Z41__static_initialization_and_destruction_0ii>
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_GLOBAL__sub_D_touchgfx_init>:
 80038a6:	b580      	push	{r7, lr}
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7ff fe8e 	bl	80035d0 <_Z41__static_initialization_and_destruction_0ii>
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3320      	adds	r3, #32
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
    }
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <__NVIC_EnableIRQ>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	db0b      	blt.n	8003922 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4907      	ldr	r1, [pc, #28]	; (8003930 <__NVIC_EnableIRQ+0x38>)
 8003912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2001      	movs	r0, #1
 800391a:	fa00 f202 	lsl.w	r2, r0, r2
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_DisableIRQ>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db12      	blt.n	800396c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	490a      	ldr	r1, [pc, #40]	; (8003978 <__NVIC_DisableIRQ+0x44>)
 800394e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	3320      	adds	r3, #32
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003960:	f3bf 8f4f 	dsb	sy
}
 8003964:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003966:	f3bf 8f6f 	isb	sy
}
 800396a:	bf00      	nop
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	; (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80039d0:	b5b0      	push	{r4, r5, r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f012 fbdd 	bl	801619a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80039e0:	687d      	ldr	r5, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3364      	adds	r3, #100	; 0x64
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	f015 fbc3 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	4628      	mov	r0, r5
 80039f4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3388      	adds	r3, #136	; 0x88
 80039fe:	681c      	ldr	r4, [r3, #0]
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003a02:	2300      	movs	r3, #0
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003a06:	47a0      	blx	r4
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a10:	2409fa00 	.word	0x2409fa00
 8003a14:	24040000 	.word	0x24040000

08003a18 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003a20:	2109      	movs	r1, #9
 8003a22:	205a      	movs	r0, #90	; 0x5a
 8003a24:	f7ff ffaa 	bl	800397c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003a28:	2109      	movs	r1, #9
 8003a2a:	2058      	movs	r0, #88	; 0x58
 8003a2c:	f7ff ffa6 	bl	800397c <__NVIC_SetPriority>
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003a40:	205a      	movs	r0, #90	; 0x5a
 8003a42:	f7ff ff59 	bl	80038f8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8003a46:	2058      	movs	r0, #88	; 0x58
 8003a48:	f7ff ff56 	bl	80038f8 <__NVIC_EnableIRQ>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003a5c:	205a      	movs	r0, #90	; 0x5a
 8003a5e:	f7ff ff69 	bl	8003934 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8003a62:	2058      	movs	r0, #88	; 0x58
 8003a64:	f7ff ff66 	bl	8003934 <__NVIC_DisableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003a8a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003a9e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	50001000 	.word	0x50001000
 8003ac4:	2400185c 	.word	0x2400185c
 8003ac8:	2400185e 	.word	0x2400185e

08003acc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f012 fb46 	bl	8016168 <_ZN8touchgfx3HAL10beginFrameEv>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f012 fb45 	bl	8016180 <_ZN8touchgfx3HAL8endFrameEv>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	50001084 	.word	0x50001084

08003b1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003b26:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	50001084 	.word	0x50001084
 8003b44:	50001000 	.word	0x50001000

08003b48 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f012 fad0 	bl	80160fc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	f012 fc30 	bl	80163de <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d03a      	beq.n	8003c1c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003bae:	f3bf 8f4f 	dsb	sy
}
 8003bb2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bc4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bce:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003bd8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003bde:	4912      	ldr	r1, [pc, #72]	; (8003c28 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e5a      	subs	r2, r3, #1
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ea      	bne.n	8003bd0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	613a      	str	r2, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1db      	bne.n	8003bc6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0e:	f3bf 8f4f 	dsb	sy
}
 8003c12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c14:	f3bf 8f6f 	isb	sy
}
 8003c18:	bf00      	nop
}
 8003c1a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d03a      	beq.n	8003cc0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c52:	f3bf 8f4f 	dsb	sy
}
 8003c56:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	0b5b      	lsrs	r3, r3, #13
 8003c64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c68:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c72:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003c7c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c82:	4912      	ldr	r1, [pc, #72]	; (8003ccc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e5a      	subs	r2, r3, #1
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ea      	bne.n	8003c74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	613a      	str	r2, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1db      	bne.n	8003c6a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb2:	f3bf 8f4f 	dsb	sy
}
 8003cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cb8:	f3bf 8f6f 	isb	sy
}
 8003cbc:	bf00      	nop
}
 8003cbe:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003cd8:	f7fe fb88 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d132      	bne.n	8003d52 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_LTDC_LineEventCallback+0x8c>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_LTDC_LineEventCallback+0x90>)
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_LTDC_LineEventCallback+0x94>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f008 fdf5 	bl	800c8f8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003d0e:	f7fe fb6d 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fddc 	bl	80038d2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003d1a:	f7fe fa61 	bl	80021e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003d1e:	f7fe fb65 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f012 ff85 	bl	8016c34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fd feb6 	bl	8001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003d30:	e010      	b.n	8003d54 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_LTDC_LineEventCallback+0x90>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f008 fddd 	bl	800c8f8 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8003d3e:	f7fe fb55 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fdb6 	bl	80038b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f7fd fee0 	bl	8001b10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8003d50:	e000      	b.n	8003d54 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8003d52:	bf00      	nop
        }
    }
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	50001000 	.word	0x50001000
 8003d60:	2400185c 	.word	0x2400185c
 8003d64:	2400185e 	.word	0x2400185e

08003d68 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d010      	beq.n	8003d9c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	dc13      	bgt.n	8003da6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d005      	beq.n	8003d92 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003d86:	e00e      	b.n	8003da6 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d88:	f003 fd34 	bl	80077f4 <_ZN17TypedTextDatabase8getFontsEv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e00a      	b.n	8003da8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d92:	f003 fd2f 	bl	80077f4 <_ZN17TypedTextDatabase8getFontsEv>
 8003d96:	4603      	mov	r3, r0
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	e005      	b.n	8003da8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d9c:	f003 fd2a 	bl	80077f4 <_ZN17TypedTextDatabase8getFontsEv>
 8003da0:	4603      	mov	r3, r0
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	e000      	b.n	8003da8 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003da6:	2300      	movs	r3, #0
    }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003db4:	4b02      	ldr	r3, [pc, #8]	; (8003dc0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	080274b8 	.word	0x080274b8

08003dc4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003dc8:	2306      	movs	r3, #6
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    {
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
    }
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	08027a74 	.word	0x08027a74

08003df4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    }
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ffe9 	bl	8003dd4 <_ZN8touchgfx4FontD1Ev>
 8003e02:	2114      	movs	r1, #20
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f021 f9f4 	bl	80251f2 <_ZdlPvj>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e010      	b.n	8003e4c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	f107 030f 	add.w	r3, r7, #15
 8003e3e:	f107 0210 	add.w	r2, r7, #16
 8003e42:	8879      	ldrh	r1, [r7, #2]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	47a0      	blx	r4
 8003e48:	6178      	str	r0, [r7, #20]
        return glyph;
 8003e4a:	697b      	ldr	r3, [r7, #20]
    }
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}

08003e54 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	89db      	ldrh	r3, [r3, #14]
    }
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8a1b      	ldrh	r3, [r3, #16]
    }
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	88db      	ldrh	r3, [r3, #6]
    }
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	889b      	ldrh	r3, [r3, #4]
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7a9b      	ldrb	r3, [r3, #10]
 8003ec0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003ec4:	b2db      	uxtb	r3, r3
    }
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7a9b      	ldrb	r3, [r3, #10]
 8003ede:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ee2:	b2db      	uxtb	r3, r3
    }
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff67 	bl	8003dd4 <_ZN8touchgfx4FontD1Ev>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	08028110 	.word	0x08028110

08003f14 <_ZN8touchgfx9ConstFontD0Ev>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ffe7 	bl	8003ef0 <_ZN8touchgfx9ConstFontD1Ev>
 8003f22:	211c      	movs	r1, #28
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f021 f964 	bl	80251f2 <_ZdlPvj>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ffd3 	bl	8003ef0 <_ZN8touchgfx9ConstFontD1Ev>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08027684 	.word	0x08027684

08003f58 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ffe7 	bl	8003f34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f021 f942 	bl	80251f2 <_ZdlPvj>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
    {
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
    }
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	08027538 	.word	0x08027538

08003f98 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    }
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ffe9 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f021 f922 	bl	80251f2 <_ZdlPvj>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	817b      	strh	r3, [r7, #10]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	813b      	strh	r3, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	897a      	ldrh	r2, [r7, #10]
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	893a      	ldrh	r2, [r7, #8]
 8003ff4:	805a      	strh	r2, [r3, #2]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	809a      	strh	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8b3a      	ldrh	r2, [r7, #24]
 8004000:	80da      	strh	r2, [r3, #6]
    {
    }
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
        : rect(),
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fd2a 	bl	8002a7c <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	330c      	adds	r3, #12
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fd25 	bl	8002a7c <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	080280a8 	.word	0x080280a8

08004070 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    {
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	601a      	str	r2, [r3, #0]
    }
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	080280a8 	.word	0x080280a8

08004090 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    }
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ffe9 	bl	8004070 <_ZN8touchgfx8DrawableD1Ev>
 800409e:	2128      	movs	r1, #40	; 0x28
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f021 f8a6 	bl	80251f2 <_ZdlPvj>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
        }
    }
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
    }
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80040f6:	2300      	movs	r3, #0
    }
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800411e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004122:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f837 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800412e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	4619      	mov	r1, r3
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f88b 	bl	8004254 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	809a      	strh	r2, [r3, #4]
    }
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	80da      	strh	r2, [r3, #6]
    }
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
 80041a8:	4613      	mov	r3, r2
 80041aa:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3330      	adds	r3, #48	; 0x30
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80041b8:	4611      	mov	r1, r2
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
        setY(y);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3334      	adds	r3, #52	; 0x34
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80041ca:	4611      	mov	r1, r2
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
    }
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	811a      	strh	r2, [r3, #8]
    }
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	887a      	ldrh	r2, [r7, #2]
 8004206:	815a      	strh	r2, [r3, #10]
    }
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    {
    }
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3338      	adds	r3, #56	; 0x38
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004270:	4611      	mov	r1, r2
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
        setHeight(height);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	333c      	adds	r3, #60	; 0x3c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004282:	4611      	mov	r1, r2
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
    }
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
    {
    }
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	807b      	strh	r3, [r7, #2]
 80042fa:	4613      	mov	r3, r2
 80042fc:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3354      	adds	r3, #84	; 0x54
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	8879      	ldrh	r1, [r7, #2]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800430e:	b292      	uxth	r2, r2
 8004310:	1a8a      	subs	r2, r1, r2
 8004312:	b292      	uxth	r2, r2
 8004314:	b210      	sxth	r0, r2
 8004316:	8839      	ldrh	r1, [r7, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800431e:	b292      	uxth	r2, r2
 8004320:	1a8a      	subs	r2, r1, r2
 8004322:	b292      	uxth	r2, r2
 8004324:	b212      	sxth	r2, r2
 8004326:	4601      	mov	r1, r0
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
    }
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004342:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004352:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ffe1 	bl	8004334 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]
    }
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f014 ff3a 	bl	801920e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	e002      	b.n	80043cc <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
    }
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	24006d7c 	.word	0x24006d7c

080043dc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	4613      	mov	r3, r2
 80043ec:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff62 	bl	80042ba <_ZNK8touchgfx8Drawable9isVisibleEv>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff68 	bl	80042d4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
        }
    }
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	721a      	strb	r2, [r3, #8]
    {
    }
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	08027590 	.word	0x08027590

08004450 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
    {
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
    }
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	08027590 	.word	0x08027590

08004470 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
    }
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ffe9 	bl	8004450 <_ZN8touchgfx10TransitionD1Ev>
 800447e:	210c      	movs	r1, #12
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f020 feb6 	bl	80251f2 <_ZdlPvj>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
    {
    }
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    {
    }
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    {
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80044d4:	f014 fe4e 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 80044d8:	4603      	mov	r3, r0
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	323c      	adds	r2, #60	; 0x3c
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	4790      	blx	r2
    }
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
    }
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af02      	add	r7, sp, #8
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff fd52 	bl	8003fd0 <_ZN8touchgfx4RectC1Essss>
        }
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
        {
        }
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f014 fefa 	bl	8019350 <_ZN8touchgfx11ApplicationC1Ev>
 800455c:	4a09      	ldr	r2, [pc, #36]	; (8004584 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004576:	6013      	str	r3, [r2, #0]
    }
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	0802731c 	.word	0x0802731c
 8004588:	24006dc8 	.word	0x24006dc8

0800458c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	601a      	str	r2, [r3, #0]
    }
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	721a      	strb	r2, [r3, #8]
    }
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	605a      	str	r2, [r3, #4]
    }
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fd10 	bl	8004010 <_ZN8touchgfx8DrawableC1Ev>
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0802761c 	.word	0x0802761c

08004604 <_ZN8touchgfx6WidgetD1Ev>:
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	4a05      	ldr	r2, [pc, #20]	; (8004624 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fd2b 	bl	8004070 <_ZN8touchgfx8DrawableD1Ev>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	0802761c 	.word	0x0802761c

08004628 <_ZN8touchgfx6WidgetD0Ev>:
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ffe7 	bl	8004604 <_ZN8touchgfx6WidgetD1Ev>
 8004636:	2128      	movs	r1, #40	; 0x28
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f020 fdda 	bl	80251f2 <_ZdlPvj>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_led_screen/Screen_LEDView.hpp>
#include <gui/screen_led_screen/Screen_LEDPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff78 	bl	800454c <_ZN8touchgfx14MVPApplicationC1Ev>
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f931 	bl	80048d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800467e:	f7fd feb5 	bl	80023ec <_ZN8touchgfx3HAL11getInstanceEv>
 8004682:	4603      	mov	r3, r0
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	3208      	adds	r2, #8
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004690:	2000      	movs	r0, #0
 8004692:	f003 f837 	bl	8007704 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004696:	f7ff fe85 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 800469a:	4603      	mov	r3, r0
 800469c:	4618      	mov	r0, r3
 800469e:	f01b fcc8 	bl	8020032 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80046a2:	f7ff fe7f 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f01b fd39 	bl	8020120 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	080272b0 	.word	0x080272b0

080046bc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ffe9 	bl	80046bc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	3208      	adds	r2, #8
 80046fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <_ZN23FrontendApplicationBase40gotoScreen_HomeScreenCoverTransitionEastEv>:
 */

// Screen_Home

void FrontendApplicationBase::gotoScreen_HomeScreenCoverTransitionEast()
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_HomeScreenCoverTransitionEastImpl);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <_ZN23FrontendApplicationBase40gotoScreen_HomeScreenCoverTransitionEastEv+0x50>)
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	f107 0008 	add.w	r0, r7, #8
 8004726:	f107 0318 	add.w	r3, r7, #24
 800472a:	cb0c      	ldmia	r3, {r2, r3}
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	f000 f8eb 	bl	8004908 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	4619      	mov	r1, r3
 8004738:	4620      	mov	r0, r4
 800473a:	f7ff ffcb 	bl	80046d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe ff8c 	bl	8003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004754:	bf00      	nop
 8004756:	3724      	adds	r7, #36	; 0x24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd90      	pop	{r4, r7, pc}
 800475c:	08004761 	.word	0x08004761

08004760 <_ZN23FrontendApplicationBase44gotoScreen_HomeScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen_HomeScreenCoverTransitionEastImpl()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af02      	add	r7, sp, #8
 8004766:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen_HomeView, Screen_HomePresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <_ZN23FrontendApplicationBase44gotoScreen_HomeScreenCoverTransitionEastImplEv+0x30>)
 8004780:	4804      	ldr	r0, [pc, #16]	; (8004794 <_ZN23FrontendApplicationBase44gotoScreen_HomeScreenCoverTransitionEastImplEv+0x34>)
 8004782:	f000 f8e1 	bl	8004948 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	24006dbc 	.word	0x24006dbc
 8004794:	24006db8 	.word	0x24006db8

08004798 <_ZN23FrontendApplicationBase32gotoScreen_LEDScreenNoTransitionEv>:

// Screen_LED

void FrontendApplicationBase::gotoScreen_LEDScreenNoTransition()
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_LEDScreenNoTransitionImpl);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <_ZN23FrontendApplicationBase32gotoScreen_LEDScreenNoTransitionEv+0x50>)
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	f107 0008 	add.w	r0, r7, #8
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	cb0c      	ldmia	r3, {r2, r3}
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	f000 f8a5 	bl	8004908 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4619      	mov	r1, r3
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff ff85 	bl	80046d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe ff46 	bl	8003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80047e0:	bf00      	nop
 80047e2:	3724      	adds	r7, #36	; 0x24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}
 80047e8:	080047ed 	.word	0x080047ed

080047ec <_ZN23FrontendApplicationBase36gotoScreen_LEDScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen_LEDScreenNoTransitionImpl()
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen_LEDView, Screen_LEDPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <_ZN23FrontendApplicationBase36gotoScreen_LEDScreenNoTransitionImplEv+0x30>)
 800480c:	4804      	ldr	r0, [pc, #16]	; (8004820 <_ZN23FrontendApplicationBase36gotoScreen_LEDScreenNoTransitionImplEv+0x34>)
 800480e:	f000 f9c7 	bl	8004ba0 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	24006dbc 	.word	0x24006dbc
 8004820:	24006db8 	.word	0x24006db8

08004824 <_ZN23FrontendApplicationBase39gotoScreen_LEDScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoScreen_LEDScreenCoverTransitionEast()
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_LEDScreenCoverTransitionEastImpl);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <_ZN23FrontendApplicationBase39gotoScreen_LEDScreenCoverTransitionEastEv+0x50>)
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	f107 0008 	add.w	r0, r7, #8
 800483e:	f107 0318 	add.w	r3, r7, #24
 8004842:	cb0c      	ldmia	r3, {r2, r3}
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	f000 f85f 	bl	8004908 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	4619      	mov	r1, r3
 8004850:	4620      	mov	r0, r4
 8004852:	f7ff ff3f 	bl	80046d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe ff00 	bl	8003660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800486c:	bf00      	nop
 800486e:	3724      	adds	r7, #36	; 0x24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	08004879 	.word	0x08004879

08004878 <_ZN23FrontendApplicationBase43gotoScreen_LEDScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen_LEDScreenCoverTransitionEastImpl()
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen_LEDView, Screen_LEDPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <_ZN23FrontendApplicationBase43gotoScreen_LEDScreenCoverTransitionEastImplEv+0x30>)
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <_ZN23FrontendApplicationBase43gotoScreen_LEDScreenCoverTransitionEastImplEv+0x34>)
 800489a:	f000 fa9b 	bl	8004dd4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	24006dbc 	.word	0x24006dbc
 80048ac:	24006db8 	.word	0x24006db8

080048b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	08027370 	.word	0x08027370

080048d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffe8 	bl	80048b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	60da      	str	r2, [r3, #12]
    }
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	08027304 	.word	0x08027304

08004908 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4639      	mov	r1, r7
 8004914:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ffc8 	bl	80048b0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3308      	adds	r3, #8
 8004930:	463a      	mov	r2, r7
 8004932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004936:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	08027304 	.word	0x08027304

08004948 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b08f      	sub	sp, #60	; 0x3c
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3320      	adds	r3, #32
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
 8004968:	4603      	mov	r3, r0
 800496a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800496e:	d205      	bcs.n	800497c <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004970:	4b7d      	ldr	r3, [pc, #500]	; (8004b68 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004972:	4a7e      	ldr	r2, [pc, #504]	; (8004b6c <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004974:	21a3      	movs	r1, #163	; 0xa3
 8004976:	487e      	ldr	r0, [pc, #504]	; (8004b70 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004978:	f020 fc6a 	bl	8025250 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3320      	adds	r3, #32
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4610      	mov	r0, r2
 800498c:	4798      	blx	r3
 800498e:	4603      	mov	r3, r0
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d805      	bhi.n	80049a0 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004994:	4b77      	ldr	r3, [pc, #476]	; (8004b74 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004996:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004998:	21a4      	movs	r1, #164	; 0xa4
 800499a:	4875      	ldr	r0, [pc, #468]	; (8004b70 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800499c:	f020 fc58 	bl	8025250 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3320      	adds	r3, #32
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4610      	mov	r0, r2
 80049b0:	4798      	blx	r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b37      	cmp	r3, #55	; 0x37
 80049b6:	d805      	bhi.n	80049c4 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80049ba:	4a6c      	ldr	r2, [pc, #432]	; (8004b6c <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80049bc:	21a5      	movs	r1, #165	; 0xa5
 80049be:	486c      	ldr	r0, [pc, #432]	; (8004b70 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80049c0:	f020 fc46 	bl	8025250 <__assert_func>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80049d0:	f014 fbd0 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fcd6 	bl	8004388 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4610      	mov	r0, r2
 80049f4:	4798      	blx	r3
    if (*currentTrans)
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4798      	blx	r3
    if (*currentScreen)
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
    if (*currentPresenter)
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
    if (*currentScreen)
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4610      	mov	r0, r2
 8004a58:	4798      	blx	r3
    if (*currentPresenter)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
}
 8004a74:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fac3 	bl	8005008 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4619      	mov	r1, r3
 8004a86:	2038      	movs	r0, #56	; 0x38
 8004a88:	f7ff fa96 	bl	8003fb8 <_ZnwjPv>
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	2114      	movs	r1, #20
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fb01 	bl	8005098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8004a96:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fb3e 	bl	8005120 <_ZN8touchgfx17AbstractPartition2atI15Screen_HomeViewEERT_t>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8004aac:	f7ff fa84 	bl	8003fb8 <_ZnwjPv>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f003 f828 	bl	8007b08 <_ZN15Screen_HomeViewC1Ev>
 8004ab8:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fb40 	bl	8005146 <_ZN8touchgfx17AbstractPartition2atI20Screen_HomePresenterEERT_t>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2010      	movs	r0, #16
 8004acc:	f7ff fa74 	bl	8003fb8 <_ZnwjPv>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f002 ffbf 	bl	8007a58 <_ZN20Screen_HomePresenterC1ER15Screen_HomeView>
 8004ada:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aec:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	3304      	adds	r3, #4
 8004af8:	e000      	b.n	8004afc <_ZN8touchgfx14makeTransitionI15Screen_HomeView20Screen_HomePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004afa:	2300      	movs	r3, #0
 8004afc:	4619      	mov	r1, r3
 8004afe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b00:	f7ff fd44 	bl	800458c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	3304      	adds	r3, #4
 8004b08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fd59 	bl	80045c2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb29 	bl	800516c <_ZN8touchgfx4ViewI20Screen_HomePresenterE4bindERS1_>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69f8      	ldr	r0, [r7, #28]
 8004b30:	4798      	blx	r3
    newPresenter->activate();
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69b8      	ldr	r0, [r7, #24]
 8004b3a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	69f8      	ldr	r0, [r7, #28]
 8004b40:	f016 f804 	bl	801ab4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3310      	adds	r3, #16
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	4798      	blx	r3
    newTransition->invalidate();
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6978      	ldr	r0, [r7, #20]
 8004b5a:	4798      	blx	r3
}
 8004b5c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	373c      	adds	r7, #60	; 0x3c
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}
 8004b68:	08026760 	.word	0x08026760
 8004b6c:	080267f0 	.word	0x080267f0
 8004b70:	08026910 	.word	0x08026910
 8004b74:	08026958 	.word	0x08026958
 8004b78:	080269fc 	.word	0x080269fc

08004b7c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fc4c 	bl	8004424 <_ZN8touchgfx10TransitionC1Ev>
 8004b8c:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	0802756c 	.word	0x0802756c

08004ba0 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b08f      	sub	sp, #60	; 0x3c
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3320      	adds	r3, #32
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4798      	blx	r3
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8004bc6:	d205      	bcs.n	8004bd4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004bc8:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004bca:	4a7e      	ldr	r2, [pc, #504]	; (8004dc4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004bcc:	21a3      	movs	r1, #163	; 0xa3
 8004bce:	487e      	ldr	r0, [pc, #504]	; (8004dc8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004bd0:	f020 fb3e 	bl	8025250 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3320      	adds	r3, #32
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4610      	mov	r0, r2
 8004be4:	4798      	blx	r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b0f      	cmp	r3, #15
 8004bea:	d805      	bhi.n	8004bf8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004bec:	4b77      	ldr	r3, [pc, #476]	; (8004dcc <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004bf0:	21a4      	movs	r1, #164	; 0xa4
 8004bf2:	4875      	ldr	r0, [pc, #468]	; (8004dc8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004bf4:	f020 fb2c 	bl	8025250 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3320      	adds	r3, #32
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b0b      	cmp	r3, #11
 8004c0e:	d805      	bhi.n	8004c1c <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c12:	4a6c      	ldr	r2, [pc, #432]	; (8004dc4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004c14:	21a5      	movs	r1, #165	; 0xa5
 8004c16:	486c      	ldr	r0, [pc, #432]	; (8004dc8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c18:	f020 fb1a 	bl	8025250 <__assert_func>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004c28:	f014 faa4 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fbaa 	bl	8004388 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
    if (*currentTrans)
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4610      	mov	r0, r2
 8004c64:	4798      	blx	r3
    if (*currentScreen)
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4798      	blx	r3
    if (*currentPresenter)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3304      	adds	r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4610      	mov	r0, r2
 8004c98:	4798      	blx	r3
    if (*currentScreen)
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4798      	blx	r3
    if (*currentPresenter)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
}
 8004ccc:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fa57 	bl	8005188 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4619      	mov	r1, r3
 8004cde:	200c      	movs	r0, #12
 8004ce0:	f7ff f96a 	bl	8003fb8 <_ZnwjPv>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f7ff ff48 	bl	8004b7c <_ZN8touchgfx12NoTransitionC1Ev>
 8004cec:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa5a 	bl	80051ae <_ZN8touchgfx17AbstractPartition2atI14Screen_LEDViewEERT_t>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 8004d02:	f7ff f959 	bl	8003fb8 <_ZnwjPv>
 8004d06:	4604      	mov	r4, r0
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f002 ffdf 	bl	8007ccc <_ZN14Screen_LEDViewC1Ev>
 8004d0e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fa5c 	bl	80051d4 <_ZN8touchgfx17AbstractPartition2atI19Screen_LEDPresenterEERT_t>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	2010      	movs	r0, #16
 8004d22:	f7ff f949 	bl	8003fb8 <_ZnwjPv>
 8004d26:	4604      	mov	r4, r0
 8004d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f002 ff4a 	bl	8007bc4 <_ZN19Screen_LEDPresenterC1ER14Screen_LEDView>
 8004d30:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d36:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	e000      	b.n	8004d52 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004d50:	2300      	movs	r3, #0
 8004d52:	4619      	mov	r1, r3
 8004d54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d56:	f7ff fc19 	bl	800458c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fc2e 	bl	80045c2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa45 	bl	80051fa <_ZN8touchgfx4ViewI19Screen_LEDPresenterE4bindERS1_>
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69f8      	ldr	r0, [r7, #28]
 8004d86:	4798      	blx	r3
    newPresenter->activate();
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69b8      	ldr	r0, [r7, #24]
 8004d90:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	69f8      	ldr	r0, [r7, #28]
 8004d96:	f015 fed9 	bl	801ab4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3310      	adds	r3, #16
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	4798      	blx	r3
    newTransition->invalidate();
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	4798      	blx	r3
}
 8004db2:	bf00      	nop
    return newPresenter;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	373c      	adds	r7, #60	; 0x3c
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd90      	pop	{r4, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08026760 	.word	0x08026760
 8004dc4:	08026aa0 	.word	0x08026aa0
 8004dc8:	08026910 	.word	0x08026910
 8004dcc:	08026958 	.word	0x08026958
 8004dd0:	080269fc 	.word	0x080269fc

08004dd4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b08f      	sub	sp, #60	; 0x3c
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3320      	adds	r3, #32
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8004dfa:	d205      	bcs.n	8004e08 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004dfc:	4b7d      	ldr	r3, [pc, #500]	; (8004ff4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004dfe:	4a7e      	ldr	r2, [pc, #504]	; (8004ff8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004e00:	21a3      	movs	r1, #163	; 0xa3
 8004e02:	487e      	ldr	r0, [pc, #504]	; (8004ffc <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e04:	f020 fa24 	bl	8025250 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3320      	adds	r3, #32
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4610      	mov	r0, r2
 8004e18:	4798      	blx	r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b0f      	cmp	r3, #15
 8004e1e:	d805      	bhi.n	8004e2c <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004e20:	4b77      	ldr	r3, [pc, #476]	; (8005000 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e22:	4a75      	ldr	r2, [pc, #468]	; (8004ff8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004e24:	21a4      	movs	r1, #164	; 0xa4
 8004e26:	4875      	ldr	r0, [pc, #468]	; (8004ffc <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e28:	f020 fa12 	bl	8025250 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3320      	adds	r3, #32
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b37      	cmp	r3, #55	; 0x37
 8004e42:	d805      	bhi.n	8004e50 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004e44:	4b6f      	ldr	r3, [pc, #444]	; (8005004 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e46:	4a6c      	ldr	r2, [pc, #432]	; (8004ff8 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004e48:	21a5      	movs	r1, #165	; 0xa5
 8004e4a:	486c      	ldr	r0, [pc, #432]	; (8004ffc <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e4c:	f020 fa00 	bl	8025250 <__assert_func>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004e5c:	f014 f98a 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fa90 	bl	8004388 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4798      	blx	r3
    if (*currentTrans)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4610      	mov	r0, r2
 8004e98:	4798      	blx	r3
    if (*currentScreen)
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4798      	blx	r3
    if (*currentPresenter)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4798      	blx	r3
    if (*currentScreen)
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4798      	blx	r3
    if (*currentPresenter)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
}
 8004f00:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f87d 	bl	8005008 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4619      	mov	r1, r3
 8004f12:	2038      	movs	r0, #56	; 0x38
 8004f14:	f7ff f850 	bl	8003fb8 <_ZnwjPv>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	2114      	movs	r1, #20
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 f8bb 	bl	8005098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8004f22:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f93f 	bl	80051ae <_ZN8touchgfx17AbstractPartition2atI14Screen_LEDViewEERT_t>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4619      	mov	r1, r3
 8004f34:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 8004f38:	f7ff f83e 	bl	8003fb8 <_ZnwjPv>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f002 fec4 	bl	8007ccc <_ZN14Screen_LEDViewC1Ev>
 8004f44:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f941 	bl	80051d4 <_ZN8touchgfx17AbstractPartition2atI19Screen_LEDPresenterEERT_t>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4619      	mov	r1, r3
 8004f56:	2010      	movs	r0, #16
 8004f58:	f7ff f82e 	bl	8003fb8 <_ZnwjPv>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f60:	4620      	mov	r0, r4
 8004f62:	f002 fe2f 	bl	8007bc4 <_ZN19Screen_LEDPresenterC1ER14Screen_LEDView>
 8004f66:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f6c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f72:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f78:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	3304      	adds	r3, #4
 8004f84:	e000      	b.n	8004f88 <_ZN8touchgfx14makeTransitionI14Screen_LEDView19Screen_LEDPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004f86:	2300      	movs	r3, #0
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004f8c:	f7ff fafe 	bl	800458c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	3304      	adds	r3, #4
 8004f94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fb13 	bl	80045c2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f92a 	bl	80051fa <_ZN8touchgfx4ViewI19Screen_LEDPresenterE4bindERS1_>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69f8      	ldr	r0, [r7, #28]
 8004fbc:	4798      	blx	r3
    newPresenter->activate();
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69b8      	ldr	r0, [r7, #24]
 8004fc6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69f8      	ldr	r0, [r7, #28]
 8004fcc:	f015 fdbe 	bl	801ab4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6978      	ldr	r0, [r7, #20]
 8004fda:	4798      	blx	r3
    newTransition->invalidate();
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3314      	adds	r3, #20
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	4798      	blx	r3
}
 8004fe8:	bf00      	nop
    return newPresenter;
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	373c      	adds	r7, #60	; 0x3c
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd90      	pop	{r4, r7, pc}
 8004ff4:	08026760 	.word	0x08026760
 8004ff8:	08026bac 	.word	0x08026bac
 8004ffc:	08026910 	.word	0x08026910
 8005000:	08026958 	.word	0x08026958
 8005004:	080269fc 	.word	0x080269fc

08005008 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	887a      	ldrh	r2, [r7, #2]
 800501e:	4611      	mov	r1, r2
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
 8005024:	4603      	mov	r3, r0
    }
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fad0 	bl	80045e0 <_ZN8touchgfx6WidgetC1Ev>
 8005040:	4a03      	ldr	r2, [pc, #12]	; (8005050 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	080275b4 	.word	0x080275b4

08005054 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	4a05      	ldr	r2, [pc, #20]	; (8005074 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff facd 	bl	8004604 <_ZN8touchgfx6WidgetD1Ev>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	080275b4 	.word	0x080275b4

08005078 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ffe7 	bl	8005054 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 8005086:	2128      	movs	r1, #40	; 0x28
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f020 f8b2 	bl	80251f2 <_ZdlPvj>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af02      	add	r7, sp, #8
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff f9bc 	bl	8004424 <_ZN8touchgfx10TransitionC1Ev>
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	81da      	strh	r2, [r3, #14]
          solid()
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3310      	adds	r3, #16
 80050c8:	2228      	movs	r2, #40	; 0x28
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f020 fac4 	bl	802565a <memset>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3310      	adds	r3, #16
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ffaa 	bl	8005030 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	425b      	negs	r3, r3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	b21a      	sxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	819a      	strh	r2, [r3, #12]
            break;
 80050ea:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f103 0010 	add.w	r0, r3, #16
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x84>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	2200      	movs	r2, #0
 8005104:	2100      	movs	r1, #0
 8005106:	f7fe fffd 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	08027548 	.word	0x08027548
 8005118:	24006d70 	.word	0x24006d70
 800511c:	24006d72 	.word	0x24006d72

08005120 <_ZN8touchgfx17AbstractPartition2atI15Screen_HomeViewEERT_t>:
    T& at(const uint16_t index)
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	4611      	mov	r1, r2
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
 800513c:	4603      	mov	r3, r0
    }
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_ZN8touchgfx17AbstractPartition2atI20Screen_HomePresenterEERT_t>:
    T& at(const uint16_t index)
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3324      	adds	r3, #36	; 0x24
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	4611      	mov	r1, r2
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
    }
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN8touchgfx4ViewI20Screen_HomePresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
    T& at(const uint16_t index)
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3324      	adds	r3, #36	; 0x24
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	4611      	mov	r1, r2
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	4603      	mov	r3, r0
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZN8touchgfx17AbstractPartition2atI14Screen_LEDViewEERT_t>:
    T& at(const uint16_t index)
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3324      	adds	r3, #36	; 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	4611      	mov	r1, r2
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
    }
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN8touchgfx17AbstractPartition2atI19Screen_LEDPresenterEERT_t>:
    T& at(const uint16_t index)
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3324      	adds	r3, #36	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	887a      	ldrh	r2, [r7, #2]
 80051ea:	4611      	mov	r1, r2
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	4603      	mov	r3, r0
    }
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_ZN8touchgfx4ViewI19Screen_LEDPresenterE4bindERS1_>:
    void bind(T& newPresenter)
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3310      	adds	r3, #16
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff12 	bl	8005054 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f90c 	bl	8004450 <_ZN8touchgfx10TransitionD1Ev>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	08027548 	.word	0x08027548

08005248 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ffe1 	bl	8005218 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 8005256:	2138      	movs	r1, #56	; 0x38
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f01f ffca 	bl	80251f2 <_ZdlPvj>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	4a05      	ldr	r2, [pc, #20]	; (8005288 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f8e9 	bl	8004450 <_ZN8touchgfx10TransitionD1Ev>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	0802756c 	.word	0x0802756c

0800528c <_ZN8touchgfx12NoTransitionD0Ev>:
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ffe7 	bl	8005268 <_ZN8touchgfx12NoTransitionD1Ev>
 800529a:	210c      	movs	r1, #12
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f01f ffa8 	bl	80251f2 <_ZdlPvj>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container. The direction of the transition determines the direction the contents of
     * the container moves.
     */
    virtual void handleTickEvent()
 80052ac:	b5b0      	push	{r4, r5, r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff f8ea 	bl	8004490 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7a9b      	ldrb	r3, [r3, #10]
 80052c0:	3301      	adds	r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7a9a      	ldrb	r2, [r3, #10]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7a5b      	ldrb	r3, [r3, #9]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d906      	bls.n	80052e2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	729a      	strb	r2, [r3, #10]
 80052e0:	e090      	b.n	8005404 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>
            return;
        }

        const int16_t oldValue = calculatedValue;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	89db      	ldrh	r3, [r3, #14]
 80052e6:	82fb      	strh	r3, [r7, #22]

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7a9b      	ldrb	r3, [r3, #10]
 80052ec:	b298      	uxth	r0, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7a5b      	ldrb	r3, [r3, #9]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2100      	movs	r1, #0
 80052fc:	f015 fc2c 	bl	801ab58 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005320:	b29b      	uxth	r3, r3
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005328:	2a00      	cmp	r2, #0
 800532a:	dd01      	ble.n	8005330 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
 800532c:	2201      	movs	r2, #1
 800532e:	e001      	b.n	8005334 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
 8005330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005334:	4413      	add	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	b21a      	sxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	81da      	strh	r2, [r3, #14]
        }

        // Convert the calculated value to delta value relative to current moved-to position
        const int16_t relativeValue = calculatedValue - oldValue;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005344:	b29a      	uxth	r2, r3
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b29b      	uxth	r3, r3
 800534c:	82bb      	strh	r3, [r7, #20]

        // The Cover Transition only draws to parts of the non-TFT framebuffer. To avoid glitches
        // In Double buffering mode both framebuffers must be identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7a9b      	ldrb	r3, [r3, #10]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d109      	bne.n	800536a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
 8005356:	4b2d      	ldr	r3, [pc, #180]	; (800540c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x160>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800535e:	f013 ff09 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8005362:	4603      	mov	r3, r0
 8005364:	4618      	mov	r0, r3
 8005366:	f013 ff0b 	bl	8019180 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        Rect rect;
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd fb84 	bl	8002a7c <_ZN8touchgfx4RectC1Ev>
        switch (templateDirection)
        {
        case EAST:
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800537a:	b29a      	uxth	r2, r3
 800537c:	4b24      	ldr	r3, [pc, #144]	; (8005410 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x164>)
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	4413      	add	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	b21b      	sxth	r3, r3
 8005386:	813b      	strh	r3, [r7, #8]
            rect.y = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	817b      	strh	r3, [r7, #10]
            rect.width = -calculatedValue;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005392:	b29b      	uxth	r3, r3
 8005394:	425b      	negs	r3, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	b21b      	sxth	r3, r3
 800539a:	81bb      	strh	r3, [r7, #12]
            rect.height = HAL::DISPLAY_HEIGHT;
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x168>)
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	81fb      	strh	r3, [r7, #14]
            break;
 80053a4:	bf00      	nop
            rect.y = HAL::DISPLAY_HEIGHT + calculatedValue;
            rect.width = HAL::DISPLAY_WIDTH;
            rect.height = -calculatedValue;
            break;
        }
        Application::getInstance()->invalidateArea(rect);
 80053a6:	f013 fee5 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 80053aa:	4603      	mov	r3, r0
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	3240      	adds	r2, #64	; 0x40
 80053b0:	6814      	ldr	r4, [r2, #0]
 80053b2:	f107 0208 	add.w	r2, r7, #8
 80053b6:	ca06      	ldmia	r2, {r1, r2}
 80053b8:	4618      	mov	r0, r3
 80053ba:	47a0      	blx	r4

        // Move children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	331c      	adds	r3, #28
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4610      	mov	r0, r2
 80053cc:	4798      	blx	r3
 80053ce:	6138      	str	r0, [r7, #16]
        while (d)
 80053d0:	e015      	b.n	80053fe <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x152>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 80053d2:	693d      	ldr	r5, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3330      	adds	r3, #48	; 0x30
 80053da:	681c      	ldr	r4, [r3, #0]
 80053dc:	6938      	ldr	r0, [r7, #16]
 80053de:	f7fe feb2 	bl	8004146 <_ZNK8touchgfx8Drawable4getXEv>
 80053e2:	4603      	mov	r3, r0
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	8abb      	ldrh	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	b21b      	sxth	r3, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	4628      	mov	r0, r5
 80053f2:	47a0      	blx	r4
                break;
 80053f4:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }

            d = d->getNextSibling();
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f7fe fe6d 	bl	80040d6 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 80053fc:	6138      	str	r0, [r7, #16]
        while (d)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
        }
    }
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bdb0      	pop	{r4, r5, r7, pc}
 800540a:	bf00      	nop
 800540c:	24006d7a 	.word	0x24006d7a
 8005410:	24006d70 	.word	0x24006d70
 8005414:	24006d72 	.word	0x24006d72

08005418 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3364      	adds	r3, #100	; 0x64
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	3210      	adds	r2, #16
 8005432:	4611      	mov	r1, r2
 8005434:	4798      	blx	r3
    }
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800543e:	b5b0      	push	{r4, r5, r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff f835 	bl	80044b8 <_ZN8touchgfx10Transition4initEv>

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	331c      	adds	r3, #28
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
 8005460:	60f8      	str	r0, [r7, #12]
        while (d)
 8005462:	e018      	b.n	8005496 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x58>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 8005464:	68fd      	ldr	r5, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3330      	adds	r3, #48	; 0x30
 800546c:	681c      	ldr	r4, [r3, #0]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7fe fe69 	bl	8004146 <_ZNK8touchgfx8Drawable4getXEv>
 8005474:	4603      	mov	r3, r0
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800547e:	b29b      	uxth	r3, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	b29b      	uxth	r3, r3
 8005484:	b21b      	sxth	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	4628      	mov	r0, r5
 800548a:	47a0      	blx	r4
                break;
 800548c:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7fe fe21 	bl	80040d6 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 8005494:	60f8      	str	r0, [r7, #12]
        while (d)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e3      	bne.n	8005464 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x26>
        }

        screenContainer->add(solid);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6858      	ldr	r0, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3360      	adds	r3, #96	; 0x60
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	3210      	adds	r2, #16
 80054ae:	4611      	mov	r1, r2
 80054b0:	4798      	blx	r3
    }
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bdb0      	pop	{r4, r5, r7, pc}

080054ba <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08e      	sub	sp, #56	; 0x38
 80054f0:	af0a      	add	r7, sp, #40	; 0x28
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4611      	mov	r1, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	460b      	mov	r3, r1
 80054fc:	80fb      	strh	r3, [r7, #6]
 80054fe:	4613      	mov	r3, r2
 8005500:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	88b9      	ldrh	r1, [r7, #4]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800550c:	9308      	str	r3, [sp, #32]
 800550e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005510:	9307      	str	r3, [sp, #28]
 8005512:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005516:	9306      	str	r3, [sp, #24]
 8005518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005528:	9303      	str	r3, [sp, #12]
 800552a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800552e:	9302      	str	r3, [sp, #8]
 8005530:	7f3b      	ldrb	r3, [r7, #28]
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	8b3b      	ldrh	r3, [r7, #24]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	460b      	mov	r3, r1
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	f014 ff68 	bl	801a410 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005540:	4a09      	ldr	r2, [pc, #36]	; (8005568 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005550:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	08027684 	.word	0x08027684

0800556c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	889b      	ldrh	r3, [r3, #4]
 8005580:	0adb      	lsrs	r3, r3, #11
 8005582:	b29b      	uxth	r3, r3
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4413      	add	r3, r2
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800559e:	b480      	push	{r7}
 80055a0:	b089      	sub	sp, #36	; 0x24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	460b      	mov	r3, r1
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7b1b      	ldrb	r3, [r3, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e031      	b.n	8005622 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	7b5b      	ldrb	r3, [r3, #13]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	b21b      	sxth	r3, r3
 80055ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d2:	b219      	sxth	r1, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	7adb      	ldrb	r3, [r3, #11]
 80055d8:	b21b      	sxth	r3, r3
 80055da:	430b      	orrs	r3, r1
 80055dc:	b21b      	sxth	r3, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7b1b      	ldrb	r3, [r3, #12]
 80055ea:	837b      	strh	r3, [r7, #26]
 80055ec:	e013      	b.n	8005616 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	897a      	ldrh	r2, [r7, #10]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d103      	bne.n	8005600 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80055fe:	e010      	b.n	8005622 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	897a      	ldrh	r2, [r7, #10]
 8005606:	429a      	cmp	r2, r3
 8005608:	d309      	bcc.n	800561e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800560a:	8b7b      	ldrh	r3, [r7, #26]
 800560c:	3b01      	subs	r3, #1
 800560e:	837b      	strh	r3, [r7, #26]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3304      	adds	r3, #4
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	8b7b      	ldrh	r3, [r7, #26]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e8      	bne.n	80055ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800561c:	e000      	b.n	8005620 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800561e:	bf00      	nop
        }
    }
    return 0;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3724      	adds	r7, #36	; 0x24
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
        : color(col)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	601a      	str	r2, [r3, #0]
    }
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	801a      	strh	r2, [r3, #0]
    {
    }
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	791b      	ldrb	r3, [r3, #4]
    }
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
        return rect.width;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
        return rect.height;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
    void setWidthHeight(const Drawable& drawable)
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f7ff ffde 	bl	8005684 <_ZNK8touchgfx8Drawable8getWidthEv>
 80056c8:	4603      	mov	r3, r0
 80056ca:	461c      	mov	r4, r3
 80056cc:	6838      	ldr	r0, [r7, #0]
 80056ce:	f7ff ffe6 	bl	800569e <_ZNK8touchgfx8Drawable9getHeightEv>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	4621      	mov	r1, r4
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fe fdbb 	bl	8004254 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}

080056e6 <_ZN8touchgfx8Drawable14setWidthHeightERKNS_6BitmapE>:
    void setWidthHeight(const Bitmap& bitmap)
 80056e6:	b590      	push	{r4, r7, lr}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	f016 fb27 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461c      	mov	r4, r3
 80056fa:	6838      	ldr	r0, [r7, #0]
 80056fc:	f016 fb56 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	4621      	mov	r1, r4
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fe fda4 	bl	8004254 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bd90      	pop	{r4, r7, pc}

08005714 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fc66 	bl	8004010 <_ZN8touchgfx8DrawableC1Ev>
 8005744:	4a05      	ldr	r2, [pc, #20]	; (800575c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08027cb0 	.word	0x08027cb0

08005760 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
    {
 8005780:	4a06      	ldr	r2, [pc, #24]	; (800579c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f908 	bl	80059a0 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	080281ac 	.word	0x080281ac

080057a0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    }
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffe5 	bl	8005778 <_ZN8touchgfx6ScreenD1Ev>
 80057ae:	213c      	movs	r1, #60	; 0x3c
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f01f fd1e 	bl	80251f2 <_ZdlPvj>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
    {
    }
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
    {
    }
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    {
    }
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
    {
    }
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f010 f9cb 	bl	8015bd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	2326      	movs	r3, #38	; 0x26
 8005856:	461a      	mov	r2, r3
 8005858:	2100      	movs	r1, #0
 800585a:	f01f fefe 	bl	802565a <memset>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe febd 	bl	80045e0 <_ZN8touchgfx6WidgetC1Ev>
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3328      	adds	r3, #40	; 0x28
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fed7 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	08027f28 	.word	0x08027f28

08005890 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80058b8:	4a06      	ldr	r2, [pc, #24]	; (80058d4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	887a      	ldrh	r2, [r7, #2]
 80058c2:	809a      	strh	r2, [r3, #4]
    }
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	08027538 	.word	0x08027538

080058d8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4618      	mov	r0, r3
 80058e4:	2326      	movs	r3, #38	; 0x26
 80058e6:	461a      	mov	r2, r3
 80058e8:	2100      	movs	r1, #0
 80058ea:	f01f feb6 	bl	802565a <memset>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fe75 	bl	80045e0 <_ZN8touchgfx6WidgetC1Ev>
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3328      	adds	r3, #40	; 0x28
 8005900:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ffd1 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3330      	adds	r3, #48	; 0x30
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fe8c 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	869a      	strh	r2, [r3, #52]	; 0x34
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	333c      	adds	r3, #60	; 0x3c
 8005940:	4618      	mov	r0, r3
 8005942:	f000 f817 	bl	8005974 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	08027e98 	.word	0x08027e98

08005954 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	f7fe fb20 	bl	8003fd0 <_ZN8touchgfx4RectC1Essss>
              text(0)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
        {
        }
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fb5d 	bl	8004070 <_ZN8touchgfx8DrawableD1Ev>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	08027cb0 	.word	0x08027cb0

080059c4 <_ZN8touchgfx9ContainerD0Ev>:
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffe7 	bl	80059a0 <_ZN8touchgfx9ContainerD1Ev>
 80059d2:	212c      	movs	r1, #44	; 0x2c
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f01f fc0c 	bl	80251f2 <_ZdlPvj>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fea0 	bl	8005734 <_ZN8touchgfx9ContainerC1Ev>
 80059f4:	4a0b      	ldr	r2, [pc, #44]	; (8005a24 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fe7d 	bl	8005714 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	08027958 	.word	0x08027958

08005a28 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	338c      	adds	r3, #140	; 0x8c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
    }
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4798      	blx	r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4798      	blx	r3
        }
    }
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
    {
    }
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
    {
    }
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4618      	mov	r0, r3
 8005b26:	2326      	movs	r3, #38	; 0x26
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f01f fd95 	bl	802565a <memset>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fd54 	bl	80045e0 <_ZN8touchgfx6WidgetC1Ev>
 8005b38:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	8812      	ldrh	r2, [r2, #0]
 8005b44:	84da      	strh	r2, [r3, #38]	; 0x26
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f011 fdd3 	bl	80176fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	08027f90 	.word	0x08027f90

08005b64 <_ZN8touchgfx5Image8setAlphaEh>:
     *
     * @see getAlpha
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe fd35 	bl	8004604 <_ZN8touchgfx6WidgetD1Ev>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08027f90 	.word	0x08027f90

08005ba8 <_ZN8touchgfx5ImageD0Ev>:
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ffe7 	bl	8005b84 <_ZN8touchgfx5ImageD1Ev>
 8005bb6:	212c      	movs	r1, #44	; 0x2c
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f01f fb1a 	bl	80251f2 <_ZdlPvj>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	4a05      	ldr	r2, [pc, #20]	; (8005be8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fd13 	bl	8004604 <_ZN8touchgfx6WidgetD1Ev>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	08027f28 	.word	0x08027f28

08005bec <_ZN8touchgfx3BoxD0Ev>:
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ffe7 	bl	8005bc8 <_ZN8touchgfx3BoxD1Ev>
 8005bfa:	212c      	movs	r1, #44	; 0x2c
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f01f faf8 	bl	80251f2 <_ZdlPvj>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff19 	bl	8005a50 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8005c22:	6838      	ldr	r0, [r7, #0]
 8005c24:	f7ff fd22 	bl	800566c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	f083 0301 	eor.w	r3, r3, #1
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00f      	beq.n	8005c72 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	7bba      	ldrb	r2, [r7, #14]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fee2 	bl	8005a28 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f7ff fcf7 	bl	800566c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3388      	adds	r3, #136	; 0x88
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
        }
    }
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fe73 	bl	80059a0 <_ZN8touchgfx9ContainerD1Ev>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	08027958 	.word	0x08027958

08005cc8 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ffe7 	bl	8005ca4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8005cd6:	2134      	movs	r1, #52	; 0x34
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f01f fa8a 	bl	80251f2 <_ZdlPvj>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3328      	adds	r3, #40	; 0x28
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe f93c 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fc7e 	bl	8004604 <_ZN8touchgfx6WidgetD1Ev>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	08027e98 	.word	0x08027e98

08005d18 <_ZN8touchgfx8TextAreaD0Ev>:
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ffe1 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 8005d26:	2148      	movs	r1, #72	; 0x48
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f01f fa62 	bl	80251f2 <_ZdlPvj>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZN19Screen_HomeViewBase11applicationEv>:
    Screen_HomeViewBase();
    virtual ~Screen_HomeViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005d40:	f013 fa18 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8005d44:	4603      	mov	r3, r0
    }
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <_ZN8touchgfx4ViewI20Screen_HomePresenterED1Ev>:
class View : public Screen
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <_ZN8touchgfx4ViewI20Screen_HomePresenterED1Ev+0x20>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fd09 	bl	8005778 <_ZN8touchgfx6ScreenD1Ev>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08027870 	.word	0x08027870

08005d74 <_ZN8touchgfx4ViewI20Screen_HomePresenterED0Ev>:
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffe7 	bl	8005d50 <_ZN8touchgfx4ViewI20Screen_HomePresenterED1Ev>
 8005d82:	2140      	movs	r1, #64	; 0x40
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f01f fa34 	bl	80251f2 <_ZdlPvj>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZN19Screen_HomeViewBaseC1Ev>:
#include <gui_generated/screen_home_screen/Screen_HomeViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Screen_HomeViewBase::Screen_HomeViewBase() :
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b09e      	sub	sp, #120	; 0x78
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	6178      	str	r0, [r7, #20]
    flexButtonCallback(this, &Screen_HomeViewBase::flexButtonCallbackHandler)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f9f4 	bl	800618c <_ZN8touchgfx4ViewI20Screen_HomePresenterEC1Ev>
 8005da4:	4ac9      	ldr	r2, [pc, #804]	; (80060cc <_ZN19Screen_HomeViewBaseC1Ev+0x338>)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3340      	adds	r3, #64	; 0x40
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fd4a 	bl	8005848 <_ZN8touchgfx3BoxC1Ev>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	336c      	adds	r3, #108	; 0x6c
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fd45 	bl	8005848 <_ZN8touchgfx3BoxC1Ev>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	3398      	adds	r3, #152	; 0x98
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fd88 	bl	80058d8 <_ZN8touchgfx8TextAreaC1Ev>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	33e0      	adds	r3, #224	; 0xe0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fa3d 	bl	800624c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8005dd8:	4bbd      	ldr	r3, [pc, #756]	; (80060d0 <_ZN19Screen_HomeViewBaseC1Ev+0x33c>)
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	f107 031c 	add.w	r3, r7, #28
 8005de4:	cb0c      	ldmia	r3, {r2, r3}
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	f000 fa68 	bl	80062bc <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005df2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	f7fe f980 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005e1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	461a      	mov	r2, r3
 8005e24:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fbf6 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	4619      	mov	r1, r3
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff fd22 	bl	8005890 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	3340      	adds	r3, #64	; 0x40
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7ff fce7 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005e60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f7fe f949 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8005e7e:	2308      	movs	r3, #8
 8005e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005e84:	235e      	movs	r3, #94	; 0x5e
 8005e86:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8005e8a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005e8e:	041b      	lsls	r3, r3, #16
 8005e90:	461a      	mov	r2, r3
 8005e92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff fbbf 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fceb 	bl	8005890 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	336c      	adds	r3, #108	; 0x6c
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7ff fcb0 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 116);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3398      	adds	r3, #152	; 0x98
 8005ecc:	2274      	movs	r2, #116	; 0x74
 8005ece:	21b8      	movs	r1, #184	; 0xb8
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe f963 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005edc:	23fa      	movs	r3, #250	; 0xfa
 8005ede:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005ee2:	23f7      	movs	r3, #247	; 0xf7
 8005ee4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8005ee8:	23f7      	movs	r3, #247	; 0xf7
 8005eea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8005eee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	431a      	orrs	r2, r3
 8005efe:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fb8d 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8005f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f16:	65fc      	str	r4, [r7, #92]	; 0x5c
 8005f18:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8005f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005f20:	bf00      	nop
    textHello.setLinespacing(0);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	3398      	adds	r3, #152	; 0x98
 8005f26:	667b      	str	r3, [r7, #100]	; 0x64
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        linespace = space;
 8005f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f30:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8005f34:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8005f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3384      	adds	r3, #132	; 0x84
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8005f40:	463a      	mov	r2, r7
 8005f42:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
 8005f48:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005f4c:	463a      	mov	r2, r7
 8005f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8005f54:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WCML));
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f60:	2102      	movs	r1, #2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fca2 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8005f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f011 fb72 	bl	8017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fd fffd 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3398      	adds	r3, #152	; 0x98
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f7ff fc4e 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    btn_LEDScreen.setBitmaps(Bitmap(BITMAP_BUTTON_LARGE_RELEASED_ID), Bitmap(BITMAP_BUTTON_LARGE_PRESSED_ID));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8005f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f96:	2101      	movs	r1, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fb57 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8005f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fb51 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8005faa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f9a1 	bl	80062fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    btn_LEDScreen.setBitmapXY(0, 0);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	33e0      	adds	r3, #224	; 0xe0
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f9bb 	bl	800633e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    btn_LEDScreen.setText(TypedText(T___SINGLEUSE_4YQX));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8005fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fc69 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8005fda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f9c1 	bl	8006368 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd ffc4 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    btn_LEDScreen.setTextPosition(0, 10, 146, 70);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8005ff6:	2346      	movs	r3, #70	; 0x46
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2392      	movs	r3, #146	; 0x92
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	2100      	movs	r1, #0
 8006000:	f000 f9c8 	bl	8006394 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    btn_LEDScreen.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(10, 10, 10));
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800600a:	23ff      	movs	r3, #255	; 0xff
 800600c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8006010:	23ff      	movs	r3, #255	; 0xff
 8006012:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8006016:	23ff      	movs	r3, #255	; 0xff
 8006018:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800601c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	461a      	mov	r2, r3
 8006024:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	431a      	orrs	r2, r3
 800602c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8006030:	4313      	orrs	r3, r2
 8006032:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006036:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800603a:	4611      	mov	r1, r2
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff faf6 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	461d      	mov	r5, r3
 8006046:	230a      	movs	r3, #10
 8006048:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800604c:	230a      	movs	r3, #10
 800604e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8006052:	230a      	movs	r3, #10
 8006054:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8006058:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	461a      	mov	r2, r3
 8006060:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	431a      	orrs	r2, r3
 8006068:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800606c:	4313      	orrs	r3, r2
 800606e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fad8 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	461a      	mov	r2, r3
 8006082:	4629      	mov	r1, r5
 8006084:	4620      	mov	r0, r4
 8006086:	f000 f9a5 	bl	80063d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    btn_LEDScreen.setAction(flexButtonCallback);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f7ff fcf3 	bl	8005a84 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    btn_LEDScreen.setPosition(167, 180, 146, 70);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 80060a4:	2346      	movs	r3, #70	; 0x46
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2392      	movs	r3, #146	; 0x92
 80060aa:	22b4      	movs	r2, #180	; 0xb4
 80060ac:	21a7      	movs	r1, #167	; 0xa7
 80060ae:	f7fe f829 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(btn_LEDScreen);
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	33e0      	adds	r3, #224	; 0xe0
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7ff fbb4 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4618      	mov	r0, r3
 80060c4:	3770      	adds	r7, #112	; 0x70
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bdb0      	pop	{r4, r5, r7, pc}
 80060ca:	bf00      	nop
 80060cc:	080276e4 	.word	0x080276e4
 80060d0:	08006163 	.word	0x08006163

080060d4 <_ZN19Screen_HomeViewBaseD1Ev>:

Screen_HomeViewBase::~Screen_HomeViewBase()
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	4a12      	ldr	r2, [pc, #72]	; (8006128 <_ZN19Screen_HomeViewBaseD1Ev+0x54>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fa45 	bl	8006578 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	33e0      	adds	r3, #224	; 0xe0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa62 	bl	80065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3398      	adds	r3, #152	; 0x98
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fdf3 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	336c      	adds	r3, #108	; 0x6c
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fd5e 	bl	8005bc8 <_ZN8touchgfx3BoxD1Ev>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3340      	adds	r3, #64	; 0x40
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fd59 	bl	8005bc8 <_ZN8touchgfx3BoxD1Ev>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fe19 	bl	8005d50 <_ZN8touchgfx4ViewI20Screen_HomePresenterED1Ev>
{

}
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	080276e4 	.word	0x080276e4

0800612c <_ZN19Screen_HomeViewBaseD0Ev>:
Screen_HomeViewBase::~Screen_HomeViewBase()
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
}
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ffcd 	bl	80060d4 <_ZN19Screen_HomeViewBaseD1Ev>
 800613a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f01f f857 	bl	80251f2 <_ZdlPvj>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZN19Screen_HomeViewBase11setupScreenEv>:

void Screen_HomeViewBase::setupScreen()
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]

}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <_ZN19Screen_HomeViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen_HomeViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
    if (&src == &btn_LEDScreen)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	33e0      	adds	r3, #224	; 0xe0
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d106      	bne.n	8006184 <_ZN19Screen_HomeViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //GoTo_Screen_LED
        //When btn_LEDScreen clicked change screen to Screen_LED
        //Go to Screen_LED with screen transition towards East
        application().gotoScreen_LEDScreenCoverTransitionEast();
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fdde 	bl	8005d38 <_ZN19Screen_HomeViewBase11applicationEv>
 800617c:	4603      	mov	r3, r0
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fb50 	bl	8004824 <_ZN23FrontendApplicationBase39gotoScreen_LEDScreenCoverTransitionEastEv>
    }
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZN8touchgfx4ViewI20Screen_HomePresenterEC1Ev>:
    View()
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4618      	mov	r0, r3
 8006198:	f014 fb2c 	bl	801a7f4 <_ZN8touchgfx6ScreenC1Ev>
 800619c:	4a05      	ldr	r2, [pc, #20]	; (80061b4 <_ZN8touchgfx4ViewI20Screen_HomePresenterEC1Ev+0x28>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	08027870 	.word	0x08027870

080061b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	4a05      	ldr	r2, [pc, #20]	; (80061d8 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fd6b 	bl	8005ca4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	080278a4 	.word	0x080278a4

080061dc <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff ffe7 	bl	80061b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80061ea:	2134      	movs	r1, #52	; 0x34
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f01f f800 	bl	80251f2 <_ZdlPvj>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class ImageButtonStyle : public T
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3334      	adds	r3, #52	; 0x34
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fcb8 	bl	8005b84 <_ZN8touchgfx5ImageD1Ev>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff ffce 	bl	80061b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	080277d0 	.word	0x080277d0

0800622c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ffe1 	bl	80061fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800623a:	2164      	movs	r1, #100	; 0x64
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f01e ffd8 	bl	80251f2 <_ZdlPvj>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
        : T()
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f8e6 	bl	8006428 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3364      	adds	r3, #100	; 0x64
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fb36 	bl	80058d8 <_ZN8touchgfx8TextAreaC1Ev>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	33ac      	adds	r3, #172	; 0xac
 8006270:	4618      	mov	r0, r3
 8006272:	f7fc f81f 	bl	80022b4 <_ZN8touchgfx9colortypeC1Ev>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	33b0      	adds	r3, #176	; 0xb0
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc f81a 	bl	80022b4 <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3364      	adds	r3, #100	; 0x64
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f00f fca3 	bl	8015bd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08027730 	.word	0x08027730

0800629c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	08027940 	.word	0x08027940

080062bc <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4639      	mov	r1, r7
 80062c8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ffe4 	bl	800629c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80062d4:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3308      	adds	r3, #8
 80062e4:	463a      	mov	r2, r7
 80062e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	08027718 	.word	0x08027718

080062fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
     * Sets the bitmaps.
     *
     * @param  bmpReleased The bitmap released.
     * @param  bmpPressed  The bitmap pressed.
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
    {
        up = bmpReleased;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        down = bmpPressed;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        ImageButtonStyle::setWidthHeight(down);
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3362      	adds	r3, #98	; 0x62
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7ff f9de 	bl	80056e6 <_ZN8touchgfx8Drawable14setWidthHeightERKNS_6BitmapE>

        handlePressedUpdated();
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	338c      	adds	r3, #140	; 0x8c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	4798      	blx	r3
    }
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>:
     * Sets bitmap x and y.
     *
     * @param  x An uint16_t to process.
     * @param  y An uint16_t to process.
     */
    void setBitmapXY(uint16_t x, uint16_t y)
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	807b      	strh	r3, [r7, #2]
 800634a:	4613      	mov	r3, r2
 800634c:	803b      	strh	r3, [r7, #0]
    {
        buttonImage.setXY(x, y);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3334      	adds	r3, #52	; 0x34
 8006352:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006356:	f9b7 2000 	ldrsh.w	r2, [r7]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd ff1e 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    }
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3364      	adds	r3, #100	; 0x64
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f011 f96d 	bl	8017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3364      	adds	r3, #100	; 0x64
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4611      	mov	r1, r2
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff f996 	bl	80056b8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b087      	sub	sp, #28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	4608      	mov	r0, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	461a      	mov	r2, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	817b      	strh	r3, [r7, #10]
 80063a6:	460b      	mov	r3, r1
 80063a8:	813b      	strh	r3, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80063b4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80063b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063bc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80063c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4623      	mov	r3, r4
 80063c8:	f7fd fe9c 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd90      	pop	{r4, r7, pc}

080063d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        colorPressed = newColorPressed;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        handlePressedUpdated();
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	338c      	adds	r3, #140	; 0x8c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	4798      	blx	r3
    }
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fae8 	bl	80059e4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8006414:	4a03      	ldr	r2, [pc, #12]	; (8006424 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	080278a4 	.word	0x080278a4

08006428 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    ImageButtonStyle()
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4618      	mov	r0, r3
 8006434:	2334      	movs	r3, #52	; 0x34
 8006436:	461a      	mov	r2, r3
 8006438:	2100      	movs	r1, #0
 800643a:	f01f f90e 	bl	802565a <memset>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ffdf 	bl	8006404 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8006446:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x88>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f8f6 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006460:	f107 030c 	add.w	r3, r7, #12
 8006464:	4619      	mov	r1, r3
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fb56 	bl	8005b18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3360      	adds	r3, #96	; 0x60
 8006470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff f8e9 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3362      	adds	r3, #98	; 0x62
 800647e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff f8e2 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
        buttonImage.setXY(0, 0);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3334      	adds	r3, #52	; 0x34
 800648c:	2200      	movs	r2, #0
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd fe83 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3334      	adds	r3, #52	; 0x34
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f00f fb98 	bl	8015bd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd90      	pop	{r4, r7, pc}
 80064ae:	bf00      	nop
 80064b0:	080277d0 	.word	0x080277d0

080064b4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    }
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	08027940 	.word	0x08027940

080064d4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    }
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ffe9 	bl	80064b4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80064e2:	2104      	movs	r1, #4
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f01e fe84 	bl	80251f2 <_ZdlPvj>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    Image buttonImage; ///< The button image
    Bitmap up;         ///< The image to display when button is released.
    Bitmap down;       ///< The image to display when button is pressed.

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
    {
        buttonImage.setBitmap(T::getPressed() ? down : up);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff faa3 	bl	8005a50 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3362      	adds	r3, #98	; 0x62
 8006514:	e001      	b.n	800651a <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3360      	adds	r3, #96	; 0x60
 800651a:	4619      	mov	r1, r3
 800651c:	4620      	mov	r0, r4
 800651e:	f011 f8ed 	bl	80176fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fae2 	bl	8005aee <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}

08006532 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8006532:	b590      	push	{r4, r7, lr}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fa84 	bl	8005a50 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	33b0      	adds	r3, #176	; 0xb0
 8006552:	e001      	b.n	8006558 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	33ac      	adds	r3, #172	; 0xac
 8006558:	60fc      	str	r4, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60bb      	str	r3, [r7, #8]
        color = newColor;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006564:	bf00      	nop
        T::handlePressedUpdated();
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff ffc3 	bl	80064f4 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bd90      	pop	{r4, r7, pc}
	...

08006578 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4a05      	ldr	r2, [pc, #20]	; (8006598 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff93 	bl	80064b4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08027718 	.word	0x08027718

0800659c <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff ffe7 	bl	8006578 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80065aa:	2110      	movs	r1, #16
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f01e fe20 	bl	80251f2 <_ZdlPvj>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3364      	adds	r3, #100	; 0x64
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fb8a 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fe10 	bl	80061fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	08027730 	.word	0x08027730

080065ec <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ffe1 	bl	80065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80065fa:	21b4      	movs	r1, #180	; 0xb4
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f01e fdf8 	bl	80251f2 <_ZdlPvj>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68d2      	ldr	r2, [r2, #12]
 800661e:	1052      	asrs	r2, r2, #1
 8006620:	1898      	adds	r0, r3, r2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	e00a      	b.n	800664a <_ZN8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68d2      	ldr	r2, [r2, #12]
 800663c:	1052      	asrs	r2, r2, #1
 800663e:	4413      	add	r3, r2
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6892      	ldr	r2, [r2, #8]
 8006646:	4413      	add	r3, r2
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	4798      	blx	r3
    }
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d010      	beq.n	8006688 <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 800667e:	2300      	movs	r3, #0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <_ZNK8touchgfx8CallbackI19Screen_HomeViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8006688:	2300      	movs	r3, #0
    }
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8006696:	b590      	push	{r4, r7, lr}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff f9df 	bl	8005a6a <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80066ac:	4603      	mov	r3, r0
 80066ae:	4619      	mov	r1, r3
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff f94f 	bl	8005954 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f804 	bl	80066c6 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}

080066c6 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 80066c6:	b590      	push	{r4, r7, lr}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
    {
        buttonImage.setAlpha(T::getAlpha());
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff f9c7 	bl	8005a6a <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80066dc:	4603      	mov	r3, r0
 80066de:	4619      	mov	r1, r3
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7ff fa3f 	bl	8005b64 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fa0a 	bl	8005b02 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}

080066f6 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <_ZN18Screen_LEDViewBase11applicationEv>:
    Screen_LEDViewBase();
    virtual ~Screen_LEDViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800671e:	f012 fd29 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8006722:	4603      	mov	r3, r0
    }
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <_ZN8touchgfx4ViewI19Screen_LEDPresenterED1Ev>:
class View : public Screen
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	4a05      	ldr	r2, [pc, #20]	; (800674c <_ZN8touchgfx4ViewI19Screen_LEDPresenterED1Ev+0x20>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff f81b 	bl	8005778 <_ZN8touchgfx6ScreenD1Ev>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	08027a40 	.word	0x08027a40

08006750 <_ZN8touchgfx4ViewI19Screen_LEDPresenterED0Ev>:
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ffe7 	bl	800672c <_ZN8touchgfx4ViewI19Screen_LEDPresenterED1Ev>
 800675e:	2140      	movs	r1, #64	; 0x40
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f01e fd46 	bl	80251f2 <_ZdlPvj>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <_ZN18Screen_LEDViewBaseC1Ev>:
#include <gui_generated/screen_led_screen/Screen_LEDViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Screen_LEDViewBase::Screen_LEDViewBase() :
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b0c2      	sub	sp, #264	; 0x108
 8006774:	af02      	add	r7, sp, #8
 8006776:	6178      	str	r0, [r7, #20]
    flexButtonCallback(this, &Screen_LEDViewBase::flexButtonCallbackHandler)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fcda 	bl	8007134 <_ZN8touchgfx4ViewI19Screen_LEDPresenterEC1Ev>
 8006780:	4ae4      	ldr	r2, [pc, #912]	; (8006b14 <_ZN18Screen_LEDViewBaseC1Ev+0x3a4>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3340      	adds	r3, #64	; 0x40
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f85c 	bl	8005848 <_ZN8touchgfx3BoxC1Ev>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	336c      	adds	r3, #108	; 0x6c
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff f857 	bl	8005848 <_ZN8touchgfx3BoxC1Ev>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	3398      	adds	r3, #152	; 0x98
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff f89a 	bl	80058d8 <_ZN8touchgfx8TextAreaC1Ev>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	33e0      	adds	r3, #224	; 0xe0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fd4f 	bl	800624c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fd49 	bl	800624c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f503 7412 	add.w	r4, r3, #584	; 0x248
 80067c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe ff3f 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 80067ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067d2:	4619      	mov	r1, r3
 80067d4:	4620      	mov	r0, r4
 80067d6:	f7ff f99f 	bl	8005b18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f503 741d 	add.w	r4, r3, #628	; 0x274
 80067e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe ff2f 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 80067ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067f2:	4619      	mov	r1, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff f98f 	bl	8005b18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff f869 	bl	80058d8 <_ZN8touchgfx8TextAreaC1Ev>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff f863 	bl	80058d8 <_ZN8touchgfx8TextAreaC1Ev>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff fd17 	bl	800624c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8006824:	4bbc      	ldr	r3, [pc, #752]	; (8006b18 <_ZN18Screen_LEDViewBaseC1Ev+0x3a8>)
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
 8006828:	2300      	movs	r3, #0
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
 800682c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006830:	cb0c      	ldmia	r3, {r2, r3}
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	f000 fc94 	bl	8007160 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800683e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006848:	2200      	movs	r2, #0
 800684a:	2100      	movs	r1, #0
 800684c:	f7fd fc5a 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006856:	2300      	movs	r3, #0
 8006858:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800685c:	2300      	movs	r3, #0
 800685e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8006862:	2300      	movs	r3, #0
 8006864:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006868:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	461a      	mov	r2, r3
 8006870:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	431a      	orrs	r2, r3
 8006878:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800687c:	4313      	orrs	r3, r2
 800687e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006882:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fed0 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 800688e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006892:	4619      	mov	r1, r3
 8006894:	4620      	mov	r0, r4
 8006896:	f7fe fffb 	bl	8005890 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3340      	adds	r3, #64	; 0x40
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7fe ffc0 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80068ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80068b8:	2200      	movs	r2, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	f7fd fc22 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80068c6:	2310      	movs	r3, #16
 80068c8:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 80068d2:	235e      	movs	r3, #94	; 0x5e
 80068d4:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 80068d8:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	461a      	mov	r2, r3
 80068e0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	431a      	orrs	r2, r3
 80068e8:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80068f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fe98 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 80068fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006902:	4619      	mov	r1, r3
 8006904:	4620      	mov	r0, r4
 8006906:	f7fe ffc3 	bl	8005890 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	336c      	adds	r3, #108	; 0x6c
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f7fe ff88 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 17);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3398      	adds	r3, #152	; 0x98
 800691c:	2211      	movs	r2, #17
 800691e:	21b8      	movs	r1, #184	; 0xb8
 8006920:	4618      	mov	r0, r3
 8006922:	f7fd fc3b 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800692c:	23fa      	movs	r3, #250	; 0xfa
 800692e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8006932:	23f7      	movs	r3, #247	; 0xf7
 8006934:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8006938:	23f7      	movs	r3, #247	; 0xf7
 800693a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 800693e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	461a      	mov	r2, r3
 8006946:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	431a      	orrs	r2, r3
 800694e:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8006952:	4313      	orrs	r3, r2
 8006954:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006958:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fe65 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006968:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
        color = newColor;
 800696e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006976:	bf00      	nop
    textHello.setLinespacing(0);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3398      	adds	r3, #152	; 0x98
 800697c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006980:	2300      	movs	r3, #0
 8006982:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 8006986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800698a:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800698e:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8006990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3384      	adds	r3, #132	; 0x84
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 800699e:	463a      	mov	r2, r7
 80069a0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80069ac:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80069b0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80069b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80069b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80069ba:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GJT6));
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80069c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069c6:	2107      	movs	r1, #7
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe ff6f 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 80069ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069d2:	4619      	mov	r1, r3
 80069d4:	4620      	mov	r0, r4
 80069d6:	f010 fe3f 	bl	8017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80069da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd faca 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	3398      	adds	r3, #152	; 0x98
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7fe ff1b 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Btn_HW_LED.setBitmaps(Bitmap(BITMAP_BUTTON_ROUND_RELEASED_ID), Bitmap(BITMAP_BUTTON_ROUND_PRESSED_ID));
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80069f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069fc:	2103      	movs	r1, #3
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fe24 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006a04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a08:	2102      	movs	r1, #2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fe1e 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006a10:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006a14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff fc6e 	bl	80062fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    Btn_HW_LED.setBitmapXY(0, 0);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	33e0      	adds	r3, #224	; 0xe0
 8006a24:	2200      	movs	r2, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fc88 	bl	800633e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    Btn_HW_LED.setText(TypedText(T___SINGLEUSE_5NF2));
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8006a34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a38:	2106      	movs	r1, #6
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe ff36 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8006a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a44:	4619      	mov	r1, r3
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff fc8e 	bl	8006368 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8006a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fd fa91 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    Btn_HW_LED.setTextPosition(0, 22, 80, 84);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8006a5c:	2354      	movs	r3, #84	; 0x54
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2350      	movs	r3, #80	; 0x50
 8006a62:	2216      	movs	r2, #22
 8006a64:	2100      	movs	r1, #0
 8006a66:	f7ff fc95 	bl	8006394 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    Btn_HW_LED.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(10, 10, 10));
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8006a70:	23ff      	movs	r3, #255	; 0xff
 8006a72:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8006a76:	23ff      	movs	r3, #255	; 0xff
 8006a78:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8006a7c:	23ff      	movs	r3, #255	; 0xff
 8006a7e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8006a82:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	431a      	orrs	r2, r3
 8006a92:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006a9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fdc3 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aac:	461d      	mov	r5, r3
 8006aae:	230a      	movs	r3, #10
 8006ab0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8006ab4:	230a      	movs	r3, #10
 8006ab6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8006aba:	230a      	movs	r3, #10
 8006abc:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 8006ac0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006ada:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fda4 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aea:	461a      	mov	r2, r3
 8006aec:	4629      	mov	r1, r5
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff fc70 	bl	80063d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    Btn_HW_LED.setAction(flexButtonCallback);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe ffbe 	bl	8005a84 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Btn_HW_LED.setPosition(41, 94, 80, 84);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8006b0e:	2354      	movs	r3, #84	; 0x54
 8006b10:	e004      	b.n	8006b1c <_ZN18Screen_LEDViewBaseC1Ev+0x3ac>
 8006b12:	bf00      	nop
 8006b14:	080279f4 	.word	0x080279f4
 8006b18:	080070df 	.word	0x080070df
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2350      	movs	r3, #80	; 0x50
 8006b20:	225e      	movs	r2, #94	; 0x5e
 8006b22:	2129      	movs	r1, #41	; 0x29
 8006b24:	f7fd faee 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(Btn_HW_LED);
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	33e0      	adds	r3, #224	; 0xe0
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fe fe79 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Btn_SW_LED.setBitmaps(Bitmap(BITMAP_BUTTON_ROUND_RELEASED_ID), Bitmap(BITMAP_BUTTON_ROUND_PRESSED_ID));
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 8006b3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b40:	2103      	movs	r1, #3
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fd82 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006b48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fd7c 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006b54:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff fbcc 	bl	80062fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    Btn_SW_LED.setBitmapXY(0, 0);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fbe5 	bl	800633e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    Btn_SW_LED.setText(TypedText(T___SINGLEUSE_GIAB));
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 8006b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b7e:	2105      	movs	r1, #5
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fe93 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8006b86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fbeb 	bl	8006368 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8006b92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd f9ee 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    Btn_SW_LED.setTextPosition(0, 22, 80, 84);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8006ba2:	2354      	movs	r3, #84	; 0x54
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2350      	movs	r3, #80	; 0x50
 8006ba8:	2216      	movs	r2, #22
 8006baa:	2100      	movs	r1, #0
 8006bac:	f7ff fbf2 	bl	8006394 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    Btn_SW_LED.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(10, 10, 10));
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 8006bb6:	23ff      	movs	r3, #255	; 0xff
 8006bb8:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8006bbc:	23ff      	movs	r3, #255	; 0xff
 8006bbe:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8006bc2:	23ff      	movs	r3, #255	; 0xff
 8006bc4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8006bc8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006be2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006be6:	4611      	mov	r1, r2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fd20 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	230a      	movs	r3, #10
 8006bf6:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006c00:	230a      	movs	r3, #10
 8006c02:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8006c06:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	431a      	orrs	r2, r3
 8006c16:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c24:	4611      	mov	r1, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fd01 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c30:	461a      	mov	r2, r3
 8006c32:	4629      	mov	r1, r5
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff fbcd 	bl	80063d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    Btn_SW_LED.setAction(flexButtonCallback);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7fe ff1b 	bl	8005a84 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Btn_SW_LED.setPosition(357, 94, 80, 84);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8006c54:	2354      	movs	r3, #84	; 0x54
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2350      	movs	r3, #80	; 0x50
 8006c5a:	225e      	movs	r2, #94	; 0x5e
 8006c5c:	f240 1165 	movw	r1, #357	; 0x165
 8006c60:	f7fd fa50 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(Btn_SW_LED);
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fdda 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    SW_LED_Off.setXY(154, 94);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006c7a:	225e      	movs	r2, #94	; 0x5e
 8006c7c:	219a      	movs	r1, #154	; 0x9a
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd fa8c 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    SW_LED_Off.setBitmap(touchgfx::Bitmap(BITMAP_LED_OFF_ID));
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8006c8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006c8e:	2104      	movs	r1, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fcdb 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006c96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f010 fd2d 	bl	80176fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(SW_LED_Off);
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7fe fdbb 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    SW_LED_On.setXY(154, 94);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8006cb8:	225e      	movs	r2, #94	; 0x5e
 8006cba:	219a      	movs	r1, #154	; 0x9a
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd fa6d 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    SW_LED_On.setBitmap(touchgfx::Bitmap(BITMAP_LED_ON_ID));
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f503 741d 	add.w	r4, r3, #628	; 0x274
 8006cc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ccc:	2105      	movs	r1, #5
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fcbc 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006cd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f010 fd0e 	bl	80176fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    SW_LED_On.setVisible(false);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fd04 	bl	80066f6 <_ZN8touchgfx8Drawable10setVisibleEb>
    add(SW_LED_On);
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f7fe fd95 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(27, 172);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006d04:	22ac      	movs	r2, #172	; 0xac
 8006d06:	211b      	movs	r1, #27
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fd fa47 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(30, 156, 178));
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8006d14:	231e      	movs	r3, #30
 8006d16:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8006d1a:	239c      	movs	r3, #156	; 0x9c
 8006d1c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8006d20:	23b2      	movs	r3, #178	; 0xb2
 8006d22:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8006d26:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	431a      	orrs	r2, r3
 8006d36:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fc71 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d50:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8006d54:	623b      	str	r3, [r7, #32]
        color = newColor;
 8006d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006d5e:	bf00      	nop
    textArea1.setLinespacing(0);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        linespace = space;
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8006d78:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3384      	adds	r3, #132	; 0x84
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8006d88:	463a      	mov	r2, r7
 8006d8a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4798      	blx	r3
 8006d92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006d96:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8006d9a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8006da4:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8P9W));
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8006dac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006db0:	2104      	movs	r1, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fd7a 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8006db8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f010 fc4a 	bl	8017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006dc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd f8d5 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fe fd25 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1_1.setXY(350, 172);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8006de4:	22ac      	movs	r2, #172	; 0xac
 8006de6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd f9d6 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(30, 156, 178));
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8006df6:	231e      	movs	r3, #30
 8006df8:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006dfc:	239c      	movs	r3, #156	; 0x9c
 8006dfe:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 8006e02:	23b2      	movs	r3, #178	; 0xb2
 8006e04:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 8006e08:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	431a      	orrs	r2, r3
 8006e18:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fc00 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e32:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8006e36:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8006e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006e40:	bf00      	nop
    textArea1_1.setLinespacing(0);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8006e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
        linespace = space;
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e56:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8006e5a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3384      	adds	r3, #132	; 0x84
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006e78:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8006e7c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8006e86:	bf00      	nop
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2A6N));
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8006e8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e92:	2103      	movs	r1, #3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fd09 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8006e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f010 fbd9 	bl	8017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006ea6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd f864 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1_1);
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fe fcb4 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    btn_HomeScreen.setBitmaps(Bitmap(BITMAP_BUTTON_LARGE_RELEASED_ID), Bitmap(BITMAP_BUTTON_LARGE_PRESSED_ID));
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8006ec6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fbbd 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006ed2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fbb7 	bl	800564c <_ZN8touchgfx6BitmapC1Et>
 8006ede:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006ee2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff fa07 	bl	80062fc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    btn_HomeScreen.setBitmapXY(0, 0);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fa20 	bl	800633e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    btn_HomeScreen.setText(TypedText(T___SINGLEUSE_WO1U));
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8006f04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fcce 	bl	80058ac <_ZN8touchgfx9TypedTextC1Et>
 8006f10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f14:	4619      	mov	r1, r3
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff fa26 	bl	8006368 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8006f1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd f829 	bl	8003f78 <_ZN8touchgfx9TypedTextD1Ev>
    btn_HomeScreen.setTextPosition(0, 10, 146, 70);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8006f2c:	2346      	movs	r3, #70	; 0x46
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	2392      	movs	r3, #146	; 0x92
 8006f32:	220a      	movs	r2, #10
 8006f34:	2100      	movs	r1, #0
 8006f36:	f7ff fa2d 	bl	8006394 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    btn_HomeScreen.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(10, 10, 10));
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8006f40:	23ff      	movs	r3, #255	; 0xff
 8006f42:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8006f46:	23ff      	movs	r3, #255	; 0xff
 8006f48:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8006f4c:	23ff      	movs	r3, #255	; 0xff
 8006f4e:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8006f52:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	431a      	orrs	r2, r3
 8006f62:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fb5b 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	230a      	movs	r3, #10
 8006f80:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8006f84:	230a      	movs	r3, #10
 8006f86:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8006f8a:	230a      	movs	r3, #10
 8006f8c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8006f90:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	461a      	mov	r2, r3
 8006f98:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006faa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe fb3c 	bl	800562e <_ZN8touchgfx9colortypeC1Em>
 8006fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fba:	461a      	mov	r2, r3
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff fa08 	bl	80063d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    btn_HomeScreen.setAction(flexButtonCallback);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f503 724c 	add.w	r2, r3, #816	; 0x330
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe fd56 	bl	8005a84 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    btn_HomeScreen.setPosition(167, 202, 146, 70);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8006fde:	2346      	movs	r3, #70	; 0x46
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2392      	movs	r3, #146	; 0x92
 8006fe4:	22ca      	movs	r2, #202	; 0xca
 8006fe6:	21a7      	movs	r1, #167	; 0xa7
 8006fe8:	f7fd f88c 	bl	8004104 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(btn_HomeScreen);
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fc16 	bl	8005828 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007004:	46bd      	mov	sp, r7
 8007006:	bdb0      	pop	{r4, r5, r7, pc}

08007008 <_ZN18Screen_LEDViewBaseD1Ev>:

Screen_LEDViewBase::~Screen_LEDViewBase()
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <_ZN18Screen_LEDViewBaseD1Ev+0x9c>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f8bf 	bl	80071a0 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fac7 	bl	80065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe fe57 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fe51 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fd99 	bl	8005b84 <_ZN8touchgfx5ImageD1Ev>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fd93 	bl	8005b84 <_ZN8touchgfx5ImageD1Ev>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff faa9 	bl	80065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	33e0      	adds	r3, #224	; 0xe0
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff faa4 	bl	80065bc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3398      	adds	r3, #152	; 0x98
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fe35 	bl	8005ce8 <_ZN8touchgfx8TextAreaD1Ev>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	336c      	adds	r3, #108	; 0x6c
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fda0 	bl	8005bc8 <_ZN8touchgfx3BoxD1Ev>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3340      	adds	r3, #64	; 0x40
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd9b 	bl	8005bc8 <_ZN8touchgfx3BoxD1Ev>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fb49 	bl	800672c <_ZN8touchgfx4ViewI19Screen_LEDPresenterED1Ev>
{

}
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	080279f4 	.word	0x080279f4

080070a8 <_ZN18Screen_LEDViewBaseD0Ev>:
Screen_LEDViewBase::~Screen_LEDViewBase()
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
}
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ffa9 	bl	8007008 <_ZN18Screen_LEDViewBaseD1Ev>
 80070b6:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f01e f899 	bl	80251f2 <_ZdlPvj>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <_ZN18Screen_LEDViewBase11setupScreenEv>:

void Screen_LEDViewBase::setupScreen()
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]

}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <_ZN18Screen_LEDViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen_LEDViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
    if (&src == &Btn_SW_LED)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d104      	bne.n	80070fe <_ZN18Screen_LEDViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>
    {
        //SWToggleSwLED
        //When Btn_SW_LED clicked execute C++ code
        //Execute C++ code
        presenter->swButtonSwLedToggle();
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fda4 	bl	8007c46 <_ZN19Screen_LEDPresenter19swButtonSwLedToggleEv>
    }
    if (&src == &Btn_HW_LED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	33e0      	adds	r3, #224	; 0xe0
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d104      	bne.n	8007112 <_ZN18Screen_LEDViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x34>
    {
        //SWToggleHwLED
        //When Btn_HW_LED clicked execute C++ code
        //Execute C++ code
        presenter->swButtonHwLedToggle();
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fd8d 	bl	8007c2c <_ZN19Screen_LEDPresenter19swButtonHwLedToggleEv>
    }
    if (&src == &btn_HomeScreen)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d106      	bne.n	800712c <_ZN18Screen_LEDViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x4e>
    {
        //GoTo_Screen_Home
        //When btn_HomeScreen clicked change screen to Screen_Home
        //Go to Screen_Home with screen transition towards East
        application().gotoScreen_HomeScreenCoverTransitionEast();
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff faf9 	bl	8006716 <_ZN18Screen_LEDViewBase11applicationEv>
 8007124:	4603      	mov	r3, r0
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd faf0 	bl	800470c <_ZN23FrontendApplicationBase40gotoScreen_HomeScreenCoverTransitionEastEv>
    }
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <_ZN8touchgfx4ViewI19Screen_LEDPresenterEC1Ev>:
    View()
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4618      	mov	r0, r3
 8007140:	f013 fb58 	bl	801a7f4 <_ZN8touchgfx6ScreenC1Ev>
 8007144:	4a05      	ldr	r2, [pc, #20]	; (800715c <_ZN8touchgfx4ViewI19Screen_LEDPresenterEC1Ev+0x28>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08027a40 	.word	0x08027a40

08007160 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4639      	mov	r1, r7
 800716c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff f892 	bl	800629c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3308      	adds	r3, #8
 8007188:	463a      	mov	r2, r7
 800718a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800718e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	08027a28 	.word	0x08027a28

080071a0 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff f97f 	bl	80064b4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	08027a28 	.word	0x08027a28

080071c4 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ffe7 	bl	80071a0 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80071d2:	2110      	movs	r1, #16
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f01e f80c 	bl	80251f2 <_ZdlPvj>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68d2      	ldr	r2, [r2, #12]
 80071f6:	1052      	asrs	r2, r2, #1
 80071f8:	1898      	adds	r0, r3, r2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	e00a      	b.n	8007222 <_ZN8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68d2      	ldr	r2, [r2, #12]
 8007214:	1052      	asrs	r2, r2, #1
 8007216:	4413      	add	r3, r2
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6892      	ldr	r2, [r2, #8]
 800721e:	4413      	add	r3, r2
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	4798      	blx	r3
    }
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d107      	bne.n	8007256 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8007256:	2300      	movs	r3, #0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <_ZNK8touchgfx8CallbackI18Screen_LEDViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8007260:	2300      	movs	r3, #0
    }
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 21, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
 8007274:	4801      	ldr	r0, [pc, #4]	; (800727c <__tcf_0+0xc>)
 8007276:	f7fc fe5d 	bl	8003f34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800727a:	bd80      	pop	{r7, pc}
 800727c:	24001860 	.word	0x24001860

08007280 <_Z23getFont_verdana_10_4bppv>:
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 21, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007286:	4b21      	ldr	r3, [pc, #132]	; (800730c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f3bf 8f5b 	dmb	ish
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	bf0c      	ite	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	2300      	movne	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d030      	beq.n	8007302 <_Z23getFont_verdana_10_4bppv+0x82>
 80072a0:	481a      	ldr	r0, [pc, #104]	; (800730c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80072a2:	f01d ffa8 	bl	80251f6 <__cxa_guard_acquire>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d025      	beq.n	8007302 <_Z23getFont_verdana_10_4bppv+0x82>
 80072b6:	2300      	movs	r3, #0
 80072b8:	930c      	str	r3, [sp, #48]	; 0x30
 80072ba:	2300      	movs	r3, #0
 80072bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80072be:	2300      	movs	r3, #0
 80072c0:	930a      	str	r3, [sp, #40]	; 0x28
 80072c2:	233f      	movs	r3, #63	; 0x3f
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <_Z23getFont_verdana_10_4bppv+0x90>)
 80072c8:	9308      	str	r3, [sp, #32]
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <_Z23getFont_verdana_10_4bppv+0x94>)
 80072cc:	9307      	str	r3, [sp, #28]
 80072ce:	2301      	movs	r3, #1
 80072d0:	9306      	str	r3, [sp, #24]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9305      	str	r3, [sp, #20]
 80072d6:	2301      	movs	r3, #1
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	2304      	movs	r3, #4
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	2300      	movs	r3, #0
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	230a      	movs	r3, #10
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	230c      	movs	r3, #12
 80072ec:	2215      	movs	r2, #21
 80072ee:	490a      	ldr	r1, [pc, #40]	; (8007318 <_Z23getFont_verdana_10_4bppv+0x98>)
 80072f0:	480a      	ldr	r0, [pc, #40]	; (800731c <_Z23getFont_verdana_10_4bppv+0x9c>)
 80072f2:	f7fe f8fb 	bl	80054ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072f6:	480a      	ldr	r0, [pc, #40]	; (8007320 <_Z23getFont_verdana_10_4bppv+0xa0>)
 80072f8:	f01d ffc8 	bl	802528c <atexit>
 80072fc:	4803      	ldr	r0, [pc, #12]	; (800730c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80072fe:	f01d ff86 	bl	802520e <__cxa_guard_release>
    return verdana_10_4bpp;
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2400188c 	.word	0x2400188c
 8007310:	0802847c 	.word	0x0802847c
 8007314:	080284bc 	.word	0x080284bc
 8007318:	90000928 	.word	0x90000928
 800731c:	24001860 	.word	0x24001860
 8007320:	08007271 	.word	0x08007271

08007324 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
 8007328:	4801      	ldr	r0, [pc, #4]	; (8007330 <__tcf_0+0xc>)
 800732a:	f7fc fe03 	bl	8003f34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800732e:	bd80      	pop	{r7, pc}
 8007330:	24001890 	.word	0x24001890

08007334 <_Z23getFont_verdana_20_4bppv>:
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	; 0x38
 8007338:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 23, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800733a:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f3bf 8f5b 	dmb	ish
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d030      	beq.n	80073b6 <_Z23getFont_verdana_20_4bppv+0x82>
 8007354:	481a      	ldr	r0, [pc, #104]	; (80073c0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007356:	f01d ff4e 	bl	80251f6 <__cxa_guard_acquire>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d025      	beq.n	80073b6 <_Z23getFont_verdana_20_4bppv+0x82>
 800736a:	2300      	movs	r3, #0
 800736c:	930c      	str	r3, [sp, #48]	; 0x30
 800736e:	2300      	movs	r3, #0
 8007370:	930b      	str	r3, [sp, #44]	; 0x2c
 8007372:	2300      	movs	r3, #0
 8007374:	930a      	str	r3, [sp, #40]	; 0x28
 8007376:	233f      	movs	r3, #63	; 0x3f
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800737c:	9308      	str	r3, [sp, #32]
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <_Z23getFont_verdana_20_4bppv+0x94>)
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	2301      	movs	r3, #1
 8007384:	9306      	str	r3, [sp, #24]
 8007386:	2300      	movs	r3, #0
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	2301      	movs	r3, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	2304      	movs	r3, #4
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	2300      	movs	r3, #0
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	2300      	movs	r3, #0
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	2314      	movs	r3, #20
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	2318      	movs	r3, #24
 80073a0:	2217      	movs	r2, #23
 80073a2:	490a      	ldr	r1, [pc, #40]	; (80073cc <_Z23getFont_verdana_20_4bppv+0x98>)
 80073a4:	480a      	ldr	r0, [pc, #40]	; (80073d0 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80073a6:	f7fe f8a1 	bl	80054ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80073aa:	480a      	ldr	r0, [pc, #40]	; (80073d4 <_Z23getFont_verdana_20_4bppv+0xa0>)
 80073ac:	f01d ff6e 	bl	802528c <atexit>
 80073b0:	4803      	ldr	r0, [pc, #12]	; (80073c0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80073b2:	f01d ff2c 	bl	802520e <__cxa_guard_release>
    return verdana_20_4bpp;
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	240018bc 	.word	0x240018bc
 80073c4:	08028480 	.word	0x08028480
 80073c8:	080284c0 	.word	0x080284c0
 80073cc:	90000a50 	.word	0x90000a50
 80073d0:	24001890 	.word	0x24001890
 80073d4:	08007325 	.word	0x08007325

080073d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__tcf_0+0xc>)
 80073de:	f7fc fda9 	bl	8003f34 <_ZN8touchgfx13GeneratedFontD1Ev>
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	240018c0 	.word	0x240018c0

080073e8 <_Z23getFont_verdana_40_4bppv>:
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f3bf 8f5b 	dmb	ish
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d030      	beq.n	800746a <_Z23getFont_verdana_40_4bppv+0x82>
 8007408:	481a      	ldr	r0, [pc, #104]	; (8007474 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800740a:	f01d fef4 	bl	80251f6 <__cxa_guard_acquire>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d025      	beq.n	800746a <_Z23getFont_verdana_40_4bppv+0x82>
 800741e:	2300      	movs	r3, #0
 8007420:	930c      	str	r3, [sp, #48]	; 0x30
 8007422:	2300      	movs	r3, #0
 8007424:	930b      	str	r3, [sp, #44]	; 0x2c
 8007426:	2300      	movs	r3, #0
 8007428:	930a      	str	r3, [sp, #40]	; 0x28
 800742a:	233f      	movs	r3, #63	; 0x3f
 800742c:	9309      	str	r3, [sp, #36]	; 0x24
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <_Z23getFont_verdana_40_4bppv+0x90>)
 8007430:	9308      	str	r3, [sp, #32]
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <_Z23getFont_verdana_40_4bppv+0x94>)
 8007434:	9307      	str	r3, [sp, #28]
 8007436:	2300      	movs	r3, #0
 8007438:	9306      	str	r3, [sp, #24]
 800743a:	2300      	movs	r3, #0
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	2301      	movs	r3, #1
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	2304      	movs	r3, #4
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	2300      	movs	r3, #0
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	2300      	movs	r3, #0
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	2328      	movs	r3, #40	; 0x28
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	2328      	movs	r3, #40	; 0x28
 8007454:	2201      	movs	r2, #1
 8007456:	490a      	ldr	r1, [pc, #40]	; (8007480 <_Z23getFont_verdana_40_4bppv+0x98>)
 8007458:	480a      	ldr	r0, [pc, #40]	; (8007484 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800745a:	f7fe f847 	bl	80054ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800745e:	480a      	ldr	r0, [pc, #40]	; (8007488 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8007460:	f01d ff14 	bl	802528c <atexit>
 8007464:	4803      	ldr	r0, [pc, #12]	; (8007474 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8007466:	f01d fed2 	bl	802520e <__cxa_guard_release>
    return verdana_40_4bpp;
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	240018ec 	.word	0x240018ec
 8007478:	080284b8 	.word	0x080284b8
 800747c:	080284c4 	.word	0x080284c4
 8007480:	90000b94 	.word	0x90000b94
 8007484:	240018c0 	.word	0x240018c0
 8007488:	080073d9 	.word	0x080073d9

0800748c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	460b      	mov	r3, r1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800749a:	2300      	movs	r3, #0
    }
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80074b0:	2300      	movs	r3, #0
    }
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80074c6:	2300      	movs	r3, #0
    }
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80074e2:	4a07      	ldr	r2, [pc, #28]	; (8007500 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80074e8:	4a06      	ldr	r2, [pc, #24]	; (8007504 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80074ee:	4a06      	ldr	r2, [pc, #24]	; (8007508 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	8013      	strh	r3, [r2, #0]
    }
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	24006dcc 	.word	0x24006dcc
 8007504:	24006dd4 	.word	0x24006dd4
 8007508:	24006dd0 	.word	0x24006dd0

0800750c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800750c:	b40e      	push	{r1, r2, r3}
 800750e:	b580      	push	{r7, lr}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8007516:	f107 0320 	add.w	r3, r7, #32
 800751a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f012 fd9c 	bl	801a060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007528:	4603      	mov	r3, r0
 800752a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800752c:	89fb      	ldrh	r3, [r7, #14]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007538:	b003      	add	sp, #12
 800753a:	4770      	bx	lr

0800753c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800753c:	b40c      	push	{r2, r3}
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800754a:	f107 031c 	add.w	r3, r7, #28
 800754e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007550:	78f9      	ldrb	r1, [r7, #3]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f012 fd82 	bl	801a060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800755c:	4603      	mov	r3, r0
 800755e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007560:	89fb      	ldrh	r3, [r7, #14]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800756c:	b002      	add	sp, #8
 800756e:	4770      	bx	lr

08007570 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007580:	2b00      	cmp	r3, #0
 8007582:	d016      	beq.n	80075b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3322      	adds	r3, #34	; 0x22
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	8adb      	ldrh	r3, [r3, #22]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8007592:	4b43      	ldr	r3, [pc, #268]	; (80076a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007594:	4a43      	ldr	r2, [pc, #268]	; (80076a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007596:	21c5      	movs	r1, #197	; 0xc5
 8007598:	4843      	ldr	r0, [pc, #268]	; (80076a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800759a:	f01d fe59 	bl	8025250 <__assert_func>
            return buffer[pos];
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	8a9b      	ldrh	r3, [r3, #20]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80075b2:	2300      	movs	r3, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d06a      	beq.n	800768e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f014 f82b 	bl	801b614 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3322      	adds	r3, #34	; 0x22
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	2301      	movs	r3, #1
 80075c6:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	8adb      	ldrh	r3, [r3, #22]
 80075cc:	8bfa      	ldrh	r2, [r7, #30]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d305      	bcc.n	80075de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80075d2:	4b36      	ldr	r3, [pc, #216]	; (80076ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80075d4:	4a36      	ldr	r2, [pc, #216]	; (80076b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80075d6:	21cb      	movs	r1, #203	; 0xcb
 80075d8:	4833      	ldr	r0, [pc, #204]	; (80076a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80075da:	f01d fe39 	bl	8025250 <__assert_func>
            const uint16_t index = pos + offset;
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	8a9a      	ldrh	r2, [r3, #20]
 80075e2:	8bfb      	ldrh	r3, [r7, #30]
 80075e4:	4413      	add	r3, r2
 80075e6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80075e8:	8bbb      	ldrh	r3, [r7, #28]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d801      	bhi.n	80075f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80075ee:	8bbb      	ldrh	r3, [r7, #28]
 80075f0:	e001      	b.n	80075f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80075f2:	8bbb      	ldrh	r3, [r7, #28]
 80075f4:	3b0a      	subs	r3, #10
 80075f6:	6a3a      	ldr	r2, [r7, #32]
 80075f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fc:	f640 123f 	movw	r2, #2367	; 0x93f
 8007600:	4293      	cmp	r3, r2
 8007602:	bf0c      	ite	eq
 8007604:	2301      	moveq	r3, #1
 8007606:	2300      	movne	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03f      	beq.n	800768e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3322      	adds	r3, #34	; 0x22
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	3222      	adds	r2, #34	; 0x22
 8007616:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	8ad2      	ldrh	r2, [r2, #22]
 800761c:	2a00      	cmp	r2, #0
 800761e:	d105      	bne.n	800762c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8007620:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007622:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007624:	21c5      	movs	r1, #197	; 0xc5
 8007626:	4820      	ldr	r0, [pc, #128]	; (80076a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007628:	f01d fe12 	bl	8025250 <__assert_func>
            return buffer[pos];
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	8a92      	ldrh	r2, [r2, #20]
 8007630:	4611      	mov	r1, r2
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	4613      	mov	r3, r2
 800763c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	8adb      	ldrh	r3, [r3, #22]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d806      	bhi.n	8007654 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8007646:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800764a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800764e:	4816      	ldr	r0, [pc, #88]	; (80076a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007650:	f01d fdfe 	bl	8025250 <__assert_func>
            const uint16_t index = pos + 1;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	8a9b      	ldrh	r3, [r3, #20]
 8007658:	3301      	adds	r3, #1
 800765a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800765c:	89bb      	ldrh	r3, [r7, #12]
 800765e:	2b09      	cmp	r3, #9
 8007660:	d801      	bhi.n	8007666 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8007662:	89bb      	ldrh	r3, [r7, #12]
 8007664:	e000      	b.n	8007668 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8007666:	2300      	movs	r3, #0
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	89f9      	ldrh	r1, [r7, #14]
 800766c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8007670:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3322      	adds	r3, #34	; 0x22
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	f640 133f 	movw	r3, #2367	; 0x93f
 800767c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	8a9b      	ldrh	r3, [r3, #20]
 8007682:	4619      	mov	r1, r3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	8afa      	ldrh	r2, [r7, #22]
 8007688:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800768c:	bf00      	nop
        }
    }
    return getNextChar();
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f013 fec2 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3728      	adds	r7, #40	; 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	08026ccc 	.word	0x08026ccc
 80076a4:	08026cd8 	.word	0x08026cd8
 80076a8:	08026d84 	.word	0x08026d84
 80076ac:	08026dd0 	.word	0x08026dd0
 80076b0:	08026de0 	.word	0x08026de0
 80076b4:	08026eb4 	.word	0x08026eb4
 80076b8:	08026ec0 	.word	0x08026ec0

080076bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f013 fe70 	bl	801b3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af02      	add	r7, sp, #8
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	1d38      	adds	r0, r7, #4
 80076dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80076e0:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80076e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076e6:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80076e8:	1d39      	adds	r1, r7, #4
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f011 f8e4 	bl	80188c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80076fc:	bf00      	nop
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d127      	bne.n	8007768 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	4a1e      	ldr	r2, [pc, #120]	; (8007794 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800771c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8007728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	4a18      	ldr	r2, [pc, #96]	; (8007798 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007738:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4413      	add	r3, r2
 8007742:	4a16      	ldr	r2, [pc, #88]	; (800779c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007744:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e00a      	b.n	8007768 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007754:	4a12      	ldr	r2, [pc, #72]	; (80077a0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8007756:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8007758:	4a12      	ldr	r2, [pc, #72]	; (80077a4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800775a:	4b10      	ldr	r3, [pc, #64]	; (800779c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800775c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8007762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007766:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800776e:	4a0f      	ldr	r2, [pc, #60]	; (80077ac <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007774:	f000 f83e 	bl	80077f4 <_ZN17TypedTextDatabase8getFontsEv>
 8007778:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800777a:	f000 f833 	bl	80077e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800777e:	4603      	mov	r3, r0
 8007780:	461a      	mov	r2, r3
 8007782:	4621      	mov	r1, r4
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff fea5 	bl	80074d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bd90      	pop	{r4, r7, pc}
 8007792:	bf00      	nop
 8007794:	240018f0 	.word	0x240018f0
 8007798:	240018f8 	.word	0x240018f8
 800779c:	240018fc 	.word	0x240018fc
 80077a0:	90000bc4 	.word	0x90000bc4
 80077a4:	90000ba4 	.word	0x90000ba4
 80077a8:	90000c74 	.word	0x90000c74
 80077ac:	240018f4 	.word	0x240018f4

080077b0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80077bc:	4b07      	ldr	r3, [pc, #28]	; (80077dc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	887b      	ldrh	r3, [r7, #2]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4413      	add	r3, r2
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	240018f8 	.word	0x240018f8
 80077e0:	240018fc 	.word	0x240018fc

080077e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80077e8:	2308      	movs	r3, #8
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	24001900 	.word	0x24001900

08007808 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d113      	bne.n	8007840 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800781e:	4293      	cmp	r3, r2
 8007820:	d10e      	bne.n	8007840 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8007822:	f7ff fd87 	bl	8007334 <_Z23getFont_verdana_20_4bppv>
 8007826:	4603      	mov	r3, r0
};
 8007828:	4a07      	ldr	r2, [pc, #28]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800782a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800782c:	f7ff fddc 	bl	80073e8 <_Z23getFont_verdana_40_4bppv>
 8007830:	4603      	mov	r3, r0
};
 8007832:	4a05      	ldr	r2, [pc, #20]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007834:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8007836:	f7ff fd23 	bl	8007280 <_Z23getFont_verdana_10_4bppv>
 800783a:	4603      	mov	r3, r0
};
 800783c:	4a02      	ldr	r2, [pc, #8]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800783e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	24001900 	.word	0x24001900

0800784c <_GLOBAL__sub_I_touchgfx_fonts>:
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
 8007850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007854:	2001      	movs	r0, #1
 8007856:	f7ff ffd7 	bl	8007808 <_Z41__static_initialization_and_destruction_0ii>
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f7fc feea 	bl	8004648 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8007874:	4a03      	ldr	r2, [pc, #12]	; (8007884 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]
{

}
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	0802725c 	.word	0x0802725c

08007888 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

#include <stdint.h>

Model::Model() : modelListener(0)
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
{

}
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <_ZN5Model4tickEv>:
	extern uint32_t userButtonPressed;
}


void Model::tick()
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

	#ifndef SIMULATOR
		if (userButtonPressed == 1)
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <_ZN5Model4tickEv+0x30>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10b      	bne.n	80078cc <_ZN5Model4tickEv+0x28>
		{
			userButtonPressed = 0;
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <_ZN5Model4tickEv+0x30>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
			modelListener->userButtonPressed();
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
		}
	#endif /*SIMULATOR*/

}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	240003ac 	.word	0x240003ac

080078d8 <_ZN5Model11toggleHwLedEv>:



void Model::toggleHwLed()
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	TOGGLE_LED3();
 80078e0:	f7f9 fb0c 	bl	8000efc <TOGGLE_LED3>
#endif /*SIMULATOR*/
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
    {
    }
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
    {
    }
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
    {
 800791c:	4a04      	ldr	r2, [pc, #16]	; (8007930 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
    }
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	08027b10 	.word	0x08027b10

08007934 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
    }
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff ffe9 	bl	8007914 <_ZN8touchgfx9PresenterD1Ev>
 8007942:	2104      	movs	r1, #4
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f01d fc54 	bl	80251f2 <_ZdlPvj>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
    {
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
    }
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	08027b10 	.word	0x08027b10

08007974 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	4a06      	ldr	r2, [pc, #24]	; (8007998 <_ZN13ModelListenerC1Ev+0x24>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	08027afc 	.word	0x08027afc

0800799c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <_ZN13ModelListenerD1Ev+0x1c>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	08027afc 	.word	0x08027afc

080079bc <_ZN13ModelListenerD0Ev>:
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ffe9 	bl	800799c <_ZN13ModelListenerD1Ev>
 80079ca:	2108      	movs	r1, #8
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f01d fc10 	bl	80251f2 <_ZdlPvj>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <_ZN13ModelListener17userButtonPressedEv>:

    virtual void userButtonPressed() {}
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <_ZN20Screen_HomePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_HomePresenter() {}
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <_ZN20Screen_HomePresenterD1Ev+0x30>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <_ZN20Screen_HomePresenterD1Ev+0x34>)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ffc7 	bl	800799c <_ZN13ModelListenerD1Ev>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ff7f 	bl	8007914 <_ZN8touchgfx9PresenterD1Ev>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	08027ad0 	.word	0x08027ad0
 8007a24:	08027ae8 	.word	0x08027ae8

08007a28 <_ZThn4_N20Screen_HomePresenterD1Ev>:
 8007a28:	f1a0 0004 	sub.w	r0, r0, #4
 8007a2c:	e7e0      	b.n	80079f0 <_ZN20Screen_HomePresenterD1Ev>
 8007a2e:	bf00      	nop

08007a30 <_ZN20Screen_HomePresenterD0Ev>:
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff ffd9 	bl	80079f0 <_ZN20Screen_HomePresenterD1Ev>
 8007a3e:	2110      	movs	r1, #16
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f01d fbd6 	bl	80251f2 <_ZdlPvj>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <_ZThn4_N20Screen_HomePresenterD0Ev>:
 8007a50:	f1a0 0004 	sub.w	r0, r0, #4
 8007a54:	e7ec      	b.n	8007a30 <_ZN20Screen_HomePresenterD0Ev>
	...

08007a58 <_ZN20Screen_HomePresenterC1ER15Screen_HomeView>:
#include <gui/screen_home_screen/Screen_HomeView.hpp>
#include <gui/screen_home_screen/Screen_HomePresenter.hpp>

Screen_HomePresenter::Screen_HomePresenter(Screen_HomeView& v)
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
    : view(v)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff75 	bl	8007954 <_ZN8touchgfx9PresenterC1Ev>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ff80 	bl	8007974 <_ZN13ModelListenerC1Ev>
 8007a74:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <_ZN20Screen_HomePresenterC1ER15Screen_HomeView+0x38>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	4a06      	ldr	r2, [pc, #24]	; (8007a94 <_ZN20Screen_HomePresenterC1ER15Screen_HomeView+0x3c>)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	605a      	str	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	60da      	str	r2, [r3, #12]
{

}
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08027ad0 	.word	0x08027ad0
 8007a94:	08027ae8 	.word	0x08027ae8

08007a98 <_ZN20Screen_HomePresenter8activateEv>:

void Screen_HomePresenter::activate()
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <_ZN20Screen_HomePresenter10deactivateEv>:

void Screen_HomePresenter::deactivate()
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <_ZN15Screen_HomeViewD1Ev>:

class Screen_HomeView : public Screen_HomeViewBase
{
public:
    Screen_HomeView();
    virtual ~Screen_HomeView() {}
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <_ZN15Screen_HomeViewD1Ev+0x20>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe faff 	bl	80060d4 <_ZN19Screen_HomeViewBaseD1Ev>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	08027b28 	.word	0x08027b28

08007ae4 <_ZN15Screen_HomeViewD0Ev>:
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff ffe7 	bl	8007ac0 <_ZN15Screen_HomeViewD1Ev>
 8007af2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f01d fb7b 	bl	80251f2 <_ZdlPvj>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <_ZN15Screen_HomeViewC1Ev>:
#include <gui/screen_home_screen/Screen_HomeView.hpp>

Screen_HomeView::Screen_HomeView()
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe f93e 	bl	8005d94 <_ZN19Screen_HomeViewBaseC1Ev>
 8007b18:	4a03      	ldr	r2, [pc, #12]	; (8007b28 <_ZN15Screen_HomeViewC1Ev+0x20>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
{

}
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	08027b28 	.word	0x08027b28

08007b2c <_ZN15Screen_HomeView11setupScreenEv>:

void Screen_HomeView::setupScreen()
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
    Screen_HomeViewBase::setupScreen();
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fb09 	bl	800614e <_ZN19Screen_HomeViewBase11setupScreenEv>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <_ZN15Screen_HomeView14tearDownScreenEv>:

void Screen_HomeView::tearDownScreen()
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    Screen_HomeViewBase::tearDownScreen();
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fe4a 	bl	80057e8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZN19Screen_LEDPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_LEDPresenter() {}
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	4a09      	ldr	r2, [pc, #36]	; (8007b8c <_ZN19Screen_LEDPresenterD1Ev+0x30>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <_ZN19Screen_LEDPresenterD1Ev+0x34>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff ff11 	bl	800799c <_ZN13ModelListenerD1Ev>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fec9 	bl	8007914 <_ZN8touchgfx9PresenterD1Ev>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08027b5c 	.word	0x08027b5c
 8007b90:	08027b78 	.word	0x08027b78

08007b94 <_ZThn4_N19Screen_LEDPresenterD1Ev>:
 8007b94:	f1a0 0004 	sub.w	r0, r0, #4
 8007b98:	e7e0      	b.n	8007b5c <_ZN19Screen_LEDPresenterD1Ev>
 8007b9a:	bf00      	nop

08007b9c <_ZN19Screen_LEDPresenterD0Ev>:
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ffd9 	bl	8007b5c <_ZN19Screen_LEDPresenterD1Ev>
 8007baa:	2110      	movs	r1, #16
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f01d fb20 	bl	80251f2 <_ZdlPvj>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZThn4_N19Screen_LEDPresenterD0Ev>:
 8007bbc:	f1a0 0004 	sub.w	r0, r0, #4
 8007bc0:	e7ec      	b.n	8007b9c <_ZN19Screen_LEDPresenterD0Ev>
	...

08007bc4 <_ZN19Screen_LEDPresenterC1ER14Screen_LEDView>:
#include <gui/screen_led_screen/Screen_LEDView.hpp>
#include <gui/screen_led_screen/Screen_LEDPresenter.hpp>

Screen_LEDPresenter::Screen_LEDPresenter(Screen_LEDView& v)
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
    : view(v)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff febf 	bl	8007954 <_ZN8touchgfx9PresenterC1Ev>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff feca 	bl	8007974 <_ZN13ModelListenerC1Ev>
 8007be0:	4a06      	ldr	r2, [pc, #24]	; (8007bfc <_ZN19Screen_LEDPresenterC1ER14Screen_LEDView+0x38>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <_ZN19Screen_LEDPresenterC1ER14Screen_LEDView+0x3c>)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	60da      	str	r2, [r3, #12]
{

}
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	08027b5c 	.word	0x08027b5c
 8007c00:	08027b78 	.word	0x08027b78

08007c04 <_ZN19Screen_LEDPresenter8activateEv>:

void Screen_LEDPresenter::activate()
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]

}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <_ZN19Screen_LEDPresenter10deactivateEv>:

void Screen_LEDPresenter::deactivate()
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <_ZN19Screen_LEDPresenter19swButtonHwLedToggleEv>:

void Screen_LEDPresenter::swButtonHwLedToggle()
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	model->toggleHwLed();
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff fe4d 	bl	80078d8 <_ZN5Model11toggleHwLedEv>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <_ZN19Screen_LEDPresenter19swButtonSwLedToggleEv>:

void Screen_LEDPresenter::swButtonSwLedToggle()
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
	view.toggleSwLed();
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f864 	bl	8007d20 <_ZN14Screen_LEDView11toggleSwLedEv>
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <_ZN19Screen_LEDPresenter17userButtonPressedEv>:

void Screen_LEDPresenter::userButtonPressed()
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	view.toggleSwLed();
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 f857 	bl	8007d20 <_ZN14Screen_LEDView11toggleSwLedEv>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <_ZThn4_N19Screen_LEDPresenter17userButtonPressedEv>:

    void swButtonHwLedToggle();
    void swButtonSwLedToggle();
    void userButtonPressed();
 8007c7a:	f1a0 0004 	sub.w	r0, r0, #4
 8007c7e:	f7ff bfef 	b.w	8007c60 <_ZN19Screen_LEDPresenter17userButtonPressedEv>
	...

08007c84 <_ZN14Screen_LEDViewD1Ev>:

class Screen_LEDView : public Screen_LEDViewBase
{
public:
    Screen_LEDView();
    virtual ~Screen_LEDView() {}
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	4a05      	ldr	r2, [pc, #20]	; (8007ca4 <_ZN14Screen_LEDViewD1Ev+0x20>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff f9b7 	bl	8007008 <_ZN18Screen_LEDViewBaseD1Ev>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	08027b8c 	.word	0x08027b8c

08007ca8 <_ZN14Screen_LEDViewD0Ev>:
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ffe7 	bl	8007c84 <_ZN14Screen_LEDViewD1Ev>
 8007cb6:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f01d fa99 	bl	80251f2 <_ZdlPvj>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <_ZN14Screen_LEDViewC1Ev>:
#include <gui/screen_led_screen/Screen_LEDView.hpp>

Screen_LEDView::Screen_LEDView()
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd4a 	bl	8006770 <_ZN18Screen_LEDViewBaseC1Ev>
 8007cdc:	4a03      	ldr	r2, [pc, #12]	; (8007cec <_ZN14Screen_LEDViewC1Ev+0x20>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
{

}
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08027b8c 	.word	0x08027b8c

08007cf0 <_ZN14Screen_LEDView11setupScreenEv>:

void Screen_LEDView::setupScreen()
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    Screen_LEDViewBase::setupScreen();
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff f9e5 	bl	80070ca <_ZN18Screen_LEDViewBase11setupScreenEv>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_ZN14Screen_LEDView14tearDownScreenEv>:

void Screen_LEDView::tearDownScreen()
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    Screen_LEDViewBase::tearDownScreen();
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fd fd68 	bl	80057e8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <_ZN14Screen_LEDView11toggleSwLedEv>:

void Screen_LEDView::toggleSwLed()
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	if (SW_LED_On.isVisible())
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fc fac3 	bl	80042ba <_ZNK8touchgfx8Drawable9isVisibleEv>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <_ZN14Screen_LEDView11toggleSwLedEv+0x38>
	{
		SW_LED_On.setVisible(false);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8007d40:	2100      	movs	r1, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fcd7 	bl	80066f6 <_ZN8touchgfx8Drawable10setVisibleEb>
		SW_LED_Off.setVisible(true);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fcd0 	bl	80066f6 <_ZN8touchgfx8Drawable10setVisibleEb>
 8007d56:	e00d      	b.n	8007d74 <_ZN14Screen_LEDView11toggleSwLedEv+0x54>
	}
	else
	{
		SW_LED_On.setVisible(true);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fcc8 	bl	80066f6 <_ZN8touchgfx8Drawable10setVisibleEb>
		SW_LED_Off.setVisible(false);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fcc1 	bl	80066f6 <_ZN8touchgfx8Drawable10setVisibleEb>
	}

	SW_LED_On.invalidate();
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f012 fa9b 	bl	801a2b6 <_ZNK8touchgfx8Drawable10invalidateEv>
	SW_LED_Off.invalidate();
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d86:	4618      	mov	r0, r3
 8007d88:	f012 fa95 	bl	801a2b6 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8007da4:	f04f 33ff 	mov.w	r3, #4294967295
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e02c      	b.n	8007e06 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	891a      	ldrh	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a0c      	ldr	r2, [pc, #48]	; (8007e10 <FT5336_RegisterBusIO+0x7c>)
 8007de0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a0b      	ldr	r2, [pc, #44]	; (8007e14 <FT5336_RegisterBusIO+0x80>)
 8007de6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	e002      	b.n	8007e06 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007e06:	68fb      	ldr	r3, [r7, #12]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	0800820d 	.word	0x0800820d
 8007e14:	08008241 	.word	0x08008241

08007e18 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2201      	movs	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2205      	movs	r2, #5
 8007e32:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e3a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8007e42:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10d      	bne.n	8007e84 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f987 	bl	8008182 <FT5336_DisableIT>
 8007e74:	4602      	mov	r2, r0
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e90:	68fb      	ldr	r3, [r7, #12]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d103      	bne.n	8007eb8 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f103 0218 	add.w	r2, r3, #24
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f000 fa25 	bl	800832e <ft5336_radian_value>
 8007ee4:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f103 0218 	add.w	r2, r3, #24
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f000 fa2b 	bl	8008350 <ft5336_offset_left_right>
 8007efa:	4602      	mov	r2, r0
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f103 0218 	add.w	r2, r3, #24
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f000 fa2e 	bl	8008372 <ft5336_offset_up_down>
 8007f16:	4602      	mov	r2, r0
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f103 0218 	add.w	r2, r3, #24
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f000 fa31 	bl	8008394 <ft5336_disatnce_left_right>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f103 0218 	add.w	r2, r3, #24
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f000 fa34 	bl	80083b6 <ft5336_distance_up_down>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f103 0218 	add.w	r2, r3, #24
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f000 fa37 	bl	80083d8 <ft5336_distance_zoom>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3318      	adds	r3, #24
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fa3f 	bl	800841c <ft5336_chip_id>
 8007f9e:	4603      	mov	r3, r0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f908 	bl	80081cc <FT5336_DetectTouch>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f103 0018 	add.w	r0, r3, #24
 8007fca:	f107 0208 	add.w	r2, r7, #8
 8007fce:	2304      	movs	r3, #4
 8007fd0:	2103      	movs	r1, #3
 8007fd2:	f000 f94f 	bl	8008274 <ft5336_read_reg>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8007fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e00f      	b.n	8008004 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8007fe4:	7a3b      	ldrb	r3, [r7, #8]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fec:	7a7a      	ldrb	r2, [r7, #9]
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8007ff4:	7abb      	ldrb	r3, [r7, #10]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ffc:	7afa      	ldrb	r2, [r7, #11]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008004:	68fb      	ldr	r3, [r7, #12]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b08c      	sub	sp, #48	; 0x30
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f8d5 	bl	80081cc <FT5336_DetectTouch>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f103 0018 	add.w	r0, r3, #24
 8008030:	f107 0208 	add.w	r2, r7, #8
 8008034:	231e      	movs	r3, #30
 8008036:	2103      	movs	r1, #3
 8008038:	f000 f91c 	bl	8008274 <ft5336_read_reg>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008048:	e077      	b.n	800813a <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800804a:	2300      	movs	r3, #0
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
 800804e:	e071      	b.n	8008134 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008052:	4613      	mov	r3, r2
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	4413      	add	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	3330      	adds	r3, #48	; 0x30
 800805c:	443b      	add	r3, r7
 800805e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	3301      	adds	r3, #1
 8008074:	3330      	adds	r3, #48	; 0x30
 8008076:	443b      	add	r3, r7
 8008078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800807c:	ea41 0203 	orr.w	r2, r1, r3
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800808a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800808c:	4613      	mov	r3, r2
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4413      	add	r3, r2
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	3302      	adds	r3, #2
 8008096:	3330      	adds	r3, #48	; 0x30
 8008098:	443b      	add	r3, r7
 800809a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80080a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	3303      	adds	r3, #3
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	443b      	add	r3, r7
 80080b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80080b8:	4319      	orrs	r1, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080be:	3206      	adds	r2, #6
 80080c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80080c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	3330      	adds	r3, #48	; 0x30
 80080d0:	443b      	add	r3, r7
 80080d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	4619      	mov	r1, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e0:	3210      	adds	r2, #16
 80080e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80080e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e8:	4613      	mov	r3, r2
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	4413      	add	r3, r2
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	3304      	adds	r3, #4
 80080f2:	3330      	adds	r3, #48	; 0x30
 80080f4:	443b      	add	r3, r7
 80080f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80080fa:	4619      	mov	r1, r3
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	330a      	adds	r3, #10
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810a:	4613      	mov	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4413      	add	r3, r2
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	3305      	adds	r3, #5
 8008114:	3330      	adds	r3, #48	; 0x30
 8008116:	443b      	add	r3, r7
 8008118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800811c:	091b      	lsrs	r3, r3, #4
 800811e:	b2db      	uxtb	r3, r3
 8008120:	4619      	mov	r1, r3
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	3314      	adds	r3, #20
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	3301      	adds	r3, #1
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b04      	cmp	r3, #4
 8008138:	d98a      	bls.n	8008050 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800813c:	4618      	mov	r0, r3
 800813e:	3730      	adds	r7, #48	; 0x30
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3318      	adds	r3, #24
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f8bb 	bl	80082d0 <ft5336_gest_id>
 800815a:	4603      	mov	r3, r0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3318      	adds	r3, #24
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f941 	bl	80083fa <ft5336_g_mode>
 8008178:	4603      	mov	r3, r0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3318      	adds	r3, #24
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f932 	bl	80083fa <ft5336_g_mode>
 8008196:	4603      	mov	r3, r0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3318      	adds	r3, #24
 80081d8:	f107 020b 	add.w	r2, r7, #11
 80081dc:	4611      	mov	r1, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f886 	bl	80082f0 <ft5336_td_status>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e007      	b.n	8008202 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d902      	bls.n	80081fe <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e001      	b.n	8008202 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8008202:	68fb      	ldr	r3, [r7, #12]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	460b      	mov	r3, r1
 800821a:	72fb      	strb	r3, [r7, #11]
 800821c:	4613      	mov	r3, r2
 800821e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	691c      	ldr	r4, [r3, #16]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	8918      	ldrh	r0, [r3, #8]
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	b299      	uxth	r1, r3
 8008230:	893b      	ldrh	r3, [r7, #8]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	47a0      	blx	r4
 8008236:	4603      	mov	r3, r0
}
 8008238:	4618      	mov	r0, r3
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	bd90      	pop	{r4, r7, pc}

08008240 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	461a      	mov	r2, r3
 800824c:	460b      	mov	r3, r1
 800824e:	72fb      	strb	r3, [r7, #11]
 8008250:	4613      	mov	r3, r2
 8008252:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	68dc      	ldr	r4, [r3, #12]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	8918      	ldrh	r0, [r3, #8]
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	b299      	uxth	r1, r3
 8008264:	893b      	ldrh	r3, [r7, #8]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	47a0      	blx	r4
 800826a:	4603      	mov	r3, r0
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	bd90      	pop	{r4, r7, pc}

08008274 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008274:	b590      	push	{r4, r7, lr}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	461a      	mov	r2, r3
 8008280:	460b      	mov	r3, r1
 8008282:	72fb      	strb	r3, [r7, #11]
 8008284:	4613      	mov	r3, r2
 8008286:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685c      	ldr	r4, [r3, #4]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6898      	ldr	r0, [r3, #8]
 8008290:	893b      	ldrh	r3, [r7, #8]
 8008292:	7af9      	ldrb	r1, [r7, #11]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	47a0      	blx	r4
 8008298:	4603      	mov	r3, r0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}

080082a2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80082a2:	b590      	push	{r4, r7, lr}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	461a      	mov	r2, r3
 80082ae:	460b      	mov	r3, r1
 80082b0:	72fb      	strb	r3, [r7, #11]
 80082b2:	4613      	mov	r3, r2
 80082b4:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681c      	ldr	r4, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6898      	ldr	r0, [r3, #8]
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	7af9      	ldrb	r1, [r7, #11]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	47a0      	blx	r4
 80082c6:	4603      	mov	r3, r0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd90      	pop	{r4, r7, pc}

080082d0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80082da:	2301      	movs	r3, #1
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	2101      	movs	r1, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ffc7 	bl	8008274 <ft5336_read_reg>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80082fa:	2301      	movs	r3, #1
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	2102      	movs	r1, #2
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ffb7 	bl	8008274 <ft5336_read_reg>
 8008306:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	b2da      	uxtb	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008324:	68fb      	ldr	r3, [r7, #12]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800833a:	1cfa      	adds	r2, r7, #3
 800833c:	2301      	movs	r3, #1
 800833e:	2191      	movs	r1, #145	; 0x91
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ffae 	bl	80082a2 <ft5336_write_reg>
 8008346:	4603      	mov	r3, r0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800835c:	1cfa      	adds	r2, r7, #3
 800835e:	2301      	movs	r3, #1
 8008360:	2192      	movs	r1, #146	; 0x92
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ff9d 	bl	80082a2 <ft5336_write_reg>
 8008368:	4603      	mov	r3, r0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800837e:	1cfa      	adds	r2, r7, #3
 8008380:	2301      	movs	r3, #1
 8008382:	2193      	movs	r1, #147	; 0x93
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff8c 	bl	80082a2 <ft5336_write_reg>
 800838a:	4603      	mov	r3, r0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80083a0:	1cfa      	adds	r2, r7, #3
 80083a2:	2301      	movs	r3, #1
 80083a4:	2194      	movs	r1, #148	; 0x94
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ff7b 	bl	80082a2 <ft5336_write_reg>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80083c2:	1cfa      	adds	r2, r7, #3
 80083c4:	2301      	movs	r3, #1
 80083c6:	2195      	movs	r1, #149	; 0x95
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff6a 	bl	80082a2 <ft5336_write_reg>
 80083ce:	4603      	mov	r3, r0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80083e4:	1cfa      	adds	r2, r7, #3
 80083e6:	2301      	movs	r3, #1
 80083e8:	2196      	movs	r1, #150	; 0x96
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ff59 	bl	80082a2 <ft5336_write_reg>
 80083f0:	4603      	mov	r3, r0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008406:	1cfa      	adds	r2, r7, #3
 8008408:	2301      	movs	r3, #1
 800840a:	21a4      	movs	r1, #164	; 0xa4
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff48 	bl	80082a2 <ft5336_write_reg>
 8008412:	4603      	mov	r3, r0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008426:	2301      	movs	r3, #1
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	21a8      	movs	r1, #168	; 0xa8
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ff21 	bl	8008274 <ft5336_read_reg>
 8008432:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800844a:	68fb      	ldr	r3, [r7, #12]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008462:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800846a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008472:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800847a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008482:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800848a:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008492:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800849a:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80084a2:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 80084a4:	2300      	movs	r3, #0
};
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b09c      	sub	sp, #112	; 0x70
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
 80084be:	4613      	mov	r3, r2
 80084c0:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 80084c2:	f107 0320 	add.w	r3, r7, #32
 80084c6:	2250      	movs	r2, #80	; 0x50
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f01d f8c5 	bl	802565a <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80084d0:	f107 030c 	add.w	r3, r7, #12
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <MX25LM51245G_AutoPollingMemReady+0x40>
 80084e6:	78bb      	ldrb	r3, [r7, #2]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 80084ec:	f04f 33ff 	mov.w	r3, #4294967295
 80084f0:	e088      	b.n	8008604 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80084f2:	2300      	movs	r3, #0
 80084f4:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80084f6:	2300      	movs	r3, #0
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <MX25LM51245G_AutoPollingMemReady+0x52>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <MX25LM51245G_AutoPollingMemReady+0x54>
 8008504:	2304      	movs	r3, #4
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008508:	78bb      	ldrb	r3, [r7, #2]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <MX25LM51245G_AutoPollingMemReady+0x60>
 800850e:	2308      	movs	r3, #8
 8008510:	e000      	b.n	8008514 <MX25LM51245G_AutoPollingMemReady+0x62>
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <MX25LM51245G_AutoPollingMemReady+0x6e>
 800851c:	2300      	movs	r3, #0
 800851e:	e000      	b.n	8008522 <MX25LM51245G_AutoPollingMemReady+0x70>
 8008520:	2310      	movs	r3, #16
 8008522:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <MX25LM51245G_AutoPollingMemReady+0x7c>
 800852a:	2305      	movs	r3, #5
 800852c:	e001      	b.n	8008532 <MX25LM51245G_AutoPollingMemReady+0x80>
 800852e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <MX25LM51245G_AutoPollingMemReady+0x8c>
 800853a:	2300      	movs	r3, #0
 800853c:	e001      	b.n	8008542 <MX25LM51245G_AutoPollingMemReady+0x90>
 800853e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008544:	78bb      	ldrb	r3, [r7, #2]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d102      	bne.n	8008550 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800854a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800854e:	e000      	b.n	8008552 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8008550:	2300      	movs	r3, #0
 8008552:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008554:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008558:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <MX25LM51245G_AutoPollingMemReady+0xbc>
 8008568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800856c:	e001      	b.n	8008572 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800856e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008572:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008574:	78bb      	ldrb	r3, [r7, #2]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d102      	bne.n	8008580 <MX25LM51245G_AutoPollingMemReady+0xce>
 800857a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800857e:	e000      	b.n	8008582 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8008580:	2300      	movs	r3, #0
 8008582:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <MX25LM51245G_AutoPollingMemReady+0xdc>
 800858a:	2300      	movs	r3, #0
 800858c:	e000      	b.n	8008590 <MX25LM51245G_AutoPollingMemReady+0xde>
 800858e:	2305      	movs	r3, #5
 8008590:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008592:	78bb      	ldrb	r3, [r7, #2]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <MX25LM51245G_AutoPollingMemReady+0xea>
 8008598:	2302      	movs	r3, #2
 800859a:	e000      	b.n	800859e <MX25LM51245G_AutoPollingMemReady+0xec>
 800859c:	2301      	movs	r3, #1
 800859e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80085a0:	78bb      	ldrb	r3, [r7, #2]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <MX25LM51245G_AutoPollingMemReady+0xfa>
 80085a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80085aa:	e000      	b.n	80085ae <MX25LM51245G_AutoPollingMemReady+0xfc>
 80085ac:	2300      	movs	r3, #0
 80085ae:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80085b0:	2300      	movs	r3, #0
 80085b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80085b8:	2301      	movs	r3, #1
 80085ba:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80085c0:	2310      	movs	r3, #16
 80085c2:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80085c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085c8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80085ca:	f107 0320 	add.w	r3, r7, #32
 80085ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f004 fe09 	bl	800d1ec <HAL_OSPI_Command>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
 80085e4:	e00e      	b.n	8008604 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f004 ff9e 	bl	800d532 <HAL_OSPI_AutoPolling>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008600:	e000      	b.n	8008604 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3770      	adds	r7, #112	; 0x70
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b098      	sub	sp, #96	; 0x60
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
 8008618:	4613      	mov	r3, r2
 800861a:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 800861c:	f107 0310 	add.w	r3, r7, #16
 8008620:	2250      	movs	r2, #80	; 0x50
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f01d f818 	bl	802565a <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d105      	bne.n	8008646 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800863a:	78bb      	ldrb	r3, [r7, #2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8008640:	f04f 33ff 	mov.w	r3, #4294967295
 8008644:	e088      	b.n	8008758 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8008646:	2301      	movs	r3, #1
 8008648:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800864a:	2300      	movs	r3, #0
 800864c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8008658:	2304      	movs	r3, #4
 800865a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800865c:	2300      	movs	r3, #0
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 800866a:	2310      	movs	r3, #16
 800866c:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8008674:	78bb      	ldrb	r3, [r7, #2]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 800867a:	230b      	movs	r3, #11
 800867c:	e003      	b.n	8008686 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800867e:	230c      	movs	r3, #12
 8008680:	e001      	b.n	8008686 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8008682:	f64e 4313 	movw	r3, #60435	; 0xec13
 8008686:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 800868e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008692:	e001      	b.n	8008698 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8008694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800869a:	2300      	movs	r3, #0
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800869e:	78bb      	ldrb	r3, [r7, #2]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 80086a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086a8:	e001      	b.n	80086ae <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 80086aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 80086ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086be:	e001      	b.n	80086c4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 80086c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80086c4:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 80086d0:	2308      	movs	r3, #8
 80086d2:	e000      	b.n	80086d6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 80086d4:	2306      	movs	r3, #6
 80086d6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80086d8:	2300      	movs	r3, #0
 80086da:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80086dc:	2300      	movs	r3, #0
 80086de:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f004 fd7e 	bl	800d1ec <HAL_OSPI_Command>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295
 80086fa:	e02d      	b.n	8008758 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80086fc:	2302      	movs	r3, #2
 80086fe:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8008706:	78bb      	ldrb	r3, [r7, #2]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 800870c:	2302      	movs	r3, #2
 800870e:	e003      	b.n	8008718 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8008710:	2312      	movs	r3, #18
 8008712:	e001      	b.n	8008718 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8008714:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8008718:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800871e:	f107 0310 	add.w	r3, r7, #16
 8008722:	f241 3288 	movw	r2, #5000	; 0x1388
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f004 fd5f 	bl	800d1ec <HAL_OSPI_Command>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8008734:	f04f 33ff 	mov.w	r3, #4294967295
 8008738:	e00e      	b.n	8008758 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800873a:	2300      	movs	r3, #0
 800873c:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f004 ff7b 	bl	800d640 <HAL_OSPI_MemoryMapped>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	e000      	b.n	8008758 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3760      	adds	r7, #96	; 0x60
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b098      	sub	sp, #96	; 0x60
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	2250      	movs	r2, #80	; 0x50
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f01c ff70 	bl	802565a <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8008784:	2301      	movs	r3, #1
 8008786:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800878c:	2304      	movs	r3, #4
 800878e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8008790:	2308      	movs	r3, #8
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8008794:	2310      	movs	r3, #16
 8008796:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8008798:	f64e 6311 	movw	r3, #60945	; 0xee11
 800879c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800879e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80087a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80087aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80087b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087b8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80087ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087be:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80087c0:	2306      	movs	r3, #6
 80087c2:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80087c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80087c8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80087ca:	2300      	movs	r3, #0
 80087cc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087ce:	f107 0310 	add.w	r3, r7, #16
 80087d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f004 fd07 	bl	800d1ec <HAL_OSPI_Command>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 80087e4:	f04f 33ff 	mov.w	r3, #4294967295
 80087e8:	e025      	b.n	8008836 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80087ea:	2302      	movs	r3, #2
 80087ec:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80087ee:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80087f2:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087fc:	f107 0310 	add.w	r3, r7, #16
 8008800:	f241 3288 	movw	r2, #5000	; 0x1388
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f004 fcf0 	bl	800d1ec <HAL_OSPI_Command>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	e00e      	b.n	8008836 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8008818:	2300      	movs	r3, #0
 800881a:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800881c:	f107 0308 	add.w	r3, r7, #8
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f004 ff0c 	bl	800d640 <HAL_OSPI_MemoryMapped>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	e000      	b.n	8008836 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3760      	adds	r7, #96	; 0x60
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b09c      	sub	sp, #112	; 0x70
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
 800884a:	4613      	mov	r3, r2
 800884c:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800884e:	f107 0320 	add.w	r3, r7, #32
 8008852:	2250      	movs	r2, #80	; 0x50
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f01c feff 	bl	802565a <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	609a      	str	r2, [r3, #8]
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <MX25LM51245G_WriteEnable+0x40>
 8008872:	78bb      	ldrb	r3, [r7, #2]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d102      	bne.n	800887e <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	e0a6      	b.n	80089cc <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800887e:	2300      	movs	r3, #0
 8008880:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <MX25LM51245G_WriteEnable+0x52>
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <MX25LM51245G_WriteEnable+0x54>
 8008890:	2304      	movs	r3, #4
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008894:	78bb      	ldrb	r3, [r7, #2]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <MX25LM51245G_WriteEnable+0x60>
 800889a:	2308      	movs	r3, #8
 800889c:	e000      	b.n	80088a0 <MX25LM51245G_WriteEnable+0x62>
 800889e:	2300      	movs	r3, #0
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <MX25LM51245G_WriteEnable+0x6e>
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <MX25LM51245G_WriteEnable+0x70>
 80088ac:	2310      	movs	r3, #16
 80088ae:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <MX25LM51245G_WriteEnable+0x7c>
 80088b6:	2306      	movs	r3, #6
 80088b8:	e001      	b.n	80088be <MX25LM51245G_WriteEnable+0x80>
 80088ba:	f240 63f9 	movw	r3, #1785	; 0x6f9
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80088d4:	2300      	movs	r3, #0
 80088d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088d8:	f107 0320 	add.w	r3, r7, #32
 80088dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f004 fc82 	bl	800d1ec <HAL_OSPI_Command>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	e06b      	b.n	80089cc <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <MX25LM51245G_WriteEnable+0xc0>
 80088fa:	2305      	movs	r3, #5
 80088fc:	e001      	b.n	8008902 <MX25LM51245G_WriteEnable+0xc4>
 80088fe:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <MX25LM51245G_WriteEnable+0xd0>
 800890a:	2300      	movs	r3, #0
 800890c:	e001      	b.n	8008912 <MX25LM51245G_WriteEnable+0xd4>
 800890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008914:	78bb      	ldrb	r3, [r7, #2]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d102      	bne.n	8008920 <MX25LM51245G_WriteEnable+0xe2>
 800891a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800891e:	e000      	b.n	8008922 <MX25LM51245G_WriteEnable+0xe4>
 8008920:	2300      	movs	r3, #0
 8008922:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8008924:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008928:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <MX25LM51245G_WriteEnable+0xfc>
 8008934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008938:	e001      	b.n	800893e <MX25LM51245G_WriteEnable+0x100>
 800893a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800893e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008940:	78bb      	ldrb	r3, [r7, #2]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d102      	bne.n	800894c <MX25LM51245G_WriteEnable+0x10e>
 8008946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800894a:	e000      	b.n	800894e <MX25LM51245G_WriteEnable+0x110>
 800894c:	2300      	movs	r3, #0
 800894e:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <MX25LM51245G_WriteEnable+0x11c>
 8008956:	2300      	movs	r3, #0
 8008958:	e000      	b.n	800895c <MX25LM51245G_WriteEnable+0x11e>
 800895a:	2305      	movs	r3, #5
 800895c:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800895e:	78bb      	ldrb	r3, [r7, #2]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <MX25LM51245G_WriteEnable+0x12a>
 8008964:	2302      	movs	r3, #2
 8008966:	e000      	b.n	800896a <MX25LM51245G_WriteEnable+0x12c>
 8008968:	2301      	movs	r3, #1
 800896a:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800896c:	78bb      	ldrb	r3, [r7, #2]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d102      	bne.n	8008978 <MX25LM51245G_WriteEnable+0x13a>
 8008972:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008976:	e000      	b.n	800897a <MX25LM51245G_WriteEnable+0x13c>
 8008978:	2300      	movs	r3, #0
 800897a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800897c:	f107 0320 	add.w	r3, r7, #32
 8008980:	f241 3288 	movw	r2, #5000	; 0x1388
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f004 fc30 	bl	800d1ec <HAL_OSPI_Command>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	e019      	b.n	80089cc <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8008998:	2302      	movs	r3, #2
 800899a:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800899c:	2302      	movs	r3, #2
 800899e:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80089a4:	2310      	movs	r3, #16
 80089a6:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80089a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089ac:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089ae:	f107 030c 	add.w	r3, r7, #12
 80089b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f004 fdba 	bl	800d532 <HAL_OSPI_AutoPolling>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80089c4:	f04f 33ff 	mov.w	r3, #4294967295
 80089c8:	e000      	b.n	80089cc <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3770      	adds	r7, #112	; 0x70
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b098      	sub	sp, #96	; 0x60
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
 80089e2:	4613      	mov	r3, r2
 80089e4:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	2250      	movs	r2, #80	; 0x50
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f01c fe33 	bl	802565a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80089f4:	7afb      	ldrb	r3, [r7, #11]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <MX25LM51245G_WriteCfg2Register+0x32>
 80089fa:	7abb      	ldrb	r3, [r7, #10]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d102      	bne.n	8008a06 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8008a00:	f04f 33ff 	mov.w	r3, #4294967295
 8008a04:	e077      	b.n	8008af6 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <MX25LM51245G_WriteCfg2Register+0x44>
 8008a14:	2301      	movs	r3, #1
 8008a16:	e000      	b.n	8008a1a <MX25LM51245G_WriteCfg2Register+0x46>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008a1c:	7abb      	ldrb	r3, [r7, #10]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <MX25LM51245G_WriteCfg2Register+0x52>
 8008a22:	2308      	movs	r3, #8
 8008a24:	e000      	b.n	8008a28 <MX25LM51245G_WriteCfg2Register+0x54>
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <MX25LM51245G_WriteCfg2Register+0x60>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e000      	b.n	8008a36 <MX25LM51245G_WriteCfg2Register+0x62>
 8008a34:	2310      	movs	r3, #16
 8008a36:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <MX25LM51245G_WriteCfg2Register+0x6e>
 8008a3e:	2372      	movs	r3, #114	; 0x72
 8008a40:	e001      	b.n	8008a46 <MX25LM51245G_WriteCfg2Register+0x72>
 8008a42:	f247 238d 	movw	r3, #29325	; 0x728d
 8008a46:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d102      	bne.n	8008a54 <MX25LM51245G_WriteCfg2Register+0x80>
 8008a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a52:	e001      	b.n	8008a58 <MX25LM51245G_WriteCfg2Register+0x84>
 8008a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008a5a:	7abb      	ldrb	r3, [r7, #10]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d102      	bne.n	8008a66 <MX25LM51245G_WriteCfg2Register+0x92>
 8008a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a64:	e000      	b.n	8008a68 <MX25LM51245G_WriteCfg2Register+0x94>
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008a6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008a6e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <MX25LM51245G_WriteCfg2Register+0xb0>
 8008a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a82:	e001      	b.n	8008a88 <MX25LM51245G_WriteCfg2Register+0xb4>
 8008a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a88:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008a8a:	7abb      	ldrb	r3, [r7, #10]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d102      	bne.n	8008a96 <MX25LM51245G_WriteCfg2Register+0xc2>
 8008a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a94:	e000      	b.n	8008a98 <MX25LM51245G_WriteCfg2Register+0xc4>
 8008a96:	2300      	movs	r3, #0
 8008a98:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <MX25LM51245G_WriteCfg2Register+0xde>
 8008aa4:	7abb      	ldrb	r3, [r7, #10]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <MX25LM51245G_WriteCfg2Register+0xda>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e002      	b.n	8008ab4 <MX25LM51245G_WriteCfg2Register+0xe0>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <MX25LM51245G_WriteCfg2Register+0xe0>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008aba:	2300      	movs	r3, #0
 8008abc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f004 fb8f 	bl	800d1ec <HAL_OSPI_Command>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad8:	e00d      	b.n	8008af6 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ade:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f004 fc0f 	bl	800d306 <HAL_OSPI_Transmit>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
 8008af2:	e000      	b.n	8008af6 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3760      	adds	r7, #96	; 0x60
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b098      	sub	sp, #96	; 0x60
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	607b      	str	r3, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	72fb      	strb	r3, [r7, #11]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008b10:	f107 0310 	add.w	r3, r7, #16
 8008b14:	2250      	movs	r2, #80	; 0x50
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f01c fd9e 	bl	802565a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <MX25LM51245G_ReadCfg2Register+0x32>
 8008b24:	7abb      	ldrb	r3, [r7, #10]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d102      	bne.n	8008b30 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	e07c      	b.n	8008c2a <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <MX25LM51245G_ReadCfg2Register+0x44>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <MX25LM51245G_ReadCfg2Register+0x46>
 8008b42:	2304      	movs	r3, #4
 8008b44:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008b46:	7abb      	ldrb	r3, [r7, #10]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <MX25LM51245G_ReadCfg2Register+0x52>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	e000      	b.n	8008b52 <MX25LM51245G_ReadCfg2Register+0x54>
 8008b50:	2300      	movs	r3, #0
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <MX25LM51245G_ReadCfg2Register+0x60>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e000      	b.n	8008b60 <MX25LM51245G_ReadCfg2Register+0x62>
 8008b5e:	2310      	movs	r3, #16
 8008b60:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <MX25LM51245G_ReadCfg2Register+0x6e>
 8008b68:	2371      	movs	r3, #113	; 0x71
 8008b6a:	e001      	b.n	8008b70 <MX25LM51245G_ReadCfg2Register+0x72>
 8008b6c:	f247 138e 	movw	r3, #29070	; 0x718e
 8008b70:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <MX25LM51245G_ReadCfg2Register+0x80>
 8008b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7c:	e001      	b.n	8008b82 <MX25LM51245G_ReadCfg2Register+0x84>
 8008b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008b84:	7abb      	ldrb	r3, [r7, #10]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d102      	bne.n	8008b90 <MX25LM51245G_ReadCfg2Register+0x92>
 8008b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b8e:	e000      	b.n	8008b92 <MX25LM51245G_ReadCfg2Register+0x94>
 8008b90:	2300      	movs	r3, #0
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008b94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008b98:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <MX25LM51245G_ReadCfg2Register+0xb0>
 8008ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bac:	e001      	b.n	8008bb2 <MX25LM51245G_ReadCfg2Register+0xb4>
 8008bae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008bb4:	7abb      	ldrb	r3, [r7, #10]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d102      	bne.n	8008bc0 <MX25LM51245G_ReadCfg2Register+0xc2>
 8008bba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bbe:	e000      	b.n	8008bc2 <MX25LM51245G_ReadCfg2Register+0xc4>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <MX25LM51245G_ReadCfg2Register+0xd0>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e000      	b.n	8008bd0 <MX25LM51245G_ReadCfg2Register+0xd2>
 8008bce:	2305      	movs	r3, #5
 8008bd0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008bd2:	7abb      	ldrb	r3, [r7, #10]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <MX25LM51245G_ReadCfg2Register+0xde>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e000      	b.n	8008bde <MX25LM51245G_ReadCfg2Register+0xe0>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008be0:	7abb      	ldrb	r3, [r7, #10]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d102      	bne.n	8008bec <MX25LM51245G_ReadCfg2Register+0xee>
 8008be6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008bea:	e000      	b.n	8008bee <MX25LM51245G_ReadCfg2Register+0xf0>
 8008bec:	2300      	movs	r3, #0
 8008bee:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f004 faf4 	bl	800d1ec <HAL_OSPI_Command>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0e:	e00c      	b.n	8008c2a <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f004 fbe8 	bl	800d3ec <HAL_OSPI_Receive>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	e000      	b.n	8008c2a <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3760      	adds	r7, #96	; 0x60
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b096      	sub	sp, #88	; 0x58
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	2250      	movs	r2, #80	; 0x50
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f01c fd05 	bl	802565a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <MX25LM51245G_ResetEnable+0x30>
 8008c56:	78bb      	ldrb	r3, [r7, #2]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d102      	bne.n	8008c62 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c60:	e03b      	b.n	8008cda <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <MX25LM51245G_ResetEnable+0x42>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <MX25LM51245G_ResetEnable+0x44>
 8008c74:	2304      	movs	r3, #4
 8008c76:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008c78:	78bb      	ldrb	r3, [r7, #2]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <MX25LM51245G_ResetEnable+0x50>
 8008c7e:	2308      	movs	r3, #8
 8008c80:	e000      	b.n	8008c84 <MX25LM51245G_ResetEnable+0x52>
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <MX25LM51245G_ResetEnable+0x5e>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e000      	b.n	8008c92 <MX25LM51245G_ResetEnable+0x60>
 8008c90:	2310      	movs	r3, #16
 8008c92:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <MX25LM51245G_ResetEnable+0x6c>
 8008c9a:	2366      	movs	r3, #102	; 0x66
 8008c9c:	e001      	b.n	8008ca2 <MX25LM51245G_ResetEnable+0x70>
 8008c9e:	f246 6399 	movw	r3, #26265	; 0x6699
 8008ca2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8008cac:	2300      	movs	r3, #0
 8008cae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f004 fa90 	bl	800d1ec <HAL_OSPI_Command>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	e000      	b.n	8008cda <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3758      	adds	r7, #88	; 0x58
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b096      	sub	sp, #88	; 0x58
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	2250      	movs	r2, #80	; 0x50
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f01c fcad 	bl	802565a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <MX25LM51245G_ResetMemory+0x30>
 8008d06:	78bb      	ldrb	r3, [r7, #2]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d102      	bne.n	8008d12 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8008d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d10:	e03b      	b.n	8008d8a <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <MX25LM51245G_ResetMemory+0x42>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <MX25LM51245G_ResetMemory+0x44>
 8008d24:	2304      	movs	r3, #4
 8008d26:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008d28:	78bb      	ldrb	r3, [r7, #2]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <MX25LM51245G_ResetMemory+0x50>
 8008d2e:	2308      	movs	r3, #8
 8008d30:	e000      	b.n	8008d34 <MX25LM51245G_ResetMemory+0x52>
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <MX25LM51245G_ResetMemory+0x5e>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <MX25LM51245G_ResetMemory+0x60>
 8008d40:	2310      	movs	r3, #16
 8008d42:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <MX25LM51245G_ResetMemory+0x6c>
 8008d4a:	2399      	movs	r3, #153	; 0x99
 8008d4c:	e001      	b.n	8008d52 <MX25LM51245G_ResetMemory+0x70>
 8008d4e:	f649 1366 	movw	r3, #39270	; 0x9966
 8008d52:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d6c:	f107 0308 	add.w	r3, r7, #8
 8008d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f004 fa38 	bl	800d1ec <HAL_OSPI_Command>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295
 8008d86:	e000      	b.n	8008d8a <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3758      	adds	r7, #88	; 0x58
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <BSP_I2C4_Init+0x64>)
 8008da0:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <BSP_I2C4_Init+0x68>)
 8008da2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8008da4:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <BSP_I2C4_Init+0x6c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d11f      	bne.n	8008dec <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8008dac:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <BSP_I2C4_Init+0x6c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3301      	adds	r3, #1
 8008db2:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <BSP_I2C4_Init+0x6c>)
 8008db4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8008db6:	4810      	ldr	r0, [pc, #64]	; (8008df8 <BSP_I2C4_Init+0x64>)
 8008db8:	f003 f86e 	bl	800be98 <HAL_I2C_GetState>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d114      	bne.n	8008dec <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8008dc2:	480d      	ldr	r0, [pc, #52]	; (8008df8 <BSP_I2C4_Init+0x64>)
 8008dc4:	f000 fb60 	bl	8009488 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008dc8:	f005 ff4c 	bl	800ec64 <HAL_RCC_GetPCLK2Freq>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	490d      	ldr	r1, [pc, #52]	; (8008e04 <BSP_I2C4_Init+0x70>)
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f8e3 	bl	8008f9c <I2C_GetTiming>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4807      	ldr	r0, [pc, #28]	; (8008df8 <BSP_I2C4_Init+0x64>)
 8008ddc:	f000 f838 	bl	8008e50 <MX_I2C4_Init>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8008de6:	f06f 0307 	mvn.w	r3, #7
 8008dea:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8008dec:	687b      	ldr	r3, [r7, #4]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	24002314 	.word	0x24002314
 8008dfc:	58001c00 	.word	0x58001c00
 8008e00:	2400190c 	.word	0x2400190c
 8008e04:	000186a0 	.word	0x000186a0

08008e08 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8008e12:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <BSP_I2C4_DeInit+0x40>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4a0b      	ldr	r2, [pc, #44]	; (8008e48 <BSP_I2C4_DeInit+0x40>)
 8008e1a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <BSP_I2C4_DeInit+0x40>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8008e24:	4809      	ldr	r0, [pc, #36]	; (8008e4c <BSP_I2C4_DeInit+0x44>)
 8008e26:	f000 fb9b 	bl	8009560 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008e2a:	4808      	ldr	r0, [pc, #32]	; (8008e4c <BSP_I2C4_DeInit+0x44>)
 8008e2c:	f002 fdd6 	bl	800b9dc <HAL_I2C_DeInit>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008e36:	f06f 0307 	mvn.w	r3, #7
 8008e3a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8008e3c:	687b      	ldr	r3, [r7, #4]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	2400190c 	.word	0x2400190c
 8008e4c:	24002314 	.word	0x24002314

08008e50 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f002 fd14 	bl	800b8bc <HAL_I2C_Init>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	73fb      	strb	r3, [r7, #15]
 8008e9e:	e014      	b.n	8008eca <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f003 fac8 	bl	800c43c <HAL_I2CEx_ConfigAnalogFilter>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	73fb      	strb	r3, [r7, #15]
 8008eb6:	e008      	b.n	8008eca <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8008eb8:	2100      	movs	r1, #0
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f003 fb09 	bl	800c4d2 <HAL_I2CEx_ConfigDigitalFilter>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60ba      	str	r2, [r7, #8]
 8008edc:	461a      	mov	r2, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	81fb      	strh	r3, [r7, #14]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	81bb      	strh	r3, [r7, #12]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8008eea:	89b9      	ldrh	r1, [r7, #12]
 8008eec:	89f8      	ldrh	r0, [r7, #14]
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f000 fb57 	bl	80095a8 <I2C4_WriteReg>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e00c      	b.n	8008f20 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008f06:	4809      	ldr	r0, [pc, #36]	; (8008f2c <BSP_I2C4_WriteReg+0x58>)
 8008f08:	f002 ffd4 	bl	800beb4 <HAL_I2C_GetError>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d103      	bne.n	8008f1a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008f12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e002      	b.n	8008f20 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008f1a:	f06f 0303 	mvn.w	r3, #3
 8008f1e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008f20:	697b      	ldr	r3, [r7, #20]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	24002314 	.word	0x24002314

08008f30 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60ba      	str	r2, [r7, #8]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	81fb      	strh	r3, [r7, #14]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	81bb      	strh	r3, [r7, #12]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8008f46:	89b9      	ldrh	r1, [r7, #12]
 8008f48:	89f8      	ldrh	r0, [r7, #14]
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f000 fb4f 	bl	80095f4 <I2C4_ReadReg>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e00c      	b.n	8008f7c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008f62:	4809      	ldr	r0, [pc, #36]	; (8008f88 <BSP_I2C4_ReadReg+0x58>)
 8008f64:	f002 ffa6 	bl	800beb4 <HAL_I2C_GetError>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d103      	bne.n	8008f76 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008f6e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e002      	b.n	8008f7c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008f76:	f06f 0303 	mvn.w	r3, #3
 8008f7a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008f7c:	697b      	ldr	r3, [r7, #20]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	24002314 	.word	0x24002314

08008f8c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8008f90:	f001 fcba 	bl	800a908 <HAL_GetTick>
 8008f94:	4603      	mov	r3, r0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d06b      	beq.n	8009088 <I2C_GetTiming+0xec>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d068      	beq.n	8009088 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	e060      	b.n	800907e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8008fbc:	4a35      	ldr	r2, [pc, #212]	; (8009094 <I2C_GetTiming+0xf8>)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	212c      	movs	r1, #44	; 0x2c
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d352      	bcc.n	8009078 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8008fd2:	4a30      	ldr	r2, [pc, #192]	; (8009094 <I2C_GetTiming+0xf8>)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	212c      	movs	r1, #44	; 0x2c
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	4413      	add	r3, r2
 8008fde:	3308      	adds	r3, #8
 8008fe0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d847      	bhi.n	8009078 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8008fe8:	6939      	ldr	r1, [r7, #16]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f856 	bl	800909c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8008ff0:	6939      	ldr	r1, [r7, #16]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f940 	bl	8009278 <I2C_Compute_SCLL_SCLH>
 8008ff8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8008ffe:	d842      	bhi.n	8009086 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009000:	4925      	ldr	r1, [pc, #148]	; (8009098 <I2C_GetTiming+0xfc>)
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	440b      	add	r3, r1
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009012:	4821      	ldr	r0, [pc, #132]	; (8009098 <I2C_GetTiming+0xfc>)
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4403      	add	r3, r0
 8009020:	3304      	adds	r3, #4
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	051b      	lsls	r3, r3, #20
 8009026:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800902a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800902c:	481a      	ldr	r0, [pc, #104]	; (8009098 <I2C_GetTiming+0xfc>)
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4403      	add	r3, r0
 800903a:	3308      	adds	r3, #8
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	041b      	lsls	r3, r3, #16
 8009040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009044:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009046:	4814      	ldr	r0, [pc, #80]	; (8009098 <I2C_GetTiming+0xfc>)
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4403      	add	r3, r0
 8009054:	330c      	adds	r3, #12
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800905c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800905e:	480e      	ldr	r0, [pc, #56]	; (8009098 <I2C_GetTiming+0xfc>)
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4403      	add	r3, r0
 800906c:	3310      	adds	r3, #16
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009072:	430b      	orrs	r3, r1
 8009074:	617b      	str	r3, [r7, #20]
        }
        break;
 8009076:	e006      	b.n	8009086 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3301      	adds	r3, #1
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d99b      	bls.n	8008fbc <I2C_GetTiming+0x20>
 8009084:	e000      	b.n	8009088 <I2C_GetTiming+0xec>
        break;
 8009086:	bf00      	nop
      }
    }
  }

  return ret;
 8009088:	697b      	ldr	r3, [r7, #20]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	08027bb8 	.word	0x08027bb8
 8009098:	24001910 	.word	0x24001910

0800909c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800909c:	b480      	push	{r7}
 800909e:	b08f      	sub	sp, #60	; 0x3c
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80090a6:	2310      	movs	r3, #16
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	085a      	lsrs	r2, r3, #1
 80090ae:	4b6e      	ldr	r3, [pc, #440]	; (8009268 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090b8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80090ba:	2332      	movs	r3, #50	; 0x32
 80090bc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80090be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80090c2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80090c4:	4a69      	ldr	r2, [pc, #420]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	212c      	movs	r1, #44	; 0x2c
 80090ca:	fb01 f303 	mul.w	r3, r1, r3
 80090ce:	4413      	add	r3, r2
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	4a65      	ldr	r2, [pc, #404]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	212c      	movs	r1, #44	; 0x2c
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	330c      	adds	r3, #12
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80090e8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80090ea:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80090ec:	495f      	ldr	r1, [pc, #380]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	202c      	movs	r0, #44	; 0x2c
 80090f2:	fb00 f303 	mul.w	r3, r0, r3
 80090f6:	440b      	add	r3, r1
 80090f8:	3328      	adds	r3, #40	; 0x28
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3303      	adds	r3, #3
 80090fe:	69f9      	ldr	r1, [r7, #28]
 8009100:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009108:	4a58      	ldr	r2, [pc, #352]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	212c      	movs	r1, #44	; 0x2c
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	4413      	add	r3, r2
 8009114:	3310      	adds	r3, #16
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	4a54      	ldr	r2, [pc, #336]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	212c      	movs	r1, #44	; 0x2c
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	3320      	adds	r3, #32
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800912c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800912e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009130:	494e      	ldr	r1, [pc, #312]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	202c      	movs	r0, #44	; 0x2c
 8009136:	fb00 f303 	mul.w	r3, r0, r3
 800913a:	440b      	add	r3, r1
 800913c:	3328      	adds	r3, #40	; 0x28
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3304      	adds	r3, #4
 8009142:	69f9      	ldr	r1, [r7, #28]
 8009144:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800914c:	4a47      	ldr	r2, [pc, #284]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	212c      	movs	r1, #44	; 0x2c
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	4413      	add	r3, r2
 8009158:	3320      	adds	r3, #32
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	4a43      	ldr	r2, [pc, #268]	; (800926c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	212c      	movs	r1, #44	; 0x2c
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	4413      	add	r3, r2
 800916a:	3314      	adds	r3, #20
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4403      	add	r3, r0
 8009170:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc01      	bgt.n	800917c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	dc01      	bgt.n	8009186 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009186:	2300      	movs	r3, #0
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
 800918a:	e062      	b.n	8009252 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800918c:	2300      	movs	r3, #0
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
 8009190:	e059      	b.n	8009246 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	3301      	adds	r3, #1
 8009196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009198:	3201      	adds	r2, #1
 800919a:	fb03 f202 	mul.w	r2, r3, r2
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d348      	bcc.n	8009240 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80091ae:	2300      	movs	r3, #0
 80091b0:	623b      	str	r3, [r7, #32]
 80091b2:	e042      	b.n	800923a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	3301      	adds	r3, #1
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	fb03 f202 	mul.w	r2, r3, r2
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d332      	bcc.n	8009234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d82e      	bhi.n	8009234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80091d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	429a      	cmp	r2, r3
 80091dc:	d02a      	beq.n	8009234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80091de:	4b24      	ldr	r3, [pc, #144]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4924      	ldr	r1, [pc, #144]	; (8009274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80091f2:	4b1f      	ldr	r3, [pc, #124]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	491f      	ldr	r1, [pc, #124]	; (8009274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	3304      	adds	r3, #4
 8009204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009206:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	4919      	ldr	r1, [pc, #100]	; (8009274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	3308      	adds	r3, #8
 800921a:	6a3a      	ldr	r2, [r7, #32]
 800921c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	4a11      	ldr	r2, [pc, #68]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800922a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800922c:	4b10      	ldr	r3, [pc, #64]	; (8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b7f      	cmp	r3, #127	; 0x7f
 8009232:	d812      	bhi.n	800925a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	3301      	adds	r3, #1
 8009238:	623b      	str	r3, [r7, #32]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b0f      	cmp	r3, #15
 800923e:	d9b9      	bls.n	80091b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	3301      	adds	r3, #1
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	2b0f      	cmp	r3, #15
 800924a:	d9a2      	bls.n	8009192 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	3301      	adds	r3, #1
 8009250:	62bb      	str	r3, [r7, #40]	; 0x28
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	2b0f      	cmp	r3, #15
 8009256:	d999      	bls.n	800918c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8009258:	e000      	b.n	800925c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800925a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800925c:	373c      	adds	r7, #60	; 0x3c
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	3b9aca00 	.word	0x3b9aca00
 800926c:	08027bb8 	.word	0x08027bb8
 8009270:	24002310 	.word	0x24002310
 8009274:	24001910 	.word	0x24001910

08009278 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009278:	b480      	push	{r7}
 800927a:	b093      	sub	sp, #76	; 0x4c
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295
 8009286:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	085a      	lsrs	r2, r3, #1
 800928c:	4b7a      	ldr	r3, [pc, #488]	; (8009478 <I2C_Compute_SCLL_SCLH+0x200>)
 800928e:	4413      	add	r3, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	fbb3 f3f2 	udiv	r3, r3, r2
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8009298:	4a78      	ldr	r2, [pc, #480]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	212c      	movs	r1, #44	; 0x2c
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	4413      	add	r3, r2
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	085a      	lsrs	r2, r3, #1
 80092a8:	4b73      	ldr	r3, [pc, #460]	; (8009478 <I2C_Compute_SCLL_SCLH+0x200>)
 80092aa:	4413      	add	r3, r2
 80092ac:	4973      	ldr	r1, [pc, #460]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	202c      	movs	r0, #44	; 0x2c
 80092b2:	fb00 f202 	mul.w	r2, r0, r2
 80092b6:	440a      	add	r2, r1
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80092c0:	2332      	movs	r3, #50	; 0x32
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80092c4:	4a6d      	ldr	r2, [pc, #436]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	212c      	movs	r1, #44	; 0x2c
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	3328      	adds	r3, #40	; 0x28
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80092dc:	4a67      	ldr	r2, [pc, #412]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	212c      	movs	r1, #44	; 0x2c
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	3304      	adds	r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a62      	ldr	r2, [pc, #392]	; (8009478 <I2C_Compute_SCLL_SCLH+0x200>)
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80092f4:	4a61      	ldr	r2, [pc, #388]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	212c      	movs	r1, #44	; 0x2c
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	4413      	add	r3, r2
 8009300:	3308      	adds	r3, #8
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a5c      	ldr	r2, [pc, #368]	; (8009478 <I2C_Compute_SCLL_SCLH+0x200>)
 8009306:	fbb2 f3f3 	udiv	r3, r2, r3
 800930a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
 8009314:	e0a3      	b.n	800945e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009316:	495a      	ldr	r1, [pc, #360]	; (8009480 <I2C_Compute_SCLL_SCLH+0x208>)
 8009318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009330:	2300      	movs	r3, #0
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009334:	e08c      	b.n	8009450 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	441a      	add	r2, r3
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	3301      	adds	r3, #1
 8009340:	6979      	ldr	r1, [r7, #20]
 8009342:	fb03 f101 	mul.w	r1, r3, r1
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	440b      	add	r3, r1
 800934c:	4413      	add	r3, r2
 800934e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009350:	4a4a      	ldr	r2, [pc, #296]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	212c      	movs	r1, #44	; 0x2c
 8009356:	fb01 f303 	mul.w	r3, r1, r3
 800935a:	4413      	add	r3, r2
 800935c:	3318      	adds	r3, #24
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	429a      	cmp	r2, r3
 8009364:	d971      	bls.n	800944a <I2C_Compute_SCLL_SCLH+0x1d2>
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	089b      	lsrs	r3, r3, #2
 8009372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009374:	429a      	cmp	r2, r3
 8009376:	d268      	bcs.n	800944a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009378:	2300      	movs	r3, #0
 800937a:	63bb      	str	r3, [r7, #56]	; 0x38
 800937c:	e062      	b.n	8009444 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800937e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	441a      	add	r2, r3
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	3301      	adds	r3, #1
 8009388:	6979      	ldr	r1, [r7, #20]
 800938a:	fb03 f101 	mul.w	r1, r3, r1
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	440b      	add	r3, r1
 8009394:	4413      	add	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	441a      	add	r2, r3
 800939e:	4937      	ldr	r1, [pc, #220]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	202c      	movs	r0, #44	; 0x2c
 80093a4:	fb00 f303 	mul.w	r3, r0, r3
 80093a8:	440b      	add	r3, r1
 80093aa:	3320      	adds	r3, #32
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	441a      	add	r2, r3
 80093b0:	4932      	ldr	r1, [pc, #200]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	202c      	movs	r0, #44	; 0x2c
 80093b6:	fb00 f303 	mul.w	r3, r0, r3
 80093ba:	440b      	add	r3, r1
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4413      	add	r3, r2
 80093c2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d338      	bcc.n	800943e <I2C_Compute_SCLL_SCLH+0x1c6>
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d834      	bhi.n	800943e <I2C_Compute_SCLL_SCLH+0x1c6>
 80093d4:	4a29      	ldr	r2, [pc, #164]	; (800947c <I2C_Compute_SCLL_SCLH+0x204>)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	212c      	movs	r1, #44	; 0x2c
 80093da:	fb01 f303 	mul.w	r3, r1, r3
 80093de:	4413      	add	r3, r2
 80093e0:	331c      	adds	r3, #28
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d329      	bcc.n	800943e <I2C_Compute_SCLL_SCLH+0x1c6>
 80093ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d225      	bcs.n	800943e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da02      	bge.n	8009406 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	425b      	negs	r3, r3
 8009404:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800940a:	429a      	cmp	r2, r3
 800940c:	d917      	bls.n	800943e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8009412:	491b      	ldr	r1, [pc, #108]	; (8009480 <I2C_Compute_SCLL_SCLH+0x208>)
 8009414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	440b      	add	r3, r1
 8009420:	3310      	adds	r3, #16
 8009422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009424:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8009426:	4916      	ldr	r1, [pc, #88]	; (8009480 <I2C_Compute_SCLL_SCLH+0x208>)
 8009428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	330c      	adds	r3, #12
 8009436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009438:	601a      	str	r2, [r3, #0]
              ret = count;
 800943a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	3301      	adds	r3, #1
 8009442:	63bb      	str	r3, [r7, #56]	; 0x38
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	2bff      	cmp	r3, #255	; 0xff
 8009448:	d999      	bls.n	800937e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	3301      	adds	r3, #1
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009452:	2bff      	cmp	r3, #255	; 0xff
 8009454:	f67f af6f 	bls.w	8009336 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945a:	3301      	adds	r3, #1
 800945c:	637b      	str	r3, [r7, #52]	; 0x34
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <I2C_Compute_SCLL_SCLH+0x20c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009464:	429a      	cmp	r2, r3
 8009466:	f4ff af56 	bcc.w	8009316 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800946a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800946c:	4618      	mov	r0, r3
 800946e:	374c      	adds	r7, #76	; 0x4c
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	3b9aca00 	.word	0x3b9aca00
 800947c:	08027bb8 	.word	0x08027bb8
 8009480:	24001910 	.word	0x24001910
 8009484:	24002310 	.word	0x24002310

08009488 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08a      	sub	sp, #40	; 0x28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009490:	4b31      	ldr	r3, [pc, #196]	; (8009558 <I2C4_MspInit+0xd0>)
 8009492:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009496:	4a30      	ldr	r2, [pc, #192]	; (8009558 <I2C4_MspInit+0xd0>)
 8009498:	f043 0308 	orr.w	r3, r3, #8
 800949c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80094a0:	4b2d      	ldr	r3, [pc, #180]	; (8009558 <I2C4_MspInit+0xd0>)
 80094a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80094a6:	f003 0308 	and.w	r3, r3, #8
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80094ae:	4b2a      	ldr	r3, [pc, #168]	; (8009558 <I2C4_MspInit+0xd0>)
 80094b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80094b4:	4a28      	ldr	r2, [pc, #160]	; (8009558 <I2C4_MspInit+0xd0>)
 80094b6:	f043 0308 	orr.w	r3, r3, #8
 80094ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80094be:	4b26      	ldr	r3, [pc, #152]	; (8009558 <I2C4_MspInit+0xd0>)
 80094c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80094cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80094d2:	2312      	movs	r3, #18
 80094d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80094da:	2302      	movs	r3, #2
 80094dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80094de:	2304      	movs	r3, #4
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80094e2:	f107 0314 	add.w	r3, r7, #20
 80094e6:	4619      	mov	r1, r3
 80094e8:	481c      	ldr	r0, [pc, #112]	; (800955c <I2C4_MspInit+0xd4>)
 80094ea:	f001 fedf 	bl	800b2ac <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80094ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80094f4:	2312      	movs	r3, #18
 80094f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80094fc:	2302      	movs	r3, #2
 80094fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009500:	2304      	movs	r3, #4
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009504:	f107 0314 	add.w	r3, r7, #20
 8009508:	4619      	mov	r1, r3
 800950a:	4814      	ldr	r0, [pc, #80]	; (800955c <I2C4_MspInit+0xd4>)
 800950c:	f001 fece 	bl	800b2ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8009510:	4b11      	ldr	r3, [pc, #68]	; (8009558 <I2C4_MspInit+0xd0>)
 8009512:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009516:	4a10      	ldr	r2, [pc, #64]	; (8009558 <I2C4_MspInit+0xd0>)
 8009518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800951c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <I2C4_MspInit+0xd0>)
 8009522:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952a:	60bb      	str	r3, [r7, #8]
 800952c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <I2C4_MspInit+0xd0>)
 8009530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009534:	4a08      	ldr	r2, [pc, #32]	; (8009558 <I2C4_MspInit+0xd0>)
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <I2C4_MspInit+0xd0>)
 8009540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009544:	4a04      	ldr	r2, [pc, #16]	; (8009558 <I2C4_MspInit+0xd0>)
 8009546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800954e:	bf00      	nop
 8009550:	3728      	adds	r7, #40	; 0x28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	58024400 	.word	0x58024400
 800955c:	58020c00 	.word	0x58020c00

08009560 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8009568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800956c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4619      	mov	r1, r3
 8009572:	480b      	ldr	r0, [pc, #44]	; (80095a0 <I2C4_MspDeInit+0x40>)
 8009574:	f002 f84a 	bl	800b60c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8009578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800957c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4619      	mov	r1, r3
 8009582:	4807      	ldr	r0, [pc, #28]	; (80095a0 <I2C4_MspDeInit+0x40>)
 8009584:	f002 f842 	bl	800b60c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <I2C4_MspDeInit+0x44>)
 800958a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800958e:	4a05      	ldr	r2, [pc, #20]	; (80095a4 <I2C4_MspDeInit+0x44>)
 8009590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009594:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8009598:	bf00      	nop
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	58020c00 	.word	0x58020c00
 80095a4:	58024400 	.word	0x58024400

080095a8 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af04      	add	r7, sp, #16
 80095ae:	607b      	str	r3, [r7, #4]
 80095b0:	4603      	mov	r3, r0
 80095b2:	81fb      	strh	r3, [r7, #14]
 80095b4:	460b      	mov	r3, r1
 80095b6:	81bb      	strh	r3, [r7, #12]
 80095b8:	4613      	mov	r3, r2
 80095ba:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80095bc:	8978      	ldrh	r0, [r7, #10]
 80095be:	89ba      	ldrh	r2, [r7, #12]
 80095c0:	89f9      	ldrh	r1, [r7, #14]
 80095c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095c6:	9302      	str	r3, [sp, #8]
 80095c8:	8b3b      	ldrh	r3, [r7, #24]
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4603      	mov	r3, r0
 80095d2:	4807      	ldr	r0, [pc, #28]	; (80095f0 <I2C4_WriteReg+0x48>)
 80095d4:	f002 fa32 	bl	800ba3c <HAL_I2C_Mem_Write>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80095de:	2300      	movs	r3, #0
 80095e0:	e001      	b.n	80095e6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80095e2:	f06f 0307 	mvn.w	r3, #7
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	24002314 	.word	0x24002314

080095f4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af04      	add	r7, sp, #16
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	4603      	mov	r3, r0
 80095fe:	81fb      	strh	r3, [r7, #14]
 8009600:	460b      	mov	r3, r1
 8009602:	81bb      	strh	r3, [r7, #12]
 8009604:	4613      	mov	r3, r2
 8009606:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009608:	8978      	ldrh	r0, [r7, #10]
 800960a:	89ba      	ldrh	r2, [r7, #12]
 800960c:	89f9      	ldrh	r1, [r7, #14]
 800960e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	8b3b      	ldrh	r3, [r7, #24]
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4603      	mov	r3, r0
 800961e:	4807      	ldr	r0, [pc, #28]	; (800963c <I2C4_ReadReg+0x48>)
 8009620:	f002 fb20 	bl	800bc64 <HAL_I2C_Mem_Read>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800962a:	2300      	movs	r3, #0
 800962c:	e001      	b.n	8009632 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800962e:	f06f 0307 	mvn.w	r3, #7
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	24002314 	.word	0x24002314

08009640 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b094      	sub	sp, #80	; 0x50
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800964a:	2300      	movs	r3, #0
 800964c:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009654:	f06f 0301 	mvn.w	r3, #1
 8009658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965a:	e071      	b.n	8009740 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800965c:	4a3b      	ldr	r2, [pc, #236]	; (800974c <BSP_OSPI_NOR_Init+0x10c>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d16b      	bne.n	8009740 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	225c      	movs	r2, #92	; 0x5c
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	4a37      	ldr	r2, [pc, #220]	; (8009750 <BSP_OSPI_NOR_Init+0x110>)
 8009672:	4413      	add	r3, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fa09 	bl	8009a8c <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800967a:	f107 031c 	add.w	r3, r7, #28
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fee8 	bl	8008454 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8009684:	2303      	movs	r3, #3
 8009686:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800968c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800968e:	fa93 f3a3 	rbit	r3, r3
 8009692:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009696:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 800969e:	2320      	movs	r3, #32
 80096a0:	e003      	b.n	80096aa <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 80096a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a4:	fab3 f383 	clz	r3, r3
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	225c      	movs	r2, #92	; 0x5c
 80096ba:	fb02 f303 	mul.w	r3, r2, r3
 80096be:	4a24      	ldr	r2, [pc, #144]	; (8009750 <BSP_OSPI_NOR_Init+0x110>)
 80096c0:	4413      	add	r3, r2
 80096c2:	f107 020c 	add.w	r2, r7, #12
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f895 	bl	80097f8 <MX_OSPI_NOR_Init>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80096d4:	f06f 0303 	mvn.w	r3, #3
 80096d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096da:	e031      	b.n	8009740 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fb7f 	bl	8009de0 <OSPI_NOR_ResetMemory>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80096e8:	f06f 0304 	mvn.w	r3, #4
 80096ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ee:	e027      	b.n	8009740 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	225c      	movs	r2, #92	; 0x5c
 80096f4:	fb02 f303 	mul.w	r3, r2, r3
 80096f8:	4a15      	ldr	r2, [pc, #84]	; (8009750 <BSP_OSPI_NOR_Init+0x110>)
 80096fa:	1898      	adds	r0, r3, r2
 80096fc:	4a13      	ldr	r2, [pc, #76]	; (800974c <BSP_OSPI_NOR_Init+0x10c>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	7859      	ldrb	r1, [r3, #1]
 8009706:	4a11      	ldr	r2, [pc, #68]	; (800974c <BSP_OSPI_NOR_Init+0x10c>)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4413      	add	r3, r2
 800970e:	789b      	ldrb	r3, [r3, #2]
 8009710:	461a      	mov	r2, r3
 8009712:	f7fe fece 	bl	80084b2 <MX25LM51245G_AutoPollingMemReady>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d003      	beq.n	8009724 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800971c:	f06f 0304 	mvn.w	r3, #4
 8009720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009722:	e00d      	b.n	8009740 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	7819      	ldrb	r1, [r3, #0]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	461a      	mov	r2, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f936 	bl	80099a0 <BSP_OSPI_NOR_ConfigFlash>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800973a:	f06f 0304 	mvn.w	r3, #4
 800973e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8009740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009742:	4618      	mov	r0, r3
 8009744:	3750      	adds	r7, #80	; 0x50
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	240023c4 	.word	0x240023c4
 8009750:	24002368 	.word	0x24002368

08009754 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009766:	f06f 0301 	mvn.w	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	e03a      	b.n	80097e4 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800976e:	4a20      	ldr	r2, [pc, #128]	; (80097f0 <BSP_OSPI_NOR_DeInit+0x9c>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009776:	2b02      	cmp	r3, #2
 8009778:	d108      	bne.n	800978c <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f8da 	bl	8009934 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009786:	f06f 0304 	mvn.w	r3, #4
 800978a:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d128      	bne.n	80097e4 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8009792:	4a17      	ldr	r2, [pc, #92]	; (80097f0 <BSP_OSPI_NOR_DeInit+0x9c>)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2100      	movs	r1, #0
 8009798:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800979c:	4a14      	ldr	r2, [pc, #80]	; (80097f0 <BSP_OSPI_NOR_DeInit+0x9c>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	2200      	movs	r2, #0
 80097a6:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 80097a8:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <BSP_OSPI_NOR_DeInit+0x9c>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4413      	add	r3, r2
 80097b0:	2200      	movs	r2, #0
 80097b2:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	225c      	movs	r2, #92	; 0x5c
 80097b8:	fb02 f303 	mul.w	r3, r2, r3
 80097bc:	4a0d      	ldr	r2, [pc, #52]	; (80097f4 <BSP_OSPI_NOR_DeInit+0xa0>)
 80097be:	4413      	add	r3, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fab3 	bl	8009d2c <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	225c      	movs	r2, #92	; 0x5c
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <BSP_OSPI_NOR_DeInit+0xa0>)
 80097d0:	4413      	add	r3, r2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f003 fba0 	bl	800cf18 <HAL_OSPI_DeInit>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80097de:	f06f 0303 	mvn.w	r3, #3
 80097e2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80097e4:	68fb      	ldr	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	240023c4 	.word	0x240023c4
 80097f4:	24002368 	.word	0x24002368

080097f8 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a20      	ldr	r2, [pc, #128]	; (8009888 <MX_OSPI_NOR_Init+0x90>)
 8009806:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 32;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2208      	movs	r2, #8
 800984e:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d108      	bne.n	800986a <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800985e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009866:	62da      	str	r2, [r3, #44]	; 0x2c
 8009868:	e005      	b.n	8009876 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f003 fa92 	bl	800cda0 <HAL_OSPI_Init>
 800987c:	4603      	mov	r3, r0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	52005000 	.word	0x52005000

0800988c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800989e:	f06f 0301 	mvn.w	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	e03d      	b.n	8009922 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80098a6:	4a21      	ldr	r2, [pc, #132]	; (800992c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	4413      	add	r3, r2
 80098ae:	789b      	ldrb	r3, [r3, #2]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d11b      	bne.n	80098ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	225c      	movs	r2, #92	; 0x5c
 80098b8:	fb02 f303 	mul.w	r3, r2, r3
 80098bc:	4a1c      	ldr	r2, [pc, #112]	; (8009930 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80098be:	1898      	adds	r0, r3, r2
 80098c0:	4a1a      	ldr	r2, [pc, #104]	; (800992c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4413      	add	r3, r2
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	2201      	movs	r2, #1
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7fe fe9d 	bl	800860c <MX25LM51245G_EnableMemoryMappedModeSTR>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80098d8:	f06f 0304 	mvn.w	r3, #4
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	e020      	b.n	8009922 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80098e0:	4a12      	ldr	r2, [pc, #72]	; (800992c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2102      	movs	r1, #2
 80098e6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80098ea:	e01a      	b.n	8009922 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	225c      	movs	r2, #92	; 0x5c
 80098f0:	fb02 f303 	mul.w	r3, r2, r3
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80098f6:	441a      	add	r2, r3
 80098f8:	490c      	ldr	r1, [pc, #48]	; (800992c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	440b      	add	r3, r1
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	4619      	mov	r1, r3
 8009904:	4610      	mov	r0, r2
 8009906:	f7fe ff2b 	bl	8008760 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009910:	f06f 0304 	mvn.w	r3, #4
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	e004      	b.n	8009922 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8009918:	4a04      	ldr	r2, [pc, #16]	; (800992c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2102      	movs	r1, #2
 800991e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8009922:	68fb      	ldr	r3, [r7, #12]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	240023c4 	.word	0x240023c4
 8009930:	24002368 	.word	0x24002368

08009934 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009946:	f06f 0301 	mvn.w	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	e01e      	b.n	800998c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800994e:	4a12      	ldr	r2, [pc, #72]	; (8009998 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d003      	beq.n	8009962 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800995a:	f06f 031a 	mvn.w	r3, #26
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e014      	b.n	800998c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	225c      	movs	r2, #92	; 0x5c
 8009966:	fb02 f303 	mul.w	r3, r2, r3
 800996a:	4a0c      	ldr	r2, [pc, #48]	; (800999c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800996c:	4413      	add	r3, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f003 ff04 	bl	800d77c <HAL_OSPI_Abort>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800997a:	f06f 0303 	mvn.w	r3, #3
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e004      	b.n	800998c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009982:	4a05      	ldr	r2, [pc, #20]	; (8009998 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2101      	movs	r1, #1
 8009988:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800998c:	68fb      	ldr	r3, [r7, #12]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	240023c4 	.word	0x240023c4
 800999c:	24002368 	.word	0x24002368

080099a0 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
 80099ac:	4613      	mov	r3, r2
 80099ae:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80099ba:	f06f 0301 	mvn.w	r3, #1
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	e05d      	b.n	8009a7e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80099c2:	4a31      	ldr	r2, [pc, #196]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d103      	bne.n	80099d6 <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80099ce:	f06f 0319 	mvn.w	r3, #25
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e053      	b.n	8009a7e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80099d6:	4a2c      	ldr	r2, [pc, #176]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4413      	add	r3, r2
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d125      	bne.n	8009a30 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d107      	bne.n	80099fa <BSP_OSPI_NOR_ConfigFlash+0x5a>
 80099ea:	4a27      	ldr	r2, [pc, #156]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	789b      	ldrb	r3, [r3, #2]
 80099f4:	78ba      	ldrb	r2, [r7, #2]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d02a      	beq.n	8009a50 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fbfc 	bl	800a1f8 <OSPI_NOR_ExitOPIMode>
 8009a00:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d123      	bne.n	8009a50 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d120      	bne.n	8009a50 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	789b      	ldrb	r3, [r3, #2]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fa6f 	bl	8009f00 <OSPI_NOR_EnterDOPIMode>
 8009a22:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 8009a24:	e014      	b.n	8009a50 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fb3a 	bl	800a0a0 <OSPI_NOR_EnterSOPIMode>
 8009a2c:	60f8      	str	r0, [r7, #12]
      break;
 8009a2e:	e00f      	b.n	8009a50 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d10e      	bne.n	8009a54 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8009a36:	78bb      	ldrb	r3, [r7, #2]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fb2f 	bl	800a0a0 <OSPI_NOR_EnterSOPIMode>
 8009a42:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 8009a44:	e006      	b.n	8009a54 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fa5a 	bl	8009f00 <OSPI_NOR_EnterDOPIMode>
 8009a4c:	60f8      	str	r0, [r7, #12]
      break;
 8009a4e:	e001      	b.n	8009a54 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 8009a54:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d110      	bne.n	8009a7e <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009a5c:	4a0a      	ldr	r2, [pc, #40]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2101      	movs	r1, #1
 8009a62:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8009a66:	4a08      	ldr	r2, [pc, #32]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8009a72:	4a05      	ldr	r2, [pc, #20]	; (8009a88 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	4413      	add	r3, r2
 8009a7a:	78ba      	ldrb	r2, [r7, #2]
 8009a7c:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	240023c4 	.word	0x240023c4

08009a8c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b094      	sub	sp, #80	; 0x50
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8009a94:	4b9e      	ldr	r3, [pc, #632]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009a96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009a9a:	4a9d      	ldr	r2, [pc, #628]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009aa0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8009aa4:	4b9a      	ldr	r3, [pc, #616]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009aa6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009ab2:	4b97      	ldr	r3, [pc, #604]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ab6:	4a96      	ldr	r2, [pc, #600]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009abc:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009abe:	4b94      	ldr	r3, [pc, #592]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac2:	4a93      	ldr	r2, [pc, #588]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ac8:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8009aca:	4b91      	ldr	r3, [pc, #580]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009ad0:	4a8f      	ldr	r2, [pc, #572]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ad2:	f043 0302 	orr.w	r3, r3, #2
 8009ad6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009ada:	4b8d      	ldr	r3, [pc, #564]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009adc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 8009ae8:	4b89      	ldr	r3, [pc, #548]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009aee:	4a88      	ldr	r2, [pc, #544]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009af0:	f043 0304 	orr.w	r3, r3, #4
 8009af4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009af8:	4b85      	ldr	r3, [pc, #532]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	633b      	str	r3, [r7, #48]	; 0x30
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 8009b06:	4b82      	ldr	r3, [pc, #520]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b0c:	4a80      	ldr	r2, [pc, #512]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009b16:	4b7e      	ldr	r3, [pc, #504]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 8009b24:	4b7a      	ldr	r3, [pc, #488]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b2a:	4a79      	ldr	r2, [pc, #484]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b2c:	f043 0308 	orr.w	r3, r3, #8
 8009b30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009b34:	4b76      	ldr	r3, [pc, #472]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 8009b42:	4b73      	ldr	r3, [pc, #460]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b48:	4a71      	ldr	r2, [pc, #452]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b4a:	f043 0320 	orr.w	r3, r3, #32
 8009b4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009b52:	4b6f      	ldr	r3, [pc, #444]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 8009b60:	4b6b      	ldr	r3, [pc, #428]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b66:	4a6a      	ldr	r2, [pc, #424]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b68:	f043 0320 	orr.w	r3, r3, #32
 8009b6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009b70:	4b67      	ldr	r3, [pc, #412]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	623b      	str	r3, [r7, #32]
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 8009b7e:	4b64      	ldr	r3, [pc, #400]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b84:	4a62      	ldr	r2, [pc, #392]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b86:	f043 0320 	orr.w	r3, r3, #32
 8009b8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009b8e:	4b60      	ldr	r3, [pc, #384]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 8009b9c:	4b5c      	ldr	r3, [pc, #368]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009ba2:	4a5b      	ldr	r2, [pc, #364]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009ba4:	f043 0304 	orr.w	r3, r3, #4
 8009ba8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009bac:	4b58      	ldr	r3, [pc, #352]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 8009bba:	4b55      	ldr	r3, [pc, #340]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bc0:	4a53      	ldr	r2, [pc, #332]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009bca:	4b51      	ldr	r3, [pc, #324]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8009bd8:	4b4d      	ldr	r3, [pc, #308]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bde:	4a4c      	ldr	r2, [pc, #304]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009be8:	4b49      	ldr	r3, [pc, #292]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 8009bf6:	4b46      	ldr	r3, [pc, #280]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009bfc:	4a44      	ldr	r2, [pc, #272]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009c06:	4b42      	ldr	r3, [pc, #264]	; (8009d10 <OSPI_NOR_MspInit+0x284>)
 8009c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009c18:	2302      	movs	r3, #2
 8009c1a:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c20:	2303      	movs	r3, #3
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8009c24:	230a      	movs	r3, #10
 8009c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8009c28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4839      	ldr	r0, [pc, #228]	; (8009d14 <OSPI_NOR_MspInit+0x288>)
 8009c30:	f001 fb3c 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8009c34:	2320      	movs	r3, #32
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8009c38:	230a      	movs	r3, #10
 8009c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8009c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c40:	4619      	mov	r1, r3
 8009c42:	4835      	ldr	r0, [pc, #212]	; (8009d18 <OSPI_NOR_MspInit+0x28c>)
 8009c44:	f001 fb32 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8009c48:	2304      	movs	r3, #4
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8009c50:	2309      	movs	r3, #9
 8009c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8009c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4830      	ldr	r0, [pc, #192]	; (8009d1c <OSPI_NOR_MspInit+0x290>)
 8009c5c:	f001 fb26 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8009c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8009c66:	2309      	movs	r3, #9
 8009c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8009c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c6e:	4619      	mov	r1, r3
 8009c70:	482b      	ldr	r0, [pc, #172]	; (8009d20 <OSPI_NOR_MspInit+0x294>)
 8009c72:	f001 fb1b 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8009c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8009c7c:	230a      	movs	r3, #10
 8009c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8009c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c84:	4619      	mov	r1, r3
 8009c86:	4827      	ldr	r0, [pc, #156]	; (8009d24 <OSPI_NOR_MspInit+0x298>)
 8009c88:	f001 fb10 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8009c90:	230a      	movs	r3, #10
 8009c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8009c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4822      	ldr	r0, [pc, #136]	; (8009d24 <OSPI_NOR_MspInit+0x298>)
 8009c9c:	f001 fb06 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8009ca4:	230a      	movs	r3, #10
 8009ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8009ca8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cac:	4619      	mov	r1, r3
 8009cae:	481d      	ldr	r0, [pc, #116]	; (8009d24 <OSPI_NOR_MspInit+0x298>)
 8009cb0:	f001 fafc 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8009cb8:	230a      	movs	r3, #10
 8009cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8009cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4815      	ldr	r0, [pc, #84]	; (8009d18 <OSPI_NOR_MspInit+0x28c>)
 8009cc4:	f001 faf2 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8009cc8:	2308      	movs	r3, #8
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8009ccc:	2309      	movs	r3, #9
 8009cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8009cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4814      	ldr	r0, [pc, #80]	; (8009d28 <OSPI_NOR_MspInit+0x29c>)
 8009cd8:	f001 fae8 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8009cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8009ce2:	2309      	movs	r3, #9
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8009ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cea:	4619      	mov	r1, r3
 8009cec:	4809      	ldr	r0, [pc, #36]	; (8009d14 <OSPI_NOR_MspInit+0x288>)
 8009cee:	f001 fadd 	bl	800b2ac <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8009cf2:	2380      	movs	r3, #128	; 0x80
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8009cfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4807      	ldr	r0, [pc, #28]	; (8009d20 <OSPI_NOR_MspInit+0x294>)
 8009d02:	f001 fad3 	bl	800b2ac <HAL_GPIO_Init>
}
 8009d06:	bf00      	nop
 8009d08:	3750      	adds	r7, #80	; 0x50
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	58024400 	.word	0x58024400
 8009d14:	58021800 	.word	0x58021800
 8009d18:	58020800 	.word	0x58020800
 8009d1c:	58020400 	.word	0x58020400
 8009d20:	58020c00 	.word	0x58020c00
 8009d24:	58021400 	.word	0x58021400
 8009d28:	58021c00 	.word	0x58021c00

08009d2c <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8009d34:	2104      	movs	r1, #4
 8009d36:	4823      	ldr	r0, [pc, #140]	; (8009dc4 <OSPI_NOR_MspDeInit+0x98>)
 8009d38:	f001 fc68 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8009d3c:	2120      	movs	r1, #32
 8009d3e:	4822      	ldr	r0, [pc, #136]	; (8009dc8 <OSPI_NOR_MspDeInit+0x9c>)
 8009d40:	f001 fc64 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8009d44:	2140      	movs	r1, #64	; 0x40
 8009d46:	4821      	ldr	r0, [pc, #132]	; (8009dcc <OSPI_NOR_MspDeInit+0xa0>)
 8009d48:	f001 fc60 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8009d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d50:	481f      	ldr	r0, [pc, #124]	; (8009dd0 <OSPI_NOR_MspDeInit+0xa4>)
 8009d52:	f001 fc5b 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8009d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d5a:	481e      	ldr	r0, [pc, #120]	; (8009dd4 <OSPI_NOR_MspDeInit+0xa8>)
 8009d5c:	f001 fc56 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8009d60:	2180      	movs	r1, #128	; 0x80
 8009d62:	481c      	ldr	r0, [pc, #112]	; (8009dd4 <OSPI_NOR_MspDeInit+0xa8>)
 8009d64:	f001 fc52 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	481a      	ldr	r0, [pc, #104]	; (8009dd4 <OSPI_NOR_MspDeInit+0xa8>)
 8009d6c:	f001 fc4e 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8009d70:	2102      	movs	r1, #2
 8009d72:	4815      	ldr	r0, [pc, #84]	; (8009dc8 <OSPI_NOR_MspDeInit+0x9c>)
 8009d74:	f001 fc4a 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8009d78:	2108      	movs	r1, #8
 8009d7a:	4817      	ldr	r0, [pc, #92]	; (8009dd8 <OSPI_NOR_MspDeInit+0xac>)
 8009d7c:	f001 fc46 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8009d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d84:	4811      	ldr	r0, [pc, #68]	; (8009dcc <OSPI_NOR_MspDeInit+0xa0>)
 8009d86:	f001 fc41 	bl	800b60c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8009d8a:	2180      	movs	r1, #128	; 0x80
 8009d8c:	4810      	ldr	r0, [pc, #64]	; (8009dd0 <OSPI_NOR_MspDeInit+0xa4>)
 8009d8e:	f001 fc3d 	bl	800b60c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009d92:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d96:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d9c:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009d9e:	4b0f      	ldr	r3, [pc, #60]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da2:	4a0e      	ldr	r2, [pc, #56]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009da8:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009dac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <OSPI_NOR_MspDeInit+0xb0>)
 8009db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	58020400 	.word	0x58020400
 8009dc8:	58020800 	.word	0x58020800
 8009dcc:	58021800 	.word	0x58021800
 8009dd0:	58020c00 	.word	0x58020c00
 8009dd4:	58021400 	.word	0x58021400
 8009dd8:	58021c00 	.word	0x58021c00
 8009ddc:	58024400 	.word	0x58024400

08009de0 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	225c      	movs	r2, #92	; 0x5c
 8009df0:	fb02 f303 	mul.w	r3, r2, r3
 8009df4:	4a40      	ldr	r2, [pc, #256]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009df6:	4413      	add	r3, r2
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe ff18 	bl	8008c32 <MX25LM51245G_ResetEnable>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e08:	f06f 0304 	mvn.w	r3, #4
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	e06d      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	225c      	movs	r2, #92	; 0x5c
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	4a37      	ldr	r2, [pc, #220]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009e1a:	4413      	add	r3, r2
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe ff5e 	bl	8008ce2 <MX25LM51245G_ResetMemory>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e2c:	f06f 0304 	mvn.w	r3, #4
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e05b      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	225c      	movs	r2, #92	; 0x5c
 8009e38:	fb02 f303 	mul.w	r3, r2, r3
 8009e3c:	4a2e      	ldr	r2, [pc, #184]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009e3e:	4413      	add	r3, r2
 8009e40:	2200      	movs	r2, #0
 8009e42:	2101      	movs	r1, #1
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fef4 	bl	8008c32 <MX25LM51245G_ResetEnable>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e50:	f06f 0304 	mvn.w	r3, #4
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	e049      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	225c      	movs	r2, #92	; 0x5c
 8009e5c:	fb02 f303 	mul.w	r3, r2, r3
 8009e60:	4a25      	ldr	r2, [pc, #148]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009e62:	4413      	add	r3, r2
 8009e64:	2200      	movs	r2, #0
 8009e66:	2101      	movs	r1, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe ff3a 	bl	8008ce2 <MX25LM51245G_ResetMemory>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e74:	f06f 0304 	mvn.w	r3, #4
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e037      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	225c      	movs	r2, #92	; 0x5c
 8009e80:	fb02 f303 	mul.w	r3, r2, r3
 8009e84:	4a1c      	ldr	r2, [pc, #112]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009e86:	4413      	add	r3, r2
 8009e88:	2201      	movs	r2, #1
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fed0 	bl	8008c32 <MX25LM51245G_ResetEnable>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e98:	f06f 0304 	mvn.w	r3, #4
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e025      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	225c      	movs	r2, #92	; 0x5c
 8009ea4:	fb02 f303 	mul.w	r3, r2, r3
 8009ea8:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <OSPI_NOR_ResetMemory+0x118>)
 8009eaa:	4413      	add	r3, r2
 8009eac:	2201      	movs	r2, #1
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe ff16 	bl	8008ce2 <MX25LM51245G_ResetMemory>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ebc:	f06f 0304 	mvn.w	r3, #4
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	e013      	b.n	8009eec <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8009ec4:	4a0d      	ldr	r2, [pc, #52]	; (8009efc <OSPI_NOR_ResetMemory+0x11c>)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2101      	movs	r1, #1
 8009eca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8009ece:	4a0b      	ldr	r2, [pc, #44]	; (8009efc <OSPI_NOR_ResetMemory+0x11c>)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8009eda:	4a08      	ldr	r2, [pc, #32]	; (8009efc <OSPI_NOR_ResetMemory+0x11c>)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8009ee6:	2064      	movs	r0, #100	; 0x64
 8009ee8:	f000 fd1a 	bl	800a920 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8009eec:	68fb      	ldr	r3, [r7, #12]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	24002368 	.word	0x24002368
 8009efc:	240023c4 	.word	0x240023c4

08009f00 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	225c      	movs	r2, #92	; 0x5c
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
 8009f14:	4a60      	ldr	r2, [pc, #384]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 8009f16:	1898      	adds	r0, r3, r2
 8009f18:	4a60      	ldr	r2, [pc, #384]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	00db      	lsls	r3, r3, #3
 8009f1e:	4413      	add	r3, r2
 8009f20:	7859      	ldrb	r1, [r3, #1]
 8009f22:	4a5e      	ldr	r2, [pc, #376]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	4413      	add	r3, r2
 8009f2a:	789b      	ldrb	r3, [r3, #2]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f7fe fc86 	bl	800883e <MX25LM51245G_WriteEnable>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f38:	f06f 0304 	mvn.w	r3, #4
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e0a6      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	225c      	movs	r2, #92	; 0x5c
 8009f44:	fb02 f303 	mul.w	r3, r2, r3
 8009f48:	4a53      	ldr	r2, [pc, #332]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 8009f4a:	1898      	adds	r0, r3, r2
 8009f4c:	4a53      	ldr	r2, [pc, #332]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	4413      	add	r3, r2
 8009f54:	7859      	ldrb	r1, [r3, #1]
 8009f56:	4a51      	ldr	r2, [pc, #324]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	789a      	ldrb	r2, [r3, #2]
 8009f60:	2307      	movs	r3, #7
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f68:	f7fe fd34 	bl	80089d4 <MX25LM51245G_WriteCfg2Register>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f72:	f06f 0304 	mvn.w	r3, #4
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e089      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	225c      	movs	r2, #92	; 0x5c
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	4a45      	ldr	r2, [pc, #276]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 8009f84:	1898      	adds	r0, r3, r2
 8009f86:	4a45      	ldr	r2, [pc, #276]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	7859      	ldrb	r1, [r3, #1]
 8009f90:	4a42      	ldr	r2, [pc, #264]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	4413      	add	r3, r2
 8009f98:	789b      	ldrb	r3, [r3, #2]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7fe fc4f 	bl	800883e <MX25LM51245G_WriteEnable>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fa6:	f06f 0304 	mvn.w	r3, #4
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e06f      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	225c      	movs	r2, #92	; 0x5c
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	4a38      	ldr	r2, [pc, #224]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 8009fb8:	1898      	adds	r0, r3, r2
 8009fba:	4a38      	ldr	r2, [pc, #224]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	7859      	ldrb	r1, [r3, #1]
 8009fc4:	4a35      	ldr	r2, [pc, #212]	; (800a09c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	4413      	add	r3, r2
 8009fcc:	789a      	ldrb	r2, [r3, #2]
 8009fce:	2302      	movs	r3, #2
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f7fe fcfe 	bl	80089d4 <MX25LM51245G_WriteCfg2Register>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fde:	f06f 0304 	mvn.w	r3, #4
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e053      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009fe6:	2028      	movs	r0, #40	; 0x28
 8009fe8:	f000 fc9a 	bl	800a920 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009fec:	4a2a      	ldr	r2, [pc, #168]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	215c      	movs	r1, #92	; 0x5c
 8009ff2:	fb01 f303 	mul.w	r3, r1, r3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffe:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a000:	4a25      	ldr	r2, [pc, #148]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	215c      	movs	r1, #92	; 0x5c
 800a006:	fb01 f303 	mul.w	r3, r1, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	332c      	adds	r3, #44	; 0x2c
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	225c      	movs	r2, #92	; 0x5c
 800a018:	fb02 f303 	mul.w	r3, r2, r3
 800a01c:	4a1e      	ldr	r2, [pc, #120]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 800a01e:	4413      	add	r3, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f002 febd 	bl	800cda0 <HAL_OSPI_Init>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a02c:	f06f 0303 	mvn.w	r3, #3
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	e02c      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	225c      	movs	r2, #92	; 0x5c
 800a038:	fb02 f303 	mul.w	r3, r2, r3
 800a03c:	4a16      	ldr	r2, [pc, #88]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 800a03e:	4413      	add	r3, r2
 800a040:	2201      	movs	r2, #1
 800a042:	2101      	movs	r1, #1
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fa34 	bl	80084b2 <MX25LM51245G_AutoPollingMemReady>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a050:	f06f 0304 	mvn.w	r3, #4
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e01a      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	225c      	movs	r2, #92	; 0x5c
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
 800a060:	4a0d      	ldr	r2, [pc, #52]	; (800a098 <OSPI_NOR_EnterDOPIMode+0x198>)
 800a062:	1898      	adds	r0, r3, r2
 800a064:	f107 0308 	add.w	r3, r7, #8
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	2300      	movs	r3, #0
 800a06c:	2201      	movs	r2, #1
 800a06e:	2101      	movs	r1, #1
 800a070:	f7fe fd45 	bl	8008afe <MX25LM51245G_ReadCfg2Register>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a07a:	f06f 0304 	mvn.w	r3, #4
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e005      	b.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800a082:	7a3b      	ldrb	r3, [r7, #8]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d002      	beq.n	800a08e <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a088:	f06f 0304 	mvn.w	r3, #4
 800a08c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a08e:	68fb      	ldr	r3, [r7, #12]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	24002368 	.word	0x24002368
 800a09c:	240023c4 	.word	0x240023c4

0800a0a0 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	225c      	movs	r2, #92	; 0x5c
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
 800a0b4:	4a4e      	ldr	r2, [pc, #312]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a0b6:	1898      	adds	r0, r3, r2
 800a0b8:	4a4e      	ldr	r2, [pc, #312]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	4413      	add	r3, r2
 800a0c0:	7859      	ldrb	r1, [r3, #1]
 800a0c2:	4a4c      	ldr	r2, [pc, #304]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	789b      	ldrb	r3, [r3, #2]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f7fe fbb6 	bl	800883e <MX25LM51245G_WriteEnable>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0d8:	f06f 0304 	mvn.w	r3, #4
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e082      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	225c      	movs	r2, #92	; 0x5c
 800a0e4:	fb02 f303 	mul.w	r3, r2, r3
 800a0e8:	4a41      	ldr	r2, [pc, #260]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a0ea:	1898      	adds	r0, r3, r2
 800a0ec:	4a41      	ldr	r2, [pc, #260]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	7859      	ldrb	r1, [r3, #1]
 800a0f6:	4a3f      	ldr	r2, [pc, #252]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	789a      	ldrb	r2, [r3, #2]
 800a100:	2307      	movs	r3, #7
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a108:	f7fe fc64 	bl	80089d4 <MX25LM51245G_WriteCfg2Register>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a112:	f06f 0304 	mvn.w	r3, #4
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	e065      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	225c      	movs	r2, #92	; 0x5c
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
 800a122:	4a33      	ldr	r2, [pc, #204]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a124:	1898      	adds	r0, r3, r2
 800a126:	4a33      	ldr	r2, [pc, #204]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	4413      	add	r3, r2
 800a12e:	7859      	ldrb	r1, [r3, #1]
 800a130:	4a30      	ldr	r2, [pc, #192]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4413      	add	r3, r2
 800a138:	789b      	ldrb	r3, [r3, #2]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f7fe fb7f 	bl	800883e <MX25LM51245G_WriteEnable>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a146:	f06f 0304 	mvn.w	r3, #4
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	e04b      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	225c      	movs	r2, #92	; 0x5c
 800a152:	fb02 f303 	mul.w	r3, r2, r3
 800a156:	4a26      	ldr	r2, [pc, #152]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a158:	1898      	adds	r0, r3, r2
 800a15a:	4a26      	ldr	r2, [pc, #152]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	7859      	ldrb	r1, [r3, #1]
 800a164:	4a23      	ldr	r2, [pc, #140]	; (800a1f4 <OSPI_NOR_EnterSOPIMode+0x154>)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	00db      	lsls	r3, r3, #3
 800a16a:	4413      	add	r3, r2
 800a16c:	789a      	ldrb	r2, [r3, #2]
 800a16e:	2301      	movs	r3, #1
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2300      	movs	r3, #0
 800a174:	f7fe fc2e 	bl	80089d4 <MX25LM51245G_WriteCfg2Register>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a17e:	f06f 0304 	mvn.w	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e02f      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a186:	2028      	movs	r0, #40	; 0x28
 800a188:	f000 fbca 	bl	800a920 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	225c      	movs	r2, #92	; 0x5c
 800a190:	fb02 f303 	mul.w	r3, r2, r3
 800a194:	4a16      	ldr	r2, [pc, #88]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a196:	4413      	add	r3, r2
 800a198:	2200      	movs	r2, #0
 800a19a:	2101      	movs	r1, #1
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe f988 	bl	80084b2 <MX25LM51245G_AutoPollingMemReady>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1a8:	f06f 0304 	mvn.w	r3, #4
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	e01a      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	225c      	movs	r2, #92	; 0x5c
 800a1b4:	fb02 f303 	mul.w	r3, r2, r3
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <OSPI_NOR_EnterSOPIMode+0x150>)
 800a1ba:	1898      	adds	r0, r3, r2
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	f7fe fc99 	bl	8008afe <MX25LM51245G_ReadCfg2Register>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1d2:	f06f 0304 	mvn.w	r3, #4
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e005      	b.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800a1da:	7a3b      	ldrb	r3, [r7, #8]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d002      	beq.n	800a1e6 <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1e0:	f06f 0304 	mvn.w	r3, #4
 800a1e4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	24002368 	.word	0x24002368
 800a1f4:	240023c4 	.word	0x240023c4

0800a1f8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	225c      	movs	r2, #92	; 0x5c
 800a208:	fb02 f303 	mul.w	r3, r2, r3
 800a20c:	4a49      	ldr	r2, [pc, #292]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a20e:	1898      	adds	r0, r3, r2
 800a210:	4a49      	ldr	r2, [pc, #292]	; (800a338 <OSPI_NOR_ExitOPIMode+0x140>)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	4413      	add	r3, r2
 800a218:	7859      	ldrb	r1, [r3, #1]
 800a21a:	4a47      	ldr	r2, [pc, #284]	; (800a338 <OSPI_NOR_ExitOPIMode+0x140>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	461a      	mov	r2, r3
 800a226:	f7fe fb0a 	bl	800883e <MX25LM51245G_WriteEnable>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a230:	f06f 0304 	mvn.w	r3, #4
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	e077      	b.n	800a328 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	225c      	movs	r2, #92	; 0x5c
 800a244:	fb02 f303 	mul.w	r3, r2, r3
 800a248:	4a3a      	ldr	r2, [pc, #232]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a24a:	1898      	adds	r0, r3, r2
 800a24c:	4a3a      	ldr	r2, [pc, #232]	; (800a338 <OSPI_NOR_ExitOPIMode+0x140>)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4413      	add	r3, r2
 800a254:	7859      	ldrb	r1, [r3, #1]
 800a256:	4a38      	ldr	r2, [pc, #224]	; (800a338 <OSPI_NOR_ExitOPIMode+0x140>)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4413      	add	r3, r2
 800a25e:	789a      	ldrb	r2, [r3, #2]
 800a260:	7a3b      	ldrb	r3, [r7, #8]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	f7fe fbb5 	bl	80089d4 <MX25LM51245G_WriteCfg2Register>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a270:	f06f 0304 	mvn.w	r3, #4
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e057      	b.n	800a328 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a278:	2028      	movs	r0, #40	; 0x28
 800a27a:	f000 fb51 	bl	800a920 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800a27e:	4a2e      	ldr	r2, [pc, #184]	; (800a338 <OSPI_NOR_ExitOPIMode+0x140>)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	4413      	add	r3, r2
 800a286:	789b      	ldrb	r3, [r3, #2]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d120      	bne.n	800a2ce <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a28c:	4a29      	ldr	r2, [pc, #164]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	215c      	movs	r1, #92	; 0x5c
 800a292:	fb01 f303 	mul.w	r3, r1, r3
 800a296:	4413      	add	r3, r2
 800a298:	330c      	adds	r3, #12
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a29e:	4a25      	ldr	r2, [pc, #148]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	215c      	movs	r1, #92	; 0x5c
 800a2a4:	fb01 f303 	mul.w	r3, r1, r3
 800a2a8:	4413      	add	r3, r2
 800a2aa:	332c      	adds	r3, #44	; 0x2c
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	225c      	movs	r2, #92	; 0x5c
 800a2b4:	fb02 f303 	mul.w	r3, r2, r3
 800a2b8:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a2ba:	4413      	add	r3, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f002 fd6f 	bl	800cda0 <HAL_OSPI_Init>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a2c8:	f06f 0303 	mvn.w	r3, #3
 800a2cc:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	225c      	movs	r2, #92	; 0x5c
 800a2d2:	fb02 f303 	mul.w	r3, r2, r3
 800a2d6:	4a17      	ldr	r2, [pc, #92]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a2d8:	4413      	add	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe f8e7 	bl	80084b2 <MX25LM51245G_AutoPollingMemReady>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ea:	f06f 0304 	mvn.w	r3, #4
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e01a      	b.n	800a328 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	225c      	movs	r2, #92	; 0x5c
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	4a0e      	ldr	r2, [pc, #56]	; (800a334 <OSPI_NOR_ExitOPIMode+0x13c>)
 800a2fc:	1898      	adds	r0, r3, r2
 800a2fe:	f107 0308 	add.w	r3, r7, #8
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	f7fe fbf8 	bl	8008afe <MX25LM51245G_ReadCfg2Register>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a314:	f06f 0304 	mvn.w	r3, #4
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e005      	b.n	800a328 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 800a31c:	7a3b      	ldrb	r3, [r7, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a322:	f06f 0304 	mvn.w	r3, #4
 800a326:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a328:	68fb      	ldr	r3, [r7, #12]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	24002368 	.word	0x24002368
 800a338:	240023c4 	.word	0x240023c4

0800a33c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a346:	2300      	movs	r3, #0
 800a348:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11c      	bne.n	800a38a <BSP_TS_Init+0x4e>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d018      	beq.n	800a38a <BSP_TS_Init+0x4e>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a360:	d813      	bhi.n	800a38a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00f      	beq.n	800a38a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800a372:	d80a      	bhi.n	800a38a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6819      	ldr	r1, [r3, #0]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	428b      	cmp	r3, r1
 800a382:	bf28      	it	cs
 800a384:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a386:	429a      	cmp	r2, r3
 800a388:	d903      	bls.n	800a392 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a38a:	f06f 0301 	mvn.w	r3, #1
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	e06e      	b.n	800a470 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f98c 	bl	800a6b0 <FT5336_Probe>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	e064      	b.n	800a470 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4934      	ldr	r1, [pc, #208]	; (800a47c <BSP_TS_Init+0x140>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	015b      	lsls	r3, r3, #5
 800a3b0:	440b      	add	r3, r1
 800a3b2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	4930      	ldr	r1, [pc, #192]	; (800a47c <BSP_TS_Init+0x140>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	015b      	lsls	r3, r3, #5
 800a3be:	440b      	add	r3, r1
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	492c      	ldr	r1, [pc, #176]	; (800a47c <BSP_TS_Init+0x140>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	015b      	lsls	r3, r3, #5
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	4928      	ldr	r1, [pc, #160]	; (800a47c <BSP_TS_Init+0x140>)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	015b      	lsls	r3, r3, #5
 800a3de:	440b      	add	r3, r1
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a3e4:	4b26      	ldr	r3, [pc, #152]	; (800a480 <BSP_TS_Init+0x144>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	4926      	ldr	r1, [pc, #152]	; (800a484 <BSP_TS_Init+0x148>)
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a3f2:	f107 010c 	add.w	r1, r7, #12
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4798      	blx	r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da03      	bge.n	800a408 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a400:	f06f 0304 	mvn.w	r3, #4
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	e033      	b.n	800a470 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	491c      	ldr	r1, [pc, #112]	; (800a47c <BSP_TS_Init+0x140>)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	015b      	lsls	r3, r3, #5
 800a410:	440b      	add	r3, r1
 800a412:	3310      	adds	r3, #16
 800a414:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4918      	ldr	r1, [pc, #96]	; (800a47c <BSP_TS_Init+0x140>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	015b      	lsls	r3, r3, #5
 800a41e:	440b      	add	r3, r1
 800a420:	3314      	adds	r3, #20
 800a422:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	61bb      	str	r3, [r7, #24]
 800a428:	e01f      	b.n	800a46a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	4413      	add	r3, r2
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	4811      	ldr	r0, [pc, #68]	; (800a47c <BSP_TS_Init+0x140>)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	00d9      	lsls	r1, r3, #3
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	440b      	add	r3, r1
 800a440:	3306      	adds	r3, #6
 800a442:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	480a      	ldr	r0, [pc, #40]	; (800a47c <BSP_TS_Init+0x140>)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	00d9      	lsls	r1, r3, #3
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	440b      	add	r3, r1
 800a45c:	3306      	adds	r3, #6
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4403      	add	r3, r0
 800a462:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	3301      	adds	r3, #1
 800a468:	61bb      	str	r3, [r7, #24]
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0dc      	beq.n	800a42a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800a470:	69fb      	ldr	r3, [r7, #28]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	240023d4 	.word	0x240023d4
 800a480:	240023cc 	.word	0x240023cc
 800a484:	240023d0 	.word	0x240023d0

0800a488 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a492:	2300      	movs	r3, #0
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a49c:	f06f 0301 	mvn.w	r3, #1
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a2:	e0f9      	b.n	800a698 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a4a4:	4b7f      	ldr	r3, [pc, #508]	; (800a6a4 <BSP_TS_GetState+0x21c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	497f      	ldr	r1, [pc, #508]	; (800a6a8 <BSP_TS_GetState+0x220>)
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a4b2:	f107 0108 	add.w	r1, r7, #8
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	da03      	bge.n	800a4c8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4c0:	f06f 0304 	mvn.w	r3, #4
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c6:	e0e7      	b.n	800a698 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80d1 	beq.w	800a672 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a4d8:	4a74      	ldr	r2, [pc, #464]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	015b      	lsls	r3, r3, #5
 800a4de:	4413      	add	r3, r2
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a4f4:	4a6d      	ldr	r2, [pc, #436]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	015b      	lsls	r3, r3, #5
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800a508:	4a68      	ldr	r2, [pc, #416]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	015b      	lsls	r3, r3, #5
 800a50e:	4413      	add	r3, r2
 800a510:	3310      	adds	r3, #16
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a51c:	4a63      	ldr	r2, [pc, #396]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	015b      	lsls	r3, r3, #5
 800a522:	4413      	add	r3, r2
 800a524:	3308      	adds	r3, #8
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d008      	beq.n	800a542 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800a530:	4a5e      	ldr	r2, [pc, #376]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	015b      	lsls	r3, r3, #5
 800a536:	4413      	add	r3, r2
 800a538:	3314      	adds	r3, #20
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a542:	4a5a      	ldr	r2, [pc, #360]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	015b      	lsls	r3, r3, #5
 800a548:	4413      	add	r3, r2
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6a3a      	ldr	r2, [r7, #32]
 800a54e:	fb03 f202 	mul.w	r2, r3, r2
 800a552:	4956      	ldr	r1, [pc, #344]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	015b      	lsls	r3, r3, #5
 800a558:	440b      	add	r3, r1
 800a55a:	3310      	adds	r3, #16
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a566:	4a51      	ldr	r2, [pc, #324]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	015b      	lsls	r3, r3, #5
 800a56c:	4413      	add	r3, r2
 800a56e:	3304      	adds	r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	fb03 f202 	mul.w	r2, r3, r2
 800a578:	494c      	ldr	r1, [pc, #304]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	015b      	lsls	r3, r3, #5
 800a57e:	440b      	add	r3, r1
 800a580:	3314      	adds	r3, #20
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	fbb2 f2f3 	udiv	r2, r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4945      	ldr	r1, [pc, #276]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	015b      	lsls	r3, r3, #5
 800a59c:	440b      	add	r3, r1
 800a59e:	3318      	adds	r3, #24
 800a5a0:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d909      	bls.n	800a5ba <BSP_TS_GetState+0x132>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	4940      	ldr	r1, [pc, #256]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	015b      	lsls	r3, r3, #5
 800a5b0:	440b      	add	r3, r1
 800a5b2:	3318      	adds	r3, #24
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	e008      	b.n	800a5cc <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800a5ba:	4a3c      	ldr	r2, [pc, #240]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	015b      	lsls	r3, r3, #5
 800a5c0:	4413      	add	r3, r2
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a5ca:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a5cc:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	4936      	ldr	r1, [pc, #216]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	015b      	lsls	r3, r3, #5
 800a5d8:	440b      	add	r3, r1
 800a5da:	331c      	adds	r3, #28
 800a5dc:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d909      	bls.n	800a5f6 <BSP_TS_GetState+0x16e>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	4931      	ldr	r1, [pc, #196]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	015b      	lsls	r3, r3, #5
 800a5ec:	440b      	add	r3, r1
 800a5ee:	331c      	adds	r3, #28
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	e008      	b.n	800a608 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800a5f6:	4a2d      	ldr	r2, [pc, #180]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	015b      	lsls	r3, r3, #5
 800a5fc:	4413      	add	r3, r2
 800a5fe:	331c      	adds	r3, #28
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a606:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a608:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a60a:	4a28      	ldr	r2, [pc, #160]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	015b      	lsls	r3, r3, #5
 800a610:	4413      	add	r3, r2
 800a612:	330c      	adds	r3, #12
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d808      	bhi.n	800a62e <BSP_TS_GetState+0x1a6>
 800a61c:	4a23      	ldr	r2, [pc, #140]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	015b      	lsls	r3, r3, #5
 800a622:	4413      	add	r3, r2
 800a624:	330c      	adds	r3, #12
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d910      	bls.n	800a650 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	491e      	ldr	r1, [pc, #120]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	015b      	lsls	r3, r3, #5
 800a638:	440b      	add	r3, r1
 800a63a:	3318      	adds	r3, #24
 800a63c:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	491a      	ldr	r1, [pc, #104]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	015b      	lsls	r3, r3, #5
 800a648:	440b      	add	r3, r1
 800a64a:	331c      	adds	r3, #28
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	e023      	b.n	800a698 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a650:	4a16      	ldr	r2, [pc, #88]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	015b      	lsls	r3, r3, #5
 800a656:	4413      	add	r3, r2
 800a658:	3318      	adds	r3, #24
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a660:	4a12      	ldr	r2, [pc, #72]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	015b      	lsls	r3, r3, #5
 800a666:	4413      	add	r3, r2
 800a668:	331c      	adds	r3, #28
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	609a      	str	r2, [r3, #8]
 800a670:	e012      	b.n	800a698 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a678:	4a0c      	ldr	r2, [pc, #48]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	015b      	lsls	r3, r3, #5
 800a67e:	4413      	add	r3, r2
 800a680:	3318      	adds	r3, #24
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a688:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <BSP_TS_GetState+0x224>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	015b      	lsls	r3, r3, #5
 800a68e:	4413      	add	r3, r2
 800a690:	331c      	adds	r3, #28
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3728      	adds	r7, #40	; 0x28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	240023cc 	.word	0x240023cc
 800a6a8:	240023d0 	.word	0x240023d0
 800a6ac:	240023d4 	.word	0x240023d4

0800a6b0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	; 0x28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800a6c0:	2370      	movs	r3, #112	; 0x70
 800a6c2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800a6c4:	4b23      	ldr	r3, [pc, #140]	; (800a754 <FT5336_Probe+0xa4>)
 800a6c6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a6c8:	4b23      	ldr	r3, [pc, #140]	; (800a758 <FT5336_Probe+0xa8>)
 800a6ca:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a6cc:	4b23      	ldr	r3, [pc, #140]	; (800a75c <FT5336_Probe+0xac>)
 800a6ce:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a6d0:	4b23      	ldr	r3, [pc, #140]	; (800a760 <FT5336_Probe+0xb0>)
 800a6d2:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800a6d4:	4b23      	ldr	r3, [pc, #140]	; (800a764 <FT5336_Probe+0xb4>)
 800a6d6:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4822      	ldr	r0, [pc, #136]	; (800a768 <FT5336_Probe+0xb8>)
 800a6e0:	f7fd fb58 	bl	8007d94 <FT5336_RegisterBusIO>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800a6ea:	f06f 0307 	mvn.w	r3, #7
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f0:	e02a      	b.n	800a748 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	481b      	ldr	r0, [pc, #108]	; (800a768 <FT5336_Probe+0xb8>)
 800a6fa:	f7fd fc45 	bl	8007f88 <FT5336_ReadID>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a704:	f06f 0304 	mvn.w	r3, #4
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	e01d      	b.n	800a748 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b51      	cmp	r3, #81	; 0x51
 800a710:	d003      	beq.n	800a71a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a712:	f06f 0306 	mvn.w	r3, #6
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
 800a718:	e016      	b.n	800a748 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800a71a:	4a14      	ldr	r2, [pc, #80]	; (800a76c <FT5336_Probe+0xbc>)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4912      	ldr	r1, [pc, #72]	; (800a768 <FT5336_Probe+0xb8>)
 800a720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800a724:	4b12      	ldr	r3, [pc, #72]	; (800a770 <FT5336_Probe+0xc0>)
 800a726:	4a13      	ldr	r2, [pc, #76]	; (800a774 <FT5336_Probe+0xc4>)
 800a728:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800a72a:	4b11      	ldr	r3, [pc, #68]	; (800a770 <FT5336_Probe+0xc0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	490e      	ldr	r1, [pc, #56]	; (800a76c <FT5336_Probe+0xbc>)
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a742:	f06f 0304 	mvn.w	r3, #4
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3728      	adds	r7, #40	; 0x28
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	08008d95 	.word	0x08008d95
 800a758:	08008e09 	.word	0x08008e09
 800a75c:	08008f31 	.word	0x08008f31
 800a760:	08008ed5 	.word	0x08008ed5
 800a764:	08008f8d 	.word	0x08008f8d
 800a768:	240023f4 	.word	0x240023f4
 800a76c:	240023d0 	.word	0x240023d0
 800a770:	240023cc 	.word	0x240023cc
 800a774:	2400000c 	.word	0x2400000c

0800a778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a778:	b480      	push	{r7}
 800a77a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a77c:	4b32      	ldr	r3, [pc, #200]	; (800a848 <SystemInit+0xd0>)
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a782:	4a31      	ldr	r2, [pc, #196]	; (800a848 <SystemInit+0xd0>)
 800a784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a78c:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <SystemInit+0xd4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	2b02      	cmp	r3, #2
 800a796:	d807      	bhi.n	800a7a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a798:	4b2c      	ldr	r3, [pc, #176]	; (800a84c <SystemInit+0xd4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f023 030f 	bic.w	r3, r3, #15
 800a7a0:	4a2a      	ldr	r2, [pc, #168]	; (800a84c <SystemInit+0xd4>)
 800a7a2:	f043 0303 	orr.w	r3, r3, #3
 800a7a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a7a8:	4b29      	ldr	r3, [pc, #164]	; (800a850 <SystemInit+0xd8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a28      	ldr	r2, [pc, #160]	; (800a850 <SystemInit+0xd8>)
 800a7ae:	f043 0301 	orr.w	r3, r3, #1
 800a7b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <SystemInit+0xd8>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a7ba:	4b25      	ldr	r3, [pc, #148]	; (800a850 <SystemInit+0xd8>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4924      	ldr	r1, [pc, #144]	; (800a850 <SystemInit+0xd8>)
 800a7c0:	4b24      	ldr	r3, [pc, #144]	; (800a854 <SystemInit+0xdc>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a7c6:	4b21      	ldr	r3, [pc, #132]	; (800a84c <SystemInit+0xd4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 030c 	and.w	r3, r3, #12
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <SystemInit+0xd4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f023 030f 	bic.w	r3, r3, #15
 800a7da:	4a1c      	ldr	r2, [pc, #112]	; (800a84c <SystemInit+0xd4>)
 800a7dc:	f043 0303 	orr.w	r3, r3, #3
 800a7e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <SystemInit+0xd8>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800a7e8:	4b19      	ldr	r3, [pc, #100]	; (800a850 <SystemInit+0xd8>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800a7ee:	4b18      	ldr	r3, [pc, #96]	; (800a850 <SystemInit+0xd8>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a7f4:	4b16      	ldr	r3, [pc, #88]	; (800a850 <SystemInit+0xd8>)
 800a7f6:	4a18      	ldr	r2, [pc, #96]	; (800a858 <SystemInit+0xe0>)
 800a7f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <SystemInit+0xd8>)
 800a7fc:	4a17      	ldr	r2, [pc, #92]	; (800a85c <SystemInit+0xe4>)
 800a7fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <SystemInit+0xd8>)
 800a802:	4a17      	ldr	r2, [pc, #92]	; (800a860 <SystemInit+0xe8>)
 800a804:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a806:	4b12      	ldr	r3, [pc, #72]	; (800a850 <SystemInit+0xd8>)
 800a808:	2200      	movs	r2, #0
 800a80a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a80c:	4b10      	ldr	r3, [pc, #64]	; (800a850 <SystemInit+0xd8>)
 800a80e:	4a14      	ldr	r2, [pc, #80]	; (800a860 <SystemInit+0xe8>)
 800a810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a812:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <SystemInit+0xd8>)
 800a814:	2200      	movs	r2, #0
 800a816:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a818:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <SystemInit+0xd8>)
 800a81a:	4a11      	ldr	r2, [pc, #68]	; (800a860 <SystemInit+0xe8>)
 800a81c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <SystemInit+0xd8>)
 800a820:	2200      	movs	r2, #0
 800a822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a824:	4b0a      	ldr	r3, [pc, #40]	; (800a850 <SystemInit+0xd8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a09      	ldr	r2, [pc, #36]	; (800a850 <SystemInit+0xd8>)
 800a82a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a82e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <SystemInit+0xd8>)
 800a832:	2200      	movs	r2, #0
 800a834:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <SystemInit+0xec>)
 800a838:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a83c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800a83e:	bf00      	nop
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	e000ed00 	.word	0xe000ed00
 800a84c:	52002000 	.word	0x52002000
 800a850:	58024400 	.word	0x58024400
 800a854:	eaf6ed7f 	.word	0xeaf6ed7f
 800a858:	02020200 	.word	0x02020200
 800a85c:	01ff0000 	.word	0x01ff0000
 800a860:	01010280 	.word	0x01010280
 800a864:	52004000 	.word	0x52004000

0800a868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a86e:	2003      	movs	r0, #3
 800a870:	f000 f94b 	bl	800ab0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a874:	f004 f836 	bl	800e8e4 <HAL_RCC_GetSysClockFreq>
 800a878:	4602      	mov	r2, r0
 800a87a:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <HAL_Init+0x68>)
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	4913      	ldr	r1, [pc, #76]	; (800a8d4 <HAL_Init+0x6c>)
 800a886:	5ccb      	ldrb	r3, [r1, r3]
 800a888:	f003 031f 	and.w	r3, r3, #31
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
 800a890:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a892:	4b0f      	ldr	r3, [pc, #60]	; (800a8d0 <HAL_Init+0x68>)
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	4a0e      	ldr	r2, [pc, #56]	; (800a8d4 <HAL_Init+0x6c>)
 800a89c:	5cd3      	ldrb	r3, [r2, r3]
 800a89e:	f003 031f 	and.w	r3, r3, #31
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a8:	4a0b      	ldr	r2, [pc, #44]	; (800a8d8 <HAL_Init+0x70>)
 800a8aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8ac:	4a0b      	ldr	r2, [pc, #44]	; (800a8dc <HAL_Init+0x74>)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a8b2:	200f      	movs	r0, #15
 800a8b4:	f7f6 fe92 	bl	80015dc <HAL_InitTick>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e002      	b.n	800a8c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a8c2:	f7f6 fbc9 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	08027c3c 	.word	0x08027c3c
 800a8d8:	24000040 	.word	0x24000040
 800a8dc:	2400003c 	.word	0x2400003c

0800a8e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <HAL_IncTick+0x20>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <HAL_IncTick+0x24>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4a04      	ldr	r2, [pc, #16]	; (800a904 <HAL_IncTick+0x24>)
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	24000048 	.word	0x24000048
 800a904:	2400241c 	.word	0x2400241c

0800a908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  return uwTick;
 800a90c:	4b03      	ldr	r3, [pc, #12]	; (800a91c <HAL_GetTick+0x14>)
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	2400241c 	.word	0x2400241c

0800a920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a928:	f7ff ffee 	bl	800a908 <HAL_GetTick>
 800a92c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a938:	d005      	beq.n	800a946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a93a:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <HAL_Delay+0x44>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a946:	bf00      	nop
 800a948:	f7ff ffde 	bl	800a908 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	429a      	cmp	r2, r3
 800a956:	d8f7      	bhi.n	800a948 <HAL_Delay+0x28>
  {
  }
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	24000048 	.word	0x24000048

0800a968 <__NVIC_SetPriorityGrouping>:
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a978:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <__NVIC_SetPriorityGrouping+0x40>)
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a984:	4013      	ands	r3, r2
 800a986:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a990:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <__NVIC_SetPriorityGrouping+0x44>)
 800a992:	4313      	orrs	r3, r2
 800a994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a996:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <__NVIC_SetPriorityGrouping+0x40>)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	60d3      	str	r3, [r2, #12]
}
 800a99c:	bf00      	nop
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	e000ed00 	.word	0xe000ed00
 800a9ac:	05fa0000 	.word	0x05fa0000

0800a9b0 <__NVIC_GetPriorityGrouping>:
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <__NVIC_GetPriorityGrouping+0x18>)
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	0a1b      	lsrs	r3, r3, #8
 800a9ba:	f003 0307 	and.w	r3, r3, #7
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	e000ed00 	.word	0xe000ed00

0800a9cc <__NVIC_EnableIRQ>:
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a9d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	db0b      	blt.n	800a9f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	f003 021f 	and.w	r2, r3, #31
 800a9e4:	4907      	ldr	r1, [pc, #28]	; (800aa04 <__NVIC_EnableIRQ+0x38>)
 800a9e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9ea:	095b      	lsrs	r3, r3, #5
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	fa00 f202 	lsl.w	r2, r0, r2
 800a9f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	e000e100 	.word	0xe000e100

0800aa08 <__NVIC_DisableIRQ>:
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	db12      	blt.n	800aa40 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	f003 021f 	and.w	r2, r3, #31
 800aa20:	490a      	ldr	r1, [pc, #40]	; (800aa4c <__NVIC_DisableIRQ+0x44>)
 800aa22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa26:	095b      	lsrs	r3, r3, #5
 800aa28:	2001      	movs	r0, #1
 800aa2a:	fa00 f202 	lsl.w	r2, r0, r2
 800aa2e:	3320      	adds	r3, #32
 800aa30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa34:	f3bf 8f4f 	dsb	sy
}
 800aa38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa3a:	f3bf 8f6f 	isb	sy
}
 800aa3e:	bf00      	nop
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	e000e100 	.word	0xe000e100

0800aa50 <__NVIC_SetPriority>:
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	db0a      	blt.n	800aa7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	490c      	ldr	r1, [pc, #48]	; (800aa9c <__NVIC_SetPriority+0x4c>)
 800aa6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa6e:	0112      	lsls	r2, r2, #4
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	440b      	add	r3, r1
 800aa74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa78:	e00a      	b.n	800aa90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	4908      	ldr	r1, [pc, #32]	; (800aaa0 <__NVIC_SetPriority+0x50>)
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	f003 030f 	and.w	r3, r3, #15
 800aa86:	3b04      	subs	r3, #4
 800aa88:	0112      	lsls	r2, r2, #4
 800aa8a:	b2d2      	uxtb	r2, r2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	761a      	strb	r2, [r3, #24]
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	e000e100 	.word	0xe000e100
 800aaa0:	e000ed00 	.word	0xe000ed00

0800aaa4 <NVIC_EncodePriority>:
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b089      	sub	sp, #36	; 0x24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	f1c3 0307 	rsb	r3, r3, #7
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	bf28      	it	cs
 800aac2:	2304      	movcs	r3, #4
 800aac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	3304      	adds	r3, #4
 800aaca:	2b06      	cmp	r3, #6
 800aacc:	d902      	bls.n	800aad4 <NVIC_EncodePriority+0x30>
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	3b03      	subs	r3, #3
 800aad2:	e000      	b.n	800aad6 <NVIC_EncodePriority+0x32>
 800aad4:	2300      	movs	r3, #0
 800aad6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aad8:	f04f 32ff 	mov.w	r2, #4294967295
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	fa02 f303 	lsl.w	r3, r2, r3
 800aae2:	43da      	mvns	r2, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	401a      	ands	r2, r3
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aaec:	f04f 31ff 	mov.w	r1, #4294967295
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf6:	43d9      	mvns	r1, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aafc:	4313      	orrs	r3, r2
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3724      	adds	r7, #36	; 0x24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff ff28 	bl	800a968 <__NVIC_SetPriorityGrouping>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ab2e:	f7ff ff3f 	bl	800a9b0 <__NVIC_GetPriorityGrouping>
 800ab32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	6978      	ldr	r0, [r7, #20]
 800ab3a:	f7ff ffb3 	bl	800aaa4 <NVIC_EncodePriority>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff ff82 	bl	800aa50 <__NVIC_SetPriority>
}
 800ab4c:	bf00      	nop
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ab5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff ff32 	bl	800a9cc <__NVIC_EnableIRQ>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ab7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff ff42 	bl	800aa08 <__NVIC_DisableIRQ>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800ab90:	f3bf 8f5f 	dmb	sy
}
 800ab94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ab96:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <HAL_MPU_Disable+0x28>)
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	4a06      	ldr	r2, [pc, #24]	; (800abb4 <HAL_MPU_Disable+0x28>)
 800ab9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aba0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800aba2:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <HAL_MPU_Disable+0x2c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]
}
 800aba8:	bf00      	nop
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	e000ed00 	.word	0xe000ed00
 800abb8:	e000ed90 	.word	0xe000ed90

0800abbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800abc4:	4a0b      	ldr	r2, [pc, #44]	; (800abf4 <HAL_MPU_Enable+0x38>)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f043 0301 	orr.w	r3, r3, #1
 800abcc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <HAL_MPU_Enable+0x3c>)
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <HAL_MPU_Enable+0x3c>)
 800abd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abd8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800abda:	f3bf 8f4f 	dsb	sy
}
 800abde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800abe0:	f3bf 8f6f 	isb	sy
}
 800abe4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800abe6:	bf00      	nop
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	e000ed90 	.word	0xe000ed90
 800abf8:	e000ed00 	.word	0xe000ed00

0800abfc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	785a      	ldrb	r2, [r3, #1]
 800ac08:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <HAL_MPU_ConfigRegion+0x84>)
 800ac0a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d029      	beq.n	800ac68 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ac14:	4a1a      	ldr	r2, [pc, #104]	; (800ac80 <HAL_MPU_ConfigRegion+0x84>)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7b1b      	ldrb	r3, [r3, #12]
 800ac20:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	7adb      	ldrb	r3, [r3, #11]
 800ac26:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7a9b      	ldrb	r3, [r3, #10]
 800ac2e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7b5b      	ldrb	r3, [r3, #13]
 800ac36:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ac38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	7b9b      	ldrb	r3, [r3, #14]
 800ac3e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ac40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7bdb      	ldrb	r3, [r3, #15]
 800ac46:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ac48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7a5b      	ldrb	r3, [r3, #9]
 800ac4e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ac50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7a1b      	ldrb	r3, [r3, #8]
 800ac56:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ac58:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac60:	4a07      	ldr	r2, [pc, #28]	; (800ac80 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac62:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac64:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800ac66:	e005      	b.n	800ac74 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_MPU_ConfigRegion+0x84>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800ac6e:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <HAL_MPU_ConfigRegion+0x84>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	e000ed90 	.word	0xe000ed90

0800ac84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e054      	b.n	800ad40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	7f5b      	ldrb	r3, [r3, #29]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d105      	bne.n	800acac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7f6 f9f4 	bl	8001094 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	791b      	ldrb	r3, [r3, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10c      	bne.n	800acd4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a22      	ldr	r2, [pc, #136]	; (800ad48 <HAL_CRC_Init+0xc4>)
 800acc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0218 	bic.w	r2, r2, #24
 800acd0:	609a      	str	r2, [r3, #8]
 800acd2:	e00c      	b.n	800acee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6899      	ldr	r1, [r3, #8]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	461a      	mov	r2, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f834 	bl	800ad4c <HAL_CRCEx_Polynomial_Set>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e028      	b.n	800ad40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	795b      	ldrb	r3, [r3, #5]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d105      	bne.n	800ad02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f04f 32ff 	mov.w	r2, #4294967295
 800acfe:	611a      	str	r2, [r3, #16]
 800ad00:	e004      	b.n	800ad0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6912      	ldr	r2, [r2, #16]
 800ad0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695a      	ldr	r2, [r3, #20]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	04c11db7 	.word	0x04c11db7

0800ad4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ad5c:	231f      	movs	r3, #31
 800ad5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]
 800ad6e:	e063      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ad70:	bf00      	nop
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	613a      	str	r2, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d009      	beq.n	800ad90 <HAL_CRCEx_Polynomial_Set+0x44>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f003 031f 	and.w	r3, r3, #31
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	fa22 f303 	lsr.w	r3, r2, r3
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0f0      	beq.n	800ad72 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b18      	cmp	r3, #24
 800ad94:	d846      	bhi.n	800ae24 <HAL_CRCEx_Polynomial_Set+0xd8>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <HAL_CRCEx_Polynomial_Set+0x50>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800ae2b 	.word	0x0800ae2b
 800ada0:	0800ae25 	.word	0x0800ae25
 800ada4:	0800ae25 	.word	0x0800ae25
 800ada8:	0800ae25 	.word	0x0800ae25
 800adac:	0800ae25 	.word	0x0800ae25
 800adb0:	0800ae25 	.word	0x0800ae25
 800adb4:	0800ae25 	.word	0x0800ae25
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800ae19 	.word	0x0800ae19
 800adc0:	0800ae25 	.word	0x0800ae25
 800adc4:	0800ae25 	.word	0x0800ae25
 800adc8:	0800ae25 	.word	0x0800ae25
 800adcc:	0800ae25 	.word	0x0800ae25
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ae25 	.word	0x0800ae25
 800addc:	0800ae0d 	.word	0x0800ae0d
 800ade0:	0800ae25 	.word	0x0800ae25
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae25 	.word	0x0800ae25
 800adec:	0800ae25 	.word	0x0800ae25
 800adf0:	0800ae25 	.word	0x0800ae25
 800adf4:	0800ae25 	.word	0x0800ae25
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	0800ae01 	.word	0x0800ae01
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b06      	cmp	r3, #6
 800ae04:	d913      	bls.n	800ae2e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ae0a:	e010      	b.n	800ae2e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b07      	cmp	r3, #7
 800ae10:	d90f      	bls.n	800ae32 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ae16:	e00c      	b.n	800ae32 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	d90b      	bls.n	800ae36 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ae22:	e008      	b.n	800ae36 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	75fb      	strb	r3, [r7, #23]
        break;
 800ae28:	e006      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ae2a:	bf00      	nop
 800ae2c:	e004      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ae2e:	bf00      	nop
 800ae30:	e002      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ae32:	bf00      	nop
 800ae34:	e000      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ae36:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10d      	bne.n	800ae5a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f023 0118 	bic.w	r1, r3, #24
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e04f      	b.n	800af1a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7f6 f922 	bl	80010d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b20      	ldr	r3, [pc, #128]	; (800af24 <HAL_DMA2D_Init+0xbc>)
 800aea4:	4013      	ands	r3, r2
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	6851      	ldr	r1, [r2, #4]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	69d2      	ldr	r2, [r2, #28]
 800aeae:	4311      	orrs	r1, r2
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6812      	ldr	r2, [r2, #0]
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aebe:	4b1a      	ldr	r3, [pc, #104]	; (800af28 <HAL_DMA2D_Init+0xc0>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6891      	ldr	r1, [r2, #8]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6992      	ldr	r2, [r2, #24]
 800aeca:	4311      	orrs	r1, r2
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6812      	ldr	r2, [r2, #0]
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeda:	4b14      	ldr	r3, [pc, #80]	; (800af2c <HAL_DMA2D_Init+0xc4>)
 800aedc:	4013      	ands	r3, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	68d1      	ldr	r1, [r2, #12]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6812      	ldr	r2, [r2, #0]
 800aee6:	430b      	orrs	r3, r1
 800aee8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	051a      	lsls	r2, r3, #20
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	055b      	lsls	r3, r3, #21
 800af00:	431a      	orrs	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	fff8ffbf 	.word	0xfff8ffbf
 800af28:	fffffef8 	.word	0xfffffef8
 800af2c:	ffff0000 	.word	0xffff0000

0800af30 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d026      	beq.n	800afa0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d021      	beq.n	800afa0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af6a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af70:	f043 0201 	orr.w	r2, r3, #1
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2201      	movs	r2, #1
 800af7e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2204      	movs	r2, #4
 800af84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d026      	beq.n	800aff8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d021      	beq.n	800aff8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afc2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2220      	movs	r2, #32
 800afca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd0:	f043 0202 	orr.w	r2, r3, #2
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2204      	movs	r2, #4
 800afdc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f003 0308 	and.w	r3, r3, #8
 800affe:	2b00      	cmp	r3, #0
 800b000:	d026      	beq.n	800b050 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d021      	beq.n	800b050 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b01a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2208      	movs	r2, #8
 800b022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b028:	f043 0204 	orr.w	r2, r3, #4
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2204      	movs	r2, #4
 800b034:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b00      	cmp	r3, #0
 800b046:	d003      	beq.n	800b050 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d013      	beq.n	800b082 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b072:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2204      	movs	r2, #4
 800b07a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f853 	bl	800b128 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d024      	beq.n	800b0d6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01f      	beq.n	800b0d6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b0a4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d01f      	beq.n	800b120 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01a      	beq.n	800b120 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b0f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2210      	movs	r2, #16
 800b100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f80e 	bl	800b13c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <HAL_DMA2D_ConfigLayer+0x24>
 800b170:	2302      	movs	r3, #2
 800b172:	e092      	b.n	800b29a <HAL_DMA2D_ConfigLayer+0x14a>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	4613      	mov	r3, r2
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	3328      	adds	r3, #40	; 0x28
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	4413      	add	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	041b      	lsls	r3, r3, #16
 800b1a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b1a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800b1b4:	4b3c      	ldr	r3, [pc, #240]	; (800b2a8 <HAL_DMA2D_ConfigLayer+0x158>)
 800b1b6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b0a      	cmp	r3, #10
 800b1be:	d003      	beq.n	800b1c8 <HAL_DMA2D_ConfigLayer+0x78>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b09      	cmp	r3, #9
 800b1c6:	d107      	bne.n	800b1d8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]
 800b1d6:	e005      	b.n	800b1e4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	061b      	lsls	r3, r3, #24
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d120      	bne.n	800b22c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	ea02 0103 	and.w	r1, r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2b0a      	cmp	r3, #10
 800b212:	d003      	beq.n	800b21c <HAL_DMA2D_ConfigLayer+0xcc>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	2b09      	cmp	r3, #9
 800b21a:	d135      	bne.n	800b288 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b228:	629a      	str	r2, [r3, #40]	; 0x28
 800b22a:	e02d      	b.n	800b288 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b0b      	cmp	r3, #11
 800b232:	d109      	bne.n	800b248 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	049b      	lsls	r3, r3, #18
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800b246:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	69da      	ldr	r2, [r3, #28]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	43db      	mvns	r3, r3
 800b252:	ea02 0103 	and.w	r1, r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b0a      	cmp	r3, #10
 800b270:	d003      	beq.n	800b27a <HAL_DMA2D_ConfigLayer+0x12a>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	2b09      	cmp	r3, #9
 800b278:	d106      	bne.n	800b288 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b286:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	ff33000f 	.word	0xff33000f

0800b2ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b089      	sub	sp, #36	; 0x24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b2ba:	4b89      	ldr	r3, [pc, #548]	; (800b4e0 <HAL_GPIO_Init+0x234>)
 800b2bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2be:	e194      	b.n	800b5ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 8186 	beq.w	800b5e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f003 0303 	and.w	r3, r3, #3
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d005      	beq.n	800b2f0 <HAL_GPIO_Init+0x44>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d130      	bne.n	800b352 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b300:	43db      	mvns	r3, r3
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	4013      	ands	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	4313      	orrs	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b326:	2201      	movs	r2, #1
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	fa02 f303 	lsl.w	r3, r2, r3
 800b32e:	43db      	mvns	r3, r3
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	4013      	ands	r3, r2
 800b334:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	091b      	lsrs	r3, r3, #4
 800b33c:	f003 0201 	and.w	r2, r3, #1
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	fa02 f303 	lsl.w	r3, r2, r3
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	4313      	orrs	r3, r2
 800b34a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d017      	beq.n	800b38e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	2203      	movs	r2, #3
 800b36a:	fa02 f303 	lsl.w	r3, r2, r3
 800b36e:	43db      	mvns	r3, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4013      	ands	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	fa02 f303 	lsl.w	r3, r2, r3
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	4313      	orrs	r3, r2
 800b386:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	2b02      	cmp	r3, #2
 800b398:	d123      	bne.n	800b3e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	08da      	lsrs	r2, r3, #3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3208      	adds	r2, #8
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	f003 0307 	and.w	r3, r3, #7
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	220f      	movs	r2, #15
 800b3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b6:	43db      	mvns	r3, r3
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	08da      	lsrs	r2, r3, #3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3208      	adds	r2, #8
 800b3dc:	69b9      	ldr	r1, [r7, #24]
 800b3de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	43db      	mvns	r3, r3
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f003 0203 	and.w	r2, r3, #3
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	fa02 f303 	lsl.w	r3, r2, r3
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 80e0 	beq.w	800b5e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b424:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <HAL_GPIO_Init+0x238>)
 800b426:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b42a:	4a2e      	ldr	r2, [pc, #184]	; (800b4e4 <HAL_GPIO_Init+0x238>)
 800b42c:	f043 0302 	orr.w	r3, r3, #2
 800b430:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800b434:	4b2b      	ldr	r3, [pc, #172]	; (800b4e4 <HAL_GPIO_Init+0x238>)
 800b436:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b442:	4a29      	ldr	r2, [pc, #164]	; (800b4e8 <HAL_GPIO_Init+0x23c>)
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	089b      	lsrs	r3, r3, #2
 800b448:	3302      	adds	r3, #2
 800b44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	220f      	movs	r2, #15
 800b45a:	fa02 f303 	lsl.w	r3, r2, r3
 800b45e:	43db      	mvns	r3, r3
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	4013      	ands	r3, r2
 800b464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a20      	ldr	r2, [pc, #128]	; (800b4ec <HAL_GPIO_Init+0x240>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d052      	beq.n	800b514 <HAL_GPIO_Init+0x268>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <HAL_GPIO_Init+0x244>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d031      	beq.n	800b4da <HAL_GPIO_Init+0x22e>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <HAL_GPIO_Init+0x248>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d02b      	beq.n	800b4d6 <HAL_GPIO_Init+0x22a>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a1d      	ldr	r2, [pc, #116]	; (800b4f8 <HAL_GPIO_Init+0x24c>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d025      	beq.n	800b4d2 <HAL_GPIO_Init+0x226>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a1c      	ldr	r2, [pc, #112]	; (800b4fc <HAL_GPIO_Init+0x250>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d01f      	beq.n	800b4ce <HAL_GPIO_Init+0x222>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <HAL_GPIO_Init+0x254>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d019      	beq.n	800b4ca <HAL_GPIO_Init+0x21e>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a1a      	ldr	r2, [pc, #104]	; (800b504 <HAL_GPIO_Init+0x258>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d013      	beq.n	800b4c6 <HAL_GPIO_Init+0x21a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a19      	ldr	r2, [pc, #100]	; (800b508 <HAL_GPIO_Init+0x25c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00d      	beq.n	800b4c2 <HAL_GPIO_Init+0x216>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a18      	ldr	r2, [pc, #96]	; (800b50c <HAL_GPIO_Init+0x260>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d007      	beq.n	800b4be <HAL_GPIO_Init+0x212>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a17      	ldr	r2, [pc, #92]	; (800b510 <HAL_GPIO_Init+0x264>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d101      	bne.n	800b4ba <HAL_GPIO_Init+0x20e>
 800b4b6:	2309      	movs	r3, #9
 800b4b8:	e02d      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	e02b      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4be:	2308      	movs	r3, #8
 800b4c0:	e029      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4c2:	2307      	movs	r3, #7
 800b4c4:	e027      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4c6:	2306      	movs	r3, #6
 800b4c8:	e025      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4ca:	2305      	movs	r3, #5
 800b4cc:	e023      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	e021      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e01f      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	e01d      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e01b      	b.n	800b516 <HAL_GPIO_Init+0x26a>
 800b4de:	bf00      	nop
 800b4e0:	58000080 	.word	0x58000080
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	58000400 	.word	0x58000400
 800b4ec:	58020000 	.word	0x58020000
 800b4f0:	58020400 	.word	0x58020400
 800b4f4:	58020800 	.word	0x58020800
 800b4f8:	58020c00 	.word	0x58020c00
 800b4fc:	58021000 	.word	0x58021000
 800b500:	58021400 	.word	0x58021400
 800b504:	58021800 	.word	0x58021800
 800b508:	58021c00 	.word	0x58021c00
 800b50c:	58022000 	.word	0x58022000
 800b510:	58022400 	.word	0x58022400
 800b514:	2300      	movs	r3, #0
 800b516:	69fa      	ldr	r2, [r7, #28]
 800b518:	f002 0203 	and.w	r2, r2, #3
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	4093      	lsls	r3, r2
 800b520:	69ba      	ldr	r2, [r7, #24]
 800b522:	4313      	orrs	r3, r2
 800b524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b526:	4938      	ldr	r1, [pc, #224]	; (800b608 <HAL_GPIO_Init+0x35c>)
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	089b      	lsrs	r3, r3, #2
 800b52c:	3302      	adds	r3, #2
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	43db      	mvns	r3, r3
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	4013      	ands	r3, r2
 800b544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b55a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	43db      	mvns	r3, r3
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	4013      	ands	r3, r2
 800b572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	43db      	mvns	r3, r3
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	4013      	ands	r3, r2
 800b59e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f47f ae63 	bne.w	800b2c0 <HAL_GPIO_Init+0x14>
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	bf00      	nop
 800b5fe:	3724      	adds	r7, #36	; 0x24
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	58000400 	.word	0x58000400

0800b60c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b61a:	4b75      	ldr	r3, [pc, #468]	; (800b7f0 <HAL_GPIO_DeInit+0x1e4>)
 800b61c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b61e:	e0d9      	b.n	800b7d4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b620:	2201      	movs	r2, #1
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	fa02 f303 	lsl.w	r3, r2, r3
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	4013      	ands	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80cc 	beq.w	800b7ce <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b636:	4a6f      	ldr	r2, [pc, #444]	; (800b7f4 <HAL_GPIO_DeInit+0x1e8>)
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	089b      	lsrs	r3, r3, #2
 800b63c:	3302      	adds	r3, #2
 800b63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b642:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	220f      	movs	r2, #15
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	4013      	ands	r3, r2
 800b656:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a67      	ldr	r2, [pc, #412]	; (800b7f8 <HAL_GPIO_DeInit+0x1ec>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d037      	beq.n	800b6d0 <HAL_GPIO_DeInit+0xc4>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a66      	ldr	r2, [pc, #408]	; (800b7fc <HAL_GPIO_DeInit+0x1f0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d031      	beq.n	800b6cc <HAL_GPIO_DeInit+0xc0>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a65      	ldr	r2, [pc, #404]	; (800b800 <HAL_GPIO_DeInit+0x1f4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d02b      	beq.n	800b6c8 <HAL_GPIO_DeInit+0xbc>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a64      	ldr	r2, [pc, #400]	; (800b804 <HAL_GPIO_DeInit+0x1f8>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d025      	beq.n	800b6c4 <HAL_GPIO_DeInit+0xb8>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a63      	ldr	r2, [pc, #396]	; (800b808 <HAL_GPIO_DeInit+0x1fc>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d01f      	beq.n	800b6c0 <HAL_GPIO_DeInit+0xb4>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a62      	ldr	r2, [pc, #392]	; (800b80c <HAL_GPIO_DeInit+0x200>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d019      	beq.n	800b6bc <HAL_GPIO_DeInit+0xb0>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a61      	ldr	r2, [pc, #388]	; (800b810 <HAL_GPIO_DeInit+0x204>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d013      	beq.n	800b6b8 <HAL_GPIO_DeInit+0xac>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a60      	ldr	r2, [pc, #384]	; (800b814 <HAL_GPIO_DeInit+0x208>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d00d      	beq.n	800b6b4 <HAL_GPIO_DeInit+0xa8>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a5f      	ldr	r2, [pc, #380]	; (800b818 <HAL_GPIO_DeInit+0x20c>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d007      	beq.n	800b6b0 <HAL_GPIO_DeInit+0xa4>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a5e      	ldr	r2, [pc, #376]	; (800b81c <HAL_GPIO_DeInit+0x210>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d101      	bne.n	800b6ac <HAL_GPIO_DeInit+0xa0>
 800b6a8:	2309      	movs	r3, #9
 800b6aa:	e012      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6ac:	230a      	movs	r3, #10
 800b6ae:	e010      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6b0:	2308      	movs	r3, #8
 800b6b2:	e00e      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6b4:	2307      	movs	r3, #7
 800b6b6:	e00c      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6b8:	2306      	movs	r3, #6
 800b6ba:	e00a      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6bc:	2305      	movs	r3, #5
 800b6be:	e008      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6c0:	2304      	movs	r3, #4
 800b6c2:	e006      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e004      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e002      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e000      	b.n	800b6d2 <HAL_GPIO_DeInit+0xc6>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	f002 0203 	and.w	r2, r2, #3
 800b6d8:	0092      	lsls	r2, r2, #2
 800b6da:	4093      	lsls	r3, r2
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d136      	bne.n	800b750 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	401a      	ands	r2, r3
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	43db      	mvns	r3, r3
 800b6f8:	401a      	ands	r2, r3
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800b6fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	43db      	mvns	r3, r3
 800b708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b70c:	4013      	ands	r3, r2
 800b70e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	43db      	mvns	r3, r3
 800b71a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b71e:	4013      	ands	r3, r2
 800b720:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	220f      	movs	r2, #15
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b732:	4a30      	ldr	r2, [pc, #192]	; (800b7f4 <HAL_GPIO_DeInit+0x1e8>)
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	3302      	adds	r3, #2
 800b73a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	43da      	mvns	r2, r3
 800b742:	482c      	ldr	r0, [pc, #176]	; (800b7f4 <HAL_GPIO_DeInit+0x1e8>)
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	089b      	lsrs	r3, r3, #2
 800b748:	400a      	ands	r2, r1
 800b74a:	3302      	adds	r3, #2
 800b74c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	2103      	movs	r1, #3
 800b75a:	fa01 f303 	lsl.w	r3, r1, r3
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	08da      	lsrs	r2, r3, #3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3208      	adds	r2, #8
 800b76c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	220f      	movs	r2, #15
 800b77a:	fa02 f303 	lsl.w	r3, r2, r3
 800b77e:	43db      	mvns	r3, r3
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	08d2      	lsrs	r2, r2, #3
 800b784:	4019      	ands	r1, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3208      	adds	r2, #8
 800b78a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	2103      	movs	r1, #3
 800b798:	fa01 f303 	lsl.w	r3, r1, r3
 800b79c:	43db      	mvns	r3, r3
 800b79e:	401a      	ands	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b0:	43db      	mvns	r3, r3
 800b7b2:	401a      	ands	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	2103      	movs	r1, #3
 800b7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c6:	43db      	mvns	r3, r3
 800b7c8:	401a      	ands	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f af1f 	bne.w	800b620 <HAL_GPIO_DeInit+0x14>
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	58000080 	.word	0x58000080
 800b7f4:	58000400 	.word	0x58000400
 800b7f8:	58020000 	.word	0x58020000
 800b7fc:	58020400 	.word	0x58020400
 800b800:	58020800 	.word	0x58020800
 800b804:	58020c00 	.word	0x58020c00
 800b808:	58021000 	.word	0x58021000
 800b80c:	58021400 	.word	0x58021400
 800b810:	58021800 	.word	0x58021800
 800b814:	58021c00 	.word	0x58021c00
 800b818:	58022000 	.word	0x58022000
 800b81c:	58022400 	.word	0x58022400

0800b820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	807b      	strh	r3, [r7, #2]
 800b82c:	4613      	mov	r3, r2
 800b82e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b830:	787b      	ldrb	r3, [r7, #1]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b836:	887a      	ldrh	r2, [r7, #2]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b83c:	e003      	b.n	800b846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b83e:	887b      	ldrh	r3, [r7, #2]
 800b840:	041a      	lsls	r2, r3, #16
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	619a      	str	r2, [r3, #24]
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b852:	b480      	push	{r7}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b864:	887a      	ldrh	r2, [r7, #2]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	4013      	ands	r3, r2
 800b86a:	041a      	lsls	r2, r3, #16
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	43d9      	mvns	r1, r3
 800b870:	887b      	ldrh	r3, [r7, #2]
 800b872:	400b      	ands	r3, r1
 800b874:	431a      	orrs	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	619a      	str	r2, [r3, #24]
}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	4603      	mov	r3, r0
 800b88e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b894:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b898:	88fb      	ldrh	r3, [r7, #6]
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d008      	beq.n	800b8b2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b8a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8a4:	88fb      	ldrh	r3, [r7, #6]
 800b8a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7f5 fb31 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e07f      	b.n	800b9ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7f5 fc20 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2224      	movs	r2, #36	; 0x24
 800b8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0201 	bic.w	r2, r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b90c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b91c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d107      	bne.n	800b936 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b932:	609a      	str	r2, [r3, #8]
 800b934:	e006      	b.n	800b944 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d104      	bne.n	800b956 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b954:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6859      	ldr	r1, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b1d      	ldr	r3, [pc, #116]	; (800b9d8 <HAL_I2C_Init+0x11c>)
 800b962:	430b      	orrs	r3, r1
 800b964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	691a      	ldr	r2, [r3, #16]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69d9      	ldr	r1, [r3, #28]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1a      	ldr	r2, [r3, #32]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f042 0201 	orr.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	02008000 	.word	0x02008000

0800b9dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e021      	b.n	800ba32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2224      	movs	r2, #36	; 0x24
 800b9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 0201 	bic.w	r2, r2, #1
 800ba04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f5 fbf8 	bl	80011fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	4608      	mov	r0, r1
 800ba46:	4611      	mov	r1, r2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	817b      	strh	r3, [r7, #10]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	813b      	strh	r3, [r7, #8]
 800ba52:	4613      	mov	r3, r2
 800ba54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	f040 80f9 	bne.w	800bc56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d002      	beq.n	800ba70 <HAL_I2C_Mem_Write+0x34>
 800ba6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d105      	bne.n	800ba7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e0ed      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <HAL_I2C_Mem_Write+0x4e>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e0e6      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ba92:	f7fe ff39 	bl	800a908 <HAL_GetTick>
 800ba96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	2319      	movs	r3, #25
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fadd 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e0d1      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2221      	movs	r2, #33	; 0x21
 800bab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2240      	movs	r2, #64	; 0x40
 800bac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6a3a      	ldr	r2, [r7, #32]
 800bace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800badc:	88f8      	ldrh	r0, [r7, #6]
 800bade:	893a      	ldrh	r2, [r7, #8]
 800bae0:	8979      	ldrh	r1, [r7, #10]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	4603      	mov	r3, r0
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 f9ed 	bl	800becc <I2C_RequestMemoryWrite>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e0a9      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2bff      	cmp	r3, #255	; 0xff
 800bb0c:	d90e      	bls.n	800bb2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	22ff      	movs	r2, #255	; 0xff
 800bb12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	8979      	ldrh	r1, [r7, #10]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 fc57 	bl	800c3d8 <I2C_TransferConfig>
 800bb2a:	e00f      	b.n	800bb4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	8979      	ldrh	r1, [r7, #10]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fc46 	bl	800c3d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fad6 	bl	800c102 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e07b      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	781a      	ldrb	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d034      	beq.n	800bc04 <HAL_I2C_Mem_Write+0x1c8>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d130      	bne.n	800bc04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2180      	movs	r1, #128	; 0x80
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 fa59 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e04d      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2bff      	cmp	r3, #255	; 0xff
 800bbc4:	d90e      	bls.n	800bbe4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	22ff      	movs	r2, #255	; 0xff
 800bbca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	8979      	ldrh	r1, [r7, #10]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 fbfb 	bl	800c3d8 <I2C_TransferConfig>
 800bbe2:	e00f      	b.n	800bc04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	8979      	ldrh	r1, [r7, #10]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 fbea 	bl	800c3d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d19e      	bne.n	800bb4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 fabc 	bl	800c190 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e01a      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2220      	movs	r2, #32
 800bc28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6859      	ldr	r1, [r3, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	4b0a      	ldr	r3, [pc, #40]	; (800bc60 <HAL_I2C_Mem_Write+0x224>)
 800bc36:	400b      	ands	r3, r1
 800bc38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e000      	b.n	800bc58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bc56:	2302      	movs	r3, #2
  }
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	fe00e800 	.word	0xfe00e800

0800bc64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	817b      	strh	r3, [r7, #10]
 800bc76:	460b      	mov	r3, r1
 800bc78:	813b      	strh	r3, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	f040 80fd 	bne.w	800be86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <HAL_I2C_Mem_Read+0x34>
 800bc92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e0f1      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <HAL_I2C_Mem_Read+0x4e>
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e0ea      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bcba:	f7fe fe25 	bl	800a908 <HAL_GetTick>
 800bcbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2319      	movs	r3, #25
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f9c9 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e0d5      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2222      	movs	r2, #34	; 0x22
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2240      	movs	r2, #64	; 0x40
 800bce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6a3a      	ldr	r2, [r7, #32]
 800bcf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bcfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd04:	88f8      	ldrh	r0, [r7, #6]
 800bd06:	893a      	ldrh	r2, [r7, #8]
 800bd08:	8979      	ldrh	r1, [r7, #10]
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	4603      	mov	r3, r0
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 f92d 	bl	800bf74 <I2C_RequestMemoryRead>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e0ad      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	2bff      	cmp	r3, #255	; 0xff
 800bd34:	d90e      	bls.n	800bd54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	22ff      	movs	r2, #255	; 0xff
 800bd3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	8979      	ldrh	r1, [r7, #10]
 800bd44:	4b52      	ldr	r3, [pc, #328]	; (800be90 <HAL_I2C_Mem_Read+0x22c>)
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 fb43 	bl	800c3d8 <I2C_TransferConfig>
 800bd52:	e00f      	b.n	800bd74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	8979      	ldrh	r1, [r7, #10]
 800bd66:	4b4a      	ldr	r3, [pc, #296]	; (800be90 <HAL_I2C_Mem_Read+0x22c>)
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 fb32 	bl	800c3d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2104      	movs	r1, #4
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 f970 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e07c      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d034      	beq.n	800be34 <HAL_I2C_Mem_Read+0x1d0>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d130      	bne.n	800be34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2180      	movs	r1, #128	; 0x80
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f941 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e04d      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	2bff      	cmp	r3, #255	; 0xff
 800bdf4:	d90e      	bls.n	800be14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	22ff      	movs	r2, #255	; 0xff
 800bdfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be00:	b2da      	uxtb	r2, r3
 800be02:	8979      	ldrh	r1, [r7, #10]
 800be04:	2300      	movs	r3, #0
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 fae3 	bl	800c3d8 <I2C_TransferConfig>
 800be12:	e00f      	b.n	800be34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be22:	b2da      	uxtb	r2, r3
 800be24:	8979      	ldrh	r1, [r7, #10]
 800be26:	2300      	movs	r3, #0
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 fad2 	bl	800c3d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d19a      	bne.n	800bd74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 f9a4 	bl	800c190 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e01a      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2220      	movs	r2, #32
 800be58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6859      	ldr	r1, [r3, #4]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <HAL_I2C_Mem_Read+0x230>)
 800be66:	400b      	ands	r3, r1
 800be68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	e000      	b.n	800be88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800be86:	2302      	movs	r3, #2
  }
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3718      	adds	r7, #24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	80002400 	.word	0x80002400
 800be94:	fe00e800 	.word	0xfe00e800

0800be98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bea6:	b2db      	uxtb	r3, r3
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	4608      	mov	r0, r1
 800bed6:	4611      	mov	r1, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	4603      	mov	r3, r0
 800bedc:	817b      	strh	r3, [r7, #10]
 800bede:	460b      	mov	r3, r1
 800bee0:	813b      	strh	r3, [r7, #8]
 800bee2:	4613      	mov	r3, r2
 800bee4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bee6:	88fb      	ldrh	r3, [r7, #6]
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	8979      	ldrh	r1, [r7, #10]
 800beec:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <I2C_RequestMemoryWrite+0xa4>)
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 fa6f 	bl	800c3d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800befa:	69fa      	ldr	r2, [r7, #28]
 800befc:	69b9      	ldr	r1, [r7, #24]
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 f8ff 	bl	800c102 <I2C_WaitOnTXISFlagUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e02c      	b.n	800bf68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d105      	bne.n	800bf20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf14:	893b      	ldrh	r3, [r7, #8]
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	629a      	str	r2, [r3, #40]	; 0x28
 800bf1e:	e015      	b.n	800bf4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bf20:	893b      	ldrh	r3, [r7, #8]
 800bf22:	0a1b      	lsrs	r3, r3, #8
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf2e:	69fa      	ldr	r2, [r7, #28]
 800bf30:	69b9      	ldr	r1, [r7, #24]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f8e5 	bl	800c102 <I2C_WaitOnTXISFlagUntilTimeout>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e012      	b.n	800bf68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf42:	893b      	ldrh	r3, [r7, #8]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2200      	movs	r2, #0
 800bf54:	2180      	movs	r1, #128	; 0x80
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 f884 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e000      	b.n	800bf68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	80002000 	.word	0x80002000

0800bf74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	4611      	mov	r1, r2
 800bf80:	461a      	mov	r2, r3
 800bf82:	4603      	mov	r3, r0
 800bf84:	817b      	strh	r3, [r7, #10]
 800bf86:	460b      	mov	r3, r1
 800bf88:	813b      	strh	r3, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	8979      	ldrh	r1, [r7, #10]
 800bf94:	4b20      	ldr	r3, [pc, #128]	; (800c018 <I2C_RequestMemoryRead+0xa4>)
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 fa1c 	bl	800c3d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	69b9      	ldr	r1, [r7, #24]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 f8ac 	bl	800c102 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e02c      	b.n	800c00e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfb4:	88fb      	ldrh	r3, [r7, #6]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d105      	bne.n	800bfc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfba:	893b      	ldrh	r3, [r7, #8]
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	629a      	str	r2, [r3, #40]	; 0x28
 800bfc4:	e015      	b.n	800bff2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bfc6:	893b      	ldrh	r3, [r7, #8]
 800bfc8:	0a1b      	lsrs	r3, r3, #8
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	69b9      	ldr	r1, [r7, #24]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f892 	bl	800c102 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e012      	b.n	800c00e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfe8:	893b      	ldrh	r3, [r7, #8]
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2200      	movs	r2, #0
 800bffa:	2140      	movs	r1, #64	; 0x40
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f831 	bl	800c064 <I2C_WaitOnFlagUntilTimeout>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	80002000 	.word	0x80002000

0800c01c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	f003 0302 	and.w	r3, r3, #2
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d103      	bne.n	800c03a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2200      	movs	r2, #0
 800c038:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b01      	cmp	r3, #1
 800c046:	d007      	beq.n	800c058 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	699a      	ldr	r2, [r3, #24]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f042 0201 	orr.w	r2, r2, #1
 800c056:	619a      	str	r2, [r3, #24]
  }
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	4613      	mov	r3, r2
 800c072:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c074:	e031      	b.n	800c0da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07c:	d02d      	beq.n	800c0da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c07e:	f7fe fc43 	bl	800a908 <HAL_GetTick>
 800c082:	4602      	mov	r2, r0
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d302      	bcc.n	800c094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d122      	bne.n	800c0da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699a      	ldr	r2, [r3, #24]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	4013      	ands	r3, r2
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2301      	moveq	r3, #1
 800c0a6:	2300      	movne	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d113      	bne.n	800c0da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b6:	f043 0220 	orr.w	r2, r3, #32
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e00f      	b.n	800c0fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	699a      	ldr	r2, [r3, #24]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	bf0c      	ite	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	2300      	movne	r3, #0
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d0be      	beq.n	800c076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	60f8      	str	r0, [r7, #12]
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c10e:	e033      	b.n	800c178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f000 f87f 	bl	800c218 <I2C_IsErrorOccurred>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e031      	b.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d025      	beq.n	800c178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c12c:	f7fe fbec 	bl	800a908 <HAL_GetTick>
 800c130:	4602      	mov	r2, r0
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d302      	bcc.n	800c142 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d11a      	bne.n	800c178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d013      	beq.n	800c178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c154:	f043 0220 	orr.w	r2, r3, #32
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2220      	movs	r2, #32
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e007      	b.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b02      	cmp	r3, #2
 800c184:	d1c4      	bne.n	800c110 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c19c:	e02f      	b.n	800c1fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 f838 	bl	800c218 <I2C_IsErrorOccurred>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e02d      	b.n	800c20e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1b2:	f7fe fba9 	bl	800a908 <HAL_GetTick>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d302      	bcc.n	800c1c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d11a      	bne.n	800c1fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f003 0320 	and.w	r3, r3, #32
 800c1d2:	2b20      	cmp	r3, #32
 800c1d4:	d013      	beq.n	800c1fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1da:	f043 0220 	orr.w	r2, r3, #32
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e007      	b.n	800c20e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	f003 0320 	and.w	r3, r3, #32
 800c208:	2b20      	cmp	r3, #32
 800c20a:	d1c8      	bne.n	800c19e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	; 0x28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	f003 0310 	and.w	r3, r3, #16
 800c240:	2b00      	cmp	r3, #0
 800c242:	d068      	beq.n	800c316 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2210      	movs	r2, #16
 800c24a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c24c:	e049      	b.n	800c2e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d045      	beq.n	800c2e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c256:	f7fe fb57 	bl	800a908 <HAL_GetTick>
 800c25a:	4602      	mov	r2, r0
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	429a      	cmp	r2, r3
 800c264:	d302      	bcc.n	800c26c <I2C_IsErrorOccurred+0x54>
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d13a      	bne.n	800c2e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c276:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c27e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c28a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c28e:	d121      	bne.n	800c2d4 <I2C_IsErrorOccurred+0xbc>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c296:	d01d      	beq.n	800c2d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c298:	7cfb      	ldrb	r3, [r7, #19]
 800c29a:	2b20      	cmp	r3, #32
 800c29c:	d01a      	beq.n	800c2d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c2ae:	f7fe fb2b 	bl	800a908 <HAL_GetTick>
 800c2b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c2b4:	e00e      	b.n	800c2d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c2b6:	f7fe fb27 	bl	800a908 <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	2b19      	cmp	r3, #25
 800c2c2:	d907      	bls.n	800c2d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	f043 0320 	orr.w	r3, r3, #32
 800c2ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c2d2:	e006      	b.n	800c2e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	f003 0320 	and.w	r3, r3, #32
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d1e9      	bne.n	800c2b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	d003      	beq.n	800c2f8 <I2C_IsErrorOccurred+0xe0>
 800c2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0aa      	beq.n	800c24e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d103      	bne.n	800c308 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2220      	movs	r2, #32
 800c306:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	f043 0304 	orr.w	r3, r3, #4
 800c30e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	f043 0301 	orr.w	r3, r3, #1
 800c32e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00b      	beq.n	800c362 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	f043 0308 	orr.w	r3, r3, #8
 800c350:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c35a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	f043 0302 	orr.w	r3, r3, #2
 800c372:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c37c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01c      	beq.n	800c3c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f7ff fe45 	bl	800c01c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6859      	ldr	r1, [r3, #4]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <I2C_IsErrorOccurred+0x1bc>)
 800c39e:	400b      	ands	r3, r1
 800c3a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	431a      	orrs	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3728      	adds	r7, #40	; 0x28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	fe00e800 	.word	0xfe00e800

0800c3d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	817b      	strh	r3, [r7, #10]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c3ea:	897b      	ldrh	r3, [r7, #10]
 800c3ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c3f0:	7a7b      	ldrb	r3, [r7, #9]
 800c3f2:	041b      	lsls	r3, r3, #16
 800c3f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c3f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	4313      	orrs	r3, r2
 800c402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c406:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	6a3b      	ldr	r3, [r7, #32]
 800c410:	0d5b      	lsrs	r3, r3, #21
 800c412:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c416:	4b08      	ldr	r3, [pc, #32]	; (800c438 <I2C_TransferConfig+0x60>)
 800c418:	430b      	orrs	r3, r1
 800c41a:	43db      	mvns	r3, r3
 800c41c:	ea02 0103 	and.w	r1, r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	430a      	orrs	r2, r1
 800c428:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c42a:	bf00      	nop
 800c42c:	371c      	adds	r7, #28
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	03ff63ff 	.word	0x03ff63ff

0800c43c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b20      	cmp	r3, #32
 800c450:	d138      	bne.n	800c4c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e032      	b.n	800c4c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2224      	movs	r2, #36	; 0x24
 800c46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0201 	bic.w	r2, r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c48e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	430a      	orrs	r2, r1
 800c49e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f042 0201 	orr.w	r2, r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e000      	b.n	800c4c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c4c4:	2302      	movs	r3, #2
  }
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b085      	sub	sp, #20
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b20      	cmp	r3, #32
 800c4e6:	d139      	bne.n	800c55c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d101      	bne.n	800c4f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	e033      	b.n	800c55e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2224      	movs	r2, #36	; 0x24
 800c502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f022 0201 	bic.w	r2, r2, #1
 800c514:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c524:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f042 0201 	orr.w	r2, r2, #1
 800c546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	e000      	b.n	800c55e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c55c:	2302      	movs	r3, #2
  }
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
	...

0800c56c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e0bf      	b.n	800c6fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d106      	bne.n	800c598 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7f4 fe58 	bl	8001248 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c5ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6999      	ldr	r1, [r3, #24]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c5c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6899      	ldr	r1, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b4a      	ldr	r3, [pc, #296]	; (800c708 <HAL_LTDC_Init+0x19c>)
 800c5e0:	400b      	ands	r3, r1
 800c5e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	041b      	lsls	r3, r3, #16
 800c5ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6899      	ldr	r1, [r3, #8]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	699a      	ldr	r2, [r3, #24]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68d9      	ldr	r1, [r3, #12]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	4b3e      	ldr	r3, [pc, #248]	; (800c708 <HAL_LTDC_Init+0x19c>)
 800c60e:	400b      	ands	r3, r1
 800c610:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	69db      	ldr	r3, [r3, #28]
 800c616:	041b      	lsls	r3, r3, #16
 800c618:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68d9      	ldr	r1, [r3, #12]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1a      	ldr	r2, [r3, #32]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	431a      	orrs	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6919      	ldr	r1, [r3, #16]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b33      	ldr	r3, [pc, #204]	; (800c708 <HAL_LTDC_Init+0x19c>)
 800c63c:	400b      	ands	r3, r1
 800c63e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c644:	041b      	lsls	r3, r3, #16
 800c646:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6919      	ldr	r1, [r3, #16]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	6959      	ldr	r1, [r3, #20]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	4b27      	ldr	r3, [pc, #156]	; (800c708 <HAL_LTDC_Init+0x19c>)
 800c66a:	400b      	ands	r3, r1
 800c66c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	041b      	lsls	r3, r3, #16
 800c674:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6959      	ldr	r1, [r3, #20]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	431a      	orrs	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	430a      	orrs	r2, r1
 800c68a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c692:	021b      	lsls	r3, r3, #8
 800c694:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c69c:	041b      	lsls	r3, r3, #16
 800c69e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0206 	orr.w	r2, r2, #6
 800c6da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699a      	ldr	r2, [r3, #24]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f042 0201 	orr.w	r2, r2, #1
 800c6ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	f000f800 	.word	0xf000f800

0800c70c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c722:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0304 	and.w	r3, r3, #4
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d023      	beq.n	800c776 <HAL_LTDC_IRQHandler+0x6a>
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d01e      	beq.n	800c776 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f022 0204 	bic.w	r2, r2, #4
 800c746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2204      	movs	r2, #4
 800c74e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c756:	f043 0201 	orr.w	r2, r3, #1
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2204      	movs	r2, #4
 800c764:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f86f 	bl	800c854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d023      	beq.n	800c7c8 <HAL_LTDC_IRQHandler+0xbc>
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d01e      	beq.n	800c7c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f022 0202 	bic.w	r2, r2, #2
 800c798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c7a8:	f043 0202 	orr.w	r2, r3, #2
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2204      	movs	r2, #4
 800c7b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f846 	bl	800c854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d01b      	beq.n	800c80a <HAL_LTDC_IRQHandler+0xfe>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d016      	beq.n	800c80a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 0201 	bic.w	r2, r2, #1
 800c7ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f7 fa63 	bl	8003cd0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d01b      	beq.n	800c84c <HAL_LTDC_IRQHandler+0x140>
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f003 0308 	and.w	r3, r3, #8
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d016      	beq.n	800c84c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f022 0208 	bic.w	r2, r2, #8
 800c82c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2208      	movs	r2, #8
 800c834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f80e 	bl	800c868 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c84c:	bf00      	nop
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c87c:	b5b0      	push	{r4, r5, r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_LTDC_ConfigLayer+0x1a>
 800c892:	2302      	movs	r3, #2
 800c894:	e02c      	b.n	800c8f0 <HAL_LTDC_ConfigLayer+0x74>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2134      	movs	r1, #52	; 0x34
 800c8ac:	fb01 f303 	mul.w	r3, r1, r3
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	4614      	mov	r4, r2
 800c8ba:	461d      	mov	r5, r3
 800c8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	68b9      	ldr	r1, [r7, #8]
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f849 	bl	800c968 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bdb0      	pop	{r4, r5, r7, pc}

0800c8f8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d101      	bne.n	800c910 <HAL_LTDC_ProgramLineEvent+0x18>
 800c90c:	2302      	movs	r3, #2
 800c90e:	e023      	b.n	800c958 <HAL_LTDC_ProgramLineEvent+0x60>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 0201 	bic.w	r2, r2, #1
 800c92e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800c930:	4a0c      	ldr	r2, [pc, #48]	; (800c964 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f042 0201 	orr.w	r2, r2, #1
 800c944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	50001000 	.word	0x50001000

0800c968 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c968:	b480      	push	{r7}
 800c96a:	b089      	sub	sp, #36	; 0x24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	0c1b      	lsrs	r3, r3, #16
 800c980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c984:	4413      	add	r3, r2
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	01db      	lsls	r3, r3, #7
 800c994:	4413      	add	r3, r2
 800c996:	3384      	adds	r3, #132	; 0x84
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	6812      	ldr	r2, [r2, #0]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	01d2      	lsls	r2, r2, #7
 800c9a4:	440a      	add	r2, r1
 800c9a6:	3284      	adds	r2, #132	; 0x84
 800c9a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c9ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	0c1b      	lsrs	r3, r3, #16
 800c9ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c9be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c9c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	01db      	lsls	r3, r3, #7
 800c9cc:	440b      	add	r3, r1
 800c9ce:	3384      	adds	r3, #132	; 0x84
 800c9d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c9d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68da      	ldr	r2, [r3, #12]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9e6:	4413      	add	r3, r2
 800c9e8:	041b      	lsls	r3, r3, #16
 800c9ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	01db      	lsls	r3, r3, #7
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3384      	adds	r3, #132	; 0x84
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	6812      	ldr	r2, [r2, #0]
 800ca00:	4611      	mov	r1, r2
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	01d2      	lsls	r2, r2, #7
 800ca06:	440a      	add	r2, r1
 800ca08:	3284      	adds	r2, #132	; 0x84
 800ca0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ca0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca1e:	4413      	add	r3, r2
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4619      	mov	r1, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	01db      	lsls	r3, r3, #7
 800ca2c:	440b      	add	r3, r1
 800ca2e:	3384      	adds	r3, #132	; 0x84
 800ca30:	4619      	mov	r1, r3
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	01db      	lsls	r3, r3, #7
 800ca42:	4413      	add	r3, r2
 800ca44:	3384      	adds	r3, #132	; 0x84
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	6812      	ldr	r2, [r2, #0]
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	01d2      	lsls	r2, r2, #7
 800ca52:	440a      	add	r2, r1
 800ca54:	3284      	adds	r2, #132	; 0x84
 800ca56:	f023 0307 	bic.w	r3, r3, #7
 800ca5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	01db      	lsls	r3, r3, #7
 800ca66:	4413      	add	r3, r2
 800ca68:	3384      	adds	r3, #132	; 0x84
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca78:	021b      	lsls	r3, r3, #8
 800ca7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ca82:	041b      	lsls	r3, r3, #16
 800ca84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	061b      	lsls	r3, r3, #24
 800ca8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	01db      	lsls	r3, r3, #7
 800ca98:	4413      	add	r3, r2
 800ca9a:	3384      	adds	r3, #132	; 0x84
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	01db      	lsls	r3, r3, #7
 800caa8:	4413      	add	r3, r2
 800caaa:	3384      	adds	r3, #132	; 0x84
 800caac:	461a      	mov	r2, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cab8:	461a      	mov	r2, r3
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	431a      	orrs	r2, r3
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	431a      	orrs	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4619      	mov	r1, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	01db      	lsls	r3, r3, #7
 800cacc:	440b      	add	r3, r1
 800cace:	3384      	adds	r3, #132	; 0x84
 800cad0:	4619      	mov	r1, r3
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	461a      	mov	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	01db      	lsls	r3, r3, #7
 800cae2:	4413      	add	r3, r2
 800cae4:	3384      	adds	r3, #132	; 0x84
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	6812      	ldr	r2, [r2, #0]
 800caec:	4611      	mov	r1, r2
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	01d2      	lsls	r2, r2, #7
 800caf2:	440a      	add	r2, r1
 800caf4:	3284      	adds	r2, #132	; 0x84
 800caf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cafa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	01db      	lsls	r3, r3, #7
 800cb06:	4413      	add	r3, r2
 800cb08:	3384      	adds	r3, #132	; 0x84
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	01db      	lsls	r3, r3, #7
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3384      	adds	r3, #132	; 0x84
 800cb20:	69da      	ldr	r2, [r3, #28]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4619      	mov	r1, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	01db      	lsls	r3, r3, #7
 800cb2c:	440b      	add	r3, r1
 800cb2e:	3384      	adds	r3, #132	; 0x84
 800cb30:	4619      	mov	r1, r3
 800cb32:	4b58      	ldr	r3, [pc, #352]	; (800cc94 <LTDC_SetConfig+0x32c>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	69da      	ldr	r2, [r3, #28]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	6809      	ldr	r1, [r1, #0]
 800cb44:	4608      	mov	r0, r1
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	01c9      	lsls	r1, r1, #7
 800cb4a:	4401      	add	r1, r0
 800cb4c:	3184      	adds	r1, #132	; 0x84
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	461a      	mov	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	01db      	lsls	r3, r3, #7
 800cb5c:	4413      	add	r3, r2
 800cb5e:	3384      	adds	r3, #132	; 0x84
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	461a      	mov	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	01db      	lsls	r3, r3, #7
 800cb6c:	4413      	add	r3, r2
 800cb6e:	3384      	adds	r3, #132	; 0x84
 800cb70:	461a      	mov	r2, r3
 800cb72:	2300      	movs	r3, #0
 800cb74:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	01db      	lsls	r3, r3, #7
 800cb80:	4413      	add	r3, r2
 800cb82:	3384      	adds	r3, #132	; 0x84
 800cb84:	461a      	mov	r2, r3
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d102      	bne.n	800cb9a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800cb94:	2304      	movs	r3, #4
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	e01b      	b.n	800cbd2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d102      	bne.n	800cba8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800cba2:	2303      	movs	r3, #3
 800cba4:	61fb      	str	r3, [r7, #28]
 800cba6:	e014      	b.n	800cbd2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	d00b      	beq.n	800cbc8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d007      	beq.n	800cbc8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d003      	beq.n	800cbc8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cbc4:	2b07      	cmp	r3, #7
 800cbc6:	d102      	bne.n	800cbce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	61fb      	str	r3, [r7, #28]
 800cbcc:	e001      	b.n	800cbd2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	01db      	lsls	r3, r3, #7
 800cbdc:	4413      	add	r3, r2
 800cbde:	3384      	adds	r3, #132	; 0x84
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	01d2      	lsls	r2, r2, #7
 800cbec:	440a      	add	r2, r1
 800cbee:	3284      	adds	r2, #132	; 0x84
 800cbf0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800cbf4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfa:	69fa      	ldr	r2, [r7, #28]
 800cbfc:	fb02 f303 	mul.w	r3, r2, r3
 800cc00:	041a      	lsls	r2, r3, #16
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	6859      	ldr	r1, [r3, #4]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	1acb      	subs	r3, r1, r3
 800cc0c:	69f9      	ldr	r1, [r7, #28]
 800cc0e:	fb01 f303 	mul.w	r3, r1, r3
 800cc12:	3307      	adds	r3, #7
 800cc14:	68f9      	ldr	r1, [r7, #12]
 800cc16:	6809      	ldr	r1, [r1, #0]
 800cc18:	4608      	mov	r0, r1
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	01c9      	lsls	r1, r1, #7
 800cc1e:	4401      	add	r1, r0
 800cc20:	3184      	adds	r1, #132	; 0x84
 800cc22:	4313      	orrs	r3, r2
 800cc24:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	01db      	lsls	r3, r3, #7
 800cc30:	4413      	add	r3, r2
 800cc32:	3384      	adds	r3, #132	; 0x84
 800cc34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	01db      	lsls	r3, r3, #7
 800cc40:	440b      	add	r3, r1
 800cc42:	3384      	adds	r3, #132	; 0x84
 800cc44:	4619      	mov	r1, r3
 800cc46:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <LTDC_SetConfig+0x330>)
 800cc48:	4013      	ands	r3, r2
 800cc4a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	461a      	mov	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	01db      	lsls	r3, r3, #7
 800cc56:	4413      	add	r3, r2
 800cc58:	3384      	adds	r3, #132	; 0x84
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	01db      	lsls	r3, r3, #7
 800cc6c:	4413      	add	r3, r2
 800cc6e:	3384      	adds	r3, #132	; 0x84
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	6812      	ldr	r2, [r2, #0]
 800cc76:	4611      	mov	r1, r2
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	01d2      	lsls	r2, r2, #7
 800cc7c:	440a      	add	r2, r1
 800cc7e:	3284      	adds	r2, #132	; 0x84
 800cc80:	f043 0301 	orr.w	r3, r3, #1
 800cc84:	6013      	str	r3, [r2, #0]
}
 800cc86:	bf00      	nop
 800cc88:	3724      	adds	r7, #36	; 0x24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	fffff8f8 	.word	0xfffff8f8
 800cc98:	fffff800 	.word	0xfffff800

0800cc9c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800cca4:	f7fd fe30 	bl	800a908 <HAL_GetTick>
 800cca8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d101      	bne.n	800ccb4 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e04a      	b.n	800cd4a <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d008      	beq.n	800ccd2 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2280      	movs	r2, #128	; 0x80
 800ccc4:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e03b      	b.n	800cd4a <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800cce0:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68da      	ldr	r2, [r3, #12]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f022 0201 	bic.w	r2, r2, #1
 800ccf0:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ccf2:	e016      	b.n	800cd22 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ccf4:	f7fd fe08 	bl	800a908 <HAL_GetTick>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	2b05      	cmp	r3, #5
 800cd00:	d90f      	bls.n	800cd22 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2203      	movs	r2, #3
 800cd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e013      	b.n	800cd4a <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1e1      	bne.n	800ccf4 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	221f      	movs	r2, #31
 800cd36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e017      	b.n	800cd94 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d004      	beq.n	800cd7a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2280      	movs	r2, #128	; 0x80
 800cd74:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e00c      	b.n	800cd94 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0201 	bic.w	r2, r2, #1
 800cd90:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800cdac:	f7fd fdac 	bl	800a908 <HAL_GetTick>
 800cdb0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	73fb      	strb	r3, [r7, #15]
 800cdbc:	e0a5      	b.n	800cf0a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f040 809e 	bne.w	800cf0a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7f4 fb08 	bl	80013e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800cdd4:	f241 3188 	movw	r1, #5000	; 0x1388
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fd44 	bl	800d866 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	4b4b      	ldr	r3, [pc, #300]	; (800cf14 <HAL_OSPI_Init+0x174>)
 800cde6:	4013      	ands	r3, r2
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	68d1      	ldr	r1, [r2, #12]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6912      	ldr	r2, [r2, #16]
 800cdf0:	3a01      	subs	r2, #1
 800cdf2:	0412      	lsls	r2, r2, #16
 800cdf4:	4311      	orrs	r1, r2
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	6952      	ldr	r2, [r2, #20]
 800cdfa:	3a01      	subs	r2, #1
 800cdfc:	0212      	lsls	r2, r2, #8
 800cdfe:	4311      	orrs	r1, r2
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ce04:	4311      	orrs	r1, r2
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	69d2      	ldr	r2, [r2, #28]
 800ce0a:	4311      	orrs	r1, r2
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	6812      	ldr	r2, [r2, #0]
 800ce10:	430b      	orrs	r3, r1
 800ce12:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a1a      	ldr	r2, [r3, #32]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ce44:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	021a      	lsls	r2, r3, #8
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2120      	movs	r1, #32
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fd45 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800ce72:	4603      	mov	r3, r0
 800ce74:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d146      	bne.n	800cf0a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8a:	1e5a      	subs	r2, r3, #1
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	430a      	orrs	r2, r1
 800ce92:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689a      	ldr	r2, [r3, #8]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ceb2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	431a      	orrs	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	430a      	orrs	r2, r1
 800cec6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f042 0201 	orr.w	r2, r2, #1
 800ced8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d107      	bne.n	800cef2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f042 0202 	orr.w	r2, r2, #2
 800cef0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cefa:	d103      	bne.n	800cf04 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	651a      	str	r2, [r3, #80]	; 0x50
 800cf02:	e002      	b.n	800cf0a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2202      	movs	r2, #2
 800cf08:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	f8e0f8f4 	.word	0xf8e0f8f4

0800cf18 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d102      	bne.n	800cf30 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	73fb      	strb	r3, [r7, #15]
 800cf2e:	e015      	b.n	800cf5c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0201 	bic.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689a      	ldr	r2, [r3, #8]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f022 0202 	bic.w	r2, r2, #2
 800cf4e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7f4 fab5 	bl	80014c0 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3350      	adds	r3, #80	; 0x50
 800cf76:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf8c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f003 0304 	and.w	r3, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d03a      	beq.n	800d00e <HAL_OSPI_IRQHandler+0xa6>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d035      	beq.n	800d00e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b18      	cmp	r3, #24
 800cfa6:	d10f      	bne.n	800cfc8 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfc0:	1e5a      	subs	r2, r3, #1
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	649a      	str	r2, [r3, #72]	; 0x48
 800cfc6:	e012      	b.n	800cfee <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2b28      	cmp	r3, #40	; 0x28
 800cfcc:	d10f      	bne.n	800cfee <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	7812      	ldrb	r2, [r2, #0]
 800cfd6:	b2d2      	uxtb	r2, r2
 800cfd8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfe8:	1e5a      	subs	r2, r3, #1
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d107      	bne.n	800d006 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d004:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fb7c 	bl	800d704 <HAL_OSPI_FifoThresholdCallback>
 800d00c:	e0e7      	b.n	800d1de <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	f003 0302 	and.w	r3, r3, #2
 800d014:	2b00      	cmp	r3, #0
 800d016:	d067      	beq.n	800d0e8 <HAL_OSPI_IRQHandler+0x180>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d062      	beq.n	800d0e8 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b28      	cmp	r3, #40	; 0x28
 800d026:	d131      	bne.n	800d08c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d015      	beq.n	800d05c <HAL_OSPI_IRQHandler+0xf4>
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800d036:	2b00      	cmp	r3, #0
 800d038:	d010      	beq.n	800d05c <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	7812      	ldrb	r2, [r2, #0]
 800d042:	b2d2      	uxtb	r2, r2
 800d044:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d054:	1e5a      	subs	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d05a:	e0bd      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d060:	2b00      	cmp	r3, #0
 800d062:	f040 80b9 	bne.w	800d1d8 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2202      	movs	r2, #2
 800d06c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d07c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2202      	movs	r2, #2
 800d082:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fb51 	bl	800d72c <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d08a:	e0a5      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2202      	movs	r2, #2
 800d092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d0a2:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b18      	cmp	r3, #24
 800d0ae:	d103      	bne.n	800d0b8 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fb45 	bl	800d740 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d0b6:	e08f      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2b08      	cmp	r3, #8
 800d0bc:	d103      	bne.n	800d0c6 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fb2a 	bl	800d718 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d0c4:	e088      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0cc:	f040 8084 	bne.w	800d1d8 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fb09 	bl	800d6f0 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d0de:	e07b      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fafb 	bl	800d6dc <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d0e6:	e077      	b.n	800d1d8 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	f003 0308 	and.w	r3, r3, #8
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d01e      	beq.n	800d130 <HAL_OSPI_IRQHandler+0x1c8>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d019      	beq.n	800d130 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2208      	movs	r2, #8
 800d102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00a      	beq.n	800d128 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800d120:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2202      	movs	r2, #2
 800d126:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fb13 	bl	800d754 <HAL_OSPI_StatusMatchCallback>
 800d12e:	e056      	b.n	800d1de <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d03c      	beq.n	800d1b4 <HAL_OSPI_IRQHandler+0x24c>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d037      	beq.n	800d1b4 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2201      	movs	r2, #1
 800d14a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d15a:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 0304 	and.w	r3, r3, #4
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d01a      	beq.n	800d1a6 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f022 0204 	bic.w	r2, r2, #4
 800d17e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d184:	4a18      	ldr	r2, [pc, #96]	; (800d1e8 <HAL_OSPI_IRQHandler+0x280>)
 800d186:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff fde0 	bl	800cd52 <HAL_MDMA_Abort_IT>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d021      	beq.n	800d1dc <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fa9c 	bl	800d6dc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d1a4:	e01a      	b.n	800d1dc <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fa95 	bl	800d6dc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d1b2:	e013      	b.n	800d1dc <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f003 0310 	and.w	r3, r3, #16
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00f      	beq.n	800d1de <HAL_OSPI_IRQHandler+0x276>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00a      	beq.n	800d1de <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2210      	movs	r2, #16
 800d1ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fac9 	bl	800d768 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d1d6:	e002      	b.n	800d1de <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d1d8:	bf00      	nop
 800d1da:	e000      	b.n	800d1de <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d1dc:	bf00      	nop
}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	0800d885 	.word	0x0800d885

0800d1ec <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08a      	sub	sp, #40	; 0x28
 800d1f0:	af02      	add	r7, sp, #8
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800d1f8:	f7fd fb86 	bl	800a908 <HAL_GetTick>
 800d1fc:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d202:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d208:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d104      	bne.n	800d21a <HAL_OSPI_Command+0x2e>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d218:	d115      	bne.n	800d246 <HAL_OSPI_Command+0x5a>
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b14      	cmp	r3, #20
 800d21e:	d107      	bne.n	800d230 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b02      	cmp	r3, #2
 800d226:	d00e      	beq.n	800d246 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d00a      	beq.n	800d246 <HAL_OSPI_Command+0x5a>
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b24      	cmp	r3, #36	; 0x24
 800d234:	d15b      	bne.n	800d2ee <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d003      	beq.n	800d246 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800d242:	2b03      	cmp	r3, #3
 800d244:	d153      	bne.n	800d2ee <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	2200      	movs	r2, #0
 800d24e:	2120      	movs	r1, #32
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f000 fb53 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d256:	4603      	mov	r3, r0
 800d258:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800d25a:	7ffb      	ldrb	r3, [r7, #31]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d14c      	bne.n	800d2fa <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 fb7f 	bl	800d96c <OSPI_ConfigCmd>
 800d26e:	4603      	mov	r3, r0
 800d270:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800d272:	7ffb      	ldrb	r3, [r7, #31]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d140      	bne.n	800d2fa <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10e      	bne.n	800d29e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	2201      	movs	r2, #1
 800d288:	2102      	movs	r1, #2
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f000 fb36 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d290:	4603      	mov	r3, r0
 800d292:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2202      	movs	r2, #2
 800d29a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d29c:	e02d      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d103      	bne.n	800d2ae <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2204      	movs	r2, #4
 800d2aa:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d2ac:	e025      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d10b      	bne.n	800d2ce <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ba:	2b24      	cmp	r3, #36	; 0x24
 800d2bc:	d103      	bne.n	800d2c6 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d2c4:	e019      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2214      	movs	r2, #20
 800d2ca:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d2cc:	e015      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d111      	bne.n	800d2fa <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2da:	2b14      	cmp	r3, #20
 800d2dc:	d103      	bne.n	800d2e6 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d2e4:	e009      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2224      	movs	r2, #36	; 0x24
 800d2ea:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d2ec:	e005      	b.n	800d2fa <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2210      	movs	r2, #16
 800d2f6:	655a      	str	r2, [r3, #84]	; 0x54
 800d2f8:	e000      	b.n	800d2fc <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800d2fa:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d2fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3720      	adds	r7, #32
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b08a      	sub	sp, #40	; 0x28
 800d30a:	af02      	add	r7, sp, #8
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	60b9      	str	r1, [r7, #8]
 800d310:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d312:	f7fd faf9 	bl	800a908 <HAL_GetTick>
 800d316:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3350      	adds	r3, #80	; 0x50
 800d31e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d105      	bne.n	800d332 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2208      	movs	r2, #8
 800d32e:	655a      	str	r2, [r3, #84]	; 0x54
 800d330:	e057      	b.n	800d3e2 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d336:	2b04      	cmp	r3, #4
 800d338:	d14e      	bne.n	800d3d8 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d362:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	2201      	movs	r2, #1
 800d36c:	2104      	movs	r1, #4
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 fac4 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d374:	4603      	mov	r3, r0
 800d376:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d378:	7ffb      	ldrb	r3, [r7, #31]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d113      	bne.n	800d3a6 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d396:	1e5a      	subs	r2, r3, #1
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1df      	bne.n	800d364 <HAL_OSPI_Transmit+0x5e>
 800d3a4:	e000      	b.n	800d3a8 <HAL_OSPI_Transmit+0xa2>
          break;
 800d3a6:	bf00      	nop

      if (status == HAL_OK)
 800d3a8:	7ffb      	ldrb	r3, [r7, #31]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d119      	bne.n	800d3e2 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	2102      	movs	r1, #2
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fa9f 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d3c2:	7ffb      	ldrb	r3, [r7, #31]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10c      	bne.n	800d3e2 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	651a      	str	r2, [r3, #80]	; 0x50
 800d3d6:	e004      	b.n	800d3e2 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2210      	movs	r2, #16
 800d3e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800d3e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3720      	adds	r7, #32
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	; 0x30
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d3f8:	f7fd fa86 	bl	800a908 <HAL_GetTick>
 800d3fc:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3350      	adds	r3, #80	; 0x50
 800d404:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d40c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d416:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2208      	movs	r2, #8
 800d428:	655a      	str	r2, [r3, #84]	; 0x54
 800d42a:	e07c      	b.n	800d526 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d430:	2b04      	cmp	r3, #4
 800d432:	d172      	bne.n	800d51a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d460:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d46a:	d104      	bne.n	800d476 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	649a      	str	r2, [r3, #72]	; 0x48
 800d474:	e011      	b.n	800d49a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d47e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d482:	2b00      	cmp	r3, #0
 800d484:	d004      	beq.n	800d490 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	69ba      	ldr	r2, [r7, #24]
 800d48c:	649a      	str	r2, [r3, #72]	; 0x48
 800d48e:	e004      	b.n	800d49a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	2106      	movs	r1, #6
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f000 fa29 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d114      	bne.n	800d4e2 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4bc:	69fa      	ldr	r2, [r7, #28]
 800d4be:	7812      	ldrb	r2, [r2, #0]
 800d4c0:	b2d2      	uxtb	r2, r2
 800d4c2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4d2:	1e5a      	subs	r2, r3, #1
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1dc      	bne.n	800d49a <HAL_OSPI_Receive+0xae>
 800d4e0:	e000      	b.n	800d4e4 <HAL_OSPI_Receive+0xf8>
          break;
 800d4e2:	bf00      	nop

      if (status == HAL_OK)
 800d4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d11c      	bne.n	800d526 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	2102      	movs	r1, #2
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f000 fa00 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800d502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10d      	bne.n	800d526 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2202      	movs	r2, #2
 800d510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2202      	movs	r2, #2
 800d516:	651a      	str	r2, [r3, #80]	; 0x50
 800d518:	e005      	b.n	800d526 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2210      	movs	r2, #16
 800d524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800d526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3728      	adds	r7, #40	; 0x28
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b08a      	sub	sp, #40	; 0x28
 800d536:	af02      	add	r7, sp, #8
 800d538:	60f8      	str	r0, [r7, #12]
 800d53a:	60b9      	str	r1, [r7, #8]
 800d53c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d53e:	f7fd f9e3 	bl	800a908 <HAL_GetTick>
 800d542:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d54a:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d554:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d164      	bne.n	800d628 <HAL_OSPI_AutoPolling+0xf6>
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d566:	d15f      	bne.n	800d628 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	2200      	movs	r2, #0
 800d570:	2120      	movs	r1, #32
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f9c2 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d578:	4603      	mov	r3, r0
 800d57a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800d57c:	7ffb      	ldrb	r3, [r7, #31]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d158      	bne.n	800d634 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	6852      	ldr	r2, [r2, #4]
 800d596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	6912      	ldr	r2, [r2, #16]
 800d5a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6899      	ldr	r1, [r3, #8]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800d5c4:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d5ce:	d104      	bne.n	800d5da <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	649a      	str	r2, [r3, #72]	; 0x48
 800d5d8:	e011      	b.n	800d5fe <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d5e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	649a      	str	r2, [r3, #72]	; 0x48
 800d5f2:	e004      	b.n	800d5fe <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	2201      	movs	r2, #1
 800d606:	2108      	movs	r1, #8
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 f977 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d60e:	4603      	mov	r3, r0
 800d610:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800d612:	7ffb      	ldrb	r3, [r7, #31]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10d      	bne.n	800d634 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2208      	movs	r2, #8
 800d61e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2202      	movs	r2, #2
 800d624:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d626:	e005      	b.n	800d634 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2210      	movs	r2, #16
 800d630:	655a      	str	r2, [r3, #84]	; 0x54
 800d632:	e000      	b.n	800d636 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800d634:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d636:	7ffb      	ldrb	r3, [r7, #31]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af02      	add	r7, sp, #8
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d64a:	f7fd f95d 	bl	800a908 <HAL_GetTick>
 800d64e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d654:	2b04      	cmp	r3, #4
 800d656:	d134      	bne.n	800d6c2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2200      	movs	r2, #0
 800d662:	2120      	movs	r1, #32
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f949 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d66a:	4603      	mov	r3, r0
 800d66c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d12b      	bne.n	800d6cc <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2288      	movs	r2, #136	; 0x88
 800d678:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b08      	cmp	r3, #8
 800d680:	d111      	bne.n	800d6a6 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	6852      	ldr	r2, [r2, #4]
 800d68a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2210      	movs	r2, #16
 800d694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d6a4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <HAL_OSPI_MemoryMapped+0x98>)
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	6812      	ldr	r2, [r2, #0]
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800d6be:	601a      	str	r2, [r3, #0]
 800d6c0:	e004      	b.n	800d6cc <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2210      	movs	r2, #16
 800d6ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	cffffff7 	.word	0xcffffff7

0800d6dc <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af02      	add	r7, sp, #8
 800d782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800d788:	f7fd f8be 	bl	800a908 <HAL_GetTick>
 800d78c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d792:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f003 0308 	and.w	r3, r3, #8
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d104      	bne.n	800d7a8 <HAL_OSPI_Abort+0x2c>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f003 0304 	and.w	r3, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d052      	beq.n	800d84e <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0304 	and.w	r3, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d014      	beq.n	800d7e0 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f022 0204 	bic.w	r2, r2, #4
 800d7c4:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fa66 	bl	800cc9c <HAL_MDMA_Abort>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800d7d4:	7dfb      	ldrb	r3, [r7, #23]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2204      	movs	r2, #4
 800d7de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d02b      	beq.n	800d846 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f042 0202 	orr.w	r2, r2, #2
 800d7fc:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	2201      	movs	r2, #1
 800d808:	2102      	movs	r1, #2
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f876 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d810:	4603      	mov	r3, r0
 800d812:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d814:	7dfb      	ldrb	r3, [r7, #23]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d11f      	bne.n	800d85a <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2202      	movs	r2, #2
 800d820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2200      	movs	r2, #0
 800d82c:	2120      	movs	r1, #32
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f864 	bl	800d8fc <OSPI_WaitFlagStateUntilTimeout>
 800d834:	4603      	mov	r3, r0
 800d836:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800d838:	7dfb      	ldrb	r3, [r7, #23]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10d      	bne.n	800d85a <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2202      	movs	r2, #2
 800d842:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d844:	e009      	b.n	800d85a <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2202      	movs	r2, #2
 800d84a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d84c:	e005      	b.n	800d85a <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2210      	movs	r2, #16
 800d856:	655a      	str	r2, [r3, #84]	; 0x54
 800d858:	e000      	b.n	800d85c <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d85a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d85c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d890:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8a0:	d122      	bne.n	800d8e8 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	f003 0320 	and.w	r3, r3, #32
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d014      	beq.n	800d8da <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2202      	movs	r2, #2
 800d8b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d8c6:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0202 	orr.w	r2, r2, #2
 800d8d6:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800d8d8:	e00c      	b.n	800d8f4 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2202      	movs	r2, #2
 800d8de:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f7ff ff05 	bl	800d6f0 <HAL_OSPI_AbortCpltCallback>
}
 800d8e6:	e005      	b.n	800d8f4 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fef4 	bl	800d6dc <HAL_OSPI_ErrorCallback>
}
 800d8f4:	bf00      	nop
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	4613      	mov	r3, r2
 800d90a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800d90c:	e01a      	b.n	800d944 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d914:	d016      	beq.n	800d944 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d916:	f7fc fff7 	bl	800a908 <HAL_GetTick>
 800d91a:	4602      	mov	r2, r0
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	429a      	cmp	r2, r3
 800d924:	d302      	bcc.n	800d92c <OSPI_WaitFlagStateUntilTimeout+0x30>
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10b      	bne.n	800d944 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d932:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d938:	f043 0201 	orr.w	r2, r3, #1
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e00e      	b.n	800d962 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6a1a      	ldr	r2, [r3, #32]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	4013      	ands	r3, r2
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bf14      	ite	ne
 800d952:	2301      	movne	r3, #1
 800d954:	2300      	moveq	r3, #0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	461a      	mov	r2, r3
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d1d6      	bne.n	800d90e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b089      	sub	sp, #36	; 0x24
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d988:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10a      	bne.n	800d9a8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	430a      	orrs	r2, r1
 800d9a6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d114      	bne.n	800d9da <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d9b8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d9c2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d9cc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	e02c      	b.n	800da34 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d114      	bne.n	800da0c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d9ea:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d9f4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9fe:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da08:	60fb      	str	r3, [r7, #12]
 800da0a:	e013      	b.n	800da34 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800da14:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800da1e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800da28:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800da32:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da3c:	431a      	orrs	r2, r3
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da46:	2b00      	cmp	r3, #0
 800da48:	d012      	beq.n	800da70 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da62:	4319      	orrs	r1, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da68:	430b      	orrs	r3, r1
 800da6a:	431a      	orrs	r2, r3
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f023 021f 	bic.w	r2, r3, #31
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da7c:	431a      	orrs	r2, r3
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da86:	2b00      	cmp	r3, #0
 800da88:	d009      	beq.n	800da9e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3a01      	subs	r2, #1
 800da9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 8095 	beq.w	800dbd2 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	69db      	ldr	r3, [r3, #28]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d053      	beq.n	800db58 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01e      	beq.n	800daf6 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	4b64      	ldr	r3, [pc, #400]	; (800dc50 <OSPI_ConfigCmd+0x2e4>)
 800dabe:	4013      	ands	r3, r2
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	68d1      	ldr	r1, [r2, #12]
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	6952      	ldr	r2, [r2, #20]
 800dac8:	4311      	orrs	r1, r2
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	6912      	ldr	r2, [r2, #16]
 800dace:	4311      	orrs	r1, r2
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	69d2      	ldr	r2, [r2, #28]
 800dad4:	4311      	orrs	r1, r2
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dada:	4311      	orrs	r1, r2
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	6a12      	ldr	r2, [r2, #32]
 800dae0:	4311      	orrs	r1, r2
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dae6:	4311      	orrs	r1, r2
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800daec:	430a      	orrs	r2, r1
 800daee:	431a      	orrs	r2, r3
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	e026      	b.n	800db44 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	4b56      	ldr	r3, [pc, #344]	; (800dc54 <OSPI_ConfigCmd+0x2e8>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	68d1      	ldr	r1, [r2, #12]
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	6952      	ldr	r2, [r2, #20]
 800db06:	4311      	orrs	r1, r2
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	6912      	ldr	r2, [r2, #16]
 800db0c:	4311      	orrs	r1, r2
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	69d2      	ldr	r2, [r2, #28]
 800db12:	4311      	orrs	r1, r2
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db18:	4311      	orrs	r1, r2
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	6a12      	ldr	r2, [r2, #32]
 800db1e:	430a      	orrs	r2, r1
 800db20:	431a      	orrs	r2, r3
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db2e:	d109      	bne.n	800db44 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800db34:	2b08      	cmp	r3, #8
 800db36:	d105      	bne.n	800db44 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689a      	ldr	r2, [r3, #8]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	6992      	ldr	r2, [r2, #24]
 800db54:	649a      	str	r2, [r3, #72]	; 0x48
 800db56:	e074      	b.n	800dc42 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d015      	beq.n	800db8c <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	4b3c      	ldr	r3, [pc, #240]	; (800dc58 <OSPI_ConfigCmd+0x2ec>)
 800db66:	4013      	ands	r3, r2
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	68d1      	ldr	r1, [r2, #12]
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	6952      	ldr	r2, [r2, #20]
 800db70:	4311      	orrs	r1, r2
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	6912      	ldr	r2, [r2, #16]
 800db76:	4311      	orrs	r1, r2
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db7c:	4311      	orrs	r1, r2
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db82:	430a      	orrs	r2, r1
 800db84:	431a      	orrs	r2, r3
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	e01d      	b.n	800dbc8 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	68d9      	ldr	r1, [r3, #12]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	695b      	ldr	r3, [r3, #20]
 800db9c:	4319      	orrs	r1, r3
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	430b      	orrs	r3, r1
 800dba4:	431a      	orrs	r2, r3
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbb2:	d109      	bne.n	800dbc8 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dbb8:	2b08      	cmp	r3, #8
 800dbba:	d105      	bne.n	800dbc8 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	689a      	ldr	r2, [r3, #8]
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	601a      	str	r2, [r3, #0]
 800dbd0:	e037      	b.n	800dc42 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	69db      	ldr	r3, [r3, #28]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d02e      	beq.n	800dc38 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d015      	beq.n	800dc0e <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	4b1d      	ldr	r3, [pc, #116]	; (800dc5c <OSPI_ConfigCmd+0x2f0>)
 800dbe8:	4013      	ands	r3, r2
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	69d1      	ldr	r1, [r2, #28]
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dbf2:	4311      	orrs	r1, r2
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	6a12      	ldr	r2, [r2, #32]
 800dbf8:	4311      	orrs	r1, r2
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dbfe:	4311      	orrs	r1, r2
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dc04:	430a      	orrs	r2, r1
 800dc06:	431a      	orrs	r2, r3
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	e00e      	b.n	800dc2c <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	69d9      	ldr	r1, [r3, #28]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1e:	4319      	orrs	r1, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	430b      	orrs	r3, r1
 800dc26:	431a      	orrs	r2, r3
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	6992      	ldr	r2, [r2, #24]
 800dc34:	649a      	str	r2, [r3, #72]	; 0x48
 800dc36:	e004      	b.n	800dc42 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2208      	movs	r2, #8
 800dc40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800dc42:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3724      	adds	r7, #36	; 0x24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	f0ffc0c0 	.word	0xf0ffc0c0
 800dc54:	ffffc0c0 	.word	0xffffc0c0
 800dc58:	f0ffffc0 	.word	0xf0ffffc0
 800dc5c:	f0ffc0ff 	.word	0xf0ffc0ff

0800dc60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800dc68:	4b29      	ldr	r3, [pc, #164]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f003 0307 	and.w	r3, r3, #7
 800dc70:	2b06      	cmp	r3, #6
 800dc72:	d00a      	beq.n	800dc8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800dc74:	4b26      	ldr	r3, [pc, #152]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d001      	beq.n	800dc86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e040      	b.n	800dd08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	e03e      	b.n	800dd08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dc8a:	4b21      	ldr	r3, [pc, #132]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800dc92:	491f      	ldr	r1, [pc, #124]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800dc9a:	f7fc fe35 	bl	800a908 <HAL_GetTick>
 800dc9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dca0:	e009      	b.n	800dcb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dca2:	f7fc fe31 	bl	800a908 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcb0:	d901      	bls.n	800dcb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e028      	b.n	800dd08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dcb6:	4b16      	ldr	r3, [pc, #88]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcc2:	d1ee      	bne.n	800dca2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b1e      	cmp	r3, #30
 800dcc8:	d008      	beq.n	800dcdc <HAL_PWREx_ConfigSupply+0x7c>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b2e      	cmp	r3, #46	; 0x2e
 800dcce:	d005      	beq.n	800dcdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b1d      	cmp	r3, #29
 800dcd4:	d002      	beq.n	800dcdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b2d      	cmp	r3, #45	; 0x2d
 800dcda:	d114      	bne.n	800dd06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800dcdc:	f7fc fe14 	bl	800a908 <HAL_GetTick>
 800dce0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800dce2:	e009      	b.n	800dcf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dce4:	f7fc fe10 	bl	800a908 <HAL_GetTick>
 800dce8:	4602      	mov	r2, r0
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcf2:	d901      	bls.n	800dcf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e007      	b.n	800dd08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800dcf8:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <HAL_PWREx_ConfigSupply+0xb0>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd04:	d1ee      	bne.n	800dce4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	58024800 	.word	0x58024800

0800dd14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08c      	sub	sp, #48	; 0x30
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d102      	bne.n	800dd28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f000 bc1f 	b.w	800e566 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0301 	and.w	r3, r3, #1
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 80b3 	beq.w	800de9c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd36:	4b95      	ldr	r3, [pc, #596]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd40:	4b92      	ldr	r3, [pc, #584]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	2b10      	cmp	r3, #16
 800dd4a:	d007      	beq.n	800dd5c <HAL_RCC_OscConfig+0x48>
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	2b18      	cmp	r3, #24
 800dd50:	d112      	bne.n	800dd78 <HAL_RCC_OscConfig+0x64>
 800dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd54:	f003 0303 	and.w	r3, r3, #3
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d10d      	bne.n	800dd78 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd5c:	4b8b      	ldr	r3, [pc, #556]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f000 8098 	beq.w	800de9a <HAL_RCC_OscConfig+0x186>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f040 8093 	bne.w	800de9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e3f6      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd80:	d106      	bne.n	800dd90 <HAL_RCC_OscConfig+0x7c>
 800dd82:	4b82      	ldr	r3, [pc, #520]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a81      	ldr	r2, [pc, #516]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	e058      	b.n	800de42 <HAL_RCC_OscConfig+0x12e>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d112      	bne.n	800ddbe <HAL_RCC_OscConfig+0xaa>
 800dd98:	4b7c      	ldr	r3, [pc, #496]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a7b      	ldr	r2, [pc, #492]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dd9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	4b79      	ldr	r3, [pc, #484]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a78      	ldr	r2, [pc, #480]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	4b76      	ldr	r3, [pc, #472]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a75      	ldr	r2, [pc, #468]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ddba:	6013      	str	r3, [r2, #0]
 800ddbc:	e041      	b.n	800de42 <HAL_RCC_OscConfig+0x12e>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ddc6:	d112      	bne.n	800ddee <HAL_RCC_OscConfig+0xda>
 800ddc8:	4b70      	ldr	r3, [pc, #448]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a6f      	ldr	r2, [pc, #444]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	4b6d      	ldr	r3, [pc, #436]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a6c      	ldr	r2, [pc, #432]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	4b6a      	ldr	r3, [pc, #424]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a69      	ldr	r2, [pc, #420]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800dde6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	e029      	b.n	800de42 <HAL_RCC_OscConfig+0x12e>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ddf6:	d112      	bne.n	800de1e <HAL_RCC_OscConfig+0x10a>
 800ddf8:	4b64      	ldr	r3, [pc, #400]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a63      	ldr	r2, [pc, #396]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ddfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	4b61      	ldr	r3, [pc, #388]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a60      	ldr	r2, [pc, #384]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	4b5e      	ldr	r3, [pc, #376]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a5d      	ldr	r2, [pc, #372]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	e011      	b.n	800de42 <HAL_RCC_OscConfig+0x12e>
 800de1e:	4b5b      	ldr	r3, [pc, #364]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a5a      	ldr	r2, [pc, #360]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	4b58      	ldr	r3, [pc, #352]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a57      	ldr	r2, [pc, #348]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	4b55      	ldr	r3, [pc, #340]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a54      	ldr	r2, [pc, #336]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d013      	beq.n	800de72 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de4a:	f7fc fd5d 	bl	800a908 <HAL_GetTick>
 800de4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de50:	e008      	b.n	800de64 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800de52:	f7fc fd59 	bl	800a908 <HAL_GetTick>
 800de56:	4602      	mov	r2, r0
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	2b64      	cmp	r3, #100	; 0x64
 800de5e:	d901      	bls.n	800de64 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e380      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de64:	4b49      	ldr	r3, [pc, #292]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0f0      	beq.n	800de52 <HAL_RCC_OscConfig+0x13e>
 800de70:	e014      	b.n	800de9c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de72:	f7fc fd49 	bl	800a908 <HAL_GetTick>
 800de76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800de78:	e008      	b.n	800de8c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800de7a:	f7fc fd45 	bl	800a908 <HAL_GetTick>
 800de7e:	4602      	mov	r2, r0
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	1ad3      	subs	r3, r2, r3
 800de84:	2b64      	cmp	r3, #100	; 0x64
 800de86:	d901      	bls.n	800de8c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800de88:	2303      	movs	r3, #3
 800de8a:	e36c      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800de8c:	4b3f      	ldr	r3, [pc, #252]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1f0      	bne.n	800de7a <HAL_RCC_OscConfig+0x166>
 800de98:	e000      	b.n	800de9c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 808c 	beq.w	800dfc2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800deaa:	4b38      	ldr	r3, [pc, #224]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800deb2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800deb4:	4b35      	ldr	r3, [pc, #212]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800deb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d007      	beq.n	800ded0 <HAL_RCC_OscConfig+0x1bc>
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	2b18      	cmp	r3, #24
 800dec4:	d137      	bne.n	800df36 <HAL_RCC_OscConfig+0x222>
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	f003 0303 	and.w	r3, r3, #3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d132      	bne.n	800df36 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ded0:	4b2e      	ldr	r3, [pc, #184]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 0304 	and.w	r3, r3, #4
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d005      	beq.n	800dee8 <HAL_RCC_OscConfig+0x1d4>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e33e      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dee8:	4b28      	ldr	r3, [pc, #160]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f023 0219 	bic.w	r2, r3, #25
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	4925      	ldr	r1, [pc, #148]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800def6:	4313      	orrs	r3, r2
 800def8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800defa:	f7fc fd05 	bl	800a908 <HAL_GetTick>
 800defe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df00:	e008      	b.n	800df14 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df02:	f7fc fd01 	bl	800a908 <HAL_GetTick>
 800df06:	4602      	mov	r2, r0
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d901      	bls.n	800df14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800df10:	2303      	movs	r3, #3
 800df12:	e328      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df14:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f003 0304 	and.w	r3, r3, #4
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d0f0      	beq.n	800df02 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df20:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	061b      	lsls	r3, r3, #24
 800df2e:	4917      	ldr	r1, [pc, #92]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df30:	4313      	orrs	r3, r2
 800df32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800df34:	e045      	b.n	800dfc2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d028      	beq.n	800df90 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800df3e:	4b13      	ldr	r3, [pc, #76]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f023 0219 	bic.w	r2, r3, #25
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	4910      	ldr	r1, [pc, #64]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df4c:	4313      	orrs	r3, r2
 800df4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df50:	f7fc fcda 	bl	800a908 <HAL_GetTick>
 800df54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df56:	e008      	b.n	800df6a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df58:	f7fc fcd6 	bl	800a908 <HAL_GetTick>
 800df5c:	4602      	mov	r2, r0
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	2b02      	cmp	r3, #2
 800df64:	d901      	bls.n	800df6a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800df66:	2303      	movs	r3, #3
 800df68:	e2fd      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df6a:	4b08      	ldr	r3, [pc, #32]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 0304 	and.w	r3, r3, #4
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0f0      	beq.n	800df58 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df76:	4b05      	ldr	r3, [pc, #20]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	061b      	lsls	r3, r3, #24
 800df84:	4901      	ldr	r1, [pc, #4]	; (800df8c <HAL_RCC_OscConfig+0x278>)
 800df86:	4313      	orrs	r3, r2
 800df88:	604b      	str	r3, [r1, #4]
 800df8a:	e01a      	b.n	800dfc2 <HAL_RCC_OscConfig+0x2ae>
 800df8c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800df90:	4b97      	ldr	r3, [pc, #604]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a96      	ldr	r2, [pc, #600]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800df96:	f023 0301 	bic.w	r3, r3, #1
 800df9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df9c:	f7fc fcb4 	bl	800a908 <HAL_GetTick>
 800dfa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dfa2:	e008      	b.n	800dfb6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dfa4:	f7fc fcb0 	bl	800a908 <HAL_GetTick>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d901      	bls.n	800dfb6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e2d7      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dfb6:	4b8e      	ldr	r3, [pc, #568]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 0304 	and.w	r3, r3, #4
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f0      	bne.n	800dfa4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f003 0310 	and.w	r3, r3, #16
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d06a      	beq.n	800e0a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfce:	4b88      	ldr	r3, [pc, #544]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfd8:	4b85      	ldr	r3, [pc, #532]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	2b08      	cmp	r3, #8
 800dfe2:	d007      	beq.n	800dff4 <HAL_RCC_OscConfig+0x2e0>
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	2b18      	cmp	r3, #24
 800dfe8:	d11b      	bne.n	800e022 <HAL_RCC_OscConfig+0x30e>
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f003 0303 	and.w	r3, r3, #3
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d116      	bne.n	800e022 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dff4:	4b7e      	ldr	r3, [pc, #504]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <HAL_RCC_OscConfig+0x2f8>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	69db      	ldr	r3, [r3, #28]
 800e004:	2b80      	cmp	r3, #128	; 0x80
 800e006:	d001      	beq.n	800e00c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e2ac      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e00c:	4b78      	ldr	r3, [pc, #480]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	061b      	lsls	r3, r3, #24
 800e01a:	4975      	ldr	r1, [pc, #468]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e01c:	4313      	orrs	r3, r2
 800e01e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e020:	e040      	b.n	800e0a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d023      	beq.n	800e072 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e02a:	4b71      	ldr	r3, [pc, #452]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a70      	ldr	r2, [pc, #448]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e036:	f7fc fc67 	bl	800a908 <HAL_GetTick>
 800e03a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e03c:	e008      	b.n	800e050 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e03e:	f7fc fc63 	bl	800a908 <HAL_GetTick>
 800e042:	4602      	mov	r2, r0
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	2b02      	cmp	r3, #2
 800e04a:	d901      	bls.n	800e050 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e28a      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e050:	4b67      	ldr	r3, [pc, #412]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d0f0      	beq.n	800e03e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e05c:	4b64      	ldr	r3, [pc, #400]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a1b      	ldr	r3, [r3, #32]
 800e068:	061b      	lsls	r3, r3, #24
 800e06a:	4961      	ldr	r1, [pc, #388]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e06c:	4313      	orrs	r3, r2
 800e06e:	60cb      	str	r3, [r1, #12]
 800e070:	e018      	b.n	800e0a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e072:	4b5f      	ldr	r3, [pc, #380]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a5e      	ldr	r2, [pc, #376]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e07c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e07e:	f7fc fc43 	bl	800a908 <HAL_GetTick>
 800e082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e084:	e008      	b.n	800e098 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e086:	f7fc fc3f 	bl	800a908 <HAL_GetTick>
 800e08a:	4602      	mov	r2, r0
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	2b02      	cmp	r3, #2
 800e092:	d901      	bls.n	800e098 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800e094:	2303      	movs	r3, #3
 800e096:	e266      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e098:	4b55      	ldr	r3, [pc, #340]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1f0      	bne.n	800e086 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0308 	and.w	r3, r3, #8
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d036      	beq.n	800e11e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d019      	beq.n	800e0ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e0b8:	4b4d      	ldr	r3, [pc, #308]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0bc:	4a4c      	ldr	r2, [pc, #304]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e0be:	f043 0301 	orr.w	r3, r3, #1
 800e0c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0c4:	f7fc fc20 	bl	800a908 <HAL_GetTick>
 800e0c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e0ca:	e008      	b.n	800e0de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e0cc:	f7fc fc1c 	bl	800a908 <HAL_GetTick>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d901      	bls.n	800e0de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	e243      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e0de:	4b44      	ldr	r3, [pc, #272]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e2:	f003 0302 	and.w	r3, r3, #2
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0f0      	beq.n	800e0cc <HAL_RCC_OscConfig+0x3b8>
 800e0ea:	e018      	b.n	800e11e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e0ec:	4b40      	ldr	r3, [pc, #256]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f0:	4a3f      	ldr	r2, [pc, #252]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e0f2:	f023 0301 	bic.w	r3, r3, #1
 800e0f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0f8:	f7fc fc06 	bl	800a908 <HAL_GetTick>
 800e0fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e0fe:	e008      	b.n	800e112 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e100:	f7fc fc02 	bl	800a908 <HAL_GetTick>
 800e104:	4602      	mov	r2, r0
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d901      	bls.n	800e112 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e229      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e112:	4b37      	ldr	r3, [pc, #220]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1f0      	bne.n	800e100 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f003 0320 	and.w	r3, r3, #32
 800e126:	2b00      	cmp	r3, #0
 800e128:	d036      	beq.n	800e198 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d019      	beq.n	800e166 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e132:	4b2f      	ldr	r3, [pc, #188]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a2e      	ldr	r2, [pc, #184]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e13c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e13e:	f7fc fbe3 	bl	800a908 <HAL_GetTick>
 800e142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e144:	e008      	b.n	800e158 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e146:	f7fc fbdf 	bl	800a908 <HAL_GetTick>
 800e14a:	4602      	mov	r2, r0
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	2b02      	cmp	r3, #2
 800e152:	d901      	bls.n	800e158 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800e154:	2303      	movs	r3, #3
 800e156:	e206      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e158:	4b25      	ldr	r3, [pc, #148]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0f0      	beq.n	800e146 <HAL_RCC_OscConfig+0x432>
 800e164:	e018      	b.n	800e198 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e166:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a21      	ldr	r2, [pc, #132]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e172:	f7fc fbc9 	bl	800a908 <HAL_GetTick>
 800e176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e178:	e008      	b.n	800e18c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e17a:	f7fc fbc5 	bl	800a908 <HAL_GetTick>
 800e17e:	4602      	mov	r2, r0
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	2b02      	cmp	r3, #2
 800e186:	d901      	bls.n	800e18c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800e188:	2303      	movs	r3, #3
 800e18a:	e1ec      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e18c:	4b18      	ldr	r3, [pc, #96]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f0      	bne.n	800e17a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f003 0304 	and.w	r3, r3, #4
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f000 80af 	beq.w	800e304 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e1a6:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <HAL_RCC_OscConfig+0x4e0>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a12      	ldr	r2, [pc, #72]	; (800e1f4 <HAL_RCC_OscConfig+0x4e0>)
 800e1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e1b2:	f7fc fba9 	bl	800a908 <HAL_GetTick>
 800e1b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e1b8:	e008      	b.n	800e1cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1ba:	f7fc fba5 	bl	800a908 <HAL_GetTick>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	2b64      	cmp	r3, #100	; 0x64
 800e1c6:	d901      	bls.n	800e1cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e1cc      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e1cc:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <HAL_RCC_OscConfig+0x4e0>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0f0      	beq.n	800e1ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d10b      	bne.n	800e1f8 <HAL_RCC_OscConfig+0x4e4>
 800e1e0:	4b03      	ldr	r3, [pc, #12]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e4:	4a02      	ldr	r2, [pc, #8]	; (800e1f0 <HAL_RCC_OscConfig+0x4dc>)
 800e1e6:	f043 0301 	orr.w	r3, r3, #1
 800e1ea:	6713      	str	r3, [r2, #112]	; 0x70
 800e1ec:	e05b      	b.n	800e2a6 <HAL_RCC_OscConfig+0x592>
 800e1ee:	bf00      	nop
 800e1f0:	58024400 	.word	0x58024400
 800e1f4:	58024800 	.word	0x58024800
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d112      	bne.n	800e226 <HAL_RCC_OscConfig+0x512>
 800e200:	4b9d      	ldr	r3, [pc, #628]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e204:	4a9c      	ldr	r2, [pc, #624]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e206:	f023 0301 	bic.w	r3, r3, #1
 800e20a:	6713      	str	r3, [r2, #112]	; 0x70
 800e20c:	4b9a      	ldr	r3, [pc, #616]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e210:	4a99      	ldr	r2, [pc, #612]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e216:	6713      	str	r3, [r2, #112]	; 0x70
 800e218:	4b97      	ldr	r3, [pc, #604]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e21c:	4a96      	ldr	r2, [pc, #600]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e21e:	f023 0304 	bic.w	r3, r3, #4
 800e222:	6713      	str	r3, [r2, #112]	; 0x70
 800e224:	e03f      	b.n	800e2a6 <HAL_RCC_OscConfig+0x592>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	2b05      	cmp	r3, #5
 800e22c:	d112      	bne.n	800e254 <HAL_RCC_OscConfig+0x540>
 800e22e:	4b92      	ldr	r3, [pc, #584]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e232:	4a91      	ldr	r2, [pc, #580]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e234:	f043 0304 	orr.w	r3, r3, #4
 800e238:	6713      	str	r3, [r2, #112]	; 0x70
 800e23a:	4b8f      	ldr	r3, [pc, #572]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23e:	4a8e      	ldr	r2, [pc, #568]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e244:	6713      	str	r3, [r2, #112]	; 0x70
 800e246:	4b8c      	ldr	r3, [pc, #560]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e24a:	4a8b      	ldr	r2, [pc, #556]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e24c:	f043 0301 	orr.w	r3, r3, #1
 800e250:	6713      	str	r3, [r2, #112]	; 0x70
 800e252:	e028      	b.n	800e2a6 <HAL_RCC_OscConfig+0x592>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	2b85      	cmp	r3, #133	; 0x85
 800e25a:	d112      	bne.n	800e282 <HAL_RCC_OscConfig+0x56e>
 800e25c:	4b86      	ldr	r3, [pc, #536]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e260:	4a85      	ldr	r2, [pc, #532]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e262:	f043 0304 	orr.w	r3, r3, #4
 800e266:	6713      	str	r3, [r2, #112]	; 0x70
 800e268:	4b83      	ldr	r3, [pc, #524]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e26c:	4a82      	ldr	r2, [pc, #520]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e272:	6713      	str	r3, [r2, #112]	; 0x70
 800e274:	4b80      	ldr	r3, [pc, #512]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e278:	4a7f      	ldr	r2, [pc, #508]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e27a:	f043 0301 	orr.w	r3, r3, #1
 800e27e:	6713      	str	r3, [r2, #112]	; 0x70
 800e280:	e011      	b.n	800e2a6 <HAL_RCC_OscConfig+0x592>
 800e282:	4b7d      	ldr	r3, [pc, #500]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e286:	4a7c      	ldr	r2, [pc, #496]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e288:	f023 0301 	bic.w	r3, r3, #1
 800e28c:	6713      	str	r3, [r2, #112]	; 0x70
 800e28e:	4b7a      	ldr	r3, [pc, #488]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e292:	4a79      	ldr	r2, [pc, #484]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e294:	f023 0304 	bic.w	r3, r3, #4
 800e298:	6713      	str	r3, [r2, #112]	; 0x70
 800e29a:	4b77      	ldr	r3, [pc, #476]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29e:	4a76      	ldr	r2, [pc, #472]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e2a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d015      	beq.n	800e2da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2ae:	f7fc fb2b 	bl	800a908 <HAL_GetTick>
 800e2b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2b4:	e00a      	b.n	800e2cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2b6:	f7fc fb27 	bl	800a908 <HAL_GetTick>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d901      	bls.n	800e2cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e14c      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2cc:	4b6a      	ldr	r3, [pc, #424]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d0:	f003 0302 	and.w	r3, r3, #2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d0ee      	beq.n	800e2b6 <HAL_RCC_OscConfig+0x5a2>
 800e2d8:	e014      	b.n	800e304 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2da:	f7fc fb15 	bl	800a908 <HAL_GetTick>
 800e2de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e2e0:	e00a      	b.n	800e2f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2e2:	f7fc fb11 	bl	800a908 <HAL_GetTick>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d901      	bls.n	800e2f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e136      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e2f8:	4b5f      	ldr	r3, [pc, #380]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2fc:	f003 0302 	and.w	r3, r3, #2
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1ee      	bne.n	800e2e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 812b 	beq.w	800e564 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e30e:	4b5a      	ldr	r3, [pc, #360]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e316:	2b18      	cmp	r3, #24
 800e318:	f000 80bb 	beq.w	800e492 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	2b02      	cmp	r3, #2
 800e322:	f040 8095 	bne.w	800e450 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e326:	4b54      	ldr	r3, [pc, #336]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a53      	ldr	r2, [pc, #332]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e32c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e332:	f7fc fae9 	bl	800a908 <HAL_GetTick>
 800e336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e338:	e008      	b.n	800e34c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e33a:	f7fc fae5 	bl	800a908 <HAL_GetTick>
 800e33e:	4602      	mov	r2, r0
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	2b02      	cmp	r3, #2
 800e346:	d901      	bls.n	800e34c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800e348:	2303      	movs	r3, #3
 800e34a:	e10c      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e34c:	4b4a      	ldr	r3, [pc, #296]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1f0      	bne.n	800e33a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e358:	4b47      	ldr	r3, [pc, #284]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e35a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e35c:	4b47      	ldr	r3, [pc, #284]	; (800e47c <HAL_RCC_OscConfig+0x768>)
 800e35e:	4013      	ands	r3, r2
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e368:	0112      	lsls	r2, r2, #4
 800e36a:	430a      	orrs	r2, r1
 800e36c:	4942      	ldr	r1, [pc, #264]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e36e:	4313      	orrs	r3, r2
 800e370:	628b      	str	r3, [r1, #40]	; 0x28
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e376:	3b01      	subs	r3, #1
 800e378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e380:	3b01      	subs	r3, #1
 800e382:	025b      	lsls	r3, r3, #9
 800e384:	b29b      	uxth	r3, r3
 800e386:	431a      	orrs	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38c:	3b01      	subs	r3, #1
 800e38e:	041b      	lsls	r3, r3, #16
 800e390:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e394:	431a      	orrs	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e39a:	3b01      	subs	r3, #1
 800e39c:	061b      	lsls	r3, r3, #24
 800e39e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e3a2:	4935      	ldr	r1, [pc, #212]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e3a8:	4b33      	ldr	r3, [pc, #204]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ac:	4a32      	ldr	r2, [pc, #200]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3ae:	f023 0301 	bic.w	r3, r3, #1
 800e3b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e3b4:	4b30      	ldr	r3, [pc, #192]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3b8:	4b31      	ldr	r3, [pc, #196]	; (800e480 <HAL_RCC_OscConfig+0x76c>)
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e3c0:	00d2      	lsls	r2, r2, #3
 800e3c2:	492d      	ldr	r1, [pc, #180]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e3c8:	4b2b      	ldr	r3, [pc, #172]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	f023 020c 	bic.w	r2, r3, #12
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d4:	4928      	ldr	r1, [pc, #160]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e3da:	4b27      	ldr	r3, [pc, #156]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3de:	f023 0202 	bic.w	r2, r3, #2
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e6:	4924      	ldr	r1, [pc, #144]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e3ec:	4b22      	ldr	r3, [pc, #136]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f0:	4a21      	ldr	r2, [pc, #132]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3f8:	4b1f      	ldr	r3, [pc, #124]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fc:	4a1e      	ldr	r2, [pc, #120]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e404:	4b1c      	ldr	r3, [pc, #112]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e408:	4a1b      	ldr	r2, [pc, #108]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e40a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e40e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e410:	4b19      	ldr	r3, [pc, #100]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e414:	4a18      	ldr	r2, [pc, #96]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e416:	f043 0301 	orr.w	r3, r3, #1
 800e41a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e41c:	4b16      	ldr	r3, [pc, #88]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a15      	ldr	r2, [pc, #84]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e428:	f7fc fa6e 	bl	800a908 <HAL_GetTick>
 800e42c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e42e:	e008      	b.n	800e442 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e430:	f7fc fa6a 	bl	800a908 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d901      	bls.n	800e442 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e091      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e442:	4b0d      	ldr	r3, [pc, #52]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d0f0      	beq.n	800e430 <HAL_RCC_OscConfig+0x71c>
 800e44e:	e089      	b.n	800e564 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e450:	4b09      	ldr	r3, [pc, #36]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a08      	ldr	r2, [pc, #32]	; (800e478 <HAL_RCC_OscConfig+0x764>)
 800e456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e45a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e45c:	f7fc fa54 	bl	800a908 <HAL_GetTick>
 800e460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e462:	e00f      	b.n	800e484 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e464:	f7fc fa50 	bl	800a908 <HAL_GetTick>
 800e468:	4602      	mov	r2, r0
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d908      	bls.n	800e484 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800e472:	2303      	movs	r3, #3
 800e474:	e077      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
 800e476:	bf00      	nop
 800e478:	58024400 	.word	0x58024400
 800e47c:	fffffc0c 	.word	0xfffffc0c
 800e480:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e484:	4b3a      	ldr	r3, [pc, #232]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e9      	bne.n	800e464 <HAL_RCC_OscConfig+0x750>
 800e490:	e068      	b.n	800e564 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e492:	4b37      	ldr	r3, [pc, #220]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e496:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e498:	4b35      	ldr	r3, [pc, #212]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d031      	beq.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	f003 0203 	and.w	r2, r3, #3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d12a      	bne.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	091b      	lsrs	r3, r3, #4
 800e4b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d122      	bne.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d11a      	bne.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	0a5b      	lsrs	r3, r3, #9
 800e4d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d111      	bne.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	0c1b      	lsrs	r3, r3, #16
 800e4ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d108      	bne.n	800e50a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	0e1b      	lsrs	r3, r3, #24
 800e4fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e506:	429a      	cmp	r2, r3
 800e508:	d001      	beq.n	800e50e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e02b      	b.n	800e566 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e50e:	4b18      	ldr	r3, [pc, #96]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e512:	08db      	lsrs	r3, r3, #3
 800e514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e518:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	429a      	cmp	r2, r3
 800e522:	d01f      	beq.n	800e564 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e524:	4b12      	ldr	r3, [pc, #72]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	4a11      	ldr	r2, [pc, #68]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e52a:	f023 0301 	bic.w	r3, r3, #1
 800e52e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e530:	f7fc f9ea 	bl	800a908 <HAL_GetTick>
 800e534:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e536:	bf00      	nop
 800e538:	f7fc f9e6 	bl	800a908 <HAL_GetTick>
 800e53c:	4602      	mov	r2, r0
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	4293      	cmp	r3, r2
 800e542:	d0f9      	beq.n	800e538 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e544:	4b0a      	ldr	r3, [pc, #40]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e548:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <HAL_RCC_OscConfig+0x860>)
 800e54a:	4013      	ands	r3, r2
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e550:	00d2      	lsls	r2, r2, #3
 800e552:	4907      	ldr	r1, [pc, #28]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e554:	4313      	orrs	r3, r2
 800e556:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55c:	4a04      	ldr	r2, [pc, #16]	; (800e570 <HAL_RCC_OscConfig+0x85c>)
 800e55e:	f043 0301 	orr.w	r3, r3, #1
 800e562:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3730      	adds	r7, #48	; 0x30
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	58024400 	.word	0x58024400
 800e574:	ffff0007 	.word	0xffff0007

0800e578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e19c      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e58c:	4b8a      	ldr	r3, [pc, #552]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f003 030f 	and.w	r3, r3, #15
 800e594:	683a      	ldr	r2, [r7, #0]
 800e596:	429a      	cmp	r2, r3
 800e598:	d910      	bls.n	800e5bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e59a:	4b87      	ldr	r3, [pc, #540]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f023 020f 	bic.w	r2, r3, #15
 800e5a2:	4985      	ldr	r1, [pc, #532]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5aa:	4b83      	ldr	r3, [pc, #524]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f003 030f 	and.w	r3, r3, #15
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d001      	beq.n	800e5bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e184      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0304 	and.w	r3, r3, #4
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d010      	beq.n	800e5ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	691a      	ldr	r2, [r3, #16]
 800e5cc:	4b7b      	ldr	r3, [pc, #492]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d908      	bls.n	800e5ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e5d8:	4b78      	ldr	r3, [pc, #480]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	4975      	ldr	r1, [pc, #468]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 0308 	and.w	r3, r3, #8
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d010      	beq.n	800e618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	695a      	ldr	r2, [r3, #20]
 800e5fa:	4b70      	ldr	r3, [pc, #448]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e5fc:	69db      	ldr	r3, [r3, #28]
 800e5fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e602:	429a      	cmp	r2, r3
 800e604:	d908      	bls.n	800e618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e606:	4b6d      	ldr	r3, [pc, #436]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e608:	69db      	ldr	r3, [r3, #28]
 800e60a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	695b      	ldr	r3, [r3, #20]
 800e612:	496a      	ldr	r1, [pc, #424]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e614:	4313      	orrs	r3, r2
 800e616:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f003 0310 	and.w	r3, r3, #16
 800e620:	2b00      	cmp	r3, #0
 800e622:	d010      	beq.n	800e646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	699a      	ldr	r2, [r3, #24]
 800e628:	4b64      	ldr	r3, [pc, #400]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e62a:	69db      	ldr	r3, [r3, #28]
 800e62c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e630:	429a      	cmp	r2, r3
 800e632:	d908      	bls.n	800e646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e634:	4b61      	ldr	r3, [pc, #388]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e636:	69db      	ldr	r3, [r3, #28]
 800e638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	495e      	ldr	r1, [pc, #376]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e642:	4313      	orrs	r3, r2
 800e644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f003 0320 	and.w	r3, r3, #32
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d010      	beq.n	800e674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	69da      	ldr	r2, [r3, #28]
 800e656:	4b59      	ldr	r3, [pc, #356]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e65e:	429a      	cmp	r2, r3
 800e660:	d908      	bls.n	800e674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e662:	4b56      	ldr	r3, [pc, #344]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	4953      	ldr	r1, [pc, #332]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e670:	4313      	orrs	r3, r2
 800e672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d010      	beq.n	800e6a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	4b4d      	ldr	r3, [pc, #308]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	f003 030f 	and.w	r3, r3, #15
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d908      	bls.n	800e6a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e690:	4b4a      	ldr	r3, [pc, #296]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	f023 020f 	bic.w	r2, r3, #15
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	4947      	ldr	r1, [pc, #284]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d055      	beq.n	800e75a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e6ae:	4b43      	ldr	r3, [pc, #268]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	4940      	ldr	r1, [pc, #256]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d107      	bne.n	800e6d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e6c8:	4b3c      	ldr	r3, [pc, #240]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d121      	bne.n	800e718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e0f6      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	d107      	bne.n	800e6f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e6e0:	4b36      	ldr	r3, [pc, #216]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d115      	bne.n	800e718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e0ea      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d107      	bne.n	800e708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e6f8:	4b30      	ldr	r3, [pc, #192]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e700:	2b00      	cmp	r3, #0
 800e702:	d109      	bne.n	800e718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e704:	2301      	movs	r3, #1
 800e706:	e0de      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e708:	4b2c      	ldr	r3, [pc, #176]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e0d6      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e718:	4b28      	ldr	r3, [pc, #160]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	f023 0207 	bic.w	r2, r3, #7
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	4925      	ldr	r1, [pc, #148]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e726:	4313      	orrs	r3, r2
 800e728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e72a:	f7fc f8ed 	bl	800a908 <HAL_GetTick>
 800e72e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e730:	e00a      	b.n	800e748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e732:	f7fc f8e9 	bl	800a908 <HAL_GetTick>
 800e736:	4602      	mov	r2, r0
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e740:	4293      	cmp	r3, r2
 800e742:	d901      	bls.n	800e748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e744:	2303      	movs	r3, #3
 800e746:	e0be      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e748:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	00db      	lsls	r3, r3, #3
 800e756:	429a      	cmp	r2, r3
 800e758:	d1eb      	bne.n	800e732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f003 0302 	and.w	r3, r3, #2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d010      	beq.n	800e788 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68da      	ldr	r2, [r3, #12]
 800e76a:	4b14      	ldr	r3, [pc, #80]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	f003 030f 	and.w	r3, r3, #15
 800e772:	429a      	cmp	r2, r3
 800e774:	d208      	bcs.n	800e788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e776:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	f023 020f 	bic.w	r2, r3, #15
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	490e      	ldr	r1, [pc, #56]	; (800e7bc <HAL_RCC_ClockConfig+0x244>)
 800e784:	4313      	orrs	r3, r2
 800e786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e788:	4b0b      	ldr	r3, [pc, #44]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 030f 	and.w	r3, r3, #15
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	429a      	cmp	r2, r3
 800e794:	d214      	bcs.n	800e7c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e796:	4b08      	ldr	r3, [pc, #32]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f023 020f 	bic.w	r2, r3, #15
 800e79e:	4906      	ldr	r1, [pc, #24]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7a6:	4b04      	ldr	r3, [pc, #16]	; (800e7b8 <HAL_RCC_ClockConfig+0x240>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 030f 	and.w	r3, r3, #15
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d005      	beq.n	800e7c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e086      	b.n	800e8c6 <HAL_RCC_ClockConfig+0x34e>
 800e7b8:	52002000 	.word	0x52002000
 800e7bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f003 0304 	and.w	r3, r3, #4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d010      	beq.n	800e7ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	691a      	ldr	r2, [r3, #16]
 800e7d0:	4b3f      	ldr	r3, [pc, #252]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d208      	bcs.n	800e7ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e7dc:	4b3c      	ldr	r3, [pc, #240]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	4939      	ldr	r1, [pc, #228]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f003 0308 	and.w	r3, r3, #8
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d010      	beq.n	800e81c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695a      	ldr	r2, [r3, #20]
 800e7fe:	4b34      	ldr	r3, [pc, #208]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e800:	69db      	ldr	r3, [r3, #28]
 800e802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e806:	429a      	cmp	r2, r3
 800e808:	d208      	bcs.n	800e81c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e80a:	4b31      	ldr	r3, [pc, #196]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	492e      	ldr	r1, [pc, #184]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f003 0310 	and.w	r3, r3, #16
 800e824:	2b00      	cmp	r3, #0
 800e826:	d010      	beq.n	800e84a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	699a      	ldr	r2, [r3, #24]
 800e82c:	4b28      	ldr	r3, [pc, #160]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e834:	429a      	cmp	r2, r3
 800e836:	d208      	bcs.n	800e84a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e838:	4b25      	ldr	r3, [pc, #148]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e83a:	69db      	ldr	r3, [r3, #28]
 800e83c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	4922      	ldr	r1, [pc, #136]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e846:	4313      	orrs	r3, r2
 800e848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0320 	and.w	r3, r3, #32
 800e852:	2b00      	cmp	r3, #0
 800e854:	d010      	beq.n	800e878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	69da      	ldr	r2, [r3, #28]
 800e85a:	4b1d      	ldr	r3, [pc, #116]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e85c:	6a1b      	ldr	r3, [r3, #32]
 800e85e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e862:	429a      	cmp	r2, r3
 800e864:	d208      	bcs.n	800e878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e866:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e868:	6a1b      	ldr	r3, [r3, #32]
 800e86a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	4917      	ldr	r1, [pc, #92]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e874:	4313      	orrs	r3, r2
 800e876:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800e878:	f000 f834 	bl	800e8e4 <HAL_RCC_GetSysClockFreq>
 800e87c:	4602      	mov	r2, r0
 800e87e:	4b14      	ldr	r3, [pc, #80]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	0a1b      	lsrs	r3, r3, #8
 800e884:	f003 030f 	and.w	r3, r3, #15
 800e888:	4912      	ldr	r1, [pc, #72]	; (800e8d4 <HAL_RCC_ClockConfig+0x35c>)
 800e88a:	5ccb      	ldrb	r3, [r1, r3]
 800e88c:	f003 031f 	and.w	r3, r3, #31
 800e890:	fa22 f303 	lsr.w	r3, r2, r3
 800e894:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800e896:	4b0e      	ldr	r3, [pc, #56]	; (800e8d0 <HAL_RCC_ClockConfig+0x358>)
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	f003 030f 	and.w	r3, r3, #15
 800e89e:	4a0d      	ldr	r2, [pc, #52]	; (800e8d4 <HAL_RCC_ClockConfig+0x35c>)
 800e8a0:	5cd3      	ldrb	r3, [r2, r3]
 800e8a2:	f003 031f 	and.w	r3, r3, #31
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e8ac:	4a0a      	ldr	r2, [pc, #40]	; (800e8d8 <HAL_RCC_ClockConfig+0x360>)
 800e8ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e8b0:	4a0a      	ldr	r2, [pc, #40]	; (800e8dc <HAL_RCC_ClockConfig+0x364>)
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e8b6:	4b0a      	ldr	r3, [pc, #40]	; (800e8e0 <HAL_RCC_ClockConfig+0x368>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f2 fe8e 	bl	80015dc <HAL_InitTick>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	58024400 	.word	0x58024400
 800e8d4:	08027c3c 	.word	0x08027c3c
 800e8d8:	24000040 	.word	0x24000040
 800e8dc:	2400003c 	.word	0x2400003c
 800e8e0:	24000044 	.word	0x24000044

0800e8e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b089      	sub	sp, #36	; 0x24
 800e8e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e8ea:	4bb3      	ldr	r3, [pc, #716]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8f2:	2b18      	cmp	r3, #24
 800e8f4:	f200 8155 	bhi.w	800eba2 <HAL_RCC_GetSysClockFreq+0x2be>
 800e8f8:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fe:	bf00      	nop
 800e900:	0800e965 	.word	0x0800e965
 800e904:	0800eba3 	.word	0x0800eba3
 800e908:	0800eba3 	.word	0x0800eba3
 800e90c:	0800eba3 	.word	0x0800eba3
 800e910:	0800eba3 	.word	0x0800eba3
 800e914:	0800eba3 	.word	0x0800eba3
 800e918:	0800eba3 	.word	0x0800eba3
 800e91c:	0800eba3 	.word	0x0800eba3
 800e920:	0800e98b 	.word	0x0800e98b
 800e924:	0800eba3 	.word	0x0800eba3
 800e928:	0800eba3 	.word	0x0800eba3
 800e92c:	0800eba3 	.word	0x0800eba3
 800e930:	0800eba3 	.word	0x0800eba3
 800e934:	0800eba3 	.word	0x0800eba3
 800e938:	0800eba3 	.word	0x0800eba3
 800e93c:	0800eba3 	.word	0x0800eba3
 800e940:	0800e991 	.word	0x0800e991
 800e944:	0800eba3 	.word	0x0800eba3
 800e948:	0800eba3 	.word	0x0800eba3
 800e94c:	0800eba3 	.word	0x0800eba3
 800e950:	0800eba3 	.word	0x0800eba3
 800e954:	0800eba3 	.word	0x0800eba3
 800e958:	0800eba3 	.word	0x0800eba3
 800e95c:	0800eba3 	.word	0x0800eba3
 800e960:	0800e997 	.word	0x0800e997
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e964:	4b94      	ldr	r3, [pc, #592]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f003 0320 	and.w	r3, r3, #32
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d009      	beq.n	800e984 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e970:	4b91      	ldr	r3, [pc, #580]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	08db      	lsrs	r3, r3, #3
 800e976:	f003 0303 	and.w	r3, r3, #3
 800e97a:	4a90      	ldr	r2, [pc, #576]	; (800ebbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e97c:	fa22 f303 	lsr.w	r3, r2, r3
 800e980:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e982:	e111      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e984:	4b8d      	ldr	r3, [pc, #564]	; (800ebbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e986:	61bb      	str	r3, [r7, #24]
      break;
 800e988:	e10e      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e98a:	4b8d      	ldr	r3, [pc, #564]	; (800ebc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e98c:	61bb      	str	r3, [r7, #24]
      break;
 800e98e:	e10b      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e990:	4b8c      	ldr	r3, [pc, #560]	; (800ebc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e992:	61bb      	str	r3, [r7, #24]
      break;
 800e994:	e108      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e996:	4b88      	ldr	r3, [pc, #544]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e9a0:	4b85      	ldr	r3, [pc, #532]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a4:	091b      	lsrs	r3, r3, #4
 800e9a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e9ac:	4b82      	ldr	r3, [pc, #520]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e9b6:	4b80      	ldr	r3, [pc, #512]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ba:	08db      	lsrs	r3, r3, #3
 800e9bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	fb02 f303 	mul.w	r3, r2, r3
 800e9c6:	ee07 3a90 	vmov	s15, r3
 800e9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 80e1 	beq.w	800eb9c <HAL_RCC_GetSysClockFreq+0x2b8>
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	f000 8083 	beq.w	800eae8 <HAL_RCC_GetSysClockFreq+0x204>
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	f200 80a1 	bhi.w	800eb2c <HAL_RCC_GetSysClockFreq+0x248>
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d003      	beq.n	800e9f8 <HAL_RCC_GetSysClockFreq+0x114>
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d056      	beq.n	800eaa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e9f6:	e099      	b.n	800eb2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9f8:	4b6f      	ldr	r3, [pc, #444]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d02d      	beq.n	800ea60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea04:	4b6c      	ldr	r3, [pc, #432]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	08db      	lsrs	r3, r3, #3
 800ea0a:	f003 0303 	and.w	r3, r3, #3
 800ea0e:	4a6b      	ldr	r2, [pc, #428]	; (800ebbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ea10:	fa22 f303 	lsr.w	r3, r2, r3
 800ea14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	ee07 3a90 	vmov	s15, r3
 800ea1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	ee07 3a90 	vmov	s15, r3
 800ea26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea2e:	4b62      	ldr	r3, [pc, #392]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea36:	ee07 3a90 	vmov	s15, r3
 800ea3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea42:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ebc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ea46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ea5e:	e087      	b.n	800eb70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	ee07 3a90 	vmov	s15, r3
 800ea66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ebcc <HAL_RCC_GetSysClockFreq+0x2e8>
 800ea6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea72:	4b51      	ldr	r3, [pc, #324]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea7a:	ee07 3a90 	vmov	s15, r3
 800ea7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea86:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ebc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ea8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800eaa2:	e065      	b.n	800eb70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	ee07 3a90 	vmov	s15, r3
 800eaaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ebd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800eab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eab6:	4b40      	ldr	r3, [pc, #256]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eabe:	ee07 3a90 	vmov	s15, r3
 800eac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eac6:	ed97 6a02 	vldr	s12, [r7, #8]
 800eaca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ebc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ead2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ead6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800eae6:	e043      	b.n	800eb70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	ee07 3a90 	vmov	s15, r3
 800eaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ebd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800eaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eafa:	4b2f      	ldr	r3, [pc, #188]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb02:	ee07 3a90 	vmov	s15, r3
 800eb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ebc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800eb2a:	e021      	b.n	800eb70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	ee07 3a90 	vmov	s15, r3
 800eb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb36:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ebd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800eb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb3e:	4b1e      	ldr	r3, [pc, #120]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb46:	ee07 3a90 	vmov	s15, r3
 800eb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ebc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800eb6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800eb70:	4b11      	ldr	r3, [pc, #68]	; (800ebb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb74:	0a5b      	lsrs	r3, r3, #9
 800eb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	ee07 3a90 	vmov	s15, r3
 800eb84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb88:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb94:	ee17 3a90 	vmov	r3, s15
 800eb98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800eb9a:	e005      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	61bb      	str	r3, [r7, #24]
      break;
 800eba0:	e002      	b.n	800eba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800eba2:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eba4:	61bb      	str	r3, [r7, #24]
      break;
 800eba6:	bf00      	nop
  }

  return sysclockfreq;
 800eba8:	69bb      	ldr	r3, [r7, #24]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3724      	adds	r7, #36	; 0x24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	58024400 	.word	0x58024400
 800ebbc:	03d09000 	.word	0x03d09000
 800ebc0:	003d0900 	.word	0x003d0900
 800ebc4:	016e3600 	.word	0x016e3600
 800ebc8:	46000000 	.word	0x46000000
 800ebcc:	4c742400 	.word	0x4c742400
 800ebd0:	4a742400 	.word	0x4a742400
 800ebd4:	4bb71b00 	.word	0x4bb71b00

0800ebd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800ebde:	f7ff fe81 	bl	800e8e4 <HAL_RCC_GetSysClockFreq>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <HAL_RCC_GetHCLKFreq+0x50>)
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	0a1b      	lsrs	r3, r3, #8
 800ebea:	f003 030f 	and.w	r3, r3, #15
 800ebee:	490f      	ldr	r1, [pc, #60]	; (800ec2c <HAL_RCC_GetHCLKFreq+0x54>)
 800ebf0:	5ccb      	ldrb	r3, [r1, r3]
 800ebf2:	f003 031f 	and.w	r3, r3, #31
 800ebf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebfa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	; (800ec28 <HAL_RCC_GetHCLKFreq+0x50>)
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	f003 030f 	and.w	r3, r3, #15
 800ec04:	4a09      	ldr	r2, [pc, #36]	; (800ec2c <HAL_RCC_GetHCLKFreq+0x54>)
 800ec06:	5cd3      	ldrb	r3, [r2, r3]
 800ec08:	f003 031f 	and.w	r3, r3, #31
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec12:	4a07      	ldr	r2, [pc, #28]	; (800ec30 <HAL_RCC_GetHCLKFreq+0x58>)
 800ec14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ec16:	4a07      	ldr	r2, [pc, #28]	; (800ec34 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ec1c:	4b04      	ldr	r3, [pc, #16]	; (800ec30 <HAL_RCC_GetHCLKFreq+0x58>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	58024400 	.word	0x58024400
 800ec2c:	08027c3c 	.word	0x08027c3c
 800ec30:	24000040 	.word	0x24000040
 800ec34:	2400003c 	.word	0x2400003c

0800ec38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800ec3c:	f7ff ffcc 	bl	800ebd8 <HAL_RCC_GetHCLKFreq>
 800ec40:	4602      	mov	r2, r0
 800ec42:	4b06      	ldr	r3, [pc, #24]	; (800ec5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ec44:	69db      	ldr	r3, [r3, #28]
 800ec46:	091b      	lsrs	r3, r3, #4
 800ec48:	f003 0307 	and.w	r3, r3, #7
 800ec4c:	4904      	ldr	r1, [pc, #16]	; (800ec60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ec4e:	5ccb      	ldrb	r3, [r1, r3]
 800ec50:	f003 031f 	and.w	r3, r3, #31
 800ec54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	58024400 	.word	0x58024400
 800ec60:	08027c3c 	.word	0x08027c3c

0800ec64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800ec68:	f7ff ffb6 	bl	800ebd8 <HAL_RCC_GetHCLKFreq>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	4b06      	ldr	r3, [pc, #24]	; (800ec88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	f003 0307 	and.w	r3, r3, #7
 800ec78:	4904      	ldr	r1, [pc, #16]	; (800ec8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ec7a:	5ccb      	ldrb	r3, [r1, r3]
 800ec7c:	f003 031f 	and.w	r3, r3, #31
 800ec80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	58024400 	.word	0x58024400
 800ec8c:	08027c3c 	.word	0x08027c3c

0800ec90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	223f      	movs	r2, #63	; 0x3f
 800ec9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eca0:	4b1a      	ldr	r3, [pc, #104]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	f003 0207 	and.w	r2, r3, #7
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800ecac:	4b17      	ldr	r3, [pc, #92]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800ecb8:	4b14      	ldr	r3, [pc, #80]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecba:	699b      	ldr	r3, [r3, #24]
 800ecbc:	f003 020f 	and.w	r2, r3, #15
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800ecc4:	4b11      	ldr	r3, [pc, #68]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecc6:	699b      	ldr	r3, [r3, #24]
 800ecc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800ecd0:	4b0e      	ldr	r3, [pc, #56]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecd2:	69db      	ldr	r3, [r3, #28]
 800ecd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800ecdc:	4b0b      	ldr	r3, [pc, #44]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800ece8:	4b08      	ldr	r3, [pc, #32]	; (800ed0c <HAL_RCC_GetClockConfig+0x7c>)
 800ecea:	6a1b      	ldr	r3, [r3, #32]
 800ecec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ecf4:	4b06      	ldr	r3, [pc, #24]	; (800ed10 <HAL_RCC_GetClockConfig+0x80>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f003 020f 	and.w	r2, r3, #15
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	601a      	str	r2, [r3, #0]
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	58024400 	.word	0x58024400
 800ed10:	52002000 	.word	0x52002000

0800ed14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ed14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed18:	b0c8      	sub	sp, #288	; 0x120
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ed20:	2300      	movs	r3, #0
 800ed22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ed26:	2300      	movs	r3, #0
 800ed28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ed2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ed38:	2500      	movs	r5, #0
 800ed3a:	ea54 0305 	orrs.w	r3, r4, r5
 800ed3e:	d049      	beq.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ed40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed4a:	d02f      	beq.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ed4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed50:	d828      	bhi.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ed52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed56:	d01a      	beq.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ed58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed5c:	d822      	bhi.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d003      	beq.n	800ed6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ed62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed66:	d007      	beq.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ed68:	e01c      	b.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed6a:	4ba7      	ldr	r3, [pc, #668]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ed6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6e:	4aa6      	ldr	r2, [pc, #664]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ed70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ed76:	e01a      	b.n	800edae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ed78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	2102      	movs	r1, #2
 800ed80:	4618      	mov	r0, r3
 800ed82:	f001 fc43 	bl	801060c <RCCEx_PLL2_Config>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ed8c:	e00f      	b.n	800edae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed92:	3328      	adds	r3, #40	; 0x28
 800ed94:	2102      	movs	r1, #2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f001 fcea 	bl	8010770 <RCCEx_PLL3_Config>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eda2:	e004      	b.n	800edae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eda4:	2301      	movs	r3, #1
 800eda6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800edaa:	e000      	b.n	800edae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800edac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10a      	bne.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800edb6:	4b94      	ldr	r3, [pc, #592]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800edb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800edbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc4:	4a90      	ldr	r2, [pc, #576]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800edc6:	430b      	orrs	r3, r1
 800edc8:	6513      	str	r3, [r2, #80]	; 0x50
 800edca:	e003      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800edd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800edd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ede0:	f04f 0900 	mov.w	r9, #0
 800ede4:	ea58 0309 	orrs.w	r3, r8, r9
 800ede8:	d047      	beq.n	800ee7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800edea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edf0:	2b04      	cmp	r3, #4
 800edf2:	d82a      	bhi.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800edf4:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfa:	bf00      	nop
 800edfc:	0800ee11 	.word	0x0800ee11
 800ee00:	0800ee1f 	.word	0x0800ee1f
 800ee04:	0800ee35 	.word	0x0800ee35
 800ee08:	0800ee53 	.word	0x0800ee53
 800ee0c:	0800ee53 	.word	0x0800ee53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee10:	4b7d      	ldr	r3, [pc, #500]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	4a7c      	ldr	r2, [pc, #496]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ee16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee1c:	e01a      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee22:	3308      	adds	r3, #8
 800ee24:	2100      	movs	r1, #0
 800ee26:	4618      	mov	r0, r3
 800ee28:	f001 fbf0 	bl	801060c <RCCEx_PLL2_Config>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee32:	e00f      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee38:	3328      	adds	r3, #40	; 0x28
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f001 fc97 	bl	8010770 <RCCEx_PLL3_Config>
 800ee42:	4603      	mov	r3, r0
 800ee44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee48:	e004      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ee50:	e000      	b.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ee52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d10a      	bne.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ee5c:	4b6a      	ldr	r3, [pc, #424]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ee5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee60:	f023 0107 	bic.w	r1, r3, #7
 800ee64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee6a:	4a67      	ldr	r2, [pc, #412]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ee6c:	430b      	orrs	r3, r1
 800ee6e:	6513      	str	r3, [r2, #80]	; 0x50
 800ee70:	e003      	b.n	800ee7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ee76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800ee7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee82:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ee86:	f04f 0b00 	mov.w	fp, #0
 800ee8a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ee8e:	d054      	beq.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800ee90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ee9a:	d036      	beq.n	800ef0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800ee9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800eea0:	d82f      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eea6:	d032      	beq.n	800ef0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800eea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeac:	d829      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eeae:	2bc0      	cmp	r3, #192	; 0xc0
 800eeb0:	d02f      	beq.n	800ef12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800eeb2:	2bc0      	cmp	r3, #192	; 0xc0
 800eeb4:	d825      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eeb6:	2b80      	cmp	r3, #128	; 0x80
 800eeb8:	d018      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800eeba:	2b80      	cmp	r3, #128	; 0x80
 800eebc:	d821      	bhi.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800eec2:	2b40      	cmp	r3, #64	; 0x40
 800eec4:	d007      	beq.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800eec6:	e01c      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eec8:	4b4f      	ldr	r3, [pc, #316]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800eeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eecc:	4a4e      	ldr	r2, [pc, #312]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800eece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800eed4:	e01e      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eeda:	3308      	adds	r3, #8
 800eedc:	2100      	movs	r1, #0
 800eede:	4618      	mov	r0, r3
 800eee0:	f001 fb94 	bl	801060c <RCCEx_PLL2_Config>
 800eee4:	4603      	mov	r3, r0
 800eee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800eeea:	e013      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eeec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eef0:	3328      	adds	r3, #40	; 0x28
 800eef2:	2100      	movs	r1, #0
 800eef4:	4618      	mov	r0, r3
 800eef6:	f001 fc3b 	bl	8010770 <RCCEx_PLL3_Config>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ef00:	e008      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ef08:	e004      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ef0a:	bf00      	nop
 800ef0c:	e002      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ef0e:	bf00      	nop
 800ef10:	e000      	b.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ef12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10a      	bne.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800ef1c:	4b3a      	ldr	r3, [pc, #232]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ef1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ef24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef2a:	4a37      	ldr	r2, [pc, #220]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ef2c:	430b      	orrs	r3, r1
 800ef2e:	6513      	str	r3, [r2, #80]	; 0x50
 800ef30:	e003      	b.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800ef3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ef46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ef50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ef54:	460b      	mov	r3, r1
 800ef56:	4313      	orrs	r3, r2
 800ef58:	d05c      	beq.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800ef5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ef64:	d03b      	beq.n	800efde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ef66:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ef6a:	d834      	bhi.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ef6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef70:	d037      	beq.n	800efe2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800ef72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef76:	d82e      	bhi.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ef78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef7c:	d033      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ef7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef82:	d828      	bhi.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ef84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef88:	d01a      	beq.n	800efc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800ef8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef8e:	d822      	bhi.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d003      	beq.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800ef94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef98:	d007      	beq.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ef9a:	e01c      	b.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef9c:	4b1a      	ldr	r3, [pc, #104]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa0:	4a19      	ldr	r2, [pc, #100]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800efa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800efa8:	e01e      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efae:	3308      	adds	r3, #8
 800efb0:	2100      	movs	r1, #0
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 fb2a 	bl	801060c <RCCEx_PLL2_Config>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800efbe:	e013      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800efc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efc4:	3328      	adds	r3, #40	; 0x28
 800efc6:	2100      	movs	r1, #0
 800efc8:	4618      	mov	r0, r3
 800efca:	f001 fbd1 	bl	8010770 <RCCEx_PLL3_Config>
 800efce:	4603      	mov	r3, r0
 800efd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800efd4:	e008      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800efdc:	e004      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800efde:	bf00      	nop
 800efe0:	e002      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800efe2:	bf00      	nop
 800efe4:	e000      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800efe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10d      	bne.n	800f00c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800eff0:	4b05      	ldr	r3, [pc, #20]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800eff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eff4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800eff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800effc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800effe:	4a02      	ldr	r2, [pc, #8]	; (800f008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f000:	430b      	orrs	r3, r1
 800f002:	6513      	str	r3, [r2, #80]	; 0x50
 800f004:	e006      	b.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800f006:	bf00      	nop
 800f008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f00c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f010:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f024:	2300      	movs	r3, #0
 800f026:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f02a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f02e:	460b      	mov	r3, r1
 800f030:	4313      	orrs	r3, r2
 800f032:	d03a      	beq.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800f034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f03a:	2b30      	cmp	r3, #48	; 0x30
 800f03c:	d01f      	beq.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800f03e:	2b30      	cmp	r3, #48	; 0x30
 800f040:	d819      	bhi.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800f042:	2b20      	cmp	r3, #32
 800f044:	d00c      	beq.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800f046:	2b20      	cmp	r3, #32
 800f048:	d815      	bhi.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d019      	beq.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f04e:	2b10      	cmp	r3, #16
 800f050:	d111      	bne.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f052:	4bae      	ldr	r3, [pc, #696]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	4aad      	ldr	r2, [pc, #692]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f05c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800f05e:	e011      	b.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f064:	3308      	adds	r3, #8
 800f066:	2102      	movs	r1, #2
 800f068:	4618      	mov	r0, r3
 800f06a:	f001 facf 	bl	801060c <RCCEx_PLL2_Config>
 800f06e:	4603      	mov	r3, r0
 800f070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800f074:	e006      	b.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f07c:	e002      	b.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800f07e:	bf00      	nop
 800f080:	e000      	b.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800f082:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f08c:	4b9f      	ldr	r3, [pc, #636]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f090:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f09a:	4a9c      	ldr	r2, [pc, #624]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f09c:	430b      	orrs	r3, r1
 800f09e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0a0:	e003      	b.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f0a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f0b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f0c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	d051      	beq.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f0ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0d4:	d035      	beq.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800f0d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0da:	d82e      	bhi.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f0dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0e0:	d031      	beq.n	800f146 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800f0e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0e6:	d828      	bhi.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0ec:	d01a      	beq.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800f0ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0f2:	d822      	bhi.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800f0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0fc:	d007      	beq.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800f0fe:	e01c      	b.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f100:	4b82      	ldr	r3, [pc, #520]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f104:	4a81      	ldr	r2, [pc, #516]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f10a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f10c:	e01c      	b.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f112:	3308      	adds	r3, #8
 800f114:	2100      	movs	r1, #0
 800f116:	4618      	mov	r0, r3
 800f118:	f001 fa78 	bl	801060c <RCCEx_PLL2_Config>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f122:	e011      	b.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f128:	3328      	adds	r3, #40	; 0x28
 800f12a:	2100      	movs	r1, #0
 800f12c:	4618      	mov	r0, r3
 800f12e:	f001 fb1f 	bl	8010770 <RCCEx_PLL3_Config>
 800f132:	4603      	mov	r3, r0
 800f134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f138:	e006      	b.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
 800f13c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f140:	e002      	b.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800f142:	bf00      	nop
 800f144:	e000      	b.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800f146:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10a      	bne.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f150:	4b6e      	ldr	r3, [pc, #440]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f154:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f15e:	4a6b      	ldr	r2, [pc, #428]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f160:	430b      	orrs	r3, r1
 800f162:	6513      	str	r3, [r2, #80]	; 0x50
 800f164:	e003      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f16a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f17a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f17e:	2300      	movs	r3, #0
 800f180:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f184:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f188:	460b      	mov	r3, r1
 800f18a:	4313      	orrs	r3, r2
 800f18c:	d053      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f198:	d033      	beq.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800f19a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f19e:	d82c      	bhi.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f1a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1a4:	d02f      	beq.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800f1a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1aa:	d826      	bhi.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f1ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f1b0:	d02b      	beq.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800f1b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f1b6:	d820      	bhi.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1bc:	d012      	beq.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800f1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1c2:	d81a      	bhi.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d022      	beq.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800f1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1cc:	d115      	bne.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 fa18 	bl	801060c <RCCEx_PLL2_Config>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f1e2:	e015      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f1e8:	3328      	adds	r3, #40	; 0x28
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f001 fabf 	bl	8010770 <RCCEx_PLL3_Config>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f1f8:	e00a      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f200:	e006      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f202:	bf00      	nop
 800f204:	e004      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f206:	bf00      	nop
 800f208:	e002      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f20a:	bf00      	nop
 800f20c:	e000      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f20e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10a      	bne.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f218:	4b3c      	ldr	r3, [pc, #240]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f21c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f226:	4a39      	ldr	r2, [pc, #228]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f228:	430b      	orrs	r3, r1
 800f22a:	6513      	str	r3, [r2, #80]	; 0x50
 800f22c:	e003      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f22e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f232:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f246:	2300      	movs	r3, #0
 800f248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f24c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f250:	460b      	mov	r3, r1
 800f252:	4313      	orrs	r3, r2
 800f254:	d060      	beq.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f25a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f25e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f262:	d039      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800f264:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f268:	d832      	bhi.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f26a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f26e:	d035      	beq.n	800f2dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800f270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f274:	d82c      	bhi.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f27a:	d031      	beq.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800f27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f280:	d826      	bhi.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f286:	d02d      	beq.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800f288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f28c:	d820      	bhi.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f28e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f292:	d012      	beq.n	800f2ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f298:	d81a      	bhi.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d024      	beq.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f29e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2a2:	d115      	bne.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f001 f9ad 	bl	801060c <RCCEx_PLL2_Config>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f2b8:	e017      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f2be:	3328      	adds	r3, #40	; 0x28
 800f2c0:	2101      	movs	r1, #1
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 fa54 	bl	8010770 <RCCEx_PLL3_Config>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f2ce:	e00c      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f2d6:	e008      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f2d8:	bf00      	nop
 800f2da:	e006      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f2dc:	bf00      	nop
 800f2de:	e004      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f2e0:	bf00      	nop
 800f2e2:	e002      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f2e4:	bf00      	nop
 800f2e6:	e000      	b.n	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10e      	bne.n	800f310 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f2f2:	4b06      	ldr	r3, [pc, #24]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f2fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f302:	4a02      	ldr	r2, [pc, #8]	; (800f30c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f304:	430b      	orrs	r3, r1
 800f306:	6593      	str	r3, [r2, #88]	; 0x58
 800f308:	e006      	b.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800f30a:	bf00      	nop
 800f30c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f314:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f320:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f328:	2300      	movs	r3, #0
 800f32a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f32e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f332:	460b      	mov	r3, r1
 800f334:	4313      	orrs	r3, r2
 800f336:	d037      	beq.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f342:	d00e      	beq.n	800f362 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800f344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f348:	d816      	bhi.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d018      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800f34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f352:	d111      	bne.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f354:	4bc4      	ldr	r3, [pc, #784]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	4ac3      	ldr	r2, [pc, #780]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f35e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f360:	e00f      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f366:	3308      	adds	r3, #8
 800f368:	2101      	movs	r1, #1
 800f36a:	4618      	mov	r0, r3
 800f36c:	f001 f94e 	bl	801060c <RCCEx_PLL2_Config>
 800f370:	4603      	mov	r3, r0
 800f372:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f376:	e004      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f37e:	e000      	b.n	800f382 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800f380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f382:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10a      	bne.n	800f3a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f38a:	4bb7      	ldr	r3, [pc, #732]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f38e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f398:	4ab3      	ldr	r2, [pc, #716]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f39a:	430b      	orrs	r3, r1
 800f39c:	6513      	str	r3, [r2, #80]	; 0x50
 800f39e:	e003      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f3a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f3b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f3be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	d039      	beq.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f3cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d81c      	bhi.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800f3d2:	a201      	add	r2, pc, #4	; (adr r2, 800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800f3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d8:	0800f415 	.word	0x0800f415
 800f3dc:	0800f3e9 	.word	0x0800f3e9
 800f3e0:	0800f3f7 	.word	0x0800f3f7
 800f3e4:	0800f415 	.word	0x0800f415
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3e8:	4b9f      	ldr	r3, [pc, #636]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ec:	4a9e      	ldr	r2, [pc, #632]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f3f4:	e00f      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f3fa:	3308      	adds	r3, #8
 800f3fc:	2102      	movs	r1, #2
 800f3fe:	4618      	mov	r0, r3
 800f400:	f001 f904 	bl	801060c <RCCEx_PLL2_Config>
 800f404:	4603      	mov	r3, r0
 800f406:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f40a:	e004      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f412:	e000      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800f414:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f416:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d10a      	bne.n	800f434 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f41e:	4b92      	ldr	r3, [pc, #584]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f422:	f023 0103 	bic.w	r1, r3, #3
 800f426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f42c:	4a8e      	ldr	r2, [pc, #568]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f42e:	430b      	orrs	r3, r1
 800f430:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f432:	e003      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f44c:	2300      	movs	r3, #0
 800f44e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f452:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f456:	460b      	mov	r3, r1
 800f458:	4313      	orrs	r3, r2
 800f45a:	f000 8099 	beq.w	800f590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f45e:	4b83      	ldr	r3, [pc, #524]	; (800f66c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a82      	ldr	r2, [pc, #520]	; (800f66c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f46a:	f7fb fa4d 	bl	800a908 <HAL_GetTick>
 800f46e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f472:	e00b      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f474:	f7fb fa48 	bl	800a908 <HAL_GetTick>
 800f478:	4602      	mov	r2, r0
 800f47a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	2b64      	cmp	r3, #100	; 0x64
 800f482:	d903      	bls.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800f484:	2303      	movs	r3, #3
 800f486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f48a:	e005      	b.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f48c:	4b77      	ldr	r3, [pc, #476]	; (800f66c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0ed      	beq.n	800f474 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800f498:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d173      	bne.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f4a0:	4b71      	ldr	r3, [pc, #452]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f4a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4ac:	4053      	eors	r3, r2
 800f4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d015      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f4b6:	4b6c      	ldr	r3, [pc, #432]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f4c2:	4b69      	ldr	r3, [pc, #420]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c6:	4a68      	ldr	r2, [pc, #416]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f4ce:	4b66      	ldr	r3, [pc, #408]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d2:	4a65      	ldr	r2, [pc, #404]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f4da:	4a63      	ldr	r2, [pc, #396]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f4e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ee:	d118      	bne.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4f0:	f7fb fa0a 	bl	800a908 <HAL_GetTick>
 800f4f4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f4f8:	e00d      	b.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f4fa:	f7fb fa05 	bl	800a908 <HAL_GetTick>
 800f4fe:	4602      	mov	r2, r0
 800f500:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f504:	1ad2      	subs	r2, r2, r3
 800f506:	f241 3388 	movw	r3, #5000	; 0x1388
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d903      	bls.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800f514:	e005      	b.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f516:	4b54      	ldr	r3, [pc, #336]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f51a:	f003 0302 	and.w	r3, r3, #2
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0eb      	beq.n	800f4fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800f522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f526:	2b00      	cmp	r3, #0
 800f528:	d129      	bne.n	800f57e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f52e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f53a:	d10e      	bne.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800f53c:	4b4a      	ldr	r3, [pc, #296]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f54c:	091a      	lsrs	r2, r3, #4
 800f54e:	4b48      	ldr	r3, [pc, #288]	; (800f670 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800f550:	4013      	ands	r3, r2
 800f552:	4a45      	ldr	r2, [pc, #276]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f554:	430b      	orrs	r3, r1
 800f556:	6113      	str	r3, [r2, #16]
 800f558:	e005      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800f55a:	4b43      	ldr	r3, [pc, #268]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	4a42      	ldr	r2, [pc, #264]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f560:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f564:	6113      	str	r3, [r2, #16]
 800f566:	4b40      	ldr	r3, [pc, #256]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f568:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f56a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f56e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f576:	4a3c      	ldr	r2, [pc, #240]	; (800f668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f578:	430b      	orrs	r3, r1
 800f57a:	6713      	str	r3, [r2, #112]	; 0x70
 800f57c:	e008      	b.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f57e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f582:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800f586:	e003      	b.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f58c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f002 0301 	and.w	r3, r2, #1
 800f59c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f5a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	f000 8090 	beq.w	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f5b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5ba:	2b28      	cmp	r3, #40	; 0x28
 800f5bc:	d870      	bhi.n	800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800f5be:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f6a9 	.word	0x0800f6a9
 800f5c8:	0800f6a1 	.word	0x0800f6a1
 800f5cc:	0800f6a1 	.word	0x0800f6a1
 800f5d0:	0800f6a1 	.word	0x0800f6a1
 800f5d4:	0800f6a1 	.word	0x0800f6a1
 800f5d8:	0800f6a1 	.word	0x0800f6a1
 800f5dc:	0800f6a1 	.word	0x0800f6a1
 800f5e0:	0800f6a1 	.word	0x0800f6a1
 800f5e4:	0800f675 	.word	0x0800f675
 800f5e8:	0800f6a1 	.word	0x0800f6a1
 800f5ec:	0800f6a1 	.word	0x0800f6a1
 800f5f0:	0800f6a1 	.word	0x0800f6a1
 800f5f4:	0800f6a1 	.word	0x0800f6a1
 800f5f8:	0800f6a1 	.word	0x0800f6a1
 800f5fc:	0800f6a1 	.word	0x0800f6a1
 800f600:	0800f6a1 	.word	0x0800f6a1
 800f604:	0800f68b 	.word	0x0800f68b
 800f608:	0800f6a1 	.word	0x0800f6a1
 800f60c:	0800f6a1 	.word	0x0800f6a1
 800f610:	0800f6a1 	.word	0x0800f6a1
 800f614:	0800f6a1 	.word	0x0800f6a1
 800f618:	0800f6a1 	.word	0x0800f6a1
 800f61c:	0800f6a1 	.word	0x0800f6a1
 800f620:	0800f6a1 	.word	0x0800f6a1
 800f624:	0800f6a9 	.word	0x0800f6a9
 800f628:	0800f6a1 	.word	0x0800f6a1
 800f62c:	0800f6a1 	.word	0x0800f6a1
 800f630:	0800f6a1 	.word	0x0800f6a1
 800f634:	0800f6a1 	.word	0x0800f6a1
 800f638:	0800f6a1 	.word	0x0800f6a1
 800f63c:	0800f6a1 	.word	0x0800f6a1
 800f640:	0800f6a1 	.word	0x0800f6a1
 800f644:	0800f6a9 	.word	0x0800f6a9
 800f648:	0800f6a1 	.word	0x0800f6a1
 800f64c:	0800f6a1 	.word	0x0800f6a1
 800f650:	0800f6a1 	.word	0x0800f6a1
 800f654:	0800f6a1 	.word	0x0800f6a1
 800f658:	0800f6a1 	.word	0x0800f6a1
 800f65c:	0800f6a1 	.word	0x0800f6a1
 800f660:	0800f6a1 	.word	0x0800f6a1
 800f664:	0800f6a9 	.word	0x0800f6a9
 800f668:	58024400 	.word	0x58024400
 800f66c:	58024800 	.word	0x58024800
 800f670:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f678:	3308      	adds	r3, #8
 800f67a:	2101      	movs	r1, #1
 800f67c:	4618      	mov	r0, r3
 800f67e:	f000 ffc5 	bl	801060c <RCCEx_PLL2_Config>
 800f682:	4603      	mov	r3, r0
 800f684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f688:	e00f      	b.n	800f6aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f68e:	3328      	adds	r3, #40	; 0x28
 800f690:	2101      	movs	r1, #1
 800f692:	4618      	mov	r0, r3
 800f694:	f001 f86c 	bl	8010770 <RCCEx_PLL3_Config>
 800f698:	4603      	mov	r3, r0
 800f69a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f69e:	e004      	b.n	800f6aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f6a6:	e000      	b.n	800f6aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800f6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10b      	bne.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f6b2:	4bc0      	ldr	r3, [pc, #768]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f6ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c2:	4abc      	ldr	r2, [pc, #752]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f6c4:	430b      	orrs	r3, r1
 800f6c6:	6553      	str	r3, [r2, #84]	; 0x54
 800f6c8:	e003      	b.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f6ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f6d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6da:	f002 0302 	and.w	r3, r2, #2
 800f6de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	d043      	beq.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6fa:	2b05      	cmp	r3, #5
 800f6fc:	d824      	bhi.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800f6fe:	a201      	add	r2, pc, #4	; (adr r2, 800f704 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f751 	.word	0x0800f751
 800f708:	0800f71d 	.word	0x0800f71d
 800f70c:	0800f733 	.word	0x0800f733
 800f710:	0800f751 	.word	0x0800f751
 800f714:	0800f751 	.word	0x0800f751
 800f718:	0800f751 	.word	0x0800f751
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f720:	3308      	adds	r3, #8
 800f722:	2101      	movs	r1, #1
 800f724:	4618      	mov	r0, r3
 800f726:	f000 ff71 	bl	801060c <RCCEx_PLL2_Config>
 800f72a:	4603      	mov	r3, r0
 800f72c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f730:	e00f      	b.n	800f752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f736:	3328      	adds	r3, #40	; 0x28
 800f738:	2101      	movs	r1, #1
 800f73a:	4618      	mov	r0, r3
 800f73c:	f001 f818 	bl	8010770 <RCCEx_PLL3_Config>
 800f740:	4603      	mov	r3, r0
 800f742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f746:	e004      	b.n	800f752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f748:	2301      	movs	r3, #1
 800f74a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f74e:	e000      	b.n	800f752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800f750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f752:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10b      	bne.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f75a:	4b96      	ldr	r3, [pc, #600]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f75e:	f023 0107 	bic.w	r1, r3, #7
 800f762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f76a:	4a92      	ldr	r2, [pc, #584]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f76c:	430b      	orrs	r3, r1
 800f76e:	6553      	str	r3, [r2, #84]	; 0x54
 800f770:	e003      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f776:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	f002 0304 	and.w	r3, r2, #4
 800f786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f78a:	2300      	movs	r3, #0
 800f78c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f790:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f794:	460b      	mov	r3, r1
 800f796:	4313      	orrs	r3, r2
 800f798:	d043      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f79e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f7a2:	2b05      	cmp	r3, #5
 800f7a4:	d824      	bhi.n	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800f7a6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800f7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ac:	0800f7f9 	.word	0x0800f7f9
 800f7b0:	0800f7c5 	.word	0x0800f7c5
 800f7b4:	0800f7db 	.word	0x0800f7db
 800f7b8:	0800f7f9 	.word	0x0800f7f9
 800f7bc:	0800f7f9 	.word	0x0800f7f9
 800f7c0:	0800f7f9 	.word	0x0800f7f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	2101      	movs	r1, #1
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f000 ff1d 	bl	801060c <RCCEx_PLL2_Config>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f7d8:	e00f      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7de:	3328      	adds	r3, #40	; 0x28
 800f7e0:	2101      	movs	r1, #1
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 ffc4 	bl	8010770 <RCCEx_PLL3_Config>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f7ee:	e004      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f7f6:	e000      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800f7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d10b      	bne.n	800f81a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f802:	4b6c      	ldr	r3, [pc, #432]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f806:	f023 0107 	bic.w	r1, r3, #7
 800f80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f80e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f812:	4a68      	ldr	r2, [pc, #416]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f814:	430b      	orrs	r3, r1
 800f816:	6593      	str	r3, [r2, #88]	; 0x58
 800f818:	e003      	b.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f81a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f81e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f002 0320 	and.w	r3, r2, #32
 800f82e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f832:	2300      	movs	r3, #0
 800f834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f83c:	460b      	mov	r3, r1
 800f83e:	4313      	orrs	r3, r2
 800f840:	d055      	beq.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f84a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f84e:	d033      	beq.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800f850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f854:	d82c      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800f856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f85a:	d02f      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800f85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f860:	d826      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800f862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f866:	d02b      	beq.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800f868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f86c:	d820      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800f86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f872:	d012      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800f874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f878:	d81a      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d022      	beq.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800f87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f882:	d115      	bne.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f888:	3308      	adds	r3, #8
 800f88a:	2100      	movs	r1, #0
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 febd 	bl	801060c <RCCEx_PLL2_Config>
 800f892:	4603      	mov	r3, r0
 800f894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f898:	e015      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f89e:	3328      	adds	r3, #40	; 0x28
 800f8a0:	2102      	movs	r1, #2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 ff64 	bl	8010770 <RCCEx_PLL3_Config>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f8ae:	e00a      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f8b6:	e006      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800f8b8:	bf00      	nop
 800f8ba:	e004      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800f8bc:	bf00      	nop
 800f8be:	e002      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800f8c0:	bf00      	nop
 800f8c2:	e000      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800f8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f8ce:	4b39      	ldr	r3, [pc, #228]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f8da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f8de:	4a35      	ldr	r2, [pc, #212]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f8e0:	430b      	orrs	r3, r1
 800f8e2:	6553      	str	r3, [r2, #84]	; 0x54
 800f8e4:	e003      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f8ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f8fe:	2300      	movs	r3, #0
 800f900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f904:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f908:	460b      	mov	r3, r1
 800f90a:	4313      	orrs	r3, r2
 800f90c:	d058      	beq.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f90e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f916:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f91a:	d033      	beq.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f91c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f920:	d82c      	bhi.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800f922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f926:	d02f      	beq.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800f928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f92c:	d826      	bhi.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800f92e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f932:	d02b      	beq.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800f934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f938:	d820      	bhi.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800f93a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f93e:	d012      	beq.n	800f966 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800f940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f944:	d81a      	bhi.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800f946:	2b00      	cmp	r3, #0
 800f948:	d022      	beq.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800f94a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f94e:	d115      	bne.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f954:	3308      	adds	r3, #8
 800f956:	2100      	movs	r1, #0
 800f958:	4618      	mov	r0, r3
 800f95a:	f000 fe57 	bl	801060c <RCCEx_PLL2_Config>
 800f95e:	4603      	mov	r3, r0
 800f960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f964:	e015      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f96a:	3328      	adds	r3, #40	; 0x28
 800f96c:	2102      	movs	r1, #2
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fefe 	bl	8010770 <RCCEx_PLL3_Config>
 800f974:	4603      	mov	r3, r0
 800f976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f97a:	e00a      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f97c:	2301      	movs	r3, #1
 800f97e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f982:	e006      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800f984:	bf00      	nop
 800f986:	e004      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800f988:	bf00      	nop
 800f98a:	e002      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800f98c:	bf00      	nop
 800f98e:	e000      	b.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800f990:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f992:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10e      	bne.n	800f9b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f99a:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f9a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9aa:	4a02      	ldr	r2, [pc, #8]	; (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800f9ac:	430b      	orrs	r3, r1
 800f9ae:	6593      	str	r3, [r2, #88]	; 0x58
 800f9b0:	e006      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800f9b2:	bf00      	nop
 800f9b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f9bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f9cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f9d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	d055      	beq.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f9e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f9ec:	d033      	beq.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800f9ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f9f2:	d82c      	bhi.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800f9f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9f8:	d02f      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800f9fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9fe:	d826      	bhi.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800fa00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fa04:	d02b      	beq.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800fa06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fa0a:	d820      	bhi.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800fa0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa10:	d012      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800fa12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa16:	d81a      	bhi.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d022      	beq.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800fa1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa20:	d115      	bne.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa26:	3308      	adds	r3, #8
 800fa28:	2100      	movs	r1, #0
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f000 fdee 	bl	801060c <RCCEx_PLL2_Config>
 800fa30:	4603      	mov	r3, r0
 800fa32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fa36:	e015      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa3c:	3328      	adds	r3, #40	; 0x28
 800fa3e:	2102      	movs	r1, #2
 800fa40:	4618      	mov	r0, r3
 800fa42:	f000 fe95 	bl	8010770 <RCCEx_PLL3_Config>
 800fa46:	4603      	mov	r3, r0
 800fa48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fa4c:	e00a      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fa54:	e006      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800fa56:	bf00      	nop
 800fa58:	e004      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800fa5a:	bf00      	nop
 800fa5c:	e002      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800fa5e:	bf00      	nop
 800fa60:	e000      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800fa62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10b      	bne.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fa6c:	4ba1      	ldr	r3, [pc, #644]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fa6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa70:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fa74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fa7c:	4a9d      	ldr	r2, [pc, #628]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	6593      	str	r3, [r2, #88]	; 0x58
 800fa82:	e003      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fa88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fa8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	f002 0308 	and.w	r3, r2, #8
 800fa98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800faa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800faa6:	460b      	mov	r3, r1
 800faa8:	4313      	orrs	r3, r2
 800faaa:	d01e      	beq.n	800faea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800faac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fab8:	d10c      	bne.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800faba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fabe:	3328      	adds	r3, #40	; 0x28
 800fac0:	2102      	movs	r1, #2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 fe54 	bl	8010770 <RCCEx_PLL3_Config>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800face:	2301      	movs	r3, #1
 800fad0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fad4:	4b87      	ldr	r3, [pc, #540]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fae4:	4a83      	ldr	r2, [pc, #524]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fae6:	430b      	orrs	r3, r1
 800fae8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800faea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f002 0310 	and.w	r3, r2, #16
 800faf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fafa:	2300      	movs	r3, #0
 800fafc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fb04:	460b      	mov	r3, r1
 800fb06:	4313      	orrs	r3, r2
 800fb08:	d01e      	beq.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fb0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb16:	d10c      	bne.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fb18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb1c:	3328      	adds	r3, #40	; 0x28
 800fb1e:	2102      	movs	r1, #2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fe25 	bl	8010770 <RCCEx_PLL3_Config>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fb32:	4b70      	ldr	r3, [pc, #448]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb42:	4a6c      	ldr	r2, [pc, #432]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fb44:	430b      	orrs	r3, r1
 800fb46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fb48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fb54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fb62:	460b      	mov	r3, r1
 800fb64:	4313      	orrs	r3, r2
 800fb66:	d03e      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb74:	d022      	beq.n	800fbbc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800fb76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb7a:	d81b      	bhi.n	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d003      	beq.n	800fb88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800fb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb84:	d00b      	beq.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800fb86:	e015      	b.n	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	2100      	movs	r1, #0
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 fd3b 	bl	801060c <RCCEx_PLL2_Config>
 800fb96:	4603      	mov	r3, r0
 800fb98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fb9c:	e00f      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fb9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fba2:	3328      	adds	r3, #40	; 0x28
 800fba4:	2102      	movs	r1, #2
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 fde2 	bl	8010770 <RCCEx_PLL3_Config>
 800fbac:	4603      	mov	r3, r0
 800fbae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fbb2:	e004      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fbba:	e000      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800fbbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fbc6:	4b4b      	ldr	r3, [pc, #300]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fbd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbd6:	4a47      	ldr	r2, [pc, #284]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	6593      	str	r3, [r2, #88]	; 0x58
 800fbdc:	e003      	b.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fbe2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fbe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fbf2:	67bb      	str	r3, [r7, #120]	; 0x78
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	d03b      	beq.n	800fc7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fc02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fc0e:	d01f      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800fc10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fc14:	d818      	bhi.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800fc16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc1a:	d003      	beq.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800fc1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc20:	d007      	beq.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800fc22:	e011      	b.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc24:	4b33      	ldr	r3, [pc, #204]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc28:	4a32      	ldr	r2, [pc, #200]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fc2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fc30:	e00f      	b.n	800fc52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc36:	3328      	adds	r3, #40	; 0x28
 800fc38:	2101      	movs	r1, #1
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 fd98 	bl	8010770 <RCCEx_PLL3_Config>
 800fc40:	4603      	mov	r3, r0
 800fc42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800fc46:	e004      	b.n	800fc52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fc4e:	e000      	b.n	800fc52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800fc50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10b      	bne.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fc5a:	4b26      	ldr	r3, [pc, #152]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc6a:	4a22      	ldr	r2, [pc, #136]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fc6c:	430b      	orrs	r3, r1
 800fc6e:	6553      	str	r3, [r2, #84]	; 0x54
 800fc70:	e003      	b.n	800fc7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fc76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fc7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fc86:	673b      	str	r3, [r7, #112]	; 0x70
 800fc88:	2300      	movs	r3, #0
 800fc8a:	677b      	str	r3, [r7, #116]	; 0x74
 800fc8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fc90:	460b      	mov	r3, r1
 800fc92:	4313      	orrs	r3, r2
 800fc94:	d034      	beq.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fc96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800fca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca4:	d007      	beq.n	800fcb6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800fca6:	e011      	b.n	800fccc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fca8:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcac:	4a11      	ldr	r2, [pc, #68]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fcae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fcb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fcb4:	e00e      	b.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fcb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fcba:	3308      	adds	r3, #8
 800fcbc:	2102      	movs	r1, #2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fca4 	bl	801060c <RCCEx_PLL2_Config>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fcca:	e003      	b.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800fccc:	2301      	movs	r3, #1
 800fcce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fcd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d10d      	bne.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fcdc:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fcde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcea:	4a02      	ldr	r2, [pc, #8]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800fcec:	430b      	orrs	r3, r1
 800fcee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fcf0:	e006      	b.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800fcf2:	bf00      	nop
 800fcf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fcfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fd0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd0e:	2300      	movs	r3, #0
 800fd10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fd16:	460b      	mov	r3, r1
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	d00c      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fd1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd20:	3328      	adds	r3, #40	; 0x28
 800fd22:	2102      	movs	r1, #2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 fd23 	bl	8010770 <RCCEx_PLL3_Config>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fd36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fd42:	663b      	str	r3, [r7, #96]	; 0x60
 800fd44:	2300      	movs	r3, #0
 800fd46:	667b      	str	r3, [r7, #100]	; 0x64
 800fd48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	d038      	beq.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fd52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd5e:	d018      	beq.n	800fd92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800fd60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd64:	d811      	bhi.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800fd66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd6a:	d014      	beq.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800fd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd70:	d80b      	bhi.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d011      	beq.n	800fd9a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800fd76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd7a:	d106      	bne.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd7c:	4bc3      	ldr	r3, [pc, #780]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd80:	4ac2      	ldr	r2, [pc, #776]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fd82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fd86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fd88:	e008      	b.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fd90:	e004      	b.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800fd92:	bf00      	nop
 800fd94:	e002      	b.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800fd96:	bf00      	nop
 800fd98:	e000      	b.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800fd9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d10b      	bne.n	800fdbc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fda4:	4bb9      	ldr	r3, [pc, #740]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fda8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fdac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdb4:	4ab5      	ldr	r2, [pc, #724]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fdb6:	430b      	orrs	r3, r1
 800fdb8:	6553      	str	r3, [r2, #84]	; 0x54
 800fdba:	e003      	b.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fdc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fdc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fdd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fdda:	460b      	mov	r3, r1
 800fddc:	4313      	orrs	r3, r2
 800fdde:	d009      	beq.n	800fdf4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fde0:	4baa      	ldr	r3, [pc, #680]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fde4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdee:	4aa7      	ldr	r2, [pc, #668]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fdf0:	430b      	orrs	r3, r1
 800fdf2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fdf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fe00:	653b      	str	r3, [r7, #80]	; 0x50
 800fe02:	2300      	movs	r3, #0
 800fe04:	657b      	str	r3, [r7, #84]	; 0x54
 800fe06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	d009      	beq.n	800fe24 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fe10:	4b9e      	ldr	r3, [pc, #632]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe14:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fe18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe1e:	4a9b      	ldr	r2, [pc, #620]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe20:	430b      	orrs	r3, r1
 800fe22:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800fe24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800fe30:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe32:	2300      	movs	r3, #0
 800fe34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	d009      	beq.n	800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800fe40:	4b92      	ldr	r3, [pc, #584]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe44:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800fe48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe4e:	4a8f      	ldr	r2, [pc, #572]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe50:	430b      	orrs	r3, r1
 800fe52:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fe54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fe60:	643b      	str	r3, [r7, #64]	; 0x40
 800fe62:	2300      	movs	r3, #0
 800fe64:	647b      	str	r3, [r7, #68]	; 0x44
 800fe66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	d00e      	beq.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fe70:	4b86      	ldr	r3, [pc, #536]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	4a85      	ldr	r2, [pc, #532]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fe7a:	6113      	str	r3, [r2, #16]
 800fe7c:	4b83      	ldr	r3, [pc, #524]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe7e:	6919      	ldr	r1, [r3, #16]
 800fe80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fe88:	4a80      	ldr	r2, [pc, #512]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fe8a:	430b      	orrs	r3, r1
 800fe8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fe8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fe9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fea0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fea4:	460b      	mov	r3, r1
 800fea6:	4313      	orrs	r3, r2
 800fea8:	d009      	beq.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800feaa:	4b78      	ldr	r3, [pc, #480]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800feac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800feb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800feb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feb8:	4a74      	ldr	r2, [pc, #464]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800feba:	430b      	orrs	r3, r1
 800febc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800febe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800feca:	633b      	str	r3, [r7, #48]	; 0x30
 800fecc:	2300      	movs	r3, #0
 800fece:	637b      	str	r3, [r7, #52]	; 0x34
 800fed0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fed4:	460b      	mov	r3, r1
 800fed6:	4313      	orrs	r3, r2
 800fed8:	d00a      	beq.n	800fef0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800feda:	4b6c      	ldr	r3, [pc, #432]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800fedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fede:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800feea:	4a68      	ldr	r2, [pc, #416]	; (801008c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800feec:	430b      	orrs	r3, r1
 800feee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	2100      	movs	r1, #0
 800fefa:	62b9      	str	r1, [r7, #40]	; 0x28
 800fefc:	f003 0301 	and.w	r3, r3, #1
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ff06:	460b      	mov	r3, r1
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	d011      	beq.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff10:	3308      	adds	r3, #8
 800ff12:	2100      	movs	r1, #0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 fb79 	bl	801060c <RCCEx_PLL2_Config>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ff20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d003      	beq.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ff2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ff30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	2100      	movs	r1, #0
 800ff3a:	6239      	str	r1, [r7, #32]
 800ff3c:	f003 0302 	and.w	r3, r3, #2
 800ff40:	627b      	str	r3, [r7, #36]	; 0x24
 800ff42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ff46:	460b      	mov	r3, r1
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	d011      	beq.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ff4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff50:	3308      	adds	r3, #8
 800ff52:	2101      	movs	r1, #1
 800ff54:	4618      	mov	r0, r3
 800ff56:	f000 fb59 	bl	801060c <RCCEx_PLL2_Config>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ff60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d003      	beq.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ff6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ff70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	2100      	movs	r1, #0
 800ff7a:	61b9      	str	r1, [r7, #24]
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	61fb      	str	r3, [r7, #28]
 800ff82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ff86:	460b      	mov	r3, r1
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	d011      	beq.n	800ffb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ff8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff90:	3308      	adds	r3, #8
 800ff92:	2102      	movs	r1, #2
 800ff94:	4618      	mov	r0, r3
 800ff96:	f000 fb39 	bl	801060c <RCCEx_PLL2_Config>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ffa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ffac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ffb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6139      	str	r1, [r7, #16]
 800ffbc:	f003 0308 	and.w	r3, r3, #8
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	d011      	beq.n	800fff0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ffcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ffd0:	3328      	adds	r3, #40	; 0x28
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f000 fbcb 	bl	8010770 <RCCEx_PLL3_Config>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800ffe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d003      	beq.n	800fff0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ffec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	2100      	movs	r1, #0
 800fffa:	60b9      	str	r1, [r7, #8]
 800fffc:	f003 0310 	and.w	r3, r3, #16
 8010000:	60fb      	str	r3, [r7, #12]
 8010002:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010006:	460b      	mov	r3, r1
 8010008:	4313      	orrs	r3, r2
 801000a:	d011      	beq.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801000c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010010:	3328      	adds	r3, #40	; 0x28
 8010012:	2101      	movs	r1, #1
 8010014:	4618      	mov	r0, r3
 8010016:	f000 fbab 	bl	8010770 <RCCEx_PLL3_Config>
 801001a:	4603      	mov	r3, r0
 801001c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8010020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010024:	2b00      	cmp	r3, #0
 8010026:	d003      	beq.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801002c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	2100      	movs	r1, #0
 801003a:	6039      	str	r1, [r7, #0]
 801003c:	f003 0320 	and.w	r3, r3, #32
 8010040:	607b      	str	r3, [r7, #4]
 8010042:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010046:	460b      	mov	r3, r1
 8010048:	4313      	orrs	r3, r2
 801004a:	d011      	beq.n	8010070 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801004c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010050:	3328      	adds	r3, #40	; 0x28
 8010052:	2102      	movs	r1, #2
 8010054:	4618      	mov	r0, r3
 8010056:	f000 fb8b 	bl	8010770 <RCCEx_PLL3_Config>
 801005a:	4603      	mov	r3, r0
 801005c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8010060:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010064:	2b00      	cmp	r3, #0
 8010066:	d003      	beq.n	8010070 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801006c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8010070:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	e000      	b.n	801007e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 801007c:	2301      	movs	r3, #1
}
 801007e:	4618      	mov	r0, r3
 8010080:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8010084:	46bd      	mov	sp, r7
 8010086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801008a:	bf00      	nop
 801008c:	58024400 	.word	0x58024400

08010090 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8010094:	f7fe fda0 	bl	800ebd8 <HAL_RCC_GetHCLKFreq>
 8010098:	4602      	mov	r2, r0
 801009a:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801009c:	6a1b      	ldr	r3, [r3, #32]
 801009e:	091b      	lsrs	r3, r3, #4
 80100a0:	f003 0307 	and.w	r3, r3, #7
 80100a4:	4904      	ldr	r1, [pc, #16]	; (80100b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80100a6:	5ccb      	ldrb	r3, [r1, r3]
 80100a8:	f003 031f 	and.w	r3, r3, #31
 80100ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	58024400 	.word	0x58024400
 80100b8:	08027c3c 	.word	0x08027c3c

080100bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80100bc:	b480      	push	{r7}
 80100be:	b089      	sub	sp, #36	; 0x24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100c4:	4ba1      	ldr	r3, [pc, #644]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c8:	f003 0303 	and.w	r3, r3, #3
 80100cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80100ce:	4b9f      	ldr	r3, [pc, #636]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d2:	0b1b      	lsrs	r3, r3, #12
 80100d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80100da:	4b9c      	ldr	r3, [pc, #624]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100de:	091b      	lsrs	r3, r3, #4
 80100e0:	f003 0301 	and.w	r3, r3, #1
 80100e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80100e6:	4b99      	ldr	r3, [pc, #612]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80100e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ea:	08db      	lsrs	r3, r3, #3
 80100ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100f0:	693a      	ldr	r2, [r7, #16]
 80100f2:	fb02 f303 	mul.w	r3, r2, r3
 80100f6:	ee07 3a90 	vmov	s15, r3
 80100fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 8111 	beq.w	801032c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	2b02      	cmp	r3, #2
 801010e:	f000 8083 	beq.w	8010218 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	2b02      	cmp	r3, #2
 8010116:	f200 80a1 	bhi.w	801025c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d056      	beq.n	80101d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010126:	e099      	b.n	801025c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010128:	4b88      	ldr	r3, [pc, #544]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0320 	and.w	r3, r3, #32
 8010130:	2b00      	cmp	r3, #0
 8010132:	d02d      	beq.n	8010190 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010134:	4b85      	ldr	r3, [pc, #532]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	08db      	lsrs	r3, r3, #3
 801013a:	f003 0303 	and.w	r3, r3, #3
 801013e:	4a84      	ldr	r2, [pc, #528]	; (8010350 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010140:	fa22 f303 	lsr.w	r3, r2, r3
 8010144:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	ee07 3a90 	vmov	s15, r3
 801014c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	ee07 3a90 	vmov	s15, r3
 8010156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801015a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801015e:	4b7b      	ldr	r3, [pc, #492]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010166:	ee07 3a90 	vmov	s15, r3
 801016a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801016e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801017a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801017e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801018a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801018e:	e087      	b.n	80102a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	ee07 3a90 	vmov	s15, r3
 8010196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801019a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010358 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801019e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101a2:	4b6a      	ldr	r3, [pc, #424]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80101a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101aa:	ee07 3a90 	vmov	s15, r3
 80101ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80101b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80101ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101d2:	e065      	b.n	80102a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	ee07 3a90 	vmov	s15, r3
 80101da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801035c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80101e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101e6:	4b59      	ldr	r3, [pc, #356]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80101e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ee:	ee07 3a90 	vmov	s15, r3
 80101f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80101fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80101fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801020a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801020e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010216:	e043      	b.n	80102a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	ee07 3a90 	vmov	s15, r3
 801021e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801022a:	4b48      	ldr	r3, [pc, #288]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801022c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801022e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010232:	ee07 3a90 	vmov	s15, r3
 8010236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801023a:	ed97 6a03 	vldr	s12, [r7, #12]
 801023e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801024a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801024e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801025a:	e021      	b.n	80102a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	ee07 3a90 	vmov	s15, r3
 8010262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801035c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801026a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801026e:	4b37      	ldr	r3, [pc, #220]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010276:	ee07 3a90 	vmov	s15, r3
 801027a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801027e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010282:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801028a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801028e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010296:	ee67 7a27 	vmul.f32	s15, s14, s15
 801029a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801029e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80102a0:	4b2a      	ldr	r3, [pc, #168]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80102a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a4:	0a5b      	lsrs	r3, r3, #9
 80102a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102aa:	ee07 3a90 	vmov	s15, r3
 80102ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80102be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102c6:	ee17 2a90 	vmov	r2, s15
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80102ce:	4b1f      	ldr	r3, [pc, #124]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80102d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d2:	0c1b      	lsrs	r3, r3, #16
 80102d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102d8:	ee07 3a90 	vmov	s15, r3
 80102dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80102ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102f4:	ee17 2a90 	vmov	r2, s15
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80102fc:	4b13      	ldr	r3, [pc, #76]	; (801034c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80102fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010300:	0e1b      	lsrs	r3, r3, #24
 8010302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010306:	ee07 3a90 	vmov	s15, r3
 801030a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801030e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010316:	edd7 6a07 	vldr	s13, [r7, #28]
 801031a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801031e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010322:	ee17 2a90 	vmov	r2, s15
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801032a:	e008      	b.n	801033e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	609a      	str	r2, [r3, #8]
}
 801033e:	bf00      	nop
 8010340:	3724      	adds	r7, #36	; 0x24
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	58024400 	.word	0x58024400
 8010350:	03d09000 	.word	0x03d09000
 8010354:	46000000 	.word	0x46000000
 8010358:	4c742400 	.word	0x4c742400
 801035c:	4a742400 	.word	0x4a742400
 8010360:	4bb71b00 	.word	0x4bb71b00

08010364 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010364:	b480      	push	{r7}
 8010366:	b089      	sub	sp, #36	; 0x24
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801036c:	4ba1      	ldr	r3, [pc, #644]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010370:	f003 0303 	and.w	r3, r3, #3
 8010374:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010376:	4b9f      	ldr	r3, [pc, #636]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	0d1b      	lsrs	r3, r3, #20
 801037c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010380:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010382:	4b9c      	ldr	r3, [pc, #624]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010386:	0a1b      	lsrs	r3, r3, #8
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801038e:	4b99      	ldr	r3, [pc, #612]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010392:	08db      	lsrs	r3, r3, #3
 8010394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	fb02 f303 	mul.w	r3, r2, r3
 801039e:	ee07 3a90 	vmov	s15, r3
 80103a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f000 8111 	beq.w	80105d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	f000 8083 	beq.w	80104c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	2b02      	cmp	r3, #2
 80103be:	f200 80a1 	bhi.w	8010504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d003      	beq.n	80103d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d056      	beq.n	801047c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80103ce:	e099      	b.n	8010504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103d0:	4b88      	ldr	r3, [pc, #544]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f003 0320 	and.w	r3, r3, #32
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d02d      	beq.n	8010438 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103dc:	4b85      	ldr	r3, [pc, #532]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	08db      	lsrs	r3, r3, #3
 80103e2:	f003 0303 	and.w	r3, r3, #3
 80103e6:	4a84      	ldr	r2, [pc, #528]	; (80105f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80103e8:	fa22 f303 	lsr.w	r3, r2, r3
 80103ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	ee07 3a90 	vmov	s15, r3
 80103f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	ee07 3a90 	vmov	s15, r3
 80103fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010406:	4b7b      	ldr	r3, [pc, #492]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801040e:	ee07 3a90 	vmov	s15, r3
 8010412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010416:	ed97 6a03 	vldr	s12, [r7, #12]
 801041a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801041e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801042a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801042e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010436:	e087      	b.n	8010548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	ee07 3a90 	vmov	s15, r3
 801043e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010600 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801044a:	4b6a      	ldr	r3, [pc, #424]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801044e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010452:	ee07 3a90 	vmov	s15, r3
 8010456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801045a:	ed97 6a03 	vldr	s12, [r7, #12]
 801045e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801046a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801046e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801047a:	e065      	b.n	8010548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	ee07 3a90 	vmov	s15, r3
 8010482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801048a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801048e:	4b59      	ldr	r3, [pc, #356]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010496:	ee07 3a90 	vmov	s15, r3
 801049a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801049e:	ed97 6a03 	vldr	s12, [r7, #12]
 80104a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80104a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104be:	e043      	b.n	8010548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	ee07 3a90 	vmov	s15, r3
 80104c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80104ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104d2:	4b48      	ldr	r3, [pc, #288]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80104d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104da:	ee07 3a90 	vmov	s15, r3
 80104de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80104e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80104ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010502:	e021      	b.n	8010548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	ee07 3a90 	vmov	s15, r3
 801050a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801050e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010516:	4b37      	ldr	r3, [pc, #220]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801051e:	ee07 3a90 	vmov	s15, r3
 8010522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010526:	ed97 6a03 	vldr	s12, [r7, #12]
 801052a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80105fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801052e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801053a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801053e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010546:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010548:	4b2a      	ldr	r3, [pc, #168]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054c:	0a5b      	lsrs	r3, r3, #9
 801054e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010552:	ee07 3a90 	vmov	s15, r3
 8010556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801055a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801055e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010562:	edd7 6a07 	vldr	s13, [r7, #28]
 8010566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801056a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801056e:	ee17 2a90 	vmov	r2, s15
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010576:	4b1f      	ldr	r3, [pc, #124]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057a:	0c1b      	lsrs	r3, r3, #16
 801057c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010580:	ee07 3a90 	vmov	s15, r3
 8010584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801058c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010590:	edd7 6a07 	vldr	s13, [r7, #28]
 8010594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801059c:	ee17 2a90 	vmov	r2, s15
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80105a4:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80105a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a8:	0e1b      	lsrs	r3, r3, #24
 80105aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105ae:	ee07 3a90 	vmov	s15, r3
 80105b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105be:	edd7 6a07 	vldr	s13, [r7, #28]
 80105c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105ca:	ee17 2a90 	vmov	r2, s15
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80105d2:	e008      	b.n	80105e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	609a      	str	r2, [r3, #8]
}
 80105e6:	bf00      	nop
 80105e8:	3724      	adds	r7, #36	; 0x24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	58024400 	.word	0x58024400
 80105f8:	03d09000 	.word	0x03d09000
 80105fc:	46000000 	.word	0x46000000
 8010600:	4c742400 	.word	0x4c742400
 8010604:	4a742400 	.word	0x4a742400
 8010608:	4bb71b00 	.word	0x4bb71b00

0801060c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801061a:	4b53      	ldr	r3, [pc, #332]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 801061c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061e:	f003 0303 	and.w	r3, r3, #3
 8010622:	2b03      	cmp	r3, #3
 8010624:	d101      	bne.n	801062a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010626:	2301      	movs	r3, #1
 8010628:	e099      	b.n	801075e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801062a:	4b4f      	ldr	r3, [pc, #316]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a4e      	ldr	r2, [pc, #312]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010636:	f7fa f967 	bl	800a908 <HAL_GetTick>
 801063a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801063c:	e008      	b.n	8010650 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801063e:	f7fa f963 	bl	800a908 <HAL_GetTick>
 8010642:	4602      	mov	r2, r0
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	1ad3      	subs	r3, r2, r3
 8010648:	2b02      	cmp	r3, #2
 801064a:	d901      	bls.n	8010650 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801064c:	2303      	movs	r3, #3
 801064e:	e086      	b.n	801075e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010650:	4b45      	ldr	r3, [pc, #276]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1f0      	bne.n	801063e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801065c:	4b42      	ldr	r3, [pc, #264]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 801065e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010660:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	031b      	lsls	r3, r3, #12
 801066a:	493f      	ldr	r1, [pc, #252]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 801066c:	4313      	orrs	r3, r2
 801066e:	628b      	str	r3, [r1, #40]	; 0x28
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	3b01      	subs	r3, #1
 8010676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	3b01      	subs	r3, #1
 8010680:	025b      	lsls	r3, r3, #9
 8010682:	b29b      	uxth	r3, r3
 8010684:	431a      	orrs	r2, r3
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	3b01      	subs	r3, #1
 801068c:	041b      	lsls	r3, r3, #16
 801068e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010692:	431a      	orrs	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	3b01      	subs	r3, #1
 801069a:	061b      	lsls	r3, r3, #24
 801069c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80106a0:	4931      	ldr	r1, [pc, #196]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106a2:	4313      	orrs	r3, r2
 80106a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80106a6:	4b30      	ldr	r3, [pc, #192]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	695b      	ldr	r3, [r3, #20]
 80106b2:	492d      	ldr	r1, [pc, #180]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106b4:	4313      	orrs	r3, r2
 80106b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80106b8:	4b2b      	ldr	r3, [pc, #172]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106bc:	f023 0220 	bic.w	r2, r3, #32
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	699b      	ldr	r3, [r3, #24]
 80106c4:	4928      	ldr	r1, [pc, #160]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106c6:	4313      	orrs	r3, r2
 80106c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80106ca:	4b27      	ldr	r3, [pc, #156]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ce:	4a26      	ldr	r2, [pc, #152]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106d0:	f023 0310 	bic.w	r3, r3, #16
 80106d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80106d6:	4b24      	ldr	r3, [pc, #144]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106da:	4b24      	ldr	r3, [pc, #144]	; (801076c <RCCEx_PLL2_Config+0x160>)
 80106dc:	4013      	ands	r3, r2
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	69d2      	ldr	r2, [r2, #28]
 80106e2:	00d2      	lsls	r2, r2, #3
 80106e4:	4920      	ldr	r1, [pc, #128]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106e6:	4313      	orrs	r3, r2
 80106e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80106ea:	4b1f      	ldr	r3, [pc, #124]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ee:	4a1e      	ldr	r2, [pc, #120]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106f0:	f043 0310 	orr.w	r3, r3, #16
 80106f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80106fc:	4b1a      	ldr	r3, [pc, #104]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 80106fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010700:	4a19      	ldr	r2, [pc, #100]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010708:	e00f      	b.n	801072a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d106      	bne.n	801071e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010710:	4b15      	ldr	r3, [pc, #84]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010714:	4a14      	ldr	r2, [pc, #80]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801071a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801071c:	e005      	b.n	801072a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801071e:	4b12      	ldr	r3, [pc, #72]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010722:	4a11      	ldr	r2, [pc, #68]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801072a:	4b0f      	ldr	r3, [pc, #60]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4a0e      	ldr	r2, [pc, #56]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010736:	f7fa f8e7 	bl	800a908 <HAL_GetTick>
 801073a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801073c:	e008      	b.n	8010750 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801073e:	f7fa f8e3 	bl	800a908 <HAL_GetTick>
 8010742:	4602      	mov	r2, r0
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	1ad3      	subs	r3, r2, r3
 8010748:	2b02      	cmp	r3, #2
 801074a:	d901      	bls.n	8010750 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801074c:	2303      	movs	r3, #3
 801074e:	e006      	b.n	801075e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010750:	4b05      	ldr	r3, [pc, #20]	; (8010768 <RCCEx_PLL2_Config+0x15c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d0f0      	beq.n	801073e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	58024400 	.word	0x58024400
 801076c:	ffff0007 	.word	0xffff0007

08010770 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801077e:	4b53      	ldr	r3, [pc, #332]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010782:	f003 0303 	and.w	r3, r3, #3
 8010786:	2b03      	cmp	r3, #3
 8010788:	d101      	bne.n	801078e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	e099      	b.n	80108c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801078e:	4b4f      	ldr	r3, [pc, #316]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4a4e      	ldr	r2, [pc, #312]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801079a:	f7fa f8b5 	bl	800a908 <HAL_GetTick>
 801079e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107a0:	e008      	b.n	80107b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80107a2:	f7fa f8b1 	bl	800a908 <HAL_GetTick>
 80107a6:	4602      	mov	r2, r0
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d901      	bls.n	80107b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80107b0:	2303      	movs	r3, #3
 80107b2:	e086      	b.n	80108c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107b4:	4b45      	ldr	r3, [pc, #276]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1f0      	bne.n	80107a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80107c0:	4b42      	ldr	r3, [pc, #264]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 80107c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	051b      	lsls	r3, r3, #20
 80107ce:	493f      	ldr	r1, [pc, #252]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 80107d0:	4313      	orrs	r3, r2
 80107d2:	628b      	str	r3, [r1, #40]	; 0x28
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	3b01      	subs	r3, #1
 80107da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	689b      	ldr	r3, [r3, #8]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	025b      	lsls	r3, r3, #9
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	431a      	orrs	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	3b01      	subs	r3, #1
 80107f0:	041b      	lsls	r3, r3, #16
 80107f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80107f6:	431a      	orrs	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	3b01      	subs	r3, #1
 80107fe:	061b      	lsls	r3, r3, #24
 8010800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010804:	4931      	ldr	r1, [pc, #196]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010806:	4313      	orrs	r3, r2
 8010808:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801080a:	4b30      	ldr	r3, [pc, #192]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	695b      	ldr	r3, [r3, #20]
 8010816:	492d      	ldr	r1, [pc, #180]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010818:	4313      	orrs	r3, r2
 801081a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801081c:	4b2b      	ldr	r3, [pc, #172]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010820:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	699b      	ldr	r3, [r3, #24]
 8010828:	4928      	ldr	r1, [pc, #160]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801082a:	4313      	orrs	r3, r2
 801082c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801082e:	4b27      	ldr	r3, [pc, #156]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010832:	4a26      	ldr	r2, [pc, #152]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801083a:	4b24      	ldr	r3, [pc, #144]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801083c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801083e:	4b24      	ldr	r3, [pc, #144]	; (80108d0 <RCCEx_PLL3_Config+0x160>)
 8010840:	4013      	ands	r3, r2
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	69d2      	ldr	r2, [r2, #28]
 8010846:	00d2      	lsls	r2, r2, #3
 8010848:	4920      	ldr	r1, [pc, #128]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801084a:	4313      	orrs	r3, r2
 801084c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801084e:	4b1f      	ldr	r3, [pc, #124]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010852:	4a1e      	ldr	r2, [pc, #120]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d106      	bne.n	801086e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010860:	4b1a      	ldr	r3, [pc, #104]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010864:	4a19      	ldr	r2, [pc, #100]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801086a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801086c:	e00f      	b.n	801088e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d106      	bne.n	8010882 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010874:	4b15      	ldr	r3, [pc, #84]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010878:	4a14      	ldr	r2, [pc, #80]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 801087a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801087e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010880:	e005      	b.n	801088e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010882:	4b12      	ldr	r3, [pc, #72]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010886:	4a11      	ldr	r2, [pc, #68]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801088c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801088e:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a0e      	ldr	r2, [pc, #56]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 8010894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801089a:	f7fa f835 	bl	800a908 <HAL_GetTick>
 801089e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108a0:	e008      	b.n	80108b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108a2:	f7fa f831 	bl	800a908 <HAL_GetTick>
 80108a6:	4602      	mov	r2, r0
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d901      	bls.n	80108b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80108b0:	2303      	movs	r3, #3
 80108b2:	e006      	b.n	80108c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108b4:	4b05      	ldr	r3, [pc, #20]	; (80108cc <RCCEx_PLL3_Config+0x15c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d0f0      	beq.n	80108a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	58024400 	.word	0x58024400
 80108d0:	ffff0007 	.word	0xffff0007

080108d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80108e2:	2301      	movs	r3, #1
 80108e4:	e049      	b.n	801097a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d106      	bne.n	8010900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f841 	bl	8010982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2202      	movs	r2, #2
 8010904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	3304      	adds	r3, #4
 8010910:	4619      	mov	r1, r3
 8010912:	4610      	mov	r0, r2
 8010914:	f000 fa00 	bl	8010d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2201      	movs	r2, #1
 8010924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2201      	movs	r2, #1
 8010934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2201      	movs	r2, #1
 801093c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2201      	movs	r2, #1
 8010944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2201      	movs	r2, #1
 8010954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2201      	movs	r2, #1
 801095c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2201      	movs	r2, #1
 8010964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2201      	movs	r2, #1
 801096c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2201      	movs	r2, #1
 8010974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010982:	b480      	push	{r7}
 8010984:	b083      	sub	sp, #12
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801098a:	bf00      	nop
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
	...

08010998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d001      	beq.n	80109b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e054      	b.n	8010a5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2202      	movs	r2, #2
 80109b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68da      	ldr	r2, [r3, #12]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f042 0201 	orr.w	r2, r2, #1
 80109c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a26      	ldr	r2, [pc, #152]	; (8010a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d022      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109da:	d01d      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a22      	ldr	r2, [pc, #136]	; (8010a6c <HAL_TIM_Base_Start_IT+0xd4>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d018      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a21      	ldr	r2, [pc, #132]	; (8010a70 <HAL_TIM_Base_Start_IT+0xd8>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d013      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a1f      	ldr	r2, [pc, #124]	; (8010a74 <HAL_TIM_Base_Start_IT+0xdc>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d00e      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a1e      	ldr	r2, [pc, #120]	; (8010a78 <HAL_TIM_Base_Start_IT+0xe0>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d009      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a1c      	ldr	r2, [pc, #112]	; (8010a7c <HAL_TIM_Base_Start_IT+0xe4>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d004      	beq.n	8010a18 <HAL_TIM_Base_Start_IT+0x80>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4a1b      	ldr	r2, [pc, #108]	; (8010a80 <HAL_TIM_Base_Start_IT+0xe8>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d115      	bne.n	8010a44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	689a      	ldr	r2, [r3, #8]
 8010a1e:	4b19      	ldr	r3, [pc, #100]	; (8010a84 <HAL_TIM_Base_Start_IT+0xec>)
 8010a20:	4013      	ands	r3, r2
 8010a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2b06      	cmp	r3, #6
 8010a28:	d015      	beq.n	8010a56 <HAL_TIM_Base_Start_IT+0xbe>
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a30:	d011      	beq.n	8010a56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f042 0201 	orr.w	r2, r2, #1
 8010a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a42:	e008      	b.n	8010a56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f042 0201 	orr.w	r2, r2, #1
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	e000      	b.n	8010a58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3714      	adds	r7, #20
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	40010000 	.word	0x40010000
 8010a6c:	40000400 	.word	0x40000400
 8010a70:	40000800 	.word	0x40000800
 8010a74:	40000c00 	.word	0x40000c00
 8010a78:	40010400 	.word	0x40010400
 8010a7c:	40001800 	.word	0x40001800
 8010a80:	40014000 	.word	0x40014000
 8010a84:	00010007 	.word	0x00010007

08010a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	f003 0302 	and.w	r3, r3, #2
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d122      	bne.n	8010ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	f003 0302 	and.w	r3, r3, #2
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	d11b      	bne.n	8010ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f06f 0202 	mvn.w	r2, #2
 8010ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2201      	movs	r2, #1
 8010aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	f003 0303 	and.w	r3, r3, #3
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d003      	beq.n	8010ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 f905 	bl	8010cda <HAL_TIM_IC_CaptureCallback>
 8010ad0:	e005      	b.n	8010ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f8f7 	bl	8010cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f908 	bl	8010cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	691b      	ldr	r3, [r3, #16]
 8010aea:	f003 0304 	and.w	r3, r3, #4
 8010aee:	2b04      	cmp	r3, #4
 8010af0:	d122      	bne.n	8010b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	f003 0304 	and.w	r3, r3, #4
 8010afc:	2b04      	cmp	r3, #4
 8010afe:	d11b      	bne.n	8010b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f06f 0204 	mvn.w	r2, #4
 8010b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2202      	movs	r2, #2
 8010b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	699b      	ldr	r3, [r3, #24]
 8010b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f000 f8db 	bl	8010cda <HAL_TIM_IC_CaptureCallback>
 8010b24:	e005      	b.n	8010b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 f8cd 	bl	8010cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f8de 	bl	8010cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	f003 0308 	and.w	r3, r3, #8
 8010b42:	2b08      	cmp	r3, #8
 8010b44:	d122      	bne.n	8010b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	f003 0308 	and.w	r3, r3, #8
 8010b50:	2b08      	cmp	r3, #8
 8010b52:	d11b      	bne.n	8010b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f06f 0208 	mvn.w	r2, #8
 8010b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2204      	movs	r2, #4
 8010b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	69db      	ldr	r3, [r3, #28]
 8010b6a:	f003 0303 	and.w	r3, r3, #3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d003      	beq.n	8010b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 f8b1 	bl	8010cda <HAL_TIM_IC_CaptureCallback>
 8010b78:	e005      	b.n	8010b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 f8a3 	bl	8010cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 f8b4 	bl	8010cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	f003 0310 	and.w	r3, r3, #16
 8010b96:	2b10      	cmp	r3, #16
 8010b98:	d122      	bne.n	8010be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	f003 0310 	and.w	r3, r3, #16
 8010ba4:	2b10      	cmp	r3, #16
 8010ba6:	d11b      	bne.n	8010be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f06f 0210 	mvn.w	r2, #16
 8010bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2208      	movs	r2, #8
 8010bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	69db      	ldr	r3, [r3, #28]
 8010bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d003      	beq.n	8010bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f000 f887 	bl	8010cda <HAL_TIM_IC_CaptureCallback>
 8010bcc:	e005      	b.n	8010bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f879 	bl	8010cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 f88a 	bl	8010cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d10e      	bne.n	8010c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d107      	bne.n	8010c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f06f 0201 	mvn.w	r2, #1
 8010c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7f0 fa0c 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c16:	2b80      	cmp	r3, #128	; 0x80
 8010c18:	d10e      	bne.n	8010c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c24:	2b80      	cmp	r3, #128	; 0x80
 8010c26:	d107      	bne.n	8010c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 f914 	bl	8010e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c46:	d10e      	bne.n	8010c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c52:	2b80      	cmp	r3, #128	; 0x80
 8010c54:	d107      	bne.n	8010c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 f907 	bl	8010e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	691b      	ldr	r3, [r3, #16]
 8010c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c70:	2b40      	cmp	r3, #64	; 0x40
 8010c72:	d10e      	bne.n	8010c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c7e:	2b40      	cmp	r3, #64	; 0x40
 8010c80:	d107      	bne.n	8010c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 f838 	bl	8010d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	691b      	ldr	r3, [r3, #16]
 8010c98:	f003 0320 	and.w	r3, r3, #32
 8010c9c:	2b20      	cmp	r3, #32
 8010c9e:	d10e      	bne.n	8010cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	f003 0320 	and.w	r3, r3, #32
 8010caa:	2b20      	cmp	r3, #32
 8010cac:	d107      	bne.n	8010cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f06f 0220 	mvn.w	r2, #32
 8010cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 f8c7 	bl	8010e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010cbe:	bf00      	nop
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}

08010cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010cc6:	b480      	push	{r7}
 8010cc8:	b083      	sub	sp, #12
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010cce:	bf00      	nop
 8010cd0:	370c      	adds	r7, #12
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr

08010cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b083      	sub	sp, #12
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ce2:	bf00      	nop
 8010ce4:	370c      	adds	r7, #12
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr

08010cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010cee:	b480      	push	{r7}
 8010cf0:	b083      	sub	sp, #12
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010cf6:	bf00      	nop
 8010cf8:	370c      	adds	r7, #12
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b083      	sub	sp, #12
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d0a:	bf00      	nop
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
	...

08010d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4a40      	ldr	r2, [pc, #256]	; (8010e2c <TIM_Base_SetConfig+0x114>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d013      	beq.n	8010d58 <TIM_Base_SetConfig+0x40>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d36:	d00f      	beq.n	8010d58 <TIM_Base_SetConfig+0x40>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4a3d      	ldr	r2, [pc, #244]	; (8010e30 <TIM_Base_SetConfig+0x118>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d00b      	beq.n	8010d58 <TIM_Base_SetConfig+0x40>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a3c      	ldr	r2, [pc, #240]	; (8010e34 <TIM_Base_SetConfig+0x11c>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d007      	beq.n	8010d58 <TIM_Base_SetConfig+0x40>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4a3b      	ldr	r2, [pc, #236]	; (8010e38 <TIM_Base_SetConfig+0x120>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d003      	beq.n	8010d58 <TIM_Base_SetConfig+0x40>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4a3a      	ldr	r2, [pc, #232]	; (8010e3c <TIM_Base_SetConfig+0x124>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d108      	bne.n	8010d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4a2f      	ldr	r2, [pc, #188]	; (8010e2c <TIM_Base_SetConfig+0x114>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d01f      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d78:	d01b      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4a2c      	ldr	r2, [pc, #176]	; (8010e30 <TIM_Base_SetConfig+0x118>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d017      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	4a2b      	ldr	r2, [pc, #172]	; (8010e34 <TIM_Base_SetConfig+0x11c>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d013      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4a2a      	ldr	r2, [pc, #168]	; (8010e38 <TIM_Base_SetConfig+0x120>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d00f      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4a29      	ldr	r2, [pc, #164]	; (8010e3c <TIM_Base_SetConfig+0x124>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d00b      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4a28      	ldr	r2, [pc, #160]	; (8010e40 <TIM_Base_SetConfig+0x128>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d007      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4a27      	ldr	r2, [pc, #156]	; (8010e44 <TIM_Base_SetConfig+0x12c>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d003      	beq.n	8010db2 <TIM_Base_SetConfig+0x9a>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a26      	ldr	r2, [pc, #152]	; (8010e48 <TIM_Base_SetConfig+0x130>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d108      	bne.n	8010dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	68fa      	ldr	r2, [r7, #12]
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	695b      	ldr	r3, [r3, #20]
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	689a      	ldr	r2, [r3, #8]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	4a10      	ldr	r2, [pc, #64]	; (8010e2c <TIM_Base_SetConfig+0x114>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d00f      	beq.n	8010e10 <TIM_Base_SetConfig+0xf8>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4a12      	ldr	r2, [pc, #72]	; (8010e3c <TIM_Base_SetConfig+0x124>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d00b      	beq.n	8010e10 <TIM_Base_SetConfig+0xf8>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4a11      	ldr	r2, [pc, #68]	; (8010e40 <TIM_Base_SetConfig+0x128>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d007      	beq.n	8010e10 <TIM_Base_SetConfig+0xf8>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a10      	ldr	r2, [pc, #64]	; (8010e44 <TIM_Base_SetConfig+0x12c>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d003      	beq.n	8010e10 <TIM_Base_SetConfig+0xf8>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a0f      	ldr	r2, [pc, #60]	; (8010e48 <TIM_Base_SetConfig+0x130>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d103      	bne.n	8010e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	691a      	ldr	r2, [r3, #16]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	615a      	str	r2, [r3, #20]
}
 8010e1e:	bf00      	nop
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	40010000 	.word	0x40010000
 8010e30:	40000400 	.word	0x40000400
 8010e34:	40000800 	.word	0x40000800
 8010e38:	40000c00 	.word	0x40000c00
 8010e3c:	40010400 	.word	0x40010400
 8010e40:	40014000 	.word	0x40014000
 8010e44:	40014400 	.word	0x40014400
 8010e48:	40014800 	.word	0x40014800

08010e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b083      	sub	sp, #12
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e68:	bf00      	nop
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010e7c:	bf00      	nop
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d101      	bne.n	8010e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	e042      	b.n	8010f20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d106      	bne.n	8010eb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7f0 fb2b 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2224      	movs	r2, #36	; 0x24
 8010eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f022 0201 	bic.w	r2, r2, #1
 8010ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f8ba 	bl	8011044 <UART_SetConfig>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d101      	bne.n	8010eda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e022      	b.n	8010f20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d002      	beq.n	8010ee8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 ff1a 	bl	8011d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	685a      	ldr	r2, [r3, #4]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	689a      	ldr	r2, [r3, #8]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f042 0201 	orr.w	r2, r2, #1
 8010f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 ffa1 	bl	8011e60 <UART_CheckIdleState>
 8010f1e:	4603      	mov	r3, r0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	af02      	add	r7, sp, #8
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	603b      	str	r3, [r7, #0]
 8010f34:	4613      	mov	r3, r2
 8010f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f3e:	2b20      	cmp	r3, #32
 8010f40:	d17b      	bne.n	801103a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d002      	beq.n	8010f4e <HAL_UART_Transmit+0x26>
 8010f48:	88fb      	ldrh	r3, [r7, #6]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d101      	bne.n	8010f52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e074      	b.n	801103c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2200      	movs	r2, #0
 8010f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2221      	movs	r2, #33	; 0x21
 8010f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010f62:	f7f9 fcd1 	bl	800a908 <HAL_GetTick>
 8010f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	88fa      	ldrh	r2, [r7, #6]
 8010f6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	88fa      	ldrh	r2, [r7, #6]
 8010f74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f80:	d108      	bne.n	8010f94 <HAL_UART_Transmit+0x6c>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	691b      	ldr	r3, [r3, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d104      	bne.n	8010f94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	61bb      	str	r3, [r7, #24]
 8010f92:	e003      	b.n	8010f9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010f9c:	e030      	b.n	8011000 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2180      	movs	r1, #128	; 0x80
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f001 f803 	bl	8011fb4 <UART_WaitOnFlagUntilTimeout>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d005      	beq.n	8010fc0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2220      	movs	r2, #32
 8010fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	e03d      	b.n	801103c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10b      	bne.n	8010fde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	3302      	adds	r3, #2
 8010fda:	61bb      	str	r3, [r7, #24]
 8010fdc:	e007      	b.n	8010fee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	781a      	ldrb	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	3301      	adds	r3, #1
 8010fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011006:	b29b      	uxth	r3, r3
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1c8      	bne.n	8010f9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	2200      	movs	r2, #0
 8011014:	2140      	movs	r1, #64	; 0x40
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f000 ffcc 	bl	8011fb4 <UART_WaitOnFlagUntilTimeout>
 801101c:	4603      	mov	r3, r0
 801101e:	2b00      	cmp	r3, #0
 8011020:	d005      	beq.n	801102e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2220      	movs	r2, #32
 8011026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801102a:	2303      	movs	r3, #3
 801102c:	e006      	b.n	801103c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2220      	movs	r2, #32
 8011032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	e000      	b.n	801103c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801103a:	2302      	movs	r3, #2
  }
}
 801103c:	4618      	mov	r0, r3
 801103e:	3720      	adds	r7, #32
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011048:	b092      	sub	sp, #72	; 0x48
 801104a:	af00      	add	r7, sp, #0
 801104c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801104e:	2300      	movs	r3, #0
 8011050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	689a      	ldr	r2, [r3, #8]
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	431a      	orrs	r2, r3
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	431a      	orrs	r2, r3
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	69db      	ldr	r3, [r3, #28]
 8011068:	4313      	orrs	r3, r2
 801106a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	4bbe      	ldr	r3, [pc, #760]	; (801136c <UART_SetConfig+0x328>)
 8011074:	4013      	ands	r3, r2
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	6812      	ldr	r2, [r2, #0]
 801107a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801107c:	430b      	orrs	r3, r1
 801107e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	430a      	orrs	r2, r1
 8011094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4ab3      	ldr	r2, [pc, #716]	; (8011370 <UART_SetConfig+0x32c>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d004      	beq.n	80110b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110ac:	4313      	orrs	r3, r2
 80110ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	689a      	ldr	r2, [r3, #8]
 80110b6:	4baf      	ldr	r3, [pc, #700]	; (8011374 <UART_SetConfig+0x330>)
 80110b8:	4013      	ands	r3, r2
 80110ba:	697a      	ldr	r2, [r7, #20]
 80110bc:	6812      	ldr	r2, [r2, #0]
 80110be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110c0:	430b      	orrs	r3, r1
 80110c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ca:	f023 010f 	bic.w	r1, r3, #15
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	430a      	orrs	r2, r1
 80110d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4aa6      	ldr	r2, [pc, #664]	; (8011378 <UART_SetConfig+0x334>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d177      	bne.n	80111d4 <UART_SetConfig+0x190>
 80110e4:	4ba5      	ldr	r3, [pc, #660]	; (801137c <UART_SetConfig+0x338>)
 80110e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110ec:	2b28      	cmp	r3, #40	; 0x28
 80110ee:	d86d      	bhi.n	80111cc <UART_SetConfig+0x188>
 80110f0:	a201      	add	r2, pc, #4	; (adr r2, 80110f8 <UART_SetConfig+0xb4>)
 80110f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f6:	bf00      	nop
 80110f8:	0801119d 	.word	0x0801119d
 80110fc:	080111cd 	.word	0x080111cd
 8011100:	080111cd 	.word	0x080111cd
 8011104:	080111cd 	.word	0x080111cd
 8011108:	080111cd 	.word	0x080111cd
 801110c:	080111cd 	.word	0x080111cd
 8011110:	080111cd 	.word	0x080111cd
 8011114:	080111cd 	.word	0x080111cd
 8011118:	080111a5 	.word	0x080111a5
 801111c:	080111cd 	.word	0x080111cd
 8011120:	080111cd 	.word	0x080111cd
 8011124:	080111cd 	.word	0x080111cd
 8011128:	080111cd 	.word	0x080111cd
 801112c:	080111cd 	.word	0x080111cd
 8011130:	080111cd 	.word	0x080111cd
 8011134:	080111cd 	.word	0x080111cd
 8011138:	080111ad 	.word	0x080111ad
 801113c:	080111cd 	.word	0x080111cd
 8011140:	080111cd 	.word	0x080111cd
 8011144:	080111cd 	.word	0x080111cd
 8011148:	080111cd 	.word	0x080111cd
 801114c:	080111cd 	.word	0x080111cd
 8011150:	080111cd 	.word	0x080111cd
 8011154:	080111cd 	.word	0x080111cd
 8011158:	080111b5 	.word	0x080111b5
 801115c:	080111cd 	.word	0x080111cd
 8011160:	080111cd 	.word	0x080111cd
 8011164:	080111cd 	.word	0x080111cd
 8011168:	080111cd 	.word	0x080111cd
 801116c:	080111cd 	.word	0x080111cd
 8011170:	080111cd 	.word	0x080111cd
 8011174:	080111cd 	.word	0x080111cd
 8011178:	080111bd 	.word	0x080111bd
 801117c:	080111cd 	.word	0x080111cd
 8011180:	080111cd 	.word	0x080111cd
 8011184:	080111cd 	.word	0x080111cd
 8011188:	080111cd 	.word	0x080111cd
 801118c:	080111cd 	.word	0x080111cd
 8011190:	080111cd 	.word	0x080111cd
 8011194:	080111cd 	.word	0x080111cd
 8011198:	080111c5 	.word	0x080111c5
 801119c:	2301      	movs	r3, #1
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e326      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111a4:	2304      	movs	r3, #4
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e322      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111ac:	2308      	movs	r3, #8
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e31e      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111b4:	2310      	movs	r3, #16
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e31a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111bc:	2320      	movs	r3, #32
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e316      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e312      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e30e      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a69      	ldr	r2, [pc, #420]	; (8011380 <UART_SetConfig+0x33c>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d130      	bne.n	8011240 <UART_SetConfig+0x1fc>
 80111de:	4b67      	ldr	r3, [pc, #412]	; (801137c <UART_SetConfig+0x338>)
 80111e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111e2:	f003 0307 	and.w	r3, r3, #7
 80111e6:	2b05      	cmp	r3, #5
 80111e8:	d826      	bhi.n	8011238 <UART_SetConfig+0x1f4>
 80111ea:	a201      	add	r2, pc, #4	; (adr r2, 80111f0 <UART_SetConfig+0x1ac>)
 80111ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f0:	08011209 	.word	0x08011209
 80111f4:	08011211 	.word	0x08011211
 80111f8:	08011219 	.word	0x08011219
 80111fc:	08011221 	.word	0x08011221
 8011200:	08011229 	.word	0x08011229
 8011204:	08011231 	.word	0x08011231
 8011208:	2300      	movs	r3, #0
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e2f0      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011210:	2304      	movs	r3, #4
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e2ec      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011218:	2308      	movs	r3, #8
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e2e8      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011220:	2310      	movs	r3, #16
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e2e4      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011228:	2320      	movs	r3, #32
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e2e0      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011230:	2340      	movs	r3, #64	; 0x40
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e2dc      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011238:	2380      	movs	r3, #128	; 0x80
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e2d8      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4a4f      	ldr	r2, [pc, #316]	; (8011384 <UART_SetConfig+0x340>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d130      	bne.n	80112ac <UART_SetConfig+0x268>
 801124a:	4b4c      	ldr	r3, [pc, #304]	; (801137c <UART_SetConfig+0x338>)
 801124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801124e:	f003 0307 	and.w	r3, r3, #7
 8011252:	2b05      	cmp	r3, #5
 8011254:	d826      	bhi.n	80112a4 <UART_SetConfig+0x260>
 8011256:	a201      	add	r2, pc, #4	; (adr r2, 801125c <UART_SetConfig+0x218>)
 8011258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125c:	08011275 	.word	0x08011275
 8011260:	0801127d 	.word	0x0801127d
 8011264:	08011285 	.word	0x08011285
 8011268:	0801128d 	.word	0x0801128d
 801126c:	08011295 	.word	0x08011295
 8011270:	0801129d 	.word	0x0801129d
 8011274:	2300      	movs	r3, #0
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e2ba      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801127c:	2304      	movs	r3, #4
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e2b6      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011284:	2308      	movs	r3, #8
 8011286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128a:	e2b2      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801128c:	2310      	movs	r3, #16
 801128e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011292:	e2ae      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011294:	2320      	movs	r3, #32
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e2aa      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801129c:	2340      	movs	r3, #64	; 0x40
 801129e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a2:	e2a6      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80112a4:	2380      	movs	r3, #128	; 0x80
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e2a2      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a35      	ldr	r2, [pc, #212]	; (8011388 <UART_SetConfig+0x344>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d130      	bne.n	8011318 <UART_SetConfig+0x2d4>
 80112b6:	4b31      	ldr	r3, [pc, #196]	; (801137c <UART_SetConfig+0x338>)
 80112b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ba:	f003 0307 	and.w	r3, r3, #7
 80112be:	2b05      	cmp	r3, #5
 80112c0:	d826      	bhi.n	8011310 <UART_SetConfig+0x2cc>
 80112c2:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <UART_SetConfig+0x284>)
 80112c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c8:	080112e1 	.word	0x080112e1
 80112cc:	080112e9 	.word	0x080112e9
 80112d0:	080112f1 	.word	0x080112f1
 80112d4:	080112f9 	.word	0x080112f9
 80112d8:	08011301 	.word	0x08011301
 80112dc:	08011309 	.word	0x08011309
 80112e0:	2300      	movs	r3, #0
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e284      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80112e8:	2304      	movs	r3, #4
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e280      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80112f0:	2308      	movs	r3, #8
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e27c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80112f8:	2310      	movs	r3, #16
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e278      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011300:	2320      	movs	r3, #32
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e274      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011308:	2340      	movs	r3, #64	; 0x40
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e270      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011310:	2380      	movs	r3, #128	; 0x80
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e26c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a1b      	ldr	r2, [pc, #108]	; (801138c <UART_SetConfig+0x348>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d142      	bne.n	80113a8 <UART_SetConfig+0x364>
 8011322:	4b16      	ldr	r3, [pc, #88]	; (801137c <UART_SetConfig+0x338>)
 8011324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011326:	f003 0307 	and.w	r3, r3, #7
 801132a:	2b05      	cmp	r3, #5
 801132c:	d838      	bhi.n	80113a0 <UART_SetConfig+0x35c>
 801132e:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <UART_SetConfig+0x2f0>)
 8011330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011334:	0801134d 	.word	0x0801134d
 8011338:	08011355 	.word	0x08011355
 801133c:	0801135d 	.word	0x0801135d
 8011340:	08011365 	.word	0x08011365
 8011344:	08011391 	.word	0x08011391
 8011348:	08011399 	.word	0x08011399
 801134c:	2300      	movs	r3, #0
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e24e      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011354:	2304      	movs	r3, #4
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e24a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801135c:	2308      	movs	r3, #8
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e246      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011364:	2310      	movs	r3, #16
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e242      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801136c:	cfff69f3 	.word	0xcfff69f3
 8011370:	58000c00 	.word	0x58000c00
 8011374:	11fff4ff 	.word	0x11fff4ff
 8011378:	40011000 	.word	0x40011000
 801137c:	58024400 	.word	0x58024400
 8011380:	40004400 	.word	0x40004400
 8011384:	40004800 	.word	0x40004800
 8011388:	40004c00 	.word	0x40004c00
 801138c:	40005000 	.word	0x40005000
 8011390:	2320      	movs	r3, #32
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e22c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011398:	2340      	movs	r3, #64	; 0x40
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e228      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80113a0:	2380      	movs	r3, #128	; 0x80
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e224      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4ab1      	ldr	r2, [pc, #708]	; (8011674 <UART_SetConfig+0x630>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d176      	bne.n	80114a0 <UART_SetConfig+0x45c>
 80113b2:	4bb1      	ldr	r3, [pc, #708]	; (8011678 <UART_SetConfig+0x634>)
 80113b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113ba:	2b28      	cmp	r3, #40	; 0x28
 80113bc:	d86c      	bhi.n	8011498 <UART_SetConfig+0x454>
 80113be:	a201      	add	r2, pc, #4	; (adr r2, 80113c4 <UART_SetConfig+0x380>)
 80113c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c4:	08011469 	.word	0x08011469
 80113c8:	08011499 	.word	0x08011499
 80113cc:	08011499 	.word	0x08011499
 80113d0:	08011499 	.word	0x08011499
 80113d4:	08011499 	.word	0x08011499
 80113d8:	08011499 	.word	0x08011499
 80113dc:	08011499 	.word	0x08011499
 80113e0:	08011499 	.word	0x08011499
 80113e4:	08011471 	.word	0x08011471
 80113e8:	08011499 	.word	0x08011499
 80113ec:	08011499 	.word	0x08011499
 80113f0:	08011499 	.word	0x08011499
 80113f4:	08011499 	.word	0x08011499
 80113f8:	08011499 	.word	0x08011499
 80113fc:	08011499 	.word	0x08011499
 8011400:	08011499 	.word	0x08011499
 8011404:	08011479 	.word	0x08011479
 8011408:	08011499 	.word	0x08011499
 801140c:	08011499 	.word	0x08011499
 8011410:	08011499 	.word	0x08011499
 8011414:	08011499 	.word	0x08011499
 8011418:	08011499 	.word	0x08011499
 801141c:	08011499 	.word	0x08011499
 8011420:	08011499 	.word	0x08011499
 8011424:	08011481 	.word	0x08011481
 8011428:	08011499 	.word	0x08011499
 801142c:	08011499 	.word	0x08011499
 8011430:	08011499 	.word	0x08011499
 8011434:	08011499 	.word	0x08011499
 8011438:	08011499 	.word	0x08011499
 801143c:	08011499 	.word	0x08011499
 8011440:	08011499 	.word	0x08011499
 8011444:	08011489 	.word	0x08011489
 8011448:	08011499 	.word	0x08011499
 801144c:	08011499 	.word	0x08011499
 8011450:	08011499 	.word	0x08011499
 8011454:	08011499 	.word	0x08011499
 8011458:	08011499 	.word	0x08011499
 801145c:	08011499 	.word	0x08011499
 8011460:	08011499 	.word	0x08011499
 8011464:	08011491 	.word	0x08011491
 8011468:	2301      	movs	r3, #1
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e1c0      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011470:	2304      	movs	r3, #4
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e1bc      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011478:	2308      	movs	r3, #8
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e1b8      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011480:	2310      	movs	r3, #16
 8011482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011486:	e1b4      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011488:	2320      	movs	r3, #32
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e1b0      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011490:	2340      	movs	r3, #64	; 0x40
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e1ac      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e1a8      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4a75      	ldr	r2, [pc, #468]	; (801167c <UART_SetConfig+0x638>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d130      	bne.n	801150c <UART_SetConfig+0x4c8>
 80114aa:	4b73      	ldr	r3, [pc, #460]	; (8011678 <UART_SetConfig+0x634>)
 80114ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ae:	f003 0307 	and.w	r3, r3, #7
 80114b2:	2b05      	cmp	r3, #5
 80114b4:	d826      	bhi.n	8011504 <UART_SetConfig+0x4c0>
 80114b6:	a201      	add	r2, pc, #4	; (adr r2, 80114bc <UART_SetConfig+0x478>)
 80114b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114bc:	080114d5 	.word	0x080114d5
 80114c0:	080114dd 	.word	0x080114dd
 80114c4:	080114e5 	.word	0x080114e5
 80114c8:	080114ed 	.word	0x080114ed
 80114cc:	080114f5 	.word	0x080114f5
 80114d0:	080114fd 	.word	0x080114fd
 80114d4:	2300      	movs	r3, #0
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e18a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114dc:	2304      	movs	r3, #4
 80114de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e2:	e186      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114e4:	2308      	movs	r3, #8
 80114e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ea:	e182      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114ec:	2310      	movs	r3, #16
 80114ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114f2:	e17e      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114f4:	2320      	movs	r3, #32
 80114f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fa:	e17a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80114fc:	2340      	movs	r3, #64	; 0x40
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e176      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011504:	2380      	movs	r3, #128	; 0x80
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e172      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a5b      	ldr	r2, [pc, #364]	; (8011680 <UART_SetConfig+0x63c>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d130      	bne.n	8011578 <UART_SetConfig+0x534>
 8011516:	4b58      	ldr	r3, [pc, #352]	; (8011678 <UART_SetConfig+0x634>)
 8011518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801151a:	f003 0307 	and.w	r3, r3, #7
 801151e:	2b05      	cmp	r3, #5
 8011520:	d826      	bhi.n	8011570 <UART_SetConfig+0x52c>
 8011522:	a201      	add	r2, pc, #4	; (adr r2, 8011528 <UART_SetConfig+0x4e4>)
 8011524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011528:	08011541 	.word	0x08011541
 801152c:	08011549 	.word	0x08011549
 8011530:	08011551 	.word	0x08011551
 8011534:	08011559 	.word	0x08011559
 8011538:	08011561 	.word	0x08011561
 801153c:	08011569 	.word	0x08011569
 8011540:	2300      	movs	r3, #0
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e154      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011548:	2304      	movs	r3, #4
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e150      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011550:	2308      	movs	r3, #8
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e14c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011558:	2310      	movs	r3, #16
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e148      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011560:	2320      	movs	r3, #32
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e144      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011568:	2340      	movs	r3, #64	; 0x40
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e140      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011570:	2380      	movs	r3, #128	; 0x80
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e13c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a41      	ldr	r2, [pc, #260]	; (8011684 <UART_SetConfig+0x640>)
 801157e:	4293      	cmp	r3, r2
 8011580:	f040 8082 	bne.w	8011688 <UART_SetConfig+0x644>
 8011584:	4b3c      	ldr	r3, [pc, #240]	; (8011678 <UART_SetConfig+0x634>)
 8011586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801158c:	2b28      	cmp	r3, #40	; 0x28
 801158e:	d86d      	bhi.n	801166c <UART_SetConfig+0x628>
 8011590:	a201      	add	r2, pc, #4	; (adr r2, 8011598 <UART_SetConfig+0x554>)
 8011592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011596:	bf00      	nop
 8011598:	0801163d 	.word	0x0801163d
 801159c:	0801166d 	.word	0x0801166d
 80115a0:	0801166d 	.word	0x0801166d
 80115a4:	0801166d 	.word	0x0801166d
 80115a8:	0801166d 	.word	0x0801166d
 80115ac:	0801166d 	.word	0x0801166d
 80115b0:	0801166d 	.word	0x0801166d
 80115b4:	0801166d 	.word	0x0801166d
 80115b8:	08011645 	.word	0x08011645
 80115bc:	0801166d 	.word	0x0801166d
 80115c0:	0801166d 	.word	0x0801166d
 80115c4:	0801166d 	.word	0x0801166d
 80115c8:	0801166d 	.word	0x0801166d
 80115cc:	0801166d 	.word	0x0801166d
 80115d0:	0801166d 	.word	0x0801166d
 80115d4:	0801166d 	.word	0x0801166d
 80115d8:	0801164d 	.word	0x0801164d
 80115dc:	0801166d 	.word	0x0801166d
 80115e0:	0801166d 	.word	0x0801166d
 80115e4:	0801166d 	.word	0x0801166d
 80115e8:	0801166d 	.word	0x0801166d
 80115ec:	0801166d 	.word	0x0801166d
 80115f0:	0801166d 	.word	0x0801166d
 80115f4:	0801166d 	.word	0x0801166d
 80115f8:	08011655 	.word	0x08011655
 80115fc:	0801166d 	.word	0x0801166d
 8011600:	0801166d 	.word	0x0801166d
 8011604:	0801166d 	.word	0x0801166d
 8011608:	0801166d 	.word	0x0801166d
 801160c:	0801166d 	.word	0x0801166d
 8011610:	0801166d 	.word	0x0801166d
 8011614:	0801166d 	.word	0x0801166d
 8011618:	0801165d 	.word	0x0801165d
 801161c:	0801166d 	.word	0x0801166d
 8011620:	0801166d 	.word	0x0801166d
 8011624:	0801166d 	.word	0x0801166d
 8011628:	0801166d 	.word	0x0801166d
 801162c:	0801166d 	.word	0x0801166d
 8011630:	0801166d 	.word	0x0801166d
 8011634:	0801166d 	.word	0x0801166d
 8011638:	08011665 	.word	0x08011665
 801163c:	2301      	movs	r3, #1
 801163e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011642:	e0d6      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011644:	2304      	movs	r3, #4
 8011646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164a:	e0d2      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801164c:	2308      	movs	r3, #8
 801164e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011652:	e0ce      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011654:	2310      	movs	r3, #16
 8011656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165a:	e0ca      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801165c:	2320      	movs	r3, #32
 801165e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011662:	e0c6      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011664:	2340      	movs	r3, #64	; 0x40
 8011666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166a:	e0c2      	b.n	80117f2 <UART_SetConfig+0x7ae>
 801166c:	2380      	movs	r3, #128	; 0x80
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e0be      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011674:	40011400 	.word	0x40011400
 8011678:	58024400 	.word	0x58024400
 801167c:	40007800 	.word	0x40007800
 8011680:	40007c00 	.word	0x40007c00
 8011684:	40011800 	.word	0x40011800
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4aad      	ldr	r2, [pc, #692]	; (8011944 <UART_SetConfig+0x900>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d176      	bne.n	8011780 <UART_SetConfig+0x73c>
 8011692:	4bad      	ldr	r3, [pc, #692]	; (8011948 <UART_SetConfig+0x904>)
 8011694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801169a:	2b28      	cmp	r3, #40	; 0x28
 801169c:	d86c      	bhi.n	8011778 <UART_SetConfig+0x734>
 801169e:	a201      	add	r2, pc, #4	; (adr r2, 80116a4 <UART_SetConfig+0x660>)
 80116a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a4:	08011749 	.word	0x08011749
 80116a8:	08011779 	.word	0x08011779
 80116ac:	08011779 	.word	0x08011779
 80116b0:	08011779 	.word	0x08011779
 80116b4:	08011779 	.word	0x08011779
 80116b8:	08011779 	.word	0x08011779
 80116bc:	08011779 	.word	0x08011779
 80116c0:	08011779 	.word	0x08011779
 80116c4:	08011751 	.word	0x08011751
 80116c8:	08011779 	.word	0x08011779
 80116cc:	08011779 	.word	0x08011779
 80116d0:	08011779 	.word	0x08011779
 80116d4:	08011779 	.word	0x08011779
 80116d8:	08011779 	.word	0x08011779
 80116dc:	08011779 	.word	0x08011779
 80116e0:	08011779 	.word	0x08011779
 80116e4:	08011759 	.word	0x08011759
 80116e8:	08011779 	.word	0x08011779
 80116ec:	08011779 	.word	0x08011779
 80116f0:	08011779 	.word	0x08011779
 80116f4:	08011779 	.word	0x08011779
 80116f8:	08011779 	.word	0x08011779
 80116fc:	08011779 	.word	0x08011779
 8011700:	08011779 	.word	0x08011779
 8011704:	08011761 	.word	0x08011761
 8011708:	08011779 	.word	0x08011779
 801170c:	08011779 	.word	0x08011779
 8011710:	08011779 	.word	0x08011779
 8011714:	08011779 	.word	0x08011779
 8011718:	08011779 	.word	0x08011779
 801171c:	08011779 	.word	0x08011779
 8011720:	08011779 	.word	0x08011779
 8011724:	08011769 	.word	0x08011769
 8011728:	08011779 	.word	0x08011779
 801172c:	08011779 	.word	0x08011779
 8011730:	08011779 	.word	0x08011779
 8011734:	08011779 	.word	0x08011779
 8011738:	08011779 	.word	0x08011779
 801173c:	08011779 	.word	0x08011779
 8011740:	08011779 	.word	0x08011779
 8011744:	08011771 	.word	0x08011771
 8011748:	2301      	movs	r3, #1
 801174a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174e:	e050      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011750:	2304      	movs	r3, #4
 8011752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011756:	e04c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011758:	2308      	movs	r3, #8
 801175a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175e:	e048      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011760:	2310      	movs	r3, #16
 8011762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011766:	e044      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011768:	2320      	movs	r3, #32
 801176a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176e:	e040      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011770:	2340      	movs	r3, #64	; 0x40
 8011772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011776:	e03c      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011778:	2380      	movs	r3, #128	; 0x80
 801177a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177e:	e038      	b.n	80117f2 <UART_SetConfig+0x7ae>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	4a71      	ldr	r2, [pc, #452]	; (801194c <UART_SetConfig+0x908>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d130      	bne.n	80117ec <UART_SetConfig+0x7a8>
 801178a:	4b6f      	ldr	r3, [pc, #444]	; (8011948 <UART_SetConfig+0x904>)
 801178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801178e:	f003 0307 	and.w	r3, r3, #7
 8011792:	2b05      	cmp	r3, #5
 8011794:	d826      	bhi.n	80117e4 <UART_SetConfig+0x7a0>
 8011796:	a201      	add	r2, pc, #4	; (adr r2, 801179c <UART_SetConfig+0x758>)
 8011798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801179c:	080117b5 	.word	0x080117b5
 80117a0:	080117bd 	.word	0x080117bd
 80117a4:	080117c5 	.word	0x080117c5
 80117a8:	080117cd 	.word	0x080117cd
 80117ac:	080117d5 	.word	0x080117d5
 80117b0:	080117dd 	.word	0x080117dd
 80117b4:	2302      	movs	r3, #2
 80117b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ba:	e01a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117bc:	2304      	movs	r3, #4
 80117be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c2:	e016      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117c4:	2308      	movs	r3, #8
 80117c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ca:	e012      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117cc:	2310      	movs	r3, #16
 80117ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d2:	e00e      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117d4:	2320      	movs	r3, #32
 80117d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117da:	e00a      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117dc:	2340      	movs	r3, #64	; 0x40
 80117de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e2:	e006      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117e4:	2380      	movs	r3, #128	; 0x80
 80117e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ea:	e002      	b.n	80117f2 <UART_SetConfig+0x7ae>
 80117ec:	2380      	movs	r3, #128	; 0x80
 80117ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	4a55      	ldr	r2, [pc, #340]	; (801194c <UART_SetConfig+0x908>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	f040 80f8 	bne.w	80119ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80117fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011802:	2b20      	cmp	r3, #32
 8011804:	dc46      	bgt.n	8011894 <UART_SetConfig+0x850>
 8011806:	2b02      	cmp	r3, #2
 8011808:	db75      	blt.n	80118f6 <UART_SetConfig+0x8b2>
 801180a:	3b02      	subs	r3, #2
 801180c:	2b1e      	cmp	r3, #30
 801180e:	d872      	bhi.n	80118f6 <UART_SetConfig+0x8b2>
 8011810:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <UART_SetConfig+0x7d4>)
 8011812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011816:	bf00      	nop
 8011818:	0801189b 	.word	0x0801189b
 801181c:	080118f7 	.word	0x080118f7
 8011820:	080118a3 	.word	0x080118a3
 8011824:	080118f7 	.word	0x080118f7
 8011828:	080118f7 	.word	0x080118f7
 801182c:	080118f7 	.word	0x080118f7
 8011830:	080118b3 	.word	0x080118b3
 8011834:	080118f7 	.word	0x080118f7
 8011838:	080118f7 	.word	0x080118f7
 801183c:	080118f7 	.word	0x080118f7
 8011840:	080118f7 	.word	0x080118f7
 8011844:	080118f7 	.word	0x080118f7
 8011848:	080118f7 	.word	0x080118f7
 801184c:	080118f7 	.word	0x080118f7
 8011850:	080118c3 	.word	0x080118c3
 8011854:	080118f7 	.word	0x080118f7
 8011858:	080118f7 	.word	0x080118f7
 801185c:	080118f7 	.word	0x080118f7
 8011860:	080118f7 	.word	0x080118f7
 8011864:	080118f7 	.word	0x080118f7
 8011868:	080118f7 	.word	0x080118f7
 801186c:	080118f7 	.word	0x080118f7
 8011870:	080118f7 	.word	0x080118f7
 8011874:	080118f7 	.word	0x080118f7
 8011878:	080118f7 	.word	0x080118f7
 801187c:	080118f7 	.word	0x080118f7
 8011880:	080118f7 	.word	0x080118f7
 8011884:	080118f7 	.word	0x080118f7
 8011888:	080118f7 	.word	0x080118f7
 801188c:	080118f7 	.word	0x080118f7
 8011890:	080118e9 	.word	0x080118e9
 8011894:	2b40      	cmp	r3, #64	; 0x40
 8011896:	d02a      	beq.n	80118ee <UART_SetConfig+0x8aa>
 8011898:	e02d      	b.n	80118f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801189a:	f7fe fbf9 	bl	8010090 <HAL_RCCEx_GetD3PCLK1Freq>
 801189e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118a0:	e02f      	b.n	8011902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fe fc08 	bl	80100bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118b0:	e027      	b.n	8011902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118b2:	f107 0318 	add.w	r3, r7, #24
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe fd54 	bl	8010364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118c0:	e01f      	b.n	8011902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118c2:	4b21      	ldr	r3, [pc, #132]	; (8011948 <UART_SetConfig+0x904>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f003 0320 	and.w	r3, r3, #32
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d009      	beq.n	80118e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118ce:	4b1e      	ldr	r3, [pc, #120]	; (8011948 <UART_SetConfig+0x904>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	08db      	lsrs	r3, r3, #3
 80118d4:	f003 0303 	and.w	r3, r3, #3
 80118d8:	4a1d      	ldr	r2, [pc, #116]	; (8011950 <UART_SetConfig+0x90c>)
 80118da:	fa22 f303 	lsr.w	r3, r2, r3
 80118de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118e0:	e00f      	b.n	8011902 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80118e2:	4b1b      	ldr	r3, [pc, #108]	; (8011950 <UART_SetConfig+0x90c>)
 80118e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e6:	e00c      	b.n	8011902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118e8:	4b1a      	ldr	r3, [pc, #104]	; (8011954 <UART_SetConfig+0x910>)
 80118ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ec:	e009      	b.n	8011902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118f4:	e005      	b.n	8011902 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80118f6:	2300      	movs	r3, #0
 80118f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118fa:	2301      	movs	r3, #1
 80118fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 81ee 	beq.w	8011ce6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190e:	4a12      	ldr	r2, [pc, #72]	; (8011958 <UART_SetConfig+0x914>)
 8011910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011914:	461a      	mov	r2, r3
 8011916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011918:	fbb3 f3f2 	udiv	r3, r3, r2
 801191c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	685a      	ldr	r2, [r3, #4]
 8011922:	4613      	mov	r3, r2
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	4413      	add	r3, r2
 8011928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801192a:	429a      	cmp	r2, r3
 801192c:	d305      	bcc.n	801193a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011936:	429a      	cmp	r2, r3
 8011938:	d910      	bls.n	801195c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011940:	e1d1      	b.n	8011ce6 <UART_SetConfig+0xca2>
 8011942:	bf00      	nop
 8011944:	40011c00 	.word	0x40011c00
 8011948:	58024400 	.word	0x58024400
 801194c:	58000c00 	.word	0x58000c00
 8011950:	03d09000 	.word	0x03d09000
 8011954:	003d0900 	.word	0x003d0900
 8011958:	08027c4c 	.word	0x08027c4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	2200      	movs	r2, #0
 8011960:	60bb      	str	r3, [r7, #8]
 8011962:	60fa      	str	r2, [r7, #12]
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011968:	4ac0      	ldr	r2, [pc, #768]	; (8011c6c <UART_SetConfig+0xc28>)
 801196a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801196e:	b29b      	uxth	r3, r3
 8011970:	2200      	movs	r2, #0
 8011972:	603b      	str	r3, [r7, #0]
 8011974:	607a      	str	r2, [r7, #4]
 8011976:	e9d7 2300 	ldrd	r2, r3, [r7]
 801197a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801197e:	f7ee fd07 	bl	8000390 <__aeabi_uldivmod>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4610      	mov	r0, r2
 8011988:	4619      	mov	r1, r3
 801198a:	f04f 0200 	mov.w	r2, #0
 801198e:	f04f 0300 	mov.w	r3, #0
 8011992:	020b      	lsls	r3, r1, #8
 8011994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011998:	0202      	lsls	r2, r0, #8
 801199a:	6979      	ldr	r1, [r7, #20]
 801199c:	6849      	ldr	r1, [r1, #4]
 801199e:	0849      	lsrs	r1, r1, #1
 80119a0:	2000      	movs	r0, #0
 80119a2:	460c      	mov	r4, r1
 80119a4:	4605      	mov	r5, r0
 80119a6:	eb12 0804 	adds.w	r8, r2, r4
 80119aa:	eb43 0905 	adc.w	r9, r3, r5
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	469a      	mov	sl, r3
 80119b6:	4693      	mov	fp, r2
 80119b8:	4652      	mov	r2, sl
 80119ba:	465b      	mov	r3, fp
 80119bc:	4640      	mov	r0, r8
 80119be:	4649      	mov	r1, r9
 80119c0:	f7ee fce6 	bl	8000390 <__aeabi_uldivmod>
 80119c4:	4602      	mov	r2, r0
 80119c6:	460b      	mov	r3, r1
 80119c8:	4613      	mov	r3, r2
 80119ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80119cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119d2:	d308      	bcc.n	80119e6 <UART_SetConfig+0x9a2>
 80119d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119da:	d204      	bcs.n	80119e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119e2:	60da      	str	r2, [r3, #12]
 80119e4:	e17f      	b.n	8011ce6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80119e6:	2301      	movs	r3, #1
 80119e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80119ec:	e17b      	b.n	8011ce6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	69db      	ldr	r3, [r3, #28]
 80119f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119f6:	f040 80bd 	bne.w	8011b74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80119fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119fe:	2b20      	cmp	r3, #32
 8011a00:	dc48      	bgt.n	8011a94 <UART_SetConfig+0xa50>
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	db7b      	blt.n	8011afe <UART_SetConfig+0xaba>
 8011a06:	2b20      	cmp	r3, #32
 8011a08:	d879      	bhi.n	8011afe <UART_SetConfig+0xaba>
 8011a0a:	a201      	add	r2, pc, #4	; (adr r2, 8011a10 <UART_SetConfig+0x9cc>)
 8011a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a10:	08011a9b 	.word	0x08011a9b
 8011a14:	08011aa3 	.word	0x08011aa3
 8011a18:	08011aff 	.word	0x08011aff
 8011a1c:	08011aff 	.word	0x08011aff
 8011a20:	08011aab 	.word	0x08011aab
 8011a24:	08011aff 	.word	0x08011aff
 8011a28:	08011aff 	.word	0x08011aff
 8011a2c:	08011aff 	.word	0x08011aff
 8011a30:	08011abb 	.word	0x08011abb
 8011a34:	08011aff 	.word	0x08011aff
 8011a38:	08011aff 	.word	0x08011aff
 8011a3c:	08011aff 	.word	0x08011aff
 8011a40:	08011aff 	.word	0x08011aff
 8011a44:	08011aff 	.word	0x08011aff
 8011a48:	08011aff 	.word	0x08011aff
 8011a4c:	08011aff 	.word	0x08011aff
 8011a50:	08011acb 	.word	0x08011acb
 8011a54:	08011aff 	.word	0x08011aff
 8011a58:	08011aff 	.word	0x08011aff
 8011a5c:	08011aff 	.word	0x08011aff
 8011a60:	08011aff 	.word	0x08011aff
 8011a64:	08011aff 	.word	0x08011aff
 8011a68:	08011aff 	.word	0x08011aff
 8011a6c:	08011aff 	.word	0x08011aff
 8011a70:	08011aff 	.word	0x08011aff
 8011a74:	08011aff 	.word	0x08011aff
 8011a78:	08011aff 	.word	0x08011aff
 8011a7c:	08011aff 	.word	0x08011aff
 8011a80:	08011aff 	.word	0x08011aff
 8011a84:	08011aff 	.word	0x08011aff
 8011a88:	08011aff 	.word	0x08011aff
 8011a8c:	08011aff 	.word	0x08011aff
 8011a90:	08011af1 	.word	0x08011af1
 8011a94:	2b40      	cmp	r3, #64	; 0x40
 8011a96:	d02e      	beq.n	8011af6 <UART_SetConfig+0xab2>
 8011a98:	e031      	b.n	8011afe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a9a:	f7fd f8cd 	bl	800ec38 <HAL_RCC_GetPCLK1Freq>
 8011a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011aa0:	e033      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011aa2:	f7fd f8df 	bl	800ec64 <HAL_RCC_GetPCLK2Freq>
 8011aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011aa8:	e02f      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fe fb04 	bl	80100bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab8:	e027      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011aba:	f107 0318 	add.w	r3, r7, #24
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7fe fc50 	bl	8010364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ac8:	e01f      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011aca:	4b69      	ldr	r3, [pc, #420]	; (8011c70 <UART_SetConfig+0xc2c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f003 0320 	and.w	r3, r3, #32
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d009      	beq.n	8011aea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ad6:	4b66      	ldr	r3, [pc, #408]	; (8011c70 <UART_SetConfig+0xc2c>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	08db      	lsrs	r3, r3, #3
 8011adc:	f003 0303 	and.w	r3, r3, #3
 8011ae0:	4a64      	ldr	r2, [pc, #400]	; (8011c74 <UART_SetConfig+0xc30>)
 8011ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8011ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ae8:	e00f      	b.n	8011b0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011aea:	4b62      	ldr	r3, [pc, #392]	; (8011c74 <UART_SetConfig+0xc30>)
 8011aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aee:	e00c      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011af0:	4b61      	ldr	r3, [pc, #388]	; (8011c78 <UART_SetConfig+0xc34>)
 8011af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011af4:	e009      	b.n	8011b0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011afc:	e005      	b.n	8011b0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011afe:	2300      	movs	r3, #0
 8011b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b02:	2301      	movs	r3, #1
 8011b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 80ea 	beq.w	8011ce6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b16:	4a55      	ldr	r2, [pc, #340]	; (8011c6c <UART_SetConfig+0xc28>)
 8011b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b24:	005a      	lsls	r2, r3, #1
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	085b      	lsrs	r3, r3, #1
 8011b2c:	441a      	add	r2, r3
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	2b0f      	cmp	r3, #15
 8011b3c:	d916      	bls.n	8011b6c <UART_SetConfig+0xb28>
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b44:	d212      	bcs.n	8011b6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	f023 030f 	bic.w	r3, r3, #15
 8011b4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	f003 0307 	and.w	r3, r3, #7
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b68:	60da      	str	r2, [r3, #12]
 8011b6a:	e0bc      	b.n	8011ce6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b72:	e0b8      	b.n	8011ce6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b78:	2b20      	cmp	r3, #32
 8011b7a:	dc4b      	bgt.n	8011c14 <UART_SetConfig+0xbd0>
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f2c0 8087 	blt.w	8011c90 <UART_SetConfig+0xc4c>
 8011b82:	2b20      	cmp	r3, #32
 8011b84:	f200 8084 	bhi.w	8011c90 <UART_SetConfig+0xc4c>
 8011b88:	a201      	add	r2, pc, #4	; (adr r2, 8011b90 <UART_SetConfig+0xb4c>)
 8011b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8e:	bf00      	nop
 8011b90:	08011c1b 	.word	0x08011c1b
 8011b94:	08011c23 	.word	0x08011c23
 8011b98:	08011c91 	.word	0x08011c91
 8011b9c:	08011c91 	.word	0x08011c91
 8011ba0:	08011c2b 	.word	0x08011c2b
 8011ba4:	08011c91 	.word	0x08011c91
 8011ba8:	08011c91 	.word	0x08011c91
 8011bac:	08011c91 	.word	0x08011c91
 8011bb0:	08011c3b 	.word	0x08011c3b
 8011bb4:	08011c91 	.word	0x08011c91
 8011bb8:	08011c91 	.word	0x08011c91
 8011bbc:	08011c91 	.word	0x08011c91
 8011bc0:	08011c91 	.word	0x08011c91
 8011bc4:	08011c91 	.word	0x08011c91
 8011bc8:	08011c91 	.word	0x08011c91
 8011bcc:	08011c91 	.word	0x08011c91
 8011bd0:	08011c4b 	.word	0x08011c4b
 8011bd4:	08011c91 	.word	0x08011c91
 8011bd8:	08011c91 	.word	0x08011c91
 8011bdc:	08011c91 	.word	0x08011c91
 8011be0:	08011c91 	.word	0x08011c91
 8011be4:	08011c91 	.word	0x08011c91
 8011be8:	08011c91 	.word	0x08011c91
 8011bec:	08011c91 	.word	0x08011c91
 8011bf0:	08011c91 	.word	0x08011c91
 8011bf4:	08011c91 	.word	0x08011c91
 8011bf8:	08011c91 	.word	0x08011c91
 8011bfc:	08011c91 	.word	0x08011c91
 8011c00:	08011c91 	.word	0x08011c91
 8011c04:	08011c91 	.word	0x08011c91
 8011c08:	08011c91 	.word	0x08011c91
 8011c0c:	08011c91 	.word	0x08011c91
 8011c10:	08011c83 	.word	0x08011c83
 8011c14:	2b40      	cmp	r3, #64	; 0x40
 8011c16:	d037      	beq.n	8011c88 <UART_SetConfig+0xc44>
 8011c18:	e03a      	b.n	8011c90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c1a:	f7fd f80d 	bl	800ec38 <HAL_RCC_GetPCLK1Freq>
 8011c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c20:	e03c      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c22:	f7fd f81f 	bl	800ec64 <HAL_RCC_GetPCLK2Freq>
 8011c26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c28:	e038      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fe fa44 	bl	80100bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c38:	e030      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c3a:	f107 0318 	add.w	r3, r7, #24
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fb90 	bl	8010364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c48:	e028      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c4a:	4b09      	ldr	r3, [pc, #36]	; (8011c70 <UART_SetConfig+0xc2c>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f003 0320 	and.w	r3, r3, #32
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d012      	beq.n	8011c7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c56:	4b06      	ldr	r3, [pc, #24]	; (8011c70 <UART_SetConfig+0xc2c>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	08db      	lsrs	r3, r3, #3
 8011c5c:	f003 0303 	and.w	r3, r3, #3
 8011c60:	4a04      	ldr	r2, [pc, #16]	; (8011c74 <UART_SetConfig+0xc30>)
 8011c62:	fa22 f303 	lsr.w	r3, r2, r3
 8011c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c68:	e018      	b.n	8011c9c <UART_SetConfig+0xc58>
 8011c6a:	bf00      	nop
 8011c6c:	08027c4c 	.word	0x08027c4c
 8011c70:	58024400 	.word	0x58024400
 8011c74:	03d09000 	.word	0x03d09000
 8011c78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011c7c:	4b24      	ldr	r3, [pc, #144]	; (8011d10 <UART_SetConfig+0xccc>)
 8011c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c80:	e00c      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c82:	4b24      	ldr	r3, [pc, #144]	; (8011d14 <UART_SetConfig+0xcd0>)
 8011c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c86:	e009      	b.n	8011c9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c8e:	e005      	b.n	8011c9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011c90:	2300      	movs	r3, #0
 8011c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c94:	2301      	movs	r3, #1
 8011c96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8011c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d021      	beq.n	8011ce6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	4a1c      	ldr	r2, [pc, #112]	; (8011d18 <UART_SetConfig+0xcd4>)
 8011ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011cac:	461a      	mov	r2, r3
 8011cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	085b      	lsrs	r3, r3, #1
 8011cba:	441a      	add	r2, r3
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc8:	2b0f      	cmp	r3, #15
 8011cca:	d909      	bls.n	8011ce0 <UART_SetConfig+0xc9c>
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cd2:	d205      	bcs.n	8011ce0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	60da      	str	r2, [r3, #12]
 8011cde:	e002      	b.n	8011ce6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011d02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3748      	adds	r7, #72	; 0x48
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d10:	03d09000 	.word	0x03d09000
 8011d14:	003d0900 	.word	0x003d0900
 8011d18:	08027c4c 	.word	0x08027c4c

08011d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d28:	f003 0301 	and.w	r3, r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00a      	beq.n	8011d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	430a      	orrs	r2, r1
 8011d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4a:	f003 0302 	and.w	r3, r3, #2
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00a      	beq.n	8011d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	430a      	orrs	r2, r1
 8011d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d6c:	f003 0304 	and.w	r3, r3, #4
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	430a      	orrs	r2, r1
 8011d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d8e:	f003 0308 	and.w	r3, r3, #8
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00a      	beq.n	8011dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	430a      	orrs	r2, r1
 8011daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011db0:	f003 0310 	and.w	r3, r3, #16
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00a      	beq.n	8011dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dd2:	f003 0320 	and.w	r3, r3, #32
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d01a      	beq.n	8011e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e1a:	d10a      	bne.n	8011e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	430a      	orrs	r2, r1
 8011e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00a      	beq.n	8011e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	430a      	orrs	r2, r1
 8011e52:	605a      	str	r2, [r3, #4]
  }
}
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b098      	sub	sp, #96	; 0x60
 8011e64:	af02      	add	r7, sp, #8
 8011e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e70:	f7f8 fd4a 	bl	800a908 <HAL_GetTick>
 8011e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f003 0308 	and.w	r3, r3, #8
 8011e80:	2b08      	cmp	r3, #8
 8011e82:	d12f      	bne.n	8011ee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f88e 	bl	8011fb4 <UART_WaitOnFlagUntilTimeout>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d022      	beq.n	8011ee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea6:	e853 3f00 	ldrex	r3, [r3]
 8011eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	461a      	mov	r2, r3
 8011eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8011ebe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ec4:	e841 2300 	strex	r3, r2, [r1]
 8011ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d1e6      	bne.n	8011e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2220      	movs	r2, #32
 8011ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	e063      	b.n	8011fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f003 0304 	and.w	r3, r3, #4
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	d149      	bne.n	8011f86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ef6:	9300      	str	r3, [sp, #0]
 8011ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011efa:	2200      	movs	r2, #0
 8011efc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 f857 	bl	8011fb4 <UART_WaitOnFlagUntilTimeout>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d03c      	beq.n	8011f86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f14:	e853 3f00 	ldrex	r3, [r3]
 8011f18:	623b      	str	r3, [r7, #32]
   return(result);
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8011f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f32:	e841 2300 	strex	r3, r2, [r1]
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e6      	bne.n	8011f0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	3308      	adds	r3, #8
 8011f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	e853 3f00 	ldrex	r3, [r3]
 8011f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f023 0301 	bic.w	r3, r3, #1
 8011f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	3308      	adds	r3, #8
 8011f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f5e:	61fa      	str	r2, [r7, #28]
 8011f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f62:	69b9      	ldr	r1, [r7, #24]
 8011f64:	69fa      	ldr	r2, [r7, #28]
 8011f66:	e841 2300 	strex	r3, r2, [r1]
 8011f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1e5      	bne.n	8011f3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2220      	movs	r2, #32
 8011f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f82:	2303      	movs	r3, #3
 8011f84:	e012      	b.n	8011fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2220      	movs	r2, #32
 8011f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2220      	movs	r2, #32
 8011f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3758      	adds	r7, #88	; 0x58
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	60f8      	str	r0, [r7, #12]
 8011fbc:	60b9      	str	r1, [r7, #8]
 8011fbe:	603b      	str	r3, [r7, #0]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011fc4:	e049      	b.n	801205a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fcc:	d045      	beq.n	801205a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011fce:	f7f8 fc9b 	bl	800a908 <HAL_GetTick>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	69ba      	ldr	r2, [r7, #24]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d302      	bcc.n	8011fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011fde:	69bb      	ldr	r3, [r7, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d101      	bne.n	8011fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011fe4:	2303      	movs	r3, #3
 8011fe6:	e048      	b.n	801207a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f003 0304 	and.w	r3, r3, #4
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d031      	beq.n	801205a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	69db      	ldr	r3, [r3, #28]
 8011ffc:	f003 0308 	and.w	r3, r3, #8
 8012000:	2b08      	cmp	r3, #8
 8012002:	d110      	bne.n	8012026 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2208      	movs	r2, #8
 801200a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f000 f839 	bl	8012084 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2208      	movs	r2, #8
 8012016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012022:	2301      	movs	r3, #1
 8012024:	e029      	b.n	801207a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012034:	d111      	bne.n	801205a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801203e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f000 f81f 	bl	8012084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2220      	movs	r2, #32
 801204a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2200      	movs	r2, #0
 8012052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012056:	2303      	movs	r3, #3
 8012058:	e00f      	b.n	801207a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	69da      	ldr	r2, [r3, #28]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	4013      	ands	r3, r2
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	429a      	cmp	r2, r3
 8012068:	bf0c      	ite	eq
 801206a:	2301      	moveq	r3, #1
 801206c:	2300      	movne	r3, #0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	461a      	mov	r2, r3
 8012072:	79fb      	ldrb	r3, [r7, #7]
 8012074:	429a      	cmp	r2, r3
 8012076:	d0a6      	beq.n	8011fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
	...

08012084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012084:	b480      	push	{r7}
 8012086:	b095      	sub	sp, #84	; 0x54
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012094:	e853 3f00 	ldrex	r3, [r3]
 8012098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120aa:	643b      	str	r3, [r7, #64]	; 0x40
 80120ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120b2:	e841 2300 	strex	r3, r2, [r1]
 80120b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d1e6      	bne.n	801208c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	3308      	adds	r3, #8
 80120c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c6:	6a3b      	ldr	r3, [r7, #32]
 80120c8:	e853 3f00 	ldrex	r3, [r3]
 80120cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80120ce:	69fa      	ldr	r2, [r7, #28]
 80120d0:	4b1e      	ldr	r3, [pc, #120]	; (801214c <UART_EndRxTransfer+0xc8>)
 80120d2:	4013      	ands	r3, r2
 80120d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	3308      	adds	r3, #8
 80120dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80120e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e6:	e841 2300 	strex	r3, r2, [r1]
 80120ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e5      	bne.n	80120be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d118      	bne.n	801212c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	e853 3f00 	ldrex	r3, [r3]
 8012106:	60bb      	str	r3, [r7, #8]
   return(result);
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	f023 0310 	bic.w	r3, r3, #16
 801210e:	647b      	str	r3, [r7, #68]	; 0x44
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	461a      	mov	r2, r3
 8012116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012118:	61bb      	str	r3, [r7, #24]
 801211a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211c:	6979      	ldr	r1, [r7, #20]
 801211e:	69ba      	ldr	r2, [r7, #24]
 8012120:	e841 2300 	strex	r3, r2, [r1]
 8012124:	613b      	str	r3, [r7, #16]
   return(result);
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1e6      	bne.n	80120fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2220      	movs	r2, #32
 8012130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012140:	bf00      	nop
 8012142:	3754      	adds	r7, #84	; 0x54
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	effffffe 	.word	0xeffffffe

08012150 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801215e:	2b01      	cmp	r3, #1
 8012160:	d101      	bne.n	8012166 <HAL_UARTEx_DisableFifoMode+0x16>
 8012162:	2302      	movs	r3, #2
 8012164:	e027      	b.n	80121b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2201      	movs	r2, #1
 801216a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2224      	movs	r2, #36	; 0x24
 8012172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f022 0201 	bic.w	r2, r2, #1
 801218c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012194:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2220      	movs	r2, #32
 80121a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b084      	sub	sp, #16
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d101      	bne.n	80121da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121d6:	2302      	movs	r3, #2
 80121d8:	e02d      	b.n	8012236 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2224      	movs	r2, #36	; 0x24
 80121e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f022 0201 	bic.w	r2, r2, #1
 8012200:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	683a      	ldr	r2, [r7, #0]
 8012212:	430a      	orrs	r2, r1
 8012214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f850 	bl	80122bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2220      	movs	r2, #32
 8012228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b084      	sub	sp, #16
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
 8012246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801224e:	2b01      	cmp	r3, #1
 8012250:	d101      	bne.n	8012256 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012252:	2302      	movs	r3, #2
 8012254:	e02d      	b.n	80122b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2201      	movs	r2, #1
 801225a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2224      	movs	r2, #36	; 0x24
 8012262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	681a      	ldr	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f022 0201 	bic.w	r2, r2, #1
 801227c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	430a      	orrs	r2, r1
 8012290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 f812 	bl	80122bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2220      	movs	r2, #32
 80122a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122b0:	2300      	movs	r3, #0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
	...

080122bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122bc:	b480      	push	{r7}
 80122be:	b085      	sub	sp, #20
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d108      	bne.n	80122de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2201      	movs	r2, #1
 80122d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80122dc:	e031      	b.n	8012342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80122de:	2310      	movs	r3, #16
 80122e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80122e2:	2310      	movs	r3, #16
 80122e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	0e5b      	lsrs	r3, r3, #25
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	f003 0307 	and.w	r3, r3, #7
 80122f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	0f5b      	lsrs	r3, r3, #29
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	f003 0307 	and.w	r3, r3, #7
 8012304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012306:	7bbb      	ldrb	r3, [r7, #14]
 8012308:	7b3a      	ldrb	r2, [r7, #12]
 801230a:	4911      	ldr	r1, [pc, #68]	; (8012350 <UARTEx_SetNbDataToProcess+0x94>)
 801230c:	5c8a      	ldrb	r2, [r1, r2]
 801230e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012312:	7b3a      	ldrb	r2, [r7, #12]
 8012314:	490f      	ldr	r1, [pc, #60]	; (8012354 <UARTEx_SetNbDataToProcess+0x98>)
 8012316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012318:	fb93 f3f2 	sdiv	r3, r3, r2
 801231c:	b29a      	uxth	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	7b7a      	ldrb	r2, [r7, #13]
 8012328:	4909      	ldr	r1, [pc, #36]	; (8012350 <UARTEx_SetNbDataToProcess+0x94>)
 801232a:	5c8a      	ldrb	r2, [r1, r2]
 801232c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012330:	7b7a      	ldrb	r2, [r7, #13]
 8012332:	4908      	ldr	r1, [pc, #32]	; (8012354 <UARTEx_SetNbDataToProcess+0x98>)
 8012334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012336:	fb93 f3f2 	sdiv	r3, r3, r2
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012342:	bf00      	nop
 8012344:	3714      	adds	r7, #20
 8012346:	46bd      	mov	sp, r7
 8012348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop
 8012350:	08027c64 	.word	0x08027c64
 8012354:	08027c6c 	.word	0x08027c6c

08012358 <__NVIC_SetPriority>:
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	6039      	str	r1, [r7, #0]
 8012362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012368:	2b00      	cmp	r3, #0
 801236a:	db0a      	blt.n	8012382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	b2da      	uxtb	r2, r3
 8012370:	490c      	ldr	r1, [pc, #48]	; (80123a4 <__NVIC_SetPriority+0x4c>)
 8012372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012376:	0112      	lsls	r2, r2, #4
 8012378:	b2d2      	uxtb	r2, r2
 801237a:	440b      	add	r3, r1
 801237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012380:	e00a      	b.n	8012398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	b2da      	uxtb	r2, r3
 8012386:	4908      	ldr	r1, [pc, #32]	; (80123a8 <__NVIC_SetPriority+0x50>)
 8012388:	88fb      	ldrh	r3, [r7, #6]
 801238a:	f003 030f 	and.w	r3, r3, #15
 801238e:	3b04      	subs	r3, #4
 8012390:	0112      	lsls	r2, r2, #4
 8012392:	b2d2      	uxtb	r2, r2
 8012394:	440b      	add	r3, r1
 8012396:	761a      	strb	r2, [r3, #24]
}
 8012398:	bf00      	nop
 801239a:	370c      	adds	r7, #12
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr
 80123a4:	e000e100 	.word	0xe000e100
 80123a8:	e000ed00 	.word	0xe000ed00

080123ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123ac:	b580      	push	{r7, lr}
 80123ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123b0:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <SysTick_Handler+0x1c>)
 80123b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123b4:	f002 feac 	bl	8015110 <xTaskGetSchedulerState>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d001      	beq.n	80123c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80123be:	f000 ffeb 	bl	8013398 <xPortSysTickHandler>
  }
}
 80123c2:	bf00      	nop
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	e000e010 	.word	0xe000e010

080123cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80123d0:	2100      	movs	r1, #0
 80123d2:	f06f 0004 	mvn.w	r0, #4
 80123d6:	f7ff ffbf 	bl	8012358 <__NVIC_SetPriority>
#endif
}
 80123da:	bf00      	nop
 80123dc:	bd80      	pop	{r7, pc}
	...

080123e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123e6:	f3ef 8305 	mrs	r3, IPSR
 80123ea:	603b      	str	r3, [r7, #0]
  return(result);
 80123ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d003      	beq.n	80123fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80123f2:	f06f 0305 	mvn.w	r3, #5
 80123f6:	607b      	str	r3, [r7, #4]
 80123f8:	e00c      	b.n	8012414 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80123fa:	4b0a      	ldr	r3, [pc, #40]	; (8012424 <osKernelInitialize+0x44>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d105      	bne.n	801240e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012402:	4b08      	ldr	r3, [pc, #32]	; (8012424 <osKernelInitialize+0x44>)
 8012404:	2201      	movs	r2, #1
 8012406:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012408:	2300      	movs	r3, #0
 801240a:	607b      	str	r3, [r7, #4]
 801240c:	e002      	b.n	8012414 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801240e:	f04f 33ff 	mov.w	r3, #4294967295
 8012412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012414:	687b      	ldr	r3, [r7, #4]
}
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	24002420 	.word	0x24002420

08012428 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801242e:	f3ef 8305 	mrs	r3, IPSR
 8012432:	603b      	str	r3, [r7, #0]
  return(result);
 8012434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <osKernelStart+0x1a>
    stat = osErrorISR;
 801243a:	f06f 0305 	mvn.w	r3, #5
 801243e:	607b      	str	r3, [r7, #4]
 8012440:	e010      	b.n	8012464 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012442:	4b0b      	ldr	r3, [pc, #44]	; (8012470 <osKernelStart+0x48>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d109      	bne.n	801245e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801244a:	f7ff ffbf 	bl	80123cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801244e:	4b08      	ldr	r3, [pc, #32]	; (8012470 <osKernelStart+0x48>)
 8012450:	2202      	movs	r2, #2
 8012452:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012454:	f002 fa14 	bl	8014880 <vTaskStartScheduler>
      stat = osOK;
 8012458:	2300      	movs	r3, #0
 801245a:	607b      	str	r3, [r7, #4]
 801245c:	e002      	b.n	8012464 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801245e:	f04f 33ff 	mov.w	r3, #4294967295
 8012462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012464:	687b      	ldr	r3, [r7, #4]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	24002420 	.word	0x24002420

08012474 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012474:	b580      	push	{r7, lr}
 8012476:	b08e      	sub	sp, #56	; 0x38
 8012478:	af04      	add	r7, sp, #16
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012480:	2300      	movs	r3, #0
 8012482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012484:	f3ef 8305 	mrs	r3, IPSR
 8012488:	617b      	str	r3, [r7, #20]
  return(result);
 801248a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801248c:	2b00      	cmp	r3, #0
 801248e:	d17e      	bne.n	801258e <osThreadNew+0x11a>
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d07b      	beq.n	801258e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012496:	2380      	movs	r3, #128	; 0x80
 8012498:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801249a:	2318      	movs	r3, #24
 801249c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80124a2:	f04f 33ff 	mov.w	r3, #4294967295
 80124a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d045      	beq.n	801253a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d002      	beq.n	80124bc <osThreadNew+0x48>
        name = attr->name;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d008      	beq.n	80124e2 <osThreadNew+0x6e>
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	2b38      	cmp	r3, #56	; 0x38
 80124d4:	d805      	bhi.n	80124e2 <osThreadNew+0x6e>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	f003 0301 	and.w	r3, r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d001      	beq.n	80124e6 <osThreadNew+0x72>
        return (NULL);
 80124e2:	2300      	movs	r3, #0
 80124e4:	e054      	b.n	8012590 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	695b      	ldr	r3, [r3, #20]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d003      	beq.n	80124f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	695b      	ldr	r3, [r3, #20]
 80124f2:	089b      	lsrs	r3, r3, #2
 80124f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d00e      	beq.n	801251c <osThreadNew+0xa8>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	2b5b      	cmp	r3, #91	; 0x5b
 8012504:	d90a      	bls.n	801251c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801250a:	2b00      	cmp	r3, #0
 801250c:	d006      	beq.n	801251c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	695b      	ldr	r3, [r3, #20]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d002      	beq.n	801251c <osThreadNew+0xa8>
        mem = 1;
 8012516:	2301      	movs	r3, #1
 8012518:	61bb      	str	r3, [r7, #24]
 801251a:	e010      	b.n	801253e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10c      	bne.n	801253e <osThreadNew+0xca>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	68db      	ldr	r3, [r3, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d108      	bne.n	801253e <osThreadNew+0xca>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d104      	bne.n	801253e <osThreadNew+0xca>
          mem = 0;
 8012534:	2300      	movs	r3, #0
 8012536:	61bb      	str	r3, [r7, #24]
 8012538:	e001      	b.n	801253e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801253a:	2300      	movs	r3, #0
 801253c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d110      	bne.n	8012566 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801254c:	9202      	str	r2, [sp, #8]
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	6a3a      	ldr	r2, [r7, #32]
 8012558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f001 ffba 	bl	80144d4 <xTaskCreateStatic>
 8012560:	4603      	mov	r3, r0
 8012562:	613b      	str	r3, [r7, #16]
 8012564:	e013      	b.n	801258e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d110      	bne.n	801258e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	b29a      	uxth	r2, r3
 8012570:	f107 0310 	add.w	r3, r7, #16
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	9300      	str	r3, [sp, #0]
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f002 f805 	bl	801458e <xTaskCreate>
 8012584:	4603      	mov	r3, r0
 8012586:	2b01      	cmp	r3, #1
 8012588:	d001      	beq.n	801258e <osThreadNew+0x11a>
            hTask = NULL;
 801258a:	2300      	movs	r3, #0
 801258c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801258e:	693b      	ldr	r3, [r7, #16]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3728      	adds	r7, #40	; 0x28
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125a0:	f3ef 8305 	mrs	r3, IPSR
 80125a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80125a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d003      	beq.n	80125b4 <osDelay+0x1c>
    stat = osErrorISR;
 80125ac:	f06f 0305 	mvn.w	r3, #5
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	e007      	b.n	80125c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80125b4:	2300      	movs	r3, #0
 80125b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d002      	beq.n	80125c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f002 f92a 	bl	8014818 <vTaskDelay>
    }
  }

  return (stat);
 80125c4:	68fb      	ldr	r3, [r7, #12]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b08a      	sub	sp, #40	; 0x28
 80125d2:	af02      	add	r7, sp, #8
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125de:	f3ef 8305 	mrs	r3, IPSR
 80125e2:	613b      	str	r3, [r7, #16]
  return(result);
 80125e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d175      	bne.n	80126d6 <osSemaphoreNew+0x108>
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d072      	beq.n	80126d6 <osSemaphoreNew+0x108>
 80125f0:	68ba      	ldr	r2, [r7, #8]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d86e      	bhi.n	80126d6 <osSemaphoreNew+0x108>
    mem = -1;
 80125f8:	f04f 33ff 	mov.w	r3, #4294967295
 80125fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d015      	beq.n	8012630 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d006      	beq.n	801261a <osSemaphoreNew+0x4c>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	2b4f      	cmp	r3, #79	; 0x4f
 8012612:	d902      	bls.n	801261a <osSemaphoreNew+0x4c>
        mem = 1;
 8012614:	2301      	movs	r3, #1
 8012616:	61bb      	str	r3, [r7, #24]
 8012618:	e00c      	b.n	8012634 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d108      	bne.n	8012634 <osSemaphoreNew+0x66>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d104      	bne.n	8012634 <osSemaphoreNew+0x66>
          mem = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	61bb      	str	r3, [r7, #24]
 801262e:	e001      	b.n	8012634 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8012630:	2300      	movs	r3, #0
 8012632:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801263a:	d04c      	beq.n	80126d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2b01      	cmp	r3, #1
 8012640:	d128      	bne.n	8012694 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d10a      	bne.n	801265e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	2203      	movs	r2, #3
 801264e:	9200      	str	r2, [sp, #0]
 8012650:	2200      	movs	r2, #0
 8012652:	2100      	movs	r1, #0
 8012654:	2001      	movs	r0, #1
 8012656:	f000 ff97 	bl	8013588 <xQueueGenericCreateStatic>
 801265a:	61f8      	str	r0, [r7, #28]
 801265c:	e005      	b.n	801266a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801265e:	2203      	movs	r2, #3
 8012660:	2100      	movs	r1, #0
 8012662:	2001      	movs	r0, #1
 8012664:	f001 f808 	bl	8013678 <xQueueGenericCreate>
 8012668:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d022      	beq.n	80126b6 <osSemaphoreNew+0xe8>
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d01f      	beq.n	80126b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012676:	2300      	movs	r3, #0
 8012678:	2200      	movs	r2, #0
 801267a:	2100      	movs	r1, #0
 801267c:	69f8      	ldr	r0, [r7, #28]
 801267e:	f001 f8c3 	bl	8013808 <xQueueGenericSend>
 8012682:	4603      	mov	r3, r0
 8012684:	2b01      	cmp	r3, #1
 8012686:	d016      	beq.n	80126b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012688:	69f8      	ldr	r0, [r7, #28]
 801268a:	f001 fd4f 	bl	801412c <vQueueDelete>
            hSemaphore = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	e010      	b.n	80126b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d108      	bne.n	80126ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	461a      	mov	r2, r3
 80126a0:	68b9      	ldr	r1, [r7, #8]
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f001 f845 	bl	8013732 <xQueueCreateCountingSemaphoreStatic>
 80126a8:	61f8      	str	r0, [r7, #28]
 80126aa:	e004      	b.n	80126b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80126ac:	68b9      	ldr	r1, [r7, #8]
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f001 f876 	bl	80137a0 <xQueueCreateCountingSemaphore>
 80126b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80126b6:	69fb      	ldr	r3, [r7, #28]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00c      	beq.n	80126d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d003      	beq.n	80126ca <osSemaphoreNew+0xfc>
          name = attr->name;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	617b      	str	r3, [r7, #20]
 80126c8:	e001      	b.n	80126ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80126ca:	2300      	movs	r3, #0
 80126cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80126ce:	6979      	ldr	r1, [r7, #20]
 80126d0:	69f8      	ldr	r0, [r7, #28]
 80126d2:	f001 fe77 	bl	80143c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80126d6:	69fb      	ldr	r3, [r7, #28]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3720      	adds	r7, #32
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80126ee:	2300      	movs	r3, #0
 80126f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d103      	bne.n	8012700 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80126f8:	f06f 0303 	mvn.w	r3, #3
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e039      	b.n	8012774 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012700:	f3ef 8305 	mrs	r3, IPSR
 8012704:	60fb      	str	r3, [r7, #12]
  return(result);
 8012706:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012708:	2b00      	cmp	r3, #0
 801270a:	d022      	beq.n	8012752 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d003      	beq.n	801271a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012712:	f06f 0303 	mvn.w	r3, #3
 8012716:	617b      	str	r3, [r7, #20]
 8012718:	e02c      	b.n	8012774 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801271a:	2300      	movs	r3, #0
 801271c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801271e:	f107 0308 	add.w	r3, r7, #8
 8012722:	461a      	mov	r2, r3
 8012724:	2100      	movs	r1, #0
 8012726:	6938      	ldr	r0, [r7, #16]
 8012728:	f001 fc80 	bl	801402c <xQueueReceiveFromISR>
 801272c:	4603      	mov	r3, r0
 801272e:	2b01      	cmp	r3, #1
 8012730:	d003      	beq.n	801273a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8012732:	f06f 0302 	mvn.w	r3, #2
 8012736:	617b      	str	r3, [r7, #20]
 8012738:	e01c      	b.n	8012774 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d019      	beq.n	8012774 <osSemaphoreAcquire+0x94>
 8012740:	4b0f      	ldr	r3, [pc, #60]	; (8012780 <osSemaphoreAcquire+0xa0>)
 8012742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012746:	601a      	str	r2, [r3, #0]
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	e010      	b.n	8012774 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012752:	6839      	ldr	r1, [r7, #0]
 8012754:	6938      	ldr	r0, [r7, #16]
 8012756:	f001 fb5d 	bl	8013e14 <xQueueSemaphoreTake>
 801275a:	4603      	mov	r3, r0
 801275c:	2b01      	cmp	r3, #1
 801275e:	d009      	beq.n	8012774 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d003      	beq.n	801276e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012766:	f06f 0301 	mvn.w	r3, #1
 801276a:	617b      	str	r3, [r7, #20]
 801276c:	e002      	b.n	8012774 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801276e:	f06f 0302 	mvn.w	r3, #2
 8012772:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012774:	697b      	ldr	r3, [r7, #20]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3718      	adds	r7, #24
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	e000ed04 	.word	0xe000ed04

08012784 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012790:	2300      	movs	r3, #0
 8012792:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d103      	bne.n	80127a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801279a:	f06f 0303 	mvn.w	r3, #3
 801279e:	617b      	str	r3, [r7, #20]
 80127a0:	e02c      	b.n	80127fc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127a2:	f3ef 8305 	mrs	r3, IPSR
 80127a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80127a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d01a      	beq.n	80127e4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80127ae:	2300      	movs	r3, #0
 80127b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	4619      	mov	r1, r3
 80127b8:	6938      	ldr	r0, [r7, #16]
 80127ba:	f001 f9be 	bl	8013b3a <xQueueGiveFromISR>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d003      	beq.n	80127cc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80127c4:	f06f 0302 	mvn.w	r3, #2
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	e017      	b.n	80127fc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d014      	beq.n	80127fc <osSemaphoreRelease+0x78>
 80127d2:	4b0d      	ldr	r3, [pc, #52]	; (8012808 <osSemaphoreRelease+0x84>)
 80127d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	e00b      	b.n	80127fc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80127e4:	2300      	movs	r3, #0
 80127e6:	2200      	movs	r2, #0
 80127e8:	2100      	movs	r1, #0
 80127ea:	6938      	ldr	r0, [r7, #16]
 80127ec:	f001 f80c 	bl	8013808 <xQueueGenericSend>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	d002      	beq.n	80127fc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80127f6:	f06f 0302 	mvn.w	r3, #2
 80127fa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80127fc:	697b      	ldr	r3, [r7, #20]
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3718      	adds	r7, #24
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	e000ed04 	.word	0xe000ed04

0801280c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801280c:	b580      	push	{r7, lr}
 801280e:	b08a      	sub	sp, #40	; 0x28
 8012810:	af02      	add	r7, sp, #8
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012818:	2300      	movs	r3, #0
 801281a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801281c:	f3ef 8305 	mrs	r3, IPSR
 8012820:	613b      	str	r3, [r7, #16]
  return(result);
 8012822:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012824:	2b00      	cmp	r3, #0
 8012826:	d15f      	bne.n	80128e8 <osMessageQueueNew+0xdc>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d05c      	beq.n	80128e8 <osMessageQueueNew+0xdc>
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d059      	beq.n	80128e8 <osMessageQueueNew+0xdc>
    mem = -1;
 8012834:	f04f 33ff 	mov.w	r3, #4294967295
 8012838:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d029      	beq.n	8012894 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	689b      	ldr	r3, [r3, #8]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d012      	beq.n	801286e <osMessageQueueNew+0x62>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	68db      	ldr	r3, [r3, #12]
 801284c:	2b4f      	cmp	r3, #79	; 0x4f
 801284e:	d90e      	bls.n	801286e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012854:	2b00      	cmp	r3, #0
 8012856:	d00a      	beq.n	801286e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	695a      	ldr	r2, [r3, #20]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	68b9      	ldr	r1, [r7, #8]
 8012860:	fb01 f303 	mul.w	r3, r1, r3
 8012864:	429a      	cmp	r2, r3
 8012866:	d302      	bcc.n	801286e <osMessageQueueNew+0x62>
        mem = 1;
 8012868:	2301      	movs	r3, #1
 801286a:	61bb      	str	r3, [r7, #24]
 801286c:	e014      	b.n	8012898 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d110      	bne.n	8012898 <osMessageQueueNew+0x8c>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d10c      	bne.n	8012898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012882:	2b00      	cmp	r3, #0
 8012884:	d108      	bne.n	8012898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d104      	bne.n	8012898 <osMessageQueueNew+0x8c>
          mem = 0;
 801288e:	2300      	movs	r3, #0
 8012890:	61bb      	str	r3, [r7, #24]
 8012892:	e001      	b.n	8012898 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	2b01      	cmp	r3, #1
 801289c:	d10b      	bne.n	80128b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	691a      	ldr	r2, [r3, #16]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	2100      	movs	r1, #0
 80128a8:	9100      	str	r1, [sp, #0]
 80128aa:	68b9      	ldr	r1, [r7, #8]
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 fe6b 	bl	8013588 <xQueueGenericCreateStatic>
 80128b2:	61f8      	str	r0, [r7, #28]
 80128b4:	e008      	b.n	80128c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d105      	bne.n	80128c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80128bc:	2200      	movs	r2, #0
 80128be:	68b9      	ldr	r1, [r7, #8]
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f000 fed9 	bl	8013678 <xQueueGenericCreate>
 80128c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00c      	beq.n	80128e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d003      	beq.n	80128dc <osMessageQueueNew+0xd0>
        name = attr->name;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	617b      	str	r3, [r7, #20]
 80128da:	e001      	b.n	80128e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80128dc:	2300      	movs	r3, #0
 80128de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80128e0:	6979      	ldr	r1, [r7, #20]
 80128e2:	69f8      	ldr	r0, [r7, #28]
 80128e4:	f001 fd6e 	bl	80143c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80128e8:	69fb      	ldr	r3, [r7, #28]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3720      	adds	r7, #32
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
	...

080128f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b088      	sub	sp, #32
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	603b      	str	r3, [r7, #0]
 8012900:	4613      	mov	r3, r2
 8012902:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012908:	2300      	movs	r3, #0
 801290a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801290c:	f3ef 8305 	mrs	r3, IPSR
 8012910:	617b      	str	r3, [r7, #20]
  return(result);
 8012912:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012914:	2b00      	cmp	r3, #0
 8012916:	d028      	beq.n	801296a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d005      	beq.n	801292a <osMessageQueuePut+0x36>
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <osMessageQueuePut+0x36>
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d003      	beq.n	8012932 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801292a:	f06f 0303 	mvn.w	r3, #3
 801292e:	61fb      	str	r3, [r7, #28]
 8012930:	e038      	b.n	80129a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012932:	2300      	movs	r3, #0
 8012934:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012936:	f107 0210 	add.w	r2, r7, #16
 801293a:	2300      	movs	r3, #0
 801293c:	68b9      	ldr	r1, [r7, #8]
 801293e:	69b8      	ldr	r0, [r7, #24]
 8012940:	f001 f860 	bl	8013a04 <xQueueGenericSendFromISR>
 8012944:	4603      	mov	r3, r0
 8012946:	2b01      	cmp	r3, #1
 8012948:	d003      	beq.n	8012952 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801294a:	f06f 0302 	mvn.w	r3, #2
 801294e:	61fb      	str	r3, [r7, #28]
 8012950:	e028      	b.n	80129a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d025      	beq.n	80129a4 <osMessageQueuePut+0xb0>
 8012958:	4b15      	ldr	r3, [pc, #84]	; (80129b0 <osMessageQueuePut+0xbc>)
 801295a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801295e:	601a      	str	r2, [r3, #0]
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	e01c      	b.n	80129a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d002      	beq.n	8012976 <osMessageQueuePut+0x82>
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d103      	bne.n	801297e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012976:	f06f 0303 	mvn.w	r3, #3
 801297a:	61fb      	str	r3, [r7, #28]
 801297c:	e012      	b.n	80129a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801297e:	2300      	movs	r3, #0
 8012980:	683a      	ldr	r2, [r7, #0]
 8012982:	68b9      	ldr	r1, [r7, #8]
 8012984:	69b8      	ldr	r0, [r7, #24]
 8012986:	f000 ff3f 	bl	8013808 <xQueueGenericSend>
 801298a:	4603      	mov	r3, r0
 801298c:	2b01      	cmp	r3, #1
 801298e:	d009      	beq.n	80129a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d003      	beq.n	801299e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012996:	f06f 0301 	mvn.w	r3, #1
 801299a:	61fb      	str	r3, [r7, #28]
 801299c:	e002      	b.n	80129a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801299e:	f06f 0302 	mvn.w	r3, #2
 80129a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80129a4:	69fb      	ldr	r3, [r7, #28]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3720      	adds	r7, #32
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	e000ed04 	.word	0xe000ed04

080129b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b088      	sub	sp, #32
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
 80129c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80129c6:	2300      	movs	r3, #0
 80129c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129ca:	f3ef 8305 	mrs	r3, IPSR
 80129ce:	617b      	str	r3, [r7, #20]
  return(result);
 80129d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d028      	beq.n	8012a28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d005      	beq.n	80129e8 <osMessageQueueGet+0x34>
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d002      	beq.n	80129e8 <osMessageQueueGet+0x34>
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d003      	beq.n	80129f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80129e8:	f06f 0303 	mvn.w	r3, #3
 80129ec:	61fb      	str	r3, [r7, #28]
 80129ee:	e037      	b.n	8012a60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80129f0:	2300      	movs	r3, #0
 80129f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80129f4:	f107 0310 	add.w	r3, r7, #16
 80129f8:	461a      	mov	r2, r3
 80129fa:	68b9      	ldr	r1, [r7, #8]
 80129fc:	69b8      	ldr	r0, [r7, #24]
 80129fe:	f001 fb15 	bl	801402c <xQueueReceiveFromISR>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d003      	beq.n	8012a10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012a08:	f06f 0302 	mvn.w	r3, #2
 8012a0c:	61fb      	str	r3, [r7, #28]
 8012a0e:	e027      	b.n	8012a60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d024      	beq.n	8012a60 <osMessageQueueGet+0xac>
 8012a16:	4b15      	ldr	r3, [pc, #84]	; (8012a6c <osMessageQueueGet+0xb8>)
 8012a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	f3bf 8f6f 	isb	sy
 8012a26:	e01b      	b.n	8012a60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d002      	beq.n	8012a34 <osMessageQueueGet+0x80>
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d103      	bne.n	8012a3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012a34:	f06f 0303 	mvn.w	r3, #3
 8012a38:	61fb      	str	r3, [r7, #28]
 8012a3a:	e011      	b.n	8012a60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012a3c:	683a      	ldr	r2, [r7, #0]
 8012a3e:	68b9      	ldr	r1, [r7, #8]
 8012a40:	69b8      	ldr	r0, [r7, #24]
 8012a42:	f001 f907 	bl	8013c54 <xQueueReceive>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d009      	beq.n	8012a60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d003      	beq.n	8012a5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012a52:	f06f 0301 	mvn.w	r3, #1
 8012a56:	61fb      	str	r3, [r7, #28]
 8012a58:	e002      	b.n	8012a60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012a5a:	f06f 0302 	mvn.w	r3, #2
 8012a5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012a60:	69fb      	ldr	r3, [r7, #28]
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3720      	adds	r7, #32
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	e000ed04 	.word	0xe000ed04

08012a70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012a70:	b480      	push	{r7}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4a07      	ldr	r2, [pc, #28]	; (8012a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8012a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	4a06      	ldr	r2, [pc, #24]	; (8012aa0 <vApplicationGetIdleTaskMemory+0x30>)
 8012a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2280      	movs	r2, #128	; 0x80
 8012a8c:	601a      	str	r2, [r3, #0]
}
 8012a8e:	bf00      	nop
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	24002424 	.word	0x24002424
 8012aa0:	24002480 	.word	0x24002480

08012aa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012aa4:	b480      	push	{r7}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	4a07      	ldr	r2, [pc, #28]	; (8012ad0 <vApplicationGetTimerTaskMemory+0x2c>)
 8012ab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	4a06      	ldr	r2, [pc, #24]	; (8012ad4 <vApplicationGetTimerTaskMemory+0x30>)
 8012aba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ac2:	601a      	str	r2, [r3, #0]
}
 8012ac4:	bf00      	nop
 8012ac6:	3714      	adds	r7, #20
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	24002680 	.word	0x24002680
 8012ad4:	240026dc 	.word	0x240026dc

08012ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b08a      	sub	sp, #40	; 0x28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ae4:	f001 ff32 	bl	801494c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012ae8:	4b5b      	ldr	r3, [pc, #364]	; (8012c58 <pvPortMalloc+0x180>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012af0:	f000 f920 	bl	8012d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012af4:	4b59      	ldr	r3, [pc, #356]	; (8012c5c <pvPortMalloc+0x184>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4013      	ands	r3, r2
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f040 8093 	bne.w	8012c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d01d      	beq.n	8012b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b08:	2208      	movs	r2, #8
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f003 0307 	and.w	r3, r3, #7
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d014      	beq.n	8012b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f023 0307 	bic.w	r3, r3, #7
 8012b20:	3308      	adds	r3, #8
 8012b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f003 0307 	and.w	r3, r3, #7
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00a      	beq.n	8012b44 <pvPortMalloc+0x6c>
	__asm volatile
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	f383 8811 	msr	BASEPRI, r3
 8012b36:	f3bf 8f6f 	isb	sy
 8012b3a:	f3bf 8f4f 	dsb	sy
 8012b3e:	617b      	str	r3, [r7, #20]
}
 8012b40:	bf00      	nop
 8012b42:	e7fe      	b.n	8012b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d06e      	beq.n	8012c28 <pvPortMalloc+0x150>
 8012b4a:	4b45      	ldr	r3, [pc, #276]	; (8012c60 <pvPortMalloc+0x188>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d869      	bhi.n	8012c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b54:	4b43      	ldr	r3, [pc, #268]	; (8012c64 <pvPortMalloc+0x18c>)
 8012b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b58:	4b42      	ldr	r3, [pc, #264]	; (8012c64 <pvPortMalloc+0x18c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b5e:	e004      	b.n	8012b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d903      	bls.n	8012b7c <pvPortMalloc+0xa4>
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d1f1      	bne.n	8012b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b7c:	4b36      	ldr	r3, [pc, #216]	; (8012c58 <pvPortMalloc+0x180>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d050      	beq.n	8012c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b86:	6a3b      	ldr	r3, [r7, #32]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2208      	movs	r2, #8
 8012b8c:	4413      	add	r3, r2
 8012b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	685a      	ldr	r2, [r3, #4]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	1ad2      	subs	r2, r2, r3
 8012ba0:	2308      	movs	r3, #8
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d91f      	bls.n	8012be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4413      	add	r3, r2
 8012bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	f003 0307 	and.w	r3, r3, #7
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	613b      	str	r3, [r7, #16]
}
 8012bcc:	bf00      	nop
 8012bce:	e7fe      	b.n	8012bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	685a      	ldr	r2, [r3, #4]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	1ad2      	subs	r2, r2, r3
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012be2:	69b8      	ldr	r0, [r7, #24]
 8012be4:	f000 f908 	bl	8012df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012be8:	4b1d      	ldr	r3, [pc, #116]	; (8012c60 <pvPortMalloc+0x188>)
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	4a1b      	ldr	r2, [pc, #108]	; (8012c60 <pvPortMalloc+0x188>)
 8012bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012bf6:	4b1a      	ldr	r3, [pc, #104]	; (8012c60 <pvPortMalloc+0x188>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	4b1b      	ldr	r3, [pc, #108]	; (8012c68 <pvPortMalloc+0x190>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d203      	bcs.n	8012c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c02:	4b17      	ldr	r3, [pc, #92]	; (8012c60 <pvPortMalloc+0x188>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	4a18      	ldr	r2, [pc, #96]	; (8012c68 <pvPortMalloc+0x190>)
 8012c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	685a      	ldr	r2, [r3, #4]
 8012c0e:	4b13      	ldr	r3, [pc, #76]	; (8012c5c <pvPortMalloc+0x184>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	431a      	orrs	r2, r3
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c1e:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <pvPortMalloc+0x194>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	3301      	adds	r3, #1
 8012c24:	4a11      	ldr	r2, [pc, #68]	; (8012c6c <pvPortMalloc+0x194>)
 8012c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c28:	f001 fe9e 	bl	8014968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	f003 0307 	and.w	r3, r3, #7
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00a      	beq.n	8012c4c <pvPortMalloc+0x174>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	60fb      	str	r3, [r7, #12]
}
 8012c48:	bf00      	nop
 8012c4a:	e7fe      	b.n	8012c4a <pvPortMalloc+0x172>
	return pvReturn;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3728      	adds	r7, #40	; 0x28
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	240066e4 	.word	0x240066e4
 8012c5c:	240066f8 	.word	0x240066f8
 8012c60:	240066e8 	.word	0x240066e8
 8012c64:	240066dc 	.word	0x240066dc
 8012c68:	240066ec 	.word	0x240066ec
 8012c6c:	240066f0 	.word	0x240066f0

08012c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d04d      	beq.n	8012d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c82:	2308      	movs	r3, #8
 8012c84:	425b      	negs	r3, r3
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	4413      	add	r3, r2
 8012c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	685a      	ldr	r2, [r3, #4]
 8012c94:	4b24      	ldr	r3, [pc, #144]	; (8012d28 <vPortFree+0xb8>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4013      	ands	r3, r2
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10a      	bne.n	8012cb4 <vPortFree+0x44>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	60fb      	str	r3, [r7, #12]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00a      	beq.n	8012cd2 <vPortFree+0x62>
	__asm volatile
 8012cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc0:	f383 8811 	msr	BASEPRI, r3
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	60bb      	str	r3, [r7, #8]
}
 8012cce:	bf00      	nop
 8012cd0:	e7fe      	b.n	8012cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	685a      	ldr	r2, [r3, #4]
 8012cd6:	4b14      	ldr	r3, [pc, #80]	; (8012d28 <vPortFree+0xb8>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4013      	ands	r3, r2
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d01e      	beq.n	8012d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d11a      	bne.n	8012d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	685a      	ldr	r2, [r3, #4]
 8012cec:	4b0e      	ldr	r3, [pc, #56]	; (8012d28 <vPortFree+0xb8>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	43db      	mvns	r3, r3
 8012cf2:	401a      	ands	r2, r3
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012cf8:	f001 fe28 	bl	801494c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	4b0a      	ldr	r3, [pc, #40]	; (8012d2c <vPortFree+0xbc>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4413      	add	r3, r2
 8012d06:	4a09      	ldr	r2, [pc, #36]	; (8012d2c <vPortFree+0xbc>)
 8012d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d0a:	6938      	ldr	r0, [r7, #16]
 8012d0c:	f000 f874 	bl	8012df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d10:	4b07      	ldr	r3, [pc, #28]	; (8012d30 <vPortFree+0xc0>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	3301      	adds	r3, #1
 8012d16:	4a06      	ldr	r2, [pc, #24]	; (8012d30 <vPortFree+0xc0>)
 8012d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d1a:	f001 fe25 	bl	8014968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d1e:	bf00      	nop
 8012d20:	3718      	adds	r7, #24
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	240066f8 	.word	0x240066f8
 8012d2c:	240066e8 	.word	0x240066e8
 8012d30:	240066f4 	.word	0x240066f4

08012d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d40:	4b27      	ldr	r3, [pc, #156]	; (8012de0 <prvHeapInit+0xac>)
 8012d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f003 0307 	and.w	r3, r3, #7
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00c      	beq.n	8012d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	3307      	adds	r3, #7
 8012d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f023 0307 	bic.w	r3, r3, #7
 8012d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	4a1f      	ldr	r2, [pc, #124]	; (8012de0 <prvHeapInit+0xac>)
 8012d64:	4413      	add	r3, r2
 8012d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d6c:	4a1d      	ldr	r2, [pc, #116]	; (8012de4 <prvHeapInit+0xb0>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d72:	4b1c      	ldr	r3, [pc, #112]	; (8012de4 <prvHeapInit+0xb0>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	68ba      	ldr	r2, [r7, #8]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d80:	2208      	movs	r2, #8
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	1a9b      	subs	r3, r3, r2
 8012d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f023 0307 	bic.w	r3, r3, #7
 8012d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	4a15      	ldr	r2, [pc, #84]	; (8012de8 <prvHeapInit+0xb4>)
 8012d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d96:	4b14      	ldr	r3, [pc, #80]	; (8012de8 <prvHeapInit+0xb4>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d9e:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <prvHeapInit+0xb4>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2200      	movs	r2, #0
 8012da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	68fa      	ldr	r2, [r7, #12]
 8012dae:	1ad2      	subs	r2, r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012db4:	4b0c      	ldr	r3, [pc, #48]	; (8012de8 <prvHeapInit+0xb4>)
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	4a0a      	ldr	r2, [pc, #40]	; (8012dec <prvHeapInit+0xb8>)
 8012dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	4a09      	ldr	r2, [pc, #36]	; (8012df0 <prvHeapInit+0xbc>)
 8012dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012dcc:	4b09      	ldr	r3, [pc, #36]	; (8012df4 <prvHeapInit+0xc0>)
 8012dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012dd2:	601a      	str	r2, [r3, #0]
}
 8012dd4:	bf00      	nop
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	24002adc 	.word	0x24002adc
 8012de4:	240066dc 	.word	0x240066dc
 8012de8:	240066e4 	.word	0x240066e4
 8012dec:	240066ec 	.word	0x240066ec
 8012df0:	240066e8 	.word	0x240066e8
 8012df4:	240066f8 	.word	0x240066f8

08012df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e00:	4b28      	ldr	r3, [pc, #160]	; (8012ea4 <prvInsertBlockIntoFreeList+0xac>)
 8012e02:	60fb      	str	r3, [r7, #12]
 8012e04:	e002      	b.n	8012e0c <prvInsertBlockIntoFreeList+0x14>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d8f7      	bhi.n	8012e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4413      	add	r3, r2
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d108      	bne.n	8012e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	685a      	ldr	r2, [r3, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	441a      	add	r2, r3
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d118      	bne.n	8012e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	4b15      	ldr	r3, [pc, #84]	; (8012ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d00d      	beq.n	8012e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	685a      	ldr	r2, [r3, #4]
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	441a      	add	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	e008      	b.n	8012e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e76:	4b0c      	ldr	r3, [pc, #48]	; (8012ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	e003      	b.n	8012e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d002      	beq.n	8012e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e96:	bf00      	nop
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	240066dc 	.word	0x240066dc
 8012ea8:	240066e4 	.word	0x240066e4

08012eac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f103 0208 	add.w	r2, r3, #8
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f103 0208 	add.w	r2, r3, #8
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f103 0208 	add.w	r2, r3, #8
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ee0:	bf00      	nop
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012efa:	bf00      	nop
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f06:	b480      	push	{r7}
 8012f08:	b085      	sub	sp, #20
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
 8012f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	689a      	ldr	r2, [r3, #8]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	683a      	ldr	r2, [r7, #0]
 8012f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	1c5a      	adds	r2, r3, #1
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	601a      	str	r2, [r3, #0]
}
 8012f42:	bf00      	nop
 8012f44:	3714      	adds	r7, #20
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f4e:	b480      	push	{r7}
 8012f50:	b085      	sub	sp, #20
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
 8012f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f64:	d103      	bne.n	8012f6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	60fb      	str	r3, [r7, #12]
 8012f6c:	e00c      	b.n	8012f88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	3308      	adds	r3, #8
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	e002      	b.n	8012f7c <vListInsert+0x2e>
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	60fb      	str	r3, [r7, #12]
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d2f6      	bcs.n	8012f76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	685a      	ldr	r2, [r3, #4]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	1c5a      	adds	r2, r3, #1
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	601a      	str	r2, [r3, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr

08012fc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b085      	sub	sp, #20
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	6892      	ldr	r2, [r2, #8]
 8012fd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	6852      	ldr	r2, [r2, #4]
 8012fe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d103      	bne.n	8012ff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	689a      	ldr	r2, [r3, #8]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	1e5a      	subs	r2, r3, #1
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	3b04      	subs	r3, #4
 8013024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801302c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	3b04      	subs	r3, #4
 8013032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	f023 0201 	bic.w	r2, r3, #1
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3b04      	subs	r3, #4
 8013042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013044:	4a0c      	ldr	r2, [pc, #48]	; (8013078 <pxPortInitialiseStack+0x64>)
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	3b14      	subs	r3, #20
 801304e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013050:	687a      	ldr	r2, [r7, #4]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	3b04      	subs	r3, #4
 801305a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	f06f 0202 	mvn.w	r2, #2
 8013062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	3b20      	subs	r3, #32
 8013068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801306a:	68fb      	ldr	r3, [r7, #12]
}
 801306c:	4618      	mov	r0, r3
 801306e:	3714      	adds	r7, #20
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr
 8013078:	0801307d 	.word	0x0801307d

0801307c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013082:	2300      	movs	r3, #0
 8013084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013086:	4b12      	ldr	r3, [pc, #72]	; (80130d0 <prvTaskExitError+0x54>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801308e:	d00a      	beq.n	80130a6 <prvTaskExitError+0x2a>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	60fb      	str	r3, [r7, #12]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <prvTaskExitError+0x28>
	__asm volatile
 80130a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130aa:	f383 8811 	msr	BASEPRI, r3
 80130ae:	f3bf 8f6f 	isb	sy
 80130b2:	f3bf 8f4f 	dsb	sy
 80130b6:	60bb      	str	r3, [r7, #8]
}
 80130b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80130ba:	bf00      	nop
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d0fc      	beq.n	80130bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80130c2:	bf00      	nop
 80130c4:	bf00      	nop
 80130c6:	3714      	adds	r7, #20
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	2400004c 	.word	0x2400004c
	...

080130e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80130e0:	4b07      	ldr	r3, [pc, #28]	; (8013100 <pxCurrentTCBConst2>)
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	6808      	ldr	r0, [r1, #0]
 80130e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ea:	f380 8809 	msr	PSP, r0
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f04f 0000 	mov.w	r0, #0
 80130f6:	f380 8811 	msr	BASEPRI, r0
 80130fa:	4770      	bx	lr
 80130fc:	f3af 8000 	nop.w

08013100 <pxCurrentTCBConst2>:
 8013100:	24006744 	.word	0x24006744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013104:	bf00      	nop
 8013106:	bf00      	nop

08013108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013108:	4808      	ldr	r0, [pc, #32]	; (801312c <prvPortStartFirstTask+0x24>)
 801310a:	6800      	ldr	r0, [r0, #0]
 801310c:	6800      	ldr	r0, [r0, #0]
 801310e:	f380 8808 	msr	MSP, r0
 8013112:	f04f 0000 	mov.w	r0, #0
 8013116:	f380 8814 	msr	CONTROL, r0
 801311a:	b662      	cpsie	i
 801311c:	b661      	cpsie	f
 801311e:	f3bf 8f4f 	dsb	sy
 8013122:	f3bf 8f6f 	isb	sy
 8013126:	df00      	svc	0
 8013128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801312a:	bf00      	nop
 801312c:	e000ed08 	.word	0xe000ed08

08013130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013136:	4b46      	ldr	r3, [pc, #280]	; (8013250 <xPortStartScheduler+0x120>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4a46      	ldr	r2, [pc, #280]	; (8013254 <xPortStartScheduler+0x124>)
 801313c:	4293      	cmp	r3, r2
 801313e:	d10a      	bne.n	8013156 <xPortStartScheduler+0x26>
	__asm volatile
 8013140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013144:	f383 8811 	msr	BASEPRI, r3
 8013148:	f3bf 8f6f 	isb	sy
 801314c:	f3bf 8f4f 	dsb	sy
 8013150:	613b      	str	r3, [r7, #16]
}
 8013152:	bf00      	nop
 8013154:	e7fe      	b.n	8013154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013156:	4b3e      	ldr	r3, [pc, #248]	; (8013250 <xPortStartScheduler+0x120>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4a3f      	ldr	r2, [pc, #252]	; (8013258 <xPortStartScheduler+0x128>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d10a      	bne.n	8013176 <xPortStartScheduler+0x46>
	__asm volatile
 8013160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	60fb      	str	r3, [r7, #12]
}
 8013172:	bf00      	nop
 8013174:	e7fe      	b.n	8013174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013176:	4b39      	ldr	r3, [pc, #228]	; (801325c <xPortStartScheduler+0x12c>)
 8013178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	b2db      	uxtb	r3, r3
 8013180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	22ff      	movs	r2, #255	; 0xff
 8013186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	b2db      	uxtb	r3, r3
 801318e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013190:	78fb      	ldrb	r3, [r7, #3]
 8013192:	b2db      	uxtb	r3, r3
 8013194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013198:	b2da      	uxtb	r2, r3
 801319a:	4b31      	ldr	r3, [pc, #196]	; (8013260 <xPortStartScheduler+0x130>)
 801319c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801319e:	4b31      	ldr	r3, [pc, #196]	; (8013264 <xPortStartScheduler+0x134>)
 80131a0:	2207      	movs	r2, #7
 80131a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131a4:	e009      	b.n	80131ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80131a6:	4b2f      	ldr	r3, [pc, #188]	; (8013264 <xPortStartScheduler+0x134>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	3b01      	subs	r3, #1
 80131ac:	4a2d      	ldr	r2, [pc, #180]	; (8013264 <xPortStartScheduler+0x134>)
 80131ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80131b0:	78fb      	ldrb	r3, [r7, #3]
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	005b      	lsls	r3, r3, #1
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131ba:	78fb      	ldrb	r3, [r7, #3]
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131c2:	2b80      	cmp	r3, #128	; 0x80
 80131c4:	d0ef      	beq.n	80131a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80131c6:	4b27      	ldr	r3, [pc, #156]	; (8013264 <xPortStartScheduler+0x134>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f1c3 0307 	rsb	r3, r3, #7
 80131ce:	2b04      	cmp	r3, #4
 80131d0:	d00a      	beq.n	80131e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80131d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	60bb      	str	r3, [r7, #8]
}
 80131e4:	bf00      	nop
 80131e6:	e7fe      	b.n	80131e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80131e8:	4b1e      	ldr	r3, [pc, #120]	; (8013264 <xPortStartScheduler+0x134>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	021b      	lsls	r3, r3, #8
 80131ee:	4a1d      	ldr	r2, [pc, #116]	; (8013264 <xPortStartScheduler+0x134>)
 80131f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80131f2:	4b1c      	ldr	r3, [pc, #112]	; (8013264 <xPortStartScheduler+0x134>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80131fa:	4a1a      	ldr	r2, [pc, #104]	; (8013264 <xPortStartScheduler+0x134>)
 80131fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	b2da      	uxtb	r2, r3
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013206:	4b18      	ldr	r3, [pc, #96]	; (8013268 <xPortStartScheduler+0x138>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4a17      	ldr	r2, [pc, #92]	; (8013268 <xPortStartScheduler+0x138>)
 801320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013212:	4b15      	ldr	r3, [pc, #84]	; (8013268 <xPortStartScheduler+0x138>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a14      	ldr	r2, [pc, #80]	; (8013268 <xPortStartScheduler+0x138>)
 8013218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801321c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801321e:	f000 f8dd 	bl	80133dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013222:	4b12      	ldr	r3, [pc, #72]	; (801326c <xPortStartScheduler+0x13c>)
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013228:	f000 f8fc 	bl	8013424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801322c:	4b10      	ldr	r3, [pc, #64]	; (8013270 <xPortStartScheduler+0x140>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	4a0f      	ldr	r2, [pc, #60]	; (8013270 <xPortStartScheduler+0x140>)
 8013232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013238:	f7ff ff66 	bl	8013108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801323c:	f001 fcfc 	bl	8014c38 <vTaskSwitchContext>
	prvTaskExitError();
 8013240:	f7ff ff1c 	bl	801307c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013244:	2300      	movs	r3, #0
}
 8013246:	4618      	mov	r0, r3
 8013248:	3718      	adds	r7, #24
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	e000ed00 	.word	0xe000ed00
 8013254:	410fc271 	.word	0x410fc271
 8013258:	410fc270 	.word	0x410fc270
 801325c:	e000e400 	.word	0xe000e400
 8013260:	240066fc 	.word	0x240066fc
 8013264:	24006700 	.word	0x24006700
 8013268:	e000ed20 	.word	0xe000ed20
 801326c:	2400004c 	.word	0x2400004c
 8013270:	e000ef34 	.word	0xe000ef34

08013274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
	__asm volatile
 801327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327e:	f383 8811 	msr	BASEPRI, r3
 8013282:	f3bf 8f6f 	isb	sy
 8013286:	f3bf 8f4f 	dsb	sy
 801328a:	607b      	str	r3, [r7, #4]
}
 801328c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801328e:	4b0f      	ldr	r3, [pc, #60]	; (80132cc <vPortEnterCritical+0x58>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3301      	adds	r3, #1
 8013294:	4a0d      	ldr	r2, [pc, #52]	; (80132cc <vPortEnterCritical+0x58>)
 8013296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013298:	4b0c      	ldr	r3, [pc, #48]	; (80132cc <vPortEnterCritical+0x58>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d10f      	bne.n	80132c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80132a0:	4b0b      	ldr	r3, [pc, #44]	; (80132d0 <vPortEnterCritical+0x5c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00a      	beq.n	80132c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80132aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ae:	f383 8811 	msr	BASEPRI, r3
 80132b2:	f3bf 8f6f 	isb	sy
 80132b6:	f3bf 8f4f 	dsb	sy
 80132ba:	603b      	str	r3, [r7, #0]
}
 80132bc:	bf00      	nop
 80132be:	e7fe      	b.n	80132be <vPortEnterCritical+0x4a>
	}
}
 80132c0:	bf00      	nop
 80132c2:	370c      	adds	r7, #12
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr
 80132cc:	2400004c 	.word	0x2400004c
 80132d0:	e000ed04 	.word	0xe000ed04

080132d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80132da:	4b12      	ldr	r3, [pc, #72]	; (8013324 <vPortExitCritical+0x50>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d10a      	bne.n	80132f8 <vPortExitCritical+0x24>
	__asm volatile
 80132e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e6:	f383 8811 	msr	BASEPRI, r3
 80132ea:	f3bf 8f6f 	isb	sy
 80132ee:	f3bf 8f4f 	dsb	sy
 80132f2:	607b      	str	r3, [r7, #4]
}
 80132f4:	bf00      	nop
 80132f6:	e7fe      	b.n	80132f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80132f8:	4b0a      	ldr	r3, [pc, #40]	; (8013324 <vPortExitCritical+0x50>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	3b01      	subs	r3, #1
 80132fe:	4a09      	ldr	r2, [pc, #36]	; (8013324 <vPortExitCritical+0x50>)
 8013300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013302:	4b08      	ldr	r3, [pc, #32]	; (8013324 <vPortExitCritical+0x50>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d105      	bne.n	8013316 <vPortExitCritical+0x42>
 801330a:	2300      	movs	r3, #0
 801330c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013316:	bf00      	nop
 8013318:	370c      	adds	r7, #12
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	2400004c 	.word	0x2400004c
	...

08013330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013330:	f3ef 8009 	mrs	r0, PSP
 8013334:	f3bf 8f6f 	isb	sy
 8013338:	4b15      	ldr	r3, [pc, #84]	; (8013390 <pxCurrentTCBConst>)
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	f01e 0f10 	tst.w	lr, #16
 8013340:	bf08      	it	eq
 8013342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334a:	6010      	str	r0, [r2, #0]
 801334c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013354:	f380 8811 	msr	BASEPRI, r0
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f001 fc6a 	bl	8014c38 <vTaskSwitchContext>
 8013364:	f04f 0000 	mov.w	r0, #0
 8013368:	f380 8811 	msr	BASEPRI, r0
 801336c:	bc09      	pop	{r0, r3}
 801336e:	6819      	ldr	r1, [r3, #0]
 8013370:	6808      	ldr	r0, [r1, #0]
 8013372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013376:	f01e 0f10 	tst.w	lr, #16
 801337a:	bf08      	it	eq
 801337c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013380:	f380 8809 	msr	PSP, r0
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	f3af 8000 	nop.w

08013390 <pxCurrentTCBConst>:
 8013390:	24006744 	.word	0x24006744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013394:	bf00      	nop
 8013396:	bf00      	nop

08013398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
	__asm volatile
 801339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a2:	f383 8811 	msr	BASEPRI, r3
 80133a6:	f3bf 8f6f 	isb	sy
 80133aa:	f3bf 8f4f 	dsb	sy
 80133ae:	607b      	str	r3, [r7, #4]
}
 80133b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80133b2:	f001 fb87 	bl	8014ac4 <xTaskIncrementTick>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d003      	beq.n	80133c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80133bc:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <xPortSysTickHandler+0x40>)
 80133be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133c2:	601a      	str	r2, [r3, #0]
 80133c4:	2300      	movs	r3, #0
 80133c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	f383 8811 	msr	BASEPRI, r3
}
 80133ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	e000ed04 	.word	0xe000ed04

080133dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80133dc:	b480      	push	{r7}
 80133de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80133e0:	4b0b      	ldr	r3, [pc, #44]	; (8013410 <vPortSetupTimerInterrupt+0x34>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80133e6:	4b0b      	ldr	r3, [pc, #44]	; (8013414 <vPortSetupTimerInterrupt+0x38>)
 80133e8:	2200      	movs	r2, #0
 80133ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80133ec:	4b0a      	ldr	r3, [pc, #40]	; (8013418 <vPortSetupTimerInterrupt+0x3c>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4a0a      	ldr	r2, [pc, #40]	; (801341c <vPortSetupTimerInterrupt+0x40>)
 80133f2:	fba2 2303 	umull	r2, r3, r2, r3
 80133f6:	099b      	lsrs	r3, r3, #6
 80133f8:	4a09      	ldr	r2, [pc, #36]	; (8013420 <vPortSetupTimerInterrupt+0x44>)
 80133fa:	3b01      	subs	r3, #1
 80133fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80133fe:	4b04      	ldr	r3, [pc, #16]	; (8013410 <vPortSetupTimerInterrupt+0x34>)
 8013400:	2207      	movs	r2, #7
 8013402:	601a      	str	r2, [r3, #0]
}
 8013404:	bf00      	nop
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	e000e010 	.word	0xe000e010
 8013414:	e000e018 	.word	0xe000e018
 8013418:	2400003c 	.word	0x2400003c
 801341c:	10624dd3 	.word	0x10624dd3
 8013420:	e000e014 	.word	0xe000e014

08013424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013434 <vPortEnableVFP+0x10>
 8013428:	6801      	ldr	r1, [r0, #0]
 801342a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801342e:	6001      	str	r1, [r0, #0]
 8013430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013432:	bf00      	nop
 8013434:	e000ed88 	.word	0xe000ed88

08013438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801343e:	f3ef 8305 	mrs	r3, IPSR
 8013442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2b0f      	cmp	r3, #15
 8013448:	d914      	bls.n	8013474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801344a:	4a17      	ldr	r2, [pc, #92]	; (80134a8 <vPortValidateInterruptPriority+0x70>)
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	4413      	add	r3, r2
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013454:	4b15      	ldr	r3, [pc, #84]	; (80134ac <vPortValidateInterruptPriority+0x74>)
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	7afa      	ldrb	r2, [r7, #11]
 801345a:	429a      	cmp	r2, r3
 801345c:	d20a      	bcs.n	8013474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013462:	f383 8811 	msr	BASEPRI, r3
 8013466:	f3bf 8f6f 	isb	sy
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	607b      	str	r3, [r7, #4]
}
 8013470:	bf00      	nop
 8013472:	e7fe      	b.n	8013472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013474:	4b0e      	ldr	r3, [pc, #56]	; (80134b0 <vPortValidateInterruptPriority+0x78>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801347c:	4b0d      	ldr	r3, [pc, #52]	; (80134b4 <vPortValidateInterruptPriority+0x7c>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	d90a      	bls.n	801349a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	603b      	str	r3, [r7, #0]
}
 8013496:	bf00      	nop
 8013498:	e7fe      	b.n	8013498 <vPortValidateInterruptPriority+0x60>
	}
 801349a:	bf00      	nop
 801349c:	3714      	adds	r7, #20
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	e000e3f0 	.word	0xe000e3f0
 80134ac:	240066fc 	.word	0x240066fc
 80134b0:	e000ed0c 	.word	0xe000ed0c
 80134b4:	24006700 	.word	0x24006700

080134b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10a      	bne.n	80134e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80134cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d0:	f383 8811 	msr	BASEPRI, r3
 80134d4:	f3bf 8f6f 	isb	sy
 80134d8:	f3bf 8f4f 	dsb	sy
 80134dc:	60bb      	str	r3, [r7, #8]
}
 80134de:	bf00      	nop
 80134e0:	e7fe      	b.n	80134e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80134e2:	f7ff fec7 	bl	8013274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ee:	68f9      	ldr	r1, [r7, #12]
 80134f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80134f2:	fb01 f303 	mul.w	r3, r1, r3
 80134f6:	441a      	add	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2200      	movs	r2, #0
 8013500:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013512:	3b01      	subs	r3, #1
 8013514:	68f9      	ldr	r1, [r7, #12]
 8013516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013518:	fb01 f303 	mul.w	r3, r1, r3
 801351c:	441a      	add	r2, r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	22ff      	movs	r2, #255	; 0xff
 8013526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	22ff      	movs	r2, #255	; 0xff
 801352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d114      	bne.n	8013562 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	691b      	ldr	r3, [r3, #16]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d01a      	beq.n	8013576 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	3310      	adds	r3, #16
 8013544:	4618      	mov	r0, r3
 8013546:	f001 fc25 	bl	8014d94 <xTaskRemoveFromEventList>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	d012      	beq.n	8013576 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013550:	4b0c      	ldr	r3, [pc, #48]	; (8013584 <xQueueGenericReset+0xcc>)
 8013552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	f3bf 8f4f 	dsb	sy
 801355c:	f3bf 8f6f 	isb	sy
 8013560:	e009      	b.n	8013576 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	3310      	adds	r3, #16
 8013566:	4618      	mov	r0, r3
 8013568:	f7ff fca0 	bl	8012eac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	3324      	adds	r3, #36	; 0x24
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff fc9b 	bl	8012eac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013576:	f7ff fead 	bl	80132d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801357a:	2301      	movs	r3, #1
}
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	e000ed04 	.word	0xe000ed04

08013588 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013588:	b580      	push	{r7, lr}
 801358a:	b08e      	sub	sp, #56	; 0x38
 801358c:	af02      	add	r7, sp, #8
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10a      	bne.n	80135b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a0:	f383 8811 	msr	BASEPRI, r3
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	f3bf 8f4f 	dsb	sy
 80135ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135ae:	bf00      	nop
 80135b0:	e7fe      	b.n	80135b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d10a      	bne.n	80135ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	f383 8811 	msr	BASEPRI, r3
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135ca:	bf00      	nop
 80135cc:	e7fe      	b.n	80135cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d002      	beq.n	80135da <xQueueGenericCreateStatic+0x52>
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <xQueueGenericCreateStatic+0x56>
 80135da:	2301      	movs	r3, #1
 80135dc:	e000      	b.n	80135e0 <xQueueGenericCreateStatic+0x58>
 80135de:	2300      	movs	r3, #0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d10a      	bne.n	80135fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80135e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e8:	f383 8811 	msr	BASEPRI, r3
 80135ec:	f3bf 8f6f 	isb	sy
 80135f0:	f3bf 8f4f 	dsb	sy
 80135f4:	623b      	str	r3, [r7, #32]
}
 80135f6:	bf00      	nop
 80135f8:	e7fe      	b.n	80135f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d102      	bne.n	8013606 <xQueueGenericCreateStatic+0x7e>
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d101      	bne.n	801360a <xQueueGenericCreateStatic+0x82>
 8013606:	2301      	movs	r3, #1
 8013608:	e000      	b.n	801360c <xQueueGenericCreateStatic+0x84>
 801360a:	2300      	movs	r3, #0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d10a      	bne.n	8013626 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	61fb      	str	r3, [r7, #28]
}
 8013622:	bf00      	nop
 8013624:	e7fe      	b.n	8013624 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013626:	2350      	movs	r3, #80	; 0x50
 8013628:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	2b50      	cmp	r3, #80	; 0x50
 801362e:	d00a      	beq.n	8013646 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013634:	f383 8811 	msr	BASEPRI, r3
 8013638:	f3bf 8f6f 	isb	sy
 801363c:	f3bf 8f4f 	dsb	sy
 8013640:	61bb      	str	r3, [r7, #24]
}
 8013642:	bf00      	nop
 8013644:	e7fe      	b.n	8013644 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013646:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00d      	beq.n	801366e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013654:	2201      	movs	r2, #1
 8013656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801365a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013660:	9300      	str	r3, [sp, #0]
 8013662:	4613      	mov	r3, r2
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	68b9      	ldr	r1, [r7, #8]
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f000 f83f 	bl	80136ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013670:	4618      	mov	r0, r3
 8013672:	3730      	adds	r7, #48	; 0x30
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013678:	b580      	push	{r7, lr}
 801367a:	b08a      	sub	sp, #40	; 0x28
 801367c:	af02      	add	r7, sp, #8
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	4613      	mov	r3, r2
 8013684:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d10a      	bne.n	80136a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013690:	f383 8811 	msr	BASEPRI, r3
 8013694:	f3bf 8f6f 	isb	sy
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	613b      	str	r3, [r7, #16]
}
 801369e:	bf00      	nop
 80136a0:	e7fe      	b.n	80136a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	68ba      	ldr	r2, [r7, #8]
 80136a6:	fb02 f303 	mul.w	r3, r2, r3
 80136aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	3350      	adds	r3, #80	; 0x50
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff fa11 	bl	8012ad8 <pvPortMalloc>
 80136b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d011      	beq.n	80136e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	3350      	adds	r3, #80	; 0x50
 80136c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	2200      	movs	r2, #0
 80136cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136d0:	79fa      	ldrb	r2, [r7, #7]
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	4613      	mov	r3, r2
 80136d8:	697a      	ldr	r2, [r7, #20]
 80136da:	68b9      	ldr	r1, [r7, #8]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f000 f805 	bl	80136ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80136e2:	69bb      	ldr	r3, [r7, #24]
	}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3720      	adds	r7, #32
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d103      	bne.n	8013708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	69ba      	ldr	r2, [r7, #24]
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	e002      	b.n	801370e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013708:	69bb      	ldr	r3, [r7, #24]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	68ba      	ldr	r2, [r7, #8]
 8013718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801371a:	2101      	movs	r1, #1
 801371c:	69b8      	ldr	r0, [r7, #24]
 801371e:	f7ff fecb 	bl	80134b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	78fa      	ldrb	r2, [r7, #3]
 8013726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801372a:	bf00      	nop
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}

08013732 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013732:	b580      	push	{r7, lr}
 8013734:	b08a      	sub	sp, #40	; 0x28
 8013736:	af02      	add	r7, sp, #8
 8013738:	60f8      	str	r0, [r7, #12]
 801373a:	60b9      	str	r1, [r7, #8]
 801373c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d10a      	bne.n	801375a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	61bb      	str	r3, [r7, #24]
}
 8013756:	bf00      	nop
 8013758:	e7fe      	b.n	8013758 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801375a:	68ba      	ldr	r2, [r7, #8]
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	429a      	cmp	r2, r3
 8013760:	d90a      	bls.n	8013778 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8013762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013766:	f383 8811 	msr	BASEPRI, r3
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	617b      	str	r3, [r7, #20]
}
 8013774:	bf00      	nop
 8013776:	e7fe      	b.n	8013776 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013778:	2302      	movs	r3, #2
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	2100      	movs	r1, #0
 8013782:	68f8      	ldr	r0, [r7, #12]
 8013784:	f7ff ff00 	bl	8013588 <xQueueGenericCreateStatic>
 8013788:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d002      	beq.n	8013796 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	68ba      	ldr	r2, [r7, #8]
 8013794:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013796:	69fb      	ldr	r3, [r7, #28]
	}
 8013798:	4618      	mov	r0, r3
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b086      	sub	sp, #24
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d10a      	bne.n	80137c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80137b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	613b      	str	r3, [r7, #16]
}
 80137c2:	bf00      	nop
 80137c4:	e7fe      	b.n	80137c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80137c6:	683a      	ldr	r2, [r7, #0]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d90a      	bls.n	80137e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80137ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d2:	f383 8811 	msr	BASEPRI, r3
 80137d6:	f3bf 8f6f 	isb	sy
 80137da:	f3bf 8f4f 	dsb	sy
 80137de:	60fb      	str	r3, [r7, #12]
}
 80137e0:	bf00      	nop
 80137e2:	e7fe      	b.n	80137e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80137e4:	2202      	movs	r2, #2
 80137e6:	2100      	movs	r1, #0
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff ff45 	bl	8013678 <xQueueGenericCreate>
 80137ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d002      	beq.n	80137fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	683a      	ldr	r2, [r7, #0]
 80137fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80137fc:	697b      	ldr	r3, [r7, #20]
	}
 80137fe:	4618      	mov	r0, r3
 8013800:	3718      	adds	r7, #24
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
	...

08013808 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08e      	sub	sp, #56	; 0x38
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
 8013814:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013816:	2300      	movs	r3, #0
 8013818:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10a      	bne.n	801383a <xQueueGenericSend+0x32>
	__asm volatile
 8013824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013836:	bf00      	nop
 8013838:	e7fe      	b.n	8013838 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d103      	bne.n	8013848 <xQueueGenericSend+0x40>
 8013840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013844:	2b00      	cmp	r3, #0
 8013846:	d101      	bne.n	801384c <xQueueGenericSend+0x44>
 8013848:	2301      	movs	r3, #1
 801384a:	e000      	b.n	801384e <xQueueGenericSend+0x46>
 801384c:	2300      	movs	r3, #0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d10a      	bne.n	8013868 <xQueueGenericSend+0x60>
	__asm volatile
 8013852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013864:	bf00      	nop
 8013866:	e7fe      	b.n	8013866 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	2b02      	cmp	r3, #2
 801386c:	d103      	bne.n	8013876 <xQueueGenericSend+0x6e>
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013872:	2b01      	cmp	r3, #1
 8013874:	d101      	bne.n	801387a <xQueueGenericSend+0x72>
 8013876:	2301      	movs	r3, #1
 8013878:	e000      	b.n	801387c <xQueueGenericSend+0x74>
 801387a:	2300      	movs	r3, #0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d10a      	bne.n	8013896 <xQueueGenericSend+0x8e>
	__asm volatile
 8013880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013884:	f383 8811 	msr	BASEPRI, r3
 8013888:	f3bf 8f6f 	isb	sy
 801388c:	f3bf 8f4f 	dsb	sy
 8013890:	623b      	str	r3, [r7, #32]
}
 8013892:	bf00      	nop
 8013894:	e7fe      	b.n	8013894 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013896:	f001 fc3b 	bl	8015110 <xTaskGetSchedulerState>
 801389a:	4603      	mov	r3, r0
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <xQueueGenericSend+0x9e>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <xQueueGenericSend+0xa2>
 80138a6:	2301      	movs	r3, #1
 80138a8:	e000      	b.n	80138ac <xQueueGenericSend+0xa4>
 80138aa:	2300      	movs	r3, #0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d10a      	bne.n	80138c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80138b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b4:	f383 8811 	msr	BASEPRI, r3
 80138b8:	f3bf 8f6f 	isb	sy
 80138bc:	f3bf 8f4f 	dsb	sy
 80138c0:	61fb      	str	r3, [r7, #28]
}
 80138c2:	bf00      	nop
 80138c4:	e7fe      	b.n	80138c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138c6:	f7ff fcd5 	bl	8013274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d302      	bcc.n	80138dc <xQueueGenericSend+0xd4>
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	2b02      	cmp	r3, #2
 80138da:	d129      	bne.n	8013930 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138dc:	683a      	ldr	r2, [r7, #0]
 80138de:	68b9      	ldr	r1, [r7, #8]
 80138e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138e2:	f000 fc5e 	bl	80141a2 <prvCopyDataToQueue>
 80138e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d010      	beq.n	8013912 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	3324      	adds	r3, #36	; 0x24
 80138f4:	4618      	mov	r0, r3
 80138f6:	f001 fa4d 	bl	8014d94 <xTaskRemoveFromEventList>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d013      	beq.n	8013928 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013900:	4b3f      	ldr	r3, [pc, #252]	; (8013a00 <xQueueGenericSend+0x1f8>)
 8013902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	e00a      	b.n	8013928 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013914:	2b00      	cmp	r3, #0
 8013916:	d007      	beq.n	8013928 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013918:	4b39      	ldr	r3, [pc, #228]	; (8013a00 <xQueueGenericSend+0x1f8>)
 801391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801391e:	601a      	str	r2, [r3, #0]
 8013920:	f3bf 8f4f 	dsb	sy
 8013924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013928:	f7ff fcd4 	bl	80132d4 <vPortExitCritical>
				return pdPASS;
 801392c:	2301      	movs	r3, #1
 801392e:	e063      	b.n	80139f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d103      	bne.n	801393e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013936:	f7ff fccd 	bl	80132d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801393a:	2300      	movs	r3, #0
 801393c:	e05c      	b.n	80139f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013940:	2b00      	cmp	r3, #0
 8013942:	d106      	bne.n	8013952 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013944:	f107 0314 	add.w	r3, r7, #20
 8013948:	4618      	mov	r0, r3
 801394a:	f001 fa87 	bl	8014e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801394e:	2301      	movs	r3, #1
 8013950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013952:	f7ff fcbf 	bl	80132d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013956:	f000 fff9 	bl	801494c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801395a:	f7ff fc8b 	bl	8013274 <vPortEnterCritical>
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013964:	b25b      	sxtb	r3, r3
 8013966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801396a:	d103      	bne.n	8013974 <xQueueGenericSend+0x16c>
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	2200      	movs	r2, #0
 8013970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801397a:	b25b      	sxtb	r3, r3
 801397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013980:	d103      	bne.n	801398a <xQueueGenericSend+0x182>
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	2200      	movs	r2, #0
 8013986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801398a:	f7ff fca3 	bl	80132d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801398e:	1d3a      	adds	r2, r7, #4
 8013990:	f107 0314 	add.w	r3, r7, #20
 8013994:	4611      	mov	r1, r2
 8013996:	4618      	mov	r0, r3
 8013998:	f001 fa76 	bl	8014e88 <xTaskCheckForTimeOut>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d124      	bne.n	80139ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80139a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139a4:	f000 fcf5 	bl	8014392 <prvIsQueueFull>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d018      	beq.n	80139e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80139ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b0:	3310      	adds	r3, #16
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	4611      	mov	r1, r2
 80139b6:	4618      	mov	r0, r3
 80139b8:	f001 f99c 	bl	8014cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80139bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139be:	f000 fc80 	bl	80142c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80139c2:	f000 ffd1 	bl	8014968 <xTaskResumeAll>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	f47f af7c 	bne.w	80138c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80139ce:	4b0c      	ldr	r3, [pc, #48]	; (8013a00 <xQueueGenericSend+0x1f8>)
 80139d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139d4:	601a      	str	r2, [r3, #0]
 80139d6:	f3bf 8f4f 	dsb	sy
 80139da:	f3bf 8f6f 	isb	sy
 80139de:	e772      	b.n	80138c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139e2:	f000 fc6e 	bl	80142c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139e6:	f000 ffbf 	bl	8014968 <xTaskResumeAll>
 80139ea:	e76c      	b.n	80138c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ee:	f000 fc68 	bl	80142c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139f2:	f000 ffb9 	bl	8014968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3738      	adds	r7, #56	; 0x38
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	e000ed04 	.word	0xe000ed04

08013a04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b090      	sub	sp, #64	; 0x40
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d10a      	bne.n	8013a32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a20:	f383 8811 	msr	BASEPRI, r3
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	f3bf 8f4f 	dsb	sy
 8013a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a2e:	bf00      	nop
 8013a30:	e7fe      	b.n	8013a30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d103      	bne.n	8013a40 <xQueueGenericSendFromISR+0x3c>
 8013a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d101      	bne.n	8013a44 <xQueueGenericSendFromISR+0x40>
 8013a40:	2301      	movs	r3, #1
 8013a42:	e000      	b.n	8013a46 <xQueueGenericSendFromISR+0x42>
 8013a44:	2300      	movs	r3, #0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d10a      	bne.n	8013a60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4e:	f383 8811 	msr	BASEPRI, r3
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a5c:	bf00      	nop
 8013a5e:	e7fe      	b.n	8013a5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d103      	bne.n	8013a6e <xQueueGenericSendFromISR+0x6a>
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	d101      	bne.n	8013a72 <xQueueGenericSendFromISR+0x6e>
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e000      	b.n	8013a74 <xQueueGenericSendFromISR+0x70>
 8013a72:	2300      	movs	r3, #0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10a      	bne.n	8013a8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	623b      	str	r3, [r7, #32]
}
 8013a8a:	bf00      	nop
 8013a8c:	e7fe      	b.n	8013a8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a8e:	f7ff fcd3 	bl	8013438 <vPortValidateInterruptPriority>
	__asm volatile
 8013a92:	f3ef 8211 	mrs	r2, BASEPRI
 8013a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	61fa      	str	r2, [r7, #28]
 8013aa8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013aaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013aac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d302      	bcc.n	8013ac0 <xQueueGenericSendFromISR+0xbc>
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	2b02      	cmp	r3, #2
 8013abe:	d12f      	bne.n	8013b20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ace:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ad6:	f000 fb64 	bl	80141a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ada:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae2:	d112      	bne.n	8013b0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d016      	beq.n	8013b1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aee:	3324      	adds	r3, #36	; 0x24
 8013af0:	4618      	mov	r0, r3
 8013af2:	f001 f94f 	bl	8014d94 <xTaskRemoveFromEventList>
 8013af6:	4603      	mov	r3, r0
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00e      	beq.n	8013b1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00b      	beq.n	8013b1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2201      	movs	r2, #1
 8013b06:	601a      	str	r2, [r3, #0]
 8013b08:	e007      	b.n	8013b1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013b0e:	3301      	adds	r3, #1
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	b25a      	sxtb	r2, r3
 8013b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013b1e:	e001      	b.n	8013b24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b20:	2300      	movs	r3, #0
 8013b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b26:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	f383 8811 	msr	BASEPRI, r3
}
 8013b2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3740      	adds	r7, #64	; 0x40
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b08e      	sub	sp, #56	; 0x38
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d10a      	bne.n	8013b64 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	623b      	str	r3, [r7, #32]
}
 8013b60:	bf00      	nop
 8013b62:	e7fe      	b.n	8013b62 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00a      	beq.n	8013b82 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b70:	f383 8811 	msr	BASEPRI, r3
 8013b74:	f3bf 8f6f 	isb	sy
 8013b78:	f3bf 8f4f 	dsb	sy
 8013b7c:	61fb      	str	r3, [r7, #28]
}
 8013b7e:	bf00      	nop
 8013b80:	e7fe      	b.n	8013b80 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d103      	bne.n	8013b92 <xQueueGiveFromISR+0x58>
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8c:	689b      	ldr	r3, [r3, #8]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d101      	bne.n	8013b96 <xQueueGiveFromISR+0x5c>
 8013b92:	2301      	movs	r3, #1
 8013b94:	e000      	b.n	8013b98 <xQueueGiveFromISR+0x5e>
 8013b96:	2300      	movs	r3, #0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d10a      	bne.n	8013bb2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba0:	f383 8811 	msr	BASEPRI, r3
 8013ba4:	f3bf 8f6f 	isb	sy
 8013ba8:	f3bf 8f4f 	dsb	sy
 8013bac:	61bb      	str	r3, [r7, #24]
}
 8013bae:	bf00      	nop
 8013bb0:	e7fe      	b.n	8013bb0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bb2:	f7ff fc41 	bl	8013438 <vPortValidateInterruptPriority>
	__asm volatile
 8013bb6:	f3ef 8211 	mrs	r2, BASEPRI
 8013bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	617a      	str	r2, [r7, #20]
 8013bcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013bce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d22b      	bcs.n	8013c3a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bee:	1c5a      	adds	r2, r3, #1
 8013bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bfc:	d112      	bne.n	8013c24 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d016      	beq.n	8013c34 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c08:	3324      	adds	r3, #36	; 0x24
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f001 f8c2 	bl	8014d94 <xTaskRemoveFromEventList>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00e      	beq.n	8013c34 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00b      	beq.n	8013c34 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	2201      	movs	r2, #1
 8013c20:	601a      	str	r2, [r3, #0]
 8013c22:	e007      	b.n	8013c34 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c28:	3301      	adds	r3, #1
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	b25a      	sxtb	r2, r3
 8013c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013c34:	2301      	movs	r3, #1
 8013c36:	637b      	str	r3, [r7, #52]	; 0x34
 8013c38:	e001      	b.n	8013c3e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8013c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	f383 8811 	msr	BASEPRI, r3
}
 8013c48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3738      	adds	r7, #56	; 0x38
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b08c      	sub	sp, #48	; 0x30
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	60f8      	str	r0, [r7, #12]
 8013c5c:	60b9      	str	r1, [r7, #8]
 8013c5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c60:	2300      	movs	r3, #0
 8013c62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d10a      	bne.n	8013c84 <xQueueReceive+0x30>
	__asm volatile
 8013c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c72:	f383 8811 	msr	BASEPRI, r3
 8013c76:	f3bf 8f6f 	isb	sy
 8013c7a:	f3bf 8f4f 	dsb	sy
 8013c7e:	623b      	str	r3, [r7, #32]
}
 8013c80:	bf00      	nop
 8013c82:	e7fe      	b.n	8013c82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d103      	bne.n	8013c92 <xQueueReceive+0x3e>
 8013c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d101      	bne.n	8013c96 <xQueueReceive+0x42>
 8013c92:	2301      	movs	r3, #1
 8013c94:	e000      	b.n	8013c98 <xQueueReceive+0x44>
 8013c96:	2300      	movs	r3, #0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d10a      	bne.n	8013cb2 <xQueueReceive+0x5e>
	__asm volatile
 8013c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	61fb      	str	r3, [r7, #28]
}
 8013cae:	bf00      	nop
 8013cb0:	e7fe      	b.n	8013cb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013cb2:	f001 fa2d 	bl	8015110 <xTaskGetSchedulerState>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d102      	bne.n	8013cc2 <xQueueReceive+0x6e>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d101      	bne.n	8013cc6 <xQueueReceive+0x72>
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e000      	b.n	8013cc8 <xQueueReceive+0x74>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d10a      	bne.n	8013ce2 <xQueueReceive+0x8e>
	__asm volatile
 8013ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd0:	f383 8811 	msr	BASEPRI, r3
 8013cd4:	f3bf 8f6f 	isb	sy
 8013cd8:	f3bf 8f4f 	dsb	sy
 8013cdc:	61bb      	str	r3, [r7, #24]
}
 8013cde:	bf00      	nop
 8013ce0:	e7fe      	b.n	8013ce0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013ce2:	f7ff fac7 	bl	8013274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d01f      	beq.n	8013d32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cf2:	68b9      	ldr	r1, [r7, #8]
 8013cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cf6:	f000 fabe 	bl	8014276 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	1e5a      	subs	r2, r3, #1
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	691b      	ldr	r3, [r3, #16]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00f      	beq.n	8013d2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0c:	3310      	adds	r3, #16
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f001 f840 	bl	8014d94 <xTaskRemoveFromEventList>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d007      	beq.n	8013d2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013d1a:	4b3d      	ldr	r3, [pc, #244]	; (8013e10 <xQueueReceive+0x1bc>)
 8013d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d20:	601a      	str	r2, [r3, #0]
 8013d22:	f3bf 8f4f 	dsb	sy
 8013d26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013d2a:	f7ff fad3 	bl	80132d4 <vPortExitCritical>
				return pdPASS;
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e069      	b.n	8013e06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d103      	bne.n	8013d40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d38:	f7ff facc 	bl	80132d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	e062      	b.n	8013e06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d46:	f107 0310 	add.w	r3, r7, #16
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f001 f886 	bl	8014e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d50:	2301      	movs	r3, #1
 8013d52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d54:	f7ff fabe 	bl	80132d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d58:	f000 fdf8 	bl	801494c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d5c:	f7ff fa8a 	bl	8013274 <vPortEnterCritical>
 8013d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d66:	b25b      	sxtb	r3, r3
 8013d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6c:	d103      	bne.n	8013d76 <xQueueReceive+0x122>
 8013d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d70:	2200      	movs	r2, #0
 8013d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d7c:	b25b      	sxtb	r3, r3
 8013d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d82:	d103      	bne.n	8013d8c <xQueueReceive+0x138>
 8013d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d86:	2200      	movs	r2, #0
 8013d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d8c:	f7ff faa2 	bl	80132d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d90:	1d3a      	adds	r2, r7, #4
 8013d92:	f107 0310 	add.w	r3, r7, #16
 8013d96:	4611      	mov	r1, r2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f001 f875 	bl	8014e88 <xTaskCheckForTimeOut>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d123      	bne.n	8013dec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013da6:	f000 fade 	bl	8014366 <prvIsQueueEmpty>
 8013daa:	4603      	mov	r3, r0
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d017      	beq.n	8013de0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db2:	3324      	adds	r3, #36	; 0x24
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	4611      	mov	r1, r2
 8013db8:	4618      	mov	r0, r3
 8013dba:	f000 ff9b 	bl	8014cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dc0:	f000 fa7f 	bl	80142c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013dc4:	f000 fdd0 	bl	8014968 <xTaskResumeAll>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d189      	bne.n	8013ce2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013dce:	4b10      	ldr	r3, [pc, #64]	; (8013e10 <xQueueReceive+0x1bc>)
 8013dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	f3bf 8f4f 	dsb	sy
 8013dda:	f3bf 8f6f 	isb	sy
 8013dde:	e780      	b.n	8013ce2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013de2:	f000 fa6e 	bl	80142c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013de6:	f000 fdbf 	bl	8014968 <xTaskResumeAll>
 8013dea:	e77a      	b.n	8013ce2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dee:	f000 fa68 	bl	80142c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013df2:	f000 fdb9 	bl	8014968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013df8:	f000 fab5 	bl	8014366 <prvIsQueueEmpty>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	f43f af6f 	beq.w	8013ce2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3730      	adds	r7, #48	; 0x30
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	e000ed04 	.word	0xe000ed04

08013e14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b08e      	sub	sp, #56	; 0x38
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013e26:	2300      	movs	r3, #0
 8013e28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d10a      	bne.n	8013e46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e34:	f383 8811 	msr	BASEPRI, r3
 8013e38:	f3bf 8f6f 	isb	sy
 8013e3c:	f3bf 8f4f 	dsb	sy
 8013e40:	623b      	str	r3, [r7, #32]
}
 8013e42:	bf00      	nop
 8013e44:	e7fe      	b.n	8013e44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00a      	beq.n	8013e64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e52:	f383 8811 	msr	BASEPRI, r3
 8013e56:	f3bf 8f6f 	isb	sy
 8013e5a:	f3bf 8f4f 	dsb	sy
 8013e5e:	61fb      	str	r3, [r7, #28]
}
 8013e60:	bf00      	nop
 8013e62:	e7fe      	b.n	8013e62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e64:	f001 f954 	bl	8015110 <xTaskGetSchedulerState>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d102      	bne.n	8013e74 <xQueueSemaphoreTake+0x60>
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d101      	bne.n	8013e78 <xQueueSemaphoreTake+0x64>
 8013e74:	2301      	movs	r3, #1
 8013e76:	e000      	b.n	8013e7a <xQueueSemaphoreTake+0x66>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d10a      	bne.n	8013e94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	61bb      	str	r3, [r7, #24]
}
 8013e90:	bf00      	nop
 8013e92:	e7fe      	b.n	8013e92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e94:	f7ff f9ee 	bl	8013274 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d024      	beq.n	8013eee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	1e5a      	subs	r2, r3, #1
 8013ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d104      	bne.n	8013ebe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013eb4:	f001 faa2 	bl	80153fc <pvTaskIncrementMutexHeldCount>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec0:	691b      	ldr	r3, [r3, #16]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d00f      	beq.n	8013ee6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	3310      	adds	r3, #16
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 ff62 	bl	8014d94 <xTaskRemoveFromEventList>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d007      	beq.n	8013ee6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013ed6:	4b54      	ldr	r3, [pc, #336]	; (8014028 <xQueueSemaphoreTake+0x214>)
 8013ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013edc:	601a      	str	r2, [r3, #0]
 8013ede:	f3bf 8f4f 	dsb	sy
 8013ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013ee6:	f7ff f9f5 	bl	80132d4 <vPortExitCritical>
				return pdPASS;
 8013eea:	2301      	movs	r3, #1
 8013eec:	e097      	b.n	801401e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d111      	bne.n	8013f18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00a      	beq.n	8013f10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	617b      	str	r3, [r7, #20]
}
 8013f0c:	bf00      	nop
 8013f0e:	e7fe      	b.n	8013f0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013f10:	f7ff f9e0 	bl	80132d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013f14:	2300      	movs	r3, #0
 8013f16:	e082      	b.n	801401e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d106      	bne.n	8013f2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f1e:	f107 030c 	add.w	r3, r7, #12
 8013f22:	4618      	mov	r0, r3
 8013f24:	f000 ff9a 	bl	8014e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f28:	2301      	movs	r3, #1
 8013f2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f2c:	f7ff f9d2 	bl	80132d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f30:	f000 fd0c 	bl	801494c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f34:	f7ff f99e 	bl	8013274 <vPortEnterCritical>
 8013f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f3e:	b25b      	sxtb	r3, r3
 8013f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f44:	d103      	bne.n	8013f4e <xQueueSemaphoreTake+0x13a>
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f54:	b25b      	sxtb	r3, r3
 8013f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f5a:	d103      	bne.n	8013f64 <xQueueSemaphoreTake+0x150>
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	2200      	movs	r2, #0
 8013f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f64:	f7ff f9b6 	bl	80132d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f68:	463a      	mov	r2, r7
 8013f6a:	f107 030c 	add.w	r3, r7, #12
 8013f6e:	4611      	mov	r1, r2
 8013f70:	4618      	mov	r0, r3
 8013f72:	f000 ff89 	bl	8014e88 <xTaskCheckForTimeOut>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d132      	bne.n	8013fe2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f7e:	f000 f9f2 	bl	8014366 <prvIsQueueEmpty>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d026      	beq.n	8013fd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d109      	bne.n	8013fa4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013f90:	f7ff f970 	bl	8013274 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f001 f8d7 	bl	801514c <xTaskPriorityInherit>
 8013f9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013fa0:	f7ff f998 	bl	80132d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa6:	3324      	adds	r3, #36	; 0x24
 8013fa8:	683a      	ldr	r2, [r7, #0]
 8013faa:	4611      	mov	r1, r2
 8013fac:	4618      	mov	r0, r3
 8013fae:	f000 fea1 	bl	8014cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fb4:	f000 f985 	bl	80142c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013fb8:	f000 fcd6 	bl	8014968 <xTaskResumeAll>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f47f af68 	bne.w	8013e94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013fc4:	4b18      	ldr	r3, [pc, #96]	; (8014028 <xQueueSemaphoreTake+0x214>)
 8013fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fca:	601a      	str	r2, [r3, #0]
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	f3bf 8f6f 	isb	sy
 8013fd4:	e75e      	b.n	8013e94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fd8:	f000 f973 	bl	80142c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fdc:	f000 fcc4 	bl	8014968 <xTaskResumeAll>
 8013fe0:	e758      	b.n	8013e94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fe4:	f000 f96d 	bl	80142c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fe8:	f000 fcbe 	bl	8014968 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fee:	f000 f9ba 	bl	8014366 <prvIsQueueEmpty>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f43f af4d 	beq.w	8013e94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d00d      	beq.n	801401c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8014000:	f7ff f938 	bl	8013274 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014006:	f000 f8b4 	bl	8014172 <prvGetDisinheritPriorityAfterTimeout>
 801400a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400e:	689b      	ldr	r3, [r3, #8]
 8014010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014012:	4618      	mov	r0, r3
 8014014:	f001 f970 	bl	80152f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014018:	f7ff f95c 	bl	80132d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801401c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801401e:	4618      	mov	r0, r3
 8014020:	3738      	adds	r7, #56	; 0x38
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	e000ed04 	.word	0xe000ed04

0801402c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b08e      	sub	sp, #56	; 0x38
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403e:	2b00      	cmp	r3, #0
 8014040:	d10a      	bne.n	8014058 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014046:	f383 8811 	msr	BASEPRI, r3
 801404a:	f3bf 8f6f 	isb	sy
 801404e:	f3bf 8f4f 	dsb	sy
 8014052:	623b      	str	r3, [r7, #32]
}
 8014054:	bf00      	nop
 8014056:	e7fe      	b.n	8014056 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d103      	bne.n	8014066 <xQueueReceiveFromISR+0x3a>
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014062:	2b00      	cmp	r3, #0
 8014064:	d101      	bne.n	801406a <xQueueReceiveFromISR+0x3e>
 8014066:	2301      	movs	r3, #1
 8014068:	e000      	b.n	801406c <xQueueReceiveFromISR+0x40>
 801406a:	2300      	movs	r3, #0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10a      	bne.n	8014086 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014074:	f383 8811 	msr	BASEPRI, r3
 8014078:	f3bf 8f6f 	isb	sy
 801407c:	f3bf 8f4f 	dsb	sy
 8014080:	61fb      	str	r3, [r7, #28]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014086:	f7ff f9d7 	bl	8013438 <vPortValidateInterruptPriority>
	__asm volatile
 801408a:	f3ef 8211 	mrs	r2, BASEPRI
 801408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014092:	f383 8811 	msr	BASEPRI, r3
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	f3bf 8f4f 	dsb	sy
 801409e:	61ba      	str	r2, [r7, #24]
 80140a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80140a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80140a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d02f      	beq.n	8014112 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80140b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80140bc:	68b9      	ldr	r1, [r7, #8]
 80140be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140c0:	f000 f8d9 	bl	8014276 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80140c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c6:	1e5a      	subs	r2, r3, #1
 80140c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80140cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80140d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d4:	d112      	bne.n	80140fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	691b      	ldr	r3, [r3, #16]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d016      	beq.n	801410c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e0:	3310      	adds	r3, #16
 80140e2:	4618      	mov	r0, r3
 80140e4:	f000 fe56 	bl	8014d94 <xTaskRemoveFromEventList>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d00e      	beq.n	801410c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00b      	beq.n	801410c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2201      	movs	r2, #1
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	e007      	b.n	801410c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80140fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014100:	3301      	adds	r3, #1
 8014102:	b2db      	uxtb	r3, r3
 8014104:	b25a      	sxtb	r2, r3
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801410c:	2301      	movs	r3, #1
 801410e:	637b      	str	r3, [r7, #52]	; 0x34
 8014110:	e001      	b.n	8014116 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014112:	2300      	movs	r3, #0
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
 8014116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014118:	613b      	str	r3, [r7, #16]
	__asm volatile
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	f383 8811 	msr	BASEPRI, r3
}
 8014120:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014124:	4618      	mov	r0, r3
 8014126:	3738      	adds	r7, #56	; 0x38
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10a      	bne.n	8014154 <vQueueDelete+0x28>
	__asm volatile
 801413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014142:	f383 8811 	msr	BASEPRI, r3
 8014146:	f3bf 8f6f 	isb	sy
 801414a:	f3bf 8f4f 	dsb	sy
 801414e:	60bb      	str	r3, [r7, #8]
}
 8014150:	bf00      	nop
 8014152:	e7fe      	b.n	8014152 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014154:	68f8      	ldr	r0, [r7, #12]
 8014156:	f000 f95f 	bl	8014418 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014160:	2b00      	cmp	r3, #0
 8014162:	d102      	bne.n	801416a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8014164:	68f8      	ldr	r0, [r7, #12]
 8014166:	f7fe fd83 	bl	8012c70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801416a:	bf00      	nop
 801416c:	3710      	adds	r7, #16
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}

08014172 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014172:	b480      	push	{r7}
 8014174:	b085      	sub	sp, #20
 8014176:	af00      	add	r7, sp, #0
 8014178:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417e:	2b00      	cmp	r3, #0
 8014180:	d006      	beq.n	8014190 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801418c:	60fb      	str	r3, [r7, #12]
 801418e:	e001      	b.n	8014194 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014190:	2300      	movs	r3, #0
 8014192:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014194:	68fb      	ldr	r3, [r7, #12]
	}
 8014196:	4618      	mov	r0, r3
 8014198:	3714      	adds	r7, #20
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr

080141a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b086      	sub	sp, #24
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	60f8      	str	r0, [r7, #12]
 80141aa:	60b9      	str	r1, [r7, #8]
 80141ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80141ae:	2300      	movs	r3, #0
 80141b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d10d      	bne.n	80141dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d14d      	bne.n	8014264 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f001 f825 	bl	801521c <xTaskPriorityDisinherit>
 80141d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	2200      	movs	r2, #0
 80141d8:	609a      	str	r2, [r3, #8]
 80141da:	e043      	b.n	8014264 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d119      	bne.n	8014216 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	6858      	ldr	r0, [r3, #4]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ea:	461a      	mov	r2, r3
 80141ec:	68b9      	ldr	r1, [r7, #8]
 80141ee:	f011 fb04 	bl	80257fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	685a      	ldr	r2, [r3, #4]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141fa:	441a      	add	r2, r3
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	685a      	ldr	r2, [r3, #4]
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	689b      	ldr	r3, [r3, #8]
 8014208:	429a      	cmp	r2, r3
 801420a:	d32b      	bcc.n	8014264 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	605a      	str	r2, [r3, #4]
 8014214:	e026      	b.n	8014264 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	68d8      	ldr	r0, [r3, #12]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801421e:	461a      	mov	r2, r3
 8014220:	68b9      	ldr	r1, [r7, #8]
 8014222:	f011 faea 	bl	80257fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	68da      	ldr	r2, [r3, #12]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801422e:	425b      	negs	r3, r3
 8014230:	441a      	add	r2, r3
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	68da      	ldr	r2, [r3, #12]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	429a      	cmp	r2, r3
 8014240:	d207      	bcs.n	8014252 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	689a      	ldr	r2, [r3, #8]
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801424a:	425b      	negs	r3, r3
 801424c:	441a      	add	r2, r3
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b02      	cmp	r3, #2
 8014256:	d105      	bne.n	8014264 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d002      	beq.n	8014264 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	3b01      	subs	r3, #1
 8014262:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	1c5a      	adds	r2, r3, #1
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801426c:	697b      	ldr	r3, [r7, #20]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}

08014276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014276:	b580      	push	{r7, lr}
 8014278:	b082      	sub	sp, #8
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014284:	2b00      	cmp	r3, #0
 8014286:	d018      	beq.n	80142ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	68da      	ldr	r2, [r3, #12]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014290:	441a      	add	r2, r3
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	68da      	ldr	r2, [r3, #12]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	689b      	ldr	r3, [r3, #8]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d303      	bcc.n	80142aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	68d9      	ldr	r1, [r3, #12]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b2:	461a      	mov	r2, r3
 80142b4:	6838      	ldr	r0, [r7, #0]
 80142b6:	f011 faa0 	bl	80257fa <memcpy>
	}
}
 80142ba:	bf00      	nop
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}

080142c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b084      	sub	sp, #16
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80142ca:	f7fe ffd3 	bl	8013274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142d6:	e011      	b.n	80142fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d012      	beq.n	8014306 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	3324      	adds	r3, #36	; 0x24
 80142e4:	4618      	mov	r0, r3
 80142e6:	f000 fd55 	bl	8014d94 <xTaskRemoveFromEventList>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80142f0:	f000 fe2c 	bl	8014f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80142f4:	7bfb      	ldrb	r3, [r7, #15]
 80142f6:	3b01      	subs	r3, #1
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014300:	2b00      	cmp	r3, #0
 8014302:	dce9      	bgt.n	80142d8 <prvUnlockQueue+0x16>
 8014304:	e000      	b.n	8014308 <prvUnlockQueue+0x46>
					break;
 8014306:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	22ff      	movs	r2, #255	; 0xff
 801430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014310:	f7fe ffe0 	bl	80132d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014314:	f7fe ffae 	bl	8013274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801431e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014320:	e011      	b.n	8014346 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d012      	beq.n	8014350 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	3310      	adds	r3, #16
 801432e:	4618      	mov	r0, r3
 8014330:	f000 fd30 	bl	8014d94 <xTaskRemoveFromEventList>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801433a:	f000 fe07 	bl	8014f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801433e:	7bbb      	ldrb	r3, [r7, #14]
 8014340:	3b01      	subs	r3, #1
 8014342:	b2db      	uxtb	r3, r3
 8014344:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801434a:	2b00      	cmp	r3, #0
 801434c:	dce9      	bgt.n	8014322 <prvUnlockQueue+0x60>
 801434e:	e000      	b.n	8014352 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014350:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	22ff      	movs	r2, #255	; 0xff
 8014356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801435a:	f7fe ffbb 	bl	80132d4 <vPortExitCritical>
}
 801435e:	bf00      	nop
 8014360:	3710      	adds	r7, #16
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}

08014366 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014366:	b580      	push	{r7, lr}
 8014368:	b084      	sub	sp, #16
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801436e:	f7fe ff81 	bl	8013274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014376:	2b00      	cmp	r3, #0
 8014378:	d102      	bne.n	8014380 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801437a:	2301      	movs	r3, #1
 801437c:	60fb      	str	r3, [r7, #12]
 801437e:	e001      	b.n	8014384 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014380:	2300      	movs	r3, #0
 8014382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014384:	f7fe ffa6 	bl	80132d4 <vPortExitCritical>

	return xReturn;
 8014388:	68fb      	ldr	r3, [r7, #12]
}
 801438a:	4618      	mov	r0, r3
 801438c:	3710      	adds	r7, #16
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014392:	b580      	push	{r7, lr}
 8014394:	b084      	sub	sp, #16
 8014396:	af00      	add	r7, sp, #0
 8014398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801439a:	f7fe ff6b 	bl	8013274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d102      	bne.n	80143b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80143aa:	2301      	movs	r3, #1
 80143ac:	60fb      	str	r3, [r7, #12]
 80143ae:	e001      	b.n	80143b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80143b0:	2300      	movs	r3, #0
 80143b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80143b4:	f7fe ff8e 	bl	80132d4 <vPortExitCritical>

	return xReturn;
 80143b8:	68fb      	ldr	r3, [r7, #12]
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3710      	adds	r7, #16
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
	...

080143c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80143c4:	b480      	push	{r7}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143ce:	2300      	movs	r3, #0
 80143d0:	60fb      	str	r3, [r7, #12]
 80143d2:	e014      	b.n	80143fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80143d4:	4a0f      	ldr	r2, [pc, #60]	; (8014414 <vQueueAddToRegistry+0x50>)
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d10b      	bne.n	80143f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80143e0:	490c      	ldr	r1, [pc, #48]	; (8014414 <vQueueAddToRegistry+0x50>)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	683a      	ldr	r2, [r7, #0]
 80143e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80143ea:	4a0a      	ldr	r2, [pc, #40]	; (8014414 <vQueueAddToRegistry+0x50>)
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	4413      	add	r3, r2
 80143f2:	687a      	ldr	r2, [r7, #4]
 80143f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80143f6:	e006      	b.n	8014406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	3301      	adds	r3, #1
 80143fc:	60fb      	str	r3, [r7, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2b07      	cmp	r3, #7
 8014402:	d9e7      	bls.n	80143d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014404:	bf00      	nop
 8014406:	bf00      	nop
 8014408:	3714      	adds	r7, #20
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop
 8014414:	24006704 	.word	0x24006704

08014418 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014420:	2300      	movs	r3, #0
 8014422:	60fb      	str	r3, [r7, #12]
 8014424:	e016      	b.n	8014454 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014426:	4a10      	ldr	r2, [pc, #64]	; (8014468 <vQueueUnregisterQueue+0x50>)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	00db      	lsls	r3, r3, #3
 801442c:	4413      	add	r3, r2
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	429a      	cmp	r2, r3
 8014434:	d10b      	bne.n	801444e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014436:	4a0c      	ldr	r2, [pc, #48]	; (8014468 <vQueueUnregisterQueue+0x50>)
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2100      	movs	r1, #0
 801443c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014440:	4a09      	ldr	r2, [pc, #36]	; (8014468 <vQueueUnregisterQueue+0x50>)
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	00db      	lsls	r3, r3, #3
 8014446:	4413      	add	r3, r2
 8014448:	2200      	movs	r2, #0
 801444a:	605a      	str	r2, [r3, #4]
				break;
 801444c:	e006      	b.n	801445c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	3301      	adds	r3, #1
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2b07      	cmp	r3, #7
 8014458:	d9e5      	bls.n	8014426 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801445a:	bf00      	nop
 801445c:	bf00      	nop
 801445e:	3714      	adds	r7, #20
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr
 8014468:	24006704 	.word	0x24006704

0801446c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801447c:	f7fe fefa 	bl	8013274 <vPortEnterCritical>
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014486:	b25b      	sxtb	r3, r3
 8014488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801448c:	d103      	bne.n	8014496 <vQueueWaitForMessageRestricted+0x2a>
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	2200      	movs	r2, #0
 8014492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801449c:	b25b      	sxtb	r3, r3
 801449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a2:	d103      	bne.n	80144ac <vQueueWaitForMessageRestricted+0x40>
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80144ac:	f7fe ff12 	bl	80132d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d106      	bne.n	80144c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	3324      	adds	r3, #36	; 0x24
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	68b9      	ldr	r1, [r7, #8]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f000 fc3b 	bl	8014d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80144c6:	6978      	ldr	r0, [r7, #20]
 80144c8:	f7ff fefb 	bl	80142c2 <prvUnlockQueue>
	}
 80144cc:	bf00      	nop
 80144ce:	3718      	adds	r7, #24
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b08e      	sub	sp, #56	; 0x38
 80144d8:	af04      	add	r7, sp, #16
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
 80144e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80144e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d10a      	bne.n	80144fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80144e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ec:	f383 8811 	msr	BASEPRI, r3
 80144f0:	f3bf 8f6f 	isb	sy
 80144f4:	f3bf 8f4f 	dsb	sy
 80144f8:	623b      	str	r3, [r7, #32]
}
 80144fa:	bf00      	nop
 80144fc:	e7fe      	b.n	80144fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80144fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014500:	2b00      	cmp	r3, #0
 8014502:	d10a      	bne.n	801451a <xTaskCreateStatic+0x46>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	61fb      	str	r3, [r7, #28]
}
 8014516:	bf00      	nop
 8014518:	e7fe      	b.n	8014518 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801451a:	235c      	movs	r3, #92	; 0x5c
 801451c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2b5c      	cmp	r3, #92	; 0x5c
 8014522:	d00a      	beq.n	801453a <xTaskCreateStatic+0x66>
	__asm volatile
 8014524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	61bb      	str	r3, [r7, #24]
}
 8014536:	bf00      	nop
 8014538:	e7fe      	b.n	8014538 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801453a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453e:	2b00      	cmp	r3, #0
 8014540:	d01e      	beq.n	8014580 <xTaskCreateStatic+0xac>
 8014542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014544:	2b00      	cmp	r3, #0
 8014546:	d01b      	beq.n	8014580 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014550:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	2202      	movs	r2, #2
 8014556:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801455a:	2300      	movs	r3, #0
 801455c:	9303      	str	r3, [sp, #12]
 801455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014560:	9302      	str	r3, [sp, #8]
 8014562:	f107 0314 	add.w	r3, r7, #20
 8014566:	9301      	str	r3, [sp, #4]
 8014568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456a:	9300      	str	r3, [sp, #0]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	68b9      	ldr	r1, [r7, #8]
 8014572:	68f8      	ldr	r0, [r7, #12]
 8014574:	f000 f850 	bl	8014618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801457a:	f000 f8dd 	bl	8014738 <prvAddNewTaskToReadyList>
 801457e:	e001      	b.n	8014584 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014580:	2300      	movs	r3, #0
 8014582:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014584:	697b      	ldr	r3, [r7, #20]
	}
 8014586:	4618      	mov	r0, r3
 8014588:	3728      	adds	r7, #40	; 0x28
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}

0801458e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801458e:	b580      	push	{r7, lr}
 8014590:	b08c      	sub	sp, #48	; 0x30
 8014592:	af04      	add	r7, sp, #16
 8014594:	60f8      	str	r0, [r7, #12]
 8014596:	60b9      	str	r1, [r7, #8]
 8014598:	603b      	str	r3, [r7, #0]
 801459a:	4613      	mov	r3, r2
 801459c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801459e:	88fb      	ldrh	r3, [r7, #6]
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fe fa98 	bl	8012ad8 <pvPortMalloc>
 80145a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00e      	beq.n	80145ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80145b0:	205c      	movs	r0, #92	; 0x5c
 80145b2:	f7fe fa91 	bl	8012ad8 <pvPortMalloc>
 80145b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d003      	beq.n	80145c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	631a      	str	r2, [r3, #48]	; 0x30
 80145c4:	e005      	b.n	80145d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80145c6:	6978      	ldr	r0, [r7, #20]
 80145c8:	f7fe fb52 	bl	8012c70 <vPortFree>
 80145cc:	e001      	b.n	80145d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80145ce:	2300      	movs	r3, #0
 80145d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d017      	beq.n	8014608 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	2200      	movs	r2, #0
 80145dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80145e0:	88fa      	ldrh	r2, [r7, #6]
 80145e2:	2300      	movs	r3, #0
 80145e4:	9303      	str	r3, [sp, #12]
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	9302      	str	r3, [sp, #8]
 80145ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ec:	9301      	str	r3, [sp, #4]
 80145ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	68b9      	ldr	r1, [r7, #8]
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f000 f80e 	bl	8014618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80145fc:	69f8      	ldr	r0, [r7, #28]
 80145fe:	f000 f89b 	bl	8014738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014602:	2301      	movs	r3, #1
 8014604:	61bb      	str	r3, [r7, #24]
 8014606:	e002      	b.n	801460e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014608:	f04f 33ff 	mov.w	r3, #4294967295
 801460c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801460e:	69bb      	ldr	r3, [r7, #24]
	}
 8014610:	4618      	mov	r0, r3
 8014612:	3720      	adds	r7, #32
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
 8014624:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014628:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	461a      	mov	r2, r3
 8014630:	21a5      	movs	r1, #165	; 0xa5
 8014632:	f011 f812 	bl	802565a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801463a:	6879      	ldr	r1, [r7, #4]
 801463c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014640:	440b      	add	r3, r1
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	4413      	add	r3, r2
 8014646:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	f023 0307 	bic.w	r3, r3, #7
 801464e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	f003 0307 	and.w	r3, r3, #7
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00a      	beq.n	8014670 <prvInitialiseNewTask+0x58>
	__asm volatile
 801465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465e:	f383 8811 	msr	BASEPRI, r3
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	617b      	str	r3, [r7, #20]
}
 801466c:	bf00      	nop
 801466e:	e7fe      	b.n	801466e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d01f      	beq.n	80146b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014676:	2300      	movs	r3, #0
 8014678:	61fb      	str	r3, [r7, #28]
 801467a:	e012      	b.n	80146a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801467c:	68ba      	ldr	r2, [r7, #8]
 801467e:	69fb      	ldr	r3, [r7, #28]
 8014680:	4413      	add	r3, r2
 8014682:	7819      	ldrb	r1, [r3, #0]
 8014684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	4413      	add	r3, r2
 801468a:	3334      	adds	r3, #52	; 0x34
 801468c:	460a      	mov	r2, r1
 801468e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014690:	68ba      	ldr	r2, [r7, #8]
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	4413      	add	r3, r2
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d006      	beq.n	80146aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	3301      	adds	r3, #1
 80146a0:	61fb      	str	r3, [r7, #28]
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	2b0f      	cmp	r3, #15
 80146a6:	d9e9      	bls.n	801467c <prvInitialiseNewTask+0x64>
 80146a8:	e000      	b.n	80146ac <prvInitialiseNewTask+0x94>
			{
				break;
 80146aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80146ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ae:	2200      	movs	r2, #0
 80146b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80146b4:	e003      	b.n	80146be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80146b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b8:	2200      	movs	r2, #0
 80146ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80146be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c0:	2b37      	cmp	r3, #55	; 0x37
 80146c2:	d901      	bls.n	80146c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80146c4:	2337      	movs	r3, #55	; 0x37
 80146c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80146c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80146ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d6:	2200      	movs	r2, #0
 80146d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	3304      	adds	r3, #4
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fc04 	bl	8012eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80146e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e6:	3318      	adds	r3, #24
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fe fbff 	bl	8012eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80146ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80146fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014706:	2200      	movs	r2, #0
 8014708:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470c:	2200      	movs	r2, #0
 801470e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014712:	683a      	ldr	r2, [r7, #0]
 8014714:	68f9      	ldr	r1, [r7, #12]
 8014716:	69b8      	ldr	r0, [r7, #24]
 8014718:	f7fe fc7c 	bl	8013014 <pxPortInitialiseStack>
 801471c:	4602      	mov	r2, r0
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801472c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801472e:	bf00      	nop
 8014730:	3720      	adds	r7, #32
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
	...

08014738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014740:	f7fe fd98 	bl	8013274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014744:	4b2d      	ldr	r3, [pc, #180]	; (80147fc <prvAddNewTaskToReadyList+0xc4>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	3301      	adds	r3, #1
 801474a:	4a2c      	ldr	r2, [pc, #176]	; (80147fc <prvAddNewTaskToReadyList+0xc4>)
 801474c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801474e:	4b2c      	ldr	r3, [pc, #176]	; (8014800 <prvAddNewTaskToReadyList+0xc8>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d109      	bne.n	801476a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014756:	4a2a      	ldr	r2, [pc, #168]	; (8014800 <prvAddNewTaskToReadyList+0xc8>)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801475c:	4b27      	ldr	r3, [pc, #156]	; (80147fc <prvAddNewTaskToReadyList+0xc4>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d110      	bne.n	8014786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014764:	f000 fc16 	bl	8014f94 <prvInitialiseTaskLists>
 8014768:	e00d      	b.n	8014786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801476a:	4b26      	ldr	r3, [pc, #152]	; (8014804 <prvAddNewTaskToReadyList+0xcc>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d109      	bne.n	8014786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014772:	4b23      	ldr	r3, [pc, #140]	; (8014800 <prvAddNewTaskToReadyList+0xc8>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801477c:	429a      	cmp	r2, r3
 801477e:	d802      	bhi.n	8014786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014780:	4a1f      	ldr	r2, [pc, #124]	; (8014800 <prvAddNewTaskToReadyList+0xc8>)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014786:	4b20      	ldr	r3, [pc, #128]	; (8014808 <prvAddNewTaskToReadyList+0xd0>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	3301      	adds	r3, #1
 801478c:	4a1e      	ldr	r2, [pc, #120]	; (8014808 <prvAddNewTaskToReadyList+0xd0>)
 801478e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014790:	4b1d      	ldr	r3, [pc, #116]	; (8014808 <prvAddNewTaskToReadyList+0xd0>)
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801479c:	4b1b      	ldr	r3, [pc, #108]	; (801480c <prvAddNewTaskToReadyList+0xd4>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d903      	bls.n	80147ac <prvAddNewTaskToReadyList+0x74>
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a8:	4a18      	ldr	r2, [pc, #96]	; (801480c <prvAddNewTaskToReadyList+0xd4>)
 80147aa:	6013      	str	r3, [r2, #0]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147b0:	4613      	mov	r3, r2
 80147b2:	009b      	lsls	r3, r3, #2
 80147b4:	4413      	add	r3, r2
 80147b6:	009b      	lsls	r3, r3, #2
 80147b8:	4a15      	ldr	r2, [pc, #84]	; (8014810 <prvAddNewTaskToReadyList+0xd8>)
 80147ba:	441a      	add	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	3304      	adds	r3, #4
 80147c0:	4619      	mov	r1, r3
 80147c2:	4610      	mov	r0, r2
 80147c4:	f7fe fb9f 	bl	8012f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80147c8:	f7fe fd84 	bl	80132d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80147cc:	4b0d      	ldr	r3, [pc, #52]	; (8014804 <prvAddNewTaskToReadyList+0xcc>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d00e      	beq.n	80147f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80147d4:	4b0a      	ldr	r3, [pc, #40]	; (8014800 <prvAddNewTaskToReadyList+0xc8>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147de:	429a      	cmp	r2, r3
 80147e0:	d207      	bcs.n	80147f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80147e2:	4b0c      	ldr	r3, [pc, #48]	; (8014814 <prvAddNewTaskToReadyList+0xdc>)
 80147e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147e8:	601a      	str	r2, [r3, #0]
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147f2:	bf00      	nop
 80147f4:	3708      	adds	r7, #8
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	24006c18 	.word	0x24006c18
 8014800:	24006744 	.word	0x24006744
 8014804:	24006c24 	.word	0x24006c24
 8014808:	24006c34 	.word	0x24006c34
 801480c:	24006c20 	.word	0x24006c20
 8014810:	24006748 	.word	0x24006748
 8014814:	e000ed04 	.word	0xe000ed04

08014818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014820:	2300      	movs	r3, #0
 8014822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d017      	beq.n	801485a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801482a:	4b13      	ldr	r3, [pc, #76]	; (8014878 <vTaskDelay+0x60>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00a      	beq.n	8014848 <vTaskDelay+0x30>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014836:	f383 8811 	msr	BASEPRI, r3
 801483a:	f3bf 8f6f 	isb	sy
 801483e:	f3bf 8f4f 	dsb	sy
 8014842:	60bb      	str	r3, [r7, #8]
}
 8014844:	bf00      	nop
 8014846:	e7fe      	b.n	8014846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014848:	f000 f880 	bl	801494c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801484c:	2100      	movs	r1, #0
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 fde8 	bl	8015424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014854:	f000 f888 	bl	8014968 <xTaskResumeAll>
 8014858:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d107      	bne.n	8014870 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014860:	4b06      	ldr	r3, [pc, #24]	; (801487c <vTaskDelay+0x64>)
 8014862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014866:	601a      	str	r2, [r3, #0]
 8014868:	f3bf 8f4f 	dsb	sy
 801486c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014870:	bf00      	nop
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	24006c40 	.word	0x24006c40
 801487c:	e000ed04 	.word	0xe000ed04

08014880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b08a      	sub	sp, #40	; 0x28
 8014884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014886:	2300      	movs	r3, #0
 8014888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801488a:	2300      	movs	r3, #0
 801488c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801488e:	463a      	mov	r2, r7
 8014890:	1d39      	adds	r1, r7, #4
 8014892:	f107 0308 	add.w	r3, r7, #8
 8014896:	4618      	mov	r0, r3
 8014898:	f7fe f8ea 	bl	8012a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801489c:	6839      	ldr	r1, [r7, #0]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	9202      	str	r2, [sp, #8]
 80148a4:	9301      	str	r3, [sp, #4]
 80148a6:	2300      	movs	r3, #0
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	2300      	movs	r3, #0
 80148ac:	460a      	mov	r2, r1
 80148ae:	4921      	ldr	r1, [pc, #132]	; (8014934 <vTaskStartScheduler+0xb4>)
 80148b0:	4821      	ldr	r0, [pc, #132]	; (8014938 <vTaskStartScheduler+0xb8>)
 80148b2:	f7ff fe0f 	bl	80144d4 <xTaskCreateStatic>
 80148b6:	4603      	mov	r3, r0
 80148b8:	4a20      	ldr	r2, [pc, #128]	; (801493c <vTaskStartScheduler+0xbc>)
 80148ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80148bc:	4b1f      	ldr	r3, [pc, #124]	; (801493c <vTaskStartScheduler+0xbc>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80148c4:	2301      	movs	r3, #1
 80148c6:	617b      	str	r3, [r7, #20]
 80148c8:	e001      	b.n	80148ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80148ca:	2300      	movs	r3, #0
 80148cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d102      	bne.n	80148da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80148d4:	f000 fdfa 	bl	80154cc <xTimerCreateTimerTask>
 80148d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d116      	bne.n	801490e <vTaskStartScheduler+0x8e>
	__asm volatile
 80148e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e4:	f383 8811 	msr	BASEPRI, r3
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	613b      	str	r3, [r7, #16]
}
 80148f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80148f4:	4b12      	ldr	r3, [pc, #72]	; (8014940 <vTaskStartScheduler+0xc0>)
 80148f6:	f04f 32ff 	mov.w	r2, #4294967295
 80148fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80148fc:	4b11      	ldr	r3, [pc, #68]	; (8014944 <vTaskStartScheduler+0xc4>)
 80148fe:	2201      	movs	r2, #1
 8014900:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014902:	4b11      	ldr	r3, [pc, #68]	; (8014948 <vTaskStartScheduler+0xc8>)
 8014904:	2200      	movs	r2, #0
 8014906:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014908:	f7fe fc12 	bl	8013130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801490c:	e00e      	b.n	801492c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014914:	d10a      	bne.n	801492c <vTaskStartScheduler+0xac>
	__asm volatile
 8014916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491a:	f383 8811 	msr	BASEPRI, r3
 801491e:	f3bf 8f6f 	isb	sy
 8014922:	f3bf 8f4f 	dsb	sy
 8014926:	60fb      	str	r3, [r7, #12]
}
 8014928:	bf00      	nop
 801492a:	e7fe      	b.n	801492a <vTaskStartScheduler+0xaa>
}
 801492c:	bf00      	nop
 801492e:	3718      	adds	r7, #24
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	08026f74 	.word	0x08026f74
 8014938:	08014f65 	.word	0x08014f65
 801493c:	24006c3c 	.word	0x24006c3c
 8014940:	24006c38 	.word	0x24006c38
 8014944:	24006c24 	.word	0x24006c24
 8014948:	24006c1c 	.word	0x24006c1c

0801494c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801494c:	b480      	push	{r7}
 801494e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014950:	4b04      	ldr	r3, [pc, #16]	; (8014964 <vTaskSuspendAll+0x18>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	3301      	adds	r3, #1
 8014956:	4a03      	ldr	r2, [pc, #12]	; (8014964 <vTaskSuspendAll+0x18>)
 8014958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801495a:	bf00      	nop
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr
 8014964:	24006c40 	.word	0x24006c40

08014968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801496e:	2300      	movs	r3, #0
 8014970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014972:	2300      	movs	r3, #0
 8014974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014976:	4b42      	ldr	r3, [pc, #264]	; (8014a80 <xTaskResumeAll+0x118>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d10a      	bne.n	8014994 <xTaskResumeAll+0x2c>
	__asm volatile
 801497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014982:	f383 8811 	msr	BASEPRI, r3
 8014986:	f3bf 8f6f 	isb	sy
 801498a:	f3bf 8f4f 	dsb	sy
 801498e:	603b      	str	r3, [r7, #0]
}
 8014990:	bf00      	nop
 8014992:	e7fe      	b.n	8014992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014994:	f7fe fc6e 	bl	8013274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014998:	4b39      	ldr	r3, [pc, #228]	; (8014a80 <xTaskResumeAll+0x118>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	3b01      	subs	r3, #1
 801499e:	4a38      	ldr	r2, [pc, #224]	; (8014a80 <xTaskResumeAll+0x118>)
 80149a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149a2:	4b37      	ldr	r3, [pc, #220]	; (8014a80 <xTaskResumeAll+0x118>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d162      	bne.n	8014a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80149aa:	4b36      	ldr	r3, [pc, #216]	; (8014a84 <xTaskResumeAll+0x11c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d05e      	beq.n	8014a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80149b2:	e02f      	b.n	8014a14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149b4:	4b34      	ldr	r3, [pc, #208]	; (8014a88 <xTaskResumeAll+0x120>)
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3318      	adds	r3, #24
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fe fafd 	bl	8012fc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	3304      	adds	r3, #4
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7fe faf8 	bl	8012fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149d4:	4b2d      	ldr	r3, [pc, #180]	; (8014a8c <xTaskResumeAll+0x124>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	429a      	cmp	r2, r3
 80149da:	d903      	bls.n	80149e4 <xTaskResumeAll+0x7c>
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e0:	4a2a      	ldr	r2, [pc, #168]	; (8014a8c <xTaskResumeAll+0x124>)
 80149e2:	6013      	str	r3, [r2, #0]
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e8:	4613      	mov	r3, r2
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	4413      	add	r3, r2
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	4a27      	ldr	r2, [pc, #156]	; (8014a90 <xTaskResumeAll+0x128>)
 80149f2:	441a      	add	r2, r3
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	3304      	adds	r3, #4
 80149f8:	4619      	mov	r1, r3
 80149fa:	4610      	mov	r0, r2
 80149fc:	f7fe fa83 	bl	8012f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a04:	4b23      	ldr	r3, [pc, #140]	; (8014a94 <xTaskResumeAll+0x12c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d302      	bcc.n	8014a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014a0e:	4b22      	ldr	r3, [pc, #136]	; (8014a98 <xTaskResumeAll+0x130>)
 8014a10:	2201      	movs	r2, #1
 8014a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014a14:	4b1c      	ldr	r3, [pc, #112]	; (8014a88 <xTaskResumeAll+0x120>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d1cb      	bne.n	80149b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014a22:	f000 fb55 	bl	80150d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014a26:	4b1d      	ldr	r3, [pc, #116]	; (8014a9c <xTaskResumeAll+0x134>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d010      	beq.n	8014a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014a32:	f000 f847 	bl	8014ac4 <xTaskIncrementTick>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014a3c:	4b16      	ldr	r3, [pc, #88]	; (8014a98 <xTaskResumeAll+0x130>)
 8014a3e:	2201      	movs	r2, #1
 8014a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d1f1      	bne.n	8014a32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014a4e:	4b13      	ldr	r3, [pc, #76]	; (8014a9c <xTaskResumeAll+0x134>)
 8014a50:	2200      	movs	r2, #0
 8014a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014a54:	4b10      	ldr	r3, [pc, #64]	; (8014a98 <xTaskResumeAll+0x130>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d009      	beq.n	8014a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014a60:	4b0f      	ldr	r3, [pc, #60]	; (8014aa0 <xTaskResumeAll+0x138>)
 8014a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a66:	601a      	str	r2, [r3, #0]
 8014a68:	f3bf 8f4f 	dsb	sy
 8014a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a70:	f7fe fc30 	bl	80132d4 <vPortExitCritical>

	return xAlreadyYielded;
 8014a74:	68bb      	ldr	r3, [r7, #8]
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	24006c40 	.word	0x24006c40
 8014a84:	24006c18 	.word	0x24006c18
 8014a88:	24006bd8 	.word	0x24006bd8
 8014a8c:	24006c20 	.word	0x24006c20
 8014a90:	24006748 	.word	0x24006748
 8014a94:	24006744 	.word	0x24006744
 8014a98:	24006c2c 	.word	0x24006c2c
 8014a9c:	24006c28 	.word	0x24006c28
 8014aa0:	e000ed04 	.word	0xe000ed04

08014aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014aaa:	4b05      	ldr	r3, [pc, #20]	; (8014ac0 <xTaskGetTickCount+0x1c>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014ab0:	687b      	ldr	r3, [r7, #4]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	370c      	adds	r7, #12
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	24006c1c 	.word	0x24006c1c

08014ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014aca:	2300      	movs	r3, #0
 8014acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ace:	4b4f      	ldr	r3, [pc, #316]	; (8014c0c <xTaskIncrementTick+0x148>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f040 808f 	bne.w	8014bf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014ad8:	4b4d      	ldr	r3, [pc, #308]	; (8014c10 <xTaskIncrementTick+0x14c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	3301      	adds	r3, #1
 8014ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014ae0:	4a4b      	ldr	r2, [pc, #300]	; (8014c10 <xTaskIncrementTick+0x14c>)
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d120      	bne.n	8014b2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014aec:	4b49      	ldr	r3, [pc, #292]	; (8014c14 <xTaskIncrementTick+0x150>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d00a      	beq.n	8014b0c <xTaskIncrementTick+0x48>
	__asm volatile
 8014af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014afa:	f383 8811 	msr	BASEPRI, r3
 8014afe:	f3bf 8f6f 	isb	sy
 8014b02:	f3bf 8f4f 	dsb	sy
 8014b06:	603b      	str	r3, [r7, #0]
}
 8014b08:	bf00      	nop
 8014b0a:	e7fe      	b.n	8014b0a <xTaskIncrementTick+0x46>
 8014b0c:	4b41      	ldr	r3, [pc, #260]	; (8014c14 <xTaskIncrementTick+0x150>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	60fb      	str	r3, [r7, #12]
 8014b12:	4b41      	ldr	r3, [pc, #260]	; (8014c18 <xTaskIncrementTick+0x154>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4a3f      	ldr	r2, [pc, #252]	; (8014c14 <xTaskIncrementTick+0x150>)
 8014b18:	6013      	str	r3, [r2, #0]
 8014b1a:	4a3f      	ldr	r2, [pc, #252]	; (8014c18 <xTaskIncrementTick+0x154>)
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	6013      	str	r3, [r2, #0]
 8014b20:	4b3e      	ldr	r3, [pc, #248]	; (8014c1c <xTaskIncrementTick+0x158>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	3301      	adds	r3, #1
 8014b26:	4a3d      	ldr	r2, [pc, #244]	; (8014c1c <xTaskIncrementTick+0x158>)
 8014b28:	6013      	str	r3, [r2, #0]
 8014b2a:	f000 fad1 	bl	80150d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014b2e:	4b3c      	ldr	r3, [pc, #240]	; (8014c20 <xTaskIncrementTick+0x15c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	693a      	ldr	r2, [r7, #16]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d349      	bcc.n	8014bcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b38:	4b36      	ldr	r3, [pc, #216]	; (8014c14 <xTaskIncrementTick+0x150>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d104      	bne.n	8014b4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b42:	4b37      	ldr	r3, [pc, #220]	; (8014c20 <xTaskIncrementTick+0x15c>)
 8014b44:	f04f 32ff 	mov.w	r2, #4294967295
 8014b48:	601a      	str	r2, [r3, #0]
					break;
 8014b4a:	e03f      	b.n	8014bcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b4c:	4b31      	ldr	r3, [pc, #196]	; (8014c14 <xTaskIncrementTick+0x150>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014b5c:	693a      	ldr	r2, [r7, #16]
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d203      	bcs.n	8014b6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014b64:	4a2e      	ldr	r2, [pc, #184]	; (8014c20 <xTaskIncrementTick+0x15c>)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014b6a:	e02f      	b.n	8014bcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	3304      	adds	r3, #4
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7fe fa25 	bl	8012fc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d004      	beq.n	8014b88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	3318      	adds	r3, #24
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fe fa1c 	bl	8012fc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b8c:	4b25      	ldr	r3, [pc, #148]	; (8014c24 <xTaskIncrementTick+0x160>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d903      	bls.n	8014b9c <xTaskIncrementTick+0xd8>
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b98:	4a22      	ldr	r2, [pc, #136]	; (8014c24 <xTaskIncrementTick+0x160>)
 8014b9a:	6013      	str	r3, [r2, #0]
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	4413      	add	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4a1f      	ldr	r2, [pc, #124]	; (8014c28 <xTaskIncrementTick+0x164>)
 8014baa:	441a      	add	r2, r3
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	3304      	adds	r3, #4
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	f7fe f9a7 	bl	8012f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bbc:	4b1b      	ldr	r3, [pc, #108]	; (8014c2c <xTaskIncrementTick+0x168>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d3b8      	bcc.n	8014b38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014bca:	e7b5      	b.n	8014b38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014bcc:	4b17      	ldr	r3, [pc, #92]	; (8014c2c <xTaskIncrementTick+0x168>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bd2:	4915      	ldr	r1, [pc, #84]	; (8014c28 <xTaskIncrementTick+0x164>)
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	009b      	lsls	r3, r3, #2
 8014bd8:	4413      	add	r3, r2
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	440b      	add	r3, r1
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d901      	bls.n	8014be8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014be4:	2301      	movs	r3, #1
 8014be6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014be8:	4b11      	ldr	r3, [pc, #68]	; (8014c30 <xTaskIncrementTick+0x16c>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d007      	beq.n	8014c00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	617b      	str	r3, [r7, #20]
 8014bf4:	e004      	b.n	8014c00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014bf6:	4b0f      	ldr	r3, [pc, #60]	; (8014c34 <xTaskIncrementTick+0x170>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	4a0d      	ldr	r2, [pc, #52]	; (8014c34 <xTaskIncrementTick+0x170>)
 8014bfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014c00:	697b      	ldr	r3, [r7, #20]
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3718      	adds	r7, #24
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	24006c40 	.word	0x24006c40
 8014c10:	24006c1c 	.word	0x24006c1c
 8014c14:	24006bd0 	.word	0x24006bd0
 8014c18:	24006bd4 	.word	0x24006bd4
 8014c1c:	24006c30 	.word	0x24006c30
 8014c20:	24006c38 	.word	0x24006c38
 8014c24:	24006c20 	.word	0x24006c20
 8014c28:	24006748 	.word	0x24006748
 8014c2c:	24006744 	.word	0x24006744
 8014c30:	24006c2c 	.word	0x24006c2c
 8014c34:	24006c28 	.word	0x24006c28

08014c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b085      	sub	sp, #20
 8014c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014c3e:	4b28      	ldr	r3, [pc, #160]	; (8014ce0 <vTaskSwitchContext+0xa8>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d003      	beq.n	8014c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014c46:	4b27      	ldr	r3, [pc, #156]	; (8014ce4 <vTaskSwitchContext+0xac>)
 8014c48:	2201      	movs	r2, #1
 8014c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014c4c:	e041      	b.n	8014cd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014c4e:	4b25      	ldr	r3, [pc, #148]	; (8014ce4 <vTaskSwitchContext+0xac>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c54:	4b24      	ldr	r3, [pc, #144]	; (8014ce8 <vTaskSwitchContext+0xb0>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	60fb      	str	r3, [r7, #12]
 8014c5a:	e010      	b.n	8014c7e <vTaskSwitchContext+0x46>
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d10a      	bne.n	8014c78 <vTaskSwitchContext+0x40>
	__asm volatile
 8014c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c66:	f383 8811 	msr	BASEPRI, r3
 8014c6a:	f3bf 8f6f 	isb	sy
 8014c6e:	f3bf 8f4f 	dsb	sy
 8014c72:	607b      	str	r3, [r7, #4]
}
 8014c74:	bf00      	nop
 8014c76:	e7fe      	b.n	8014c76 <vTaskSwitchContext+0x3e>
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	60fb      	str	r3, [r7, #12]
 8014c7e:	491b      	ldr	r1, [pc, #108]	; (8014cec <vTaskSwitchContext+0xb4>)
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	4613      	mov	r3, r2
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	4413      	add	r3, r2
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	440b      	add	r3, r1
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d0e4      	beq.n	8014c5c <vTaskSwitchContext+0x24>
 8014c92:	68fa      	ldr	r2, [r7, #12]
 8014c94:	4613      	mov	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4413      	add	r3, r2
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	4a13      	ldr	r2, [pc, #76]	; (8014cec <vTaskSwitchContext+0xb4>)
 8014c9e:	4413      	add	r3, r2
 8014ca0:	60bb      	str	r3, [r7, #8]
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	685a      	ldr	r2, [r3, #4]
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	605a      	str	r2, [r3, #4]
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	685a      	ldr	r2, [r3, #4]
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	3308      	adds	r3, #8
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d104      	bne.n	8014cc2 <vTaskSwitchContext+0x8a>
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	685a      	ldr	r2, [r3, #4]
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	605a      	str	r2, [r3, #4]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	4a09      	ldr	r2, [pc, #36]	; (8014cf0 <vTaskSwitchContext+0xb8>)
 8014cca:	6013      	str	r3, [r2, #0]
 8014ccc:	4a06      	ldr	r2, [pc, #24]	; (8014ce8 <vTaskSwitchContext+0xb0>)
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	6013      	str	r3, [r2, #0]
}
 8014cd2:	bf00      	nop
 8014cd4:	3714      	adds	r7, #20
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	24006c40 	.word	0x24006c40
 8014ce4:	24006c2c 	.word	0x24006c2c
 8014ce8:	24006c20 	.word	0x24006c20
 8014cec:	24006748 	.word	0x24006748
 8014cf0:	24006744 	.word	0x24006744

08014cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d10a      	bne.n	8014d1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d08:	f383 8811 	msr	BASEPRI, r3
 8014d0c:	f3bf 8f6f 	isb	sy
 8014d10:	f3bf 8f4f 	dsb	sy
 8014d14:	60fb      	str	r3, [r7, #12]
}
 8014d16:	bf00      	nop
 8014d18:	e7fe      	b.n	8014d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014d1a:	4b07      	ldr	r3, [pc, #28]	; (8014d38 <vTaskPlaceOnEventList+0x44>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	3318      	adds	r3, #24
 8014d20:	4619      	mov	r1, r3
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7fe f913 	bl	8012f4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014d28:	2101      	movs	r1, #1
 8014d2a:	6838      	ldr	r0, [r7, #0]
 8014d2c:	f000 fb7a 	bl	8015424 <prvAddCurrentTaskToDelayedList>
}
 8014d30:	bf00      	nop
 8014d32:	3710      	adds	r7, #16
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	24006744 	.word	0x24006744

08014d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b086      	sub	sp, #24
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d10a      	bne.n	8014d64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d52:	f383 8811 	msr	BASEPRI, r3
 8014d56:	f3bf 8f6f 	isb	sy
 8014d5a:	f3bf 8f4f 	dsb	sy
 8014d5e:	617b      	str	r3, [r7, #20]
}
 8014d60:	bf00      	nop
 8014d62:	e7fe      	b.n	8014d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014d64:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	3318      	adds	r3, #24
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	68f8      	ldr	r0, [r7, #12]
 8014d6e:	f7fe f8ca 	bl	8012f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d002      	beq.n	8014d7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014d78:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014d7e:	6879      	ldr	r1, [r7, #4]
 8014d80:	68b8      	ldr	r0, [r7, #8]
 8014d82:	f000 fb4f 	bl	8015424 <prvAddCurrentTaskToDelayedList>
	}
 8014d86:	bf00      	nop
 8014d88:	3718      	adds	r7, #24
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	24006744 	.word	0x24006744

08014d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d10a      	bne.n	8014dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dae:	f383 8811 	msr	BASEPRI, r3
 8014db2:	f3bf 8f6f 	isb	sy
 8014db6:	f3bf 8f4f 	dsb	sy
 8014dba:	60fb      	str	r3, [r7, #12]
}
 8014dbc:	bf00      	nop
 8014dbe:	e7fe      	b.n	8014dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	3318      	adds	r3, #24
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7fe f8fb 	bl	8012fc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014dca:	4b1e      	ldr	r3, [pc, #120]	; (8014e44 <xTaskRemoveFromEventList+0xb0>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d11d      	bne.n	8014e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	3304      	adds	r3, #4
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fe f8f2 	bl	8012fc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014de0:	4b19      	ldr	r3, [pc, #100]	; (8014e48 <xTaskRemoveFromEventList+0xb4>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d903      	bls.n	8014df0 <xTaskRemoveFromEventList+0x5c>
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dec:	4a16      	ldr	r2, [pc, #88]	; (8014e48 <xTaskRemoveFromEventList+0xb4>)
 8014dee:	6013      	str	r3, [r2, #0]
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df4:	4613      	mov	r3, r2
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	4413      	add	r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	4a13      	ldr	r2, [pc, #76]	; (8014e4c <xTaskRemoveFromEventList+0xb8>)
 8014dfe:	441a      	add	r2, r3
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	3304      	adds	r3, #4
 8014e04:	4619      	mov	r1, r3
 8014e06:	4610      	mov	r0, r2
 8014e08:	f7fe f87d 	bl	8012f06 <vListInsertEnd>
 8014e0c:	e005      	b.n	8014e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	3318      	adds	r3, #24
 8014e12:	4619      	mov	r1, r3
 8014e14:	480e      	ldr	r0, [pc, #56]	; (8014e50 <xTaskRemoveFromEventList+0xbc>)
 8014e16:	f7fe f876 	bl	8012f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e1e:	4b0d      	ldr	r3, [pc, #52]	; (8014e54 <xTaskRemoveFromEventList+0xc0>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d905      	bls.n	8014e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014e2c:	4b0a      	ldr	r3, [pc, #40]	; (8014e58 <xTaskRemoveFromEventList+0xc4>)
 8014e2e:	2201      	movs	r2, #1
 8014e30:	601a      	str	r2, [r3, #0]
 8014e32:	e001      	b.n	8014e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014e34:	2300      	movs	r3, #0
 8014e36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014e38:	697b      	ldr	r3, [r7, #20]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3718      	adds	r7, #24
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	24006c40 	.word	0x24006c40
 8014e48:	24006c20 	.word	0x24006c20
 8014e4c:	24006748 	.word	0x24006748
 8014e50:	24006bd8 	.word	0x24006bd8
 8014e54:	24006744 	.word	0x24006744
 8014e58:	24006c2c 	.word	0x24006c2c

08014e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b083      	sub	sp, #12
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014e64:	4b06      	ldr	r3, [pc, #24]	; (8014e80 <vTaskInternalSetTimeOutState+0x24>)
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e6c:	4b05      	ldr	r3, [pc, #20]	; (8014e84 <vTaskInternalSetTimeOutState+0x28>)
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	605a      	str	r2, [r3, #4]
}
 8014e74:	bf00      	nop
 8014e76:	370c      	adds	r7, #12
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr
 8014e80:	24006c30 	.word	0x24006c30
 8014e84:	24006c1c 	.word	0x24006c1c

08014e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b088      	sub	sp, #32
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d10a      	bne.n	8014eae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9c:	f383 8811 	msr	BASEPRI, r3
 8014ea0:	f3bf 8f6f 	isb	sy
 8014ea4:	f3bf 8f4f 	dsb	sy
 8014ea8:	613b      	str	r3, [r7, #16]
}
 8014eaa:	bf00      	nop
 8014eac:	e7fe      	b.n	8014eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d10a      	bne.n	8014eca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb8:	f383 8811 	msr	BASEPRI, r3
 8014ebc:	f3bf 8f6f 	isb	sy
 8014ec0:	f3bf 8f4f 	dsb	sy
 8014ec4:	60fb      	str	r3, [r7, #12]
}
 8014ec6:	bf00      	nop
 8014ec8:	e7fe      	b.n	8014ec8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014eca:	f7fe f9d3 	bl	8013274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ece:	4b1d      	ldr	r3, [pc, #116]	; (8014f44 <xTaskCheckForTimeOut+0xbc>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	69ba      	ldr	r2, [r7, #24]
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee6:	d102      	bne.n	8014eee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	61fb      	str	r3, [r7, #28]
 8014eec:	e023      	b.n	8014f36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	4b15      	ldr	r3, [pc, #84]	; (8014f48 <xTaskCheckForTimeOut+0xc0>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d007      	beq.n	8014f0a <xTaskCheckForTimeOut+0x82>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	69ba      	ldr	r2, [r7, #24]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d302      	bcc.n	8014f0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014f04:	2301      	movs	r3, #1
 8014f06:	61fb      	str	r3, [r7, #28]
 8014f08:	e015      	b.n	8014f36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	697a      	ldr	r2, [r7, #20]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d20b      	bcs.n	8014f2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	1ad2      	subs	r2, r2, r3
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f7ff ff9b 	bl	8014e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014f26:	2300      	movs	r3, #0
 8014f28:	61fb      	str	r3, [r7, #28]
 8014f2a:	e004      	b.n	8014f36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f32:	2301      	movs	r3, #1
 8014f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f36:	f7fe f9cd 	bl	80132d4 <vPortExitCritical>

	return xReturn;
 8014f3a:	69fb      	ldr	r3, [r7, #28]
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3720      	adds	r7, #32
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	24006c1c 	.word	0x24006c1c
 8014f48:	24006c30 	.word	0x24006c30

08014f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f50:	4b03      	ldr	r3, [pc, #12]	; (8014f60 <vTaskMissedYield+0x14>)
 8014f52:	2201      	movs	r2, #1
 8014f54:	601a      	str	r2, [r3, #0]
}
 8014f56:	bf00      	nop
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr
 8014f60:	24006c2c 	.word	0x24006c2c

08014f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014f6c:	f000 f852 	bl	8015014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014f70:	4b06      	ldr	r3, [pc, #24]	; (8014f8c <prvIdleTask+0x28>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	2b01      	cmp	r3, #1
 8014f76:	d9f9      	bls.n	8014f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014f78:	4b05      	ldr	r3, [pc, #20]	; (8014f90 <prvIdleTask+0x2c>)
 8014f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f7e:	601a      	str	r2, [r3, #0]
 8014f80:	f3bf 8f4f 	dsb	sy
 8014f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f88:	e7f0      	b.n	8014f6c <prvIdleTask+0x8>
 8014f8a:	bf00      	nop
 8014f8c:	24006748 	.word	0x24006748
 8014f90:	e000ed04 	.word	0xe000ed04

08014f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	607b      	str	r3, [r7, #4]
 8014f9e:	e00c      	b.n	8014fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014fa0:	687a      	ldr	r2, [r7, #4]
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	009b      	lsls	r3, r3, #2
 8014fa6:	4413      	add	r3, r2
 8014fa8:	009b      	lsls	r3, r3, #2
 8014faa:	4a12      	ldr	r2, [pc, #72]	; (8014ff4 <prvInitialiseTaskLists+0x60>)
 8014fac:	4413      	add	r3, r2
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fd ff7c 	bl	8012eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	607b      	str	r3, [r7, #4]
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2b37      	cmp	r3, #55	; 0x37
 8014fbe:	d9ef      	bls.n	8014fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014fc0:	480d      	ldr	r0, [pc, #52]	; (8014ff8 <prvInitialiseTaskLists+0x64>)
 8014fc2:	f7fd ff73 	bl	8012eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014fc6:	480d      	ldr	r0, [pc, #52]	; (8014ffc <prvInitialiseTaskLists+0x68>)
 8014fc8:	f7fd ff70 	bl	8012eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014fcc:	480c      	ldr	r0, [pc, #48]	; (8015000 <prvInitialiseTaskLists+0x6c>)
 8014fce:	f7fd ff6d 	bl	8012eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014fd2:	480c      	ldr	r0, [pc, #48]	; (8015004 <prvInitialiseTaskLists+0x70>)
 8014fd4:	f7fd ff6a 	bl	8012eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014fd8:	480b      	ldr	r0, [pc, #44]	; (8015008 <prvInitialiseTaskLists+0x74>)
 8014fda:	f7fd ff67 	bl	8012eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014fde:	4b0b      	ldr	r3, [pc, #44]	; (801500c <prvInitialiseTaskLists+0x78>)
 8014fe0:	4a05      	ldr	r2, [pc, #20]	; (8014ff8 <prvInitialiseTaskLists+0x64>)
 8014fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014fe4:	4b0a      	ldr	r3, [pc, #40]	; (8015010 <prvInitialiseTaskLists+0x7c>)
 8014fe6:	4a05      	ldr	r2, [pc, #20]	; (8014ffc <prvInitialiseTaskLists+0x68>)
 8014fe8:	601a      	str	r2, [r3, #0]
}
 8014fea:	bf00      	nop
 8014fec:	3708      	adds	r7, #8
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	24006748 	.word	0x24006748
 8014ff8:	24006ba8 	.word	0x24006ba8
 8014ffc:	24006bbc 	.word	0x24006bbc
 8015000:	24006bd8 	.word	0x24006bd8
 8015004:	24006bec 	.word	0x24006bec
 8015008:	24006c04 	.word	0x24006c04
 801500c:	24006bd0 	.word	0x24006bd0
 8015010:	24006bd4 	.word	0x24006bd4

08015014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801501a:	e019      	b.n	8015050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801501c:	f7fe f92a 	bl	8013274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015020:	4b10      	ldr	r3, [pc, #64]	; (8015064 <prvCheckTasksWaitingTermination+0x50>)
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	3304      	adds	r3, #4
 801502c:	4618      	mov	r0, r3
 801502e:	f7fd ffc7 	bl	8012fc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015032:	4b0d      	ldr	r3, [pc, #52]	; (8015068 <prvCheckTasksWaitingTermination+0x54>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	3b01      	subs	r3, #1
 8015038:	4a0b      	ldr	r2, [pc, #44]	; (8015068 <prvCheckTasksWaitingTermination+0x54>)
 801503a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801503c:	4b0b      	ldr	r3, [pc, #44]	; (801506c <prvCheckTasksWaitingTermination+0x58>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	3b01      	subs	r3, #1
 8015042:	4a0a      	ldr	r2, [pc, #40]	; (801506c <prvCheckTasksWaitingTermination+0x58>)
 8015044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015046:	f7fe f945 	bl	80132d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f000 f810 	bl	8015070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015050:	4b06      	ldr	r3, [pc, #24]	; (801506c <prvCheckTasksWaitingTermination+0x58>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d1e1      	bne.n	801501c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015058:	bf00      	nop
 801505a:	bf00      	nop
 801505c:	3708      	adds	r7, #8
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	24006bec 	.word	0x24006bec
 8015068:	24006c18 	.word	0x24006c18
 801506c:	24006c00 	.word	0x24006c00

08015070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801507e:	2b00      	cmp	r3, #0
 8015080:	d108      	bne.n	8015094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015086:	4618      	mov	r0, r3
 8015088:	f7fd fdf2 	bl	8012c70 <vPortFree>
				vPortFree( pxTCB );
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7fd fdef 	bl	8012c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015092:	e018      	b.n	80150c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801509a:	2b01      	cmp	r3, #1
 801509c:	d103      	bne.n	80150a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f7fd fde6 	bl	8012c70 <vPortFree>
	}
 80150a4:	e00f      	b.n	80150c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150ac:	2b02      	cmp	r3, #2
 80150ae:	d00a      	beq.n	80150c6 <prvDeleteTCB+0x56>
	__asm volatile
 80150b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b4:	f383 8811 	msr	BASEPRI, r3
 80150b8:	f3bf 8f6f 	isb	sy
 80150bc:	f3bf 8f4f 	dsb	sy
 80150c0:	60fb      	str	r3, [r7, #12]
}
 80150c2:	bf00      	nop
 80150c4:	e7fe      	b.n	80150c4 <prvDeleteTCB+0x54>
	}
 80150c6:	bf00      	nop
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
	...

080150d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80150d6:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <prvResetNextTaskUnblockTime+0x38>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d104      	bne.n	80150ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80150e0:	4b0a      	ldr	r3, [pc, #40]	; (801510c <prvResetNextTaskUnblockTime+0x3c>)
 80150e2:	f04f 32ff 	mov.w	r2, #4294967295
 80150e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80150e8:	e008      	b.n	80150fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ea:	4b07      	ldr	r3, [pc, #28]	; (8015108 <prvResetNextTaskUnblockTime+0x38>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	4a04      	ldr	r2, [pc, #16]	; (801510c <prvResetNextTaskUnblockTime+0x3c>)
 80150fa:	6013      	str	r3, [r2, #0]
}
 80150fc:	bf00      	nop
 80150fe:	370c      	adds	r7, #12
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr
 8015108:	24006bd0 	.word	0x24006bd0
 801510c:	24006c38 	.word	0x24006c38

08015110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015110:	b480      	push	{r7}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015116:	4b0b      	ldr	r3, [pc, #44]	; (8015144 <xTaskGetSchedulerState+0x34>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d102      	bne.n	8015124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801511e:	2301      	movs	r3, #1
 8015120:	607b      	str	r3, [r7, #4]
 8015122:	e008      	b.n	8015136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015124:	4b08      	ldr	r3, [pc, #32]	; (8015148 <xTaskGetSchedulerState+0x38>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d102      	bne.n	8015132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801512c:	2302      	movs	r3, #2
 801512e:	607b      	str	r3, [r7, #4]
 8015130:	e001      	b.n	8015136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015132:	2300      	movs	r3, #0
 8015134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015136:	687b      	ldr	r3, [r7, #4]
	}
 8015138:	4618      	mov	r0, r3
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr
 8015144:	24006c24 	.word	0x24006c24
 8015148:	24006c40 	.word	0x24006c40

0801514c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015158:	2300      	movs	r3, #0
 801515a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d051      	beq.n	8015206 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015166:	4b2a      	ldr	r3, [pc, #168]	; (8015210 <xTaskPriorityInherit+0xc4>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801516c:	429a      	cmp	r2, r3
 801516e:	d241      	bcs.n	80151f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	699b      	ldr	r3, [r3, #24]
 8015174:	2b00      	cmp	r3, #0
 8015176:	db06      	blt.n	8015186 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015178:	4b25      	ldr	r3, [pc, #148]	; (8015210 <xTaskPriorityInherit+0xc4>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801517e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	6959      	ldr	r1, [r3, #20]
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801518e:	4613      	mov	r3, r2
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	4413      	add	r3, r2
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	4a1f      	ldr	r2, [pc, #124]	; (8015214 <xTaskPriorityInherit+0xc8>)
 8015198:	4413      	add	r3, r2
 801519a:	4299      	cmp	r1, r3
 801519c:	d122      	bne.n	80151e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	3304      	adds	r3, #4
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7fd ff0c 	bl	8012fc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80151a8:	4b19      	ldr	r3, [pc, #100]	; (8015210 <xTaskPriorityInherit+0xc4>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b6:	4b18      	ldr	r3, [pc, #96]	; (8015218 <xTaskPriorityInherit+0xcc>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d903      	bls.n	80151c6 <xTaskPriorityInherit+0x7a>
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c2:	4a15      	ldr	r2, [pc, #84]	; (8015218 <xTaskPriorityInherit+0xcc>)
 80151c4:	6013      	str	r3, [r2, #0]
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ca:	4613      	mov	r3, r2
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	4413      	add	r3, r2
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	4a10      	ldr	r2, [pc, #64]	; (8015214 <xTaskPriorityInherit+0xc8>)
 80151d4:	441a      	add	r2, r3
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	3304      	adds	r3, #4
 80151da:	4619      	mov	r1, r3
 80151dc:	4610      	mov	r0, r2
 80151de:	f7fd fe92 	bl	8012f06 <vListInsertEnd>
 80151e2:	e004      	b.n	80151ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80151e4:	4b0a      	ldr	r3, [pc, #40]	; (8015210 <xTaskPriorityInherit+0xc4>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80151ee:	2301      	movs	r3, #1
 80151f0:	60fb      	str	r3, [r7, #12]
 80151f2:	e008      	b.n	8015206 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151f8:	4b05      	ldr	r3, [pc, #20]	; (8015210 <xTaskPriorityInherit+0xc4>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151fe:	429a      	cmp	r2, r3
 8015200:	d201      	bcs.n	8015206 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015202:	2301      	movs	r3, #1
 8015204:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015206:	68fb      	ldr	r3, [r7, #12]
	}
 8015208:	4618      	mov	r0, r3
 801520a:	3710      	adds	r7, #16
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}
 8015210:	24006744 	.word	0x24006744
 8015214:	24006748 	.word	0x24006748
 8015218:	24006c20 	.word	0x24006c20

0801521c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801521c:	b580      	push	{r7, lr}
 801521e:	b086      	sub	sp, #24
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015228:	2300      	movs	r3, #0
 801522a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d056      	beq.n	80152e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015232:	4b2e      	ldr	r3, [pc, #184]	; (80152ec <xTaskPriorityDisinherit+0xd0>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	693a      	ldr	r2, [r7, #16]
 8015238:	429a      	cmp	r2, r3
 801523a:	d00a      	beq.n	8015252 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015240:	f383 8811 	msr	BASEPRI, r3
 8015244:	f3bf 8f6f 	isb	sy
 8015248:	f3bf 8f4f 	dsb	sy
 801524c:	60fb      	str	r3, [r7, #12]
}
 801524e:	bf00      	nop
 8015250:	e7fe      	b.n	8015250 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10a      	bne.n	8015270 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801525e:	f383 8811 	msr	BASEPRI, r3
 8015262:	f3bf 8f6f 	isb	sy
 8015266:	f3bf 8f4f 	dsb	sy
 801526a:	60bb      	str	r3, [r7, #8]
}
 801526c:	bf00      	nop
 801526e:	e7fe      	b.n	801526e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015274:	1e5a      	subs	r2, r3, #1
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015282:	429a      	cmp	r2, r3
 8015284:	d02c      	beq.n	80152e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801528a:	2b00      	cmp	r3, #0
 801528c:	d128      	bne.n	80152e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	3304      	adds	r3, #4
 8015292:	4618      	mov	r0, r3
 8015294:	f7fd fe94 	bl	8012fc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b0:	4b0f      	ldr	r3, [pc, #60]	; (80152f0 <xTaskPriorityDisinherit+0xd4>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d903      	bls.n	80152c0 <xTaskPriorityDisinherit+0xa4>
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152bc:	4a0c      	ldr	r2, [pc, #48]	; (80152f0 <xTaskPriorityDisinherit+0xd4>)
 80152be:	6013      	str	r3, [r2, #0]
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c4:	4613      	mov	r3, r2
 80152c6:	009b      	lsls	r3, r3, #2
 80152c8:	4413      	add	r3, r2
 80152ca:	009b      	lsls	r3, r3, #2
 80152cc:	4a09      	ldr	r2, [pc, #36]	; (80152f4 <xTaskPriorityDisinherit+0xd8>)
 80152ce:	441a      	add	r2, r3
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	3304      	adds	r3, #4
 80152d4:	4619      	mov	r1, r3
 80152d6:	4610      	mov	r0, r2
 80152d8:	f7fd fe15 	bl	8012f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80152dc:	2301      	movs	r3, #1
 80152de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80152e0:	697b      	ldr	r3, [r7, #20]
	}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3718      	adds	r7, #24
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	bf00      	nop
 80152ec:	24006744 	.word	0x24006744
 80152f0:	24006c20 	.word	0x24006c20
 80152f4:	24006748 	.word	0x24006748

080152f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b088      	sub	sp, #32
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015306:	2301      	movs	r3, #1
 8015308:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d06a      	beq.n	80153e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015314:	2b00      	cmp	r3, #0
 8015316:	d10a      	bne.n	801532e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801531c:	f383 8811 	msr	BASEPRI, r3
 8015320:	f3bf 8f6f 	isb	sy
 8015324:	f3bf 8f4f 	dsb	sy
 8015328:	60fb      	str	r3, [r7, #12]
}
 801532a:	bf00      	nop
 801532c:	e7fe      	b.n	801532c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015332:	683a      	ldr	r2, [r7, #0]
 8015334:	429a      	cmp	r2, r3
 8015336:	d902      	bls.n	801533e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	61fb      	str	r3, [r7, #28]
 801533c:	e002      	b.n	8015344 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801533e:	69bb      	ldr	r3, [r7, #24]
 8015340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015342:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015348:	69fa      	ldr	r2, [r7, #28]
 801534a:	429a      	cmp	r2, r3
 801534c:	d04b      	beq.n	80153e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015352:	697a      	ldr	r2, [r7, #20]
 8015354:	429a      	cmp	r2, r3
 8015356:	d146      	bne.n	80153e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015358:	4b25      	ldr	r3, [pc, #148]	; (80153f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	69ba      	ldr	r2, [r7, #24]
 801535e:	429a      	cmp	r2, r3
 8015360:	d10a      	bne.n	8015378 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8015362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015366:	f383 8811 	msr	BASEPRI, r3
 801536a:	f3bf 8f6f 	isb	sy
 801536e:	f3bf 8f4f 	dsb	sy
 8015372:	60bb      	str	r3, [r7, #8]
}
 8015374:	bf00      	nop
 8015376:	e7fe      	b.n	8015376 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801537c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	69fa      	ldr	r2, [r7, #28]
 8015382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	699b      	ldr	r3, [r3, #24]
 8015388:	2b00      	cmp	r3, #0
 801538a:	db04      	blt.n	8015396 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	6959      	ldr	r1, [r3, #20]
 801539a:	693a      	ldr	r2, [r7, #16]
 801539c:	4613      	mov	r3, r2
 801539e:	009b      	lsls	r3, r3, #2
 80153a0:	4413      	add	r3, r2
 80153a2:	009b      	lsls	r3, r3, #2
 80153a4:	4a13      	ldr	r2, [pc, #76]	; (80153f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80153a6:	4413      	add	r3, r2
 80153a8:	4299      	cmp	r1, r3
 80153aa:	d11c      	bne.n	80153e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153ac:	69bb      	ldr	r3, [r7, #24]
 80153ae:	3304      	adds	r3, #4
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fd fe05 	bl	8012fc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80153b6:	69bb      	ldr	r3, [r7, #24]
 80153b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ba:	4b0f      	ldr	r3, [pc, #60]	; (80153f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d903      	bls.n	80153ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153c6:	4a0c      	ldr	r2, [pc, #48]	; (80153f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80153c8:	6013      	str	r3, [r2, #0]
 80153ca:	69bb      	ldr	r3, [r7, #24]
 80153cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ce:	4613      	mov	r3, r2
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	4413      	add	r3, r2
 80153d4:	009b      	lsls	r3, r3, #2
 80153d6:	4a07      	ldr	r2, [pc, #28]	; (80153f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80153d8:	441a      	add	r2, r3
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	3304      	adds	r3, #4
 80153de:	4619      	mov	r1, r3
 80153e0:	4610      	mov	r0, r2
 80153e2:	f7fd fd90 	bl	8012f06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80153e6:	bf00      	nop
 80153e8:	3720      	adds	r7, #32
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	24006744 	.word	0x24006744
 80153f4:	24006748 	.word	0x24006748
 80153f8:	24006c20 	.word	0x24006c20

080153fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80153fc:	b480      	push	{r7}
 80153fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015400:	4b07      	ldr	r3, [pc, #28]	; (8015420 <pvTaskIncrementMutexHeldCount+0x24>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d004      	beq.n	8015412 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015408:	4b05      	ldr	r3, [pc, #20]	; (8015420 <pvTaskIncrementMutexHeldCount+0x24>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801540e:	3201      	adds	r2, #1
 8015410:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015412:	4b03      	ldr	r3, [pc, #12]	; (8015420 <pvTaskIncrementMutexHeldCount+0x24>)
 8015414:	681b      	ldr	r3, [r3, #0]
	}
 8015416:	4618      	mov	r0, r3
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr
 8015420:	24006744 	.word	0x24006744

08015424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801542e:	4b21      	ldr	r3, [pc, #132]	; (80154b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015434:	4b20      	ldr	r3, [pc, #128]	; (80154b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	3304      	adds	r3, #4
 801543a:	4618      	mov	r0, r3
 801543c:	f7fd fdc0 	bl	8012fc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015446:	d10a      	bne.n	801545e <prvAddCurrentTaskToDelayedList+0x3a>
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d007      	beq.n	801545e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801544e:	4b1a      	ldr	r3, [pc, #104]	; (80154b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	3304      	adds	r3, #4
 8015454:	4619      	mov	r1, r3
 8015456:	4819      	ldr	r0, [pc, #100]	; (80154bc <prvAddCurrentTaskToDelayedList+0x98>)
 8015458:	f7fd fd55 	bl	8012f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801545c:	e026      	b.n	80154ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	4413      	add	r3, r2
 8015464:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015466:	4b14      	ldr	r3, [pc, #80]	; (80154b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801546e:	68ba      	ldr	r2, [r7, #8]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	429a      	cmp	r2, r3
 8015474:	d209      	bcs.n	801548a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015476:	4b12      	ldr	r3, [pc, #72]	; (80154c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	4b0f      	ldr	r3, [pc, #60]	; (80154b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	3304      	adds	r3, #4
 8015480:	4619      	mov	r1, r3
 8015482:	4610      	mov	r0, r2
 8015484:	f7fd fd63 	bl	8012f4e <vListInsert>
}
 8015488:	e010      	b.n	80154ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801548a:	4b0e      	ldr	r3, [pc, #56]	; (80154c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	4b0a      	ldr	r3, [pc, #40]	; (80154b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	3304      	adds	r3, #4
 8015494:	4619      	mov	r1, r3
 8015496:	4610      	mov	r0, r2
 8015498:	f7fd fd59 	bl	8012f4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801549c:	4b0a      	ldr	r3, [pc, #40]	; (80154c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	68ba      	ldr	r2, [r7, #8]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d202      	bcs.n	80154ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80154a6:	4a08      	ldr	r2, [pc, #32]	; (80154c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	6013      	str	r3, [r2, #0]
}
 80154ac:	bf00      	nop
 80154ae:	3710      	adds	r7, #16
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	24006c1c 	.word	0x24006c1c
 80154b8:	24006744 	.word	0x24006744
 80154bc:	24006c04 	.word	0x24006c04
 80154c0:	24006bd4 	.word	0x24006bd4
 80154c4:	24006bd0 	.word	0x24006bd0
 80154c8:	24006c38 	.word	0x24006c38

080154cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b08a      	sub	sp, #40	; 0x28
 80154d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80154d2:	2300      	movs	r3, #0
 80154d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80154d6:	f000 fb07 	bl	8015ae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80154da:	4b1c      	ldr	r3, [pc, #112]	; (801554c <xTimerCreateTimerTask+0x80>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d021      	beq.n	8015526 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80154e2:	2300      	movs	r3, #0
 80154e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80154e6:	2300      	movs	r3, #0
 80154e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80154ea:	1d3a      	adds	r2, r7, #4
 80154ec:	f107 0108 	add.w	r1, r7, #8
 80154f0:	f107 030c 	add.w	r3, r7, #12
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fd fad5 	bl	8012aa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80154fa:	6879      	ldr	r1, [r7, #4]
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	9202      	str	r2, [sp, #8]
 8015502:	9301      	str	r3, [sp, #4]
 8015504:	2302      	movs	r3, #2
 8015506:	9300      	str	r3, [sp, #0]
 8015508:	2300      	movs	r3, #0
 801550a:	460a      	mov	r2, r1
 801550c:	4910      	ldr	r1, [pc, #64]	; (8015550 <xTimerCreateTimerTask+0x84>)
 801550e:	4811      	ldr	r0, [pc, #68]	; (8015554 <xTimerCreateTimerTask+0x88>)
 8015510:	f7fe ffe0 	bl	80144d4 <xTaskCreateStatic>
 8015514:	4603      	mov	r3, r0
 8015516:	4a10      	ldr	r2, [pc, #64]	; (8015558 <xTimerCreateTimerTask+0x8c>)
 8015518:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801551a:	4b0f      	ldr	r3, [pc, #60]	; (8015558 <xTimerCreateTimerTask+0x8c>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015522:	2301      	movs	r3, #1
 8015524:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10a      	bne.n	8015542 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015530:	f383 8811 	msr	BASEPRI, r3
 8015534:	f3bf 8f6f 	isb	sy
 8015538:	f3bf 8f4f 	dsb	sy
 801553c:	613b      	str	r3, [r7, #16]
}
 801553e:	bf00      	nop
 8015540:	e7fe      	b.n	8015540 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015542:	697b      	ldr	r3, [r7, #20]
}
 8015544:	4618      	mov	r0, r3
 8015546:	3718      	adds	r7, #24
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}
 801554c:	24006c74 	.word	0x24006c74
 8015550:	08026f7c 	.word	0x08026f7c
 8015554:	08015691 	.word	0x08015691
 8015558:	24006c78 	.word	0x24006c78

0801555c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b08a      	sub	sp, #40	; 0x28
 8015560:	af00      	add	r7, sp, #0
 8015562:	60f8      	str	r0, [r7, #12]
 8015564:	60b9      	str	r1, [r7, #8]
 8015566:	607a      	str	r2, [r7, #4]
 8015568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801556a:	2300      	movs	r3, #0
 801556c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d10a      	bne.n	801558a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015578:	f383 8811 	msr	BASEPRI, r3
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	f3bf 8f4f 	dsb	sy
 8015584:	623b      	str	r3, [r7, #32]
}
 8015586:	bf00      	nop
 8015588:	e7fe      	b.n	8015588 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801558a:	4b1a      	ldr	r3, [pc, #104]	; (80155f4 <xTimerGenericCommand+0x98>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d02a      	beq.n	80155e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	2b05      	cmp	r3, #5
 80155a2:	dc18      	bgt.n	80155d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80155a4:	f7ff fdb4 	bl	8015110 <xTaskGetSchedulerState>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b02      	cmp	r3, #2
 80155ac:	d109      	bne.n	80155c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80155ae:	4b11      	ldr	r3, [pc, #68]	; (80155f4 <xTimerGenericCommand+0x98>)
 80155b0:	6818      	ldr	r0, [r3, #0]
 80155b2:	f107 0110 	add.w	r1, r7, #16
 80155b6:	2300      	movs	r3, #0
 80155b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ba:	f7fe f925 	bl	8013808 <xQueueGenericSend>
 80155be:	6278      	str	r0, [r7, #36]	; 0x24
 80155c0:	e012      	b.n	80155e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80155c2:	4b0c      	ldr	r3, [pc, #48]	; (80155f4 <xTimerGenericCommand+0x98>)
 80155c4:	6818      	ldr	r0, [r3, #0]
 80155c6:	f107 0110 	add.w	r1, r7, #16
 80155ca:	2300      	movs	r3, #0
 80155cc:	2200      	movs	r2, #0
 80155ce:	f7fe f91b 	bl	8013808 <xQueueGenericSend>
 80155d2:	6278      	str	r0, [r7, #36]	; 0x24
 80155d4:	e008      	b.n	80155e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80155d6:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <xTimerGenericCommand+0x98>)
 80155d8:	6818      	ldr	r0, [r3, #0]
 80155da:	f107 0110 	add.w	r1, r7, #16
 80155de:	2300      	movs	r3, #0
 80155e0:	683a      	ldr	r2, [r7, #0]
 80155e2:	f7fe fa0f 	bl	8013a04 <xQueueGenericSendFromISR>
 80155e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80155e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3728      	adds	r7, #40	; 0x28
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	24006c74 	.word	0x24006c74

080155f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b088      	sub	sp, #32
 80155fc:	af02      	add	r7, sp, #8
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015602:	4b22      	ldr	r3, [pc, #136]	; (801568c <prvProcessExpiredTimer+0x94>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	68db      	ldr	r3, [r3, #12]
 801560a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	3304      	adds	r3, #4
 8015610:	4618      	mov	r0, r3
 8015612:	f7fd fcd5 	bl	8012fc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801561c:	f003 0304 	and.w	r3, r3, #4
 8015620:	2b00      	cmp	r3, #0
 8015622:	d022      	beq.n	801566a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	699a      	ldr	r2, [r3, #24]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	18d1      	adds	r1, r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	683a      	ldr	r2, [r7, #0]
 8015630:	6978      	ldr	r0, [r7, #20]
 8015632:	f000 f8d1 	bl	80157d8 <prvInsertTimerInActiveList>
 8015636:	4603      	mov	r3, r0
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01f      	beq.n	801567c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801563c:	2300      	movs	r3, #0
 801563e:	9300      	str	r3, [sp, #0]
 8015640:	2300      	movs	r3, #0
 8015642:	687a      	ldr	r2, [r7, #4]
 8015644:	2100      	movs	r1, #0
 8015646:	6978      	ldr	r0, [r7, #20]
 8015648:	f7ff ff88 	bl	801555c <xTimerGenericCommand>
 801564c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d113      	bne.n	801567c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	60fb      	str	r3, [r7, #12]
}
 8015666:	bf00      	nop
 8015668:	e7fe      	b.n	8015668 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015670:	f023 0301 	bic.w	r3, r3, #1
 8015674:	b2da      	uxtb	r2, r3
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	6a1b      	ldr	r3, [r3, #32]
 8015680:	6978      	ldr	r0, [r7, #20]
 8015682:	4798      	blx	r3
}
 8015684:	bf00      	nop
 8015686:	3718      	adds	r7, #24
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	24006c6c 	.word	0x24006c6c

08015690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015698:	f107 0308 	add.w	r3, r7, #8
 801569c:	4618      	mov	r0, r3
 801569e:	f000 f857 	bl	8015750 <prvGetNextExpireTime>
 80156a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	4619      	mov	r1, r3
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f000 f803 	bl	80156b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80156ae:	f000 f8d5 	bl	801585c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156b2:	e7f1      	b.n	8015698 <prvTimerTask+0x8>

080156b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80156be:	f7ff f945 	bl	801494c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156c2:	f107 0308 	add.w	r3, r7, #8
 80156c6:	4618      	mov	r0, r3
 80156c8:	f000 f866 	bl	8015798 <prvSampleTimeNow>
 80156cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d130      	bne.n	8015736 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d10a      	bne.n	80156f0 <prvProcessTimerOrBlockTask+0x3c>
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d806      	bhi.n	80156f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80156e2:	f7ff f941 	bl	8014968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80156e6:	68f9      	ldr	r1, [r7, #12]
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f7ff ff85 	bl	80155f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80156ee:	e024      	b.n	801573a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d008      	beq.n	8015708 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80156f6:	4b13      	ldr	r3, [pc, #76]	; (8015744 <prvProcessTimerOrBlockTask+0x90>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d101      	bne.n	8015704 <prvProcessTimerOrBlockTask+0x50>
 8015700:	2301      	movs	r3, #1
 8015702:	e000      	b.n	8015706 <prvProcessTimerOrBlockTask+0x52>
 8015704:	2300      	movs	r3, #0
 8015706:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015708:	4b0f      	ldr	r3, [pc, #60]	; (8015748 <prvProcessTimerOrBlockTask+0x94>)
 801570a:	6818      	ldr	r0, [r3, #0]
 801570c:	687a      	ldr	r2, [r7, #4]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	1ad3      	subs	r3, r2, r3
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	4619      	mov	r1, r3
 8015716:	f7fe fea9 	bl	801446c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801571a:	f7ff f925 	bl	8014968 <xTaskResumeAll>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d10a      	bne.n	801573a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015724:	4b09      	ldr	r3, [pc, #36]	; (801574c <prvProcessTimerOrBlockTask+0x98>)
 8015726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801572a:	601a      	str	r2, [r3, #0]
 801572c:	f3bf 8f4f 	dsb	sy
 8015730:	f3bf 8f6f 	isb	sy
}
 8015734:	e001      	b.n	801573a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015736:	f7ff f917 	bl	8014968 <xTaskResumeAll>
}
 801573a:	bf00      	nop
 801573c:	3710      	adds	r7, #16
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	24006c70 	.word	0x24006c70
 8015748:	24006c74 	.word	0x24006c74
 801574c:	e000ed04 	.word	0xe000ed04

08015750 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015750:	b480      	push	{r7}
 8015752:	b085      	sub	sp, #20
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015758:	4b0e      	ldr	r3, [pc, #56]	; (8015794 <prvGetNextExpireTime+0x44>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <prvGetNextExpireTime+0x16>
 8015762:	2201      	movs	r2, #1
 8015764:	e000      	b.n	8015768 <prvGetNextExpireTime+0x18>
 8015766:	2200      	movs	r2, #0
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d105      	bne.n	8015780 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015774:	4b07      	ldr	r3, [pc, #28]	; (8015794 <prvGetNextExpireTime+0x44>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	60fb      	str	r3, [r7, #12]
 801577e:	e001      	b.n	8015784 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015780:	2300      	movs	r3, #0
 8015782:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015784:	68fb      	ldr	r3, [r7, #12]
}
 8015786:	4618      	mov	r0, r3
 8015788:	3714      	adds	r7, #20
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop
 8015794:	24006c6c 	.word	0x24006c6c

08015798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80157a0:	f7ff f980 	bl	8014aa4 <xTaskGetTickCount>
 80157a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80157a6:	4b0b      	ldr	r3, [pc, #44]	; (80157d4 <prvSampleTimeNow+0x3c>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	68fa      	ldr	r2, [r7, #12]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d205      	bcs.n	80157bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80157b0:	f000 f936 	bl	8015a20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2201      	movs	r2, #1
 80157b8:	601a      	str	r2, [r3, #0]
 80157ba:	e002      	b.n	80157c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2200      	movs	r2, #0
 80157c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80157c2:	4a04      	ldr	r2, [pc, #16]	; (80157d4 <prvSampleTimeNow+0x3c>)
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80157c8:	68fb      	ldr	r3, [r7, #12]
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	24006c7c 	.word	0x24006c7c

080157d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b086      	sub	sp, #24
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80157e6:	2300      	movs	r3, #0
 80157e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	68ba      	ldr	r2, [r7, #8]
 80157ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	68fa      	ldr	r2, [r7, #12]
 80157f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80157f6:	68ba      	ldr	r2, [r7, #8]
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d812      	bhi.n	8015824 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157fe:	687a      	ldr	r2, [r7, #4]
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	1ad2      	subs	r2, r2, r3
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	699b      	ldr	r3, [r3, #24]
 8015808:	429a      	cmp	r2, r3
 801580a:	d302      	bcc.n	8015812 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801580c:	2301      	movs	r3, #1
 801580e:	617b      	str	r3, [r7, #20]
 8015810:	e01b      	b.n	801584a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015812:	4b10      	ldr	r3, [pc, #64]	; (8015854 <prvInsertTimerInActiveList+0x7c>)
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	3304      	adds	r3, #4
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f7fd fb96 	bl	8012f4e <vListInsert>
 8015822:	e012      	b.n	801584a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	429a      	cmp	r2, r3
 801582a:	d206      	bcs.n	801583a <prvInsertTimerInActiveList+0x62>
 801582c:	68ba      	ldr	r2, [r7, #8]
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	429a      	cmp	r2, r3
 8015832:	d302      	bcc.n	801583a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015834:	2301      	movs	r3, #1
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	e007      	b.n	801584a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801583a:	4b07      	ldr	r3, [pc, #28]	; (8015858 <prvInsertTimerInActiveList+0x80>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	3304      	adds	r3, #4
 8015842:	4619      	mov	r1, r3
 8015844:	4610      	mov	r0, r2
 8015846:	f7fd fb82 	bl	8012f4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801584a:	697b      	ldr	r3, [r7, #20]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	24006c70 	.word	0x24006c70
 8015858:	24006c6c 	.word	0x24006c6c

0801585c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b08e      	sub	sp, #56	; 0x38
 8015860:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015862:	e0ca      	b.n	80159fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2b00      	cmp	r3, #0
 8015868:	da18      	bge.n	801589c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801586a:	1d3b      	adds	r3, r7, #4
 801586c:	3304      	adds	r3, #4
 801586e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10a      	bne.n	801588c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587a:	f383 8811 	msr	BASEPRI, r3
 801587e:	f3bf 8f6f 	isb	sy
 8015882:	f3bf 8f4f 	dsb	sy
 8015886:	61fb      	str	r3, [r7, #28]
}
 8015888:	bf00      	nop
 801588a:	e7fe      	b.n	801588a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015892:	6850      	ldr	r0, [r2, #4]
 8015894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015896:	6892      	ldr	r2, [r2, #8]
 8015898:	4611      	mov	r1, r2
 801589a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f2c0 80ab 	blt.w	80159fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80158a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158aa:	695b      	ldr	r3, [r3, #20]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d004      	beq.n	80158ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b2:	3304      	adds	r3, #4
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7fd fb83 	bl	8012fc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80158ba:	463b      	mov	r3, r7
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff ff6b 	bl	8015798 <prvSampleTimeNow>
 80158c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b09      	cmp	r3, #9
 80158c8:	f200 8096 	bhi.w	80159f8 <prvProcessReceivedCommands+0x19c>
 80158cc:	a201      	add	r2, pc, #4	; (adr r2, 80158d4 <prvProcessReceivedCommands+0x78>)
 80158ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d2:	bf00      	nop
 80158d4:	080158fd 	.word	0x080158fd
 80158d8:	080158fd 	.word	0x080158fd
 80158dc:	080158fd 	.word	0x080158fd
 80158e0:	08015971 	.word	0x08015971
 80158e4:	08015985 	.word	0x08015985
 80158e8:	080159cf 	.word	0x080159cf
 80158ec:	080158fd 	.word	0x080158fd
 80158f0:	080158fd 	.word	0x080158fd
 80158f4:	08015971 	.word	0x08015971
 80158f8:	08015985 	.word	0x08015985
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015902:	f043 0301 	orr.w	r3, r3, #1
 8015906:	b2da      	uxtb	r2, r3
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801590e:	68ba      	ldr	r2, [r7, #8]
 8015910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015912:	699b      	ldr	r3, [r3, #24]
 8015914:	18d1      	adds	r1, r2, r3
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801591a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801591c:	f7ff ff5c 	bl	80157d8 <prvInsertTimerInActiveList>
 8015920:	4603      	mov	r3, r0
 8015922:	2b00      	cmp	r3, #0
 8015924:	d069      	beq.n	80159fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015928:	6a1b      	ldr	r3, [r3, #32]
 801592a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801592c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015934:	f003 0304 	and.w	r3, r3, #4
 8015938:	2b00      	cmp	r3, #0
 801593a:	d05e      	beq.n	80159fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801593c:	68ba      	ldr	r2, [r7, #8]
 801593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015940:	699b      	ldr	r3, [r3, #24]
 8015942:	441a      	add	r2, r3
 8015944:	2300      	movs	r3, #0
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	2300      	movs	r3, #0
 801594a:	2100      	movs	r1, #0
 801594c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801594e:	f7ff fe05 	bl	801555c <xTimerGenericCommand>
 8015952:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015954:	6a3b      	ldr	r3, [r7, #32]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d14f      	bne.n	80159fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801595e:	f383 8811 	msr	BASEPRI, r3
 8015962:	f3bf 8f6f 	isb	sy
 8015966:	f3bf 8f4f 	dsb	sy
 801596a:	61bb      	str	r3, [r7, #24]
}
 801596c:	bf00      	nop
 801596e:	e7fe      	b.n	801596e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015976:	f023 0301 	bic.w	r3, r3, #1
 801597a:	b2da      	uxtb	r2, r3
 801597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015982:	e03a      	b.n	80159fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801598a:	f043 0301 	orr.w	r3, r3, #1
 801598e:	b2da      	uxtb	r2, r3
 8015990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015996:	68ba      	ldr	r2, [r7, #8]
 8015998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599e:	699b      	ldr	r3, [r3, #24]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10a      	bne.n	80159ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80159a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a8:	f383 8811 	msr	BASEPRI, r3
 80159ac:	f3bf 8f6f 	isb	sy
 80159b0:	f3bf 8f4f 	dsb	sy
 80159b4:	617b      	str	r3, [r7, #20]
}
 80159b6:	bf00      	nop
 80159b8:	e7fe      	b.n	80159b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80159ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159bc:	699a      	ldr	r2, [r3, #24]
 80159be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c0:	18d1      	adds	r1, r2, r3
 80159c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159c8:	f7ff ff06 	bl	80157d8 <prvInsertTimerInActiveList>
					break;
 80159cc:	e015      	b.n	80159fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80159ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159d4:	f003 0302 	and.w	r3, r3, #2
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d103      	bne.n	80159e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80159dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159de:	f7fd f947 	bl	8012c70 <vPortFree>
 80159e2:	e00a      	b.n	80159fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159ea:	f023 0301 	bic.w	r3, r3, #1
 80159ee:	b2da      	uxtb	r2, r3
 80159f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80159f6:	e000      	b.n	80159fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80159f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159fa:	4b08      	ldr	r3, [pc, #32]	; (8015a1c <prvProcessReceivedCommands+0x1c0>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	1d39      	adds	r1, r7, #4
 8015a00:	2200      	movs	r2, #0
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fe f926 	bl	8013c54 <xQueueReceive>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f47f af2a 	bne.w	8015864 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015a10:	bf00      	nop
 8015a12:	bf00      	nop
 8015a14:	3730      	adds	r7, #48	; 0x30
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	24006c74 	.word	0x24006c74

08015a20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b088      	sub	sp, #32
 8015a24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a26:	e048      	b.n	8015aba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a28:	4b2d      	ldr	r3, [pc, #180]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	68db      	ldr	r3, [r3, #12]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a32:	4b2b      	ldr	r3, [pc, #172]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	68db      	ldr	r3, [r3, #12]
 8015a3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	3304      	adds	r3, #4
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fd fabd 	bl	8012fc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	6a1b      	ldr	r3, [r3, #32]
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a54:	f003 0304 	and.w	r3, r3, #4
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d02e      	beq.n	8015aba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	699b      	ldr	r3, [r3, #24]
 8015a60:	693a      	ldr	r2, [r7, #16]
 8015a62:	4413      	add	r3, r2
 8015a64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015a66:	68ba      	ldr	r2, [r7, #8]
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d90e      	bls.n	8015a8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	68fa      	ldr	r2, [r7, #12]
 8015a78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a7a:	4b19      	ldr	r3, [pc, #100]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	3304      	adds	r3, #4
 8015a82:	4619      	mov	r1, r3
 8015a84:	4610      	mov	r0, r2
 8015a86:	f7fd fa62 	bl	8012f4e <vListInsert>
 8015a8a:	e016      	b.n	8015aba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	2300      	movs	r3, #0
 8015a92:	693a      	ldr	r2, [r7, #16]
 8015a94:	2100      	movs	r1, #0
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	f7ff fd60 	bl	801555c <xTimerGenericCommand>
 8015a9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10a      	bne.n	8015aba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa8:	f383 8811 	msr	BASEPRI, r3
 8015aac:	f3bf 8f6f 	isb	sy
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	603b      	str	r3, [r7, #0]
}
 8015ab6:	bf00      	nop
 8015ab8:	e7fe      	b.n	8015ab8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015aba:	4b09      	ldr	r3, [pc, #36]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d1b1      	bne.n	8015a28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015ac4:	4b06      	ldr	r3, [pc, #24]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015aca:	4b06      	ldr	r3, [pc, #24]	; (8015ae4 <prvSwitchTimerLists+0xc4>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4a04      	ldr	r2, [pc, #16]	; (8015ae0 <prvSwitchTimerLists+0xc0>)
 8015ad0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015ad2:	4a04      	ldr	r2, [pc, #16]	; (8015ae4 <prvSwitchTimerLists+0xc4>)
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	6013      	str	r3, [r2, #0]
}
 8015ad8:	bf00      	nop
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	24006c6c 	.word	0x24006c6c
 8015ae4:	24006c70 	.word	0x24006c70

08015ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b082      	sub	sp, #8
 8015aec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015aee:	f7fd fbc1 	bl	8013274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015af2:	4b15      	ldr	r3, [pc, #84]	; (8015b48 <prvCheckForValidListAndQueue+0x60>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d120      	bne.n	8015b3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015afa:	4814      	ldr	r0, [pc, #80]	; (8015b4c <prvCheckForValidListAndQueue+0x64>)
 8015afc:	f7fd f9d6 	bl	8012eac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015b00:	4813      	ldr	r0, [pc, #76]	; (8015b50 <prvCheckForValidListAndQueue+0x68>)
 8015b02:	f7fd f9d3 	bl	8012eac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015b06:	4b13      	ldr	r3, [pc, #76]	; (8015b54 <prvCheckForValidListAndQueue+0x6c>)
 8015b08:	4a10      	ldr	r2, [pc, #64]	; (8015b4c <prvCheckForValidListAndQueue+0x64>)
 8015b0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015b0c:	4b12      	ldr	r3, [pc, #72]	; (8015b58 <prvCheckForValidListAndQueue+0x70>)
 8015b0e:	4a10      	ldr	r2, [pc, #64]	; (8015b50 <prvCheckForValidListAndQueue+0x68>)
 8015b10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015b12:	2300      	movs	r3, #0
 8015b14:	9300      	str	r3, [sp, #0]
 8015b16:	4b11      	ldr	r3, [pc, #68]	; (8015b5c <prvCheckForValidListAndQueue+0x74>)
 8015b18:	4a11      	ldr	r2, [pc, #68]	; (8015b60 <prvCheckForValidListAndQueue+0x78>)
 8015b1a:	2110      	movs	r1, #16
 8015b1c:	200a      	movs	r0, #10
 8015b1e:	f7fd fd33 	bl	8013588 <xQueueGenericCreateStatic>
 8015b22:	4603      	mov	r3, r0
 8015b24:	4a08      	ldr	r2, [pc, #32]	; (8015b48 <prvCheckForValidListAndQueue+0x60>)
 8015b26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015b28:	4b07      	ldr	r3, [pc, #28]	; (8015b48 <prvCheckForValidListAndQueue+0x60>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d005      	beq.n	8015b3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015b30:	4b05      	ldr	r3, [pc, #20]	; (8015b48 <prvCheckForValidListAndQueue+0x60>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	490b      	ldr	r1, [pc, #44]	; (8015b64 <prvCheckForValidListAndQueue+0x7c>)
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fe fc44 	bl	80143c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b3c:	f7fd fbca 	bl	80132d4 <vPortExitCritical>
}
 8015b40:	bf00      	nop
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	24006c74 	.word	0x24006c74
 8015b4c:	24006c44 	.word	0x24006c44
 8015b50:	24006c58 	.word	0x24006c58
 8015b54:	24006c6c 	.word	0x24006c6c
 8015b58:	24006c70 	.word	0x24006c70
 8015b5c:	24006d20 	.word	0x24006d20
 8015b60:	24006c80 	.word	0x24006c80
 8015b64:	08026f84 	.word	0x08026f84

08015b68 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015b68:	8880      	ldrh	r0, [r0, #4]
 8015b6a:	4770      	bx	lr

08015b6c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	6803      	ldr	r3, [r0, #0]
 8015b70:	460c      	mov	r4, r1
 8015b72:	2100      	movs	r1, #0
 8015b74:	4605      	mov	r5, r0
 8015b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b78:	4798      	blx	r3
 8015b7a:	4606      	mov	r6, r0
 8015b7c:	682b      	ldr	r3, [r5, #0]
 8015b7e:	4628      	mov	r0, r5
 8015b80:	1ba4      	subs	r4, r4, r6
 8015b82:	6a1b      	ldr	r3, [r3, #32]
 8015b84:	b2a4      	uxth	r4, r4
 8015b86:	4798      	blx	r3
 8015b88:	fbb4 f0f0 	udiv	r0, r4, r0
 8015b8c:	bd70      	pop	{r4, r5, r6, pc}

08015b8e <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015b8e:	2300      	movs	r3, #0
 8015b90:	8083      	strh	r3, [r0, #4]
 8015b92:	4770      	bx	lr

08015b94 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015b94:	b510      	push	{r4, lr}
 8015b96:	6803      	ldr	r3, [r0, #0]
 8015b98:	4604      	mov	r4, r0
 8015b9a:	8881      	ldrh	r1, [r0, #4]
 8015b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9e:	4798      	blx	r3
 8015ba0:	88a3      	ldrh	r3, [r4, #4]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	80a3      	strh	r3, [r4, #4]
 8015ba6:	bd10      	pop	{r4, pc}

08015ba8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015ba8:	6803      	ldr	r3, [r0, #0]
 8015baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bac:	4718      	bx	r3

08015bae <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015bae:	4770      	bx	lr

08015bb0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015bb0:	4a02      	ldr	r2, [pc, #8]	; (8015bbc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015bb2:	6002      	str	r2, [r0, #0]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	8082      	strh	r2, [r0, #4]
 8015bb8:	4770      	bx	lr
 8015bba:	bf00      	nop
 8015bbc:	08027c7c 	.word	0x08027c7c

08015bc0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bc2:	2000      	movs	r0, #0
 8015bc4:	b12b      	cbz	r3, 8015bd2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015bc6:	b920      	cbnz	r0, 8015bd2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015bc8:	1a5a      	subs	r2, r3, r1
 8015bca:	699b      	ldr	r3, [r3, #24]
 8015bcc:	4250      	negs	r0, r2
 8015bce:	4150      	adcs	r0, r2
 8015bd0:	e7f8      	b.n	8015bc4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015bd2:	4770      	bx	lr

08015bd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	6148      	str	r0, [r1, #20]
 8015bd8:	618b      	str	r3, [r1, #24]
 8015bda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bdc:	b913      	cbnz	r3, 8015be4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8015bde:	6281      	str	r1, [r0, #40]	; 0x28
 8015be0:	4770      	bx	lr
 8015be2:	4613      	mov	r3, r2
 8015be4:	699a      	ldr	r2, [r3, #24]
 8015be6:	2a00      	cmp	r2, #0
 8015be8:	d1fb      	bne.n	8015be2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8015bea:	6199      	str	r1, [r3, #24]
 8015bec:	4770      	bx	lr

08015bee <_ZN8touchgfx9Container9removeAllEv>:
 8015bee:	2200      	movs	r2, #0
 8015bf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bf2:	b123      	cbz	r3, 8015bfe <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015bf4:	6999      	ldr	r1, [r3, #24]
 8015bf6:	6281      	str	r1, [r0, #40]	; 0x28
 8015bf8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015bfc:	e7f8      	b.n	8015bf0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015bfe:	4770      	bx	lr

08015c00 <_ZN8touchgfx9Container6unlinkEv>:
 8015c00:	2300      	movs	r3, #0
 8015c02:	6283      	str	r3, [r0, #40]	; 0x28
 8015c04:	4770      	bx	lr

08015c06 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015c06:	2200      	movs	r2, #0
 8015c08:	8002      	strh	r2, [r0, #0]
 8015c0a:	8042      	strh	r2, [r0, #2]
 8015c0c:	8082      	strh	r2, [r0, #4]
 8015c0e:	80c2      	strh	r2, [r0, #6]
 8015c10:	4770      	bx	lr

08015c12 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015c12:	b570      	push	{r4, r5, r6, lr}
 8015c14:	460d      	mov	r5, r1
 8015c16:	4616      	mov	r6, r2
 8015c18:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c1a:	b13c      	cbz	r4, 8015c2c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015c1c:	6823      	ldr	r3, [r4, #0]
 8015c1e:	4620      	mov	r0, r4
 8015c20:	4632      	mov	r2, r6
 8015c22:	4629      	mov	r1, r5
 8015c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c26:	4798      	blx	r3
 8015c28:	69a4      	ldr	r4, [r4, #24]
 8015c2a:	e7f6      	b.n	8015c1a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015c2c:	bd70      	pop	{r4, r5, r6, pc}

08015c2e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015c2e:	b538      	push	{r3, r4, r5, lr}
 8015c30:	460d      	mov	r5, r1
 8015c32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c34:	b134      	cbz	r4, 8015c44 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015c36:	682b      	ldr	r3, [r5, #0]
 8015c38:	4621      	mov	r1, r4
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	689b      	ldr	r3, [r3, #8]
 8015c3e:	4798      	blx	r3
 8015c40:	69a4      	ldr	r4, [r4, #24]
 8015c42:	e7f7      	b.n	8015c34 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015c44:	bd38      	pop	{r3, r4, r5, pc}

08015c46 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015c46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c48:	b19b      	cbz	r3, 8015c72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015c4a:	428b      	cmp	r3, r1
 8015c4c:	d109      	bne.n	8015c62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015c4e:	699a      	ldr	r2, [r3, #24]
 8015c50:	2100      	movs	r1, #0
 8015c52:	6159      	str	r1, [r3, #20]
 8015c54:	6282      	str	r2, [r0, #40]	; 0x28
 8015c56:	b902      	cbnz	r2, 8015c5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015c58:	4770      	bx	lr
 8015c5a:	6199      	str	r1, [r3, #24]
 8015c5c:	4770      	bx	lr
 8015c5e:	4613      	mov	r3, r2
 8015c60:	b13a      	cbz	r2, 8015c72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015c62:	699a      	ldr	r2, [r3, #24]
 8015c64:	428a      	cmp	r2, r1
 8015c66:	d1fa      	bne.n	8015c5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015c68:	698a      	ldr	r2, [r1, #24]
 8015c6a:	619a      	str	r2, [r3, #24]
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015c72:	4770      	bx	lr

08015c74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015c74:	b410      	push	{r4}
 8015c76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c78:	4604      	mov	r4, r0
 8015c7a:	b92b      	cbnz	r3, 8015c88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015c7c:	6803      	ldr	r3, [r0, #0]
 8015c7e:	4611      	mov	r1, r2
 8015c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c86:	4718      	bx	r3
 8015c88:	b941      	cbnz	r1, 8015c9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015c8a:	6193      	str	r3, [r2, #24]
 8015c8c:	6282      	str	r2, [r0, #40]	; 0x28
 8015c8e:	6154      	str	r4, [r2, #20]
 8015c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c94:	4770      	bx	lr
 8015c96:	4603      	mov	r3, r0
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d0f9      	beq.n	8015c90 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015c9c:	4299      	cmp	r1, r3
 8015c9e:	6998      	ldr	r0, [r3, #24]
 8015ca0:	d1f9      	bne.n	8015c96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015ca2:	6190      	str	r0, [r2, #24]
 8015ca4:	618a      	str	r2, [r1, #24]
 8015ca6:	e7f2      	b.n	8015c8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08015ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cac:	461f      	mov	r7, r3
 8015cae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	4616      	mov	r6, r2
 8015cb6:	b103      	cbz	r3, 8015cba <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015cb8:	6038      	str	r0, [r7, #0]
 8015cba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cbc:	b314      	cbz	r4, 8015d04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015cbe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015cc2:	b1eb      	cbz	r3, 8015d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015cc4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015cc8:	428d      	cmp	r5, r1
 8015cca:	db19      	blt.n	8015d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ccc:	b289      	uxth	r1, r1
 8015cce:	8923      	ldrh	r3, [r4, #8]
 8015cd0:	440b      	add	r3, r1
 8015cd2:	b21b      	sxth	r3, r3
 8015cd4:	429d      	cmp	r5, r3
 8015cd6:	da13      	bge.n	8015d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015cd8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015cdc:	4296      	cmp	r6, r2
 8015cde:	db0f      	blt.n	8015d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ce0:	b292      	uxth	r2, r2
 8015ce2:	8963      	ldrh	r3, [r4, #10]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	b21b      	sxth	r3, r3
 8015ce8:	429e      	cmp	r6, r3
 8015cea:	da09      	bge.n	8015d00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015cec:	6823      	ldr	r3, [r4, #0]
 8015cee:	1ab2      	subs	r2, r6, r2
 8015cf0:	1a69      	subs	r1, r5, r1
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8015cf8:	b212      	sxth	r2, r2
 8015cfa:	463b      	mov	r3, r7
 8015cfc:	b209      	sxth	r1, r1
 8015cfe:	47c0      	blx	r8
 8015d00:	69a4      	ldr	r4, [r4, #24]
 8015d02:	e7db      	b.n	8015cbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8015d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d0c:	4c6d      	ldr	r4, [pc, #436]	; (8015ec4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8015d0e:	b0a1      	sub	sp, #132	; 0x84
 8015d10:	4606      	mov	r6, r0
 8015d12:	6824      	ldr	r4, [r4, #0]
 8015d14:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8015d16:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8015d1a:	2400      	movs	r4, #0
 8015d1c:	9303      	str	r3, [sp, #12]
 8015d1e:	802c      	strh	r4, [r5, #0]
 8015d20:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015d22:	802c      	strh	r4, [r5, #0]
 8015d24:	601c      	str	r4, [r3, #0]
 8015d26:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015d2a:	f7ff ffbd 	bl	8015ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015d2e:	f1b9 0f03 	cmp.w	r9, #3
 8015d32:	f340 80c1 	ble.w	8015eb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8015d36:	4631      	mov	r1, r6
 8015d38:	a80c      	add	r0, sp, #48	; 0x30
 8015d3a:	f004 fb57 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015d3e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8015d42:	9306      	str	r3, [sp, #24]
 8015d44:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015d48:	9307      	str	r3, [sp, #28]
 8015d4a:	9b03      	ldr	r3, [sp, #12]
 8015d4c:	f8d3 a000 	ldr.w	sl, [r3]
 8015d50:	f1ba 0f00 	cmp.w	sl, #0
 8015d54:	f000 80b3 	beq.w	8015ebe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8015d58:	4651      	mov	r1, sl
 8015d5a:	a810      	add	r0, sp, #64	; 0x40
 8015d5c:	f004 fb46 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015d60:	2002      	movs	r0, #2
 8015d62:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8015d66:	9b01      	ldr	r3, [sp, #4]
 8015d68:	9a06      	ldr	r2, [sp, #24]
 8015d6a:	fb91 f1f0 	sdiv	r1, r1, r0
 8015d6e:	189d      	adds	r5, r3, r2
 8015d70:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8015d74:	9a07      	ldr	r2, [sp, #28]
 8015d76:	4419      	add	r1, r3
 8015d78:	9b02      	ldr	r3, [sp, #8]
 8015d7a:	4413      	add	r3, r2
 8015d7c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8015d80:	1a6d      	subs	r5, r5, r1
 8015d82:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015d86:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d8a:	440a      	add	r2, r1
 8015d8c:	1a9b      	subs	r3, r3, r2
 8015d8e:	435b      	muls	r3, r3
 8015d90:	fb05 3505 	mla	r5, r5, r5, r3
 8015d94:	4f4c      	ldr	r7, [pc, #304]	; (8015ec8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8015d96:	ac10      	add	r4, sp, #64	; 0x40
 8015d98:	f1b9 0f0c 	cmp.w	r9, #12
 8015d9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8015dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015db0:	f04f 0303 	mov.w	r3, #3
 8015db4:	bfd8      	it	le
 8015db6:	f109 32ff 	addle.w	r2, r9, #4294967295
 8015dba:	f04f 0400 	mov.w	r4, #0
 8015dbe:	f8cd 9000 	str.w	r9, [sp]
 8015dc2:	bfcc      	ite	gt
 8015dc4:	4698      	movgt	r8, r3
 8015dc6:	fb92 f8f3 	sdivle	r8, r2, r3
 8015dca:	1c63      	adds	r3, r4, #1
 8015dcc:	aa10      	add	r2, sp, #64	; 0x40
 8015dce:	f004 0401 	and.w	r4, r4, #1
 8015dd2:	f04f 0b00 	mov.w	fp, #0
 8015dd6:	9308      	str	r3, [sp, #32]
 8015dd8:	9b00      	ldr	r3, [sp, #0]
 8015dda:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8015dde:	fb93 f3f8 	sdiv	r3, r3, r8
 8015de2:	3404      	adds	r4, #4
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	9304      	str	r3, [sp, #16]
 8015de8:	9a04      	ldr	r2, [sp, #16]
 8015dea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015dee:	fb13 f302 	smulbb	r3, r3, r2
 8015df2:	9a01      	ldr	r2, [sp, #4]
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	1899      	adds	r1, r3, r2
 8015df8:	9305      	str	r3, [sp, #20]
 8015dfa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015dfe:	b209      	sxth	r1, r1
 8015e00:	4299      	cmp	r1, r3
 8015e02:	db4d      	blt.n	8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e04:	8932      	ldrh	r2, [r6, #8]
 8015e06:	4413      	add	r3, r2
 8015e08:	b21b      	sxth	r3, r3
 8015e0a:	4299      	cmp	r1, r3
 8015e0c:	da48      	bge.n	8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e0e:	9b04      	ldr	r3, [sp, #16]
 8015e10:	6827      	ldr	r7, [r4, #0]
 8015e12:	fb17 f703 	smulbb	r7, r7, r3
 8015e16:	9b02      	ldr	r3, [sp, #8]
 8015e18:	b2bf      	uxth	r7, r7
 8015e1a:	18fa      	adds	r2, r7, r3
 8015e1c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015e20:	b212      	sxth	r2, r2
 8015e22:	429a      	cmp	r2, r3
 8015e24:	db3c      	blt.n	8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e26:	8970      	ldrh	r0, [r6, #10]
 8015e28:	4403      	add	r3, r0
 8015e2a:	b21b      	sxth	r3, r3
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	da37      	bge.n	8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e30:	2300      	movs	r3, #0
 8015e32:	4630      	mov	r0, r6
 8015e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e36:	ab0b      	add	r3, sp, #44	; 0x2c
 8015e38:	f7ff ff36 	bl	8015ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e3e:	b37a      	cbz	r2, 8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e40:	4552      	cmp	r2, sl
 8015e42:	d02d      	beq.n	8015ea0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015e44:	4611      	mov	r1, r2
 8015e46:	a80e      	add	r0, sp, #56	; 0x38
 8015e48:	9209      	str	r2, [sp, #36]	; 0x24
 8015e4a:	f004 facf 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e4e:	f04f 0e02 	mov.w	lr, #2
 8015e52:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8015e56:	9a06      	ldr	r2, [sp, #24]
 8015e58:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8015e62:	4413      	add	r3, r2
 8015e64:	9a07      	ldr	r2, [sp, #28]
 8015e66:	fb91 f1fe 	sdiv	r1, r1, lr
 8015e6a:	fb9c fcfe 	sdiv	ip, ip, lr
 8015e6e:	4401      	add	r1, r0
 8015e70:	1a58      	subs	r0, r3, r1
 8015e72:	9b02      	ldr	r3, [sp, #8]
 8015e74:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8015e78:	4413      	add	r3, r2
 8015e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e7c:	448c      	add	ip, r1
 8015e7e:	eba3 030c 	sub.w	r3, r3, ip
 8015e82:	435b      	muls	r3, r3
 8015e84:	fb00 3300 	mla	r3, r0, r0, r3
 8015e88:	42ab      	cmp	r3, r5
 8015e8a:	d208      	bcs.n	8015e9e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8015e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e8e:	461d      	mov	r5, r3
 8015e90:	9803      	ldr	r0, [sp, #12]
 8015e92:	6001      	str	r1, [r0, #0]
 8015e94:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015e96:	9805      	ldr	r0, [sp, #20]
 8015e98:	8008      	strh	r0, [r1, #0]
 8015e9a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015e9c:	800f      	strh	r7, [r1, #0]
 8015e9e:	4692      	mov	sl, r2
 8015ea0:	f10b 0b01 	add.w	fp, fp, #1
 8015ea4:	3408      	adds	r4, #8
 8015ea6:	f1bb 0f04 	cmp.w	fp, #4
 8015eaa:	d19d      	bne.n	8015de8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8015eac:	9b00      	ldr	r3, [sp, #0]
 8015eae:	9c08      	ldr	r4, [sp, #32]
 8015eb0:	444b      	add	r3, r9
 8015eb2:	4544      	cmp	r4, r8
 8015eb4:	9300      	str	r3, [sp, #0]
 8015eb6:	d188      	bne.n	8015dca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8015eb8:	b021      	add	sp, #132	; 0x84
 8015eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ebe:	f04f 35ff 	mov.w	r5, #4294967295
 8015ec2:	e767      	b.n	8015d94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8015ec4:	24006d7c 	.word	0x24006d7c
 8015ec8:	08026f8c 	.word	0x08026f8c

08015ecc <_ZN8touchgfx4RectaNERKS0_>:
 8015ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ed0:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015ed4:	888c      	ldrh	r4, [r1, #4]
 8015ed6:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015eda:	443c      	add	r4, r7
 8015edc:	b2a4      	uxth	r4, r4
 8015ede:	fa0f f884 	sxth.w	r8, r4
 8015ee2:	45c1      	cmp	r9, r8
 8015ee4:	da2f      	bge.n	8015f46 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015ee6:	8882      	ldrh	r2, [r0, #4]
 8015ee8:	444a      	add	r2, r9
 8015eea:	b292      	uxth	r2, r2
 8015eec:	fa0f fe82 	sxth.w	lr, r2
 8015ef0:	4577      	cmp	r7, lr
 8015ef2:	da28      	bge.n	8015f46 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015ef4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015ef8:	88cb      	ldrh	r3, [r1, #6]
 8015efa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015efe:	442b      	add	r3, r5
 8015f00:	b21b      	sxth	r3, r3
 8015f02:	429e      	cmp	r6, r3
 8015f04:	da1f      	bge.n	8015f46 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015f06:	88c3      	ldrh	r3, [r0, #6]
 8015f08:	4433      	add	r3, r6
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	fa0f fc83 	sxth.w	ip, r3
 8015f10:	4565      	cmp	r5, ip
 8015f12:	da18      	bge.n	8015f46 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015f14:	454f      	cmp	r7, r9
 8015f16:	bfb8      	it	lt
 8015f18:	464f      	movlt	r7, r9
 8015f1a:	42b5      	cmp	r5, r6
 8015f1c:	bfb8      	it	lt
 8015f1e:	4635      	movlt	r5, r6
 8015f20:	45f0      	cmp	r8, lr
 8015f22:	bfd8      	it	le
 8015f24:	4622      	movle	r2, r4
 8015f26:	1bd2      	subs	r2, r2, r7
 8015f28:	8082      	strh	r2, [r0, #4]
 8015f2a:	884a      	ldrh	r2, [r1, #2]
 8015f2c:	88c9      	ldrh	r1, [r1, #6]
 8015f2e:	8007      	strh	r7, [r0, #0]
 8015f30:	440a      	add	r2, r1
 8015f32:	8045      	strh	r5, [r0, #2]
 8015f34:	b292      	uxth	r2, r2
 8015f36:	b211      	sxth	r1, r2
 8015f38:	458c      	cmp	ip, r1
 8015f3a:	bfa8      	it	ge
 8015f3c:	4613      	movge	r3, r2
 8015f3e:	1b5b      	subs	r3, r3, r5
 8015f40:	80c3      	strh	r3, [r0, #6]
 8015f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f46:	2300      	movs	r3, #0
 8015f48:	8003      	strh	r3, [r0, #0]
 8015f4a:	8043      	strh	r3, [r0, #2]
 8015f4c:	8083      	strh	r3, [r0, #4]
 8015f4e:	80c3      	strh	r3, [r0, #6]
 8015f50:	e7f7      	b.n	8015f42 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015f52 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015f52:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	dd06      	ble.n	8015f68 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015f5a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015f5e:	2800      	cmp	r0, #0
 8015f60:	bfcc      	ite	gt
 8015f62:	2000      	movgt	r0, #0
 8015f64:	2001      	movle	r0, #1
 8015f66:	4770      	bx	lr
 8015f68:	2001      	movs	r0, #1
 8015f6a:	4770      	bx	lr

08015f6c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f70:	2300      	movs	r3, #0
 8015f72:	4604      	mov	r4, r0
 8015f74:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015f76:	8003      	strh	r3, [r0, #0]
 8015f78:	8043      	strh	r3, [r0, #2]
 8015f7a:	8083      	strh	r3, [r0, #4]
 8015f7c:	80c3      	strh	r3, [r0, #6]
 8015f7e:	2d00      	cmp	r5, #0
 8015f80:	d040      	beq.n	8016004 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015f82:	1d28      	adds	r0, r5, #4
 8015f84:	f7ff ffe5 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f88:	b988      	cbnz	r0, 8015fae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f7ff ffe1 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f90:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015f94:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015f98:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015f9c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015fa0:	b138      	cbz	r0, 8015fb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015fa2:	8022      	strh	r2, [r4, #0]
 8015fa4:	8063      	strh	r3, [r4, #2]
 8015fa6:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015faa:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015fae:	69ad      	ldr	r5, [r5, #24]
 8015fb0:	e7e5      	b.n	8015f7e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015fb2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015fb6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015fba:	4290      	cmp	r0, r2
 8015fbc:	4607      	mov	r7, r0
 8015fbe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015fc2:	460e      	mov	r6, r1
 8015fc4:	bfa8      	it	ge
 8015fc6:	4617      	movge	r7, r2
 8015fc8:	4299      	cmp	r1, r3
 8015fca:	4472      	add	r2, lr
 8015fcc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015fd0:	bfa8      	it	ge
 8015fd2:	461e      	movge	r6, r3
 8015fd4:	4440      	add	r0, r8
 8015fd6:	4471      	add	r1, lr
 8015fd8:	4463      	add	r3, ip
 8015fda:	b200      	sxth	r0, r0
 8015fdc:	8027      	strh	r7, [r4, #0]
 8015fde:	b212      	sxth	r2, r2
 8015fe0:	8066      	strh	r6, [r4, #2]
 8015fe2:	b209      	sxth	r1, r1
 8015fe4:	b21b      	sxth	r3, r3
 8015fe6:	4290      	cmp	r0, r2
 8015fe8:	bfac      	ite	ge
 8015fea:	ebc7 0200 	rsbge	r2, r7, r0
 8015fee:	ebc7 0202 	rsblt	r2, r7, r2
 8015ff2:	4299      	cmp	r1, r3
 8015ff4:	bfac      	ite	ge
 8015ff6:	ebc6 0301 	rsbge	r3, r6, r1
 8015ffa:	ebc6 0303 	rsblt	r3, r6, r3
 8015ffe:	80a2      	strh	r2, [r4, #4]
 8016000:	80e3      	strh	r3, [r4, #6]
 8016002:	e7d4      	b.n	8015fae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016004:	4620      	mov	r0, r4
 8016006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801600a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801600a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801600e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016012:	b383      	cbz	r3, 8016076 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016014:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016016:	b374      	cbz	r4, 8016076 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016018:	f9b1 5000 	ldrsh.w	r5, [r1]
 801601c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016020:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016024:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016028:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801602c:	b303      	cbz	r3, 8016070 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801602e:	4668      	mov	r0, sp
 8016030:	1d21      	adds	r1, r4, #4
 8016032:	f8ad 5000 	strh.w	r5, [sp]
 8016036:	f8ad 6002 	strh.w	r6, [sp, #2]
 801603a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801603e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016042:	f7ff ff43 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 8016046:	4668      	mov	r0, sp
 8016048:	f7ff ff83 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 801604c:	b980      	cbnz	r0, 8016070 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801604e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016052:	4669      	mov	r1, sp
 8016054:	88a2      	ldrh	r2, [r4, #4]
 8016056:	4620      	mov	r0, r4
 8016058:	1a9b      	subs	r3, r3, r2
 801605a:	88e2      	ldrh	r2, [r4, #6]
 801605c:	f8ad 3000 	strh.w	r3, [sp]
 8016060:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016064:	1a9b      	subs	r3, r3, r2
 8016066:	f8ad 3002 	strh.w	r3, [sp, #2]
 801606a:	6823      	ldr	r3, [r4, #0]
 801606c:	689b      	ldr	r3, [r3, #8]
 801606e:	4798      	blx	r3
 8016070:	69a4      	ldr	r4, [r4, #24]
 8016072:	2c00      	cmp	r4, #0
 8016074:	d1d8      	bne.n	8016028 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016076:	b002      	add	sp, #8
 8016078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801607c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801607c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801607e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016082:	460d      	mov	r5, r1
 8016084:	4616      	mov	r6, r2
 8016086:	b323      	cbz	r3, 80160d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016088:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801608a:	b314      	cbz	r4, 80160d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801608c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016090:	b1eb      	cbz	r3, 80160ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016092:	6828      	ldr	r0, [r5, #0]
 8016094:	466b      	mov	r3, sp
 8016096:	6869      	ldr	r1, [r5, #4]
 8016098:	c303      	stmia	r3!, {r0, r1}
 801609a:	4668      	mov	r0, sp
 801609c:	1d21      	adds	r1, r4, #4
 801609e:	f7ff ff15 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 80160a2:	4668      	mov	r0, sp
 80160a4:	f7ff ff55 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 80160a8:	b988      	cbnz	r0, 80160ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80160aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80160ae:	4669      	mov	r1, sp
 80160b0:	88a2      	ldrh	r2, [r4, #4]
 80160b2:	4620      	mov	r0, r4
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	88e2      	ldrh	r2, [r4, #6]
 80160b8:	f8ad 3000 	strh.w	r3, [sp]
 80160bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80160c0:	1a9b      	subs	r3, r3, r2
 80160c2:	4632      	mov	r2, r6
 80160c4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80160c8:	6823      	ldr	r3, [r4, #0]
 80160ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160cc:	4798      	blx	r3
 80160ce:	69a4      	ldr	r4, [r4, #24]
 80160d0:	e7db      	b.n	801608a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80160d2:	b002      	add	sp, #8
 80160d4:	bd70      	pop	{r4, r5, r6, pc}

080160d6 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80160d6:	4770      	bx	lr

080160d8 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80160d8:	4770      	bx	lr

080160da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80160da:	6803      	ldr	r3, [r0, #0]
 80160dc:	b513      	push	{r0, r1, r4, lr}
 80160de:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80160e2:	2300      	movs	r3, #0
 80160e4:	e9cd 3300 	strd	r3, r3, [sp]
 80160e8:	466b      	mov	r3, sp
 80160ea:	47a0      	blx	r4
 80160ec:	b002      	add	sp, #8
 80160ee:	bd10      	pop	{r4, pc}

080160f0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80160f0:	2301      	movs	r3, #1
 80160f2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80160f6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80160fa:	4770      	bx	lr

080160fc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80160fc:	2301      	movs	r3, #1
 80160fe:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016102:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8016106:	4770      	bx	lr

08016108 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016108:	6843      	ldr	r3, [r0, #4]
 801610a:	2201      	movs	r2, #1
 801610c:	725a      	strb	r2, [r3, #9]
 801610e:	6840      	ldr	r0, [r0, #4]
 8016110:	6803      	ldr	r3, [r0, #0]
 8016112:	691b      	ldr	r3, [r3, #16]
 8016114:	4718      	bx	r3

08016116 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016116:	6840      	ldr	r0, [r0, #4]
 8016118:	6803      	ldr	r3, [r0, #0]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	4718      	bx	r3

0801611e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801611e:	b530      	push	{r4, r5, lr}
 8016120:	b08b      	sub	sp, #44	; 0x2c
 8016122:	6804      	ldr	r4, [r0, #0]
 8016124:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016128:	9509      	str	r5, [sp, #36]	; 0x24
 801612a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801612e:	9508      	str	r5, [sp, #32]
 8016130:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016134:	9507      	str	r5, [sp, #28]
 8016136:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801613a:	9506      	str	r5, [sp, #24]
 801613c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016140:	9505      	str	r5, [sp, #20]
 8016142:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016146:	9504      	str	r5, [sp, #16]
 8016148:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801614c:	9503      	str	r5, [sp, #12]
 801614e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016152:	9502      	str	r5, [sp, #8]
 8016154:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016158:	e9cd 3500 	strd	r3, r5, [sp]
 801615c:	4613      	mov	r3, r2
 801615e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016160:	2200      	movs	r2, #0
 8016162:	47a0      	blx	r4
 8016164:	b00b      	add	sp, #44	; 0x2c
 8016166:	bd30      	pop	{r4, r5, pc}

08016168 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016168:	4b04      	ldr	r3, [pc, #16]	; (801617c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	b123      	cbz	r3, 8016178 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801616e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8016172:	f080 0001 	eor.w	r0, r0, #1
 8016176:	4770      	bx	lr
 8016178:	2001      	movs	r0, #1
 801617a:	4770      	bx	lr
 801617c:	24006d7a 	.word	0x24006d7a

08016180 <_ZN8touchgfx3HAL8endFrameEv>:
 8016180:	b510      	push	{r4, lr}
 8016182:	4604      	mov	r4, r0
 8016184:	6840      	ldr	r0, [r0, #4]
 8016186:	6803      	ldr	r3, [r0, #0]
 8016188:	689b      	ldr	r3, [r3, #8]
 801618a:	4798      	blx	r3
 801618c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8016190:	b113      	cbz	r3, 8016198 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016192:	2301      	movs	r3, #1
 8016194:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8016198:	bd10      	pop	{r4, pc}

0801619a <_ZN8touchgfx3HAL10initializeEv>:
 801619a:	b510      	push	{r4, lr}
 801619c:	4604      	mov	r4, r0
 801619e:	f7eb ffb9 	bl	8002114 <_ZN8touchgfx10OSWrappers10initializeEv>
 80161a2:	f7eb fc73 	bl	8001a8c <_ZN8touchgfx4GPIO4initEv>
 80161a6:	6860      	ldr	r0, [r4, #4]
 80161a8:	6803      	ldr	r3, [r0, #0]
 80161aa:	68db      	ldr	r3, [r3, #12]
 80161ac:	4798      	blx	r3
 80161ae:	68e0      	ldr	r0, [r4, #12]
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	689b      	ldr	r3, [r3, #8]
 80161b4:	4798      	blx	r3
 80161b6:	6823      	ldr	r3, [r4, #0]
 80161b8:	4620      	mov	r0, r4
 80161ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161c0:	4718      	bx	r3

080161c2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80161c2:	b508      	push	{r3, lr}
 80161c4:	6803      	ldr	r3, [r0, #0]
 80161c6:	4604      	mov	r4, r0
 80161c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80161cc:	4798      	blx	r3
 80161ce:	6823      	ldr	r3, [r4, #0]
 80161d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161d2:	4620      	mov	r0, r4
 80161d4:	4798      	blx	r3
 80161d6:	f7ec f813 	bl	8002200 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80161da:	6823      	ldr	r3, [r4, #0]
 80161dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161de:	e7f8      	b.n	80161d2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080161e0 <_ZN8touchgfx3HAL4tickEv>:
 80161e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80161e2:	6803      	ldr	r3, [r0, #0]
 80161e4:	4604      	mov	r4, r0
 80161e6:	4d5b      	ldr	r5, [pc, #364]	; (8016354 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80161e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80161ec:	4798      	blx	r3
 80161ee:	2800      	cmp	r0, #0
 80161f0:	f000 8095 	beq.w	801631e <_ZN8touchgfx3HAL4tickEv+0x13e>
 80161f4:	2001      	movs	r0, #1
 80161f6:	2600      	movs	r6, #0
 80161f8:	f7eb fc50 	bl	8001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80161fc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8016200:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016204:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016208:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 801620c:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8016210:	b133      	cbz	r3, 8016220 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016212:	6823      	ldr	r3, [r4, #0]
 8016214:	4620      	mov	r0, r4
 8016216:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801621a:	4798      	blx	r3
 801621c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8016220:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016224:	2601      	movs	r6, #1
 8016226:	6862      	ldr	r2, [r4, #4]
 8016228:	f083 0301 	eor.w	r3, r3, #1
 801622c:	702e      	strb	r6, [r5, #0]
 801622e:	7253      	strb	r3, [r2, #9]
 8016230:	f002 ffa0 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8016234:	6803      	ldr	r3, [r0, #0]
 8016236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016238:	4798      	blx	r3
 801623a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801623e:	b90b      	cbnz	r3, 8016244 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016240:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8016244:	f002 ff96 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8016248:	6803      	ldr	r3, [r0, #0]
 801624a:	695b      	ldr	r3, [r3, #20]
 801624c:	4798      	blx	r3
 801624e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8016250:	6803      	ldr	r3, [r0, #0]
 8016252:	691b      	ldr	r3, [r3, #16]
 8016254:	4798      	blx	r3
 8016256:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801625a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801625e:	3b01      	subs	r3, #1
 8016260:	b2db      	uxtb	r3, r3
 8016262:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016266:	b10a      	cbz	r2, 801626c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016268:	2b00      	cmp	r3, #0
 801626a:	d1eb      	bne.n	8016244 <_ZN8touchgfx3HAL4tickEv+0x64>
 801626c:	4a3a      	ldr	r2, [pc, #232]	; (8016358 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801626e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8016272:	7813      	ldrb	r3, [r2, #0]
 8016274:	3301      	adds	r3, #1
 8016276:	b25b      	sxtb	r3, r3
 8016278:	4299      	cmp	r1, r3
 801627a:	7013      	strb	r3, [r2, #0]
 801627c:	dc10      	bgt.n	80162a0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801627e:	2300      	movs	r3, #0
 8016280:	68e0      	ldr	r0, [r4, #12]
 8016282:	a902      	add	r1, sp, #8
 8016284:	7013      	strb	r3, [r2, #0]
 8016286:	aa03      	add	r2, sp, #12
 8016288:	6803      	ldr	r3, [r0, #0]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	4798      	blx	r3
 801628e:	6823      	ldr	r3, [r4, #0]
 8016290:	2800      	cmp	r0, #0
 8016292:	d050      	beq.n	8016336 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016294:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016298:	4620      	mov	r0, r4
 801629a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801629e:	4798      	blx	r3
 80162a0:	2300      	movs	r3, #0
 80162a2:	6960      	ldr	r0, [r4, #20]
 80162a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80162a8:	b158      	cbz	r0, 80162c2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80162aa:	6803      	ldr	r3, [r0, #0]
 80162ac:	f10d 0107 	add.w	r1, sp, #7
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	4798      	blx	r3
 80162b4:	b128      	cbz	r0, 80162c2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80162b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80162b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80162bc:	6803      	ldr	r3, [r0, #0]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	4798      	blx	r3
 80162c2:	f104 001c 	add.w	r0, r4, #28
 80162c6:	f00e fedf 	bl	8025088 <_ZN8touchgfx8Gestures4tickEv>
 80162ca:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80162ce:	b30b      	cbz	r3, 8016314 <_ZN8touchgfx3HAL4tickEv+0x134>
 80162d0:	6920      	ldr	r0, [r4, #16]
 80162d2:	6803      	ldr	r3, [r0, #0]
 80162d4:	691b      	ldr	r3, [r3, #16]
 80162d6:	4798      	blx	r3
 80162d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80162da:	4606      	mov	r6, r0
 80162dc:	b903      	cbnz	r3, 80162e0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80162de:	6760      	str	r0, [r4, #116]	; 0x74
 80162e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80162e2:	4a1e      	ldr	r2, [pc, #120]	; (801635c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80162e4:	1af3      	subs	r3, r6, r3
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d914      	bls.n	8016314 <_ZN8touchgfx3HAL4tickEv+0x134>
 80162ea:	6920      	ldr	r0, [r4, #16]
 80162ec:	6803      	ldr	r3, [r0, #0]
 80162ee:	699b      	ldr	r3, [r3, #24]
 80162f0:	4798      	blx	r3
 80162f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80162f4:	2264      	movs	r2, #100	; 0x64
 80162f6:	1af3      	subs	r3, r6, r3
 80162f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80162fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8016300:	2800      	cmp	r0, #0
 8016302:	dc1d      	bgt.n	8016340 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016304:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8016308:	6920      	ldr	r0, [r4, #16]
 801630a:	2100      	movs	r1, #0
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	69db      	ldr	r3, [r3, #28]
 8016310:	4798      	blx	r3
 8016312:	6766      	str	r6, [r4, #116]	; 0x74
 8016314:	f002 ff2e 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 8016318:	6803      	ldr	r3, [r0, #0]
 801631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801631c:	4798      	blx	r3
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	4620      	mov	r0, r4
 8016322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016326:	4798      	blx	r3
 8016328:	2001      	movs	r0, #1
 801632a:	f7eb fbf1 	bl	8001b10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801632e:	2300      	movs	r3, #0
 8016330:	702b      	strb	r3, [r5, #0]
 8016332:	b004      	add	sp, #16
 8016334:	bd70      	pop	{r4, r5, r6, pc}
 8016336:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801633a:	4620      	mov	r0, r4
 801633c:	4798      	blx	r3
 801633e:	e7af      	b.n	80162a0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016340:	2863      	cmp	r0, #99	; 0x63
 8016342:	bfcb      	itete	gt
 8016344:	2300      	movgt	r3, #0
 8016346:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801634a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801634e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8016352:	e7d9      	b.n	8016308 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016354:	24006d80 	.word	0x24006d80
 8016358:	24006d81 	.word	0x24006d81
 801635c:	05f5e100 	.word	0x05f5e100

08016360 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016360:	b510      	push	{r4, lr}
 8016362:	4604      	mov	r4, r0
 8016364:	f7eb ff18 	bl	8002198 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8016368:	2200      	movs	r2, #0
 801636a:	6863      	ldr	r3, [r4, #4]
 801636c:	729a      	strb	r2, [r3, #10]
 801636e:	bd10      	pop	{r4, pc}

08016370 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016370:	65c1      	str	r1, [r0, #92]	; 0x5c
 8016372:	301c      	adds	r0, #28
 8016374:	f00e be86 	b.w	8025084 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016378 <_ZN8touchgfx3HAL5touchEll>:
 8016378:	b530      	push	{r4, r5, lr}
 801637a:	b087      	sub	sp, #28
 801637c:	4604      	mov	r4, r0
 801637e:	a804      	add	r0, sp, #16
 8016380:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016384:	f002 fce8 	bl	8018d58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016388:	9b04      	ldr	r3, [sp, #16]
 801638a:	a906      	add	r1, sp, #24
 801638c:	a803      	add	r0, sp, #12
 801638e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016392:	9b05      	ldr	r3, [sp, #20]
 8016394:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016398:	f002 fd30 	bl	8018dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801639c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80163a0:	f104 001c 	add.w	r0, r4, #28
 80163a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80163a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80163ac:	b189      	cbz	r1, 80163d2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80163ae:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80163b2:	9300      	str	r3, [sp, #0]
 80163b4:	4613      	mov	r3, r2
 80163b6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80163ba:	462a      	mov	r2, r5
 80163bc:	f00e fe72 	bl	80250a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80163c0:	b128      	cbz	r0, 80163ce <_ZN8touchgfx3HAL5touchEll+0x56>
 80163c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80163c6:	6623      	str	r3, [r4, #96]	; 0x60
 80163c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80163cc:	6663      	str	r3, [r4, #100]	; 0x64
 80163ce:	b007      	add	sp, #28
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	f00e fea7 	bl	8025124 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80163d6:	2301      	movs	r3, #1
 80163d8:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80163dc:	e7f1      	b.n	80163c2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080163de <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80163de:	b510      	push	{r4, lr}
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d046      	beq.n	8016472 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80163e4:	ea81 0002 	eor.w	r0, r1, r2
 80163e8:	07c4      	lsls	r4, r0, #31
 80163ea:	d508      	bpl.n	80163fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80163ec:	440b      	add	r3, r1
 80163ee:	3a01      	subs	r2, #1
 80163f0:	428b      	cmp	r3, r1
 80163f2:	d93e      	bls.n	8016472 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80163f4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80163f8:	f801 0b01 	strb.w	r0, [r1], #1
 80163fc:	e7f8      	b.n	80163f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80163fe:	07d0      	lsls	r0, r2, #31
 8016400:	bf42      	ittt	mi
 8016402:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016406:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801640a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801640e:	2b01      	cmp	r3, #1
 8016410:	d911      	bls.n	8016436 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016412:	ea81 0402 	eor.w	r4, r1, r2
 8016416:	4610      	mov	r0, r2
 8016418:	07a4      	lsls	r4, r4, #30
 801641a:	d022      	beq.n	8016462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801641c:	f023 0401 	bic.w	r4, r3, #1
 8016420:	440c      	add	r4, r1
 8016422:	428c      	cmp	r4, r1
 8016424:	4602      	mov	r2, r0
 8016426:	d904      	bls.n	8016432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016428:	8812      	ldrh	r2, [r2, #0]
 801642a:	3002      	adds	r0, #2
 801642c:	f821 2b02 	strh.w	r2, [r1], #2
 8016430:	e7f7      	b.n	8016422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016432:	f003 0301 	and.w	r3, r3, #1
 8016436:	f023 0003 	bic.w	r0, r3, #3
 801643a:	4408      	add	r0, r1
 801643c:	4288      	cmp	r0, r1
 801643e:	4614      	mov	r4, r2
 8016440:	d904      	bls.n	801644c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016442:	6824      	ldr	r4, [r4, #0]
 8016444:	3204      	adds	r2, #4
 8016446:	f841 4b04 	str.w	r4, [r1], #4
 801644a:	e7f7      	b.n	801643c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801644c:	f003 0303 	and.w	r3, r3, #3
 8016450:	3a01      	subs	r2, #1
 8016452:	440b      	add	r3, r1
 8016454:	428b      	cmp	r3, r1
 8016456:	d90c      	bls.n	8016472 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016458:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801645c:	f801 0b01 	strb.w	r0, [r1], #1
 8016460:	e7f8      	b.n	8016454 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016462:	0790      	lsls	r0, r2, #30
 8016464:	d0e7      	beq.n	8016436 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016466:	f832 0b02 	ldrh.w	r0, [r2], #2
 801646a:	3b02      	subs	r3, #2
 801646c:	f821 0b02 	strh.w	r0, [r1], #2
 8016470:	e7e1      	b.n	8016436 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016472:	2001      	movs	r0, #1
 8016474:	bd10      	pop	{r4, pc}

08016476 <_ZN8touchgfx3HAL7noTouchEv>:
 8016476:	b510      	push	{r4, lr}
 8016478:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 801647c:	4604      	mov	r4, r0
 801647e:	b153      	cbz	r3, 8016496 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016480:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8016484:	2101      	movs	r1, #1
 8016486:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801648a:	301c      	adds	r0, #28
 801648c:	f00e fe4a 	bl	8025124 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016490:	2300      	movs	r3, #0
 8016492:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8016496:	bd10      	pop	{r4, pc}

08016498 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801649c:	b085      	sub	sp, #20
 801649e:	4604      	mov	r4, r0
 80164a0:	2000      	movs	r0, #0
 80164a2:	4699      	mov	r9, r3
 80164a4:	ad04      	add	r5, sp, #16
 80164a6:	460f      	mov	r7, r1
 80164a8:	4690      	mov	r8, r2
 80164aa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80164ae:	69a0      	ldr	r0, [r4, #24]
 80164b0:	6806      	ldr	r6, [r0, #0]
 80164b2:	9501      	str	r5, [sp, #4]
 80164b4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80164b8:	9500      	str	r5, [sp, #0]
 80164ba:	6835      	ldr	r5, [r6, #0]
 80164bc:	47a8      	blx	r5
 80164be:	4d10      	ldr	r5, [pc, #64]	; (8016500 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80164c0:	4606      	mov	r6, r0
 80164c2:	f8a5 9000 	strh.w	r9, [r5]
 80164c6:	f7ed ff6d 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 80164ca:	6803      	ldr	r3, [r0, #0]
 80164cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164ce:	4798      	blx	r3
 80164d0:	b128      	cbz	r0, 80164de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80164d2:	2801      	cmp	r0, #1
 80164d4:	d00b      	beq.n	80164ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80164d6:	4630      	mov	r0, r6
 80164d8:	b005      	add	sp, #20
 80164da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164de:	882b      	ldrh	r3, [r5, #0]
 80164e0:	fb08 7203 	mla	r2, r8, r3, r7
 80164e4:	9b03      	ldr	r3, [sp, #12]
 80164e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80164ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80164ec:	e7f3      	b.n	80164d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80164ee:	882a      	ldrh	r2, [r5, #0]
 80164f0:	9b03      	ldr	r3, [sp, #12]
 80164f2:	fb08 7202 	mla	r2, r8, r2, r7
 80164f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80164fa:	1a9a      	subs	r2, r3, r2
 80164fc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80164fe:	e7ea      	b.n	80164d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016500:	24006d76 	.word	0x24006d76

08016504 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016506:	b08b      	sub	sp, #44	; 0x2c
 8016508:	4617      	mov	r7, r2
 801650a:	4604      	mov	r4, r0
 801650c:	460e      	mov	r6, r1
 801650e:	461d      	mov	r5, r3
 8016510:	f7ed ff48 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 8016514:	6803      	ldr	r3, [r0, #0]
 8016516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016518:	4798      	blx	r3
 801651a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801651e:	9007      	str	r0, [sp, #28]
 8016520:	4631      	mov	r1, r6
 8016522:	6822      	ldr	r2, [r4, #0]
 8016524:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016528:	4b0c      	ldr	r3, [pc, #48]	; (801655c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801652a:	4620      	mov	r0, r4
 801652c:	881b      	ldrh	r3, [r3, #0]
 801652e:	9306      	str	r3, [sp, #24]
 8016530:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016534:	9305      	str	r3, [sp, #20]
 8016536:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801653a:	9304      	str	r3, [sp, #16]
 801653c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016540:	9303      	str	r3, [sp, #12]
 8016542:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016546:	9302      	str	r3, [sp, #8]
 8016548:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801654c:	e9cd 5300 	strd	r5, r3, [sp]
 8016550:	463b      	mov	r3, r7
 8016552:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016554:	2200      	movs	r2, #0
 8016556:	47a8      	blx	r5
 8016558:	b00b      	add	sp, #44	; 0x2c
 801655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801655c:	24006d76 	.word	0x24006d76

08016560 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016564:	4698      	mov	r8, r3
 8016566:	6803      	ldr	r3, [r0, #0]
 8016568:	b08b      	sub	sp, #44	; 0x2c
 801656a:	4617      	mov	r7, r2
 801656c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801656e:	460e      	mov	r6, r1
 8016570:	4b13      	ldr	r3, [pc, #76]	; (80165c0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016572:	4604      	mov	r4, r0
 8016574:	f8b3 9000 	ldrh.w	r9, [r3]
 8016578:	f7ed ff14 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 801657c:	6803      	ldr	r3, [r0, #0]
 801657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016580:	4798      	blx	r3
 8016582:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016586:	2200      	movs	r2, #0
 8016588:	4631      	mov	r1, r6
 801658a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801658e:	2302      	movs	r3, #2
 8016590:	4620      	mov	r0, r4
 8016592:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016596:	2301      	movs	r3, #1
 8016598:	9305      	str	r3, [sp, #20]
 801659a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801659e:	9304      	str	r3, [sp, #16]
 80165a0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80165a4:	9303      	str	r3, [sp, #12]
 80165a6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80165aa:	9302      	str	r3, [sp, #8]
 80165ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80165b0:	e9cd 8300 	strd	r8, r3, [sp]
 80165b4:	463b      	mov	r3, r7
 80165b6:	47a8      	blx	r5
 80165b8:	b00b      	add	sp, #44	; 0x2c
 80165ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165be:	bf00      	nop
 80165c0:	24006d76 	.word	0x24006d76

080165c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80165c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165c8:	4698      	mov	r8, r3
 80165ca:	6803      	ldr	r3, [r0, #0]
 80165cc:	b087      	sub	sp, #28
 80165ce:	460e      	mov	r6, r1
 80165d0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80165d2:	4617      	mov	r7, r2
 80165d4:	4b0f      	ldr	r3, [pc, #60]	; (8016614 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80165d6:	4604      	mov	r4, r0
 80165d8:	f8b3 9000 	ldrh.w	r9, [r3]
 80165dc:	f7ed fee2 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 80165e0:	6803      	ldr	r3, [r0, #0]
 80165e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165e4:	4798      	blx	r3
 80165e6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80165ea:	463a      	mov	r2, r7
 80165ec:	4631      	mov	r1, r6
 80165ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80165f2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80165f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80165fa:	4620      	mov	r0, r4
 80165fc:	9302      	str	r3, [sp, #8]
 80165fe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016602:	9301      	str	r3, [sp, #4]
 8016604:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016608:	9300      	str	r3, [sp, #0]
 801660a:	4643      	mov	r3, r8
 801660c:	47a8      	blx	r5
 801660e:	b007      	add	sp, #28
 8016610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016614:	24006d76 	.word	0x24006d76

08016618 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661c:	4604      	mov	r4, r0
 801661e:	b08f      	sub	sp, #60	; 0x3c
 8016620:	4610      	mov	r0, r2
 8016622:	460d      	mov	r5, r1
 8016624:	4691      	mov	r9, r2
 8016626:	461e      	mov	r6, r3
 8016628:	f005 fa48 	bl	801babc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801662c:	2800      	cmp	r0, #0
 801662e:	f000 809d 	beq.w	801676c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016632:	6823      	ldr	r3, [r4, #0]
 8016634:	4620      	mov	r0, r4
 8016636:	f8df b198 	ldr.w	fp, [pc, #408]	; 80167d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801663a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016640:	4798      	blx	r3
 8016642:	6823      	ldr	r3, [r4, #0]
 8016644:	4620      	mov	r0, r4
 8016646:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80167d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801664c:	4798      	blx	r3
 801664e:	f8bb 3000 	ldrh.w	r3, [fp]
 8016652:	4f5c      	ldr	r7, [pc, #368]	; (80167c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016654:	9301      	str	r3, [sp, #4]
 8016656:	f8ba 3000 	ldrh.w	r3, [sl]
 801665a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801665e:	4640      	mov	r0, r8
 8016660:	9302      	str	r3, [sp, #8]
 8016662:	883b      	ldrh	r3, [r7, #0]
 8016664:	9303      	str	r3, [sp, #12]
 8016666:	4b58      	ldr	r3, [pc, #352]	; (80167c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016668:	881a      	ldrh	r2, [r3, #0]
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	9204      	str	r2, [sp, #16]
 801666e:	f005 fb69 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016672:	8038      	strh	r0, [r7, #0]
 8016674:	4640      	mov	r0, r8
 8016676:	f005 fb99 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801667a:	9b05      	ldr	r3, [sp, #20]
 801667c:	b280      	uxth	r0, r0
 801667e:	8018      	strh	r0, [r3, #0]
 8016680:	4b52      	ldr	r3, [pc, #328]	; (80167cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d174      	bne.n	8016772 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8016688:	883b      	ldrh	r3, [r7, #0]
 801668a:	f8aa 0000 	strh.w	r0, [sl]
 801668e:	f8ab 3000 	strh.w	r3, [fp]
 8016692:	4648      	mov	r0, r9
 8016694:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016698:	f005 fa10 	bl	801babc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801669c:	2200      	movs	r2, #0
 801669e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80166a2:	4611      	mov	r1, r2
 80166a4:	4628      	mov	r0, r5
 80166a6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80166aa:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80166ae:	f7ed fd75 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
 80166b2:	2301      	movs	r3, #1
 80166b4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80166b8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80166bc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	dd5c      	ble.n	801677e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80166c4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	dd58      	ble.n	801677e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80166cc:	462a      	mov	r2, r5
 80166ce:	ab0a      	add	r3, sp, #40	; 0x28
 80166d0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80166d4:	6851      	ldr	r1, [r2, #4]
 80166d6:	c303      	stmia	r3!, {r0, r1}
 80166d8:	4631      	mov	r1, r6
 80166da:	a80a      	add	r0, sp, #40	; 0x28
 80166dc:	f7ff fbf6 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 80166e0:	4b38      	ldr	r3, [pc, #224]	; (80167c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80166e2:	2100      	movs	r1, #0
 80166e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80166e8:	4b37      	ldr	r3, [pc, #220]	; (80167c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80166ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80166ee:	aa0a      	add	r2, sp, #40	; 0x28
 80166f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166f4:	910c      	str	r1, [sp, #48]	; 0x30
 80166f6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80166fa:	ab08      	add	r3, sp, #32
 80166fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016700:	e883 0003 	stmia.w	r3, {r0, r1}
 8016704:	4618      	mov	r0, r3
 8016706:	a90c      	add	r1, sp, #48	; 0x30
 8016708:	f7ff fbe0 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801670c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801670e:	2b00      	cmp	r3, #0
 8016710:	d13c      	bne.n	801678c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8016712:	2000      	movs	r0, #0
 8016714:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8016718:	2600      	movs	r6, #0
 801671a:	696b      	ldr	r3, [r5, #20]
 801671c:	a908      	add	r1, sp, #32
 801671e:	682a      	ldr	r2, [r5, #0]
 8016720:	4628      	mov	r0, r5
 8016722:	9305      	str	r3, [sp, #20]
 8016724:	616e      	str	r6, [r5, #20]
 8016726:	6892      	ldr	r2, [r2, #8]
 8016728:	4790      	blx	r2
 801672a:	9b05      	ldr	r3, [sp, #20]
 801672c:	4652      	mov	r2, sl
 801672e:	4649      	mov	r1, r9
 8016730:	616b      	str	r3, [r5, #20]
 8016732:	4628      	mov	r0, r5
 8016734:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8016738:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801673c:	f7ed fd2e 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
 8016740:	9a01      	ldr	r2, [sp, #4]
 8016742:	4b23      	ldr	r3, [pc, #140]	; (80167d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016744:	4620      	mov	r0, r4
 8016746:	801a      	strh	r2, [r3, #0]
 8016748:	9a02      	ldr	r2, [sp, #8]
 801674a:	4b22      	ldr	r3, [pc, #136]	; (80167d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801674c:	801a      	strh	r2, [r3, #0]
 801674e:	9a03      	ldr	r2, [sp, #12]
 8016750:	4b1c      	ldr	r3, [pc, #112]	; (80167c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016752:	801a      	strh	r2, [r3, #0]
 8016754:	4b1c      	ldr	r3, [pc, #112]	; (80167c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016756:	9a04      	ldr	r2, [sp, #16]
 8016758:	801a      	strh	r2, [r3, #0]
 801675a:	6823      	ldr	r3, [r4, #0]
 801675c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016762:	4798      	blx	r3
 8016764:	6823      	ldr	r3, [r4, #0]
 8016766:	4620      	mov	r0, r4
 8016768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801676a:	4798      	blx	r3
 801676c:	b00f      	add	sp, #60	; 0x3c
 801676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016772:	883b      	ldrh	r3, [r7, #0]
 8016774:	f8ab 0000 	strh.w	r0, [fp]
 8016778:	f8aa 3000 	strh.w	r3, [sl]
 801677c:	e789      	b.n	8016692 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801677e:	462a      	mov	r2, r5
 8016780:	ab0a      	add	r3, sp, #40	; 0x28
 8016782:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016786:	6851      	ldr	r1, [r2, #4]
 8016788:	c303      	stmia	r3!, {r0, r1}
 801678a:	e7a9      	b.n	80166e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801678c:	a807      	add	r0, sp, #28
 801678e:	f005 fc11 	bl	801bfb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016792:	4606      	mov	r6, r0
 8016794:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016796:	6803      	ldr	r3, [r0, #0]
 8016798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801679a:	4798      	blx	r3
 801679c:	4286      	cmp	r6, r0
 801679e:	d1b8      	bne.n	8016712 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80167a0:	f7ed fe00 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	4606      	mov	r6, r0
 80167a8:	a807      	add	r0, sp, #28
 80167aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167ac:	9305      	str	r3, [sp, #20]
 80167ae:	f005 fc01 	bl	801bfb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80167b2:	9b05      	ldr	r3, [sp, #20]
 80167b4:	4601      	mov	r1, r0
 80167b6:	4630      	mov	r0, r6
 80167b8:	4798      	blx	r3
 80167ba:	f080 0001 	eor.w	r0, r0, #1
 80167be:	b2c0      	uxtb	r0, r0
 80167c0:	e7a8      	b.n	8016714 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80167c2:	bf00      	nop
 80167c4:	24006d70 	.word	0x24006d70
 80167c8:	24006d72 	.word	0x24006d72
 80167cc:	24006d74 	.word	0x24006d74
 80167d0:	24006d76 	.word	0x24006d76
 80167d4:	24006d78 	.word	0x24006d78

080167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80167d8:	4b07      	ldr	r3, [pc, #28]	; (80167f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80167da:	b510      	push	{r4, lr}
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	4604      	mov	r4, r0
 80167e0:	b13b      	cbz	r3, 80167f2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80167e2:	6803      	ldr	r3, [r0, #0]
 80167e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167e6:	4798      	blx	r3
 80167e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80167ea:	4283      	cmp	r3, r0
 80167ec:	d101      	bne.n	80167f2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80167ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80167f4:	e7fc      	b.n	80167f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80167f6:	bf00      	nop
 80167f8:	24006d7a 	.word	0x24006d7a

080167fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80167fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016800:	461d      	mov	r5, r3
 8016802:	b08a      	sub	sp, #40	; 0x28
 8016804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016808:	4690      	mov	r8, r2
 801680a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801680e:	2400      	movs	r4, #0
 8016810:	4607      	mov	r7, r0
 8016812:	fb06 8505 	mla	r5, r6, r5, r8
 8016816:	9404      	str	r4, [sp, #16]
 8016818:	f88d 4020 	strb.w	r4, [sp, #32]
 801681c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016820:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016824:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016828:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801682c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016830:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016834:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016838:	f7ff ffce 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801683c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016846:	a901      	add	r1, sp, #4
 8016848:	9505      	str	r5, [sp, #20]
 801684a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801684e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8016852:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016856:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801685a:	6803      	ldr	r3, [r0, #0]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	4798      	blx	r3
 8016860:	b00a      	add	sp, #40	; 0x28
 8016862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016866 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801686a:	b08b      	sub	sp, #44	; 0x2c
 801686c:	2400      	movs	r4, #0
 801686e:	4691      	mov	r9, r2
 8016870:	461d      	mov	r5, r3
 8016872:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801687a:	4688      	mov	r8, r1
 801687c:	4607      	mov	r7, r0
 801687e:	9404      	str	r4, [sp, #16]
 8016880:	fb06 9505 	mla	r5, r6, r5, r9
 8016884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016888:	f7ff ffa6 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801688c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016890:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f8ad 3018 	strh.w	r3, [sp, #24]
 801689a:	a901      	add	r1, sp, #4
 801689c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80168a0:	9505      	str	r5, [sp, #20]
 80168a2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80168a6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80168aa:	f8ad 601e 	strh.w	r6, [sp, #30]
 80168ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80168b2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80168b6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80168ba:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80168be:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80168c2:	6803      	ldr	r3, [r0, #0]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	4798      	blx	r3
 80168c8:	b00b      	add	sp, #44	; 0x2c
 80168ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080168d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80168d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168d4:	b08a      	sub	sp, #40	; 0x28
 80168d6:	4698      	mov	r8, r3
 80168d8:	2300      	movs	r3, #0
 80168da:	4606      	mov	r6, r0
 80168dc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80168e0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80168e4:	2d0b      	cmp	r5, #11
 80168e6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80168ea:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80168ee:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80168f2:	9304      	str	r3, [sp, #16]
 80168f4:	d137      	bne.n	8016966 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80168f6:	2380      	movs	r3, #128	; 0x80
 80168f8:	f88d 0020 	strb.w	r0, [sp, #32]
 80168fc:	4630      	mov	r0, r6
 80168fe:	9203      	str	r2, [sp, #12]
 8016900:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016904:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016908:	f8ad 3018 	strh.w	r3, [sp, #24]
 801690c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016910:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016914:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016918:	f8ad 301c 	strh.w	r3, [sp, #28]
 801691c:	f7ff ff5c 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016920:	2c0b      	cmp	r4, #11
 8016922:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016926:	f8ad 701e 	strh.w	r7, [sp, #30]
 801692a:	bf94      	ite	ls
 801692c:	4b19      	ldrls	r3, [pc, #100]	; (8016994 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801692e:	2100      	movhi	r1, #0
 8016930:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8016934:	bf98      	it	ls
 8016936:	5d19      	ldrbls	r1, [r3, r4]
 8016938:	fb02 8307 	mla	r3, r2, r7, r8
 801693c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016940:	10c9      	asrs	r1, r1, #3
 8016942:	fb01 0003 	mla	r0, r1, r3, r0
 8016946:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801694a:	a901      	add	r1, sp, #4
 801694c:	9005      	str	r0, [sp, #20]
 801694e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016952:	2300      	movs	r3, #0
 8016954:	6870      	ldr	r0, [r6, #4]
 8016956:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801695a:	6803      	ldr	r3, [r0, #0]
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	4798      	blx	r3
 8016960:	b00a      	add	sp, #40	; 0x28
 8016962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016966:	2d02      	cmp	r5, #2
 8016968:	d109      	bne.n	801697e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801696a:	28ff      	cmp	r0, #255	; 0xff
 801696c:	d105      	bne.n	801697a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801696e:	f1bc 0f00 	cmp.w	ip, #0
 8016972:	bf14      	ite	ne
 8016974:	2340      	movne	r3, #64	; 0x40
 8016976:	2320      	moveq	r3, #32
 8016978:	e7be      	b.n	80168f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801697a:	2340      	movs	r3, #64	; 0x40
 801697c:	e7bc      	b.n	80168f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801697e:	28ff      	cmp	r0, #255	; 0xff
 8016980:	d105      	bne.n	801698e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016982:	f1bc 0f00 	cmp.w	ip, #0
 8016986:	bf14      	ite	ne
 8016988:	2304      	movne	r3, #4
 801698a:	2301      	moveq	r3, #1
 801698c:	e7b4      	b.n	80168f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801698e:	2304      	movs	r3, #4
 8016990:	e7b2      	b.n	80168f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016992:	bf00      	nop
 8016994:	08027d38 	.word	0x08027d38

08016998 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699c:	b08b      	sub	sp, #44	; 0x2c
 801699e:	461d      	mov	r5, r3
 80169a0:	2400      	movs	r4, #0
 80169a2:	4688      	mov	r8, r1
 80169a4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80169a8:	4693      	mov	fp, r2
 80169aa:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80169ae:	4607      	mov	r7, r0
 80169b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80169b4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80169b8:	9404      	str	r4, [sp, #16]
 80169ba:	bf14      	ite	ne
 80169bc:	2308      	movne	r3, #8
 80169be:	2302      	moveq	r3, #2
 80169c0:	fb05 b50a 	mla	r5, r5, sl, fp
 80169c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80169c8:	f7ff ff06 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80169cc:	2e0b      	cmp	r6, #11
 80169ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80169d2:	a901      	add	r1, sp, #4
 80169d4:	bf98      	it	ls
 80169d6:	4b13      	ldrls	r3, [pc, #76]	; (8016a24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80169d8:	f8ad a01e 	strh.w	sl, [sp, #30]
 80169dc:	bf98      	it	ls
 80169de:	5d9c      	ldrbls	r4, [r3, r6]
 80169e0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80169e4:	10e4      	asrs	r4, r4, #3
 80169e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80169ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80169ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80169f2:	fb04 0405 	mla	r4, r4, r5, r0
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80169fc:	2300      	movs	r3, #0
 80169fe:	9405      	str	r4, [sp, #20]
 8016a00:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a04:	f88d 9020 	strb.w	r9, [sp, #32]
 8016a08:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8016a0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a10:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8016a14:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8016a18:	6803      	ldr	r3, [r0, #0]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	4798      	blx	r3
 8016a1e:	b00b      	add	sp, #44	; 0x2c
 8016a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a24:	08027d38 	.word	0x08027d38

08016a28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2c:	461e      	mov	r6, r3
 8016a2e:	4b0a      	ldr	r3, [pc, #40]	; (8016a58 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8016a30:	460f      	mov	r7, r1
 8016a32:	4690      	mov	r8, r2
 8016a34:	881d      	ldrh	r5, [r3, #0]
 8016a36:	f7ed fcb5 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 8016a3a:	6803      	ldr	r3, [r0, #0]
 8016a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a3e:	4798      	blx	r3
 8016a40:	280b      	cmp	r0, #11
 8016a42:	bf96      	itet	ls
 8016a44:	4b05      	ldrls	r3, [pc, #20]	; (8016a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016a46:	2400      	movhi	r4, #0
 8016a48:	5c1c      	ldrbls	r4, [r3, r0]
 8016a4a:	fb08 7005 	mla	r0, r8, r5, r7
 8016a4e:	10e4      	asrs	r4, r4, #3
 8016a50:	fb04 6000 	mla	r0, r4, r0, r6
 8016a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a58:	24006d76 	.word	0x24006d76
 8016a5c:	08027d38 	.word	0x08027d38

08016a60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a62:	b08b      	sub	sp, #44	; 0x2c
 8016a64:	461f      	mov	r7, r3
 8016a66:	4604      	mov	r4, r0
 8016a68:	4616      	mov	r6, r2
 8016a6a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016a6e:	2500      	movs	r5, #0
 8016a70:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016a74:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016a78:	9504      	str	r5, [sp, #16]
 8016a7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016a7e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016a82:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016a86:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016a8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a8e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016a92:	f88d 3020 	strb.w	r3, [sp, #32]
 8016a96:	f7ff fe9f 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a9a:	463a      	mov	r2, r7
 8016a9c:	4631      	mov	r1, r6
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f7ff ffc1 	bl	8016a28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016aa6:	4b0e      	ldr	r3, [pc, #56]	; (8016ae0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016aa8:	9005      	str	r0, [sp, #20]
 8016aaa:	881b      	ldrh	r3, [r3, #0]
 8016aac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016ab0:	f7ed fc78 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 8016ab4:	6803      	ldr	r3, [r0, #0]
 8016ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ab8:	4798      	blx	r3
 8016aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016abc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016ac0:	a901      	add	r1, sp, #4
 8016ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016ac6:	9304      	str	r3, [sp, #16]
 8016ac8:	6860      	ldr	r0, [r4, #4]
 8016aca:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016ace:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016ad2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016ad6:	6803      	ldr	r3, [r0, #0]
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	4798      	blx	r3
 8016adc:	b00b      	add	sp, #44	; 0x2c
 8016ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae0:	24006d76 	.word	0x24006d76

08016ae4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae6:	b08d      	sub	sp, #52	; 0x34
 8016ae8:	2501      	movs	r5, #1
 8016aea:	4604      	mov	r4, r0
 8016aec:	466b      	mov	r3, sp
 8016aee:	9503      	str	r5, [sp, #12]
 8016af0:	e883 0006 	stmia.w	r3, {r1, r2}
 8016af4:	2300      	movs	r3, #0
 8016af6:	f8bd 6000 	ldrh.w	r6, [sp]
 8016afa:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016afe:	9306      	str	r3, [sp, #24]
 8016b00:	6803      	ldr	r3, [r0, #0]
 8016b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b04:	4798      	blx	r3
 8016b06:	463a      	mov	r2, r7
 8016b08:	4631      	mov	r1, r6
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f7ff ff8b 	bl	8016a28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016b14:	9004      	str	r0, [sp, #16]
 8016b16:	9307      	str	r3, [sp, #28]
 8016b18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016b1c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016b20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016b24:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016b28:	4b0e      	ldr	r3, [pc, #56]	; (8016b64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8016b2a:	881b      	ldrh	r3, [r3, #0]
 8016b2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016b30:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016b34:	f7ed fc36 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 8016b38:	6803      	ldr	r3, [r0, #0]
 8016b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3c:	4798      	blx	r3
 8016b3e:	23ff      	movs	r3, #255	; 0xff
 8016b40:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016b44:	a903      	add	r1, sp, #12
 8016b46:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016b4a:	6860      	ldr	r0, [r4, #4]
 8016b4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016b50:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016b54:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016b58:	6803      	ldr	r3, [r0, #0]
 8016b5a:	685b      	ldr	r3, [r3, #4]
 8016b5c:	4798      	blx	r3
 8016b5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016b60:	b00d      	add	sp, #52	; 0x34
 8016b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b64:	24006d76 	.word	0x24006d76

08016b68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6c:	b08c      	sub	sp, #48	; 0x30
 8016b6e:	461e      	mov	r6, r3
 8016b70:	2300      	movs	r3, #0
 8016b72:	4604      	mov	r4, r0
 8016b74:	466d      	mov	r5, sp
 8016b76:	9306      	str	r3, [sp, #24]
 8016b78:	6803      	ldr	r3, [r0, #0]
 8016b7a:	e885 0006 	stmia.w	r5, {r1, r2}
 8016b7e:	2501      	movs	r5, #1
 8016b80:	f8bd 7000 	ldrh.w	r7, [sp]
 8016b84:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016b88:	9503      	str	r5, [sp, #12]
 8016b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b8c:	4798      	blx	r3
 8016b8e:	4642      	mov	r2, r8
 8016b90:	4639      	mov	r1, r7
 8016b92:	4603      	mov	r3, r0
 8016b94:	4620      	mov	r0, r4
 8016b96:	f7ff ff47 	bl	8016a28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016b9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016b9e:	9004      	str	r0, [sp, #16]
 8016ba0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016ba8:	9607      	str	r6, [sp, #28]
 8016baa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016bae:	4b10      	ldr	r3, [pc, #64]	; (8016bf0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016bb0:	881b      	ldrh	r3, [r3, #0]
 8016bb2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016bb8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016bbc:	f7ed fbf2 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 8016bc0:	6803      	ldr	r3, [r0, #0]
 8016bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bc4:	4798      	blx	r3
 8016bc6:	23ff      	movs	r3, #255	; 0xff
 8016bc8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016bcc:	a903      	add	r1, sp, #12
 8016bce:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016bd2:	6860      	ldr	r0, [r4, #4]
 8016bd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016bd8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016bdc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016be0:	6803      	ldr	r3, [r0, #0]
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	4798      	blx	r3
 8016be6:	4630      	mov	r0, r6
 8016be8:	b00c      	add	sp, #48	; 0x30
 8016bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bee:	bf00      	nop
 8016bf0:	24006d76 	.word	0x24006d76

08016bf4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bf6:	b085      	sub	sp, #20
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	ac02      	add	r4, sp, #8
 8016bfc:	e884 0006 	stmia.w	r4, {r1, r2}
 8016c00:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016c04:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016c08:	f7ff fde6 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016c0c:	4631      	mov	r1, r6
 8016c0e:	4603      	mov	r3, r0
 8016c10:	463a      	mov	r2, r7
 8016c12:	4628      	mov	r0, r5
 8016c14:	f7ff ff08 	bl	8016a28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016c18:	4a05      	ldr	r2, [pc, #20]	; (8016c30 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016c1a:	682b      	ldr	r3, [r5, #0]
 8016c1c:	8812      	ldrh	r2, [r2, #0]
 8016c1e:	9200      	str	r2, [sp, #0]
 8016c20:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8016c22:	4603      	mov	r3, r0
 8016c24:	4628      	mov	r0, r5
 8016c26:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016c2a:	47b0      	blx	r6
 8016c2c:	b005      	add	sp, #20
 8016c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c30:	24006d76 	.word	0x24006d76

08016c34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016c34:	b570      	push	{r4, r5, r6, lr}
 8016c36:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	b19b      	cbz	r3, 8016c66 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016c3e:	2002      	movs	r0, #2
 8016c40:	f7ea ffa0 	bl	8001b84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016c44:	2300      	movs	r3, #0
 8016c46:	4620      	mov	r0, r4
 8016c48:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8016c4c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8016c50:	6823      	ldr	r3, [r4, #0]
 8016c52:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8016c56:	f7ff fdbf 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016c5a:	4601      	mov	r1, r0
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	462b      	mov	r3, r5
 8016c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c64:	4718      	bx	r3
 8016c66:	bd70      	pop	{r4, r5, r6, pc}

08016c68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016c68:	b538      	push	{r3, r4, r5, lr}
 8016c6a:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8016c6e:	4604      	mov	r4, r0
 8016c70:	460d      	mov	r5, r1
 8016c72:	428b      	cmp	r3, r1
 8016c74:	d006      	beq.n	8016c84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016c76:	6803      	ldr	r3, [r0, #0]
 8016c78:	b929      	cbnz	r1, 8016c86 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016c7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016c7e:	4798      	blx	r3
 8016c80:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8016c84:	bd38      	pop	{r3, r4, r5, pc}
 8016c86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016c8a:	e7f8      	b.n	8016c7e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016c8c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016c8c:	4b0d      	ldr	r3, [pc, #52]	; (8016cc4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	4604      	mov	r4, r0
 8016c94:	b95b      	cbnz	r3, 8016cae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016c96:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016c9a:	2b02      	cmp	r3, #2
 8016c9c:	d007      	beq.n	8016cae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016c9e:	6840      	ldr	r0, [r0, #4]
 8016ca0:	f000 f90e 	bl	8016ec0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016ca4:	b118      	cbz	r0, 8016cae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016ca6:	6862      	ldr	r2, [r4, #4]
 8016ca8:	7a53      	ldrb	r3, [r2, #9]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d0fc      	beq.n	8016ca8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016cae:	f7eb fa65 	bl	800217c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016cb2:	4620      	mov	r0, r4
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	f7ff ffd7 	bl	8016c68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016cba:	4620      	mov	r0, r4
 8016cbc:	f7ff fd8c 	bl	80167d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016cc0:	bd10      	pop	{r4, pc}
 8016cc2:	bf00      	nop
 8016cc4:	24006d7a 	.word	0x24006d7a

08016cc8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016cc8:	4770      	bx	lr

08016cca <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016cca:	2000      	movs	r0, #0
 8016ccc:	4770      	bx	lr

08016cce <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016cce:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016cd2:	1a13      	subs	r3, r2, r0
 8016cd4:	4258      	negs	r0, r3
 8016cd6:	4158      	adcs	r0, r3
 8016cd8:	4770      	bx	lr

08016cda <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016cda:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016cde:	1a9b      	subs	r3, r3, r2
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	bfdc      	itt	le
 8016ce4:	6882      	ldrle	r2, [r0, #8]
 8016ce6:	189b      	addle	r3, r3, r2
 8016ce8:	2b01      	cmp	r3, #1
 8016cea:	bfcc      	ite	gt
 8016cec:	2000      	movgt	r0, #0
 8016cee:	2001      	movle	r0, #1
 8016cf0:	4770      	bx	lr

08016cf2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016cf2:	6902      	ldr	r2, [r0, #16]
 8016cf4:	6843      	ldr	r3, [r0, #4]
 8016cf6:	2024      	movs	r0, #36	; 0x24
 8016cf8:	fb00 3002 	mla	r0, r0, r2, r3
 8016cfc:	4770      	bx	lr

08016cfe <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016cfe:	6803      	ldr	r3, [r0, #0]
 8016d00:	691b      	ldr	r3, [r3, #16]
 8016d02:	4718      	bx	r3

08016d04 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016d04:	2301      	movs	r3, #1
 8016d06:	b570      	push	{r4, r5, r6, lr}
 8016d08:	7203      	strb	r3, [r0, #8]
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	6840      	ldr	r0, [r0, #4]
 8016d0e:	6803      	ldr	r3, [r0, #0]
 8016d10:	699b      	ldr	r3, [r3, #24]
 8016d12:	4798      	blx	r3
 8016d14:	6803      	ldr	r3, [r0, #0]
 8016d16:	4605      	mov	r5, r0
 8016d18:	2b40      	cmp	r3, #64	; 0x40
 8016d1a:	d00c      	beq.n	8016d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016d1c:	d810      	bhi.n	8016d40 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016d1e:	2b04      	cmp	r3, #4
 8016d20:	d01d      	beq.n	8016d5e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8016d22:	d804      	bhi.n	8016d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8016d24:	2b01      	cmp	r3, #1
 8016d26:	d006      	beq.n	8016d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016d28:	2b02      	cmp	r3, #2
 8016d2a:	d02c      	beq.n	8016d86 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016d2c:	bd70      	pop	{r4, r5, r6, pc}
 8016d2e:	2b08      	cmp	r3, #8
 8016d30:	d01d      	beq.n	8016d6e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8016d32:	2b20      	cmp	r3, #32
 8016d34:	d1fa      	bne.n	8016d2c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	4620      	mov	r0, r4
 8016d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d3c:	4798      	blx	r3
 8016d3e:	e013      	b.n	8016d68 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d44:	d0f7      	beq.n	8016d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016d46:	d804      	bhi.n	8016d52 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8016d48:	2b80      	cmp	r3, #128	; 0x80
 8016d4a:	d0f4      	beq.n	8016d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d50:	e7f0      	b.n	8016d34 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d56:	d0ee      	beq.n	8016d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016d5c:	e7e5      	b.n	8016d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016d5e:	6823      	ldr	r3, [r4, #0]
 8016d60:	7f01      	ldrb	r1, [r0, #28]
 8016d62:	4620      	mov	r0, r4
 8016d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d66:	4798      	blx	r3
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d6c:	e006      	b.n	8016d7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	7f01      	ldrb	r1, [r0, #28]
 8016d72:	4620      	mov	r0, r4
 8016d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d76:	4798      	blx	r3
 8016d78:	6823      	ldr	r3, [r4, #0]
 8016d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	4620      	mov	r0, r4
 8016d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d84:	4718      	bx	r3
 8016d86:	6823      	ldr	r3, [r4, #0]
 8016d88:	4620      	mov	r0, r4
 8016d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d8c:	4798      	blx	r3
 8016d8e:	e7f3      	b.n	8016d78 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016d90 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016d90:	4770      	bx	lr

08016d92 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016d92:	4770      	bx	lr

08016d94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016d94:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016d98:	b510      	push	{r4, lr}
 8016d9a:	1ad2      	subs	r2, r2, r3
 8016d9c:	2a00      	cmp	r2, #0
 8016d9e:	bfdc      	itt	le
 8016da0:	6884      	ldrle	r4, [r0, #8]
 8016da2:	1912      	addle	r2, r2, r4
 8016da4:	2a01      	cmp	r2, #1
 8016da6:	dd16      	ble.n	8016dd6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016da8:	6842      	ldr	r2, [r0, #4]
 8016daa:	2424      	movs	r4, #36	; 0x24
 8016dac:	fb04 2303 	mla	r3, r4, r3, r2
 8016db0:	f101 0220 	add.w	r2, r1, #32
 8016db4:	f851 4b04 	ldr.w	r4, [r1], #4
 8016db8:	4291      	cmp	r1, r2
 8016dba:	f843 4b04 	str.w	r4, [r3], #4
 8016dbe:	d1f9      	bne.n	8016db4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016dc0:	780a      	ldrb	r2, [r1, #0]
 8016dc2:	701a      	strb	r2, [r3, #0]
 8016dc4:	68c3      	ldr	r3, [r0, #12]
 8016dc6:	6882      	ldr	r2, [r0, #8]
 8016dc8:	f3bf 8f5b 	dmb	ish
 8016dcc:	3301      	adds	r3, #1
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	bfd8      	it	le
 8016dd2:	1a9b      	suble	r3, r3, r2
 8016dd4:	60c3      	str	r3, [r0, #12]
 8016dd6:	bd10      	pop	{r4, pc}

08016dd8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016dd8:	6903      	ldr	r3, [r0, #16]
 8016dda:	6882      	ldr	r2, [r0, #8]
 8016ddc:	f3bf 8f5b 	dmb	ish
 8016de0:	3301      	adds	r3, #1
 8016de2:	429a      	cmp	r2, r3
 8016de4:	bfd8      	it	le
 8016de6:	1a9b      	suble	r3, r3, r2
 8016de8:	6103      	str	r3, [r0, #16]
 8016dea:	4770      	bx	lr

08016dec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	4604      	mov	r4, r0
 8016df0:	460e      	mov	r6, r1
 8016df2:	6860      	ldr	r0, [r4, #4]
 8016df4:	6803      	ldr	r3, [r0, #0]
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	4798      	blx	r3
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d1f9      	bne.n	8016df2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016dfe:	4d0d      	ldr	r5, [pc, #52]	; (8016e34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016e00:	6828      	ldr	r0, [r5, #0]
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e06:	4798      	blx	r3
 8016e08:	f7eb f9d2 	bl	80021b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016e0c:	6828      	ldr	r0, [r5, #0]
 8016e0e:	2101      	movs	r1, #1
 8016e10:	f7ff ff2a 	bl	8016c68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016e14:	6860      	ldr	r0, [r4, #4]
 8016e16:	4631      	mov	r1, r6
 8016e18:	6803      	ldr	r3, [r0, #0]
 8016e1a:	689b      	ldr	r3, [r3, #8]
 8016e1c:	4798      	blx	r3
 8016e1e:	6823      	ldr	r3, [r4, #0]
 8016e20:	4620      	mov	r0, r4
 8016e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e24:	4798      	blx	r3
 8016e26:	6828      	ldr	r0, [r5, #0]
 8016e28:	6803      	ldr	r3, [r0, #0]
 8016e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e30:	4718      	bx	r3
 8016e32:	bf00      	nop
 8016e34:	24006d7c 	.word	0x24006d7c

08016e38 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016e38:	b508      	push	{r3, lr}
 8016e3a:	f7eb f99f 	bl	800217c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016e42:	f7eb b9a9 	b.w	8002198 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016e46 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016e46:	b510      	push	{r4, lr}
 8016e48:	4604      	mov	r4, r0
 8016e4a:	6840      	ldr	r0, [r0, #4]
 8016e4c:	6803      	ldr	r3, [r0, #0]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	4798      	blx	r3
 8016e52:	b948      	cbnz	r0, 8016e68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016e54:	7a63      	ldrb	r3, [r4, #9]
 8016e56:	b13b      	cbz	r3, 8016e68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016e58:	7a23      	ldrb	r3, [r4, #8]
 8016e5a:	b92b      	cbnz	r3, 8016e68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016e5c:	6823      	ldr	r3, [r4, #0]
 8016e5e:	4620      	mov	r0, r4
 8016e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e66:	4718      	bx	r3
 8016e68:	bd10      	pop	{r4, pc}

08016e6a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016e6a:	b570      	push	{r4, r5, r6, lr}
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	6840      	ldr	r0, [r0, #4]
 8016e70:	6803      	ldr	r3, [r0, #0]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	4798      	blx	r3
 8016e76:	4605      	mov	r5, r0
 8016e78:	b930      	cbnz	r0, 8016e88 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016e7a:	7a23      	ldrb	r3, [r4, #8]
 8016e7c:	b123      	cbz	r3, 8016e88 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016e7e:	6860      	ldr	r0, [r4, #4]
 8016e80:	6803      	ldr	r3, [r0, #0]
 8016e82:	695b      	ldr	r3, [r3, #20]
 8016e84:	4798      	blx	r3
 8016e86:	7225      	strb	r5, [r4, #8]
 8016e88:	6860      	ldr	r0, [r4, #4]
 8016e8a:	6803      	ldr	r3, [r0, #0]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	4798      	blx	r3
 8016e90:	b928      	cbnz	r0, 8016e9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	4620      	mov	r0, r4
 8016e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e9c:	4718      	bx	r3
 8016e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ea2:	f7eb b991 	b.w	80021c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08016ea8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016ea8:	b510      	push	{r4, lr}
 8016eaa:	6082      	str	r2, [r0, #8]
 8016eac:	2200      	movs	r2, #0
 8016eae:	4c03      	ldr	r4, [pc, #12]	; (8016ebc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016eb0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016eb4:	e9c0 4100 	strd	r4, r1, [r0]
 8016eb8:	bd10      	pop	{r4, pc}
 8016eba:	bf00      	nop
 8016ebc:	08027e74 	.word	0x08027e74

08016ec0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016ec0:	6840      	ldr	r0, [r0, #4]
 8016ec2:	6803      	ldr	r3, [r0, #0]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	4718      	bx	r3

08016ec8 <_ZN8touchgfx8TextArea8setWidthEs>:
 8016ec8:	b530      	push	{r4, r5, lr}
 8016eca:	b085      	sub	sp, #20
 8016ecc:	6803      	ldr	r3, [r0, #0]
 8016ece:	4604      	mov	r4, r0
 8016ed0:	8101      	strh	r1, [r0, #8]
 8016ed2:	466d      	mov	r5, sp
 8016ed4:	4601      	mov	r1, r0
 8016ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016eda:	343c      	adds	r4, #60	; 0x3c
 8016edc:	4628      	mov	r0, r5
 8016ede:	4798      	blx	r3
 8016ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016ee8:	b005      	add	sp, #20
 8016eea:	bd30      	pop	{r4, r5, pc}

08016eec <_ZN8touchgfx8TextArea9setHeightEs>:
 8016eec:	b530      	push	{r4, r5, lr}
 8016eee:	b085      	sub	sp, #20
 8016ef0:	6803      	ldr	r3, [r0, #0]
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	8141      	strh	r1, [r0, #10]
 8016ef6:	466d      	mov	r5, sp
 8016ef8:	4601      	mov	r1, r0
 8016efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016efe:	343c      	adds	r4, #60	; 0x3c
 8016f00:	4628      	mov	r0, r5
 8016f02:	4798      	blx	r3
 8016f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016f0c:	b005      	add	sp, #20
 8016f0e:	bd30      	pop	{r4, r5, pc}

08016f10 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016f10:	2200      	movs	r2, #0
 8016f12:	8002      	strh	r2, [r0, #0]
 8016f14:	8042      	strh	r2, [r0, #2]
 8016f16:	8082      	strh	r2, [r0, #4]
 8016f18:	80c2      	strh	r2, [r0, #6]
 8016f1a:	4770      	bx	lr

08016f1c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	6803      	ldr	r3, [r0, #0]
 8016f20:	4604      	mov	r4, r0
 8016f22:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016f24:	460d      	mov	r5, r1
 8016f26:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8016f28:	4b08      	ldr	r3, [pc, #32]	; (8016f4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016f30:	4b07      	ldr	r3, [pc, #28]	; (8016f50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016f38:	6803      	ldr	r3, [r0, #0]
 8016f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f3c:	4798      	blx	r3
 8016f3e:	1a29      	subs	r1, r5, r0
 8016f40:	4633      	mov	r3, r6
 8016f42:	4620      	mov	r0, r4
 8016f44:	b209      	sxth	r1, r1
 8016f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f4a:	4718      	bx	r3
 8016f4c:	24006dcc 	.word	0x24006dcc
 8016f50:	24006dd4 	.word	0x24006dd4

08016f54 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	6803      	ldr	r3, [r0, #0]
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4615      	mov	r5, r2
 8016f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f5e:	4798      	blx	r3
 8016f60:	6823      	ldr	r3, [r4, #0]
 8016f62:	4629      	mov	r1, r5
 8016f64:	4620      	mov	r0, r4
 8016f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f6c:	4718      	bx	r3

08016f6e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8016f6e:	2000      	movs	r0, #0
 8016f70:	4770      	bx	lr

08016f72 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8016f72:	2000      	movs	r0, #0
 8016f74:	4770      	bx	lr
	...

08016f78 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8016f78:	4b07      	ldr	r3, [pc, #28]	; (8016f98 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8016f7a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016f7c:	881b      	ldrh	r3, [r3, #0]
 8016f7e:	4293      	cmp	r3, r2
 8016f80:	bf81      	itttt	hi
 8016f82:	4b06      	ldrhi	r3, [pc, #24]	; (8016f9c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8016f84:	681b      	ldrhi	r3, [r3, #0]
 8016f86:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8016f8a:	7858      	ldrbhi	r0, [r3, #1]
 8016f8c:	bf8c      	ite	hi
 8016f8e:	f000 0003 	andhi.w	r0, r0, #3
 8016f92:	2000      	movls	r0, #0
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop
 8016f98:	24006dd0 	.word	0x24006dd0
 8016f9c:	24006dcc 	.word	0x24006dcc

08016fa0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8016fa0:	4b11      	ldr	r3, [pc, #68]	; (8016fe8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8016fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016fa8:	4604      	mov	r4, r0
 8016faa:	881b      	ldrh	r3, [r3, #0]
 8016fac:	428b      	cmp	r3, r1
 8016fae:	d918      	bls.n	8016fe2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016fb0:	6803      	ldr	r3, [r0, #0]
 8016fb2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8016fb4:	4b0d      	ldr	r3, [pc, #52]	; (8016fec <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8016fb6:	6818      	ldr	r0, [r3, #0]
 8016fb8:	f7f0 fbfa 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 8016fbc:	6823      	ldr	r3, [r4, #0]
 8016fbe:	4606      	mov	r6, r0
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016fc4:	4798      	blx	r3
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	4607      	mov	r7, r0
 8016fca:	4620      	mov	r0, r4
 8016fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016fd0:	4798      	blx	r3
 8016fd2:	463a      	mov	r2, r7
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	4631      	mov	r1, r6
 8016fd8:	4620      	mov	r0, r4
 8016fda:	46ac      	mov	ip, r5
 8016fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe0:	4760      	bx	ip
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fe8:	24006dd0 	.word	0x24006dd0
 8016fec:	24006dd8 	.word	0x24006dd8

08016ff0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016ff0:	4b18      	ldr	r3, [pc, #96]	; (8017054 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016ff2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ff6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016ff8:	4604      	mov	r4, r0
 8016ffa:	881b      	ldrh	r3, [r3, #0]
 8016ffc:	428b      	cmp	r3, r1
 8016ffe:	d926      	bls.n	801704e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017000:	4b15      	ldr	r3, [pc, #84]	; (8017058 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017008:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801700c:	4b13      	ldr	r3, [pc, #76]	; (801705c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801700e:	7855      	ldrb	r5, [r2, #1]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017016:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801701a:	6833      	ldr	r3, [r6, #0]
 801701c:	69df      	ldr	r7, [r3, #28]
 801701e:	4b10      	ldr	r3, [pc, #64]	; (8017060 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017020:	6818      	ldr	r0, [r3, #0]
 8017022:	f7f0 fbc5 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	4680      	mov	r8, r0
 801702a:	4620      	mov	r0, r4
 801702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801702e:	4798      	blx	r3
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	4681      	mov	r9, r0
 8017034:	4620      	mov	r0, r4
 8017036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801703a:	4798      	blx	r3
 801703c:	464b      	mov	r3, r9
 801703e:	9000      	str	r0, [sp, #0]
 8017040:	4642      	mov	r2, r8
 8017042:	4629      	mov	r1, r5
 8017044:	4630      	mov	r0, r6
 8017046:	47b8      	blx	r7
 8017048:	b003      	add	sp, #12
 801704a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801704e:	2000      	movs	r0, #0
 8017050:	e7fa      	b.n	8017048 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017052:	bf00      	nop
 8017054:	24006dd0 	.word	0x24006dd0
 8017058:	24006dcc 	.word	0x24006dcc
 801705c:	24006dd4 	.word	0x24006dd4
 8017060:	24006dd8 	.word	0x24006dd8

08017064 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017064:	b40e      	push	{r1, r2, r3}
 8017066:	4b30      	ldr	r3, [pc, #192]	; (8017128 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801706c:	881a      	ldrh	r2, [r3, #0]
 801706e:	b09d      	sub	sp, #116	; 0x74
 8017070:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017072:	4604      	mov	r4, r0
 8017074:	429a      	cmp	r2, r3
 8017076:	d954      	bls.n	8017122 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017078:	aa26      	add	r2, sp, #152	; 0x98
 801707a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801712c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801707e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017130 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017082:	9202      	str	r2, [sp, #8]
 8017084:	f8d9 2000 	ldr.w	r2, [r9]
 8017088:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801708c:	f8d8 3000 	ldr.w	r3, [r8]
 8017090:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	4628      	mov	r0, r5
 8017098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801709a:	4798      	blx	r3
 801709c:	4606      	mov	r6, r0
 801709e:	b207      	sxth	r7, r0
 80170a0:	a803      	add	r0, sp, #12
 80170a2:	f003 fd8c 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 80170a6:	682b      	ldr	r3, [r5, #0]
 80170a8:	4628      	mov	r0, r5
 80170aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170ac:	4798      	blx	r3
 80170ae:	682b      	ldr	r3, [r5, #0]
 80170b0:	4682      	mov	sl, r0
 80170b2:	4628      	mov	r0, r5
 80170b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170b6:	4798      	blx	r3
 80170b8:	4653      	mov	r3, sl
 80170ba:	9000      	str	r0, [sp, #0]
 80170bc:	a803      	add	r0, sp, #12
 80170be:	9a02      	ldr	r2, [sp, #8]
 80170c0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80170c2:	f003 fdd7 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170c6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80170c8:	f8d9 3000 	ldr.w	r3, [r9]
 80170cc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80170d0:	8925      	ldrh	r5, [r4, #8]
 80170d2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80170d6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80170da:	eba5 050c 	sub.w	r5, r5, ip
 80170de:	784a      	ldrb	r2, [r1, #1]
 80170e0:	f8d8 3000 	ldr.w	r3, [r8]
 80170e4:	b22d      	sxth	r5, r5
 80170e6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80170ea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80170ee:	9500      	str	r5, [sp, #0]
 80170f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80170f4:	a803      	add	r0, sp, #12
 80170f6:	f001 fbb5 	bl	8018864 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80170fa:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80170fe:	b203      	sxth	r3, r0
 8017100:	18b9      	adds	r1, r7, r2
 8017102:	2900      	cmp	r1, #0
 8017104:	dd0b      	ble.n	801711e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017106:	3b01      	subs	r3, #1
 8017108:	fb13 f302 	smulbb	r3, r3, r2
 801710c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017110:	b21f      	sxth	r7, r3
 8017112:	4638      	mov	r0, r7
 8017114:	b01d      	add	sp, #116	; 0x74
 8017116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801711a:	b003      	add	sp, #12
 801711c:	4770      	bx	lr
 801711e:	2b00      	cmp	r3, #0
 8017120:	dcf7      	bgt.n	8017112 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017122:	2700      	movs	r7, #0
 8017124:	e7f5      	b.n	8017112 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017126:	bf00      	nop
 8017128:	24006dd0 	.word	0x24006dd0
 801712c:	24006dcc 	.word	0x24006dcc
 8017130:	24006dd4 	.word	0x24006dd4

08017134 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017134:	4bbd      	ldr	r3, [pc, #756]	; (801742c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713a:	460c      	mov	r4, r1
 801713c:	881b      	ldrh	r3, [r3, #0]
 801713e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8017140:	b0a9      	sub	sp, #164	; 0xa4
 8017142:	4680      	mov	r8, r0
 8017144:	428b      	cmp	r3, r1
 8017146:	d809      	bhi.n	801715c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017148:	2300      	movs	r3, #0
 801714a:	f04f 32ff 	mov.w	r2, #4294967295
 801714e:	6083      	str	r3, [r0, #8]
 8017150:	e9c0 3200 	strd	r3, r2, [r0]
 8017154:	4640      	mov	r0, r8
 8017156:	b029      	add	sp, #164	; 0xa4
 8017158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801715c:	4eb4      	ldr	r6, [pc, #720]	; (8017430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801715e:	6833      	ldr	r3, [r6, #0]
 8017160:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017164:	4bb3      	ldr	r3, [pc, #716]	; (8017434 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801716c:	4bb2      	ldr	r3, [pc, #712]	; (8017438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801716e:	6818      	ldr	r0, [r3, #0]
 8017170:	f7f0 fb1e 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 8017174:	682b      	ldr	r3, [r5, #0]
 8017176:	4681      	mov	r9, r0
 8017178:	4628      	mov	r0, r5
 801717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801717c:	4798      	blx	r3
 801717e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8017180:	b203      	sxth	r3, r0
 8017182:	4682      	mov	sl, r0
 8017184:	4407      	add	r7, r0
 8017186:	a80f      	add	r0, sp, #60	; 0x3c
 8017188:	9304      	str	r3, [sp, #16]
 801718a:	b2bb      	uxth	r3, r7
 801718c:	9303      	str	r3, [sp, #12]
 801718e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8017192:	2b00      	cmp	r3, #0
 8017194:	f040 80a5 	bne.w	80172e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8017198:	f003 fd11 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	4628      	mov	r0, r5
 80171a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171a2:	4798      	blx	r3
 80171a4:	682b      	ldr	r3, [r5, #0]
 80171a6:	4606      	mov	r6, r0
 80171a8:	4628      	mov	r0, r5
 80171aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ac:	4798      	blx	r3
 80171ae:	6823      	ldr	r3, [r4, #0]
 80171b0:	4607      	mov	r7, r0
 80171b2:	4620      	mov	r0, r4
 80171b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80171b6:	4798      	blx	r3
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	4683      	mov	fp, r0
 80171bc:	4620      	mov	r0, r4
 80171be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80171c2:	4798      	blx	r3
 80171c4:	463b      	mov	r3, r7
 80171c6:	4649      	mov	r1, r9
 80171c8:	4632      	mov	r2, r6
 80171ca:	2600      	movs	r6, #0
 80171cc:	e9cd b000 	strd	fp, r0, [sp]
 80171d0:	a80f      	add	r0, sp, #60	; 0x3c
 80171d2:	4637      	mov	r7, r6
 80171d4:	f003 fd63 	bl	801ac9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80171d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80171dc:	f8df b250 	ldr.w	fp, [pc, #592]	; 8017430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80171e0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80171e4:	bf0c      	ite	eq
 80171e6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80171ea:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80171ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80171f0:	4629      	mov	r1, r5
 80171f2:	f8db 3000 	ldr.w	r3, [fp]
 80171f6:	a80f      	add	r0, sp, #60	; 0x3c
 80171f8:	3701      	adds	r7, #1
 80171fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80171fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017202:	b2bf      	uxth	r7, r7
 8017204:	785b      	ldrb	r3, [r3, #1]
 8017206:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801720a:	f001 f846 	bl	801829a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801720e:	9b03      	ldr	r3, [sp, #12]
 8017210:	4286      	cmp	r6, r0
 8017212:	eba9 0903 	sub.w	r9, r9, r3
 8017216:	bfb8      	it	lt
 8017218:	4606      	movlt	r6, r0
 801721a:	a80f      	add	r0, sp, #60	; 0x3c
 801721c:	fa0f f989 	sxth.w	r9, r9
 8017220:	b236      	sxth	r6, r6
 8017222:	f003 fcf3 	bl	801ac0c <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017226:	b918      	cbnz	r0, 8017230 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017228:	7a2b      	ldrb	r3, [r5, #8]
 801722a:	444b      	add	r3, r9
 801722c:	2b00      	cmp	r3, #0
 801722e:	dcde      	bgt.n	80171ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8017230:	9b03      	ldr	r3, [sp, #12]
 8017232:	4620      	mov	r0, r4
 8017234:	9a04      	ldr	r2, [sp, #16]
 8017236:	fb13 f707 	smulbb	r7, r3, r7
 801723a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801723c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8017240:	1aff      	subs	r7, r7, r3
 8017242:	b2bf      	uxth	r7, r7
 8017244:	b23b      	sxth	r3, r7
 8017246:	429a      	cmp	r2, r3
 8017248:	bfa8      	it	ge
 801724a:	4657      	movge	r7, sl
 801724c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017250:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	444f      	add	r7, r9
 8017258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801725a:	bf08      	it	eq
 801725c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8017260:	fa1f f987 	uxth.w	r9, r7
 8017264:	bf18      	it	ne
 8017266:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801726a:	4798      	blx	r3
 801726c:	2801      	cmp	r0, #1
 801726e:	fa0f f789 	sxth.w	r7, r9
 8017272:	b2b3      	uxth	r3, r6
 8017274:	f000 80e2 	beq.w	801743c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8017278:	2802      	cmp	r0, #2
 801727a:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801727e:	f000 80e3 	beq.w	8017448 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8017282:	7aea      	ldrb	r2, [r5, #11]
 8017284:	b236      	sxth	r6, r6
 8017286:	7b2d      	ldrb	r5, [r5, #12]
 8017288:	1ab6      	subs	r6, r6, r2
 801728a:	442a      	add	r2, r5
 801728c:	fa1f fa86 	uxth.w	sl, r6
 8017290:	4413      	add	r3, r2
 8017292:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8017296:	fa0f fb8a 	sxth.w	fp, sl
 801729a:	b29b      	uxth	r3, r3
 801729c:	2a02      	cmp	r2, #2
 801729e:	b21e      	sxth	r6, r3
 80172a0:	f000 80d6 	beq.w	8017450 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80172a4:	2a03      	cmp	r2, #3
 80172a6:	f000 80de 	beq.w	8017466 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80172aa:	2a01      	cmp	r2, #1
 80172ac:	f040 80e6 	bne.w	801747c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80172b0:	8925      	ldrh	r5, [r4, #8]
 80172b2:	4633      	mov	r3, r6
 80172b4:	463e      	mov	r6, r7
 80172b6:	eba5 0909 	sub.w	r9, r5, r9
 80172ba:	461f      	mov	r7, r3
 80172bc:	465d      	mov	r5, fp
 80172be:	fa0f fb89 	sxth.w	fp, r9
 80172c2:	4b5d      	ldr	r3, [pc, #372]	; (8017438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80172c4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80172c6:	6818      	ldr	r0, [r3, #0]
 80172c8:	f7f0 fa72 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 80172cc:	f8a8 b000 	strh.w	fp, [r8]
 80172d0:	f8a8 5002 	strh.w	r5, [r8, #2]
 80172d4:	f8a8 6004 	strh.w	r6, [r8, #4]
 80172d8:	f8a8 7006 	strh.w	r7, [r8, #6]
 80172dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80172e0:	e738      	b.n	8017154 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80172e2:	f003 fc6c 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 80172e6:	682b      	ldr	r3, [r5, #0]
 80172e8:	4628      	mov	r0, r5
 80172ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172ec:	4798      	blx	r3
 80172ee:	682b      	ldr	r3, [r5, #0]
 80172f0:	4607      	mov	r7, r0
 80172f2:	4628      	mov	r0, r5
 80172f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172f6:	4798      	blx	r3
 80172f8:	6823      	ldr	r3, [r4, #0]
 80172fa:	4683      	mov	fp, r0
 80172fc:	4620      	mov	r0, r4
 80172fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017300:	4798      	blx	r3
 8017302:	6822      	ldr	r2, [r4, #0]
 8017304:	9005      	str	r0, [sp, #20]
 8017306:	4620      	mov	r0, r4
 8017308:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801730c:	4790      	blx	r2
 801730e:	9b05      	ldr	r3, [sp, #20]
 8017310:	463a      	mov	r2, r7
 8017312:	4649      	mov	r1, r9
 8017314:	9001      	str	r0, [sp, #4]
 8017316:	a80f      	add	r0, sp, #60	; 0x3c
 8017318:	9300      	str	r3, [sp, #0]
 801731a:	465b      	mov	r3, fp
 801731c:	f003 fcbf 	bl	801ac9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017320:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017324:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8017328:	af0f      	add	r7, sp, #60	; 0x3c
 801732a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801732e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017332:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017334:	bf0a      	itet	eq
 8017336:	464a      	moveq	r2, r9
 8017338:	461a      	movne	r2, r3
 801733a:	4699      	moveq	r9, r3
 801733c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017340:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8017344:	1ad2      	subs	r2, r2, r3
 8017346:	6833      	ldr	r3, [r6, #0]
 8017348:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801734c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017350:	7859      	ldrb	r1, [r3, #1]
 8017352:	2300      	movs	r3, #0
 8017354:	9707      	str	r7, [sp, #28]
 8017356:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801735a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801735e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017362:	f88d 1020 	strb.w	r1, [sp, #32]
 8017366:	9509      	str	r5, [sp, #36]	; 0x24
 8017368:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801736c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8017370:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8017374:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017378:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801737c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017380:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017384:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017388:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801738c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017390:	b350      	cbz	r0, 80173e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017392:	682b      	ldr	r3, [r5, #0]
 8017394:	4628      	mov	r0, r5
 8017396:	695b      	ldr	r3, [r3, #20]
 8017398:	4798      	blx	r3
 801739a:	4607      	mov	r7, r0
 801739c:	b320      	cbz	r0, 80173e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801739e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173a0:	4639      	mov	r1, r7
 80173a2:	6803      	ldr	r3, [r0, #0]
 80173a4:	68db      	ldr	r3, [r3, #12]
 80173a6:	4798      	blx	r3
 80173a8:	4606      	mov	r6, r0
 80173aa:	b1e8      	cbz	r0, 80173e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80173ac:	7b43      	ldrb	r3, [r0, #13]
 80173ae:	7a82      	ldrb	r2, [r0, #10]
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173b6:	4313      	orrs	r3, r2
 80173b8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80173bc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80173c0:	2b06      	cmp	r3, #6
 80173c2:	d111      	bne.n	80173e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80173c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173c6:	4632      	mov	r2, r6
 80173c8:	4639      	mov	r1, r7
 80173ca:	6803      	ldr	r3, [r0, #0]
 80173cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173ce:	4798      	blx	r3
 80173d0:	7b73      	ldrb	r3, [r6, #13]
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80173d8:	7ab3      	ldrb	r3, [r6, #10]
 80173da:	4313      	orrs	r3, r2
 80173dc:	4418      	add	r0, r3
 80173de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80173e2:	4418      	add	r0, r3
 80173e4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80173e8:	2600      	movs	r6, #0
 80173ea:	4637      	mov	r7, r6
 80173ec:	a806      	add	r0, sp, #24
 80173ee:	3701      	adds	r7, #1
 80173f0:	f001 f935 	bl	801865e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80173f4:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80173f8:	9b03      	ldr	r3, [sp, #12]
 80173fa:	b2bf      	uxth	r7, r7
 80173fc:	4286      	cmp	r6, r0
 80173fe:	eba9 0903 	sub.w	r9, r9, r3
 8017402:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017406:	bfb8      	it	lt
 8017408:	4606      	movlt	r6, r0
 801740a:	fa0f f989 	sxth.w	r9, r9
 801740e:	b236      	sxth	r6, r6
 8017410:	2b00      	cmp	r3, #0
 8017412:	f43f af0d 	beq.w	8017230 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017416:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801741a:	2b00      	cmp	r3, #0
 801741c:	f47f af08 	bne.w	8017230 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017420:	7a2b      	ldrb	r3, [r5, #8]
 8017422:	444b      	add	r3, r9
 8017424:	2b00      	cmp	r3, #0
 8017426:	dce1      	bgt.n	80173ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8017428:	e702      	b.n	8017230 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801742a:	bf00      	nop
 801742c:	24006dd0 	.word	0x24006dd0
 8017430:	24006dcc 	.word	0x24006dcc
 8017434:	24006dd4 	.word	0x24006dd4
 8017438:	24006dd8 	.word	0x24006dd8
 801743c:	ebaa 0606 	sub.w	r6, sl, r6
 8017440:	2002      	movs	r0, #2
 8017442:	fb96 f6f0 	sdiv	r6, r6, r0
 8017446:	e71c      	b.n	8017282 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017448:	441e      	add	r6, r3
 801744a:	ebaa 0606 	sub.w	r6, sl, r6
 801744e:	e718      	b.n	8017282 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017450:	8925      	ldrh	r5, [r4, #8]
 8017452:	1aed      	subs	r5, r5, r3
 8017454:	eba5 050a 	sub.w	r5, r5, sl
 8017458:	fa0f fb85 	sxth.w	fp, r5
 801745c:	8965      	ldrh	r5, [r4, #10]
 801745e:	eba5 0509 	sub.w	r5, r5, r9
 8017462:	b22d      	sxth	r5, r5
 8017464:	e72d      	b.n	80172c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017466:	8965      	ldrh	r5, [r4, #10]
 8017468:	f04f 0b00 	mov.w	fp, #0
 801746c:	1aed      	subs	r5, r5, r3
 801746e:	4633      	mov	r3, r6
 8017470:	463e      	mov	r6, r7
 8017472:	eba5 050a 	sub.w	r5, r5, sl
 8017476:	461f      	mov	r7, r3
 8017478:	b22d      	sxth	r5, r5
 801747a:	e722      	b.n	80172c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801747c:	2500      	movs	r5, #0
 801747e:	e720      	b.n	80172c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08017480 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017480:	b513      	push	{r0, r1, r4, lr}
 8017482:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8017486:	4604      	mov	r4, r0
 8017488:	b1fb      	cbz	r3, 80174ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801748a:	4b16      	ldr	r3, [pc, #88]	; (80174e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801748c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	428b      	cmp	r3, r1
 8017492:	d91a      	bls.n	80174ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017494:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017498:	2b00      	cmp	r3, #0
 801749a:	dd16      	ble.n	80174ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801749c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	dd12      	ble.n	80174ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80174a4:	4b10      	ldr	r3, [pc, #64]	; (80174e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	f7f0 f982 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 80174ac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80174b0:	6822      	ldr	r2, [r4, #0]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	db06      	blt.n	80174c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80174b6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	db02      	blt.n	80174c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80174be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174c0:	4298      	cmp	r0, r3
 80174c2:	d004      	beq.n	80174ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80174c4:	6953      	ldr	r3, [r2, #20]
 80174c6:	4620      	mov	r0, r4
 80174c8:	4798      	blx	r3
 80174ca:	b002      	add	sp, #8
 80174cc:	bd10      	pop	{r4, pc}
 80174ce:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80174d2:	466b      	mov	r3, sp
 80174d4:	6912      	ldr	r2, [r2, #16]
 80174d6:	c903      	ldmia	r1, {r0, r1}
 80174d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80174dc:	4619      	mov	r1, r3
 80174de:	4620      	mov	r0, r4
 80174e0:	4790      	blx	r2
 80174e2:	e7f2      	b.n	80174ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80174e4:	24006dd0 	.word	0x24006dd0
 80174e8:	24006dd8 	.word	0x24006dd8

080174ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80174ec:	4b45      	ldr	r3, [pc, #276]	; (8017604 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80174ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80174f4:	b08e      	sub	sp, #56	; 0x38
 80174f6:	881b      	ldrh	r3, [r3, #0]
 80174f8:	4604      	mov	r4, r0
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d97e      	bls.n	80175fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80174fe:	6808      	ldr	r0, [r1, #0]
 8017500:	ab05      	add	r3, sp, #20
 8017502:	6849      	ldr	r1, [r1, #4]
 8017504:	4d40      	ldr	r5, [pc, #256]	; (8017608 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8017506:	c303      	stmia	r3!, {r0, r1}
 8017508:	4611      	mov	r1, r2
 801750a:	6828      	ldr	r0, [r5, #0]
 801750c:	f7f0 f950 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 8017510:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8017514:	2b00      	cmp	r3, #0
 8017516:	db11      	blt.n	801753c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017518:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801751c:	2b00      	cmp	r3, #0
 801751e:	db0d      	blt.n	801753c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017522:	4298      	cmp	r0, r3
 8017524:	d10a      	bne.n	801753c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017526:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801752a:	ab09      	add	r3, sp, #36	; 0x24
 801752c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017530:	e883 0003 	stmia.w	r3, {r0, r1}
 8017534:	4619      	mov	r1, r3
 8017536:	a805      	add	r0, sp, #20
 8017538:	f7fe fcc8 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801753c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017540:	2b00      	cmp	r3, #0
 8017542:	dd5b      	ble.n	80175fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017544:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017548:	2b00      	cmp	r3, #0
 801754a:	dd57      	ble.n	80175fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801754c:	4f2f      	ldr	r7, [pc, #188]	; (801760c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801754e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017556:	4b2e      	ldr	r3, [pc, #184]	; (8017610 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801755e:	2e00      	cmp	r6, #0
 8017560:	d04c      	beq.n	80175fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017562:	6823      	ldr	r3, [r4, #0]
 8017564:	4620      	mov	r0, r4
 8017566:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801756a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801756c:	4798      	blx	r3
 801756e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8017576:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801757a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801757e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8017582:	785b      	ldrb	r3, [r3, #1]
 8017584:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8017588:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801758c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801758e:	9609      	str	r6, [sp, #36]	; 0x24
 8017590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017594:	4b1f      	ldr	r3, [pc, #124]	; (8017614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017596:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80175a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80175a2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80175a6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80175aa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80175ae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80175b2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80175b6:	b10a      	cbz	r2, 80175bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80175b8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80175ba:	b906      	cbnz	r6, 80175be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80175bc:	689e      	ldr	r6, [r3, #8]
 80175be:	af07      	add	r7, sp, #28
 80175c0:	4621      	mov	r1, r4
 80175c2:	4638      	mov	r0, r7
 80175c4:	f002 ff12 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80175ca:	6828      	ldr	r0, [r5, #0]
 80175cc:	f7f0 f8f0 	bl	80077b0 <_ZNK8touchgfx5Texts7getTextEt>
 80175d0:	6823      	ldr	r3, [r4, #0]
 80175d2:	4605      	mov	r5, r0
 80175d4:	4620      	mov	r0, r4
 80175d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175d8:	4798      	blx	r3
 80175da:	6823      	ldr	r3, [r4, #0]
 80175dc:	4680      	mov	r8, r0
 80175de:	4620      	mov	r0, r4
 80175e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80175e4:	4798      	blx	r3
 80175e6:	ab09      	add	r3, sp, #36	; 0x24
 80175e8:	9501      	str	r5, [sp, #4]
 80175ea:	9300      	str	r3, [sp, #0]
 80175ec:	ab05      	add	r3, sp, #20
 80175ee:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80175f2:	4630      	mov	r0, r6
 80175f4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80175f8:	f7f0 f86b 	bl	80076d2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80175fc:	b00e      	add	sp, #56	; 0x38
 80175fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017602:	bf00      	nop
 8017604:	24006dd0 	.word	0x24006dd0
 8017608:	24006dd8 	.word	0x24006dd8
 801760c:	24006dcc 	.word	0x24006dcc
 8017610:	24006dd4 	.word	0x24006dd4
 8017614:	24006d7c 	.word	0x24006d7c

08017618 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017618:	b538      	push	{r3, r4, r5, lr}
 801761a:	4b0e      	ldr	r3, [pc, #56]	; (8017654 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801761c:	4604      	mov	r4, r0
 801761e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	429a      	cmp	r2, r3
 8017624:	d214      	bcs.n	8017650 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017626:	6803      	ldr	r3, [r0, #0]
 8017628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801762a:	4798      	blx	r3
 801762c:	6823      	ldr	r3, [r4, #0]
 801762e:	4605      	mov	r5, r0
 8017630:	4620      	mov	r0, r4
 8017632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017634:	4798      	blx	r3
 8017636:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801763a:	b22d      	sxth	r5, r5
 801763c:	4601      	mov	r1, r0
 801763e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017642:	bf06      	itte	eq
 8017644:	4602      	moveq	r2, r0
 8017646:	4629      	moveq	r1, r5
 8017648:	462a      	movne	r2, r5
 801764a:	4620      	mov	r0, r4
 801764c:	f7ec fe02 	bl	8004254 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017650:	bd38      	pop	{r3, r4, r5, pc}
 8017652:	bf00      	nop
 8017654:	24006dd0 	.word	0x24006dd0

08017658 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017658:	b530      	push	{r4, r5, lr}
 801765a:	888b      	ldrh	r3, [r1, #4]
 801765c:	b085      	sub	sp, #20
 801765e:	4604      	mov	r4, r0
 8017660:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017662:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017666:	b923      	cbnz	r3, 8017672 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017668:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801766c:	b90b      	cbnz	r3, 8017672 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801766e:	f7ff ffd3 	bl	8017618 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	466d      	mov	r5, sp
 8017676:	4621      	mov	r1, r4
 8017678:	343c      	adds	r4, #60	; 0x3c
 801767a:	4628      	mov	r0, r5
 801767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017680:	4798      	blx	r3
 8017682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801768a:	b005      	add	sp, #20
 801768c:	bd30      	pop	{r4, r5, pc}

0801768e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801768e:	2300      	movs	r3, #0
 8017690:	8083      	strh	r3, [r0, #4]
 8017692:	80c3      	strh	r3, [r0, #6]
 8017694:	8003      	strh	r3, [r0, #0]
 8017696:	8043      	strh	r3, [r0, #2]
 8017698:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801769c:	2bff      	cmp	r3, #255	; 0xff
 801769e:	bf01      	itttt	eq
 80176a0:	890b      	ldrheq	r3, [r1, #8]
 80176a2:	8083      	strheq	r3, [r0, #4]
 80176a4:	894b      	ldrheq	r3, [r1, #10]
 80176a6:	80c3      	strheq	r3, [r0, #6]
 80176a8:	4770      	bx	lr
	...

080176ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80176ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ae:	4604      	mov	r4, r0
 80176b0:	466b      	mov	r3, sp
 80176b2:	6808      	ldr	r0, [r1, #0]
 80176b4:	6849      	ldr	r1, [r1, #4]
 80176b6:	c303      	stmia	r3!, {r0, r1}
 80176b8:	6823      	ldr	r3, [r4, #0]
 80176ba:	4669      	mov	r1, sp
 80176bc:	4620      	mov	r0, r4
 80176be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c0:	4798      	blx	r3
 80176c2:	4b08      	ldr	r3, [pc, #32]	; (80176e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80176ca:	b10a      	cbz	r2, 80176d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80176cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80176ce:	b900      	cbnz	r0, 80176d2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80176d0:	6898      	ldr	r0, [r3, #8]
 80176d2:	6803      	ldr	r3, [r0, #0]
 80176d4:	4669      	mov	r1, sp
 80176d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80176d8:	6a1d      	ldr	r5, [r3, #32]
 80176da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80176de:	47a8      	blx	r5
 80176e0:	b003      	add	sp, #12
 80176e2:	bd30      	pop	{r4, r5, pc}
 80176e4:	24006d7c 	.word	0x24006d7c

080176e8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80176e8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80176ec:	b12a      	cbz	r2, 80176fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80176ee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80176f2:	b112      	cbz	r2, 80176fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80176f4:	6803      	ldr	r3, [r0, #0]
 80176f6:	695b      	ldr	r3, [r3, #20]
 80176f8:	4718      	bx	r3
 80176fa:	4770      	bx	lr

080176fc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80176fc:	b570      	push	{r4, r5, r6, lr}
 80176fe:	880b      	ldrh	r3, [r1, #0]
 8017700:	460d      	mov	r5, r1
 8017702:	4604      	mov	r4, r0
 8017704:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017706:	4608      	mov	r0, r1
 8017708:	f004 fb1c 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801770c:	4606      	mov	r6, r0
 801770e:	4628      	mov	r0, r5
 8017710:	f004 fb4c 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017714:	6823      	ldr	r3, [r4, #0]
 8017716:	4605      	mov	r5, r0
 8017718:	4631      	mov	r1, r6
 801771a:	4620      	mov	r0, r4
 801771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801771e:	4798      	blx	r3
 8017720:	6823      	ldr	r3, [r4, #0]
 8017722:	4629      	mov	r1, r5
 8017724:	4620      	mov	r0, r4
 8017726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801772c:	4718      	bx	r3

0801772e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801772e:	b510      	push	{r4, lr}
 8017730:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017734:	4604      	mov	r4, r0
 8017736:	2bff      	cmp	r3, #255	; 0xff
 8017738:	d006      	beq.n	8017748 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801773a:	2300      	movs	r3, #0
 801773c:	8003      	strh	r3, [r0, #0]
 801773e:	8043      	strh	r3, [r0, #2]
 8017740:	8083      	strh	r3, [r0, #4]
 8017742:	80c3      	strh	r3, [r0, #6]
 8017744:	4620      	mov	r0, r4
 8017746:	bd10      	pop	{r4, pc}
 8017748:	3126      	adds	r1, #38	; 0x26
 801774a:	f004 fb63 	bl	801be14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801774e:	e7f9      	b.n	8017744 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08017750 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8017750:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8017754:	b12a      	cbz	r2, 8017762 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8017756:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801775a:	b112      	cbz	r2, 8017762 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801775c:	6803      	ldr	r3, [r0, #0]
 801775e:	695b      	ldr	r3, [r3, #20]
 8017760:	4718      	bx	r3
 8017762:	4770      	bx	lr

08017764 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017768:	4604      	mov	r4, r0
 801776a:	b088      	sub	sp, #32
 801776c:	2500      	movs	r5, #0
 801776e:	460f      	mov	r7, r1
 8017770:	f854 3b26 	ldr.w	r3, [r4], #38
 8017774:	a904      	add	r1, sp, #16
 8017776:	4606      	mov	r6, r0
 8017778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801777e:	4798      	blx	r3
 8017780:	4620      	mov	r0, r4
 8017782:	f004 fadf 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017786:	4680      	mov	r8, r0
 8017788:	4620      	mov	r0, r4
 801778a:	f004 fb0f 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801778e:	9506      	str	r5, [sp, #24]
 8017790:	ad06      	add	r5, sp, #24
 8017792:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017796:	4639      	mov	r1, r7
 8017798:	f8ad 801c 	strh.w	r8, [sp, #28]
 801779c:	4628      	mov	r0, r5
 801779e:	f7fe fb95 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 80177a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	dd19      	ble.n	80177de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80177aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	dd15      	ble.n	80177de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80177b2:	4b0c      	ldr	r3, [pc, #48]	; (80177e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80177ba:	b10a      	cbz	r2, 80177c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80177bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80177be:	b900      	cbnz	r0, 80177c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80177c0:	6898      	ldr	r0, [r3, #8]
 80177c2:	2701      	movs	r7, #1
 80177c4:	6801      	ldr	r1, [r0, #0]
 80177c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80177ca:	9702      	str	r7, [sp, #8]
 80177cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80177d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80177d4:	e9cd 5600 	strd	r5, r6, [sp]
 80177d8:	688d      	ldr	r5, [r1, #8]
 80177da:	4621      	mov	r1, r4
 80177dc:	47a8      	blx	r5
 80177de:	b008      	add	sp, #32
 80177e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e4:	24006d7c 	.word	0x24006d7c

080177e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80177e8:	b510      	push	{r4, lr}
 80177ea:	6803      	ldr	r3, [r0, #0]
 80177ec:	460c      	mov	r4, r1
 80177ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f0:	4798      	blx	r3
 80177f2:	1b03      	subs	r3, r0, r4
 80177f4:	4258      	negs	r0, r3
 80177f6:	4158      	adcs	r0, r3
 80177f8:	bd10      	pop	{r4, pc}
	...

080177fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80177fc:	4b01      	ldr	r3, [pc, #4]	; (8017804 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80177fe:	6019      	str	r1, [r3, #0]
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop
 8017804:	24006d84 	.word	0x24006d84

08017808 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780c:	4696      	mov	lr, r2
 801780e:	b097      	sub	sp, #92	; 0x5c
 8017810:	4605      	mov	r5, r0
 8017812:	4614      	mov	r4, r2
 8017814:	460e      	mov	r6, r1
 8017816:	461f      	mov	r7, r3
 8017818:	f10d 0c1c 	add.w	ip, sp, #28
 801781c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017820:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017824:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801782c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017830:	f8de 3000 	ldr.w	r3, [lr]
 8017834:	f104 0e14 	add.w	lr, r4, #20
 8017838:	f8cc 3000 	str.w	r3, [ip]
 801783c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017848:	f8de 3000 	ldr.w	r3, [lr]
 801784c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017850:	f8cc 3000 	str.w	r3, [ip]
 8017854:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801785c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017860:	f8de 3000 	ldr.w	r3, [lr]
 8017864:	4631      	mov	r1, r6
 8017866:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017868:	4628      	mov	r0, r5
 801786a:	f8cc 3000 	str.w	r3, [ip]
 801786e:	682b      	ldr	r3, [r5, #0]
 8017870:	9201      	str	r2, [sp, #4]
 8017872:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017874:	f8cd 8008 	str.w	r8, [sp, #8]
 8017878:	9200      	str	r2, [sp, #0]
 801787a:	aa07      	add	r2, sp, #28
 801787c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017880:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8017884:	463b      	mov	r3, r7
 8017886:	47d8      	blx	fp
 8017888:	46a6      	mov	lr, r4
 801788a:	f10d 0c1c 	add.w	ip, sp, #28
 801788e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017896:	f8de 3000 	ldr.w	r3, [lr]
 801789a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801789e:	343c      	adds	r4, #60	; 0x3c
 80178a0:	f8cc 3000 	str.w	r3, [ip]
 80178a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80178a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80178ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178b0:	f8de 3000 	ldr.w	r3, [lr]
 80178b4:	f8cc 3000 	str.w	r3, [ip]
 80178b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80178bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	4631      	mov	r1, r6
 80178c6:	4628      	mov	r0, r5
 80178c8:	f8cc 3000 	str.w	r3, [ip]
 80178cc:	682b      	ldr	r3, [r5, #0]
 80178ce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80178d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80178d8:	9201      	str	r2, [sp, #4]
 80178da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80178dc:	9200      	str	r2, [sp, #0]
 80178de:	aa07      	add	r2, sp, #28
 80178e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80178e2:	463b      	mov	r3, r7
 80178e4:	47a0      	blx	r4
 80178e6:	b017      	add	sp, #92	; 0x5c
 80178e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080178ec <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80178ec:	2000      	movs	r0, #0
 80178ee:	4770      	bx	lr

080178f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	b08d      	sub	sp, #52	; 0x34
 80178f6:	4688      	mov	r8, r1
 80178f8:	f8d3 c000 	ldr.w	ip, [r3]
 80178fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80178fe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017902:	680f      	ldr	r7, [r1, #0]
 8017904:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017908:	eba7 070c 	sub.w	r7, r7, ip
 801790c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017910:	edd3 6a07 	vldr	s13, [r3, #28]
 8017914:	42bc      	cmp	r4, r7
 8017916:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017918:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801791c:	bfa8      	it	ge
 801791e:	463c      	movge	r4, r7
 8017920:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017924:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017928:	ee07 4a90 	vmov	s15, r4
 801792c:	eb09 0e0c 	add.w	lr, r9, ip
 8017930:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017934:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017938:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801793c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017940:	4571      	cmp	r1, lr
 8017942:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017946:	ee65 4a24 	vmul.f32	s9, s10, s9
 801794a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801794e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017952:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017956:	ee32 1a05 	vadd.f32	s2, s4, s10
 801795a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801795e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017962:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017966:	ee22 2a07 	vmul.f32	s4, s4, s14
 801796a:	f340 808c 	ble.w	8017a86 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801796e:	eba1 060e 	sub.w	r6, r1, lr
 8017972:	fb96 f5f4 	sdiv	r5, r6, r4
 8017976:	ee07 5a10 	vmov	s14, r5
 801797a:	2d00      	cmp	r5, #0
 801797c:	fb04 6615 	mls	r6, r4, r5, r6
 8017980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017984:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017988:	eee7 0a24 	vfma.f32	s1, s14, s9
 801798c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017990:	dd12      	ble.n	80179b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017992:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017996:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801799a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801799e:	eef5 6a40 	vcmp.f32	s13, #0.0
 80179a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a6:	bf14      	ite	ne
 80179a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80179ac:	eeb0 7a67 	vmoveq.f32	s14, s15
 80179b0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80179b4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80179b8:	fb05 f204 	mul.w	r2, r5, r4
 80179bc:	1abf      	subs	r7, r7, r2
 80179be:	4494      	add	ip, r2
 80179c0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80179c4:	4411      	add	r1, r2
 80179c6:	eb09 020c 	add.w	r2, r9, ip
 80179ca:	b209      	sxth	r1, r1
 80179cc:	443a      	add	r2, r7
 80179ce:	428a      	cmp	r2, r1
 80179d0:	bfc4      	itt	gt
 80179d2:	eba1 0209 	subgt.w	r2, r1, r9
 80179d6:	eba2 070c 	subgt.w	r7, r2, ip
 80179da:	2f00      	cmp	r7, #0
 80179dc:	dd50      	ble.n	8017a80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80179de:	fb97 f1f4 	sdiv	r1, r7, r4
 80179e2:	fb04 7211 	mls	r2, r4, r1, r7
 80179e6:	b90a      	cbnz	r2, 80179ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80179e8:	3901      	subs	r1, #1
 80179ea:	4622      	mov	r2, r4
 80179ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80179f0:	6840      	ldr	r0, [r0, #4]
 80179f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80179f6:	44b6      	add	lr, r6
 80179f8:	f8d0 a000 	ldr.w	sl, [r0]
 80179fc:	2900      	cmp	r1, #0
 80179fe:	bfcc      	ite	gt
 8017a00:	46a1      	movgt	r9, r4
 8017a02:	4691      	movle	r9, r2
 8017a04:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a06:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017a08:	fb04 e505 	mla	r5, r4, r5, lr
 8017a0c:	eef0 6a42 	vmov.f32	s13, s4
 8017a10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017a14:	9008      	str	r0, [sp, #32]
 8017a16:	eeb0 7a61 	vmov.f32	s14, s3
 8017a1a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017a1c:	695b      	ldr	r3, [r3, #20]
 8017a1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017a22:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017a26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017a2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017a2c:	445b      	add	r3, fp
 8017a2e:	9307      	str	r3, [sp, #28]
 8017a30:	ee16 3a90 	vmov	r3, s13
 8017a34:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017a38:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017a3c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017a40:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017a44:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017a48:	ee17 7a90 	vmov	r7, s15
 8017a4c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017a50:	fb97 f7f4 	sdiv	r7, r7, r4
 8017a54:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017a58:	ee17 ca90 	vmov	ip, s15
 8017a5c:	fb9c fcf4 	sdiv	ip, ip, r4
 8017a60:	fb0c 3306 	mla	r3, ip, r6, r3
 8017a64:	9302      	str	r3, [sp, #8]
 8017a66:	ee17 3a10 	vmov	r3, s14
 8017a6a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017a6e:	fb07 3706 	mla	r7, r7, r6, r3
 8017a72:	eba9 0306 	sub.w	r3, r9, r6
 8017a76:	e9cd 4700 	strd	r4, r7, [sp]
 8017a7a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017a7e:	47a0      	blx	r4
 8017a80:	b00d      	add	sp, #52	; 0x34
 8017a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a86:	2500      	movs	r5, #0
 8017a88:	462e      	mov	r6, r5
 8017a8a:	e799      	b.n	80179c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a90:	b0db      	sub	sp, #364	; 0x16c
 8017a92:	461d      	mov	r5, r3
 8017a94:	4614      	mov	r4, r2
 8017a96:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017a9a:	910f      	str	r1, [sp, #60]	; 0x3c
 8017a9c:	4629      	mov	r1, r5
 8017a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8017aa0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017aa4:	9009      	str	r0, [sp, #36]	; 0x24
 8017aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017aa8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017aac:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8017ab2:	6803      	ldr	r3, [r0, #0]
 8017ab4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8017ab6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017aba:	47b8      	blx	r7
 8017abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017abe:	6058      	str	r0, [r3, #4]
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	f000 83a1 	beq.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ac6:	682b      	ldr	r3, [r5, #0]
 8017ac8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017acc:	ed94 7a02 	vldr	s14, [r4, #8]
 8017ad0:	9314      	str	r3, [sp, #80]	; 0x50
 8017ad2:	686b      	ldr	r3, [r5, #4]
 8017ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ad8:	9315      	str	r3, [sp, #84]	; 0x54
 8017ada:	4bc1      	ldr	r3, [pc, #772]	; (8017de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017adc:	7819      	ldrb	r1, [r3, #0]
 8017ade:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017ae2:	2900      	cmp	r1, #0
 8017ae4:	bf16      	itet	ne
 8017ae6:	4619      	movne	r1, r3
 8017ae8:	4611      	moveq	r1, r2
 8017aea:	4613      	movne	r3, r2
 8017aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017af0:	9116      	str	r1, [sp, #88]	; 0x58
 8017af2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017af6:	f240 8387 	bls.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017afa:	ed94 7a07 	vldr	s14, [r4, #28]
 8017afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b06:	f240 837f 	bls.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b0a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b16:	f240 8377 	bls.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b1a:	6822      	ldr	r2, [r4, #0]
 8017b1c:	4bb1      	ldr	r3, [pc, #708]	; (8017de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	f2c0 8372 	blt.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b24:	49b0      	ldr	r1, [pc, #704]	; (8017de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017b26:	6963      	ldr	r3, [r4, #20]
 8017b28:	428a      	cmp	r2, r1
 8017b2a:	f300 836d 	bgt.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b2e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017b32:	48ae      	ldr	r0, [pc, #696]	; (8017dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017b34:	33ff      	adds	r3, #255	; 0xff
 8017b36:	4283      	cmp	r3, r0
 8017b38:	f200 8366 	bhi.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b3e:	4dac      	ldr	r5, [pc, #688]	; (8017df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017b40:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017b44:	33ff      	adds	r3, #255	; 0xff
 8017b46:	42ab      	cmp	r3, r5
 8017b48:	f200 835e 	bhi.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b4c:	6862      	ldr	r2, [r4, #4]
 8017b4e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017b52:	33ff      	adds	r3, #255	; 0xff
 8017b54:	4283      	cmp	r3, r0
 8017b56:	f200 8357 	bhi.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b5a:	69a1      	ldr	r1, [r4, #24]
 8017b5c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017b60:	33ff      	adds	r3, #255	; 0xff
 8017b62:	4283      	cmp	r3, r0
 8017b64:	f200 8350 	bhi.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017b6a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017b6e:	30ff      	adds	r0, #255	; 0xff
 8017b70:	42a8      	cmp	r0, r5
 8017b72:	f200 8349 	bhi.w	8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b76:	428a      	cmp	r2, r1
 8017b78:	f280 8110 	bge.w	8017d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	f300 8119 	bgt.w	8017db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017b82:	4299      	cmp	r1, r3
 8017b84:	f280 811d 	bge.w	8017dc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017b88:	2502      	movs	r5, #2
 8017b8a:	2701      	movs	r7, #1
 8017b8c:	46a9      	mov	r9, r5
 8017b8e:	46b8      	mov	r8, r7
 8017b90:	f04f 0a00 	mov.w	sl, #0
 8017b94:	4621      	mov	r1, r4
 8017b96:	a849      	add	r0, sp, #292	; 0x124
 8017b98:	f003 fd5c 	bl	801b654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017b9c:	4622      	mov	r2, r4
 8017b9e:	4653      	mov	r3, sl
 8017ba0:	a949      	add	r1, sp, #292	; 0x124
 8017ba2:	f8cd 9000 	str.w	r9, [sp]
 8017ba6:	a819      	add	r0, sp, #100	; 0x64
 8017ba8:	f003 fe84 	bl	801b8b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017bac:	4622      	mov	r2, r4
 8017bae:	4653      	mov	r3, sl
 8017bb0:	a949      	add	r1, sp, #292	; 0x124
 8017bb2:	f8cd 8000 	str.w	r8, [sp]
 8017bb6:	a829      	add	r0, sp, #164	; 0xa4
 8017bb8:	f003 fe7c 	bl	801b8b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017bbc:	4643      	mov	r3, r8
 8017bbe:	4622      	mov	r2, r4
 8017bc0:	a949      	add	r1, sp, #292	; 0x124
 8017bc2:	f8cd 9000 	str.w	r9, [sp]
 8017bc6:	a839      	add	r0, sp, #228	; 0xe4
 8017bc8:	f003 fe74 	bl	801b8b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017bcc:	42af      	cmp	r7, r5
 8017bce:	af12      	add	r7, sp, #72	; 0x48
 8017bd0:	bfb7      	itett	lt
 8017bd2:	2300      	movlt	r3, #0
 8017bd4:	2301      	movge	r3, #1
 8017bd6:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017bd8:	ac19      	addlt	r4, sp, #100	; 0x64
 8017bda:	bfb1      	iteee	lt
 8017bdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017bde:	ad19      	addge	r5, sp, #100	; 0x64
 8017be0:	930e      	strge	r3, [sp, #56]	; 0x38
 8017be2:	ac29      	addge	r4, sp, #164	; 0xa4
 8017be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017be6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bea:	e887 0003 	stmia.w	r7, {r0, r1}
 8017bee:	b928      	cbnz	r0, 8017bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017bf0:	4b80      	ldr	r3, [pc, #512]	; (8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017bf2:	6818      	ldr	r0, [r3, #0]
 8017bf4:	6803      	ldr	r3, [r0, #0]
 8017bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bf8:	4798      	blx	r3
 8017bfa:	6038      	str	r0, [r7, #0]
 8017bfc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017bfe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017c02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c06:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017c08:	930c      	str	r3, [sp, #48]	; 0x30
 8017c0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c0c:	6963      	ldr	r3, [r4, #20]
 8017c0e:	440b      	add	r3, r1
 8017c10:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017c14:	4408      	add	r0, r1
 8017c16:	b200      	sxth	r0, r0
 8017c18:	4283      	cmp	r3, r0
 8017c1a:	900d      	str	r0, [sp, #52]	; 0x34
 8017c1c:	f280 80dd 	bge.w	8017dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017c20:	428b      	cmp	r3, r1
 8017c22:	da08      	bge.n	8017c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c24:	2a00      	cmp	r2, #0
 8017c26:	dd06      	ble.n	8017c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c28:	1acb      	subs	r3, r1, r3
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	f2c0 80e4 	blt.w	8017df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f300 80e2 	bgt.w	8017dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017c36:	6967      	ldr	r7, [r4, #20]
 8017c38:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c3e:	443b      	add	r3, r7
 8017c40:	461f      	mov	r7, r3
 8017c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c44:	1bdf      	subs	r7, r3, r7
 8017c46:	4297      	cmp	r7, r2
 8017c48:	bfa8      	it	ge
 8017c4a:	4617      	movge	r7, r2
 8017c4c:	2f00      	cmp	r7, #0
 8017c4e:	f340 8166 	ble.w	8017f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017c52:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017c54:	6829      	ldr	r1, [r5, #0]
 8017c56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c5a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017c5e:	4411      	add	r1, r2
 8017c60:	6820      	ldr	r0, [r4, #0]
 8017c62:	4299      	cmp	r1, r3
 8017c64:	dd1a      	ble.n	8017c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017c66:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017c6a:	4402      	add	r2, r0
 8017c6c:	440b      	add	r3, r1
 8017c6e:	b21b      	sxth	r3, r3
 8017c70:	429a      	cmp	r2, r3
 8017c72:	dc13      	bgt.n	8017c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017c74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017c76:	a912      	add	r1, sp, #72	; 0x48
 8017c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	9206      	str	r2, [sp, #24]
 8017c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c82:	9500      	str	r5, [sp, #0]
 8017c84:	9205      	str	r2, [sp, #20]
 8017c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c88:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017c8c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017c8e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017c92:	aa49      	add	r2, sp, #292	; 0x124
 8017c94:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017c98:	4623      	mov	r3, r4
 8017c9a:	47c8      	blx	r9
 8017c9c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017ca0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017ca4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017cac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017cb0:	68a1      	ldr	r1, [r4, #8]
 8017cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017cb6:	ed94 6a08 	vldr	s12, [r4, #32]
 8017cba:	edd4 6a07 	vldr	s13, [r4, #28]
 8017cbe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017cc2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017cc6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017cca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017cce:	edc4 6a07 	vstr	s13, [r4, #28]
 8017cd2:	441a      	add	r2, r3
 8017cd4:	6963      	ldr	r3, [r4, #20]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	6022      	str	r2, [r4, #0]
 8017cda:	6163      	str	r3, [r4, #20]
 8017cdc:	69a3      	ldr	r3, [r4, #24]
 8017cde:	3b01      	subs	r3, #1
 8017ce0:	61a3      	str	r3, [r4, #24]
 8017ce2:	6923      	ldr	r3, [r4, #16]
 8017ce4:	440b      	add	r3, r1
 8017ce6:	68e1      	ldr	r1, [r4, #12]
 8017ce8:	428b      	cmp	r3, r1
 8017cea:	6123      	str	r3, [r4, #16]
 8017cec:	db15      	blt.n	8017d1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017cee:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017cf2:	3201      	adds	r2, #1
 8017cf4:	1a5b      	subs	r3, r3, r1
 8017cf6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017cfa:	6022      	str	r2, [r4, #0]
 8017cfc:	6123      	str	r3, [r4, #16]
 8017cfe:	edc4 6a07 	vstr	s13, [r4, #28]
 8017d02:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017d06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017d0a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017d0e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d16:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017d1a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017d1e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017d22:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d2a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017d2e:	68a9      	ldr	r1, [r5, #8]
 8017d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017d34:	ed95 6a08 	vldr	s12, [r5, #32]
 8017d38:	edd5 6a07 	vldr	s13, [r5, #28]
 8017d3c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017d40:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017d44:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017d4c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017d50:	441a      	add	r2, r3
 8017d52:	696b      	ldr	r3, [r5, #20]
 8017d54:	3301      	adds	r3, #1
 8017d56:	602a      	str	r2, [r5, #0]
 8017d58:	616b      	str	r3, [r5, #20]
 8017d5a:	69ab      	ldr	r3, [r5, #24]
 8017d5c:	3b01      	subs	r3, #1
 8017d5e:	61ab      	str	r3, [r5, #24]
 8017d60:	692b      	ldr	r3, [r5, #16]
 8017d62:	440b      	add	r3, r1
 8017d64:	68e9      	ldr	r1, [r5, #12]
 8017d66:	428b      	cmp	r3, r1
 8017d68:	612b      	str	r3, [r5, #16]
 8017d6a:	db15      	blt.n	8017d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017d6c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017d70:	3201      	adds	r2, #1
 8017d72:	1a5b      	subs	r3, r3, r1
 8017d74:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017d78:	602a      	str	r2, [r5, #0]
 8017d7a:	612b      	str	r3, [r5, #16]
 8017d7c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017d80:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017d84:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017d88:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017d8c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d94:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017d98:	3f01      	subs	r7, #1
 8017d9a:	e757      	b.n	8017c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017d9c:	4299      	cmp	r1, r3
 8017d9e:	dc13      	bgt.n	8017dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017da0:	429a      	cmp	r2, r3
 8017da2:	da14      	bge.n	8017dce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017da4:	2502      	movs	r5, #2
 8017da6:	2703      	movs	r7, #3
 8017da8:	f04f 0800 	mov.w	r8, #0
 8017dac:	46a9      	mov	r9, r5
 8017dae:	f04f 0a01 	mov.w	sl, #1
 8017db2:	e6ef      	b.n	8017b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017db4:	2501      	movs	r5, #1
 8017db6:	2700      	movs	r7, #0
 8017db8:	46a9      	mov	r9, r5
 8017dba:	46b8      	mov	r8, r7
 8017dbc:	f04f 0a02 	mov.w	sl, #2
 8017dc0:	e6e8      	b.n	8017b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017dc2:	2501      	movs	r5, #1
 8017dc4:	2702      	movs	r7, #2
 8017dc6:	e6e1      	b.n	8017b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017dc8:	2500      	movs	r5, #0
 8017dca:	2701      	movs	r7, #1
 8017dcc:	e7f4      	b.n	8017db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017dce:	2702      	movs	r7, #2
 8017dd0:	2503      	movs	r5, #3
 8017dd2:	f04f 0900 	mov.w	r9, #0
 8017dd6:	46b8      	mov	r8, r7
 8017dd8:	e7e9      	b.n	8017dae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017dda:	4613      	mov	r3, r2
 8017ddc:	e728      	b.n	8017c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017dde:	bf00      	nop
 8017de0:	24006d74 	.word	0x24006d74
 8017de4:	fffd8f01 	.word	0xfffd8f01
 8017de8:	00027100 	.word	0x00027100
 8017dec:	0004e1ff 	.word	0x0004e1ff
 8017df0:	0004e1fe 	.word	0x0004e1fe
 8017df4:	24006d7c 	.word	0x24006d7c
 8017df8:	4613      	mov	r3, r2
 8017dfa:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017dfc:	469e      	mov	lr, r3
 8017dfe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017e00:	469c      	mov	ip, r3
 8017e02:	9111      	str	r1, [sp, #68]	; 0x44
 8017e04:	f04f 0900 	mov.w	r9, #0
 8017e08:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017e0c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017e10:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017e14:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017e18:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017e1c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017e20:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017e24:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017e28:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017e2c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017e30:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017e34:	f1bc 0f00 	cmp.w	ip, #0
 8017e38:	d147      	bne.n	8017eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017e3a:	eb03 0c07 	add.w	ip, r3, r7
 8017e3e:	1ad7      	subs	r7, r2, r3
 8017e40:	f1b9 0f00 	cmp.w	r9, #0
 8017e44:	d009      	beq.n	8017e5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017e46:	9029      	str	r0, [sp, #164]	; 0xa4
 8017e48:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017e4c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017e50:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017e54:	912d      	str	r1, [sp, #180]	; 0xb4
 8017e56:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017e5a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017e5c:	f04f 0800 	mov.w	r8, #0
 8017e60:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017e64:	9111      	str	r1, [sp, #68]	; 0x44
 8017e66:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017e6a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017e6e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017e72:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017e76:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017e7a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017e7e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017e82:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017e86:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017e8a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017e8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017e92:	f1be 0f00 	cmp.w	lr, #0
 8017e96:	d031      	beq.n	8017efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017e98:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017e9a:	4450      	add	r0, sl
 8017e9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017ea0:	4431      	add	r1, r6
 8017ea2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017ea6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017eaa:	4549      	cmp	r1, r9
 8017eac:	db08      	blt.n	8017ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017eae:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017eb2:	3001      	adds	r0, #1
 8017eb4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017eb8:	eba1 0109 	sub.w	r1, r1, r9
 8017ebc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017ec0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017ec4:	f04f 0801 	mov.w	r8, #1
 8017ec8:	e7e3      	b.n	8017e92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017eca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017ecc:	4450      	add	r0, sl
 8017ece:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017ed2:	4431      	add	r1, r6
 8017ed4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017ed8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017edc:	4541      	cmp	r1, r8
 8017ede:	db08      	blt.n	8017ef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017ee0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017ee4:	3001      	adds	r0, #1
 8017ee6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017eea:	eba1 0108 	sub.w	r1, r1, r8
 8017eee:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017ef2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ef6:	f04f 0901 	mov.w	r9, #1
 8017efa:	e79b      	b.n	8017e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017efc:	449c      	add	ip, r3
 8017efe:	1aff      	subs	r7, r7, r3
 8017f00:	f1b8 0f00 	cmp.w	r8, #0
 8017f04:	d009      	beq.n	8017f1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017f06:	9019      	str	r0, [sp, #100]	; 0x64
 8017f08:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017f0c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017f10:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017f14:	911d      	str	r1, [sp, #116]	; 0x74
 8017f16:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017f1a:	1ad2      	subs	r2, r2, r3
 8017f1c:	e68b      	b.n	8017c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f20:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f000 80d1 	beq.w	80180ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017f28:	ad19      	add	r5, sp, #100	; 0x64
 8017f2a:	ac39      	add	r4, sp, #228	; 0xe4
 8017f2c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017f2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f36:	930c      	str	r3, [sp, #48]	; 0x30
 8017f38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017f3a:	6963      	ldr	r3, [r4, #20]
 8017f3c:	440b      	add	r3, r1
 8017f3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017f42:	4408      	add	r0, r1
 8017f44:	b200      	sxth	r0, r0
 8017f46:	4283      	cmp	r3, r0
 8017f48:	900d      	str	r0, [sp, #52]	; 0x34
 8017f4a:	f280 80c1 	bge.w	80180d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017f4e:	428b      	cmp	r3, r1
 8017f50:	da08      	bge.n	8017f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f52:	2a00      	cmp	r2, #0
 8017f54:	dd06      	ble.n	8017f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f56:	1acb      	subs	r3, r1, r3
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	f2c0 80bb 	blt.w	80180d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f300 80b9 	bgt.w	80180d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017f64:	6967      	ldr	r7, [r4, #20]
 8017f66:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f6c:	443b      	add	r3, r7
 8017f6e:	461f      	mov	r7, r3
 8017f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f72:	1bdf      	subs	r7, r3, r7
 8017f74:	4297      	cmp	r7, r2
 8017f76:	bfa8      	it	ge
 8017f78:	4617      	movge	r7, r2
 8017f7a:	2f00      	cmp	r7, #0
 8017f7c:	f340 813c 	ble.w	80181f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017f80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017f82:	6829      	ldr	r1, [r5, #0]
 8017f84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f88:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017f8c:	4411      	add	r1, r2
 8017f8e:	6820      	ldr	r0, [r4, #0]
 8017f90:	4299      	cmp	r1, r3
 8017f92:	dd1a      	ble.n	8017fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017f94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017f98:	4402      	add	r2, r0
 8017f9a:	440b      	add	r3, r1
 8017f9c:	b21b      	sxth	r3, r3
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	dc13      	bgt.n	8017fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017fa4:	a912      	add	r1, sp, #72	; 0x48
 8017fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	9206      	str	r2, [sp, #24]
 8017fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017fb0:	9500      	str	r5, [sp, #0]
 8017fb2:	9205      	str	r2, [sp, #20]
 8017fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017fba:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017fbc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017fc0:	aa49      	add	r2, sp, #292	; 0x124
 8017fc2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017fc6:	4623      	mov	r3, r4
 8017fc8:	47c8      	blx	r9
 8017fca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017fce:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017fd2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017fd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017fda:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017fde:	68a1      	ldr	r1, [r4, #8]
 8017fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017fe4:	ed94 6a08 	vldr	s12, [r4, #32]
 8017fe8:	edd4 6a07 	vldr	s13, [r4, #28]
 8017fec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017ff0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ff4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ff8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017ffc:	edc4 6a07 	vstr	s13, [r4, #28]
 8018000:	441a      	add	r2, r3
 8018002:	6963      	ldr	r3, [r4, #20]
 8018004:	3301      	adds	r3, #1
 8018006:	6022      	str	r2, [r4, #0]
 8018008:	6163      	str	r3, [r4, #20]
 801800a:	69a3      	ldr	r3, [r4, #24]
 801800c:	3b01      	subs	r3, #1
 801800e:	61a3      	str	r3, [r4, #24]
 8018010:	6923      	ldr	r3, [r4, #16]
 8018012:	440b      	add	r3, r1
 8018014:	68e1      	ldr	r1, [r4, #12]
 8018016:	428b      	cmp	r3, r1
 8018018:	6123      	str	r3, [r4, #16]
 801801a:	db15      	blt.n	8018048 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801801c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018020:	3201      	adds	r2, #1
 8018022:	1a5b      	subs	r3, r3, r1
 8018024:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018028:	6022      	str	r2, [r4, #0]
 801802a:	6123      	str	r3, [r4, #16]
 801802c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018030:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018034:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018038:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801803c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018044:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018048:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801804c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018050:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018058:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801805c:	68a9      	ldr	r1, [r5, #8]
 801805e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018062:	ed95 6a08 	vldr	s12, [r5, #32]
 8018066:	edd5 6a07 	vldr	s13, [r5, #28]
 801806a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801806e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018072:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018076:	e9d5 2300 	ldrd	r2, r3, [r5]
 801807a:	edc5 6a07 	vstr	s13, [r5, #28]
 801807e:	441a      	add	r2, r3
 8018080:	696b      	ldr	r3, [r5, #20]
 8018082:	3301      	adds	r3, #1
 8018084:	602a      	str	r2, [r5, #0]
 8018086:	616b      	str	r3, [r5, #20]
 8018088:	69ab      	ldr	r3, [r5, #24]
 801808a:	3b01      	subs	r3, #1
 801808c:	61ab      	str	r3, [r5, #24]
 801808e:	692b      	ldr	r3, [r5, #16]
 8018090:	440b      	add	r3, r1
 8018092:	68e9      	ldr	r1, [r5, #12]
 8018094:	428b      	cmp	r3, r1
 8018096:	612b      	str	r3, [r5, #16]
 8018098:	db15      	blt.n	80180c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801809a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801809e:	3201      	adds	r2, #1
 80180a0:	1a5b      	subs	r3, r3, r1
 80180a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80180a6:	602a      	str	r2, [r5, #0]
 80180a8:	612b      	str	r3, [r5, #16]
 80180aa:	edc5 6a07 	vstr	s13, [r5, #28]
 80180ae:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80180b2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80180b6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80180ba:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80180be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180c2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80180c6:	3f01      	subs	r7, #1
 80180c8:	e757      	b.n	8017f7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80180ca:	ad39      	add	r5, sp, #228	; 0xe4
 80180cc:	ac19      	add	r4, sp, #100	; 0x64
 80180ce:	e72d      	b.n	8017f2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80180d0:	4613      	mov	r3, r2
 80180d2:	e744      	b.n	8017f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80180d4:	4613      	mov	r3, r2
 80180d6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80180d8:	469e      	mov	lr, r3
 80180da:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80180de:	461f      	mov	r7, r3
 80180e0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80180e4:	f04f 0900 	mov.w	r9, #0
 80180e8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80180ec:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80180f0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80180f4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80180f8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80180fc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80180fe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018102:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018106:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801810a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801810e:	960e      	str	r6, [sp, #56]	; 0x38
 8018110:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018114:	2f00      	cmp	r7, #0
 8018116:	d146      	bne.n	80181a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018118:	449c      	add	ip, r3
 801811a:	1ad7      	subs	r7, r2, r3
 801811c:	f1b9 0f00 	cmp.w	r9, #0
 8018120:	d009      	beq.n	8018136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018122:	9039      	str	r0, [sp, #228]	; 0xe4
 8018124:	913d      	str	r1, [sp, #244]	; 0xf4
 8018126:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801812a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801812e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018132:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018136:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018138:	f04f 0800 	mov.w	r8, #0
 801813c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018140:	910e      	str	r1, [sp, #56]	; 0x38
 8018142:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018146:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801814a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801814e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018152:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018156:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801815a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801815e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018162:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018166:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801816a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801816e:	f1be 0f00 	cmp.w	lr, #0
 8018172:	d030      	beq.n	80181d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018174:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018176:	4450      	add	r0, sl
 8018178:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801817c:	4431      	add	r1, r6
 801817e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018182:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018186:	4549      	cmp	r1, r9
 8018188:	db08      	blt.n	801819c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801818a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801818e:	3001      	adds	r0, #1
 8018190:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018194:	eba1 0109 	sub.w	r1, r1, r9
 8018198:	ee37 7a06 	vadd.f32	s14, s14, s12
 801819c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80181a0:	f04f 0801 	mov.w	r8, #1
 80181a4:	e7e3      	b.n	801816e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80181a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80181a8:	4450      	add	r0, sl
 80181aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80181ae:	4431      	add	r1, r6
 80181b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80181b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80181b8:	4541      	cmp	r1, r8
 80181ba:	db08      	blt.n	80181ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80181bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80181c0:	3001      	adds	r0, #1
 80181c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80181c6:	eba1 0108 	sub.w	r1, r1, r8
 80181ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80181ce:	3f01      	subs	r7, #1
 80181d0:	f04f 0901 	mov.w	r9, #1
 80181d4:	e79e      	b.n	8018114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80181d6:	449c      	add	ip, r3
 80181d8:	1aff      	subs	r7, r7, r3
 80181da:	f1b8 0f00 	cmp.w	r8, #0
 80181de:	d009      	beq.n	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80181e0:	9019      	str	r0, [sp, #100]	; 0x64
 80181e2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80181e6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80181ea:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80181ee:	911d      	str	r1, [sp, #116]	; 0x74
 80181f0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80181f4:	1ad2      	subs	r2, r2, r3
 80181f6:	e6b5      	b.n	8017f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80181f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	b923      	cbnz	r3, 8018208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181fe:	4b04      	ldr	r3, [pc, #16]	; (8018210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018200:	6818      	ldr	r0, [r3, #0]
 8018202:	6803      	ldr	r3, [r0, #0]
 8018204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018206:	4798      	blx	r3
 8018208:	b05b      	add	sp, #364	; 0x16c
 801820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820e:	bf00      	nop
 8018210:	24006d7c 	.word	0x24006d7c

08018214 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018214:	b570      	push	{r4, r5, r6, lr}
 8018216:	4604      	mov	r4, r0
 8018218:	2500      	movs	r5, #0
 801821a:	9805      	ldr	r0, [sp, #20]
 801821c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8018220:	6061      	str	r1, [r4, #4]
 8018222:	8263      	strh	r3, [r4, #18]
 8018224:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018228:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801822c:	8025      	strh	r5, [r4, #0]
 801822e:	7221      	strb	r1, [r4, #8]
 8018230:	7266      	strb	r6, [r4, #9]
 8018232:	60e0      	str	r0, [r4, #12]
 8018234:	8222      	strh	r2, [r4, #16]
 8018236:	82a3      	strh	r3, [r4, #20]
 8018238:	82e5      	strh	r5, [r4, #22]
 801823a:	8325      	strh	r5, [r4, #24]
 801823c:	8365      	strh	r5, [r4, #26]
 801823e:	83a5      	strh	r5, [r4, #28]
 8018240:	83e5      	strh	r5, [r4, #30]
 8018242:	8425      	strh	r5, [r4, #32]
 8018244:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8018248:	b32e      	cbz	r6, 8018296 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	695b      	ldr	r3, [r3, #20]
 801824e:	4798      	blx	r3
 8018250:	4606      	mov	r6, r0
 8018252:	b300      	cbz	r0, 8018296 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018254:	68e0      	ldr	r0, [r4, #12]
 8018256:	4631      	mov	r1, r6
 8018258:	6803      	ldr	r3, [r0, #0]
 801825a:	68db      	ldr	r3, [r3, #12]
 801825c:	4798      	blx	r3
 801825e:	4605      	mov	r5, r0
 8018260:	b1c8      	cbz	r0, 8018296 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018262:	7b43      	ldrb	r3, [r0, #13]
 8018264:	7a82      	ldrb	r2, [r0, #10]
 8018266:	005b      	lsls	r3, r3, #1
 8018268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801826c:	4313      	orrs	r3, r2
 801826e:	8423      	strh	r3, [r4, #32]
 8018270:	7a63      	ldrb	r3, [r4, #9]
 8018272:	2b06      	cmp	r3, #6
 8018274:	d10f      	bne.n	8018296 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018276:	68e0      	ldr	r0, [r4, #12]
 8018278:	462a      	mov	r2, r5
 801827a:	4631      	mov	r1, r6
 801827c:	6803      	ldr	r3, [r0, #0]
 801827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018280:	4798      	blx	r3
 8018282:	7b6b      	ldrb	r3, [r5, #13]
 8018284:	005b      	lsls	r3, r3, #1
 8018286:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801828a:	7aab      	ldrb	r3, [r5, #10]
 801828c:	4313      	orrs	r3, r2
 801828e:	4418      	add	r0, r3
 8018290:	8c23      	ldrh	r3, [r4, #32]
 8018292:	4418      	add	r0, r3
 8018294:	8420      	strh	r0, [r4, #32]
 8018296:	4620      	mov	r0, r4
 8018298:	bd70      	pop	{r4, r5, r6, pc}

0801829a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801829a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801829e:	2400      	movs	r4, #0
 80182a0:	b085      	sub	sp, #20
 80182a2:	4681      	mov	r9, r0
 80182a4:	4688      	mov	r8, r1
 80182a6:	4692      	mov	sl, r2
 80182a8:	469b      	mov	fp, r3
 80182aa:	4627      	mov	r7, r4
 80182ac:	4625      	mov	r5, r4
 80182ae:	4626      	mov	r6, r4
 80182b0:	4554      	cmp	r4, sl
 80182b2:	da2a      	bge.n	801830a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80182b4:	2300      	movs	r3, #0
 80182b6:	9303      	str	r3, [sp, #12]
 80182b8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80182bc:	429d      	cmp	r5, r3
 80182be:	d004      	beq.n	80182ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80182c0:	f242 030b 	movw	r3, #8203	; 0x200b
 80182c4:	429d      	cmp	r5, r3
 80182c6:	bf18      	it	ne
 80182c8:	462f      	movne	r7, r5
 80182ca:	ab03      	add	r3, sp, #12
 80182cc:	4642      	mov	r2, r8
 80182ce:	4659      	mov	r1, fp
 80182d0:	4648      	mov	r0, r9
 80182d2:	f002 ffd5 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80182d6:	4605      	mov	r5, r0
 80182d8:	b1b8      	cbz	r0, 801830a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80182da:	280a      	cmp	r0, #10
 80182dc:	d015      	beq.n	801830a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80182de:	9a03      	ldr	r2, [sp, #12]
 80182e0:	b18a      	cbz	r2, 8018306 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80182e2:	7b50      	ldrb	r0, [r2, #13]
 80182e4:	4639      	mov	r1, r7
 80182e6:	7a93      	ldrb	r3, [r2, #10]
 80182e8:	0040      	lsls	r0, r0, #1
 80182ea:	8895      	ldrh	r5, [r2, #4]
 80182ec:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80182f0:	4303      	orrs	r3, r0
 80182f2:	4640      	mov	r0, r8
 80182f4:	9301      	str	r3, [sp, #4]
 80182f6:	f8d8 3000 	ldr.w	r3, [r8]
 80182fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182fc:	4798      	blx	r3
 80182fe:	9b01      	ldr	r3, [sp, #4]
 8018300:	4418      	add	r0, r3
 8018302:	4406      	add	r6, r0
 8018304:	b2b6      	uxth	r6, r6
 8018306:	3401      	adds	r4, #1
 8018308:	e7d2      	b.n	80182b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801830a:	4630      	mov	r0, r6
 801830c:	b005      	add	sp, #20
 801830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018312 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018312:	2a02      	cmp	r2, #2
 8018314:	b530      	push	{r4, r5, lr}
 8018316:	d011      	beq.n	801833c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018318:	2a03      	cmp	r2, #3
 801831a:	d01c      	beq.n	8018356 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801831c:	2a01      	cmp	r2, #1
 801831e:	d10c      	bne.n	801833a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018320:	888b      	ldrh	r3, [r1, #4]
 8018322:	8801      	ldrh	r1, [r0, #0]
 8018324:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018328:	1a5b      	subs	r3, r3, r1
 801832a:	8844      	ldrh	r4, [r0, #2]
 801832c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018330:	1a9b      	subs	r3, r3, r2
 8018332:	8004      	strh	r4, [r0, #0]
 8018334:	8081      	strh	r1, [r0, #4]
 8018336:	8043      	strh	r3, [r0, #2]
 8018338:	80c2      	strh	r2, [r0, #6]
 801833a:	bd30      	pop	{r4, r5, pc}
 801833c:	88cb      	ldrh	r3, [r1, #6]
 801833e:	8842      	ldrh	r2, [r0, #2]
 8018340:	1a9b      	subs	r3, r3, r2
 8018342:	88c2      	ldrh	r2, [r0, #6]
 8018344:	1a9b      	subs	r3, r3, r2
 8018346:	888a      	ldrh	r2, [r1, #4]
 8018348:	8801      	ldrh	r1, [r0, #0]
 801834a:	8043      	strh	r3, [r0, #2]
 801834c:	1a52      	subs	r2, r2, r1
 801834e:	8881      	ldrh	r1, [r0, #4]
 8018350:	1a52      	subs	r2, r2, r1
 8018352:	8002      	strh	r2, [r0, #0]
 8018354:	e7f1      	b.n	801833a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018356:	88cb      	ldrh	r3, [r1, #6]
 8018358:	8841      	ldrh	r1, [r0, #2]
 801835a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801835e:	1a5b      	subs	r3, r3, r1
 8018360:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018364:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018368:	1a9b      	subs	r3, r3, r2
 801836a:	8045      	strh	r5, [r0, #2]
 801836c:	8082      	strh	r2, [r0, #4]
 801836e:	8003      	strh	r3, [r0, #0]
 8018370:	80c4      	strh	r4, [r0, #6]
 8018372:	e7e2      	b.n	801833a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018374 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018378:	b09f      	sub	sp, #124	; 0x7c
 801837a:	9116      	str	r1, [sp, #88]	; 0x58
 801837c:	9317      	str	r3, [sp, #92]	; 0x5c
 801837e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018382:	8809      	ldrh	r1, [r1, #0]
 8018384:	889b      	ldrh	r3, [r3, #4]
 8018386:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801838a:	440b      	add	r3, r1
 801838c:	9212      	str	r2, [sp, #72]	; 0x48
 801838e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018392:	b21b      	sxth	r3, r3
 8018394:	9011      	str	r0, [sp, #68]	; 0x44
 8018396:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801839a:	9310      	str	r3, [sp, #64]	; 0x40
 801839c:	f8d8 3000 	ldr.w	r3, [r8]
 80183a0:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80183a4:	7b19      	ldrb	r1, [r3, #12]
 80183a6:	7adb      	ldrb	r3, [r3, #11]
 80183a8:	9114      	str	r1, [sp, #80]	; 0x50
 80183aa:	9315      	str	r3, [sp, #84]	; 0x54
 80183ac:	2a00      	cmp	r2, #0
 80183ae:	d06a      	beq.n	8018486 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80183b0:	f898 3010 	ldrb.w	r3, [r8, #16]
 80183b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80183b6:	2b06      	cmp	r3, #6
 80183b8:	bf14      	ite	ne
 80183ba:	2301      	movne	r3, #1
 80183bc:	2302      	moveq	r3, #2
 80183be:	4413      	add	r3, r2
 80183c0:	f04f 0900 	mov.w	r9, #0
 80183c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80183c6:	464c      	mov	r4, r9
 80183c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80183cc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80183d0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80183d4:	4293      	cmp	r3, r2
 80183d6:	f280 808f 	bge.w	80184f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80183da:	2300      	movs	r3, #0
 80183dc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80183e0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80183e4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80183e8:	429c      	cmp	r4, r3
 80183ea:	d006      	beq.n	80183fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80183ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183ee:	f242 020b 	movw	r2, #8203	; 0x200b
 80183f2:	4294      	cmp	r4, r2
 80183f4:	bf18      	it	ne
 80183f6:	4623      	movne	r3, r4
 80183f8:	930d      	str	r3, [sp, #52]	; 0x34
 80183fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183fc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80183fe:	f8d8 2000 	ldr.w	r2, [r8]
 8018402:	428b      	cmp	r3, r1
 8018404:	db41      	blt.n	801848a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8018406:	6813      	ldr	r3, [r2, #0]
 8018408:	4610      	mov	r0, r2
 801840a:	695b      	ldr	r3, [r3, #20]
 801840c:	4798      	blx	r3
 801840e:	4604      	mov	r4, r0
 8018410:	f8d8 0000 	ldr.w	r0, [r8]
 8018414:	aa1d      	add	r2, sp, #116	; 0x74
 8018416:	4621      	mov	r1, r4
 8018418:	6803      	ldr	r3, [r0, #0]
 801841a:	689d      	ldr	r5, [r3, #8]
 801841c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018420:	47a8      	blx	r5
 8018422:	901c      	str	r0, [sp, #112]	; 0x70
 8018424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018428:	429c      	cmp	r4, r3
 801842a:	f000 80ec 	beq.w	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801842e:	f242 030b 	movw	r3, #8203	; 0x200b
 8018432:	429c      	cmp	r4, r3
 8018434:	f000 80e7 	beq.w	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018438:	2c00      	cmp	r4, #0
 801843a:	f000 80f9 	beq.w	8018630 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801843e:	2c0a      	cmp	r4, #10
 8018440:	d060      	beq.n	8018504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8018442:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018444:	b36a      	cbz	r2, 80184a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018446:	8894      	ldrh	r4, [r2, #4]
 8018448:	f1bb 0f00 	cmp.w	fp, #0
 801844c:	d03b      	beq.n	80184c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801844e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018452:	f1bb 0f01 	cmp.w	fp, #1
 8018456:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801845a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801845e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018462:	ea49 0903 	orr.w	r9, r9, r3
 8018466:	d134      	bne.n	80184d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8018468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801846a:	eba6 0609 	sub.w	r6, r6, r9
 801846e:	2b00      	cmp	r3, #0
 8018470:	d14f      	bne.n	8018512 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8018472:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018474:	eb09 0306 	add.w	r3, r9, r6
 8018478:	4413      	add	r3, r2
 801847a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801847c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018480:	4293      	cmp	r3, r2
 8018482:	da51      	bge.n	8018528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8018484:	e038      	b.n	80184f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8018486:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018488:	e79a      	b.n	80183c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801848a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801848e:	4659      	mov	r1, fp
 8018490:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018492:	9301      	str	r3, [sp, #4]
 8018494:	ab1d      	add	r3, sp, #116	; 0x74
 8018496:	9300      	str	r3, [sp, #0]
 8018498:	ab1c      	add	r3, sp, #112	; 0x70
 801849a:	f002 ff3a 	bl	801b312 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801849e:	4604      	mov	r4, r0
 80184a0:	e7c0      	b.n	8018424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80184a2:	f8d8 0000 	ldr.w	r0, [r8]
 80184a6:	6803      	ldr	r3, [r0, #0]
 80184a8:	691b      	ldr	r3, [r3, #16]
 80184aa:	4798      	blx	r3
 80184ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80184b0:	4298      	cmp	r0, r3
 80184b2:	f000 80a8 	beq.w	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80184b6:	f242 030b 	movw	r3, #8203	; 0x200b
 80184ba:	4298      	cmp	r0, r3
 80184bc:	f000 80a3 	beq.w	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80184c0:	f1bb 0f00 	cmp.w	fp, #0
 80184c4:	d100      	bne.n	80184c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80184c6:	444e      	add	r6, r9
 80184c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80184ca:	2a00      	cmp	r2, #0
 80184cc:	d1bf      	bne.n	801844e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80184ce:	4691      	mov	r9, r2
 80184d0:	e099      	b.n	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80184d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f000 80ad 	beq.w	8018634 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80184da:	f1bb 0f00 	cmp.w	fp, #0
 80184de:	d118      	bne.n	8018512 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80184e0:	f8d8 0000 	ldr.w	r0, [r8]
 80184e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80184e6:	6803      	ldr	r3, [r0, #0]
 80184e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ea:	4798      	blx	r3
 80184ec:	4406      	add	r6, r0
 80184ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184f2:	1af3      	subs	r3, r6, r3
 80184f4:	4293      	cmp	r3, r2
 80184f6:	dd17      	ble.n	8018528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80184f8:	2c00      	cmp	r4, #0
 80184fa:	f000 8099 	beq.w	8018630 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80184fe:	2c0a      	cmp	r4, #10
 8018500:	f040 8087 	bne.w	8018612 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8018504:	240a      	movs	r4, #10
 8018506:	fab4 f084 	clz	r0, r4
 801850a:	0940      	lsrs	r0, r0, #5
 801850c:	b01f      	add	sp, #124	; 0x7c
 801850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018512:	f8d8 0000 	ldr.w	r0, [r8]
 8018516:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018518:	6803      	ldr	r3, [r0, #0]
 801851a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801851c:	4798      	blx	r3
 801851e:	f1bb 0f01 	cmp.w	fp, #1
 8018522:	eba6 0600 	sub.w	r6, r6, r0
 8018526:	d0a4      	beq.n	8018472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8018528:	981c      	ldr	r0, [sp, #112]	; 0x70
 801852a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801852c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018530:	f9b3 7000 	ldrsh.w	r7, [r3]
 8018534:	7b43      	ldrb	r3, [r0, #13]
 8018536:	4431      	add	r1, r6
 8018538:	015b      	lsls	r3, r3, #5
 801853a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801853e:	7983      	ldrb	r3, [r0, #6]
 8018540:	4313      	orrs	r3, r2
 8018542:	440b      	add	r3, r1
 8018544:	42bb      	cmp	r3, r7
 8018546:	db5e      	blt.n	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801854a:	4299      	cmp	r1, r3
 801854c:	da5b      	bge.n	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801854e:	f8d8 0000 	ldr.w	r0, [r8]
 8018552:	42b7      	cmp	r7, r6
 8018554:	6803      	ldr	r3, [r0, #0]
 8018556:	bfcc      	ite	gt
 8018558:	1bbf      	subgt	r7, r7, r6
 801855a:	2700      	movle	r7, #0
 801855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801855e:	bfc8      	it	gt
 8018560:	b2bf      	uxthgt	r7, r7
 8018562:	4798      	blx	r3
 8018564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018566:	7b5a      	ldrb	r2, [r3, #13]
 8018568:	00d1      	lsls	r1, r2, #3
 801856a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801856e:	7a19      	ldrb	r1, [r3, #8]
 8018570:	4329      	orrs	r1, r5
 8018572:	0655      	lsls	r5, r2, #25
 8018574:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018576:	bf48      	it	mi
 8018578:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801857c:	4405      	add	r5, r0
 801857e:	bf48      	it	mi
 8018580:	b209      	sxthmi	r1, r1
 8018582:	1a6d      	subs	r5, r5, r1
 8018584:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018586:	b2ad      	uxth	r5, r5
 8018588:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801858c:	fa0f fa85 	sxth.w	sl, r5
 8018590:	4551      	cmp	r1, sl
 8018592:	dd3c      	ble.n	801860e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8018594:	0112      	lsls	r2, r2, #4
 8018596:	79d8      	ldrb	r0, [r3, #7]
 8018598:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801859c:	4302      	orrs	r2, r0
 801859e:	4492      	add	sl, r2
 80185a0:	4551      	cmp	r1, sl
 80185a2:	dc30      	bgt.n	8018606 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80185a4:	1b4d      	subs	r5, r1, r5
 80185a6:	468a      	mov	sl, r1
 80185a8:	b22d      	sxth	r5, r5
 80185aa:	9319      	str	r3, [sp, #100]	; 0x64
 80185ac:	b2ad      	uxth	r5, r5
 80185ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185b0:	f8d8 0000 	ldr.w	r0, [r8]
 80185b4:	681a      	ldr	r2, [r3, #0]
 80185b6:	6801      	ldr	r1, [r0, #0]
 80185b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80185ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80185bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80185be:	9218      	str	r2, [sp, #96]	; 0x60
 80185c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80185c2:	4788      	blx	r1
 80185c4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80185c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80185ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80185cc:	f898 100e 	ldrb.w	r1, [r8, #14]
 80185d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80185d2:	910a      	str	r1, [sp, #40]	; 0x28
 80185d4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80185d8:	9109      	str	r1, [sp, #36]	; 0x24
 80185da:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80185de:	9305      	str	r3, [sp, #20]
 80185e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80185e2:	9206      	str	r2, [sp, #24]
 80185e4:	9304      	str	r3, [sp, #16]
 80185e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80185e8:	f8cd a004 	str.w	sl, [sp, #4]
 80185ec:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80185f0:	4437      	add	r7, r6
 80185f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80185f4:	b23f      	sxth	r7, r7
 80185f6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80185fa:	9700      	str	r7, [sp, #0]
 80185fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80185fe:	681a      	ldr	r2, [r3, #0]
 8018600:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	47a8      	blx	r5
 8018606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018608:	3301      	adds	r3, #1
 801860a:	930e      	str	r3, [sp, #56]	; 0x38
 801860c:	e6e0      	b.n	80183d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801860e:	2500      	movs	r5, #0
 8018610:	e7cb      	b.n	80185aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8018612:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018614:	3501      	adds	r5, #1
 8018616:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018618:	429d      	cmp	r5, r3
 801861a:	f6bf af74 	bge.w	8018506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801861e:	4659      	mov	r1, fp
 8018620:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018622:	f7ee ffa5 	bl	8007570 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018626:	4604      	mov	r4, r0
 8018628:	b110      	cbz	r0, 8018630 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801862a:	280a      	cmp	r0, #10
 801862c:	d1f2      	bne.n	8018614 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801862e:	e769      	b.n	8018504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8018630:	2400      	movs	r4, #0
 8018632:	e768      	b.n	8018506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8018634:	f1bb 0f00 	cmp.w	fp, #0
 8018638:	f43f af59 	beq.w	80184ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801863c:	e774      	b.n	8018528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801863e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801863e:	b530      	push	{r4, r5, lr}
 8018640:	8ac4      	ldrh	r4, [r0, #22]
 8018642:	8b45      	ldrh	r5, [r0, #26]
 8018644:	8343      	strh	r3, [r0, #26]
 8018646:	442c      	add	r4, r5
 8018648:	1ae4      	subs	r4, r4, r3
 801864a:	8b83      	ldrh	r3, [r0, #28]
 801864c:	82c4      	strh	r4, [r0, #22]
 801864e:	8b04      	ldrh	r4, [r0, #24]
 8018650:	4422      	add	r2, r4
 8018652:	440c      	add	r4, r1
 8018654:	1a59      	subs	r1, r3, r1
 8018656:	83c2      	strh	r2, [r0, #30]
 8018658:	8304      	strh	r4, [r0, #24]
 801865a:	8381      	strh	r1, [r0, #28]
 801865c:	bd30      	pop	{r4, r5, pc}

0801865e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801865e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018662:	4604      	mov	r4, r0
 8018664:	8a47      	ldrh	r7, [r0, #18]
 8018666:	68c0      	ldr	r0, [r0, #12]
 8018668:	b085      	sub	sp, #20
 801866a:	6803      	ldr	r3, [r0, #0]
 801866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801866e:	4798      	blx	r3
 8018670:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8018674:	7a63      	ldrb	r3, [r4, #9]
 8018676:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801867a:	3b01      	subs	r3, #1
 801867c:	42b7      	cmp	r7, r6
 801867e:	bfac      	ite	ge
 8018680:	f04f 0900 	movge.w	r9, #0
 8018684:	f04f 0901 	movlt.w	r9, #1
 8018688:	2b05      	cmp	r3, #5
 801868a:	d804      	bhi.n	8018696 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801868c:	e8df f003 	tbb	[pc, r3]
 8018690:	470f0854 	.word	0x470f0854
 8018694:	4c4c      	.short	0x4c4c
 8018696:	2500      	movs	r5, #0
 8018698:	46a9      	mov	r9, r5
 801869a:	462e      	mov	r6, r5
 801869c:	462f      	mov	r7, r5
 801869e:	e00e      	b.n	80186be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80186a0:	42b7      	cmp	r7, r6
 80186a2:	f04f 0500 	mov.w	r5, #0
 80186a6:	bfb4      	ite	lt
 80186a8:	2600      	movlt	r6, #0
 80186aa:	2601      	movge	r6, #1
 80186ac:	e7f6      	b.n	801869c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80186ae:	42b7      	cmp	r7, r6
 80186b0:	464d      	mov	r5, r9
 80186b2:	f04f 0900 	mov.w	r9, #0
 80186b6:	bfb4      	ite	lt
 80186b8:	2600      	movlt	r6, #0
 80186ba:	2601      	movge	r6, #1
 80186bc:	464f      	mov	r7, r9
 80186be:	f04f 0800 	mov.w	r8, #0
 80186c2:	f8a4 8016 	strh.w	r8, [r4, #22]
 80186c6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80186ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80186ce:	2300      	movs	r3, #0
 80186d0:	9303      	str	r3, [sp, #12]
 80186d2:	8823      	ldrh	r3, [r4, #0]
 80186d4:	2b20      	cmp	r3, #32
 80186d6:	d033      	beq.n	8018740 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80186d8:	f242 010b 	movw	r1, #8203	; 0x200b
 80186dc:	1a5a      	subs	r2, r3, r1
 80186de:	f1d2 0a00 	rsbs	sl, r2, #0
 80186e2:	eb4a 0a02 	adc.w	sl, sl, r2
 80186e6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80186ea:	4293      	cmp	r3, r2
 80186ec:	d008      	beq.n	8018700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80186ee:	428b      	cmp	r3, r1
 80186f0:	9a01      	ldr	r2, [sp, #4]
 80186f2:	bf0e      	itee	eq
 80186f4:	f04f 0a01 	moveq.w	sl, #1
 80186f8:	461a      	movne	r2, r3
 80186fa:	f04f 0a00 	movne.w	sl, #0
 80186fe:	9201      	str	r2, [sp, #4]
 8018700:	ab03      	add	r3, sp, #12
 8018702:	68e2      	ldr	r2, [r4, #12]
 8018704:	7a21      	ldrb	r1, [r4, #8]
 8018706:	6860      	ldr	r0, [r4, #4]
 8018708:	f002 fdba 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801870c:	8020      	strh	r0, [r4, #0]
 801870e:	b9d8      	cbnz	r0, 8018748 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8018710:	8ba2      	ldrh	r2, [r4, #28]
 8018712:	2300      	movs	r3, #0
 8018714:	4611      	mov	r1, r2
 8018716:	4620      	mov	r0, r4
 8018718:	f7ff ff91 	bl	801863e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801871c:	e06e      	b.n	80187fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801871e:	2500      	movs	r5, #0
 8018720:	2701      	movs	r7, #1
 8018722:	46a9      	mov	r9, r5
 8018724:	462e      	mov	r6, r5
 8018726:	e7ca      	b.n	80186be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018728:	42b7      	cmp	r7, r6
 801872a:	f04f 0500 	mov.w	r5, #0
 801872e:	bfb4      	ite	lt
 8018730:	2700      	movlt	r7, #0
 8018732:	2701      	movge	r7, #1
 8018734:	462e      	mov	r6, r5
 8018736:	e7c2      	b.n	80186be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018738:	2500      	movs	r5, #0
 801873a:	2601      	movs	r6, #1
 801873c:	46a9      	mov	r9, r5
 801873e:	e7ad      	b.n	801869c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018740:	9301      	str	r3, [sp, #4]
 8018742:	f04f 0a01 	mov.w	sl, #1
 8018746:	e7db      	b.n	8018700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018748:	8b63      	ldrh	r3, [r4, #26]
 801874a:	280a      	cmp	r0, #10
 801874c:	f103 0301 	add.w	r3, r3, #1
 8018750:	8363      	strh	r3, [r4, #26]
 8018752:	d0dd      	beq.n	8018710 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8018754:	9a03      	ldr	r2, [sp, #12]
 8018756:	bb62      	cbnz	r2, 80187b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8018758:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801875c:	4298      	cmp	r0, r3
 801875e:	d003      	beq.n	8018768 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018760:	f242 030b 	movw	r3, #8203	; 0x200b
 8018764:	4298      	cmp	r0, r3
 8018766:	d1b2      	bne.n	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018768:	8823      	ldrh	r3, [r4, #0]
 801876a:	8ba1      	ldrh	r1, [r4, #28]
 801876c:	2b20      	cmp	r3, #32
 801876e:	d003      	beq.n	8018778 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8018770:	f242 000b 	movw	r0, #8203	; 0x200b
 8018774:	4283      	cmp	r3, r0
 8018776:	d131      	bne.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8018778:	f1ba 0f00 	cmp.w	sl, #0
 801877c:	bf0a      	itet	eq
 801877e:	4688      	moveq	r8, r1
 8018780:	4650      	movne	r0, sl
 8018782:	2001      	moveq	r0, #1
 8018784:	440a      	add	r2, r1
 8018786:	8b23      	ldrh	r3, [r4, #24]
 8018788:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801878c:	b292      	uxth	r2, r2
 801878e:	83a2      	strh	r2, [r4, #28]
 8018790:	4413      	add	r3, r2
 8018792:	f1b9 0f00 	cmp.w	r9, #0
 8018796:	d102      	bne.n	801879e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8018798:	2d00      	cmp	r5, #0
 801879a:	d042      	beq.n	8018822 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801879c:	b300      	cbz	r0, 80187e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801879e:	8c21      	ldrh	r1, [r4, #32]
 80187a0:	4419      	add	r1, r3
 80187a2:	458c      	cmp	ip, r1
 80187a4:	da37      	bge.n	8018816 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80187a6:	8ae1      	ldrh	r1, [r4, #22]
 80187a8:	2900      	cmp	r1, #0
 80187aa:	d034      	beq.n	8018816 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80187ac:	4563      	cmp	r3, ip
 80187ae:	dd8e      	ble.n	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80187b0:	e01d      	b.n	80187ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80187b2:	8893      	ldrh	r3, [r2, #4]
 80187b4:	9901      	ldr	r1, [sp, #4]
 80187b6:	8023      	strh	r3, [r4, #0]
 80187b8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80187bc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80187c0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 80187c4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80187c8:	ea4b 0b00 	orr.w	fp, fp, r0
 80187cc:	68e0      	ldr	r0, [r4, #12]
 80187ce:	6803      	ldr	r3, [r0, #0]
 80187d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d2:	4798      	blx	r3
 80187d4:	eb0b 0200 	add.w	r2, fp, r0
 80187d8:	b292      	uxth	r2, r2
 80187da:	e7c5      	b.n	8018768 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80187dc:	2000      	movs	r0, #0
 80187de:	e7d1      	b.n	8018784 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80187e0:	4563      	cmp	r3, ip
 80187e2:	f77f af74 	ble.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80187e6:	8ae3      	ldrh	r3, [r4, #22]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	f43f af70 	beq.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80187ee:	2301      	movs	r3, #1
 80187f0:	8c22      	ldrh	r2, [r4, #32]
 80187f2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80187f6:	8be3      	ldrh	r3, [r4, #30]
 80187f8:	4413      	add	r3, r2
 80187fa:	83e3      	strh	r3, [r4, #30]
 80187fc:	68e0      	ldr	r0, [r4, #12]
 80187fe:	6803      	ldr	r3, [r0, #0]
 8018800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018802:	4798      	blx	r3
 8018804:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8018808:	4418      	add	r0, r3
 801880a:	8a63      	ldrh	r3, [r4, #18]
 801880c:	1a18      	subs	r0, r3, r0
 801880e:	8260      	strh	r0, [r4, #18]
 8018810:	b005      	add	sp, #20
 8018812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018816:	2300      	movs	r3, #0
 8018818:	4611      	mov	r1, r2
 801881a:	4620      	mov	r0, r4
 801881c:	f7ff ff0f 	bl	801863e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018820:	e755      	b.n	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018822:	4563      	cmp	r3, ip
 8018824:	dd14      	ble.n	8018850 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8018826:	b117      	cbz	r7, 801882e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8018828:	2301      	movs	r3, #1
 801882a:	460a      	mov	r2, r1
 801882c:	e772      	b.n	8018714 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801882e:	2e00      	cmp	r6, #0
 8018830:	f43f af4d 	beq.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018834:	2800      	cmp	r0, #0
 8018836:	f47f af4a 	bne.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801883a:	f1ba 0f00 	cmp.w	sl, #0
 801883e:	d002      	beq.n	8018846 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8018840:	2301      	movs	r3, #1
 8018842:	4642      	mov	r2, r8
 8018844:	e767      	b.n	8018716 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8018846:	8ae3      	ldrh	r3, [r4, #22]
 8018848:	2b00      	cmp	r3, #0
 801884a:	f43f af40 	beq.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801884e:	e7d5      	b.n	80187fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018850:	2800      	cmp	r0, #0
 8018852:	f47f af3c 	bne.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018856:	f1ba 0f00 	cmp.w	sl, #0
 801885a:	f43f af38 	beq.w	80186ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801885e:	2301      	movs	r3, #1
 8018860:	4642      	mov	r2, r8
 8018862:	e7da      	b.n	801881a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08018864 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018866:	4605      	mov	r5, r0
 8018868:	b08f      	sub	sp, #60	; 0x3c
 801886a:	4617      	mov	r7, r2
 801886c:	461c      	mov	r4, r3
 801886e:	460e      	mov	r6, r1
 8018870:	b1d1      	cbz	r1, 80188a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	4620      	mov	r0, r4
 8018876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018878:	4798      	blx	r3
 801887a:	4240      	negs	r0, r0
 801887c:	9603      	str	r6, [sp, #12]
 801887e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018882:	b200      	sxth	r0, r0
 8018884:	9700      	str	r7, [sp, #0]
 8018886:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801888a:	4629      	mov	r1, r5
 801888c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8018890:	2401      	movs	r4, #1
 8018892:	a805      	add	r0, sp, #20
 8018894:	f7ff fcbe 	bl	8018214 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018898:	a805      	add	r0, sp, #20
 801889a:	f7ff fee0 	bl	801865e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801889e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80188a2:	b163      	cbz	r3, 80188be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80188a4:	3401      	adds	r4, #1
 80188a6:	e7f7      	b.n	8018898 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80188a8:	2401      	movs	r4, #1
 80188aa:	f002 fdb5 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80188ae:	280a      	cmp	r0, #10
 80188b0:	4628      	mov	r0, r5
 80188b2:	bf08      	it	eq
 80188b4:	3401      	addeq	r4, #1
 80188b6:	f002 fdaf 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	d1f7      	bne.n	80188ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80188be:	b2a0      	uxth	r0, r4
 80188c0:	b00f      	add	sp, #60	; 0x3c
 80188c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80188c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c8:	b0e3      	sub	sp, #396	; 0x18c
 80188ca:	461c      	mov	r4, r3
 80188cc:	4683      	mov	fp, r0
 80188ce:	4688      	mov	r8, r1
 80188d0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	f000 8112 	beq.w	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80188d8:	6823      	ldr	r3, [r4, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	f000 810e 	beq.w	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80188e0:	7ba3      	ldrb	r3, [r4, #14]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	f000 810a 	beq.w	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80188e8:	ad0a      	add	r5, sp, #40	; 0x28
 80188ea:	6810      	ldr	r0, [r2, #0]
 80188ec:	6851      	ldr	r1, [r2, #4]
 80188ee:	462b      	mov	r3, r5
 80188f0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80188f4:	c303      	stmia	r3!, {r0, r1}
 80188f6:	2100      	movs	r1, #0
 80188f8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80188fc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018900:	4628      	mov	r0, r5
 8018902:	910c      	str	r1, [sp, #48]	; 0x30
 8018904:	a90c      	add	r1, sp, #48	; 0x30
 8018906:	79a2      	ldrb	r2, [r4, #6]
 8018908:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801890c:	f7ff fd01 	bl	8018312 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018910:	a90c      	add	r1, sp, #48	; 0x30
 8018912:	79a2      	ldrb	r2, [r4, #6]
 8018914:	4608      	mov	r0, r1
 8018916:	f7ff fcfc 	bl	8018312 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801891a:	a817      	add	r0, sp, #92	; 0x5c
 801891c:	f002 f94f 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 8018920:	6820      	ldr	r0, [r4, #0]
 8018922:	6803      	ldr	r3, [r0, #0]
 8018924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018926:	4798      	blx	r3
 8018928:	4606      	mov	r6, r0
 801892a:	6820      	ldr	r0, [r4, #0]
 801892c:	6803      	ldr	r3, [r0, #0]
 801892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018930:	4798      	blx	r3
 8018932:	4633      	mov	r3, r6
 8018934:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8018936:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8018938:	9000      	str	r0, [sp, #0]
 801893a:	a817      	add	r0, sp, #92	; 0x5c
 801893c:	f002 f99a 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018940:	6820      	ldr	r0, [r4, #0]
 8018942:	f894 a004 	ldrb.w	sl, [r4, #4]
 8018946:	6803      	ldr	r3, [r0, #0]
 8018948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801894a:	4798      	blx	r3
 801894c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8018950:	6823      	ldr	r3, [r4, #0]
 8018952:	4607      	mov	r7, r0
 8018954:	4406      	add	r6, r0
 8018956:	a830      	add	r0, sp, #192	; 0xc0
 8018958:	f893 9009 	ldrb.w	r9, [r3, #9]
 801895c:	f002 f92f 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 8018960:	7c23      	ldrb	r3, [r4, #16]
 8018962:	b17b      	cbz	r3, 8018984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8018964:	6820      	ldr	r0, [r4, #0]
 8018966:	6803      	ldr	r3, [r0, #0]
 8018968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801896a:	4798      	blx	r3
 801896c:	9009      	str	r0, [sp, #36]	; 0x24
 801896e:	6820      	ldr	r0, [r4, #0]
 8018970:	6802      	ldr	r2, [r0, #0]
 8018972:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018974:	4790      	blx	r2
 8018976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018978:	9000      	str	r0, [sp, #0]
 801897a:	a830      	add	r0, sp, #192	; 0xc0
 801897c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801897e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8018980:	f002 f978 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018984:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018988:	a80e      	add	r0, sp, #56	; 0x38
 801898a:	7be2      	ldrb	r2, [r4, #15]
 801898c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018990:	1a8a      	subs	r2, r1, r2
 8018992:	7c21      	ldrb	r1, [r4, #16]
 8018994:	9103      	str	r1, [sp, #12]
 8018996:	b292      	uxth	r2, r2
 8018998:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801899c:	9102      	str	r1, [sp, #8]
 801899e:	6821      	ldr	r1, [r4, #0]
 80189a0:	9101      	str	r1, [sp, #4]
 80189a2:	7961      	ldrb	r1, [r4, #5]
 80189a4:	9100      	str	r1, [sp, #0]
 80189a6:	a930      	add	r1, sp, #192	; 0xc0
 80189a8:	f7ff fc34 	bl	8018214 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80189ac:	2e00      	cmp	r6, #0
 80189ae:	dc5b      	bgt.n	8018a68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80189b0:	af17      	add	r7, sp, #92	; 0x5c
 80189b2:	f04f 0900 	mov.w	r9, #0
 80189b6:	7c23      	ldrb	r3, [r4, #16]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f000 80b1 	beq.w	8018b20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80189be:	a80e      	add	r0, sp, #56	; 0x38
 80189c0:	f7ff fe4d 	bl	801865e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80189c4:	f1ba 0f00 	cmp.w	sl, #0
 80189c8:	f000 80a5 	beq.w	8018b16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80189cc:	7c23      	ldrb	r3, [r4, #16]
 80189ce:	2264      	movs	r2, #100	; 0x64
 80189d0:	4639      	mov	r1, r7
 80189d2:	a849      	add	r0, sp, #292	; 0x124
 80189d4:	9309      	str	r3, [sp, #36]	; 0x24
 80189d6:	f00c ff10 	bl	80257fa <memcpy>
 80189da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189dc:	2b00      	cmp	r3, #0
 80189de:	f000 80a7 	beq.w	8018b30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80189e2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80189e6:	7922      	ldrb	r2, [r4, #4]
 80189e8:	2a01      	cmp	r2, #1
 80189ea:	f040 808a 	bne.w	8018b02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80189ee:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80189f2:	1ac0      	subs	r0, r0, r3
 80189f4:	2302      	movs	r3, #2
 80189f6:	fb90 f0f3 	sdiv	r0, r0, r3
 80189fa:	b200      	sxth	r0, r0
 80189fc:	7c23      	ldrb	r3, [r4, #16]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	f000 808b 	beq.w	8018b1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018a04:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8018a08:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8018a0c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018a10:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018a14:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018a18:	2100      	movs	r1, #0
 8018a1a:	4410      	add	r0, r2
 8018a1c:	4642      	mov	r2, r8
 8018a1e:	b200      	sxth	r0, r0
 8018a20:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8018a24:	9000      	str	r0, [sp, #0]
 8018a26:	4658      	mov	r0, fp
 8018a28:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8018a2c:	f7ff fca2 	bl	8018374 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d163      	bne.n	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018a34:	b2b2      	uxth	r2, r6
 8018a36:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018a3a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018a3e:	4413      	add	r3, r2
 8018a40:	1a8a      	subs	r2, r1, r2
 8018a42:	b21b      	sxth	r3, r3
 8018a44:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8018a48:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8018a4c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018a50:	2a00      	cmp	r2, #0
 8018a52:	d153      	bne.n	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018a54:	6822      	ldr	r2, [r4, #0]
 8018a56:	8869      	ldrh	r1, [r5, #2]
 8018a58:	7a12      	ldrb	r2, [r2, #8]
 8018a5a:	1a9b      	subs	r3, r3, r2
 8018a5c:	88ea      	ldrh	r2, [r5, #6]
 8018a5e:	440a      	add	r2, r1
 8018a60:	b212      	sxth	r2, r2
 8018a62:	4293      	cmp	r3, r2
 8018a64:	dda7      	ble.n	80189b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8018a66:	e049      	b.n	8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018a68:	7c23      	ldrb	r3, [r4, #16]
 8018a6a:	444f      	add	r7, r9
 8018a6c:	b1c3      	cbz	r3, 8018aa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8018a6e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8018a72:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018a76:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018a7a:	443b      	add	r3, r7
 8018a7c:	4293      	cmp	r3, r2
 8018a7e:	da97      	bge.n	80189b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018a80:	a80e      	add	r0, sp, #56	; 0x38
 8018a82:	f7ff fdec 	bl	801865e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018a86:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8018a8a:	3b01      	subs	r3, #1
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	454b      	cmp	r3, r9
 8018a90:	9309      	str	r3, [sp, #36]	; 0x24
 8018a92:	d021      	beq.n	8018ad8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8018a94:	7961      	ldrb	r1, [r4, #5]
 8018a96:	a817      	add	r0, sp, #92	; 0x5c
 8018a98:	f7ee fd6a 	bl	8007570 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a9e:	e7f4      	b.n	8018a8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8018aa0:	fa1f f986 	uxth.w	r9, r6
 8018aa4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018aa8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018aac:	443b      	add	r3, r7
 8018aae:	4293      	cmp	r3, r2
 8018ab0:	f6bf af7e 	bge.w	80189b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018ab4:	a817      	add	r0, sp, #92	; 0x5c
 8018ab6:	f002 fcaf 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018aba:	b1f8      	cbz	r0, 8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018abc:	280a      	cmp	r0, #10
 8018abe:	d1f1      	bne.n	8018aa4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8018ac0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018ac4:	444b      	add	r3, r9
 8018ac6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018aca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018ace:	eba3 0309 	sub.w	r3, r3, r9
 8018ad2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ad6:	e7e5      	b.n	8018aa4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8018ad8:	b2b3      	uxth	r3, r6
 8018ada:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018ade:	441a      	add	r2, r3
 8018ae0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018ae4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8018ae8:	1ad3      	subs	r3, r2, r3
 8018aea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018aee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018af2:	b11b      	cbz	r3, 8018afc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018af4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d0ba      	beq.n	8018a72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8018afc:	b063      	add	sp, #396	; 0x18c
 8018afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b02:	2a02      	cmp	r2, #2
 8018b04:	d105      	bne.n	8018b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018b06:	7be2      	ldrb	r2, [r4, #15]
 8018b08:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018b0c:	1a80      	subs	r0, r0, r2
 8018b0e:	1ac0      	subs	r0, r0, r3
 8018b10:	e773      	b.n	80189fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8018b12:	2000      	movs	r0, #0
 8018b14:	e772      	b.n	80189fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018b16:	7be0      	ldrb	r0, [r4, #15]
 8018b18:	e770      	b.n	80189fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018b1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018b1e:	e773      	b.n	8018a08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018b20:	f1ba 0f00 	cmp.w	sl, #0
 8018b24:	d0f7      	beq.n	8018b16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018b26:	2264      	movs	r2, #100	; 0x64
 8018b28:	4639      	mov	r1, r7
 8018b2a:	a849      	add	r0, sp, #292	; 0x124
 8018b2c:	f00c fe65 	bl	80257fa <memcpy>
 8018b30:	2300      	movs	r3, #0
 8018b32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018b36:	6821      	ldr	r1, [r4, #0]
 8018b38:	a849      	add	r0, sp, #292	; 0x124
 8018b3a:	f7ff fbae 	bl	801829a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018b3e:	b203      	sxth	r3, r0
 8018b40:	e751      	b.n	80189e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08018b42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018b42:	2b03      	cmp	r3, #3
 8018b44:	d818      	bhi.n	8018b78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018b46:	e8df f003 	tbb	[pc, r3]
 8018b4a:	0602      	.short	0x0602
 8018b4c:	130d      	.short	0x130d
 8018b4e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018b52:	1850      	adds	r0, r2, r1
 8018b54:	4770      	bx	lr
 8018b56:	8803      	ldrh	r3, [r0, #0]
 8018b58:	8880      	ldrh	r0, [r0, #4]
 8018b5a:	4418      	add	r0, r3
 8018b5c:	b200      	sxth	r0, r0
 8018b5e:	1a80      	subs	r0, r0, r2
 8018b60:	3801      	subs	r0, #1
 8018b62:	4770      	bx	lr
 8018b64:	8803      	ldrh	r3, [r0, #0]
 8018b66:	8880      	ldrh	r0, [r0, #4]
 8018b68:	4418      	add	r0, r3
 8018b6a:	b200      	sxth	r0, r0
 8018b6c:	1a40      	subs	r0, r0, r1
 8018b6e:	e7f7      	b.n	8018b60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018b70:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018b74:	4410      	add	r0, r2
 8018b76:	4770      	bx	lr
 8018b78:	2000      	movs	r0, #0
 8018b7a:	4770      	bx	lr

08018b7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018b7c:	2b03      	cmp	r3, #3
 8018b7e:	d817      	bhi.n	8018bb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8018b80:	e8df f003 	tbb	[pc, r3]
 8018b84:	10090602 	.word	0x10090602
 8018b88:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018b8c:	1850      	adds	r0, r2, r1
 8018b8e:	4770      	bx	lr
 8018b90:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018b94:	e7fa      	b.n	8018b8c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018b96:	8843      	ldrh	r3, [r0, #2]
 8018b98:	88c0      	ldrh	r0, [r0, #6]
 8018b9a:	4418      	add	r0, r3
 8018b9c:	b200      	sxth	r0, r0
 8018b9e:	1a80      	subs	r0, r0, r2
 8018ba0:	3801      	subs	r0, #1
 8018ba2:	4770      	bx	lr
 8018ba4:	8843      	ldrh	r3, [r0, #2]
 8018ba6:	88c0      	ldrh	r0, [r0, #6]
 8018ba8:	4418      	add	r0, r3
 8018baa:	b200      	sxth	r0, r0
 8018bac:	1a40      	subs	r0, r0, r1
 8018bae:	e7f7      	b.n	8018ba0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018bb0:	2000      	movs	r0, #0
 8018bb2:	4770      	bx	lr

08018bb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018bb4:	4b01      	ldr	r3, [pc, #4]	; (8018bbc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	601a      	str	r2, [r3, #0]
 8018bba:	4770      	bx	lr
 8018bbc:	24006d84 	.word	0x24006d84

08018bc0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	b1c8      	cbz	r0, 8018bf8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018bc4:	0c02      	lsrs	r2, r0, #16
 8018bc6:	0412      	lsls	r2, r2, #16
 8018bc8:	b9a2      	cbnz	r2, 8018bf4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8018bca:	0403      	lsls	r3, r0, #16
 8018bcc:	2010      	movs	r0, #16
 8018bce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018bd2:	bf04      	itt	eq
 8018bd4:	021b      	lsleq	r3, r3, #8
 8018bd6:	3008      	addeq	r0, #8
 8018bd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018bdc:	bf04      	itt	eq
 8018bde:	011b      	lsleq	r3, r3, #4
 8018be0:	3004      	addeq	r0, #4
 8018be2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018be6:	bf04      	itt	eq
 8018be8:	009b      	lsleq	r3, r3, #2
 8018bea:	3002      	addeq	r0, #2
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	db04      	blt.n	8018bfa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018bf0:	3001      	adds	r0, #1
 8018bf2:	4770      	bx	lr
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	e7ea      	b.n	8018bce <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018bf8:	2020      	movs	r0, #32
 8018bfa:	4770      	bx	lr

08018bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c00:	b087      	sub	sp, #28
 8018c02:	460d      	mov	r5, r1
 8018c04:	4616      	mov	r6, r2
 8018c06:	4698      	mov	r8, r3
 8018c08:	4601      	mov	r1, r0
 8018c0a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018c0e:	b120      	cbz	r0, 8018c1a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018c10:	b11a      	cbz	r2, 8018c1a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018c12:	2d1f      	cmp	r5, #31
 8018c14:	d801      	bhi.n	8018c1a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018c16:	2b1f      	cmp	r3, #31
 8018c18:	d904      	bls.n	8018c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8018c1a:	2000      	movs	r0, #0
 8018c1c:	6038      	str	r0, [r7, #0]
 8018c1e:	b007      	add	sp, #28
 8018c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c24:	b97d      	cbnz	r5, 8018c46 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8018c26:	b143      	cbz	r3, 8018c3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8018c28:	4602      	mov	r2, r0
 8018c2a:	462b      	mov	r3, r5
 8018c2c:	4641      	mov	r1, r8
 8018c2e:	4630      	mov	r0, r6
 8018c30:	e9cd 4700 	strd	r4, r7, [sp]
 8018c34:	f7ff ffe2 	bl	8018bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018c38:	e7f1      	b.n	8018c1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018c42:	603b      	str	r3, [r7, #0]
 8018c44:	e7eb      	b.n	8018c1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018c46:	fa32 fa05 	lsrs.w	sl, r2, r5
 8018c4a:	d106      	bne.n	8018c5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8018c4c:	4346      	muls	r6, r0
 8018c4e:	fbb6 f0f4 	udiv	r0, r6, r4
 8018c52:	fb04 6610 	mls	r6, r4, r0, r6
 8018c56:	603e      	str	r6, [r7, #0]
 8018c58:	e7e1      	b.n	8018c1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018c5a:	2201      	movs	r2, #1
 8018c5c:	fa00 fb05 	lsl.w	fp, r0, r5
 8018c60:	40aa      	lsls	r2, r5
 8018c62:	fbbb f9f4 	udiv	r9, fp, r4
 8018c66:	3a01      	subs	r2, #1
 8018c68:	fb0a f309 	mul.w	r3, sl, r9
 8018c6c:	fb04 b919 	mls	r9, r4, r9, fp
 8018c70:	4016      	ands	r6, r2
 8018c72:	9303      	str	r3, [sp, #12]
 8018c74:	4630      	mov	r0, r6
 8018c76:	f7ff ffa3 	bl	8018bc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018c7a:	462b      	mov	r3, r5
 8018c7c:	460a      	mov	r2, r1
 8018c7e:	4601      	mov	r1, r0
 8018c80:	4630      	mov	r0, r6
 8018c82:	e9cd 4700 	strd	r4, r7, [sp]
 8018c86:	f7ff ffb9 	bl	8018bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018c8a:	4606      	mov	r6, r0
 8018c8c:	4648      	mov	r0, r9
 8018c8e:	eb05 0108 	add.w	r1, r5, r8
 8018c92:	f7ff ff95 	bl	8018bc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018c96:	ab05      	add	r3, sp, #20
 8018c98:	464a      	mov	r2, r9
 8018c9a:	e9cd 4300 	strd	r4, r3, [sp]
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	4650      	mov	r0, sl
 8018ca2:	f7ff ffab 	bl	8018bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018ca6:	6839      	ldr	r1, [r7, #0]
 8018ca8:	9a05      	ldr	r2, [sp, #20]
 8018caa:	9b03      	ldr	r3, [sp, #12]
 8018cac:	4411      	add	r1, r2
 8018cae:	fbb1 f2f4 	udiv	r2, r1, r4
 8018cb2:	18d3      	adds	r3, r2, r3
 8018cb4:	fb04 1412 	mls	r4, r4, r2, r1
 8018cb8:	441e      	add	r6, r3
 8018cba:	603c      	str	r4, [r7, #0]
 8018cbc:	4430      	add	r0, r6
 8018cbe:	e7ae      	b.n	8018c1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08018cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cc4:	b085      	sub	sp, #20
 8018cc6:	f1b0 0900 	subs.w	r9, r0, #0
 8018cca:	461d      	mov	r5, r3
 8018ccc:	4617      	mov	r7, r2
 8018cce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018cd0:	bfbb      	ittet	lt
 8018cd2:	f1c9 0900 	rsblt	r9, r9, #0
 8018cd6:	f04f 36ff 	movlt.w	r6, #4294967295
 8018cda:	2601      	movge	r6, #1
 8018cdc:	6823      	ldrlt	r3, [r4, #0]
 8018cde:	bfbc      	itt	lt
 8018ce0:	425b      	neglt	r3, r3
 8018ce2:	6023      	strlt	r3, [r4, #0]
 8018ce4:	2a00      	cmp	r2, #0
 8018ce6:	da04      	bge.n	8018cf2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018ce8:	6823      	ldr	r3, [r4, #0]
 8018cea:	4257      	negs	r7, r2
 8018cec:	4276      	negs	r6, r6
 8018cee:	425b      	negs	r3, r3
 8018cf0:	6023      	str	r3, [r4, #0]
 8018cf2:	2d00      	cmp	r5, #0
 8018cf4:	4638      	mov	r0, r7
 8018cf6:	bfba      	itte	lt
 8018cf8:	426d      	neglt	r5, r5
 8018cfa:	f04f 38ff 	movlt.w	r8, #4294967295
 8018cfe:	f04f 0801 	movge.w	r8, #1
 8018d02:	f7ff ff5d 	bl	8018bc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018d06:	ab03      	add	r3, sp, #12
 8018d08:	463a      	mov	r2, r7
 8018d0a:	e9cd 5300 	strd	r5, r3, [sp]
 8018d0e:	4603      	mov	r3, r0
 8018d10:	4648      	mov	r0, r9
 8018d12:	f7ff ff73 	bl	8018bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018d16:	6823      	ldr	r3, [r4, #0]
 8018d18:	9a03      	ldr	r2, [sp, #12]
 8018d1a:	4546      	cmp	r6, r8
 8018d1c:	441a      	add	r2, r3
 8018d1e:	fb92 f3f5 	sdiv	r3, r2, r5
 8018d22:	4418      	add	r0, r3
 8018d24:	fb05 2313 	mls	r3, r5, r3, r2
 8018d28:	bf18      	it	ne
 8018d2a:	4240      	negne	r0, r0
 8018d2c:	1c72      	adds	r2, r6, #1
 8018d2e:	6023      	str	r3, [r4, #0]
 8018d30:	d105      	bne.n	8018d3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	f1c3 0200 	rsb	r2, r3, #0
 8018d38:	db0b      	blt.n	8018d52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018d3a:	6022      	str	r2, [r4, #0]
 8018d3c:	e006      	b.n	8018d4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018d3e:	2e01      	cmp	r6, #1
 8018d40:	d104      	bne.n	8018d4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	da02      	bge.n	8018d4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018d46:	442b      	add	r3, r5
 8018d48:	3801      	subs	r0, #1
 8018d4a:	6023      	str	r3, [r4, #0]
 8018d4c:	b005      	add	sp, #20
 8018d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d52:	3801      	subs	r0, #1
 8018d54:	1b52      	subs	r2, r2, r5
 8018d56:	e7f0      	b.n	8018d3a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08018d58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018d5c:	4c1c      	ldr	r4, [pc, #112]	; (8018dd0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018d5e:	4605      	mov	r5, r0
 8018d60:	6807      	ldr	r7, [r0, #0]
 8018d62:	69a3      	ldr	r3, [r4, #24]
 8018d64:	b92b      	cbnz	r3, 8018d72 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018d66:	6840      	ldr	r0, [r0, #4]
 8018d68:	e9c5 7000 	strd	r7, r0, [r5]
 8018d6c:	b004      	add	sp, #16
 8018d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d72:	f04f 0802 	mov.w	r8, #2
 8018d76:	68a2      	ldr	r2, [r4, #8]
 8018d78:	ae04      	add	r6, sp, #16
 8018d7a:	6820      	ldr	r0, [r4, #0]
 8018d7c:	fb93 f1f8 	sdiv	r1, r3, r8
 8018d80:	440a      	add	r2, r1
 8018d82:	69e1      	ldr	r1, [r4, #28]
 8018d84:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018d88:	463a      	mov	r2, r7
 8018d8a:	9600      	str	r6, [sp, #0]
 8018d8c:	f7ff ff98 	bl	8018cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018d90:	69a3      	ldr	r3, [r4, #24]
 8018d92:	4607      	mov	r7, r0
 8018d94:	686a      	ldr	r2, [r5, #4]
 8018d96:	6a21      	ldr	r1, [r4, #32]
 8018d98:	9600      	str	r6, [sp, #0]
 8018d9a:	6860      	ldr	r0, [r4, #4]
 8018d9c:	f7ff ff90 	bl	8018cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018da0:	69a3      	ldr	r3, [r4, #24]
 8018da2:	6962      	ldr	r2, [r4, #20]
 8018da4:	4407      	add	r7, r0
 8018da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018da8:	9600      	str	r6, [sp, #0]
 8018daa:	68e0      	ldr	r0, [r4, #12]
 8018dac:	fb93 f8f8 	sdiv	r8, r3, r8
 8018db0:	4442      	add	r2, r8
 8018db2:	9203      	str	r2, [sp, #12]
 8018db4:	682a      	ldr	r2, [r5, #0]
 8018db6:	f7ff ff83 	bl	8018cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018dba:	4680      	mov	r8, r0
 8018dbc:	9600      	str	r6, [sp, #0]
 8018dbe:	69a3      	ldr	r3, [r4, #24]
 8018dc0:	686a      	ldr	r2, [r5, #4]
 8018dc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018dc4:	6920      	ldr	r0, [r4, #16]
 8018dc6:	f7ff ff7b 	bl	8018cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018dca:	4440      	add	r0, r8
 8018dcc:	e7cc      	b.n	8018d68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018dce:	bf00      	nop
 8018dd0:	24006d88 	.word	0x24006d88

08018dd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018dd4:	4b07      	ldr	r3, [pc, #28]	; (8018df4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d109      	bne.n	8018df0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018ddc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018de0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018de4:	8003      	strh	r3, [r0, #0]
 8018de6:	4b04      	ldr	r3, [pc, #16]	; (8018df8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	3b01      	subs	r3, #1
 8018dec:	1a9b      	subs	r3, r3, r2
 8018dee:	800b      	strh	r3, [r1, #0]
 8018df0:	4770      	bx	lr
 8018df2:	bf00      	nop
 8018df4:	24006d74 	.word	0x24006d74
 8018df8:	24006d70 	.word	0x24006d70

08018dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018dfc:	4b07      	ldr	r3, [pc, #28]	; (8018e1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018dfe:	b510      	push	{r4, lr}
 8018e00:	781b      	ldrb	r3, [r3, #0]
 8018e02:	2b01      	cmp	r3, #1
 8018e04:	d108      	bne.n	8018e18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018e06:	4b06      	ldr	r3, [pc, #24]	; (8018e20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018e08:	880c      	ldrh	r4, [r1, #0]
 8018e0a:	881b      	ldrh	r3, [r3, #0]
 8018e0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018e10:	3b01      	subs	r3, #1
 8018e12:	1b1b      	subs	r3, r3, r4
 8018e14:	8003      	strh	r3, [r0, #0]
 8018e16:	800a      	strh	r2, [r1, #0]
 8018e18:	bd10      	pop	{r4, pc}
 8018e1a:	bf00      	nop
 8018e1c:	24006d74 	.word	0x24006d74
 8018e20:	24006d70 	.word	0x24006d70

08018e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018e24:	4b0a      	ldr	r3, [pc, #40]	; (8018e50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018e26:	b510      	push	{r4, lr}
 8018e28:	781b      	ldrb	r3, [r3, #0]
 8018e2a:	2b01      	cmp	r3, #1
 8018e2c:	d10e      	bne.n	8018e4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018e2e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018e32:	8843      	ldrh	r3, [r0, #2]
 8018e34:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e38:	18ca      	adds	r2, r1, r3
 8018e3a:	4b06      	ldr	r3, [pc, #24]	; (8018e54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018e3c:	8044      	strh	r4, [r0, #2]
 8018e3e:	881b      	ldrh	r3, [r3, #0]
 8018e40:	1a9b      	subs	r3, r3, r2
 8018e42:	8003      	strh	r3, [r0, #0]
 8018e44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018e48:	8081      	strh	r1, [r0, #4]
 8018e4a:	80c3      	strh	r3, [r0, #6]
 8018e4c:	bd10      	pop	{r4, pc}
 8018e4e:	bf00      	nop
 8018e50:	24006d74 	.word	0x24006d74
 8018e54:	24006d70 	.word	0x24006d70

08018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018e58:	4b08      	ldr	r3, [pc, #32]	; (8018e7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	2b01      	cmp	r3, #1
 8018e5e:	d10c      	bne.n	8018e7a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018e60:	8803      	ldrh	r3, [r0, #0]
 8018e62:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018e66:	8842      	ldrh	r2, [r0, #2]
 8018e68:	8002      	strh	r2, [r0, #0]
 8018e6a:	185a      	adds	r2, r3, r1
 8018e6c:	4b04      	ldr	r3, [pc, #16]	; (8018e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018e6e:	881b      	ldrh	r3, [r3, #0]
 8018e70:	1a9b      	subs	r3, r3, r2
 8018e72:	8043      	strh	r3, [r0, #2]
 8018e74:	88c3      	ldrh	r3, [r0, #6]
 8018e76:	80c1      	strh	r1, [r0, #6]
 8018e78:	8083      	strh	r3, [r0, #4]
 8018e7a:	4770      	bx	lr
 8018e7c:	24006d74 	.word	0x24006d74
 8018e80:	24006d70 	.word	0x24006d70

08018e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018e84:	4b07      	ldr	r3, [pc, #28]	; (8018ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018e86:	b510      	push	{r4, lr}
 8018e88:	781b      	ldrb	r3, [r3, #0]
 8018e8a:	2b01      	cmp	r3, #1
 8018e8c:	d108      	bne.n	8018ea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018e8e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018e92:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e96:	8003      	strh	r3, [r0, #0]
 8018e98:	8893      	ldrh	r3, [r2, #4]
 8018e9a:	3b01      	subs	r3, #1
 8018e9c:	1b1b      	subs	r3, r3, r4
 8018e9e:	800b      	strh	r3, [r1, #0]
 8018ea0:	bd10      	pop	{r4, pc}
 8018ea2:	bf00      	nop
 8018ea4:	24006d74 	.word	0x24006d74

08018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018ea8:	4b0a      	ldr	r3, [pc, #40]	; (8018ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018eaa:	460a      	mov	r2, r1
 8018eac:	b510      	push	{r4, lr}
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	2b01      	cmp	r3, #1
 8018eb2:	d10d      	bne.n	8018ed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018eb4:	8881      	ldrh	r1, [r0, #4]
 8018eb6:	8803      	ldrh	r3, [r0, #0]
 8018eb8:	440b      	add	r3, r1
 8018eba:	4601      	mov	r1, r0
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	f821 3b02 	strh.w	r3, [r1], #2
 8018ec2:	f7ff ffdf 	bl	8018e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018ec6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018eca:	88c2      	ldrh	r2, [r0, #6]
 8018ecc:	80c3      	strh	r3, [r0, #6]
 8018ece:	8082      	strh	r2, [r0, #4]
 8018ed0:	bd10      	pop	{r4, pc}
 8018ed2:	bf00      	nop
 8018ed4:	24006d74 	.word	0x24006d74

08018ed8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018ed8:	4b06      	ldr	r3, [pc, #24]	; (8018ef4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018eda:	2100      	movs	r1, #0
 8018edc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ee0:	4b05      	ldr	r3, [pc, #20]	; (8018ef8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018ee2:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8018ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018eea:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8018eee:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8018ef2:	4770      	bx	lr
 8018ef4:	24006d70 	.word	0x24006d70
 8018ef8:	24006d72 	.word	0x24006d72

08018efc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018efc:	4b03      	ldr	r3, [pc, #12]	; (8018f0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018efe:	6818      	ldr	r0, [r3, #0]
 8018f00:	b110      	cbz	r0, 8018f08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018f02:	6803      	ldr	r3, [r0, #0]
 8018f04:	699b      	ldr	r3, [r3, #24]
 8018f06:	4718      	bx	r3
 8018f08:	4770      	bx	lr
 8018f0a:	bf00      	nop
 8018f0c:	24006db8 	.word	0x24006db8

08018f10 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018f10:	4770      	bx	lr
	...

08018f14 <_ZN8touchgfx11Application4drawEv>:
 8018f14:	4b09      	ldr	r3, [pc, #36]	; (8018f3c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018f16:	b507      	push	{r0, r1, r2, lr}
 8018f18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f1c:	2100      	movs	r1, #0
 8018f1e:	4b08      	ldr	r3, [pc, #32]	; (8018f40 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018f20:	9100      	str	r1, [sp, #0]
 8018f22:	4669      	mov	r1, sp
 8018f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f28:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f30:	6803      	ldr	r3, [r0, #0]
 8018f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f34:	4798      	blx	r3
 8018f36:	b003      	add	sp, #12
 8018f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f3c:	24006d70 	.word	0x24006d70
 8018f40:	24006d72 	.word	0x24006d72

08018f44 <_ZN8touchgfx11Application10invalidateEv>:
 8018f44:	4b09      	ldr	r3, [pc, #36]	; (8018f6c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018f46:	b082      	sub	sp, #8
 8018f48:	2100      	movs	r1, #0
 8018f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f4e:	4b08      	ldr	r3, [pc, #32]	; (8018f70 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018f50:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f54:	aa02      	add	r2, sp, #8
 8018f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f5a:	9100      	str	r1, [sp, #0]
 8018f5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f60:	6803      	ldr	r3, [r0, #0]
 8018f62:	e912 0006 	ldmdb	r2, {r1, r2}
 8018f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f68:	b002      	add	sp, #8
 8018f6a:	4718      	bx	r3
 8018f6c:	24006d70 	.word	0x24006d70
 8018f70:	24006d72 	.word	0x24006d72

08018f74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018f74:	4b03      	ldr	r3, [pc, #12]	; (8018f84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018f76:	6818      	ldr	r0, [r3, #0]
 8018f78:	b110      	cbz	r0, 8018f80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018f7a:	6803      	ldr	r3, [r0, #0]
 8018f7c:	69db      	ldr	r3, [r3, #28]
 8018f7e:	4718      	bx	r3
 8018f80:	4770      	bx	lr
 8018f82:	bf00      	nop
 8018f84:	24006db8 	.word	0x24006db8

08018f88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018f88:	4b03      	ldr	r3, [pc, #12]	; (8018f98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018f8a:	6818      	ldr	r0, [r3, #0]
 8018f8c:	b110      	cbz	r0, 8018f94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018f8e:	6803      	ldr	r3, [r0, #0]
 8018f90:	6a1b      	ldr	r3, [r3, #32]
 8018f92:	4718      	bx	r3
 8018f94:	4770      	bx	lr
 8018f96:	bf00      	nop
 8018f98:	24006db8 	.word	0x24006db8

08018f9c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8018fa2:	4770      	bx	lr

08018fa4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018fa4:	4b03      	ldr	r3, [pc, #12]	; (8018fb4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018fa6:	6818      	ldr	r0, [r3, #0]
 8018fa8:	b110      	cbz	r0, 8018fb0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018faa:	6803      	ldr	r3, [r0, #0]
 8018fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fae:	4718      	bx	r3
 8018fb0:	4770      	bx	lr
 8018fb2:	bf00      	nop
 8018fb4:	24006db8 	.word	0x24006db8

08018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018fb8:	b510      	push	{r4, lr}
 8018fba:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018fbe:	888a      	ldrh	r2, [r1, #4]
 8018fc0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018fc4:	4422      	add	r2, r4
 8018fc6:	b212      	sxth	r2, r2
 8018fc8:	4293      	cmp	r3, r2
 8018fca:	da15      	bge.n	8018ff8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018fcc:	8882      	ldrh	r2, [r0, #4]
 8018fce:	4413      	add	r3, r2
 8018fd0:	b21b      	sxth	r3, r3
 8018fd2:	429c      	cmp	r4, r3
 8018fd4:	da10      	bge.n	8018ff8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018fd6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018fda:	88c9      	ldrh	r1, [r1, #6]
 8018fdc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018fe0:	4419      	add	r1, r3
 8018fe2:	b209      	sxth	r1, r1
 8018fe4:	428a      	cmp	r2, r1
 8018fe6:	da07      	bge.n	8018ff8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018fe8:	88c0      	ldrh	r0, [r0, #6]
 8018fea:	4410      	add	r0, r2
 8018fec:	b200      	sxth	r0, r0
 8018fee:	4283      	cmp	r3, r0
 8018ff0:	bfac      	ite	ge
 8018ff2:	2000      	movge	r0, #0
 8018ff4:	2001      	movlt	r0, #1
 8018ff6:	bd10      	pop	{r4, pc}
 8018ff8:	2000      	movs	r0, #0
 8018ffa:	e7fc      	b.n	8018ff6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018ffc <_ZN8touchgfx4Rect10restrictToEss>:
 8018ffc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019000:	2b00      	cmp	r3, #0
 8019002:	b510      	push	{r4, lr}
 8019004:	da04      	bge.n	8019010 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019006:	8884      	ldrh	r4, [r0, #4]
 8019008:	4423      	add	r3, r4
 801900a:	8083      	strh	r3, [r0, #4]
 801900c:	2300      	movs	r3, #0
 801900e:	8003      	strh	r3, [r0, #0]
 8019010:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019014:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019018:	1b09      	subs	r1, r1, r4
 801901a:	428b      	cmp	r3, r1
 801901c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019020:	bfc8      	it	gt
 8019022:	8081      	strhgt	r1, [r0, #4]
 8019024:	2b00      	cmp	r3, #0
 8019026:	da04      	bge.n	8019032 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019028:	88c1      	ldrh	r1, [r0, #6]
 801902a:	440b      	add	r3, r1
 801902c:	80c3      	strh	r3, [r0, #6]
 801902e:	2300      	movs	r3, #0
 8019030:	8043      	strh	r3, [r0, #2]
 8019032:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019036:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801903a:	1a52      	subs	r2, r2, r1
 801903c:	4293      	cmp	r3, r2
 801903e:	bfc8      	it	gt
 8019040:	80c2      	strhgt	r2, [r0, #6]
 8019042:	bd10      	pop	{r4, pc}

08019044 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019044:	4b10      	ldr	r3, [pc, #64]	; (8019088 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019046:	b510      	push	{r4, lr}
 8019048:	460c      	mov	r4, r1
 801904a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801904e:	4b0f      	ldr	r3, [pc, #60]	; (801908c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019050:	4620      	mov	r0, r4
 8019052:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019056:	f7ff ffd1 	bl	8018ffc <_ZN8touchgfx4Rect10restrictToEss>
 801905a:	4b0d      	ldr	r3, [pc, #52]	; (8019090 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801905c:	6818      	ldr	r0, [r3, #0]
 801905e:	b190      	cbz	r0, 8019086 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019060:	6803      	ldr	r3, [r0, #0]
 8019062:	4621      	mov	r1, r4
 8019064:	689b      	ldr	r3, [r3, #8]
 8019066:	4798      	blx	r3
 8019068:	4b0a      	ldr	r3, [pc, #40]	; (8019094 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801906a:	6818      	ldr	r0, [r3, #0]
 801906c:	b118      	cbz	r0, 8019076 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801906e:	6803      	ldr	r3, [r0, #0]
 8019070:	4621      	mov	r1, r4
 8019072:	689b      	ldr	r3, [r3, #8]
 8019074:	4798      	blx	r3
 8019076:	4b08      	ldr	r3, [pc, #32]	; (8019098 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019078:	4621      	mov	r1, r4
 801907a:	6818      	ldr	r0, [r3, #0]
 801907c:	6803      	ldr	r3, [r0, #0]
 801907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019082:	69db      	ldr	r3, [r3, #28]
 8019084:	4718      	bx	r3
 8019086:	bd10      	pop	{r4, pc}
 8019088:	24006d72 	.word	0x24006d72
 801908c:	24006d70 	.word	0x24006d70
 8019090:	24006db8 	.word	0x24006db8
 8019094:	24006db4 	.word	0x24006db4
 8019098:	24006d7c 	.word	0x24006d7c

0801909c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801909e:	4606      	mov	r6, r0
 80190a0:	4608      	mov	r0, r1
 80190a2:	460f      	mov	r7, r1
 80190a4:	f7fc ff55 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 80190a8:	b9e8      	cbnz	r0, 80190e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80190aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 80190ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 80190b2:	42a5      	cmp	r5, r4
 80190b4:	db17      	blt.n	80190e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80190b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80190ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80190be:	429a      	cmp	r2, r3
 80190c0:	db11      	blt.n	80190e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80190c2:	88b9      	ldrh	r1, [r7, #4]
 80190c4:	440d      	add	r5, r1
 80190c6:	88b1      	ldrh	r1, [r6, #4]
 80190c8:	440c      	add	r4, r1
 80190ca:	b22d      	sxth	r5, r5
 80190cc:	b224      	sxth	r4, r4
 80190ce:	42a5      	cmp	r5, r4
 80190d0:	dc09      	bgt.n	80190e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80190d2:	88f8      	ldrh	r0, [r7, #6]
 80190d4:	4410      	add	r0, r2
 80190d6:	88f2      	ldrh	r2, [r6, #6]
 80190d8:	4413      	add	r3, r2
 80190da:	b200      	sxth	r0, r0
 80190dc:	b21b      	sxth	r3, r3
 80190de:	4298      	cmp	r0, r3
 80190e0:	bfcc      	ite	gt
 80190e2:	2000      	movgt	r0, #0
 80190e4:	2001      	movle	r0, #1
 80190e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80190e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ea:	4604      	mov	r4, r0
 80190ec:	4608      	mov	r0, r1
 80190ee:	460d      	mov	r5, r1
 80190f0:	f7fc ff2f 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 80190f4:	b978      	cbnz	r0, 8019116 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80190f6:	4620      	mov	r0, r4
 80190f8:	f7fc ff2b 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 80190fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019100:	b150      	cbz	r0, 8019118 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019102:	8026      	strh	r6, [r4, #0]
 8019104:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019108:	8063      	strh	r3, [r4, #2]
 801910a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801910e:	80a3      	strh	r3, [r4, #4]
 8019110:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019114:	80e3      	strh	r3, [r4, #6]
 8019116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019118:	f9b4 1000 	ldrsh.w	r1, [r4]
 801911c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019120:	42b1      	cmp	r1, r6
 8019122:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019126:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801912a:	460f      	mov	r7, r1
 801912c:	88ed      	ldrh	r5, [r5, #6]
 801912e:	bfa8      	it	ge
 8019130:	4637      	movge	r7, r6
 8019132:	4293      	cmp	r3, r2
 8019134:	4618      	mov	r0, r3
 8019136:	4466      	add	r6, ip
 8019138:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801913c:	bfa8      	it	ge
 801913e:	4610      	movge	r0, r2
 8019140:	442a      	add	r2, r5
 8019142:	88e5      	ldrh	r5, [r4, #6]
 8019144:	4461      	add	r1, ip
 8019146:	b236      	sxth	r6, r6
 8019148:	8027      	strh	r7, [r4, #0]
 801914a:	442b      	add	r3, r5
 801914c:	b209      	sxth	r1, r1
 801914e:	b212      	sxth	r2, r2
 8019150:	8060      	strh	r0, [r4, #2]
 8019152:	b21b      	sxth	r3, r3
 8019154:	428e      	cmp	r6, r1
 8019156:	bfac      	ite	ge
 8019158:	ebc7 0106 	rsbge	r1, r7, r6
 801915c:	ebc7 0101 	rsblt	r1, r7, r1
 8019160:	429a      	cmp	r2, r3
 8019162:	bfac      	ite	ge
 8019164:	ebc0 0202 	rsbge	r2, r0, r2
 8019168:	ebc0 0203 	rsblt	r2, r0, r3
 801916c:	80a1      	strh	r1, [r4, #4]
 801916e:	80e2      	strh	r2, [r4, #6]
 8019170:	e7d1      	b.n	8019116 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019174 <_ZN8touchgfx11Application11getInstanceEv>:
 8019174:	4b01      	ldr	r3, [pc, #4]	; (801917c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019176:	6818      	ldr	r0, [r3, #0]
 8019178:	4770      	bx	lr
 801917a:	bf00      	nop
 801917c:	24006dc8 	.word	0x24006dc8

08019180 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8019180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019182:	4b10      	ldr	r3, [pc, #64]	; (80191c4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8019184:	4605      	mov	r5, r0
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	b1d3      	cbz	r3, 80191c0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801918a:	4b0f      	ldr	r3, [pc, #60]	; (80191c8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801918c:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8019190:	4f0e      	ldr	r7, [pc, #56]	; (80191cc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8019192:	881c      	ldrh	r4, [r3, #0]
 8019194:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 8019198:	42a3      	cmp	r3, r4
 801919a:	d90e      	bls.n	80191ba <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80191a2:	b10a      	cbz	r2, 80191a8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 80191a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191a6:	b900      	cbnz	r0, 80191aa <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 80191a8:	6898      	ldr	r0, [r3, #8]
 80191aa:	6803      	ldr	r3, [r0, #0]
 80191ac:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 80191b0:	3401      	adds	r4, #1
 80191b2:	69db      	ldr	r3, [r3, #28]
 80191b4:	4798      	blx	r3
 80191b6:	b2a4      	uxth	r4, r4
 80191b8:	e7ec      	b.n	8019194 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 80191ba:	2300      	movs	r3, #0
 80191bc:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 80191c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191c2:	bf00      	nop
 80191c4:	24006d7a 	.word	0x24006d7a
 80191c8:	24000050 	.word	0x24000050
 80191cc:	24006d7c 	.word	0x24006d7c

080191d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80191d0:	2300      	movs	r3, #0
 80191d2:	b510      	push	{r4, lr}
 80191d4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80191d8:	4604      	mov	r4, r0
 80191da:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80191de:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80191e2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80191e6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d90e      	bls.n	801920c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80191ee:	18e2      	adds	r2, r4, r3
 80191f0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80191f4:	b122      	cbz	r2, 8019200 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80191f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80191fa:	6803      	ldr	r3, [r0, #0]
 80191fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191fe:	4798      	blx	r3
 8019200:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019204:	3301      	adds	r3, #1
 8019206:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801920a:	e7ea      	b.n	80191e2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801920c:	bd10      	pop	{r4, pc}

0801920e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801920e:	2300      	movs	r3, #0
 8019210:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8019214:	30a4      	adds	r0, #164	; 0xa4
 8019216:	f820 3c24 	strh.w	r3, [r0, #-36]
 801921a:	f802 3b01 	strb.w	r3, [r2], #1
 801921e:	4282      	cmp	r2, r0
 8019220:	d1fb      	bne.n	801921a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019222:	4770      	bx	lr

08019224 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019224:	b570      	push	{r4, r5, r6, lr}
 8019226:	4c0b      	ldr	r4, [pc, #44]	; (8019254 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019228:	4605      	mov	r5, r0
 801922a:	460e      	mov	r6, r1
 801922c:	6820      	ldr	r0, [r4, #0]
 801922e:	b110      	cbz	r0, 8019236 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019230:	6803      	ldr	r3, [r0, #0]
 8019232:	695b      	ldr	r3, [r3, #20]
 8019234:	4798      	blx	r3
 8019236:	1d28      	adds	r0, r5, #4
 8019238:	f7ff ffe9 	bl	801920e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801923c:	6026      	str	r6, [r4, #0]
 801923e:	6833      	ldr	r3, [r6, #0]
 8019240:	4630      	mov	r0, r6
 8019242:	68db      	ldr	r3, [r3, #12]
 8019244:	4798      	blx	r3
 8019246:	682b      	ldr	r3, [r5, #0]
 8019248:	4628      	mov	r0, r5
 801924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801924c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019250:	4718      	bx	r3
 8019252:	bf00      	nop
 8019254:	24006db8 	.word	0x24006db8

08019258 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019258:	2300      	movs	r3, #0
 801925a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801925e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8019262:	461a      	mov	r2, r3
 8019264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019266:	461c      	mov	r4, r3
 8019268:	461d      	mov	r5, r3
 801926a:	459c      	cmp	ip, r3
 801926c:	dd1a      	ble.n	80192a4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801926e:	18c6      	adds	r6, r0, r3
 8019270:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8019274:	b16e      	cbz	r6, 8019292 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019276:	429a      	cmp	r2, r3
 8019278:	d008      	beq.n	801928c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801927a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801927e:	fa1f fe82 	uxth.w	lr, r2
 8019282:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019286:	1887      	adds	r7, r0, r2
 8019288:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801928c:	3201      	adds	r2, #1
 801928e:	3301      	adds	r3, #1
 8019290:	e7eb      	b.n	801926a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019292:	4299      	cmp	r1, r3
 8019294:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8019298:	bfa8      	it	ge
 801929a:	3501      	addge	r5, #1
 801929c:	429e      	cmp	r6, r3
 801929e:	bfc8      	it	gt
 80192a0:	3401      	addgt	r4, #1
 80192a2:	e7f4      	b.n	801928e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80192a4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80192a8:	1b49      	subs	r1, r1, r5
 80192aa:	1b1b      	subs	r3, r3, r4
 80192ac:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80192b0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80192b4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80192b8:	4293      	cmp	r3, r2
 80192ba:	dd03      	ble.n	80192c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80192bc:	3b01      	subs	r3, #1
 80192be:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80192c2:	e7f7      	b.n	80192b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80192c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080192c8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80192c8:	b570      	push	{r4, r5, r6, lr}
 80192ca:	4d16      	ldr	r5, [pc, #88]	; (8019324 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80192cc:	4604      	mov	r4, r0
 80192ce:	6828      	ldr	r0, [r5, #0]
 80192d0:	b140      	cbz	r0, 80192e4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80192d2:	7a03      	ldrb	r3, [r0, #8]
 80192d4:	b933      	cbnz	r3, 80192e4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80192d6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80192da:	6803      	ldr	r3, [r0, #0]
 80192dc:	689b      	ldr	r3, [r3, #8]
 80192de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192e2:	4718      	bx	r3
 80192e4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80192e8:	4e0f      	ldr	r6, [pc, #60]	; (8019328 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80192ea:	b973      	cbnz	r3, 801930a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80192ec:	b168      	cbz	r0, 801930a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80192ee:	7a03      	ldrb	r3, [r0, #8]
 80192f0:	b15b      	cbz	r3, 801930a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80192f2:	6830      	ldr	r0, [r6, #0]
 80192f4:	b110      	cbz	r0, 80192fc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80192f6:	6803      	ldr	r3, [r0, #0]
 80192f8:	691b      	ldr	r3, [r3, #16]
 80192fa:	4798      	blx	r3
 80192fc:	6828      	ldr	r0, [r5, #0]
 80192fe:	6803      	ldr	r3, [r0, #0]
 8019300:	68db      	ldr	r3, [r3, #12]
 8019302:	4798      	blx	r3
 8019304:	2301      	movs	r3, #1
 8019306:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801930a:	3404      	adds	r4, #4
 801930c:	4620      	mov	r0, r4
 801930e:	f7ff ff5f 	bl	80191d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8019312:	4620      	mov	r0, r4
 8019314:	f7ff ffa0 	bl	8019258 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019318:	6830      	ldr	r0, [r6, #0]
 801931a:	b110      	cbz	r0, 8019322 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801931c:	6803      	ldr	r3, [r0, #0]
 801931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019320:	e7dd      	b.n	80192de <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019322:	bd70      	pop	{r4, r5, r6, pc}
 8019324:	24006dbc 	.word	0x24006dbc
 8019328:	24006db8 	.word	0x24006db8

0801932c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801932c:	4603      	mov	r3, r0
 801932e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019332:	2200      	movs	r2, #0
 8019334:	801a      	strh	r2, [r3, #0]
 8019336:	3308      	adds	r3, #8
 8019338:	f823 2c06 	strh.w	r2, [r3, #-6]
 801933c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019340:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019344:	428b      	cmp	r3, r1
 8019346:	d1f5      	bne.n	8019334 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019348:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801934c:	4770      	bx	lr
	...

08019350 <_ZN8touchgfx11ApplicationC1Ev>:
 8019350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019352:	4b1d      	ldr	r3, [pc, #116]	; (80193c8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019354:	4606      	mov	r6, r0
 8019356:	4604      	mov	r4, r0
 8019358:	2500      	movs	r5, #0
 801935a:	f846 3b04 	str.w	r3, [r6], #4
 801935e:	22a8      	movs	r2, #168	; 0xa8
 8019360:	2100      	movs	r1, #0
 8019362:	4630      	mov	r0, r6
 8019364:	f00c f979 	bl	802565a <memset>
 8019368:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801936c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8019370:	4f16      	ldr	r7, [pc, #88]	; (80193cc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019372:	f7ff ffdb 	bl	801932c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019376:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801937a:	f7ff ffd7 	bl	801932c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801937e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019382:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019386:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801938a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801938e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8019392:	490f      	ldr	r1, [pc, #60]	; (80193d0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019394:	480f      	ldr	r0, [pc, #60]	; (80193d4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019396:	f00b fe23 	bl	8024fe0 <CRC_Lock>
 801939a:	4b0f      	ldr	r3, [pc, #60]	; (80193d8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801939c:	b158      	cbz	r0, 80193b6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801939e:	801d      	strh	r5, [r3, #0]
 80193a0:	2300      	movs	r3, #0
 80193a2:	4a0e      	ldr	r2, [pc, #56]	; (80193dc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80193a4:	4630      	mov	r0, r6
 80193a6:	6013      	str	r3, [r2, #0]
 80193a8:	4a0d      	ldr	r2, [pc, #52]	; (80193e0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80193aa:	603b      	str	r3, [r7, #0]
 80193ac:	6013      	str	r3, [r2, #0]
 80193ae:	f7ff ff2e 	bl	801920e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80193b2:	4620      	mov	r0, r4
 80193b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80193ba:	2002      	movs	r0, #2
 80193bc:	801a      	strh	r2, [r3, #0]
 80193be:	6038      	str	r0, [r7, #0]
 80193c0:	f001 fa50 	bl	801a864 <_ZN8touchgfx6Screen4drawEv>
 80193c4:	e7ec      	b.n	80193a0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80193c6:	bf00      	nop
 80193c8:	08028054 	.word	0x08028054
 80193cc:	24006db8 	.word	0x24006db8
 80193d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80193d4:	f407a5c2 	.word	0xf407a5c2
 80193d8:	24000050 	.word	0x24000050
 80193dc:	24006dc8 	.word	0x24006dc8
 80193e0:	24006dbc 	.word	0x24006dbc

080193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80193e4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80193e8:	3b01      	subs	r3, #1
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	428b      	cmp	r3, r1
 80193ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80193f2:	b510      	push	{r4, lr}
 80193f4:	d908      	bls.n	8019408 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80193f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80193fa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019404:	685a      	ldr	r2, [r3, #4]
 8019406:	6062      	str	r2, [r4, #4]
 8019408:	bd10      	pop	{r4, pc}
	...

0801940c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019410:	b08f      	sub	sp, #60	; 0x3c
 8019412:	4b8f      	ldr	r3, [pc, #572]	; (8019650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8019414:	4683      	mov	fp, r0
 8019416:	ac0a      	add	r4, sp, #40	; 0x28
 8019418:	e884 0006 	stmia.w	r4, {r1, r2}
 801941c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019420:	4620      	mov	r0, r4
 8019422:	4b8c      	ldr	r3, [pc, #560]	; (8019654 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8019424:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019428:	f7ff fde8 	bl	8018ffc <_ZN8touchgfx4Rect10restrictToEss>
 801942c:	4620      	mov	r0, r4
 801942e:	f7fc fd90 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019432:	2800      	cmp	r0, #0
 8019434:	d16a      	bne.n	801950c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019436:	9403      	str	r4, [sp, #12]
 8019438:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801943c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8019440:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019444:	9301      	str	r3, [sp, #4]
 8019446:	35a4      	adds	r5, #164	; 0xa4
 8019448:	b15c      	cbz	r4, 8019462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801944a:	4629      	mov	r1, r5
 801944c:	9803      	ldr	r0, [sp, #12]
 801944e:	f7ff fe25 	bl	801909c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019452:	3c01      	subs	r4, #1
 8019454:	b118      	cbz	r0, 801945e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8019456:	b2a1      	uxth	r1, r4
 8019458:	9801      	ldr	r0, [sp, #4]
 801945a:	f7ff ffc3 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801945e:	3d08      	subs	r5, #8
 8019460:	e7f2      	b.n	8019448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019462:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8019466:	f10a 33ff 	add.w	r3, sl, #4294967295
 801946a:	f8cd a010 	str.w	sl, [sp, #16]
 801946e:	9302      	str	r3, [sp, #8]
 8019470:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019474:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8019478:	9306      	str	r3, [sp, #24]
 801947a:	445c      	add	r4, fp
 801947c:	2500      	movs	r5, #0
 801947e:	4626      	mov	r6, r4
 8019480:	f8cd a014 	str.w	sl, [sp, #20]
 8019484:	462f      	mov	r7, r5
 8019486:	9b05      	ldr	r3, [sp, #20]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d073      	beq.n	8019574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801948c:	9903      	ldr	r1, [sp, #12]
 801948e:	4630      	mov	r0, r6
 8019490:	f7ff fd92 	bl	8018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019494:	b350      	cbz	r0, 80194ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019496:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801949a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801949e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 80194a2:	45e6      	cmp	lr, ip
 80194a4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80194a8:	db33      	blt.n	8019512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80194aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80194ae:	88b3      	ldrh	r3, [r6, #4]
 80194b0:	4472      	add	r2, lr
 80194b2:	4463      	add	r3, ip
 80194b4:	b212      	sxth	r2, r2
 80194b6:	b21b      	sxth	r3, r3
 80194b8:	429a      	cmp	r2, r3
 80194ba:	dc2a      	bgt.n	8019512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80194bc:	fa1f f289 	uxth.w	r2, r9
 80194c0:	88f3      	ldrh	r3, [r6, #6]
 80194c2:	45c8      	cmp	r8, r9
 80194c4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80194c8:	4413      	add	r3, r2
 80194ca:	fa1f fc88 	uxth.w	ip, r8
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	fa0f fe83 	sxth.w	lr, r3
 80194d4:	db0f      	blt.n	80194f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80194d6:	eba3 030c 	sub.w	r3, r3, ip
 80194da:	1ac9      	subs	r1, r1, r3
 80194dc:	b209      	sxth	r1, r1
 80194de:	2900      	cmp	r1, #0
 80194e0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80194e4:	dd12      	ble.n	801950c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80194e6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80194ea:	4605      	mov	r5, r0
 80194ec:	9b05      	ldr	r3, [sp, #20]
 80194ee:	3e08      	subs	r6, #8
 80194f0:	3b01      	subs	r3, #1
 80194f2:	9305      	str	r3, [sp, #20]
 80194f4:	e7c7      	b.n	8019486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80194f6:	4461      	add	r1, ip
 80194f8:	b209      	sxth	r1, r1
 80194fa:	4571      	cmp	r1, lr
 80194fc:	dc38      	bgt.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80194fe:	eba2 020c 	sub.w	r2, r2, ip
 8019502:	b212      	sxth	r2, r2
 8019504:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8019508:	2a00      	cmp	r2, #0
 801950a:	dcee      	bgt.n	80194ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801950c:	b00f      	add	sp, #60	; 0x3c
 801950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019512:	45c8      	cmp	r8, r9
 8019514:	db2c      	blt.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019516:	88f3      	ldrh	r3, [r6, #6]
 8019518:	4499      	add	r9, r3
 801951a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801951e:	4498      	add	r8, r3
 8019520:	fa0f f989 	sxth.w	r9, r9
 8019524:	fa0f f888 	sxth.w	r8, r8
 8019528:	45c1      	cmp	r9, r8
 801952a:	db21      	blt.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801952c:	fa1f f28c 	uxth.w	r2, ip
 8019530:	88b3      	ldrh	r3, [r6, #4]
 8019532:	45e6      	cmp	lr, ip
 8019534:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019538:	4413      	add	r3, r2
 801953a:	fa1f f88e 	uxth.w	r8, lr
 801953e:	b29b      	uxth	r3, r3
 8019540:	fa0f f983 	sxth.w	r9, r3
 8019544:	db0a      	blt.n	801955c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8019546:	eba3 0308 	sub.w	r3, r3, r8
 801954a:	1ac9      	subs	r1, r1, r3
 801954c:	b209      	sxth	r1, r1
 801954e:	2900      	cmp	r1, #0
 8019550:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8019554:	ddda      	ble.n	801950c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019556:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801955a:	e7c6      	b.n	80194ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801955c:	4441      	add	r1, r8
 801955e:	b209      	sxth	r1, r1
 8019560:	4549      	cmp	r1, r9
 8019562:	dc05      	bgt.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019564:	eba2 0208 	sub.w	r2, r2, r8
 8019568:	b212      	sxth	r2, r2
 801956a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801956e:	e7cb      	b.n	8019508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019570:	4607      	mov	r7, r0
 8019572:	e7bb      	b.n	80194ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019574:	2d00      	cmp	r5, #0
 8019576:	d181      	bne.n	801947c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019578:	2f00      	cmp	r7, #0
 801957a:	f000 81dd 	beq.w	8019938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801957e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8019582:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8019586:	b2b3      	uxth	r3, r6
 8019588:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801958c:	9305      	str	r3, [sp, #20]
 801958e:	9a05      	ldr	r2, [sp, #20]
 8019590:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019594:	4413      	add	r3, r2
 8019596:	b2ba      	uxth	r2, r7
 8019598:	4492      	add	sl, r2
 801959a:	b29b      	uxth	r3, r3
 801959c:	fa1f fa8a 	uxth.w	sl, sl
 80195a0:	fa0f f883 	sxth.w	r8, r3
 80195a4:	fa0f f98a 	sxth.w	r9, sl
 80195a8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80195ac:	9b04      	ldr	r3, [sp, #16]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d052      	beq.n	8019658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80195b2:	9903      	ldr	r1, [sp, #12]
 80195b4:	4620      	mov	r0, r4
 80195b6:	f7ff fcff 	bl	8018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80195ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80195be:	b1c0      	cbz	r0, 80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80195c0:	f9b4 e000 	ldrsh.w	lr, [r4]
 80195c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80195c8:	4576      	cmp	r6, lr
 80195ca:	dc22      	bgt.n	8019612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80195cc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80195d0:	44f4      	add	ip, lr
 80195d2:	fa0f fc8c 	sxth.w	ip, ip
 80195d6:	45e0      	cmp	r8, ip
 80195d8:	db1b      	blt.n	8019612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80195da:	428f      	cmp	r7, r1
 80195dc:	fa1f fc81 	uxth.w	ip, r1
 80195e0:	88e1      	ldrh	r1, [r4, #6]
 80195e2:	dc0d      	bgt.n	8019600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80195e4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80195e8:	f8a4 9002 	strh.w	r9, [r4, #2]
 80195ec:	eba1 010c 	sub.w	r1, r1, ip
 80195f0:	80e1      	strh	r1, [r4, #6]
 80195f2:	4628      	mov	r0, r5
 80195f4:	9904      	ldr	r1, [sp, #16]
 80195f6:	3c08      	subs	r4, #8
 80195f8:	4605      	mov	r5, r0
 80195fa:	3901      	subs	r1, #1
 80195fc:	9104      	str	r1, [sp, #16]
 80195fe:	e7d3      	b.n	80195a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8019600:	4461      	add	r1, ip
 8019602:	b209      	sxth	r1, r1
 8019604:	4549      	cmp	r1, r9
 8019606:	dcf5      	bgt.n	80195f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019608:	eba2 0c0c 	sub.w	ip, r2, ip
 801960c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019610:	e7ef      	b.n	80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019612:	428f      	cmp	r7, r1
 8019614:	dcee      	bgt.n	80195f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019616:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801961a:	4461      	add	r1, ip
 801961c:	b209      	sxth	r1, r1
 801961e:	4589      	cmp	r9, r1
 8019620:	dbe8      	blt.n	80195f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019622:	4576      	cmp	r6, lr
 8019624:	fa1f fc8e 	uxth.w	ip, lr
 8019628:	88a1      	ldrh	r1, [r4, #4]
 801962a:	dc07      	bgt.n	801963c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801962c:	eba3 0c0c 	sub.w	ip, r3, ip
 8019630:	f8a4 8000 	strh.w	r8, [r4]
 8019634:	eba1 010c 	sub.w	r1, r1, ip
 8019638:	80a1      	strh	r1, [r4, #4]
 801963a:	e7da      	b.n	80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801963c:	4461      	add	r1, ip
 801963e:	b209      	sxth	r1, r1
 8019640:	4588      	cmp	r8, r1
 8019642:	dbd7      	blt.n	80195f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019644:	9905      	ldr	r1, [sp, #20]
 8019646:	eba1 0c0c 	sub.w	ip, r1, ip
 801964a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801964e:	e7d0      	b.n	80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019650:	24006d72 	.word	0x24006d72
 8019654:	24006d70 	.word	0x24006d70
 8019658:	2d00      	cmp	r5, #0
 801965a:	f000 816d 	beq.w	8019938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801965e:	9b06      	ldr	r3, [sp, #24]
 8019660:	445b      	add	r3, fp
 8019662:	461c      	mov	r4, r3
 8019664:	9b02      	ldr	r3, [sp, #8]
 8019666:	3301      	adds	r3, #1
 8019668:	f000 8166 	beq.w	8019938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801966c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8019670:	9803      	ldr	r0, [sp, #12]
 8019672:	4629      	mov	r1, r5
 8019674:	f7ff fd12 	bl	801909c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019678:	b120      	cbz	r0, 8019684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801967a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801967e:	9801      	ldr	r0, [sp, #4]
 8019680:	f7ff feb0 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019684:	9903      	ldr	r1, [sp, #12]
 8019686:	4628      	mov	r0, r5
 8019688:	f7ff fc96 	bl	8018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801968c:	2800      	cmp	r0, #0
 801968e:	f000 809c 	beq.w	80197ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019692:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8019696:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801969a:	fa1f f189 	uxth.w	r1, r9
 801969e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80196a2:	9309      	str	r3, [sp, #36]	; 0x24
 80196a4:	eb01 0c03 	add.w	ip, r1, r3
 80196a8:	b283      	uxth	r3, r0
 80196aa:	4548      	cmp	r0, r9
 80196ac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80196b0:	fa1f fa8c 	uxth.w	sl, ip
 80196b4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80196b8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 80196bc:	eb03 050c 	add.w	r5, r3, ip
 80196c0:	b2ad      	uxth	r5, r5
 80196c2:	9505      	str	r5, [sp, #20]
 80196c4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80196c8:	9504      	str	r5, [sp, #16]
 80196ca:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 80196ce:	f340 8099 	ble.w	8019804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80196d2:	1a5b      	subs	r3, r3, r1
 80196d4:	4596      	cmp	lr, r2
 80196d6:	fa0f f08a 	sxth.w	r0, sl
 80196da:	b29b      	uxth	r3, r3
 80196dc:	b21e      	sxth	r6, r3
 80196de:	dd2e      	ble.n	801973e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80196e0:	9f02      	ldr	r7, [sp, #8]
 80196e2:	fa1f fe8e 	uxth.w	lr, lr
 80196e6:	b292      	uxth	r2, r2
 80196e8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80196ec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80196f0:	9f04      	ldr	r7, [sp, #16]
 80196f2:	ebae 0102 	sub.w	r1, lr, r2
 80196f6:	44a6      	add	lr, r4
 80196f8:	1a3f      	subs	r7, r7, r0
 80196fa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80196fe:	b289      	uxth	r1, r1
 8019700:	4402      	add	r2, r0
 8019702:	fa0f fe8e 	sxth.w	lr, lr
 8019706:	b20d      	sxth	r5, r1
 8019708:	b212      	sxth	r2, r2
 801970a:	436f      	muls	r7, r5
 801970c:	ebae 0202 	sub.w	r2, lr, r2
 8019710:	4372      	muls	r2, r6
 8019712:	4297      	cmp	r7, r2
 8019714:	db09      	blt.n	801972a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8019716:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801971a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801971e:	449c      	add	ip, r3
 8019720:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019724:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8019728:	e686      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801972a:	4421      	add	r1, r4
 801972c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8019730:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8019734:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019738:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801973c:	e67c      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801973e:	9f04      	ldr	r7, [sp, #16]
 8019740:	42b8      	cmp	r0, r7
 8019742:	da27      	bge.n	8019794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8019744:	9902      	ldr	r1, [sp, #8]
 8019746:	1a3f      	subs	r7, r7, r0
 8019748:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801974c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019750:	eb05 010e 	add.w	r1, r5, lr
 8019754:	fa1f f881 	uxth.w	r8, r1
 8019758:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801975c:	4411      	add	r1, r2
 801975e:	fa0f f988 	sxth.w	r9, r8
 8019762:	eba2 020e 	sub.w	r2, r2, lr
 8019766:	eba1 0108 	sub.w	r1, r1, r8
 801976a:	4372      	muls	r2, r6
 801976c:	b289      	uxth	r1, r1
 801976e:	fa0f f881 	sxth.w	r8, r1
 8019772:	fb08 f707 	mul.w	r7, r8, r7
 8019776:	42ba      	cmp	r2, r7
 8019778:	dc06      	bgt.n	8019788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801977a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801977e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8019782:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8019786:	e7ca      	b.n	801971e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019788:	4429      	add	r1, r5
 801978a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801978e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019792:	e651      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019794:	9805      	ldr	r0, [sp, #20]
 8019796:	2d06      	cmp	r5, #6
 8019798:	ebaa 0000 	sub.w	r0, sl, r0
 801979c:	b280      	uxth	r0, r0
 801979e:	fa0f fe80 	sxth.w	lr, r0
 80197a2:	d817      	bhi.n	80197d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80197a4:	9b04      	ldr	r3, [sp, #16]
 80197a6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80197aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80197ae:	1c6b      	adds	r3, r5, #1
 80197b0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 80197b4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80197b8:	9b01      	ldr	r3, [sp, #4]
 80197ba:	9801      	ldr	r0, [sp, #4]
 80197bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80197c0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80197c4:	805a      	strh	r2, [r3, #2]
 80197c6:	809e      	strh	r6, [r3, #4]
 80197c8:	80d9      	strh	r1, [r3, #6]
 80197ca:	9b02      	ldr	r3, [sp, #8]
 80197cc:	3c08      	subs	r4, #8
 80197ce:	3b01      	subs	r3, #1
 80197d0:	9302      	str	r3, [sp, #8]
 80197d2:	e747      	b.n	8019664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80197d4:	9a02      	ldr	r2, [sp, #8]
 80197d6:	45b6      	cmp	lr, r6
 80197d8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80197dc:	db0d      	blt.n	80197fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80197de:	449c      	add	ip, r3
 80197e0:	445a      	add	r2, fp
 80197e2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80197e6:	fa1f fc8c 	uxth.w	ip, ip
 80197ea:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80197ee:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80197f2:	448c      	add	ip, r1
 80197f4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80197f8:	e61e      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80197fa:	445a      	add	r2, fp
 80197fc:	4484      	add	ip, r0
 80197fe:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8019802:	e78f      	b.n	8019724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019804:	fa1f f18e 	uxth.w	r1, lr
 8019808:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801980c:	b293      	uxth	r3, r2
 801980e:	4596      	cmp	lr, r2
 8019810:	eb01 0806 	add.w	r8, r1, r6
 8019814:	9306      	str	r3, [sp, #24]
 8019816:	fa1f f888 	uxth.w	r8, r8
 801981a:	9f06      	ldr	r7, [sp, #24]
 801981c:	fa0f f388 	sxth.w	r3, r8
 8019820:	9307      	str	r3, [sp, #28]
 8019822:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8019826:	443b      	add	r3, r7
 8019828:	b29b      	uxth	r3, r3
 801982a:	9308      	str	r3, [sp, #32]
 801982c:	da24      	bge.n	8019878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801982e:	9905      	ldr	r1, [sp, #20]
 8019830:	eba3 0308 	sub.w	r3, r3, r8
 8019834:	eba2 020e 	sub.w	r2, r2, lr
 8019838:	eba9 0000 	sub.w	r0, r9, r0
 801983c:	ebaa 0401 	sub.w	r4, sl, r1
 8019840:	b29b      	uxth	r3, r3
 8019842:	b2a4      	uxth	r4, r4
 8019844:	b219      	sxth	r1, r3
 8019846:	b225      	sxth	r5, r4
 8019848:	4348      	muls	r0, r1
 801984a:	436a      	muls	r2, r5
 801984c:	4282      	cmp	r2, r0
 801984e:	9a02      	ldr	r2, [sp, #8]
 8019850:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019854:	445a      	add	r2, fp
 8019856:	dc06      	bgt.n	8019866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8019858:	9b07      	ldr	r3, [sp, #28]
 801985a:	44a4      	add	ip, r4
 801985c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8019860:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8019864:	e75e      	b.n	8019724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019866:	9904      	ldr	r1, [sp, #16]
 8019868:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801986c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8019870:	4433      	add	r3, r6
 8019872:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019876:	e5df      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019878:	9f06      	ldr	r7, [sp, #24]
 801987a:	9b04      	ldr	r3, [sp, #16]
 801987c:	1bc9      	subs	r1, r1, r7
 801987e:	fa0f f78a 	sxth.w	r7, sl
 8019882:	b289      	uxth	r1, r1
 8019884:	429f      	cmp	r7, r3
 8019886:	fa0f fe81 	sxth.w	lr, r1
 801988a:	dd23      	ble.n	80198d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801988c:	9a05      	ldr	r2, [sp, #20]
 801988e:	eba9 0000 	sub.w	r0, r9, r0
 8019892:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019896:	ebaa 0202 	sub.w	r2, sl, r2
 801989a:	9d07      	ldr	r5, [sp, #28]
 801989c:	fb0e f000 	mul.w	r0, lr, r0
 80198a0:	b292      	uxth	r2, r2
 80198a2:	eba5 0a03 	sub.w	sl, r5, r3
 80198a6:	9b02      	ldr	r3, [sp, #8]
 80198a8:	b214      	sxth	r4, r2
 80198aa:	00db      	lsls	r3, r3, #3
 80198ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80198b0:	445b      	add	r3, fp
 80198b2:	4550      	cmp	r0, sl
 80198b4:	db03      	blt.n	80198be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80198b6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80198ba:	4494      	add	ip, r2
 80198bc:	e732      	b.n	8019724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80198be:	9a04      	ldr	r2, [sp, #16]
 80198c0:	4431      	add	r1, r6
 80198c2:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80198c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80198ca:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80198ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80198d2:	e75c      	b.n	801978e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80198d4:	9b08      	ldr	r3, [sp, #32]
 80198d6:	2d06      	cmp	r5, #6
 80198d8:	eba3 0308 	sub.w	r3, r3, r8
 80198dc:	b29b      	uxth	r3, r3
 80198de:	b218      	sxth	r0, r3
 80198e0:	d813      	bhi.n	801990a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80198e2:	9b07      	ldr	r3, [sp, #28]
 80198e4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80198e8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80198ec:	1c6b      	adds	r3, r5, #1
 80198ee:	9901      	ldr	r1, [sp, #4]
 80198f0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80198f4:	9b01      	ldr	r3, [sp, #4]
 80198f6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80198fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198fe:	805a      	strh	r2, [r3, #2]
 8019900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019902:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019906:	809a      	strh	r2, [r3, #4]
 8019908:	e75f      	b.n	80197ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801990a:	9c02      	ldr	r4, [sp, #8]
 801990c:	4570      	cmp	r0, lr
 801990e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019912:	db0d      	blt.n	8019930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8019914:	4431      	add	r1, r6
 8019916:	9b06      	ldr	r3, [sp, #24]
 8019918:	445c      	add	r4, fp
 801991a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801991e:	b289      	uxth	r1, r1
 8019920:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8019924:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019928:	4419      	add	r1, r3
 801992a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801992e:	e583      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019930:	445c      	add	r4, fp
 8019932:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8019936:	e79b      	b.n	8019870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019938:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801993c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019940:	1e65      	subs	r5, r4, #1
 8019942:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019946:	b2ad      	uxth	r5, r5
 8019948:	42b5      	cmp	r5, r6
 801994a:	d044      	beq.n	80199d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801994c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019950:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8019954:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8019958:	4282      	cmp	r2, r0
 801995a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801995e:	d11f      	bne.n	80199a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019960:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8019964:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8019968:	459c      	cmp	ip, r3
 801996a:	d119      	bne.n	80199a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801996c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8019970:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8019974:	19d8      	adds	r0, r3, r7
 8019976:	b200      	sxth	r0, r0
 8019978:	4288      	cmp	r0, r1
 801997a:	d109      	bne.n	8019990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801997c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8019980:	4413      	add	r3, r2
 8019982:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019986:	4629      	mov	r1, r5
 8019988:	9801      	ldr	r0, [sp, #4]
 801998a:	f7ff fd2b 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801998e:	e003      	b.n	8019998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019990:	4411      	add	r1, r2
 8019992:	b209      	sxth	r1, r1
 8019994:	42b9      	cmp	r1, r7
 8019996:	d0f3      	beq.n	8019980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019998:	3d01      	subs	r5, #1
 801999a:	3c08      	subs	r4, #8
 801999c:	b2ad      	uxth	r5, r5
 801999e:	e7d3      	b.n	8019948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80199a0:	42b9      	cmp	r1, r7
 80199a2:	d1f9      	bne.n	8019998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80199a4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80199a8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80199ac:	4299      	cmp	r1, r3
 80199ae:	d1f3      	bne.n	8019998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80199b0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80199b4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80199b8:	181f      	adds	r7, r3, r0
 80199ba:	b23f      	sxth	r7, r7
 80199bc:	42ba      	cmp	r2, r7
 80199be:	d105      	bne.n	80199cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80199c0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 80199c4:	440b      	add	r3, r1
 80199c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80199ca:	e7dc      	b.n	8019986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80199cc:	440a      	add	r2, r1
 80199ce:	b212      	sxth	r2, r2
 80199d0:	4290      	cmp	r0, r2
 80199d2:	d1e1      	bne.n	8019998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80199d4:	e7f6      	b.n	80199c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80199d6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80199da:	2e07      	cmp	r6, #7
 80199dc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80199e0:	d812      	bhi.n	8019a08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80199e2:	1c75      	adds	r5, r6, #1
 80199e4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80199e8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80199ec:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80199f0:	9d01      	ldr	r5, [sp, #4]
 80199f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80199f6:	442c      	add	r4, r5
 80199f8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80199fc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8019a00:	8061      	strh	r1, [r4, #2]
 8019a02:	80a2      	strh	r2, [r4, #4]
 8019a04:	80e3      	strh	r3, [r4, #6]
 8019a06:	e581      	b.n	801950c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019a08:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8019a0c:	3e01      	subs	r6, #1
 8019a0e:	445c      	add	r4, fp
 8019a10:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019a14:	f04f 37ff 	mov.w	r7, #4294967295
 8019a18:	2500      	movs	r5, #0
 8019a1a:	9305      	str	r3, [sp, #20]
 8019a1c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019a20:	1e72      	subs	r2, r6, #1
 8019a22:	9302      	str	r3, [sp, #8]
 8019a24:	4691      	mov	r9, r2
 8019a26:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8019a2a:	9304      	str	r3, [sp, #16]
 8019a2c:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8019a30:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019a34:	6818      	ldr	r0, [r3, #0]
 8019a36:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019a3a:	9207      	str	r2, [sp, #28]
 8019a3c:	bf16      	itet	ne
 8019a3e:	9905      	ldrne	r1, [sp, #20]
 8019a40:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019a44:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019a48:	9306      	str	r3, [sp, #24]
 8019a4a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019a4e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019a52:	fb18 f801 	smulbb	r8, r8, r1
 8019a56:	6859      	ldr	r1, [r3, #4]
 8019a58:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019a5c:	4671      	mov	r1, lr
 8019a5e:	a80c      	add	r0, sp, #48	; 0x30
 8019a60:	f7ff fb42 	bl	80190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019a64:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8019a68:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8019a6c:	f04f 0c08 	mov.w	ip, #8
 8019a70:	9b04      	ldr	r3, [sp, #16]
 8019a72:	9a02      	ldr	r2, [sp, #8]
 8019a74:	fb10 f001 	smulbb	r0, r0, r1
 8019a78:	fb02 8803 	mla	r8, r2, r3, r8
 8019a7c:	eba0 0108 	sub.w	r1, r0, r8
 8019a80:	fb90 f0fc 	sdiv	r0, r0, ip
 8019a84:	4288      	cmp	r0, r1
 8019a86:	dc20      	bgt.n	8019aca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019a88:	4551      	cmp	r1, sl
 8019a8a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019a8e:	da03      	bge.n	8019a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8019a90:	b1d9      	cbz	r1, 8019aca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019a92:	468a      	mov	sl, r1
 8019a94:	464f      	mov	r7, r9
 8019a96:	4635      	mov	r5, r6
 8019a98:	f109 39ff 	add.w	r9, r9, #4294967295
 8019a9c:	f119 0f02 	cmn.w	r9, #2
 8019aa0:	d1c6      	bne.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8019aa2:	4616      	mov	r6, r2
 8019aa4:	3201      	adds	r2, #1
 8019aa6:	f1a4 0408 	sub.w	r4, r4, #8
 8019aaa:	d1b7      	bne.n	8019a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8019aac:	9b01      	ldr	r3, [sp, #4]
 8019aae:	b2ac      	uxth	r4, r5
 8019ab0:	00ed      	lsls	r5, r5, #3
 8019ab2:	1958      	adds	r0, r3, r5
 8019ab4:	1c7b      	adds	r3, r7, #1
 8019ab6:	d10b      	bne.n	8019ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8019ab8:	4601      	mov	r1, r0
 8019aba:	9803      	ldr	r0, [sp, #12]
 8019abc:	f7ff fb14 	bl	80190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019ac0:	4621      	mov	r1, r4
 8019ac2:	9801      	ldr	r0, [sp, #4]
 8019ac4:	f7ff fc8e 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019ac8:	e4b6      	b.n	8019438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019aca:	464f      	mov	r7, r9
 8019acc:	4635      	mov	r5, r6
 8019ace:	e7ed      	b.n	8019aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8019ad0:	9b01      	ldr	r3, [sp, #4]
 8019ad2:	00ff      	lsls	r7, r7, #3
 8019ad4:	445d      	add	r5, fp
 8019ad6:	19d9      	adds	r1, r3, r7
 8019ad8:	445f      	add	r7, fp
 8019ada:	f7ff fb05 	bl	80190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019ade:	9b03      	ldr	r3, [sp, #12]
 8019ae0:	cb03      	ldmia	r3!, {r0, r1}
 8019ae2:	9b03      	ldr	r3, [sp, #12]
 8019ae4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8019ae8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8019aec:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8019af0:	6869      	ldr	r1, [r5, #4]
 8019af2:	c303      	stmia	r3!, {r0, r1}
 8019af4:	e7e4      	b.n	8019ac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8019af6:	bf00      	nop

08019af8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8019b00:	b09b      	sub	sp, #108	; 0x6c
 8019b02:	4604      	mov	r4, r0
 8019b04:	4630      	mov	r0, r6
 8019b06:	f7fc fa24 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	b948      	cbnz	r0, 8019b22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8019b0e:	6823      	ldr	r3, [r4, #0]
 8019b10:	4620      	mov	r0, r4
 8019b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b14:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019b18:	4798      	blx	r3
 8019b1a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019b1e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8019b22:	4bc5      	ldr	r3, [pc, #788]	; (8019e38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d03f      	beq.n	8019baa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8019b2a:	4dc4      	ldr	r5, [pc, #784]	; (8019e3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8019b2c:	4628      	mov	r0, r5
 8019b2e:	f7fc fa10 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b32:	4606      	mov	r6, r0
 8019b34:	2800      	cmp	r0, #0
 8019b36:	d138      	bne.n	8019baa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8019b38:	4628      	mov	r0, r5
 8019b3a:	f7ff f973 	bl	8018e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019b3e:	6823      	ldr	r3, [r4, #0]
 8019b40:	6829      	ldr	r1, [r5, #0]
 8019b42:	4620      	mov	r0, r4
 8019b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b46:	686a      	ldr	r2, [r5, #4]
 8019b48:	4798      	blx	r3
 8019b4a:	802e      	strh	r6, [r5, #0]
 8019b4c:	806e      	strh	r6, [r5, #2]
 8019b4e:	80ae      	strh	r6, [r5, #4]
 8019b50:	80ee      	strh	r6, [r5, #6]
 8019b52:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8019b56:	4dba      	ldr	r5, [pc, #744]	; (8019e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8019b58:	4640      	mov	r0, r8
 8019b5a:	f7ff fbe7 	bl	801932c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019b5e:	882e      	ldrh	r6, [r5, #0]
 8019b60:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019b64:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8019b68:	4633      	mov	r3, r6
 8019b6a:	42bb      	cmp	r3, r7
 8019b6c:	d224      	bcs.n	8019bb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019b6e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8019b72:	2907      	cmp	r1, #7
 8019b74:	d816      	bhi.n	8019ba4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8019b76:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019b7a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8019b7e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8019b82:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8019b86:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8019b8a:	1c4a      	adds	r2, r1, #1
 8019b8c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8019b90:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8019b94:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8019b98:	f8a2 a002 	strh.w	sl, [r2, #2]
 8019b9c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019ba0:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019ba4:	3301      	adds	r3, #1
 8019ba6:	b29b      	uxth	r3, r3
 8019ba8:	e7df      	b.n	8019b6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8019baa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d1cf      	bne.n	8019b52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8019bb2:	b01b      	add	sp, #108	; 0x6c
 8019bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8019bbc:	42b3      	cmp	r3, r6
 8019bbe:	d90c      	bls.n	8019bda <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8019bc0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019bc4:	6822      	ldr	r2, [r4, #0]
 8019bc6:	3601      	adds	r6, #1
 8019bc8:	4620      	mov	r0, r4
 8019bca:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8019bcc:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8019bd0:	b2b6      	uxth	r6, r6
 8019bd2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8019bd6:	47b8      	blx	r7
 8019bd8:	e7ee      	b.n	8019bb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019bda:	4a9a      	ldr	r2, [pc, #616]	; (8019e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8019bdc:	6813      	ldr	r3, [r2, #0]
 8019bde:	4691      	mov	r9, r2
 8019be0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019be4:	2b01      	cmp	r3, #1
 8019be6:	f040 80e0 	bne.w	8019daa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8019bea:	8829      	ldrh	r1, [r5, #0]
 8019bec:	2600      	movs	r6, #0
 8019bee:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019bf2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8019bf6:	33ae      	adds	r3, #174	; 0xae
 8019bf8:	428f      	cmp	r7, r1
 8019bfa:	f103 0308 	add.w	r3, r3, #8
 8019bfe:	dd0a      	ble.n	8019c16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8019c00:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8019c04:	3101      	adds	r1, #1
 8019c06:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8019c0a:	4402      	add	r2, r0
 8019c0c:	b212      	sxth	r2, r2
 8019c0e:	4296      	cmp	r6, r2
 8019c10:	bfb8      	it	lt
 8019c12:	4616      	movlt	r6, r2
 8019c14:	e7f0      	b.n	8019bf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8019c16:	4b8c      	ldr	r3, [pc, #560]	; (8019e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019c18:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8019e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8019c1c:	881b      	ldrh	r3, [r3, #0]
 8019c1e:	2b0f      	cmp	r3, #15
 8019c20:	bf8c      	ite	hi
 8019c22:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8019c26:	f04f 0b01 	movls.w	fp, #1
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019c30:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8019c34:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8019c38:	4b82      	ldr	r3, [pc, #520]	; (8019e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8019c3a:	4438      	add	r0, r7
 8019c3c:	b207      	sxth	r7, r0
 8019c3e:	6818      	ldr	r0, [r3, #0]
 8019c40:	42b7      	cmp	r7, r6
 8019c42:	6803      	ldr	r3, [r0, #0]
 8019c44:	f280 8083 	bge.w	8019d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8019c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c4c:	4798      	blx	r3
 8019c4e:	eb07 030b 	add.w	r3, r7, fp
 8019c52:	4298      	cmp	r0, r3
 8019c54:	da07      	bge.n	8019c66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019c56:	42b0      	cmp	r0, r6
 8019c58:	da05      	bge.n	8019c66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019c5a:	4287      	cmp	r7, r0
 8019c5c:	dd6c      	ble.n	8019d38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019c5e:	2f00      	cmp	r7, #0
 8019c60:	dd6a      	ble.n	8019d38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019c62:	4630      	mov	r0, r6
 8019c64:	e004      	b.n	8019c70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8019c66:	4287      	cmp	r7, r0
 8019c68:	dcfb      	bgt.n	8019c62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8019c6a:	42b0      	cmp	r0, r6
 8019c6c:	bfa8      	it	ge
 8019c6e:	4630      	movge	r0, r6
 8019c70:	4b76      	ldr	r3, [pc, #472]	; (8019e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8019c72:	1bc0      	subs	r0, r0, r7
 8019c74:	2200      	movs	r2, #0
 8019c76:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c7e:	882f      	ldrh	r7, [r5, #0]
 8019c80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019c84:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019c88:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019c8c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019c90:	42bb      	cmp	r3, r7
 8019c92:	d9cd      	bls.n	8019c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019c94:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019c98:	ab07      	add	r3, sp, #28
 8019c9a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019c9e:	6851      	ldr	r1, [r2, #4]
 8019ca0:	c303      	stmia	r3!, {r0, r1}
 8019ca2:	a905      	add	r1, sp, #20
 8019ca4:	a807      	add	r0, sp, #28
 8019ca6:	f7ff f987 	bl	8018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019caa:	2800      	cmp	r0, #0
 8019cac:	d04c      	beq.n	8019d48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8019cae:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019cb2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019cb6:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8019cba:	4686      	mov	lr, r0
 8019cbc:	4290      	cmp	r0, r2
 8019cbe:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019cc2:	4450      	add	r0, sl
 8019cc4:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8019cc8:	bfb8      	it	lt
 8019cca:	4696      	movlt	lr, r2
 8019ccc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019cd0:	4452      	add	r2, sl
 8019cd2:	b280      	uxth	r0, r0
 8019cd4:	4299      	cmp	r1, r3
 8019cd6:	468c      	mov	ip, r1
 8019cd8:	b292      	uxth	r2, r2
 8019cda:	9302      	str	r3, [sp, #8]
 8019cdc:	bfb8      	it	lt
 8019cde:	469c      	movlt	ip, r3
 8019ce0:	b203      	sxth	r3, r0
 8019ce2:	fa0f fa82 	sxth.w	sl, r2
 8019ce6:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019cea:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019cee:	4553      	cmp	r3, sl
 8019cf0:	bfb8      	it	lt
 8019cf2:	4602      	movlt	r2, r0
 8019cf4:	9b02      	ldr	r3, [sp, #8]
 8019cf6:	eba2 020e 	sub.w	r2, r2, lr
 8019cfa:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019cfe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019d02:	4411      	add	r1, r2
 8019d04:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019d08:	4413      	add	r3, r2
 8019d0a:	b289      	uxth	r1, r1
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	b208      	sxth	r0, r1
 8019d10:	b21a      	sxth	r2, r3
 8019d12:	4290      	cmp	r0, r2
 8019d14:	bfb8      	it	lt
 8019d16:	460b      	movlt	r3, r1
 8019d18:	eba3 030c 	sub.w	r3, r3, ip
 8019d1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019d20:	a807      	add	r0, sp, #28
 8019d22:	f7fc f916 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d26:	b920      	cbnz	r0, 8019d32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8019d28:	6823      	ldr	r3, [r4, #0]
 8019d2a:	a907      	add	r1, sp, #28
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d30:	4798      	blx	r3
 8019d32:	3701      	adds	r7, #1
 8019d34:	b2bf      	uxth	r7, r7
 8019d36:	e7a9      	b.n	8019c8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8019d38:	f8d9 0000 	ldr.w	r0, [r9]
 8019d3c:	2101      	movs	r1, #1
 8019d3e:	6803      	ldr	r3, [r0, #0]
 8019d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019d44:	4798      	blx	r3
 8019d46:	e773      	b.n	8019c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019d48:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019d4c:	e7e8      	b.n	8019d20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8019d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d50:	4798      	blx	r3
 8019d52:	4b3f      	ldr	r3, [pc, #252]	; (8019e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	f43f af2b 	beq.w	8019bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019d62:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8019d66:	882b      	ldrh	r3, [r5, #0]
 8019d68:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8019d6c:	42ab      	cmp	r3, r5
 8019d6e:	f4bf af20 	bcs.w	8019bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019d72:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019d76:	2907      	cmp	r1, #7
 8019d78:	d814      	bhi.n	8019da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8019d7a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8019d7e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8019d82:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8019d86:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8019d8a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8019d8e:	1c4a      	adds	r2, r1, #1
 8019d90:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8019d94:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019d98:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8019d9c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8019da0:	8097      	strh	r7, [r2, #4]
 8019da2:	80d6      	strh	r6, [r2, #6]
 8019da4:	3301      	adds	r3, #1
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	e7e0      	b.n	8019d6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8019daa:	2b02      	cmp	r3, #2
 8019dac:	f040 8133 	bne.w	801a016 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8019db0:	4b28      	ldr	r3, [pc, #160]	; (8019e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8019db2:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	f000 8098 	beq.w	8019eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019dbe:	882a      	ldrh	r2, [r5, #0]
 8019dc0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8019dc4:	3201      	adds	r2, #1
 8019dc6:	b292      	uxth	r2, r2
 8019dc8:	2900      	cmp	r1, #0
 8019dca:	d0c2      	beq.n	8019d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019dcc:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8019dd0:	4694      	mov	ip, r2
 8019dd2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8019dd6:	f04f 0900 	mov.w	r9, #0
 8019dda:	441e      	add	r6, r3
 8019ddc:	b236      	sxth	r6, r6
 8019dde:	fa1f f38c 	uxth.w	r3, ip
 8019de2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8019de6:	4299      	cmp	r1, r3
 8019de8:	f240 80be 	bls.w	8019f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8019dec:	4427      	add	r7, r4
 8019dee:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8019df2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8019df6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 8019dfa:	4283      	cmp	r3, r0
 8019dfc:	f340 80a0 	ble.w	8019f40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8019e00:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8019e04:	46e1      	mov	r9, ip
 8019e06:	4406      	add	r6, r0
 8019e08:	b236      	sxth	r6, r6
 8019e0a:	429e      	cmp	r6, r3
 8019e0c:	bfa8      	it	ge
 8019e0e:	461e      	movge	r6, r3
 8019e10:	f10c 0c01 	add.w	ip, ip, #1
 8019e14:	e7e3      	b.n	8019dde <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8019e16:	d10a      	bne.n	8019e2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8019e18:	4562      	cmp	r2, ip
 8019e1a:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8019e1e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8019e22:	bfb8      	it	lt
 8019e24:	4662      	movlt	r2, ip
 8019e26:	4288      	cmp	r0, r1
 8019e28:	bfb8      	it	lt
 8019e2a:	461f      	movlt	r7, r3
 8019e2c:	e086      	b.n	8019f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8019e2e:	428a      	cmp	r2, r1
 8019e30:	bfb8      	it	lt
 8019e32:	460a      	movlt	r2, r1
 8019e34:	e082      	b.n	8019f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8019e36:	bf00      	nop
 8019e38:	24006db4 	.word	0x24006db4
 8019e3c:	24006dc0 	.word	0x24006dc0
 8019e40:	24000050 	.word	0x24000050
 8019e44:	24006d7c 	.word	0x24006d7c
 8019e48:	24006d72 	.word	0x24006d72
 8019e4c:	24006d70 	.word	0x24006d70
 8019e50:	24006d7a 	.word	0x24006d7a
 8019e54:	24006d74 	.word	0x24006d74
 8019e58:	19a1      	adds	r1, r4, r6
 8019e5a:	ab07      	add	r3, sp, #28
 8019e5c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019e60:	6849      	ldr	r1, [r1, #4]
 8019e62:	c303      	stmia	r3!, {r0, r1}
 8019e64:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019e68:	a807      	add	r0, sp, #28
 8019e6a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019e6e:	2b13      	cmp	r3, #19
 8019e70:	440b      	add	r3, r1
 8019e72:	bfd8      	it	le
 8019e74:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019e78:	1a9b      	subs	r3, r3, r2
 8019e7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019e7e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019e82:	f7fe ffe9 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019e86:	a807      	add	r0, sp, #28
 8019e88:	f7fc f863 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e8c:	bb78      	cbnz	r0, 8019eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019e8e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019e92:	4426      	add	r6, r4
 8019e94:	f8d9 0000 	ldr.w	r0, [r9]
 8019e98:	f1bc 0f14 	cmp.w	ip, #20
 8019e9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019ea0:	f8d0 e000 	ldr.w	lr, [r0]
 8019ea4:	bfa8      	it	ge
 8019ea6:	f04f 0c14 	movge.w	ip, #20
 8019eaa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019eae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019eb2:	fa1f fc8c 	uxth.w	ip, ip
 8019eb6:	f8cd c000 	str.w	ip, [sp]
 8019eba:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8019ebe:	47d8      	blx	fp
 8019ec0:	4683      	mov	fp, r0
 8019ec2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019ec6:	a807      	add	r0, sp, #28
 8019ec8:	f7fe ffac 	bl	8018e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019ecc:	6823      	ldr	r3, [r4, #0]
 8019ece:	4620      	mov	r0, r4
 8019ed0:	a907      	add	r1, sp, #28
 8019ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ed4:	4798      	blx	r3
 8019ed6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8019eda:	eba0 000b 	sub.w	r0, r0, fp
 8019ede:	b200      	sxth	r0, r0
 8019ee0:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8019ee4:	b918      	cbnz	r0, 8019eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019ee6:	b2b9      	uxth	r1, r7
 8019ee8:	4650      	mov	r0, sl
 8019eea:	f7ff fa7b 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019eee:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8019ef2:	f1bb 0f00 	cmp.w	fp, #0
 8019ef6:	f43f af2c 	beq.w	8019d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019efa:	882b      	ldrh	r3, [r5, #0]
 8019efc:	2700      	movs	r7, #0
 8019efe:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8019f02:	3301      	adds	r3, #1
 8019f04:	b29b      	uxth	r3, r3
 8019f06:	b299      	uxth	r1, r3
 8019f08:	00fe      	lsls	r6, r7, #3
 8019f0a:	458b      	cmp	fp, r1
 8019f0c:	d9a4      	bls.n	8019e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8019f0e:	4426      	add	r6, r4
 8019f10:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8019f14:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8019f18:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8019f1c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8019f20:	4408      	add	r0, r1
 8019f22:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8019f26:	4461      	add	r1, ip
 8019f28:	b200      	sxth	r0, r0
 8019f2a:	b209      	sxth	r1, r1
 8019f2c:	4288      	cmp	r0, r1
 8019f2e:	f6bf af72 	bge.w	8019e16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8019f32:	4584      	cmp	ip, r0
 8019f34:	4662      	mov	r2, ip
 8019f36:	461f      	mov	r7, r3
 8019f38:	bfb8      	it	lt
 8019f3a:	4602      	movlt	r2, r0
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	e7e2      	b.n	8019f06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8019f40:	d10e      	bne.n	8019f60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8019f42:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8019f46:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8019f4a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8019f4e:	4473      	add	r3, lr
 8019f50:	b21b      	sxth	r3, r3
 8019f52:	429e      	cmp	r6, r3
 8019f54:	bfa8      	it	ge
 8019f56:	461e      	movge	r6, r3
 8019f58:	4287      	cmp	r7, r0
 8019f5a:	bfb8      	it	lt
 8019f5c:	46e1      	movlt	r9, ip
 8019f5e:	e757      	b.n	8019e10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8019f60:	4286      	cmp	r6, r0
 8019f62:	bfa8      	it	ge
 8019f64:	4606      	movge	r6, r0
 8019f66:	e753      	b.n	8019e10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8019f68:	eb0a 0007 	add.w	r0, sl, r7
 8019f6c:	4427      	add	r7, r4
 8019f6e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8019f72:	f1bb 0f13 	cmp.w	fp, #19
 8019f76:	bfdc      	itt	le
 8019f78:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8019f7c:	445e      	addle	r6, fp
 8019f7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019f82:	bfd8      	it	le
 8019f84:	b236      	sxthle	r6, r6
 8019f86:	f7fb ffe4 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f8a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019f8e:	2800      	cmp	r0, #0
 8019f90:	f47f af1a 	bne.w	8019dc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8019f94:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8019f98:	fa1f fb8b 	uxth.w	fp, fp
 8019f9c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019fa0:	1ab6      	subs	r6, r6, r2
 8019fa2:	4829      	ldr	r0, [pc, #164]	; (801a048 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8019fa4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8019fa8:	2e14      	cmp	r6, #20
 8019faa:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8019fae:	6800      	ldr	r0, [r0, #0]
 8019fb0:	bfa8      	it	ge
 8019fb2:	2614      	movge	r6, #20
 8019fb4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019fb8:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019fbc:	b289      	uxth	r1, r1
 8019fbe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019fc2:	b2b6      	uxth	r6, r6
 8019fc4:	f8d0 c000 	ldr.w	ip, [r0]
 8019fc8:	b292      	uxth	r2, r2
 8019fca:	455e      	cmp	r6, fp
 8019fcc:	bf94      	ite	ls
 8019fce:	9600      	strls	r6, [sp, #0]
 8019fd0:	f8cd b000 	strhi.w	fp, [sp]
 8019fd4:	b29b      	uxth	r3, r3
 8019fd6:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8019fda:	47b0      	blx	r6
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019fe2:	a907      	add	r1, sp, #28
 8019fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	4798      	blx	r3
 8019fea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019fee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8019ff2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8019ff6:	1a5b      	subs	r3, r3, r1
 8019ff8:	440a      	add	r2, r1
 8019ffa:	b21b      	sxth	r3, r3
 8019ffc:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801a000:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801a004:	2b00      	cmp	r3, #0
 801a006:	f47f aeda 	bne.w	8019dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a00a:	fa1f f189 	uxth.w	r1, r9
 801a00e:	4650      	mov	r0, sl
 801a010:	f7ff f9e8 	bl	80193e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a014:	e6d3      	b.n	8019dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a016:	882e      	ldrh	r6, [r5, #0]
 801a018:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801a01c:	42b3      	cmp	r3, r6
 801a01e:	f67f ae98 	bls.w	8019d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a022:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801a026:	ab07      	add	r3, sp, #28
 801a028:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a02c:	6851      	ldr	r1, [r2, #4]
 801a02e:	c303      	stmia	r3!, {r0, r1}
 801a030:	a807      	add	r0, sp, #28
 801a032:	f7fb ff8e 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a036:	b920      	cbnz	r0, 801a042 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	a907      	add	r1, sp, #28
 801a03c:	4620      	mov	r0, r4
 801a03e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a040:	4798      	blx	r3
 801a042:	3601      	adds	r6, #1
 801a044:	b2b6      	uxth	r6, r6
 801a046:	e7e7      	b.n	801a018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801a048:	24006d7c 	.word	0x24006d7c

0801a04c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a04c:	4b03      	ldr	r3, [pc, #12]	; (801a05c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a04e:	2200      	movs	r2, #0
 801a050:	801a      	strh	r2, [r3, #0]
 801a052:	805a      	strh	r2, [r3, #2]
 801a054:	809a      	strh	r2, [r3, #4]
 801a056:	80da      	strh	r2, [r3, #6]
 801a058:	4770      	bx	lr
 801a05a:	bf00      	nop
 801a05c:	24006dc0 	.word	0x24006dc0

0801a060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a064:	b09d      	sub	sp, #116	; 0x74
 801a066:	4606      	mov	r6, r0
 801a068:	4614      	mov	r4, r2
 801a06a:	468a      	mov	sl, r1
 801a06c:	a803      	add	r0, sp, #12
 801a06e:	461d      	mov	r5, r3
 801a070:	f000 fda5 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 801a074:	6833      	ldr	r3, [r6, #0]
 801a076:	4630      	mov	r0, r6
 801a078:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801a07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a07e:	4798      	blx	r3
 801a080:	6833      	ldr	r3, [r6, #0]
 801a082:	4607      	mov	r7, r0
 801a084:	4630      	mov	r0, r6
 801a086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a088:	4798      	blx	r3
 801a08a:	462a      	mov	r2, r5
 801a08c:	2500      	movs	r5, #0
 801a08e:	4621      	mov	r1, r4
 801a090:	9000      	str	r0, [sp, #0]
 801a092:	463b      	mov	r3, r7
 801a094:	462c      	mov	r4, r5
 801a096:	46a9      	mov	r9, r5
 801a098:	46a8      	mov	r8, r5
 801a09a:	a803      	add	r0, sp, #12
 801a09c:	f000 fdea 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	9302      	str	r3, [sp, #8]
 801a0a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a0a8:	429c      	cmp	r4, r3
 801a0aa:	d002      	beq.n	801a0b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a0ac:	455c      	cmp	r4, fp
 801a0ae:	bf18      	it	ne
 801a0b0:	4625      	movne	r5, r4
 801a0b2:	ab02      	add	r3, sp, #8
 801a0b4:	4632      	mov	r2, r6
 801a0b6:	4651      	mov	r1, sl
 801a0b8:	a803      	add	r0, sp, #12
 801a0ba:	f001 f8e1 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a0be:	4604      	mov	r4, r0
 801a0c0:	b108      	cbz	r0, 801a0c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a0c2:	280a      	cmp	r0, #10
 801a0c4:	d10a      	bne.n	801a0dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a0c6:	45c1      	cmp	r9, r8
 801a0c8:	bf38      	it	cc
 801a0ca:	46c1      	movcc	r9, r8
 801a0cc:	f04f 0800 	mov.w	r8, #0
 801a0d0:	2c00      	cmp	r4, #0
 801a0d2:	d1e5      	bne.n	801a0a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a0d4:	4648      	mov	r0, r9
 801a0d6:	b01d      	add	sp, #116	; 0x74
 801a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0dc:	9a02      	ldr	r2, [sp, #8]
 801a0de:	2a00      	cmp	r2, #0
 801a0e0:	d0de      	beq.n	801a0a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a0e2:	7b57      	ldrb	r7, [r2, #13]
 801a0e4:	4629      	mov	r1, r5
 801a0e6:	6833      	ldr	r3, [r6, #0]
 801a0e8:	007f      	lsls	r7, r7, #1
 801a0ea:	8894      	ldrh	r4, [r2, #4]
 801a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ee:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a0f2:	7a97      	ldrb	r7, [r2, #10]
 801a0f4:	4307      	orrs	r7, r0
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	4798      	blx	r3
 801a0fa:	4438      	add	r0, r7
 801a0fc:	4480      	add	r8, r0
 801a0fe:	fa1f f888 	uxth.w	r8, r8
 801a102:	e7e5      	b.n	801a0d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a104 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a104:	b508      	push	{r3, lr}
 801a106:	6803      	ldr	r3, [r0, #0]
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	4798      	blx	r3
 801a10c:	b128      	cbz	r0, 801a11a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a10e:	7b43      	ldrb	r3, [r0, #13]
 801a110:	7a80      	ldrb	r0, [r0, #10]
 801a112:	005b      	lsls	r3, r3, #1
 801a114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a118:	4318      	orrs	r0, r3
 801a11a:	bd08      	pop	{r3, pc}

0801a11c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a11c:	b40e      	push	{r1, r2, r3}
 801a11e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a120:	b09e      	sub	sp, #120	; 0x78
 801a122:	4605      	mov	r5, r0
 801a124:	ab23      	add	r3, sp, #140	; 0x8c
 801a126:	a805      	add	r0, sp, #20
 801a128:	f853 4b04 	ldr.w	r4, [r3], #4
 801a12c:	9303      	str	r3, [sp, #12]
 801a12e:	f000 fd46 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 801a132:	682b      	ldr	r3, [r5, #0]
 801a134:	4628      	mov	r0, r5
 801a136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a138:	4798      	blx	r3
 801a13a:	682b      	ldr	r3, [r5, #0]
 801a13c:	4606      	mov	r6, r0
 801a13e:	4628      	mov	r0, r5
 801a140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a142:	4798      	blx	r3
 801a144:	4633      	mov	r3, r6
 801a146:	4621      	mov	r1, r4
 801a148:	ae1e      	add	r6, sp, #120	; 0x78
 801a14a:	2400      	movs	r4, #0
 801a14c:	9000      	str	r0, [sp, #0]
 801a14e:	9a03      	ldr	r2, [sp, #12]
 801a150:	a805      	add	r0, sp, #20
 801a152:	f000 fd8f 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a156:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a15a:	462a      	mov	r2, r5
 801a15c:	4633      	mov	r3, r6
 801a15e:	4621      	mov	r1, r4
 801a160:	a805      	add	r0, sp, #20
 801a162:	f001 f88d 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a166:	b300      	cbz	r0, 801a1aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a168:	280a      	cmp	r0, #10
 801a16a:	d01a      	beq.n	801a1a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a16c:	9f04      	ldr	r7, [sp, #16]
 801a16e:	b1c7      	cbz	r7, 801a1a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a170:	7b78      	ldrb	r0, [r7, #13]
 801a172:	7a3b      	ldrb	r3, [r7, #8]
 801a174:	00c1      	lsls	r1, r0, #3
 801a176:	88ea      	ldrh	r2, [r5, #6]
 801a178:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a17c:	4319      	orrs	r1, r3
 801a17e:	0643      	lsls	r3, r0, #25
 801a180:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a184:	bf48      	it	mi
 801a186:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a18a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a18e:	bf48      	it	mi
 801a190:	b219      	sxthmi	r1, r3
 801a192:	79fb      	ldrb	r3, [r7, #7]
 801a194:	4303      	orrs	r3, r0
 801a196:	4413      	add	r3, r2
 801a198:	1a5b      	subs	r3, r3, r1
 801a19a:	b21b      	sxth	r3, r3
 801a19c:	429c      	cmp	r4, r3
 801a19e:	bfb8      	it	lt
 801a1a0:	461c      	movlt	r4, r3
 801a1a2:	4633      	mov	r3, r6
 801a1a4:	462a      	mov	r2, r5
 801a1a6:	2100      	movs	r1, #0
 801a1a8:	e7da      	b.n	801a160 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a1aa:	b2a0      	uxth	r0, r4
 801a1ac:	b01e      	add	sp, #120	; 0x78
 801a1ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a1b2:	b003      	add	sp, #12
 801a1b4:	4770      	bx	lr

0801a1b6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a1b6:	7a43      	ldrb	r3, [r0, #9]
 801a1b8:	8880      	ldrh	r0, [r0, #4]
 801a1ba:	4418      	add	r0, r3
 801a1bc:	b280      	uxth	r0, r0
 801a1be:	4770      	bx	lr

0801a1c0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a1c0:	6803      	ldr	r3, [r0, #0]
 801a1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1c4:	4718      	bx	r3

0801a1c6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a1c6:	b40e      	push	{r1, r2, r3}
 801a1c8:	b570      	push	{r4, r5, r6, lr}
 801a1ca:	b09d      	sub	sp, #116	; 0x74
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	ab21      	add	r3, sp, #132	; 0x84
 801a1d0:	a803      	add	r0, sp, #12
 801a1d2:	f853 5b04 	ldr.w	r5, [r3], #4
 801a1d6:	9302      	str	r3, [sp, #8]
 801a1d8:	f000 fcf1 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 801a1dc:	6823      	ldr	r3, [r4, #0]
 801a1de:	4620      	mov	r0, r4
 801a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a1e2:	4798      	blx	r3
 801a1e4:	6823      	ldr	r3, [r4, #0]
 801a1e6:	4606      	mov	r6, r0
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1ec:	2401      	movs	r4, #1
 801a1ee:	4798      	blx	r3
 801a1f0:	4633      	mov	r3, r6
 801a1f2:	9000      	str	r0, [sp, #0]
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	9a02      	ldr	r2, [sp, #8]
 801a1f8:	a803      	add	r0, sp, #12
 801a1fa:	f000 fd3b 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a1fe:	a803      	add	r0, sp, #12
 801a200:	f001 f90a 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a204:	b2a3      	uxth	r3, r4
 801a206:	b138      	cbz	r0, 801a218 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a208:	280a      	cmp	r0, #10
 801a20a:	a803      	add	r0, sp, #12
 801a20c:	bf04      	itt	eq
 801a20e:	3301      	addeq	r3, #1
 801a210:	b21c      	sxtheq	r4, r3
 801a212:	f001 f901 	bl	801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a216:	e7f5      	b.n	801a204 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a218:	4618      	mov	r0, r3
 801a21a:	b01d      	add	sp, #116	; 0x74
 801a21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a220:	b003      	add	sp, #12
 801a222:	4770      	bx	lr

0801a224 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a224:	b40e      	push	{r1, r2, r3}
 801a226:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a228:	b09e      	sub	sp, #120	; 0x78
 801a22a:	4604      	mov	r4, r0
 801a22c:	ab23      	add	r3, sp, #140	; 0x8c
 801a22e:	a805      	add	r0, sp, #20
 801a230:	f853 5b04 	ldr.w	r5, [r3], #4
 801a234:	9303      	str	r3, [sp, #12]
 801a236:	f000 fcc2 	bl	801abbe <_ZN8touchgfx12TextProviderC1Ev>
 801a23a:	6823      	ldr	r3, [r4, #0]
 801a23c:	4620      	mov	r0, r4
 801a23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a240:	4798      	blx	r3
 801a242:	6823      	ldr	r3, [r4, #0]
 801a244:	4606      	mov	r6, r0
 801a246:	4620      	mov	r0, r4
 801a248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a24a:	4798      	blx	r3
 801a24c:	4633      	mov	r3, r6
 801a24e:	4629      	mov	r1, r5
 801a250:	9000      	str	r0, [sp, #0]
 801a252:	9a03      	ldr	r2, [sp, #12]
 801a254:	a805      	add	r0, sp, #20
 801a256:	f000 fd0d 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a25a:	ad1e      	add	r5, sp, #120	; 0x78
 801a25c:	2100      	movs	r1, #0
 801a25e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801a262:	4622      	mov	r2, r4
 801a264:	a805      	add	r0, sp, #20
 801a266:	f845 1d68 	str.w	r1, [r5, #-104]!
 801a26a:	462b      	mov	r3, r5
 801a26c:	f001 f808 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a270:	b1d8      	cbz	r0, 801a2aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801a272:	280a      	cmp	r0, #10
 801a274:	d012      	beq.n	801a29c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a276:	9804      	ldr	r0, [sp, #16]
 801a278:	b180      	cbz	r0, 801a29c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a27a:	7b47      	ldrb	r7, [r0, #13]
 801a27c:	88e2      	ldrh	r2, [r4, #6]
 801a27e:	00fb      	lsls	r3, r7, #3
 801a280:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a284:	7a03      	ldrb	r3, [r0, #8]
 801a286:	430b      	orrs	r3, r1
 801a288:	0679      	lsls	r1, r7, #25
 801a28a:	bf44      	itt	mi
 801a28c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a290:	b21b      	sxthmi	r3, r3
 801a292:	1ad3      	subs	r3, r2, r3
 801a294:	b21b      	sxth	r3, r3
 801a296:	429e      	cmp	r6, r3
 801a298:	bfa8      	it	ge
 801a29a:	461e      	movge	r6, r3
 801a29c:	462b      	mov	r3, r5
 801a29e:	4622      	mov	r2, r4
 801a2a0:	2100      	movs	r1, #0
 801a2a2:	a805      	add	r0, sp, #20
 801a2a4:	f000 ffec 	bl	801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a2a8:	e7e2      	b.n	801a270 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	b01e      	add	sp, #120	; 0x78
 801a2ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a2b2:	b003      	add	sp, #12
 801a2b4:	4770      	bx	lr

0801a2b6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a2b6:	b513      	push	{r0, r1, r4, lr}
 801a2b8:	6803      	ldr	r3, [r0, #0]
 801a2ba:	2400      	movs	r4, #0
 801a2bc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a2c0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a2c4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a2c8:	4669      	mov	r1, sp
 801a2ca:	691b      	ldr	r3, [r3, #16]
 801a2cc:	9400      	str	r4, [sp, #0]
 801a2ce:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a2d2:	4798      	blx	r3
 801a2d4:	b002      	add	sp, #8
 801a2d6:	bd10      	pop	{r4, pc}

0801a2d8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a2d8:	b538      	push	{r3, r4, r5, lr}
 801a2da:	680b      	ldr	r3, [r1, #0]
 801a2dc:	460c      	mov	r4, r1
 801a2de:	4605      	mov	r5, r0
 801a2e0:	68db      	ldr	r3, [r3, #12]
 801a2e2:	4798      	blx	r3
 801a2e4:	6823      	ldr	r3, [r4, #0]
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2ec:	4798      	blx	r3
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	bd38      	pop	{r3, r4, r5, pc}

0801a2f2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a2f2:	b410      	push	{r4}
 801a2f4:	880a      	ldrh	r2, [r1, #0]
 801a2f6:	8884      	ldrh	r4, [r0, #4]
 801a2f8:	4422      	add	r2, r4
 801a2fa:	800a      	strh	r2, [r1, #0]
 801a2fc:	884a      	ldrh	r2, [r1, #2]
 801a2fe:	88c4      	ldrh	r4, [r0, #6]
 801a300:	4422      	add	r2, r4
 801a302:	804a      	strh	r2, [r1, #2]
 801a304:	6940      	ldr	r0, [r0, #20]
 801a306:	b120      	cbz	r0, 801a312 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a308:	6803      	ldr	r3, [r0, #0]
 801a30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a310:	4718      	bx	r3
 801a312:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a316:	4770      	bx	lr

0801a318 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a318:	b570      	push	{r4, r5, r6, lr}
 801a31a:	8882      	ldrh	r2, [r0, #4]
 801a31c:	460c      	mov	r4, r1
 801a31e:	880b      	ldrh	r3, [r1, #0]
 801a320:	4605      	mov	r5, r0
 801a322:	4413      	add	r3, r2
 801a324:	800b      	strh	r3, [r1, #0]
 801a326:	884b      	ldrh	r3, [r1, #2]
 801a328:	88c2      	ldrh	r2, [r0, #6]
 801a32a:	4413      	add	r3, r2
 801a32c:	804b      	strh	r3, [r1, #2]
 801a32e:	1d01      	adds	r1, r0, #4
 801a330:	4620      	mov	r0, r4
 801a332:	f7fb fdcb 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801a336:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	dd0b      	ble.n	801a356 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a33e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a342:	2b00      	cmp	r3, #0
 801a344:	dd07      	ble.n	801a356 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a346:	6968      	ldr	r0, [r5, #20]
 801a348:	b128      	cbz	r0, 801a356 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a34a:	6803      	ldr	r3, [r0, #0]
 801a34c:	4621      	mov	r1, r4
 801a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a354:	4718      	bx	r3
 801a356:	bd70      	pop	{r4, r5, r6, pc}

0801a358 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a358:	b570      	push	{r4, r5, r6, lr}
 801a35a:	8882      	ldrh	r2, [r0, #4]
 801a35c:	460c      	mov	r4, r1
 801a35e:	880b      	ldrh	r3, [r1, #0]
 801a360:	4605      	mov	r5, r0
 801a362:	4413      	add	r3, r2
 801a364:	800b      	strh	r3, [r1, #0]
 801a366:	884b      	ldrh	r3, [r1, #2]
 801a368:	88c2      	ldrh	r2, [r0, #6]
 801a36a:	4413      	add	r3, r2
 801a36c:	804b      	strh	r3, [r1, #2]
 801a36e:	1d01      	adds	r1, r0, #4
 801a370:	4620      	mov	r0, r4
 801a372:	f7fb fdab 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801a376:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	dd19      	ble.n	801a3b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a37e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a382:	2b00      	cmp	r3, #0
 801a384:	dd15      	ble.n	801a3b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a386:	6968      	ldr	r0, [r5, #20]
 801a388:	b128      	cbz	r0, 801a396 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801a38a:	6803      	ldr	r3, [r0, #0]
 801a38c:	4621      	mov	r1, r4
 801a38e:	691b      	ldr	r3, [r3, #16]
 801a390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a394:	4718      	bx	r3
 801a396:	4b07      	ldr	r3, [pc, #28]	; (801a3b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	3304      	adds	r3, #4
 801a39c:	429d      	cmp	r5, r3
 801a39e:	d108      	bne.n	801a3b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a3a0:	f7fe fee8 	bl	8019174 <_ZN8touchgfx11Application11getInstanceEv>
 801a3a4:	6803      	ldr	r3, [r0, #0]
 801a3a6:	6821      	ldr	r1, [r4, #0]
 801a3a8:	6862      	ldr	r2, [r4, #4]
 801a3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3b0:	4718      	bx	r3
 801a3b2:	bd70      	pop	{r4, r5, r6, pc}
 801a3b4:	24006db8 	.word	0x24006db8

0801a3b8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a3b8:	b570      	push	{r4, r5, r6, lr}
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	4616      	mov	r6, r2
 801a3be:	460d      	mov	r5, r1
 801a3c0:	b901      	cbnz	r1, 801a3c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a3c2:	b192      	cbz	r2, 801a3ea <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801a3c4:	6823      	ldr	r3, [r4, #0]
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	699b      	ldr	r3, [r3, #24]
 801a3ca:	4798      	blx	r3
 801a3cc:	88e2      	ldrh	r2, [r4, #6]
 801a3ce:	88a1      	ldrh	r1, [r4, #4]
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	4432      	add	r2, r6
 801a3d4:	4429      	add	r1, r5
 801a3d6:	b212      	sxth	r2, r2
 801a3d8:	b209      	sxth	r1, r1
 801a3da:	f7e9 fedf 	bl	800419c <_ZN8touchgfx8Drawable5setXYEss>
 801a3de:	6823      	ldr	r3, [r4, #0]
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	699b      	ldr	r3, [r3, #24]
 801a3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3e8:	4718      	bx	r3
 801a3ea:	bd70      	pop	{r4, r5, r6, pc}

0801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a3ec:	b510      	push	{r4, lr}
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	4604      	mov	r4, r0
 801a3f2:	4608      	mov	r0, r1
 801a3f4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a3f8:	8023      	strh	r3, [r4, #0]
 801a3fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a3fe:	8063      	strh	r3, [r4, #2]
 801a400:	6803      	ldr	r3, [r0, #0]
 801a402:	80a1      	strh	r1, [r4, #4]
 801a404:	4621      	mov	r1, r4
 801a406:	80e2      	strh	r2, [r4, #6]
 801a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40a:	4798      	blx	r3
 801a40c:	4620      	mov	r0, r4
 801a40e:	bd10      	pop	{r4, pc}

0801a410 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a410:	b530      	push	{r4, r5, lr}
 801a412:	8083      	strh	r3, [r0, #4]
 801a414:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a418:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a41c:	80c3      	strh	r3, [r0, #6]
 801a41e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a422:	6141      	str	r1, [r0, #20]
 801a424:	7203      	strb	r3, [r0, #8]
 801a426:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a42a:	8302      	strh	r2, [r0, #24]
 801a42c:	7243      	strb	r3, [r0, #9]
 801a42e:	7a83      	ldrb	r3, [r0, #10]
 801a430:	f365 0306 	bfi	r3, r5, #0, #7
 801a434:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a438:	f365 13c7 	bfi	r3, r5, #7, #1
 801a43c:	7283      	strb	r3, [r0, #10]
 801a43e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a442:	72c3      	strb	r3, [r0, #11]
 801a444:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a448:	7303      	strb	r3, [r0, #12]
 801a44a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a44e:	81c3      	strh	r3, [r0, #14]
 801a450:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a454:	8203      	strh	r3, [r0, #16]
 801a456:	4b01      	ldr	r3, [pc, #4]	; (801a45c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a458:	6003      	str	r3, [r0, #0]
 801a45a:	bd30      	pop	{r4, r5, pc}
 801a45c:	08028110 	.word	0x08028110

0801a460 <_ZNK8touchgfx9ConstFont4findEt>:
 801a460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a462:	6944      	ldr	r4, [r0, #20]
 801a464:	b3bc      	cbz	r4, 801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a466:	88a3      	ldrh	r3, [r4, #4]
 801a468:	8b02      	ldrh	r2, [r0, #24]
 801a46a:	1acb      	subs	r3, r1, r3
 801a46c:	f102 32ff 	add.w	r2, r2, #4294967295
 801a470:	d431      	bmi.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a472:	4293      	cmp	r3, r2
 801a474:	dd0c      	ble.n	801a490 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a476:	230e      	movs	r3, #14
 801a478:	fb03 4302 	mla	r3, r3, r2, r4
 801a47c:	889b      	ldrh	r3, [r3, #4]
 801a47e:	1a5b      	subs	r3, r3, r1
 801a480:	1ad3      	subs	r3, r2, r3
 801a482:	429a      	cmp	r2, r3
 801a484:	db27      	blt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a486:	2b00      	cmp	r3, #0
 801a488:	bfbc      	itt	lt
 801a48a:	2302      	movlt	r3, #2
 801a48c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a490:	2500      	movs	r5, #0
 801a492:	260e      	movs	r6, #14
 801a494:	4295      	cmp	r5, r2
 801a496:	dc1e      	bgt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a498:	fb06 4003 	mla	r0, r6, r3, r4
 801a49c:	8887      	ldrh	r7, [r0, #4]
 801a49e:	42b9      	cmp	r1, r7
 801a4a0:	d01a      	beq.n	801a4d8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a4a2:	d20d      	bcs.n	801a4c0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a4a4:	1e5a      	subs	r2, r3, #1
 801a4a6:	4295      	cmp	r5, r2
 801a4a8:	dc15      	bgt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4aa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a4ae:	1a5b      	subs	r3, r3, r1
 801a4b0:	1ad3      	subs	r3, r2, r3
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	db0f      	blt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4b6:	429d      	cmp	r5, r3
 801a4b8:	ddec      	ble.n	801a494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4ba:	1953      	adds	r3, r2, r5
 801a4bc:	105b      	asrs	r3, r3, #1
 801a4be:	e7e9      	b.n	801a494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4c0:	1c5d      	adds	r5, r3, #1
 801a4c2:	42aa      	cmp	r2, r5
 801a4c4:	db07      	blt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4c6:	8a43      	ldrh	r3, [r0, #18]
 801a4c8:	1acb      	subs	r3, r1, r3
 801a4ca:	442b      	add	r3, r5
 801a4cc:	429d      	cmp	r5, r3
 801a4ce:	dc02      	bgt.n	801a4d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	dadf      	bge.n	801a494 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4d4:	e7f1      	b.n	801a4ba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a4d6:	2000      	movs	r0, #0
 801a4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a4da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4dc:	4604      	mov	r4, r0
 801a4de:	4617      	mov	r7, r2
 801a4e0:	461e      	mov	r6, r3
 801a4e2:	b911      	cbnz	r1, 801a4ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a4e4:	2500      	movs	r5, #0
 801a4e6:	4628      	mov	r0, r5
 801a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4ea:	290a      	cmp	r1, #10
 801a4ec:	d0fa      	beq.n	801a4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a4ee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a4f2:	4291      	cmp	r1, r2
 801a4f4:	d0f6      	beq.n	801a4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a4f6:	f242 020b 	movw	r2, #8203	; 0x200b
 801a4fa:	4291      	cmp	r1, r2
 801a4fc:	d0f2      	beq.n	801a4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a4fe:	f7ff ffaf 	bl	801a460 <_ZNK8touchgfx9ConstFont4findEt>
 801a502:	4605      	mov	r5, r0
 801a504:	b950      	cbnz	r0, 801a51c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a506:	6823      	ldr	r3, [r4, #0]
 801a508:	4620      	mov	r0, r4
 801a50a:	691b      	ldr	r3, [r3, #16]
 801a50c:	4798      	blx	r3
 801a50e:	4601      	mov	r1, r0
 801a510:	4620      	mov	r0, r4
 801a512:	f7ff ffa5 	bl	801a460 <_ZNK8touchgfx9ConstFont4findEt>
 801a516:	4605      	mov	r5, r0
 801a518:	2800      	cmp	r0, #0
 801a51a:	d0e3      	beq.n	801a4e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a51c:	6823      	ldr	r3, [r4, #0]
 801a51e:	4629      	mov	r1, r5
 801a520:	4620      	mov	r0, r4
 801a522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a524:	4798      	blx	r3
 801a526:	6038      	str	r0, [r7, #0]
 801a528:	6823      	ldr	r3, [r4, #0]
 801a52a:	4620      	mov	r0, r4
 801a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a52e:	4798      	blx	r3
 801a530:	7030      	strb	r0, [r6, #0]
 801a532:	e7d8      	b.n	801a4e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a534 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a534:	2000      	movs	r0, #0
 801a536:	4770      	bx	lr

0801a538 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a538:	2001      	movs	r0, #1
 801a53a:	4770      	bx	lr

0801a53c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a53c:	2002      	movs	r0, #2
 801a53e:	4770      	bx	lr

0801a540 <_ZN8touchgfx12GestureEventD1Ev>:
 801a540:	4770      	bx	lr

0801a542 <_ZN8touchgfx9DragEventD1Ev>:
 801a542:	4770      	bx	lr

0801a544 <_ZN8touchgfx10ClickEventD1Ev>:
 801a544:	4770      	bx	lr

0801a546 <_ZN8touchgfx10ClickEventD0Ev>:
 801a546:	b510      	push	{r4, lr}
 801a548:	4604      	mov	r4, r0
 801a54a:	210c      	movs	r1, #12
 801a54c:	f00a fe51 	bl	80251f2 <_ZdlPvj>
 801a550:	4620      	mov	r0, r4
 801a552:	bd10      	pop	{r4, pc}

0801a554 <_ZN8touchgfx9DragEventD0Ev>:
 801a554:	b510      	push	{r4, lr}
 801a556:	4604      	mov	r4, r0
 801a558:	2110      	movs	r1, #16
 801a55a:	f00a fe4a 	bl	80251f2 <_ZdlPvj>
 801a55e:	4620      	mov	r0, r4
 801a560:	bd10      	pop	{r4, pc}

0801a562 <_ZN8touchgfx12GestureEventD0Ev>:
 801a562:	b510      	push	{r4, lr}
 801a564:	4604      	mov	r4, r0
 801a566:	210c      	movs	r1, #12
 801a568:	f00a fe43 	bl	80251f2 <_ZdlPvj>
 801a56c:	4620      	mov	r0, r4
 801a56e:	bd10      	pop	{r4, pc}

0801a570 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a570:	b530      	push	{r4, r5, lr}
 801a572:	460d      	mov	r5, r1
 801a574:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a576:	b087      	sub	sp, #28
 801a578:	4604      	mov	r4, r0
 801a57a:	b301      	cbz	r1, 801a5be <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a57c:	a801      	add	r0, sp, #4
 801a57e:	f7ff ff35 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a582:	892a      	ldrh	r2, [r5, #8]
 801a584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a588:	7928      	ldrb	r0, [r5, #4]
 801a58a:	1ad2      	subs	r2, r2, r3
 801a58c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a58e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a592:	441a      	add	r2, r3
 801a594:	896b      	ldrh	r3, [r5, #10]
 801a596:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a59a:	f88d 0010 	strb.w	r0, [sp, #16]
 801a59e:	1b5b      	subs	r3, r3, r5
 801a5a0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a5a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a5a4:	442b      	add	r3, r5
 801a5a6:	4d07      	ldr	r5, [pc, #28]	; (801a5c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a5a8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a5ac:	a903      	add	r1, sp, #12
 801a5ae:	9503      	str	r5, [sp, #12]
 801a5b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a5b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5b8:	6803      	ldr	r3, [r0, #0]
 801a5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a5bc:	4798      	blx	r3
 801a5be:	b007      	add	sp, #28
 801a5c0:	bd30      	pop	{r4, r5, pc}
 801a5c2:	bf00      	nop
 801a5c4:	08028198 	.word	0x08028198

0801a5c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a5ce:	b08a      	sub	sp, #40	; 0x28
 801a5d0:	4604      	mov	r4, r0
 801a5d2:	460d      	mov	r5, r1
 801a5d4:	b113      	cbz	r3, 801a5dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a5d6:	790b      	ldrb	r3, [r1, #4]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d044      	beq.n	801a666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a5dc:	f104 0804 	add.w	r8, r4, #4
 801a5e0:	a803      	add	r0, sp, #12
 801a5e2:	4641      	mov	r1, r8
 801a5e4:	f7ff ff02 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5e8:	792b      	ldrb	r3, [r5, #4]
 801a5ea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a5ee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a5f2:	b983      	cbnz	r3, 801a616 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a5f4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801a5f8:	892a      	ldrh	r2, [r5, #8]
 801a5fa:	88e9      	ldrh	r1, [r5, #6]
 801a5fc:	4640      	mov	r0, r8
 801a5fe:	1b92      	subs	r2, r2, r6
 801a600:	9301      	str	r3, [sp, #4]
 801a602:	1bc9      	subs	r1, r1, r7
 801a604:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a608:	b212      	sxth	r2, r2
 801a60a:	9300      	str	r3, [sp, #0]
 801a60c:	b209      	sxth	r1, r1
 801a60e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a612:	f7fb fb79 	bl	8015d08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a618:	b329      	cbz	r1, 801a666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a61a:	a805      	add	r0, sp, #20
 801a61c:	f7ff fee6 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a620:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a624:	792b      	ldrb	r3, [r5, #4]
 801a626:	a907      	add	r1, sp, #28
 801a628:	1abf      	subs	r7, r7, r2
 801a62a:	88ea      	ldrh	r2, [r5, #6]
 801a62c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a62e:	4417      	add	r7, r2
 801a630:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a632:	f88d 3020 	strb.w	r3, [sp, #32]
 801a636:	4417      	add	r7, r2
 801a638:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a63c:	1ab6      	subs	r6, r6, r2
 801a63e:	892a      	ldrh	r2, [r5, #8]
 801a640:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a644:	4416      	add	r6, r2
 801a646:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a648:	4416      	add	r6, r2
 801a64a:	4a08      	ldr	r2, [pc, #32]	; (801a66c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a64c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a650:	2600      	movs	r6, #0
 801a652:	9207      	str	r2, [sp, #28]
 801a654:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a658:	6803      	ldr	r3, [r0, #0]
 801a65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a65c:	4798      	blx	r3
 801a65e:	792b      	ldrb	r3, [r5, #4]
 801a660:	b10b      	cbz	r3, 801a666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a662:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a666:	b00a      	add	sp, #40	; 0x28
 801a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a66c:	08028170 	.word	0x08028170

0801a670 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a674:	460c      	mov	r4, r1
 801a676:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a678:	b088      	sub	sp, #32
 801a67a:	4605      	mov	r5, r0
 801a67c:	2900      	cmp	r1, #0
 801a67e:	d06d      	beq.n	801a75c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a680:	4668      	mov	r0, sp
 801a682:	f7ff feb3 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a686:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a688:	88e3      	ldrh	r3, [r4, #6]
 801a68a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a68e:	440b      	add	r3, r1
 801a690:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a694:	b21b      	sxth	r3, r3
 801a696:	4543      	cmp	r3, r8
 801a698:	db31      	blt.n	801a6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a69a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a69e:	44c4      	add	ip, r8
 801a6a0:	fa0f fc8c 	sxth.w	ip, ip
 801a6a4:	4563      	cmp	r3, ip
 801a6a6:	da2a      	bge.n	801a6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6a8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a6aa:	8926      	ldrh	r6, [r4, #8]
 801a6ac:	4416      	add	r6, r2
 801a6ae:	b236      	sxth	r6, r6
 801a6b0:	42be      	cmp	r6, r7
 801a6b2:	db24      	blt.n	801a6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a6b8:	4438      	add	r0, r7
 801a6ba:	b200      	sxth	r0, r0
 801a6bc:	4286      	cmp	r6, r0
 801a6be:	da1e      	bge.n	801a6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6c0:	8963      	ldrh	r3, [r4, #10]
 801a6c2:	4419      	add	r1, r3
 801a6c4:	b209      	sxth	r1, r1
 801a6c6:	4541      	cmp	r1, r8
 801a6c8:	db08      	blt.n	801a6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a6ca:	4561      	cmp	r1, ip
 801a6cc:	da06      	bge.n	801a6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	441a      	add	r2, r3
 801a6d2:	b212      	sxth	r2, r2
 801a6d4:	42ba      	cmp	r2, r7
 801a6d6:	db01      	blt.n	801a6dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a6d8:	4282      	cmp	r2, r0
 801a6da:	db10      	blt.n	801a6fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6dc:	4b21      	ldr	r3, [pc, #132]	; (801a764 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a6de:	a904      	add	r1, sp, #16
 801a6e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a6e2:	9304      	str	r3, [sp, #16]
 801a6e4:	2302      	movs	r3, #2
 801a6e6:	f88d 3014 	strb.w	r3, [sp, #20]
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a6f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a6f8:	6803      	ldr	r3, [r0, #0]
 801a6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6fc:	4798      	blx	r3
 801a6fe:	1d29      	adds	r1, r5, #4
 801a700:	a802      	add	r0, sp, #8
 801a702:	f7ff fe73 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a706:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a70a:	88e0      	ldrh	r0, [r4, #6]
 801a70c:	eba3 0808 	sub.w	r8, r3, r8
 801a710:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a714:	7921      	ldrb	r1, [r4, #4]
 801a716:	fa1f f888 	uxth.w	r8, r8
 801a71a:	1bdf      	subs	r7, r3, r7
 801a71c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a720:	b2bb      	uxth	r3, r7
 801a722:	4440      	add	r0, r8
 801a724:	8922      	ldrh	r2, [r4, #8]
 801a726:	8967      	ldrh	r7, [r4, #10]
 801a728:	4460      	add	r0, ip
 801a72a:	89a4      	ldrh	r4, [r4, #12]
 801a72c:	441a      	add	r2, r3
 801a72e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a730:	44b8      	add	r8, r7
 801a732:	4423      	add	r3, r4
 801a734:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a738:	4432      	add	r2, r6
 801a73a:	44e0      	add	r8, ip
 801a73c:	4433      	add	r3, r6
 801a73e:	4c0a      	ldr	r4, [pc, #40]	; (801a768 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a740:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a742:	f88d 1014 	strb.w	r1, [sp, #20]
 801a746:	a904      	add	r1, sp, #16
 801a748:	9404      	str	r4, [sp, #16]
 801a74a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a74e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a752:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a756:	6803      	ldr	r3, [r0, #0]
 801a758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a75a:	4798      	blx	r3
 801a75c:	b008      	add	sp, #32
 801a75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a762:	bf00      	nop
 801a764:	08028170 	.word	0x08028170
 801a768:	08028184 	.word	0x08028184

0801a76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a76e:	4604      	mov	r4, r0
 801a770:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a774:	3201      	adds	r2, #1
 801a776:	d112      	bne.n	801a79e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a778:	2500      	movs	r5, #0
 801a77a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a77e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a782:	6803      	ldr	r3, [r0, #0]
 801a784:	9500      	str	r5, [sp, #0]
 801a786:	466d      	mov	r5, sp
 801a788:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a78c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a790:	4629      	mov	r1, r5
 801a792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a794:	4798      	blx	r3
 801a796:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a79a:	e884 0003 	stmia.w	r4, {r0, r1}
 801a79e:	4620      	mov	r0, r4
 801a7a0:	b003      	add	sp, #12
 801a7a2:	bd30      	pop	{r4, r5, pc}

0801a7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a7a4:	b513      	push	{r0, r1, r4, lr}
 801a7a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	d109      	bne.n	801a7c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a7b0:	4601      	mov	r1, r0
 801a7b2:	4668      	mov	r0, sp
 801a7b4:	f7ff fe1a 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a7bc:	8423      	strh	r3, [r4, #32]
 801a7be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a7c2:	8463      	strh	r3, [r4, #34]	; 0x22
 801a7c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a7c8:	b002      	add	sp, #8
 801a7ca:	bd10      	pop	{r4, pc}

0801a7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a7cc:	b513      	push	{r0, r1, r4, lr}
 801a7ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	d109      	bne.n	801a7ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a7d8:	4601      	mov	r1, r0
 801a7da:	4668      	mov	r0, sp
 801a7dc:	f7ff fe06 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a7e4:	8423      	strh	r3, [r4, #32]
 801a7e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a7ea:	8463      	strh	r3, [r4, #34]	; 0x22
 801a7ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a7f0:	b002      	add	sp, #8
 801a7f2:	bd10      	pop	{r4, pc}

0801a7f4 <_ZN8touchgfx6ScreenC1Ev>:
 801a7f4:	b570      	push	{r4, r5, r6, lr}
 801a7f6:	4b17      	ldr	r3, [pc, #92]	; (801a854 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a7f8:	4605      	mov	r5, r0
 801a7fa:	4a17      	ldr	r2, [pc, #92]	; (801a858 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a7fc:	2101      	movs	r1, #1
 801a7fe:	f845 3b04 	str.w	r3, [r5], #4
 801a802:	2300      	movs	r3, #0
 801a804:	6042      	str	r2, [r0, #4]
 801a806:	4604      	mov	r4, r0
 801a808:	8103      	strh	r3, [r0, #8]
 801a80a:	8143      	strh	r3, [r0, #10]
 801a80c:	8183      	strh	r3, [r0, #12]
 801a80e:	81c3      	strh	r3, [r0, #14]
 801a810:	8203      	strh	r3, [r0, #16]
 801a812:	8243      	strh	r3, [r0, #18]
 801a814:	8283      	strh	r3, [r0, #20]
 801a816:	82c3      	strh	r3, [r0, #22]
 801a818:	6203      	str	r3, [r0, #32]
 801a81a:	8483      	strh	r3, [r0, #36]	; 0x24
 801a81c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a81e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a822:	6343      	str	r3, [r0, #52]	; 0x34
 801a824:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a828:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a82c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a830:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a834:	4b09      	ldr	r3, [pc, #36]	; (801a85c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a836:	4628      	mov	r0, r5
 801a838:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a83c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a83e:	4a08      	ldr	r2, [pc, #32]	; (801a860 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a840:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a844:	4798      	blx	r3
 801a846:	6863      	ldr	r3, [r4, #4]
 801a848:	4628      	mov	r0, r5
 801a84a:	4631      	mov	r1, r6
 801a84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a84e:	4798      	blx	r3
 801a850:	4620      	mov	r0, r4
 801a852:	bd70      	pop	{r4, r5, r6, pc}
 801a854:	080281ac 	.word	0x080281ac
 801a858:	08027cb0 	.word	0x08027cb0
 801a85c:	24006d72 	.word	0x24006d72
 801a860:	24006d70 	.word	0x24006d70

0801a864 <_ZN8touchgfx6Screen4drawEv>:
 801a864:	4b09      	ldr	r3, [pc, #36]	; (801a88c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a866:	b507      	push	{r0, r1, r2, lr}
 801a868:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a86c:	2100      	movs	r1, #0
 801a86e:	4b08      	ldr	r3, [pc, #32]	; (801a890 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a870:	9100      	str	r1, [sp, #0]
 801a872:	4669      	mov	r1, sp
 801a874:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a878:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a87c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a880:	6803      	ldr	r3, [r0, #0]
 801a882:	689b      	ldr	r3, [r3, #8]
 801a884:	4798      	blx	r3
 801a886:	b003      	add	sp, #12
 801a888:	f85d fb04 	ldr.w	pc, [sp], #4
 801a88c:	24006d70 	.word	0x24006d70
 801a890:	24006d72 	.word	0x24006d72

0801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a898:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a89c:	b089      	sub	sp, #36	; 0x24
 801a89e:	4680      	mov	r8, r0
 801a8a0:	460c      	mov	r4, r1
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	4615      	mov	r5, r2
 801a8a6:	dd0e      	ble.n	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a8a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	dd0a      	ble.n	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	f7ff ff5b 	bl	801a76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a8b6:	4621      	mov	r1, r4
 801a8b8:	f7fe fb7e 	bl	8018fb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a8bc:	69eb      	ldr	r3, [r5, #28]
 801a8be:	b928      	cbnz	r0, 801a8cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a8c0:	461d      	mov	r5, r3
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d1f4      	bne.n	801a8b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a8c6:	b009      	add	sp, #36	; 0x24
 801a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8cc:	ae04      	add	r6, sp, #16
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	f000 80b5 	beq.w	801aa3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a8d4:	682b      	ldr	r3, [r5, #0]
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	a802      	add	r0, sp, #8
 801a8da:	68db      	ldr	r3, [r3, #12]
 801a8dc:	4798      	blx	r3
 801a8de:	4628      	mov	r0, r5
 801a8e0:	f7ff ff60 	bl	801a7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a8e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a8e8:	4407      	add	r7, r0
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	f7ff ff6e 	bl	801a7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a8f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a8f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a8f8:	b23f      	sxth	r7, r7
 801a8fa:	4418      	add	r0, r3
 801a8fc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a900:	4621      	mov	r1, r4
 801a902:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a906:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a90a:	4630      	mov	r0, r6
 801a90c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a910:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a914:	f7fb fada 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801a918:	4628      	mov	r0, r5
 801a91a:	f7ff ff27 	bl	801a76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a91e:	ab06      	add	r3, sp, #24
 801a920:	4602      	mov	r2, r0
 801a922:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a926:	e883 0003 	stmia.w	r3, {r0, r1}
 801a92a:	4611      	mov	r1, r2
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7fb facd 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801a932:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a936:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a93a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a93e:	4299      	cmp	r1, r3
 801a940:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a944:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a948:	d10b      	bne.n	801a962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a94a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a94e:	4552      	cmp	r2, sl
 801a950:	d107      	bne.n	801a962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a952:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a956:	455a      	cmp	r2, fp
 801a958:	d103      	bne.n	801a962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a95a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a95e:	454a      	cmp	r2, r9
 801a960:	d06d      	beq.n	801aa3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a962:	f1bb 0f00 	cmp.w	fp, #0
 801a966:	dd65      	ble.n	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a968:	f1b9 0f00 	cmp.w	r9, #0
 801a96c:	dd62      	ble.n	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a96e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a972:	fa1f f08a 	uxth.w	r0, sl
 801a976:	4552      	cmp	r2, sl
 801a978:	9000      	str	r0, [sp, #0]
 801a97a:	da12      	bge.n	801a9a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a97c:	9301      	str	r3, [sp, #4]
 801a97e:	9b00      	ldr	r3, [sp, #0]
 801a980:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a984:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a988:	1a9a      	subs	r2, r3, r2
 801a98a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a98e:	4631      	mov	r1, r6
 801a990:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a994:	4640      	mov	r0, r8
 801a996:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a99a:	69ea      	ldr	r2, [r5, #28]
 801a99c:	f7ff ff7a 	bl	801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9a0:	9b01      	ldr	r3, [sp, #4]
 801a9a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a9a6:	b29f      	uxth	r7, r3
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	da0d      	bge.n	801a9c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a9ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a9b0:	1aba      	subs	r2, r7, r2
 801a9b2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a9b6:	4631      	mov	r1, r6
 801a9b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a9bc:	4640      	mov	r0, r8
 801a9be:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a9c2:	69ea      	ldr	r2, [r5, #28]
 801a9c4:	f7ff ff66 	bl	801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9c8:	8822      	ldrh	r2, [r4, #0]
 801a9ca:	445f      	add	r7, fp
 801a9cc:	88a3      	ldrh	r3, [r4, #4]
 801a9ce:	b2bf      	uxth	r7, r7
 801a9d0:	4413      	add	r3, r2
 801a9d2:	b23a      	sxth	r2, r7
 801a9d4:	b29b      	uxth	r3, r3
 801a9d6:	b219      	sxth	r1, r3
 801a9d8:	4291      	cmp	r1, r2
 801a9da:	dd0d      	ble.n	801a9f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a9dc:	1bdb      	subs	r3, r3, r7
 801a9de:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a9e2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a9e6:	4631      	mov	r1, r6
 801a9e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a9ec:	4640      	mov	r0, r8
 801a9ee:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a9f2:	69ea      	ldr	r2, [r5, #28]
 801a9f4:	f7ff ff4e 	bl	801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9f8:	88e2      	ldrh	r2, [r4, #6]
 801a9fa:	8863      	ldrh	r3, [r4, #2]
 801a9fc:	4413      	add	r3, r2
 801a9fe:	9a00      	ldr	r2, [sp, #0]
 801aa00:	444a      	add	r2, r9
 801aa02:	b29b      	uxth	r3, r3
 801aa04:	fa1f f982 	uxth.w	r9, r2
 801aa08:	b219      	sxth	r1, r3
 801aa0a:	fa0f f289 	sxth.w	r2, r9
 801aa0e:	428a      	cmp	r2, r1
 801aa10:	da15      	bge.n	801aa3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aa12:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aa16:	eba3 0309 	sub.w	r3, r3, r9
 801aa1a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aa1e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801aa22:	4631      	mov	r1, r6
 801aa24:	f8ad 0010 	strh.w	r0, [sp, #16]
 801aa28:	f8ad 2012 	strh.w	r2, [sp, #18]
 801aa2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa30:	69ea      	ldr	r2, [r5, #28]
 801aa32:	e001      	b.n	801aa38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801aa34:	69ea      	ldr	r2, [r5, #28]
 801aa36:	4621      	mov	r1, r4
 801aa38:	4640      	mov	r0, r8
 801aa3a:	f7ff ff2b 	bl	801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aa3e:	4628      	mov	r0, r5
 801aa40:	f7ff fe94 	bl	801a76c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa44:	6861      	ldr	r1, [r4, #4]
 801aa46:	4602      	mov	r2, r0
 801aa48:	4633      	mov	r3, r6
 801aa4a:	6820      	ldr	r0, [r4, #0]
 801aa4c:	c303      	stmia	r3!, {r0, r1}
 801aa4e:	4611      	mov	r1, r2
 801aa50:	4630      	mov	r0, r6
 801aa52:	f7fb fa3b 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801aa56:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f77f af33 	ble.w	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa60:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	f77f af2e 	ble.w	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa6a:	4628      	mov	r0, r5
 801aa6c:	f7ff fe9a 	bl	801a7a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aa70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801aa74:	1a18      	subs	r0, r3, r0
 801aa76:	f8ad 0010 	strh.w	r0, [sp, #16]
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	f7ff fea6 	bl	801a7cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aa80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aa84:	4631      	mov	r1, r6
 801aa86:	1a18      	subs	r0, r3, r0
 801aa88:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aa8c:	4628      	mov	r0, r5
 801aa8e:	682b      	ldr	r3, [r5, #0]
 801aa90:	689b      	ldr	r3, [r3, #8]
 801aa92:	4798      	blx	r3
 801aa94:	e717      	b.n	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801aa96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801aa96:	b570      	push	{r4, r5, r6, lr}
 801aa98:	1d06      	adds	r6, r0, #4
 801aa9a:	b086      	sub	sp, #24
 801aa9c:	460c      	mov	r4, r1
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	4631      	mov	r1, r6
 801aaa2:	4605      	mov	r5, r0
 801aaa4:	a802      	add	r0, sp, #8
 801aaa6:	9301      	str	r3, [sp, #4]
 801aaa8:	f7ff fca0 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aaac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aab0:	8822      	ldrh	r2, [r4, #0]
 801aab2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801aab6:	1ad2      	subs	r2, r2, r3
 801aab8:	8863      	ldrh	r3, [r4, #2]
 801aaba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aabe:	1a5b      	subs	r3, r3, r1
 801aac0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801aac4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801aac8:	aa01      	add	r2, sp, #4
 801aaca:	f8ad 0014 	strh.w	r0, [sp, #20]
 801aace:	4630      	mov	r0, r6
 801aad0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801aad4:	a904      	add	r1, sp, #16
 801aad6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801aada:	f7fb facf 	bl	801607c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801aade:	9a01      	ldr	r2, [sp, #4]
 801aae0:	b11a      	cbz	r2, 801aaea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801aae2:	4621      	mov	r1, r4
 801aae4:	4628      	mov	r0, r5
 801aae6:	f7ff fed5 	bl	801a894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aaea:	b006      	add	sp, #24
 801aaec:	bd70      	pop	{r4, r5, r6, pc}

0801aaee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801aaee:	4602      	mov	r2, r0
 801aaf0:	b530      	push	{r4, r5, lr}
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	b085      	sub	sp, #20
 801aaf6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801aafa:	460d      	mov	r5, r1
 801aafc:	466b      	mov	r3, sp
 801aafe:	6851      	ldr	r1, [r2, #4]
 801ab00:	c303      	stmia	r3!, {r0, r1}
 801ab02:	4629      	mov	r1, r5
 801ab04:	4668      	mov	r0, sp
 801ab06:	f7fb f9e1 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801ab0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ab0e:	b12b      	cbz	r3, 801ab1c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ab10:	4669      	mov	r1, sp
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7ff ffbf 	bl	801aa96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ab18:	b005      	add	sp, #20
 801ab1a:	bd30      	pop	{r4, r5, pc}
 801ab1c:	3404      	adds	r4, #4
 801ab1e:	a802      	add	r0, sp, #8
 801ab20:	4621      	mov	r1, r4
 801ab22:	f7ff fc63 	bl	801a3ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab26:	f8bd 3000 	ldrh.w	r3, [sp]
 801ab2a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ab2e:	4669      	mov	r1, sp
 801ab30:	4620      	mov	r0, r4
 801ab32:	1a9b      	subs	r3, r3, r2
 801ab34:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ab38:	f8ad 3000 	strh.w	r3, [sp]
 801ab3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ab40:	1a9b      	subs	r3, r3, r2
 801ab42:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ab46:	f7fb fa60 	bl	801600a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ab4a:	e7e5      	b.n	801ab18 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ab4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ab4c:	460b      	mov	r3, r1
 801ab4e:	680a      	ldr	r2, [r1, #0]
 801ab50:	1d01      	adds	r1, r0, #4
 801ab52:	6992      	ldr	r2, [r2, #24]
 801ab54:	4618      	mov	r0, r3
 801ab56:	4710      	bx	r2

0801ab58 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801ab58:	4298      	cmp	r0, r3
 801ab5a:	d200      	bcs.n	801ab5e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801ab5c:	b913      	cbnz	r3, 801ab64 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801ab5e:	440a      	add	r2, r1
 801ab60:	b210      	sxth	r0, r2
 801ab62:	4770      	bx	lr
 801ab64:	ee07 0a90 	vmov	s15, r0
 801ab68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ab6c:	ee07 3a90 	vmov	s15, r3
 801ab70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ab78:	ee07 2a90 	vmov	s15, r2
 801ab7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab80:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801ab84:	ee07 1a90 	vmov	s15, r1
 801ab88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab8c:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ab90:	ee67 5a07 	vmul.f32	s11, s14, s14
 801ab94:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ab98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ab9c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801aba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba8:	bfcc      	ite	gt
 801abaa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801abae:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801abb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abb6:	ee17 3a90 	vmov	r3, s15
 801abba:	b218      	sxth	r0, r3
 801abbc:	4770      	bx	lr

0801abbe <_ZN8touchgfx12TextProviderC1Ev>:
 801abbe:	b538      	push	{r3, r4, r5, lr}
 801abc0:	2500      	movs	r5, #0
 801abc2:	2302      	movs	r3, #2
 801abc4:	4604      	mov	r4, r0
 801abc6:	220e      	movs	r2, #14
 801abc8:	7403      	strb	r3, [r0, #16]
 801abca:	4629      	mov	r1, r5
 801abcc:	6145      	str	r5, [r0, #20]
 801abce:	7605      	strb	r5, [r0, #24]
 801abd0:	83c5      	strh	r5, [r0, #30]
 801abd2:	8405      	strh	r5, [r0, #32]
 801abd4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801abd6:	8705      	strh	r5, [r0, #56]	; 0x38
 801abd8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801abda:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801abde:	e9c0 5500 	strd	r5, r5, [r0]
 801abe2:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801abe6:	304c      	adds	r0, #76	; 0x4c
 801abe8:	f00a fd37 	bl	802565a <memset>
 801abec:	2301      	movs	r3, #1
 801abee:	4620      	mov	r0, r4
 801abf0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801abf4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801abf8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801abfc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ac00:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801ac04:	f7ec fd5a 	bl	80076bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ac08:	4620      	mov	r0, r4
 801ac0a:	bd38      	pop	{r3, r4, r5, pc}

0801ac0c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801ac0c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ac0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ac12:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801ac14:	fab0 f080 	clz	r0, r0
 801ac18:	0940      	lsrs	r0, r0, #5
 801ac1a:	4770      	bx	lr

0801ac1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ac1c:	b530      	push	{r4, r5, lr}
 801ac1e:	2500      	movs	r5, #0
 801ac20:	2401      	movs	r4, #1
 801ac22:	6843      	ldr	r3, [r0, #4]
 801ac24:	b913      	cbnz	r3, 801ac2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	b313      	cbz	r3, 801ac70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ac2a:	6043      	str	r3, [r0, #4]
 801ac2c:	7e03      	ldrb	r3, [r0, #24]
 801ac2e:	b143      	cbz	r3, 801ac42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ac30:	6943      	ldr	r3, [r0, #20]
 801ac32:	b12b      	cbz	r3, 801ac40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ac34:	881a      	ldrh	r2, [r3, #0]
 801ac36:	b11a      	cbz	r2, 801ac40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ac38:	1c9a      	adds	r2, r3, #2
 801ac3a:	6142      	str	r2, [r0, #20]
 801ac3c:	8818      	ldrh	r0, [r3, #0]
 801ac3e:	bd30      	pop	{r4, r5, pc}
 801ac40:	7605      	strb	r5, [r0, #24]
 801ac42:	6843      	ldr	r3, [r0, #4]
 801ac44:	8819      	ldrh	r1, [r3, #0]
 801ac46:	b199      	cbz	r1, 801ac70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ac48:	1c9a      	adds	r2, r3, #2
 801ac4a:	2902      	cmp	r1, #2
 801ac4c:	6042      	str	r2, [r0, #4]
 801ac4e:	d1f5      	bne.n	801ac3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ac50:	7c03      	ldrb	r3, [r0, #16]
 801ac52:	2b01      	cmp	r3, #1
 801ac54:	d8e5      	bhi.n	801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac56:	1c5a      	adds	r2, r3, #1
 801ac58:	3302      	adds	r3, #2
 801ac5a:	7402      	strb	r2, [r0, #16]
 801ac5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ac60:	6143      	str	r3, [r0, #20]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d0dd      	beq.n	801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac66:	881b      	ldrh	r3, [r3, #0]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d0da      	beq.n	801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac6c:	7604      	strb	r4, [r0, #24]
 801ac6e:	e7d8      	b.n	801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac70:	2000      	movs	r0, #0
 801ac72:	e7e4      	b.n	801ac3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ac74:	6001      	str	r1, [r0, #0]
 801ac76:	2100      	movs	r1, #0
 801ac78:	b430      	push	{r4, r5}
 801ac7a:	6041      	str	r1, [r0, #4]
 801ac7c:	6815      	ldr	r5, [r2, #0]
 801ac7e:	6085      	str	r5, [r0, #8]
 801ac80:	6852      	ldr	r2, [r2, #4]
 801ac82:	6443      	str	r3, [r0, #68]	; 0x44
 801ac84:	9b02      	ldr	r3, [sp, #8]
 801ac86:	60c2      	str	r2, [r0, #12]
 801ac88:	7401      	strb	r1, [r0, #16]
 801ac8a:	6141      	str	r1, [r0, #20]
 801ac8c:	7601      	strb	r1, [r0, #24]
 801ac8e:	8701      	strh	r1, [r0, #56]	; 0x38
 801ac90:	8401      	strh	r1, [r0, #32]
 801ac92:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ac96:	6483      	str	r3, [r0, #72]	; 0x48
 801ac98:	bc30      	pop	{r4, r5}
 801ac9a:	f7ec bd0f 	b.w	80076bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ac9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801ac9e:	b408      	push	{r3}
 801aca0:	b510      	push	{r4, lr}
 801aca2:	b085      	sub	sp, #20
 801aca4:	ac07      	add	r4, sp, #28
 801aca6:	f854 3b04 	ldr.w	r3, [r4], #4
 801acaa:	9300      	str	r3, [sp, #0]
 801acac:	4613      	mov	r3, r2
 801acae:	4622      	mov	r2, r4
 801acb0:	9403      	str	r4, [sp, #12]
 801acb2:	f7ff ffdf 	bl	801ac74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801acb6:	b005      	add	sp, #20
 801acb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acbc:	b001      	add	sp, #4
 801acbe:	4770      	bx	lr

0801acc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801acc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acc2:	4605      	mov	r5, r0
 801acc4:	4608      	mov	r0, r1
 801acc6:	b1f1      	cbz	r1, 801ad06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801acc8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801accc:	460b      	mov	r3, r1
 801acce:	f101 0708 	add.w	r7, r1, #8
 801acd2:	4622      	mov	r2, r4
 801acd4:	6818      	ldr	r0, [r3, #0]
 801acd6:	3308      	adds	r3, #8
 801acd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801acdc:	4626      	mov	r6, r4
 801acde:	42bb      	cmp	r3, r7
 801ace0:	c603      	stmia	r6!, {r0, r1}
 801ace2:	4634      	mov	r4, r6
 801ace4:	d1f6      	bne.n	801acd4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ace6:	6818      	ldr	r0, [r3, #0]
 801ace8:	6030      	str	r0, [r6, #0]
 801acea:	4610      	mov	r0, r2
 801acec:	889b      	ldrh	r3, [r3, #4]
 801acee:	80b3      	strh	r3, [r6, #4]
 801acf0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801acf4:	015b      	lsls	r3, r3, #5
 801acf6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801acfa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801acfe:	430b      	orrs	r3, r1
 801ad00:	425b      	negs	r3, r3
 801ad02:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ad06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ad08:	b538      	push	{r3, r4, r5, lr}
 801ad0a:	460c      	mov	r4, r1
 801ad0c:	6811      	ldr	r1, [r2, #0]
 801ad0e:	4610      	mov	r0, r2
 801ad10:	68cd      	ldr	r5, [r1, #12]
 801ad12:	4619      	mov	r1, r3
 801ad14:	47a8      	blx	r5
 801ad16:	2800      	cmp	r0, #0
 801ad18:	bf08      	it	eq
 801ad1a:	4620      	moveq	r0, r4
 801ad1c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ad20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad22:	4604      	mov	r4, r0
 801ad24:	4615      	mov	r5, r2
 801ad26:	4608      	mov	r0, r1
 801ad28:	b93a      	cbnz	r2, 801ad3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ad2a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ad2e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ad32:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ad36:	4628      	mov	r0, r5
 801ad38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad3a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ad3e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ad42:	8893      	ldrh	r3, [r2, #4]
 801ad44:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ad48:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ad4c:	79ee      	ldrb	r6, [r5, #7]
 801ad4e:	4316      	orrs	r6, r2
 801ad50:	19da      	adds	r2, r3, r7
 801ad52:	b291      	uxth	r1, r2
 801ad54:	b2b7      	uxth	r7, r6
 801ad56:	291d      	cmp	r1, #29
 801ad58:	d87b      	bhi.n	801ae52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ad5a:	2201      	movs	r2, #1
 801ad5c:	10f6      	asrs	r6, r6, #3
 801ad5e:	408a      	lsls	r2, r1
 801ad60:	4974      	ldr	r1, [pc, #464]	; (801af34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ad62:	420a      	tst	r2, r1
 801ad64:	d12e      	bne.n	801adc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ad66:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ad6a:	d072      	beq.n	801ae52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ad6c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ad70:	462b      	mov	r3, r5
 801ad72:	f105 0e08 	add.w	lr, r5, #8
 801ad76:	4615      	mov	r5, r2
 801ad78:	6818      	ldr	r0, [r3, #0]
 801ad7a:	3308      	adds	r3, #8
 801ad7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ad80:	4694      	mov	ip, r2
 801ad82:	4573      	cmp	r3, lr
 801ad84:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ad88:	4662      	mov	r2, ip
 801ad8a:	d1f5      	bne.n	801ad78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ad8c:	6818      	ldr	r0, [r3, #0]
 801ad8e:	f8cc 0000 	str.w	r0, [ip]
 801ad92:	889b      	ldrh	r3, [r3, #4]
 801ad94:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ad98:	b2b3      	uxth	r3, r6
 801ad9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ad9e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ada2:	1aca      	subs	r2, r1, r3
 801ada4:	1bcf      	subs	r7, r1, r7
 801ada6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801adaa:	b292      	uxth	r2, r2
 801adac:	1afb      	subs	r3, r7, r3
 801adae:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801adb2:	10d2      	asrs	r2, r2, #3
 801adb4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801adb8:	4302      	orrs	r2, r0
 801adba:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801adbe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801adc2:	e7b8      	b.n	801ad36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801adc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801adc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801adca:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801adcc:	f640 6333 	movw	r3, #3635	; 0xe33
 801add0:	4299      	cmp	r1, r3
 801add2:	d110      	bne.n	801adf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801add4:	6803      	ldr	r3, [r0, #0]
 801add6:	68db      	ldr	r3, [r3, #12]
 801add8:	4798      	blx	r3
 801adda:	7b41      	ldrb	r1, [r0, #13]
 801addc:	00cb      	lsls	r3, r1, #3
 801adde:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ade2:	7a03      	ldrb	r3, [r0, #8]
 801ade4:	0648      	lsls	r0, r1, #25
 801ade6:	ea43 0302 	orr.w	r3, r3, r2
 801adea:	bf44      	itt	mi
 801adec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801adf0:	b21b      	sxthmi	r3, r3
 801adf2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801adf6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801adfa:	462a      	mov	r2, r5
 801adfc:	f105 0c08 	add.w	ip, r5, #8
 801ae00:	443b      	add	r3, r7
 801ae02:	4433      	add	r3, r6
 801ae04:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801ae08:	b29b      	uxth	r3, r3
 801ae0a:	4635      	mov	r5, r6
 801ae0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ae10:	6810      	ldr	r0, [r2, #0]
 801ae12:	3208      	adds	r2, #8
 801ae14:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801ae18:	4637      	mov	r7, r6
 801ae1a:	4562      	cmp	r2, ip
 801ae1c:	c703      	stmia	r7!, {r0, r1}
 801ae1e:	463e      	mov	r6, r7
 801ae20:	d1f6      	bne.n	801ae10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801ae22:	6810      	ldr	r0, [r2, #0]
 801ae24:	6038      	str	r0, [r7, #0]
 801ae26:	8892      	ldrh	r2, [r2, #4]
 801ae28:	80ba      	strh	r2, [r7, #4]
 801ae2a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ae2e:	10db      	asrs	r3, r3, #3
 801ae30:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ae34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ae38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ae3c:	4313      	orrs	r3, r2
 801ae3e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801ae42:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ae46:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ae4a:	1a9b      	subs	r3, r3, r2
 801ae4c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ae50:	e771      	b.n	801ad36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ae52:	f023 0204 	bic.w	r2, r3, #4
 801ae56:	f640 611b 	movw	r1, #3611	; 0xe1b
 801ae5a:	428a      	cmp	r2, r1
 801ae5c:	d003      	beq.n	801ae66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801ae5e:	f640 621d 	movw	r2, #3613	; 0xe1d
 801ae62:	4293      	cmp	r3, r2
 801ae64:	d120      	bne.n	801aea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801ae66:	3b01      	subs	r3, #1
 801ae68:	4602      	mov	r2, r0
 801ae6a:	4629      	mov	r1, r5
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	b29b      	uxth	r3, r3
 801ae70:	f7ff ff4a 	bl	801ad08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ae74:	7b41      	ldrb	r1, [r0, #13]
 801ae76:	00cb      	lsls	r3, r1, #3
 801ae78:	0649      	lsls	r1, r1, #25
 801ae7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae7e:	7a03      	ldrb	r3, [r0, #8]
 801ae80:	ea43 0302 	orr.w	r3, r3, r2
 801ae84:	bf44      	itt	mi
 801ae86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae8a:	b21b      	sxthmi	r3, r3
 801ae8c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ae90:	7b6b      	ldrb	r3, [r5, #13]
 801ae92:	7aaa      	ldrb	r2, [r5, #10]
 801ae94:	005b      	lsls	r3, r3, #1
 801ae96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae9a:	4313      	orrs	r3, r2
 801ae9c:	115a      	asrs	r2, r3, #5
 801ae9e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801aea2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801aea6:	e035      	b.n	801af14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801aea8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801aeac:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801aeb0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801aeb4:	7a2a      	ldrb	r2, [r5, #8]
 801aeb6:	ea42 0201 	orr.w	r2, r2, r1
 801aeba:	f640 6109 	movw	r1, #3593	; 0xe09
 801aebe:	bf1c      	itt	ne
 801aec0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801aec4:	b212      	sxthne	r2, r2
 801aec6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801aeca:	f023 0210 	bic.w	r2, r3, #16
 801aece:	428a      	cmp	r2, r1
 801aed0:	d003      	beq.n	801aeda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801aed2:	f640 6213 	movw	r2, #3603	; 0xe13
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d129      	bne.n	801af2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801aeda:	7b6e      	ldrb	r6, [r5, #13]
 801aedc:	4629      	mov	r1, r5
 801aede:	0076      	lsls	r6, r6, #1
 801aee0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801aee4:	7aae      	ldrb	r6, [r5, #10]
 801aee6:	4316      	orrs	r6, r2
 801aee8:	f640 6213 	movw	r2, #3603	; 0xe13
 801aeec:	4293      	cmp	r3, r2
 801aeee:	4602      	mov	r2, r0
 801aef0:	4620      	mov	r0, r4
 801aef2:	bf16      	itet	ne
 801aef4:	f103 33ff 	addne.w	r3, r3, #4294967295
 801aef8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801aefc:	b29b      	uxthne	r3, r3
 801aefe:	f7ff ff03 	bl	801ad08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801af02:	7b43      	ldrb	r3, [r0, #13]
 801af04:	7a82      	ldrb	r2, [r0, #10]
 801af06:	005b      	lsls	r3, r3, #1
 801af08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af0c:	4313      	orrs	r3, r2
 801af0e:	1af6      	subs	r6, r6, r3
 801af10:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801af14:	7b69      	ldrb	r1, [r5, #13]
 801af16:	00cb      	lsls	r3, r1, #3
 801af18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801af1c:	7a2b      	ldrb	r3, [r5, #8]
 801af1e:	4313      	orrs	r3, r2
 801af20:	064a      	lsls	r2, r1, #25
 801af22:	bf44      	itt	mi
 801af24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af28:	b21b      	sxthmi	r3, r3
 801af2a:	1bdb      	subs	r3, r3, r7
 801af2c:	e747      	b.n	801adbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801af2e:	2300      	movs	r3, #0
 801af30:	e7b7      	b.n	801aea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801af32:	bf00      	nop
 801af34:	3fc00079 	.word	0x3fc00079

0801af38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801af38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af3c:	4604      	mov	r4, r0
 801af3e:	b942      	cbnz	r2, 801af52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801af40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af44:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801af48:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801af4c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801af50:	e047      	b.n	801afe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801af52:	7b51      	ldrb	r1, [r2, #13]
 801af54:	8893      	ldrh	r3, [r2, #4]
 801af56:	010d      	lsls	r5, r1, #4
 801af58:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801af5c:	79d5      	ldrb	r5, [r2, #7]
 801af5e:	4305      	orrs	r5, r0
 801af60:	2d04      	cmp	r5, #4
 801af62:	bfcc      	ite	gt
 801af64:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801af68:	f04f 0e01 	movle.w	lr, #1
 801af6c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801af70:	f200 80ab 	bhi.w	801b0ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801af74:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801af78:	4283      	cmp	r3, r0
 801af7a:	d216      	bcs.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af7c:	f240 605b 	movw	r0, #1627	; 0x65b
 801af80:	4283      	cmp	r3, r0
 801af82:	d859      	bhi.n	801b038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801af84:	f240 6057 	movw	r0, #1623	; 0x657
 801af88:	4283      	cmp	r3, r0
 801af8a:	d20e      	bcs.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af8c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801af90:	d24a      	bcs.n	801b028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801af92:	f240 604e 	movw	r0, #1614	; 0x64e
 801af96:	4283      	cmp	r3, r0
 801af98:	d207      	bcs.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af9a:	f240 601a 	movw	r0, #1562	; 0x61a
 801af9e:	4283      	cmp	r3, r0
 801afa0:	d02a      	beq.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801afa2:	d821      	bhi.n	801afe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801afa4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801afa8:	d35b      	bcc.n	801b062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801afaa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801afae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801afb2:	f040 80d0 	bne.w	801b156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801afb6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801afba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801afbe:	f040 80ca 	bne.w	801b156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801afc2:	00cb      	lsls	r3, r1, #3
 801afc4:	0649      	lsls	r1, r1, #25
 801afc6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801afca:	7a13      	ldrb	r3, [r2, #8]
 801afcc:	ea43 0300 	orr.w	r3, r3, r0
 801afd0:	bf44      	itt	mi
 801afd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801afd6:	b21b      	sxthmi	r3, r3
 801afd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801afdc:	1b5d      	subs	r5, r3, r5
 801afde:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801afe2:	4610      	mov	r0, r2
 801afe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afe8:	f240 604b 	movw	r0, #1611	; 0x64b
 801afec:	4283      	cmp	r3, r0
 801afee:	d338      	bcc.n	801b062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aff0:	f240 604c 	movw	r0, #1612	; 0x64c
 801aff4:	4283      	cmp	r3, r0
 801aff6:	d9d8      	bls.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aff8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801affc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801b000:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b004:	f040 80f3 	bne.w	801b1ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b008:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b00c:	f040 80ef 	bne.w	801b1ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b010:	00cb      	lsls	r3, r1, #3
 801b012:	064e      	lsls	r6, r1, #25
 801b014:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b018:	7a13      	ldrb	r3, [r2, #8]
 801b01a:	ea43 0300 	orr.w	r3, r3, r0
 801b01e:	bf44      	itt	mi
 801b020:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b024:	b21b      	sxthmi	r3, r3
 801b026:	e7d9      	b.n	801afdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801b028:	f240 6054 	movw	r0, #1620	; 0x654
 801b02c:	4283      	cmp	r3, r0
 801b02e:	d8e3      	bhi.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b030:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b034:	d9e0      	bls.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b036:	e7b8      	b.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b038:	f240 6074 	movw	r0, #1652	; 0x674
 801b03c:	4283      	cmp	r3, r0
 801b03e:	d0b4      	beq.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b040:	d82d      	bhi.n	801b09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801b042:	f240 605e 	movw	r0, #1630	; 0x65e
 801b046:	4283      	cmp	r3, r0
 801b048:	d804      	bhi.n	801b054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801b04a:	f240 605d 	movw	r0, #1629	; 0x65d
 801b04e:	4283      	cmp	r3, r0
 801b050:	d3d2      	bcc.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b052:	e7aa      	b.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b054:	f240 605f 	movw	r0, #1631	; 0x65f
 801b058:	4283      	cmp	r3, r0
 801b05a:	d0cd      	beq.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b05c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b060:	d0a3      	beq.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b062:	00cb      	lsls	r3, r1, #3
 801b064:	0649      	lsls	r1, r1, #25
 801b066:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b06a:	7a13      	ldrb	r3, [r2, #8]
 801b06c:	ea43 0300 	orr.w	r3, r3, r0
 801b070:	bf44      	itt	mi
 801b072:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b076:	b21b      	sxthmi	r3, r3
 801b078:	1b5d      	subs	r5, r3, r5
 801b07a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b07e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b082:	7b53      	ldrb	r3, [r2, #13]
 801b084:	015b      	lsls	r3, r3, #5
 801b086:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b08a:	7993      	ldrb	r3, [r2, #6]
 801b08c:	430b      	orrs	r3, r1
 801b08e:	2105      	movs	r1, #5
 801b090:	005b      	lsls	r3, r3, #1
 801b092:	fb93 f3f1 	sdiv	r3, r3, r1
 801b096:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b09a:	440b      	add	r3, r1
 801b09c:	e756      	b.n	801af4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b09e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b0a2:	4283      	cmp	r3, r0
 801b0a4:	d809      	bhi.n	801b0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801b0a6:	f240 60df 	movw	r0, #1759	; 0x6df
 801b0aa:	4283      	cmp	r3, r0
 801b0ac:	f4bf af7d 	bcs.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0b0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b0b4:	2b05      	cmp	r3, #5
 801b0b6:	d8d4      	bhi.n	801b062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b0b8:	e777      	b.n	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0ba:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b0be:	4283      	cmp	r3, r0
 801b0c0:	d09a      	beq.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0c2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b0c6:	4283      	cmp	r3, r0
 801b0c8:	e7ca      	b.n	801b060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b0ca:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b0ce:	d22b      	bcs.n	801b128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801b0d0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b0d4:	4283      	cmp	r3, r0
 801b0d6:	d28f      	bcs.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0d8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b0dc:	4283      	cmp	r3, r0
 801b0de:	d816      	bhi.n	801b10e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801b0e0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b0e4:	4283      	cmp	r3, r0
 801b0e6:	f4bf af60 	bcs.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0ea:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b0ee:	4283      	cmp	r3, r0
 801b0f0:	d80a      	bhi.n	801b108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801b0f2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b0f6:	4283      	cmp	r3, r0
 801b0f8:	f4bf af57 	bcs.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0fc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b100:	4283      	cmp	r3, r0
 801b102:	f43f af79 	beq.w	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b106:	e7ac      	b.n	801b062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b108:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b10c:	e7f8      	b.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801b10e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b112:	4283      	cmp	r3, r0
 801b114:	d802      	bhi.n	801b11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801b116:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b11a:	e798      	b.n	801b04e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801b11c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b120:	4283      	cmp	r3, r0
 801b122:	f47f af42 	bne.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b126:	e767      	b.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b128:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801b12c:	4283      	cmp	r3, r0
 801b12e:	f43f af63 	beq.w	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b132:	d802      	bhi.n	801b13a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801b134:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801b138:	e7f2      	b.n	801b120 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801b13a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801b13e:	4283      	cmp	r3, r0
 801b140:	d805      	bhi.n	801b14e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801b142:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801b146:	4283      	cmp	r3, r0
 801b148:	f4ff af2f 	bcc.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b14c:	e754      	b.n	801aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b14e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801b152:	4283      	cmp	r3, r0
 801b154:	e7af      	b.n	801b0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801b156:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b15a:	4617      	mov	r7, r2
 801b15c:	f102 0808 	add.w	r8, r2, #8
 801b160:	4666      	mov	r6, ip
 801b162:	6838      	ldr	r0, [r7, #0]
 801b164:	3708      	adds	r7, #8
 801b166:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b16a:	46e6      	mov	lr, ip
 801b16c:	4547      	cmp	r7, r8
 801b16e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b172:	46f4      	mov	ip, lr
 801b174:	d1f5      	bne.n	801b162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801b176:	6838      	ldr	r0, [r7, #0]
 801b178:	f8ce 0000 	str.w	r0, [lr]
 801b17c:	88b9      	ldrh	r1, [r7, #4]
 801b17e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b182:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801b186:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b18a:	d009      	beq.n	801b1a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801b18c:	7b51      	ldrb	r1, [r2, #13]
 801b18e:	7992      	ldrb	r2, [r2, #6]
 801b190:	0149      	lsls	r1, r1, #5
 801b192:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b196:	4311      	orrs	r1, r2
 801b198:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b19c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801b1a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b1a4:	b2ad      	uxth	r5, r5
 801b1a6:	d00d      	beq.n	801b1c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801b1a8:	442b      	add	r3, r5
 801b1aa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b1ae:	b29b      	uxth	r3, r3
 801b1b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b1b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b1b8:	10db      	asrs	r3, r3, #3
 801b1ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b1be:	4313      	orrs	r3, r2
 801b1c0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b1c4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801b1c8:	00cb      	lsls	r3, r1, #3
 801b1ca:	064f      	lsls	r7, r1, #25
 801b1cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b1d0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801b1d4:	ea43 0302 	orr.w	r3, r3, r2
 801b1d8:	bf44      	itt	mi
 801b1da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b1de:	b21b      	sxthmi	r3, r3
 801b1e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b1e4:	1b5b      	subs	r3, r3, r5
 801b1e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801b1ea:	4632      	mov	r2, r6
 801b1ec:	e6f9      	b.n	801afe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b1ee:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b1f2:	4617      	mov	r7, r2
 801b1f4:	f102 0908 	add.w	r9, r2, #8
 801b1f8:	4666      	mov	r6, ip
 801b1fa:	6838      	ldr	r0, [r7, #0]
 801b1fc:	3708      	adds	r7, #8
 801b1fe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b202:	46e0      	mov	r8, ip
 801b204:	454f      	cmp	r7, r9
 801b206:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b20a:	46c4      	mov	ip, r8
 801b20c:	d1f5      	bne.n	801b1fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801b20e:	6838      	ldr	r0, [r7, #0]
 801b210:	f8c8 0000 	str.w	r0, [r8]
 801b214:	88b9      	ldrh	r1, [r7, #4]
 801b216:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b21a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801b21e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b222:	d009      	beq.n	801b238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801b224:	7b51      	ldrb	r1, [r2, #13]
 801b226:	7992      	ldrb	r2, [r2, #6]
 801b228:	0149      	lsls	r1, r1, #5
 801b22a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b22e:	4311      	orrs	r1, r2
 801b230:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b234:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801b238:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b23c:	d00e      	beq.n	801b25c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801b23e:	eba3 030e 	sub.w	r3, r3, lr
 801b242:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b246:	b29b      	uxth	r3, r3
 801b248:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b24c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b250:	10db      	asrs	r3, r3, #3
 801b252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b256:	4313      	orrs	r3, r2
 801b258:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b25c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801b260:	00cb      	lsls	r3, r1, #3
 801b262:	0648      	lsls	r0, r1, #25
 801b264:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b268:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801b26c:	ea43 0302 	orr.w	r3, r3, r2
 801b270:	bf44      	itt	mi
 801b272:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b276:	b21b      	sxthmi	r3, r3
 801b278:	1b5d      	subs	r5, r3, r5
 801b27a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b27e:	e7b4      	b.n	801b1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b284:	461e      	mov	r6, r3
 801b286:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b288:	4604      	mov	r4, r0
 801b28a:	4617      	mov	r7, r2
 801b28c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b290:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b294:	f7ec f96c 	bl	8007570 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b298:	4605      	mov	r5, r0
 801b29a:	b918      	cbnz	r0, 801b2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801b29c:	6030      	str	r0, [r6, #0]
 801b29e:	4628      	mov	r0, r5
 801b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	4601      	mov	r1, r0
 801b2a8:	4638      	mov	r0, r7
 801b2aa:	68db      	ldr	r3, [r3, #12]
 801b2ac:	4798      	blx	r3
 801b2ae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b2b2:	4602      	mov	r2, r0
 801b2b4:	6030      	str	r0, [r6, #0]
 801b2b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b2ba:	d213      	bcs.n	801b2e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b2bc:	4643      	mov	r3, r8
 801b2be:	4639      	mov	r1, r7
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f7ff fe39 	bl	801af38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b2c6:	6030      	str	r0, [r6, #0]
 801b2c8:	6833      	ldr	r3, [r6, #0]
 801b2ca:	b143      	cbz	r3, 801b2de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801b2cc:	7b5a      	ldrb	r2, [r3, #13]
 801b2ce:	7a9b      	ldrb	r3, [r3, #10]
 801b2d0:	0052      	lsls	r2, r2, #1
 801b2d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b2d6:	4313      	orrs	r3, r2
 801b2d8:	bf0c      	ite	eq
 801b2da:	2301      	moveq	r3, #1
 801b2dc:	2300      	movne	r3, #0
 801b2de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801b2e2:	e7dc      	b.n	801b29e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801b2e4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b2e8:	b29b      	uxth	r3, r3
 801b2ea:	2b7f      	cmp	r3, #127	; 0x7f
 801b2ec:	d804      	bhi.n	801b2f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801b2ee:	4639      	mov	r1, r7
 801b2f0:	4620      	mov	r0, r4
 801b2f2:	f7ff fd15 	bl	801ad20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b2f6:	e7e6      	b.n	801b2c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b2f8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d0e3      	beq.n	801b2c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b300:	f640 1302 	movw	r3, #2306	; 0x902
 801b304:	429d      	cmp	r5, r3
 801b306:	d1df      	bne.n	801b2c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b308:	4601      	mov	r1, r0
 801b30a:	4620      	mov	r0, r4
 801b30c:	f7ff fcd8 	bl	801acc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b310:	e7d9      	b.n	801b2c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801b312 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b312:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b316:	461e      	mov	r6, r3
 801b318:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b31a:	4604      	mov	r4, r0
 801b31c:	4617      	mov	r7, r2
 801b31e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b322:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b326:	f7ec f923 	bl	8007570 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b32a:	4605      	mov	r5, r0
 801b32c:	b918      	cbnz	r0, 801b336 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801b32e:	6030      	str	r0, [r6, #0]
 801b330:	4628      	mov	r0, r5
 801b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	4601      	mov	r1, r0
 801b33a:	4638      	mov	r0, r7
 801b33c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b344:	47c8      	blx	r9
 801b346:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b34a:	4602      	mov	r2, r0
 801b34c:	6030      	str	r0, [r6, #0]
 801b34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b352:	d213      	bcs.n	801b37c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801b354:	4643      	mov	r3, r8
 801b356:	4639      	mov	r1, r7
 801b358:	4620      	mov	r0, r4
 801b35a:	f7ff fded 	bl	801af38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b35e:	6030      	str	r0, [r6, #0]
 801b360:	6833      	ldr	r3, [r6, #0]
 801b362:	b143      	cbz	r3, 801b376 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801b364:	7b5a      	ldrb	r2, [r3, #13]
 801b366:	7a9b      	ldrb	r3, [r3, #10]
 801b368:	0052      	lsls	r2, r2, #1
 801b36a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b36e:	4313      	orrs	r3, r2
 801b370:	bf0c      	ite	eq
 801b372:	2301      	moveq	r3, #1
 801b374:	2300      	movne	r3, #0
 801b376:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801b37a:	e7d9      	b.n	801b330 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801b37c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b380:	b29b      	uxth	r3, r3
 801b382:	2b7f      	cmp	r3, #127	; 0x7f
 801b384:	d804      	bhi.n	801b390 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801b386:	4639      	mov	r1, r7
 801b388:	4620      	mov	r0, r4
 801b38a:	f7ff fcc9 	bl	801ad20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b38e:	e7e6      	b.n	801b35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801b390:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801b394:	2b00      	cmp	r3, #0
 801b396:	d0e3      	beq.n	801b360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b398:	f640 1302 	movw	r3, #2306	; 0x902
 801b39c:	429d      	cmp	r5, r3
 801b39e:	d1df      	bne.n	801b360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b3a0:	4601      	mov	r1, r0
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7ff fc8c 	bl	801acc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b3a8:	e7d9      	b.n	801b35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801b3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b3aa:	b510      	push	{r4, lr}
 801b3ac:	4604      	mov	r4, r0
 801b3ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801b3b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b3b4:	b1e1      	cbz	r1, 801b3f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b3b6:	2b0a      	cmp	r3, #10
 801b3b8:	d02d      	beq.n	801b416 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b3ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801b3bc:	3901      	subs	r1, #1
 801b3be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b3c2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801b3c4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801b3c8:	1c51      	adds	r1, r2, #1
 801b3ca:	b289      	uxth	r1, r1
 801b3cc:	2901      	cmp	r1, #1
 801b3ce:	bf8a      	itet	hi
 801b3d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b3d4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801b3d6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801b3d8:	1c5a      	adds	r2, r3, #1
 801b3da:	8722      	strh	r2, [r4, #56]	; 0x38
 801b3dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b3de:	4413      	add	r3, r2
 801b3e0:	b29b      	uxth	r3, r3
 801b3e2:	2b09      	cmp	r3, #9
 801b3e4:	bf88      	it	hi
 801b3e6:	3b0a      	subhi	r3, #10
 801b3e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b3ec:	8458      	strh	r0, [r3, #34]	; 0x22
 801b3ee:	e7de      	b.n	801b3ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b3f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b3f2:	2b0a      	cmp	r3, #10
 801b3f4:	d00f      	beq.n	801b416 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	f7ff fc10 	bl	801ac1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b3fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b3fe:	1c5a      	adds	r2, r3, #1
 801b400:	8722      	strh	r2, [r4, #56]	; 0x38
 801b402:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b404:	4413      	add	r3, r2
 801b406:	b29b      	uxth	r3, r3
 801b408:	2b09      	cmp	r3, #9
 801b40a:	bf88      	it	hi
 801b40c:	3b0a      	subhi	r3, #10
 801b40e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b412:	8458      	strh	r0, [r3, #34]	; 0x22
 801b414:	e7ec      	b.n	801b3f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b416:	bd10      	pop	{r4, pc}

0801b418 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b418:	b538      	push	{r3, r4, r5, lr}
 801b41a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b41c:	4604      	mov	r4, r0
 801b41e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801b422:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801b424:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801b426:	3a01      	subs	r2, #1
 801b428:	8702      	strh	r2, [r0, #56]	; 0x38
 801b42a:	1c5a      	adds	r2, r3, #1
 801b42c:	b292      	uxth	r2, r2
 801b42e:	2a09      	cmp	r2, #9
 801b430:	bf8a      	itet	hi
 801b432:	3b09      	subhi	r3, #9
 801b434:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801b436:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801b438:	f7ff ffb7 	bl	801b3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b43c:	8c23      	ldrh	r3, [r4, #32]
 801b43e:	2b01      	cmp	r3, #1
 801b440:	bf9c      	itt	ls
 801b442:	3301      	addls	r3, #1
 801b444:	8423      	strhls	r3, [r4, #32]
 801b446:	8be3      	ldrh	r3, [r4, #30]
 801b448:	b90b      	cbnz	r3, 801b44e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801b44a:	2302      	movs	r3, #2
 801b44c:	83e3      	strh	r3, [r4, #30]
 801b44e:	8be3      	ldrh	r3, [r4, #30]
 801b450:	4628      	mov	r0, r5
 801b452:	3b01      	subs	r3, #1
 801b454:	b29b      	uxth	r3, r3
 801b456:	83e3      	strh	r3, [r4, #30]
 801b458:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b45c:	8365      	strh	r5, [r4, #26]
 801b45e:	bd38      	pop	{r3, r4, r5, pc}

0801b460 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b460:	428a      	cmp	r2, r1
 801b462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b466:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801b468:	d932      	bls.n	801b4d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801b46a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801b46c:	1a54      	subs	r4, r2, r1
 801b46e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801b472:	19ee      	adds	r6, r5, r7
 801b474:	fa1f fe84 	uxth.w	lr, r4
 801b478:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801b47c:	3e01      	subs	r6, #1
 801b47e:	b2b4      	uxth	r4, r6
 801b480:	eba4 090e 	sub.w	r9, r4, lr
 801b484:	fa1f f989 	uxth.w	r9, r9
 801b488:	2c09      	cmp	r4, #9
 801b48a:	4626      	mov	r6, r4
 801b48c:	bf88      	it	hi
 801b48e:	f1a4 060a 	subhi.w	r6, r4, #10
 801b492:	f1bc 0f00 	cmp.w	ip, #0
 801b496:	f104 34ff 	add.w	r4, r4, #4294967295
 801b49a:	bf08      	it	eq
 801b49c:	f04f 0c02 	moveq.w	ip, #2
 801b4a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b4a4:	b2a4      	uxth	r4, r4
 801b4a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b4aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801b4ae:	454c      	cmp	r4, r9
 801b4b0:	fa1f fc8c 	uxth.w	ip, ip
 801b4b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801b4b8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801b4bc:	d1e4      	bne.n	801b488 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801b4be:	eba5 050e 	sub.w	r5, r5, lr
 801b4c2:	eb0e 0408 	add.w	r4, lr, r8
 801b4c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801b4ca:	8705      	strh	r5, [r0, #56]	; 0x38
 801b4cc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801b4d0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801b4d2:	250a      	movs	r5, #10
 801b4d4:	1a64      	subs	r4, r4, r1
 801b4d6:	4439      	add	r1, r7
 801b4d8:	b289      	uxth	r1, r1
 801b4da:	8704      	strh	r4, [r0, #56]	; 0x38
 801b4dc:	2909      	cmp	r1, #9
 801b4de:	bf88      	it	hi
 801b4e0:	390a      	subhi	r1, #10
 801b4e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b4e4:	b18a      	cbz	r2, 801b50a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b4e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801b4e8:	3a01      	subs	r2, #1
 801b4ea:	3101      	adds	r1, #1
 801b4ec:	b292      	uxth	r2, r2
 801b4ee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b4f2:	8701      	strh	r1, [r0, #56]	; 0x38
 801b4f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b4f6:	b901      	cbnz	r1, 801b4fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801b4f8:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b4fa:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b4fc:	3901      	subs	r1, #1
 801b4fe:	b289      	uxth	r1, r1
 801b500:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b502:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b506:	844c      	strh	r4, [r1, #34]	; 0x22
 801b508:	e7ec      	b.n	801b4e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801b50a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b50e:	f7ff bf4c 	b.w	801b3aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801b512 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b512:	b570      	push	{r4, r5, r6, lr}
 801b514:	2500      	movs	r5, #0
 801b516:	4295      	cmp	r5, r2
 801b518:	d011      	beq.n	801b53e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801b51a:	8bc4      	ldrh	r4, [r0, #30]
 801b51c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801b520:	4414      	add	r4, r2
 801b522:	3c01      	subs	r4, #1
 801b524:	1b64      	subs	r4, r4, r5
 801b526:	b2a4      	uxth	r4, r4
 801b528:	2c01      	cmp	r4, #1
 801b52a:	bf88      	it	hi
 801b52c:	3c02      	subhi	r4, #2
 801b52e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b532:	8b64      	ldrh	r4, [r4, #26]
 801b534:	42b4      	cmp	r4, r6
 801b536:	d117      	bne.n	801b568 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801b538:	3501      	adds	r5, #1
 801b53a:	b2ad      	uxth	r5, r5
 801b53c:	e7eb      	b.n	801b516 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801b53e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b542:	2400      	movs	r4, #0
 801b544:	4413      	add	r3, r2
 801b546:	b2a2      	uxth	r2, r4
 801b548:	429a      	cmp	r2, r3
 801b54a:	da0f      	bge.n	801b56c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801b54c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801b54e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b552:	3401      	adds	r4, #1
 801b554:	4432      	add	r2, r6
 801b556:	b292      	uxth	r2, r2
 801b558:	2a09      	cmp	r2, #9
 801b55a:	bf88      	it	hi
 801b55c:	3a0a      	subhi	r2, #10
 801b55e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b562:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801b564:	42aa      	cmp	r2, r5
 801b566:	d0ee      	beq.n	801b546 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801b568:	2000      	movs	r0, #0
 801b56a:	bd70      	pop	{r4, r5, r6, pc}
 801b56c:	2001      	movs	r0, #1
 801b56e:	e7fc      	b.n	801b56a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801b570 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b574:	4605      	mov	r5, r0
 801b576:	4616      	mov	r6, r2
 801b578:	1c8c      	adds	r4, r1, #2
 801b57a:	8809      	ldrh	r1, [r1, #0]
 801b57c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b580:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b584:	42b3      	cmp	r3, r6
 801b586:	d124      	bne.n	801b5d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b588:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b58c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b590:	f001 070f 	and.w	r7, r1, #15
 801b594:	4652      	mov	r2, sl
 801b596:	f8cd 8000 	str.w	r8, [sp]
 801b59a:	464b      	mov	r3, r9
 801b59c:	4621      	mov	r1, r4
 801b59e:	4628      	mov	r0, r5
 801b5a0:	f7ff ffb7 	bl	801b512 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b5a4:	4683      	mov	fp, r0
 801b5a6:	b168      	cbz	r0, 801b5c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b5a8:	eb0a 0109 	add.w	r1, sl, r9
 801b5ac:	463a      	mov	r2, r7
 801b5ae:	4628      	mov	r0, r5
 801b5b0:	4441      	add	r1, r8
 801b5b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b5b6:	4649      	mov	r1, r9
 801b5b8:	f7ff ff52 	bl	801b460 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b5bc:	4658      	mov	r0, fp
 801b5be:	b003      	add	sp, #12
 801b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5c4:	eb07 010a 	add.w	r1, r7, sl
 801b5c8:	4449      	add	r1, r9
 801b5ca:	4441      	add	r1, r8
 801b5cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b5d0:	e7d2      	b.n	801b578 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b5d2:	f04f 0b00 	mov.w	fp, #0
 801b5d6:	e7f1      	b.n	801b5bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b5d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b5d8:	b570      	push	{r4, r5, r6, lr}
 801b5da:	8810      	ldrh	r0, [r2, #0]
 801b5dc:	4298      	cmp	r0, r3
 801b5de:	d817      	bhi.n	801b610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b5e0:	1e48      	subs	r0, r1, #1
 801b5e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b5e6:	4298      	cmp	r0, r3
 801b5e8:	d312      	bcc.n	801b610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b5ea:	2400      	movs	r4, #0
 801b5ec:	428c      	cmp	r4, r1
 801b5ee:	d20f      	bcs.n	801b610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b5f0:	1860      	adds	r0, r4, r1
 801b5f2:	1040      	asrs	r0, r0, #1
 801b5f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b5f8:	0085      	lsls	r5, r0, #2
 801b5fa:	42b3      	cmp	r3, r6
 801b5fc:	d902      	bls.n	801b604 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b5fe:	3001      	adds	r0, #1
 801b600:	b284      	uxth	r4, r0
 801b602:	e7f3      	b.n	801b5ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b604:	d201      	bcs.n	801b60a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b606:	b281      	uxth	r1, r0
 801b608:	e7f0      	b.n	801b5ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b60a:	442a      	add	r2, r5
 801b60c:	8850      	ldrh	r0, [r2, #2]
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	2000      	movs	r0, #0
 801b612:	e7fc      	b.n	801b60e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b614 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b618:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b61a:	4604      	mov	r4, r0
 801b61c:	260b      	movs	r6, #11
 801b61e:	886f      	ldrh	r7, [r5, #2]
 801b620:	087f      	lsrs	r7, r7, #1
 801b622:	3e01      	subs	r6, #1
 801b624:	d013      	beq.n	801b64e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b626:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b628:	462a      	mov	r2, r5
 801b62a:	4639      	mov	r1, r7
 801b62c:	4620      	mov	r0, r4
 801b62e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b632:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b636:	4643      	mov	r3, r8
 801b638:	f7ff ffce 	bl	801b5d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b63c:	b138      	cbz	r0, 801b64e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b63e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b642:	4642      	mov	r2, r8
 801b644:	4620      	mov	r0, r4
 801b646:	f7ff ff93 	bl	801b570 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b64a:	2800      	cmp	r0, #0
 801b64c:	d1e9      	bne.n	801b622 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b654:	b570      	push	{r4, r5, r6, lr}
 801b656:	694a      	ldr	r2, [r1, #20]
 801b658:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b65a:	684b      	ldr	r3, [r1, #4]
 801b65c:	1b54      	subs	r4, r2, r5
 801b65e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b660:	f000 8106 	beq.w	801b870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b664:	1b9b      	subs	r3, r3, r6
 801b666:	d003      	beq.n	801b670 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b668:	4363      	muls	r3, r4
 801b66a:	2210      	movs	r2, #16
 801b66c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b670:	680c      	ldr	r4, [r1, #0]
 801b672:	698a      	ldr	r2, [r1, #24]
 801b674:	1b65      	subs	r5, r4, r5
 801b676:	f000 80fd 	beq.w	801b874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b67a:	1b92      	subs	r2, r2, r6
 801b67c:	d003      	beq.n	801b686 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b67e:	436a      	muls	r2, r5
 801b680:	2410      	movs	r4, #16
 801b682:	fb92 f2f4 	sdiv	r2, r2, r4
 801b686:	1a9b      	subs	r3, r3, r2
 801b688:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b8b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b690:	460a      	mov	r2, r1
 801b692:	ee07 3a90 	vmov	s15, r3
 801b696:	f100 040c 	add.w	r4, r0, #12
 801b69a:	4603      	mov	r3, r0
 801b69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b6a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b6a8:	eeb1 6a43 	vneg.f32	s12, s6
 801b6ac:	edd2 7a02 	vldr	s15, [r2, #8]
 801b6b0:	3214      	adds	r2, #20
 801b6b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b6b6:	ece3 6a01 	vstmia	r3!, {s13}
 801b6ba:	429c      	cmp	r4, r3
 801b6bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b6c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b6c4:	edc3 7a02 	vstr	s15, [r3, #8]
 801b6c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b6cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b6d0:	edc3 7a05 	vstr	s15, [r3, #20]
 801b6d4:	d1ea      	bne.n	801b6ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b6d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b6d8:	698b      	ldr	r3, [r1, #24]
 801b6da:	edd0 4a02 	vldr	s9, [r0, #8]
 801b6de:	1a9b      	subs	r3, r3, r2
 801b6e0:	edd0 3a00 	vldr	s7, [r0]
 801b6e4:	edd0 6a01 	vldr	s13, [r0, #4]
 801b6e8:	ee07 3a90 	vmov	s15, r3
 801b6ec:	684b      	ldr	r3, [r1, #4]
 801b6ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b6f2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b6f6:	1a9b      	subs	r3, r3, r2
 801b6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b700:	ed90 2a03 	vldr	s4, [r0, #12]
 801b704:	ee07 3a10 	vmov	s14, r3
 801b708:	edd0 5a04 	vldr	s11, [r0, #16]
 801b70c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b710:	ed90 1a07 	vldr	s2, [r0, #28]
 801b714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b718:	edd0 2a06 	vldr	s5, [r0, #24]
 801b71c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b720:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b724:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b728:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b72c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b730:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b734:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b738:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b73a:	694a      	ldr	r2, [r1, #20]
 801b73c:	1b13      	subs	r3, r2, r4
 801b73e:	ee07 3a10 	vmov	s14, r3
 801b742:	680b      	ldr	r3, [r1, #0]
 801b744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b748:	1b1b      	subs	r3, r3, r4
 801b74a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b74e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b752:	ee07 3a10 	vmov	s14, r3
 801b756:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b75a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b75e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b762:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b766:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b76a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b76c:	698b      	ldr	r3, [r1, #24]
 801b76e:	1a9b      	subs	r3, r3, r2
 801b770:	ee06 3a90 	vmov	s13, r3
 801b774:	684b      	ldr	r3, [r1, #4]
 801b776:	1a9b      	subs	r3, r3, r2
 801b778:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b77c:	ee07 3a10 	vmov	s14, r3
 801b780:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b788:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b78c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b790:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b794:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b798:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b79c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b79e:	694a      	ldr	r2, [r1, #20]
 801b7a0:	1b13      	subs	r3, r2, r4
 801b7a2:	ee07 3a10 	vmov	s14, r3
 801b7a6:	680b      	ldr	r3, [r1, #0]
 801b7a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7ac:	1b1b      	subs	r3, r3, r4
 801b7ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b7b2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b7b6:	ee07 3a10 	vmov	s14, r3
 801b7ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7be:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b7c2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b7c6:	edd0 5a08 	vldr	s11, [r0, #32]
 801b7ca:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b7ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b7d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b7d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b7da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b7dc:	698b      	ldr	r3, [r1, #24]
 801b7de:	1a9b      	subs	r3, r3, r2
 801b7e0:	ee07 3a10 	vmov	s14, r3
 801b7e4:	684b      	ldr	r3, [r1, #4]
 801b7e6:	1a9b      	subs	r3, r3, r2
 801b7e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7ec:	ee01 3a90 	vmov	s3, r3
 801b7f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b7f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b7f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b7fc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b800:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b804:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b808:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b80c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b80e:	694a      	ldr	r2, [r1, #20]
 801b810:	1b13      	subs	r3, r2, r4
 801b812:	ee03 3a10 	vmov	s6, r3
 801b816:	680b      	ldr	r3, [r1, #0]
 801b818:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b81c:	1b1b      	subs	r3, r3, r4
 801b81e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b822:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b826:	ee03 3a10 	vmov	s6, r3
 801b82a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b82e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b832:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b836:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b83a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b83e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b842:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b846:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b84e:	dd13      	ble.n	801b878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b854:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b858:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b85a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b85e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b866:	dd15      	ble.n	801b894 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b86c:	6403      	str	r3, [r0, #64]	; 0x40
 801b86e:	bd70      	pop	{r4, r5, r6, pc}
 801b870:	4623      	mov	r3, r4
 801b872:	e6fd      	b.n	801b670 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b874:	462a      	mov	r2, r5
 801b876:	e706      	b.n	801b686 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b878:	d502      	bpl.n	801b880 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b87a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b87e:	e7e9      	b.n	801b854 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b880:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b884:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b888:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b890:	dade      	bge.n	801b850 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b892:	e7f2      	b.n	801b87a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b894:	d502      	bpl.n	801b89c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b896:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b89a:	e7e7      	b.n	801b86c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b89c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b8a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b8a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ac:	dadc      	bge.n	801b868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b8ae:	e7f2      	b.n	801b896 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b8b0:	3d800000 	.word	0x3d800000

0801b8b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8b8:	2714      	movs	r7, #20
 801b8ba:	435f      	muls	r7, r3
 801b8bc:	eb02 0c07 	add.w	ip, r2, r7
 801b8c0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b8c4:	f115 0e0f 	adds.w	lr, r5, #15
 801b8c8:	f100 80a2 	bmi.w	801ba10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b8cc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b8d0:	9c08      	ldr	r4, [sp, #32]
 801b8d2:	2614      	movs	r6, #20
 801b8d4:	f8c0 e014 	str.w	lr, [r0, #20]
 801b8d8:	4366      	muls	r6, r4
 801b8da:	eb02 0806 	add.w	r8, r2, r6
 801b8de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b8e2:	f115 040f 	adds.w	r4, r5, #15
 801b8e6:	f100 809f 	bmi.w	801ba28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b8ea:	1124      	asrs	r4, r4, #4
 801b8ec:	eba4 040e 	sub.w	r4, r4, lr
 801b8f0:	6184      	str	r4, [r0, #24]
 801b8f2:	2c00      	cmp	r4, #0
 801b8f4:	f000 808a 	beq.w	801ba0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b8f8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b8fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b900:	5995      	ldr	r5, [r2, r6]
 801b902:	eba4 0809 	sub.w	r8, r4, r9
 801b906:	59d4      	ldr	r4, [r2, r7]
 801b908:	eba5 0a04 	sub.w	sl, r5, r4
 801b90c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b910:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b914:	fb0e fe05 	mul.w	lr, lr, r5
 801b918:	fb0a ee19 	mls	lr, sl, r9, lr
 801b91c:	fb08 e404 	mla	r4, r8, r4, lr
 801b920:	3c01      	subs	r4, #1
 801b922:	19a4      	adds	r4, r4, r6
 801b924:	f100 808c 	bmi.w	801ba40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b928:	fb94 fef6 	sdiv	lr, r4, r6
 801b92c:	fb06 441e 	mls	r4, r6, lr, r4
 801b930:	f8c0 e000 	str.w	lr, [r0]
 801b934:	6104      	str	r4, [r0, #16]
 801b936:	2d00      	cmp	r5, #0
 801b938:	f2c0 8095 	blt.w	801ba66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b93c:	fb95 f4f6 	sdiv	r4, r5, r6
 801b940:	fb06 5514 	mls	r5, r6, r4, r5
 801b944:	6044      	str	r4, [r0, #4]
 801b946:	6085      	str	r5, [r0, #8]
 801b948:	60c6      	str	r6, [r0, #12]
 801b94a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b94e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b952:	6945      	ldr	r5, [r0, #20]
 801b954:	59d2      	ldr	r2, [r2, r7]
 801b956:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b95a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801ba88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b95e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b962:	ee07 4a10 	vmov	s14, r4
 801b966:	6804      	ldr	r4, [r0, #0]
 801b968:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b96c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b970:	ee07 2a90 	vmov	s15, r2
 801b974:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b97c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b980:	edd3 6a00 	vldr	s13, [r3]
 801b984:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b988:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b98c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b990:	edc0 6a07 	vstr	s13, [r0, #28]
 801b994:	edd0 6a01 	vldr	s13, [r0, #4]
 801b998:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b99c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b9a0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b9a4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b9a8:	ed80 6a08 	vstr	s12, [r0, #32]
 801b9ac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b9ae:	6242      	str	r2, [r0, #36]	; 0x24
 801b9b0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b9b4:	ed93 6a03 	vldr	s12, [r3, #12]
 801b9b8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b9bc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b9c0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b9c4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b9c8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b9cc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b9d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b9d4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b9d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b9da:	6302      	str	r2, [r0, #48]	; 0x30
 801b9dc:	ed93 6a06 	vldr	s12, [r3, #24]
 801b9e0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b9e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b9e8:	eeb0 7a46 	vmov.f32	s14, s12
 801b9ec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b9f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b9f4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b9f8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b9fc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801ba00:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ba04:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801ba08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801ba0a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba10:	2410      	movs	r4, #16
 801ba12:	f1c5 0501 	rsb	r5, r5, #1
 801ba16:	fb9e fef4 	sdiv	lr, lr, r4
 801ba1a:	f015 050f 	ands.w	r5, r5, #15
 801ba1e:	bf18      	it	ne
 801ba20:	2501      	movne	r5, #1
 801ba22:	ebae 0e05 	sub.w	lr, lr, r5
 801ba26:	e753      	b.n	801b8d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ba28:	f04f 0910 	mov.w	r9, #16
 801ba2c:	f1c5 0501 	rsb	r5, r5, #1
 801ba30:	fb94 f4f9 	sdiv	r4, r4, r9
 801ba34:	f015 050f 	ands.w	r5, r5, #15
 801ba38:	bf18      	it	ne
 801ba3a:	2501      	movne	r5, #1
 801ba3c:	1b64      	subs	r4, r4, r5
 801ba3e:	e755      	b.n	801b8ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801ba40:	4264      	negs	r4, r4
 801ba42:	fb94 fef6 	sdiv	lr, r4, r6
 801ba46:	f1ce 0800 	rsb	r8, lr, #0
 801ba4a:	fb06 441e 	mls	r4, r6, lr, r4
 801ba4e:	f8c0 8000 	str.w	r8, [r0]
 801ba52:	6104      	str	r4, [r0, #16]
 801ba54:	2c00      	cmp	r4, #0
 801ba56:	f43f af6e 	beq.w	801b936 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801ba5a:	ea6f 0e0e 	mvn.w	lr, lr
 801ba5e:	1b34      	subs	r4, r6, r4
 801ba60:	f8c0 e000 	str.w	lr, [r0]
 801ba64:	e766      	b.n	801b934 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801ba66:	426d      	negs	r5, r5
 801ba68:	fb95 f4f6 	sdiv	r4, r5, r6
 801ba6c:	f1c4 0e00 	rsb	lr, r4, #0
 801ba70:	fb06 5514 	mls	r5, r6, r4, r5
 801ba74:	f8c0 e004 	str.w	lr, [r0, #4]
 801ba78:	6085      	str	r5, [r0, #8]
 801ba7a:	2d00      	cmp	r5, #0
 801ba7c:	f43f af64 	beq.w	801b948 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801ba80:	43e4      	mvns	r4, r4
 801ba82:	1b75      	subs	r5, r6, r5
 801ba84:	6044      	str	r4, [r0, #4]
 801ba86:	e75e      	b.n	801b946 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801ba88:	3d800000 	.word	0x3d800000

0801ba8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ba8c:	4b01      	ldr	r3, [pc, #4]	; (801ba94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ba8e:	6018      	str	r0, [r3, #0]
 801ba90:	4770      	bx	lr
 801ba92:	bf00      	nop
 801ba94:	24006ddc 	.word	0x24006ddc

0801ba98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ba98:	4b06      	ldr	r3, [pc, #24]	; (801bab4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ba9a:	881a      	ldrh	r2, [r3, #0]
 801ba9c:	4282      	cmp	r2, r0
 801ba9e:	d807      	bhi.n	801bab0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801baa0:	4b05      	ldr	r3, [pc, #20]	; (801bab8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801baa2:	881b      	ldrh	r3, [r3, #0]
 801baa4:	4413      	add	r3, r2
 801baa6:	4298      	cmp	r0, r3
 801baa8:	bfac      	ite	ge
 801baaa:	2000      	movge	r0, #0
 801baac:	2001      	movlt	r0, #1
 801baae:	4770      	bx	lr
 801bab0:	2000      	movs	r0, #0
 801bab2:	4770      	bx	lr
 801bab4:	24006dfc 	.word	0x24006dfc
 801bab8:	24006e00 	.word	0x24006e00

0801babc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801babc:	b508      	push	{r3, lr}
 801babe:	4601      	mov	r1, r0
 801bac0:	f7ff ffea 	bl	801ba98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bac4:	b118      	cbz	r0, 801bace <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801bac6:	4b02      	ldr	r3, [pc, #8]	; (801bad0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801bace:	bd08      	pop	{r3, pc}
 801bad0:	24006de0 	.word	0x24006de0

0801bad4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801bad4:	b538      	push	{r3, r4, r5, lr}
 801bad6:	4604      	mov	r4, r0
 801bad8:	f7ff ffde 	bl	801ba98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801badc:	b188      	cbz	r0, 801bb02 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801bade:	4b09      	ldr	r3, [pc, #36]	; (801bb04 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801bae0:	881a      	ldrh	r2, [r3, #0]
 801bae2:	4b09      	ldr	r3, [pc, #36]	; (801bb08 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801bae4:	1aa4      	subs	r4, r4, r2
 801bae6:	220e      	movs	r2, #14
 801bae8:	681d      	ldr	r5, [r3, #0]
 801baea:	4362      	muls	r2, r4
 801baec:	18ac      	adds	r4, r5, r2
 801baee:	7b23      	ldrb	r3, [r4, #12]
 801baf0:	f013 0320 	ands.w	r3, r3, #32
 801baf4:	bf17      	itett	ne
 801baf6:	680b      	ldrne	r3, [r1, #0]
 801baf8:	4618      	moveq	r0, r3
 801bafa:	50ab      	strne	r3, [r5, r2]
 801bafc:	684b      	ldrne	r3, [r1, #4]
 801bafe:	bf18      	it	ne
 801bb00:	6063      	strne	r3, [r4, #4]
 801bb02:	bd38      	pop	{r3, r4, r5, pc}
 801bb04:	24006dfc 	.word	0x24006dfc
 801bb08:	24006de4 	.word	0x24006de4

0801bb0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801bb0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb10:	4606      	mov	r6, r0
 801bb12:	460c      	mov	r4, r1
 801bb14:	f7ff ffc0 	bl	801ba98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bb18:	b918      	cbnz	r0, 801bb22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801bb1a:	2000      	movs	r0, #0
 801bb1c:	b002      	add	sp, #8
 801bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb22:	4608      	mov	r0, r1
 801bb24:	f7fa fa15 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	d1f6      	bne.n	801bb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bb2c:	4b3f      	ldr	r3, [pc, #252]	; (801bc2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801bb2e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801bc30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801bb32:	881d      	ldrh	r5, [r3, #0]
 801bb34:	f8d9 a000 	ldr.w	sl, [r9]
 801bb38:	46c8      	mov	r8, r9
 801bb3a:	1b73      	subs	r3, r6, r5
 801bb3c:	250e      	movs	r5, #14
 801bb3e:	435d      	muls	r5, r3
 801bb40:	eb0a 0705 	add.w	r7, sl, r5
 801bb44:	7b3b      	ldrb	r3, [r7, #12]
 801bb46:	f013 0f20 	tst.w	r3, #32
 801bb4a:	d0e6      	beq.n	801bb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bb4c:	4621      	mov	r1, r4
 801bb4e:	4638      	mov	r0, r7
 801bb50:	f7fd faa4 	bl	801909c <_ZNK8touchgfx4Rect8includesERKS0_>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	d1e1      	bne.n	801bb1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801bb58:	4639      	mov	r1, r7
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	f7fd fa9e 	bl	801909c <_ZNK8touchgfx4Rect8includesERKS0_>
 801bb60:	b108      	cbz	r0, 801bb66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801bb62:	4621      	mov	r1, r4
 801bb64:	e020      	b.n	801bba8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801bb66:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bb6a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801bb6e:	429a      	cmp	r2, r3
 801bb70:	d11e      	bne.n	801bbb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bb72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bb76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d118      	bne.n	801bbb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bb7e:	6820      	ldr	r0, [r4, #0]
 801bb80:	466b      	mov	r3, sp
 801bb82:	6861      	ldr	r1, [r4, #4]
 801bb84:	c303      	stmia	r3!, {r0, r1}
 801bb86:	4639      	mov	r1, r7
 801bb88:	4668      	mov	r0, sp
 801bb8a:	f7fd faad 	bl	80190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bb8e:	f8d9 3000 	ldr.w	r3, [r9]
 801bb92:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bb96:	442b      	add	r3, r5
 801bb98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bb9c:	4413      	add	r3, r2
 801bb9e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801bba2:	4293      	cmp	r3, r2
 801bba4:	dc04      	bgt.n	801bbb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bba6:	4669      	mov	r1, sp
 801bba8:	4630      	mov	r0, r6
 801bbaa:	f7ff ff93 	bl	801bad4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801bbae:	e7b5      	b.n	801bb1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801bbb0:	f8d8 3000 	ldr.w	r3, [r8]
 801bbb4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801bbb8:	442b      	add	r3, r5
 801bbba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bbbe:	4291      	cmp	r1, r2
 801bbc0:	d119      	bne.n	801bbf6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801bbc2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bbc6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801bbca:	4291      	cmp	r1, r2
 801bbcc:	d113      	bne.n	801bbf6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801bbce:	6820      	ldr	r0, [r4, #0]
 801bbd0:	466a      	mov	r2, sp
 801bbd2:	6861      	ldr	r1, [r4, #4]
 801bbd4:	c203      	stmia	r2!, {r0, r1}
 801bbd6:	4619      	mov	r1, r3
 801bbd8:	4668      	mov	r0, sp
 801bbda:	f7fd fa85 	bl	80190e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bbde:	f8d8 3000 	ldr.w	r3, [r8]
 801bbe2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bbe6:	442b      	add	r3, r5
 801bbe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bbec:	4413      	add	r3, r2
 801bbee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bbf2:	4293      	cmp	r3, r2
 801bbf4:	ddd7      	ble.n	801bba6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	f7fa f9ab 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbfc:	b990      	cbnz	r0, 801bc24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801bbfe:	88a7      	ldrh	r7, [r4, #4]
 801bc00:	88e3      	ldrh	r3, [r4, #6]
 801bc02:	fb17 f703 	smulbb	r7, r7, r3
 801bc06:	f8d8 3000 	ldr.w	r3, [r8]
 801bc0a:	441d      	add	r5, r3
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	f7fa f9a0 	bl	8015f52 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc12:	b948      	cbnz	r0, 801bc28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801bc14:	88ab      	ldrh	r3, [r5, #4]
 801bc16:	88ea      	ldrh	r2, [r5, #6]
 801bc18:	fb13 f302 	smulbb	r3, r3, r2
 801bc1c:	42bb      	cmp	r3, r7
 801bc1e:	f6bf af7c 	bge.w	801bb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bc22:	e79e      	b.n	801bb62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801bc24:	2700      	movs	r7, #0
 801bc26:	e7ee      	b.n	801bc06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801bc28:	2300      	movs	r3, #0
 801bc2a:	e7f7      	b.n	801bc1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801bc2c:	24006dfc 	.word	0x24006dfc
 801bc30:	24006de4 	.word	0x24006de4

0801bc34 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc36:	4c24      	ldr	r4, [pc, #144]	; (801bcc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801bc38:	6823      	ldr	r3, [r4, #0]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d042      	beq.n	801bcc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bc3e:	4a23      	ldr	r2, [pc, #140]	; (801bccc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801bc40:	4d23      	ldr	r5, [pc, #140]	; (801bcd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801bc42:	8811      	ldrh	r1, [r2, #0]
 801bc44:	f8b5 c000 	ldrh.w	ip, [r5]
 801bc48:	4822      	ldr	r0, [pc, #136]	; (801bcd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bc4a:	4461      	add	r1, ip
 801bc4c:	1c4a      	adds	r2, r1, #1
 801bc4e:	008f      	lsls	r7, r1, #2
 801bc50:	f022 0201 	bic.w	r2, r2, #1
 801bc54:	19de      	adds	r6, r3, r7
 801bc56:	0412      	lsls	r2, r2, #16
 801bc58:	6006      	str	r6, [r0, #0]
 801bc5a:	4e1f      	ldr	r6, [pc, #124]	; (801bcd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bc5c:	0c12      	lsrs	r2, r2, #16
 801bc5e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801bc62:	19da      	adds	r2, r3, r7
 801bc64:	6032      	str	r2, [r6, #0]
 801bc66:	220e      	movs	r2, #14
 801bc68:	fb02 f20c 	mul.w	r2, r2, ip
 801bc6c:	3203      	adds	r2, #3
 801bc6e:	f022 0203 	bic.w	r2, r2, #3
 801bc72:	443a      	add	r2, r7
 801bc74:	4f19      	ldr	r7, [pc, #100]	; (801bcdc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bc76:	4413      	add	r3, r2
 801bc78:	603b      	str	r3, [r7, #0]
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	4f18      	ldr	r7, [pc, #96]	; (801bce0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bc7e:	469c      	mov	ip, r3
 801bc80:	803b      	strh	r3, [r7, #0]
 801bc82:	4f18      	ldr	r7, [pc, #96]	; (801bce4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc84:	683f      	ldr	r7, [r7, #0]
 801bc86:	1aba      	subs	r2, r7, r2
 801bc88:	4f17      	ldr	r7, [pc, #92]	; (801bce8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc8a:	603a      	str	r2, [r7, #0]
 801bc8c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801bc90:	4a16      	ldr	r2, [pc, #88]	; (801bcec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc92:	8013      	strh	r3, [r2, #0]
 801bc94:	428b      	cmp	r3, r1
 801bc96:	d10d      	bne.n	801bcb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801bc98:	882d      	ldrh	r5, [r5, #0]
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	6830      	ldr	r0, [r6, #0]
 801bc9e:	240e      	movs	r4, #14
 801bca0:	429d      	cmp	r5, r3
 801bca2:	d90f      	bls.n	801bcc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bca4:	fb04 0203 	mla	r2, r4, r3, r0
 801bca8:	3301      	adds	r3, #1
 801bcaa:	7b11      	ldrb	r1, [r2, #12]
 801bcac:	f36f 1145 	bfc	r1, #5, #1
 801bcb0:	7311      	strb	r1, [r2, #12]
 801bcb2:	e7f5      	b.n	801bca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801bcb4:	6822      	ldr	r2, [r4, #0]
 801bcb6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bcba:	6802      	ldr	r2, [r0, #0]
 801bcbc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801bcc0:	3301      	adds	r3, #1
 801bcc2:	e7e7      	b.n	801bc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801bcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcc6:	bf00      	nop
 801bcc8:	24006de0 	.word	0x24006de0
 801bccc:	24006dfc 	.word	0x24006dfc
 801bcd0:	24006e00 	.word	0x24006e00
 801bcd4:	24006df4 	.word	0x24006df4
 801bcd8:	24006de4 	.word	0x24006de4
 801bcdc:	24006dec 	.word	0x24006dec
 801bce0:	24006dfe 	.word	0x24006dfe
 801bce4:	24006de8 	.word	0x24006de8
 801bce8:	24006df8 	.word	0x24006df8
 801bcec:	24006df0 	.word	0x24006df0

0801bcf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bcf0:	4b06      	ldr	r3, [pc, #24]	; (801bd0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	b943      	cbnz	r3, 801bd08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bcf6:	b139      	cbz	r1, 801bd08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bcf8:	4b05      	ldr	r3, [pc, #20]	; (801bd10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801bcfa:	801a      	strh	r2, [r3, #0]
 801bcfc:	4b05      	ldr	r3, [pc, #20]	; (801bd14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801bcfe:	6019      	str	r1, [r3, #0]
 801bd00:	4b05      	ldr	r3, [pc, #20]	; (801bd18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801bd02:	6018      	str	r0, [r3, #0]
 801bd04:	f7ff bf96 	b.w	801bc34 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bd08:	4770      	bx	lr
 801bd0a:	bf00      	nop
 801bd0c:	24006dec 	.word	0x24006dec
 801bd10:	24006e00 	.word	0x24006e00
 801bd14:	24006de8 	.word	0x24006de8
 801bd18:	24006de0 	.word	0x24006de0

0801bd1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bd1c:	b470      	push	{r4, r5, r6}
 801bd1e:	4c07      	ldr	r4, [pc, #28]	; (801bd3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bd20:	4605      	mov	r5, r0
 801bd22:	4610      	mov	r0, r2
 801bd24:	9a03      	ldr	r2, [sp, #12]
 801bd26:	6826      	ldr	r6, [r4, #0]
 801bd28:	b936      	cbnz	r6, 801bd38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bd2a:	6025      	str	r5, [r4, #0]
 801bd2c:	4c04      	ldr	r4, [pc, #16]	; (801bd40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bd2e:	8021      	strh	r1, [r4, #0]
 801bd30:	4619      	mov	r1, r3
 801bd32:	bc70      	pop	{r4, r5, r6}
 801bd34:	f7ff bfdc 	b.w	801bcf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bd38:	bc70      	pop	{r4, r5, r6}
 801bd3a:	4770      	bx	lr
 801bd3c:	24006e04 	.word	0x24006e04
 801bd40:	24006dfc 	.word	0x24006dfc

0801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bd44:	4a12      	ldr	r2, [pc, #72]	; (801bd90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801bd46:	8803      	ldrh	r3, [r0, #0]
 801bd48:	8812      	ldrh	r2, [r2, #0]
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	d207      	bcs.n	801bd5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801bd4e:	4a11      	ldr	r2, [pc, #68]	; (801bd94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801bd50:	2114      	movs	r1, #20
 801bd52:	6812      	ldr	r2, [r2, #0]
 801bd54:	fb01 2303 	mla	r3, r1, r3, r2
 801bd58:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801bd5c:	4770      	bx	lr
 801bd5e:	490e      	ldr	r1, [pc, #56]	; (801bd98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bd60:	8809      	ldrh	r1, [r1, #0]
 801bd62:	4411      	add	r1, r2
 801bd64:	428b      	cmp	r3, r1
 801bd66:	da04      	bge.n	801bd72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801bd68:	1a9b      	subs	r3, r3, r2
 801bd6a:	4a0c      	ldr	r2, [pc, #48]	; (801bd9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bd6c:	210e      	movs	r1, #14
 801bd6e:	6812      	ldr	r2, [r2, #0]
 801bd70:	e7f0      	b.n	801bd54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801bd72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd76:	4293      	cmp	r3, r2
 801bd78:	d108      	bne.n	801bd8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801bd7a:	4b09      	ldr	r3, [pc, #36]	; (801bda0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bd7c:	781b      	ldrb	r3, [r3, #0]
 801bd7e:	b91b      	cbnz	r3, 801bd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801bd80:	4b08      	ldr	r3, [pc, #32]	; (801bda4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bd82:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bd86:	4770      	bx	lr
 801bd88:	4b07      	ldr	r3, [pc, #28]	; (801bda8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bd8a:	e7fa      	b.n	801bd82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	4770      	bx	lr
 801bd90:	24006dfc 	.word	0x24006dfc
 801bd94:	24006e04 	.word	0x24006e04
 801bd98:	24006e00 	.word	0x24006e00
 801bd9c:	24006de4 	.word	0x24006de4
 801bda0:	24006d74 	.word	0x24006d74
 801bda4:	24006d76 	.word	0x24006d76
 801bda8:	24006d78 	.word	0x24006d78

0801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bdac:	4a12      	ldr	r2, [pc, #72]	; (801bdf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801bdae:	8803      	ldrh	r3, [r0, #0]
 801bdb0:	8812      	ldrh	r2, [r2, #0]
 801bdb2:	4293      	cmp	r3, r2
 801bdb4:	d207      	bcs.n	801bdc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801bdb6:	4a11      	ldr	r2, [pc, #68]	; (801bdfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bdb8:	2114      	movs	r1, #20
 801bdba:	6812      	ldr	r2, [r2, #0]
 801bdbc:	fb01 2303 	mla	r3, r1, r3, r2
 801bdc0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801bdc4:	4770      	bx	lr
 801bdc6:	490e      	ldr	r1, [pc, #56]	; (801be00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bdc8:	8809      	ldrh	r1, [r1, #0]
 801bdca:	4411      	add	r1, r2
 801bdcc:	428b      	cmp	r3, r1
 801bdce:	da04      	bge.n	801bdda <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bdd0:	1a9b      	subs	r3, r3, r2
 801bdd2:	4a0c      	ldr	r2, [pc, #48]	; (801be04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bdd4:	210e      	movs	r1, #14
 801bdd6:	6812      	ldr	r2, [r2, #0]
 801bdd8:	e7f0      	b.n	801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801bdda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bdde:	4293      	cmp	r3, r2
 801bde0:	d108      	bne.n	801bdf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bde2:	4b09      	ldr	r3, [pc, #36]	; (801be08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bde4:	781b      	ldrb	r3, [r3, #0]
 801bde6:	b91b      	cbnz	r3, 801bdf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bde8:	4b08      	ldr	r3, [pc, #32]	; (801be0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bdea:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bdee:	4770      	bx	lr
 801bdf0:	4b07      	ldr	r3, [pc, #28]	; (801be10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bdf2:	e7fa      	b.n	801bdea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801bdf4:	2000      	movs	r0, #0
 801bdf6:	4770      	bx	lr
 801bdf8:	24006dfc 	.word	0x24006dfc
 801bdfc:	24006e04 	.word	0x24006e04
 801be00:	24006e00 	.word	0x24006e00
 801be04:	24006de4 	.word	0x24006de4
 801be08:	24006d74 	.word	0x24006d74
 801be0c:	24006d78 	.word	0x24006d78
 801be10:	24006d76 	.word	0x24006d76

0801be14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801be14:	4a1f      	ldr	r2, [pc, #124]	; (801be94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801be16:	b510      	push	{r4, lr}
 801be18:	880b      	ldrh	r3, [r1, #0]
 801be1a:	8812      	ldrh	r2, [r2, #0]
 801be1c:	4293      	cmp	r3, r2
 801be1e:	d213      	bcs.n	801be48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801be20:	4a1d      	ldr	r2, [pc, #116]	; (801be98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801be22:	2114      	movs	r1, #20
 801be24:	6812      	ldr	r2, [r2, #0]
 801be26:	fb01 2303 	mla	r3, r1, r3, r2
 801be2a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801be2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801be32:	8a1a      	ldrh	r2, [r3, #16]
 801be34:	8a5b      	ldrh	r3, [r3, #18]
 801be36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be3a:	8004      	strh	r4, [r0, #0]
 801be3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be40:	8041      	strh	r1, [r0, #2]
 801be42:	8082      	strh	r2, [r0, #4]
 801be44:	80c3      	strh	r3, [r0, #6]
 801be46:	e00e      	b.n	801be66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801be48:	4914      	ldr	r1, [pc, #80]	; (801be9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801be4a:	8809      	ldrh	r1, [r1, #0]
 801be4c:	4411      	add	r1, r2
 801be4e:	428b      	cmp	r3, r1
 801be50:	da0a      	bge.n	801be68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801be52:	1a9b      	subs	r3, r3, r2
 801be54:	4a12      	ldr	r2, [pc, #72]	; (801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801be56:	210e      	movs	r1, #14
 801be58:	6812      	ldr	r2, [r2, #0]
 801be5a:	fb01 2303 	mla	r3, r1, r3, r2
 801be5e:	681a      	ldr	r2, [r3, #0]
 801be60:	6002      	str	r2, [r0, #0]
 801be62:	685a      	ldr	r2, [r3, #4]
 801be64:	6042      	str	r2, [r0, #4]
 801be66:	bd10      	pop	{r4, pc}
 801be68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be6c:	4293      	cmp	r3, r2
 801be6e:	d10b      	bne.n	801be88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801be70:	4b0c      	ldr	r3, [pc, #48]	; (801bea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801be72:	f9b3 1000 	ldrsh.w	r1, [r3]
 801be76:	4b0c      	ldr	r3, [pc, #48]	; (801bea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801be78:	8081      	strh	r1, [r0, #4]
 801be7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be7e:	2300      	movs	r3, #0
 801be80:	80c2      	strh	r2, [r0, #6]
 801be82:	8003      	strh	r3, [r0, #0]
 801be84:	8043      	strh	r3, [r0, #2]
 801be86:	e7ee      	b.n	801be66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801be88:	2300      	movs	r3, #0
 801be8a:	8003      	strh	r3, [r0, #0]
 801be8c:	8043      	strh	r3, [r0, #2]
 801be8e:	8083      	strh	r3, [r0, #4]
 801be90:	e7d8      	b.n	801be44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801be92:	bf00      	nop
 801be94:	24006dfc 	.word	0x24006dfc
 801be98:	24006e04 	.word	0x24006e04
 801be9c:	24006e00 	.word	0x24006e00
 801bea0:	24006de4 	.word	0x24006de4
 801bea4:	24006d70 	.word	0x24006d70
 801bea8:	24006d72 	.word	0x24006d72

0801beac <_ZNK8touchgfx6Bitmap7getDataEv>:
 801beac:	4a12      	ldr	r2, [pc, #72]	; (801bef8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801beae:	8803      	ldrh	r3, [r0, #0]
 801beb0:	8811      	ldrh	r1, [r2, #0]
 801beb2:	428b      	cmp	r3, r1
 801beb4:	d20b      	bcs.n	801bece <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801beb6:	4a11      	ldr	r2, [pc, #68]	; (801befc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801beb8:	6812      	ldr	r2, [r2, #0]
 801beba:	b112      	cbz	r2, 801bec2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bebc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bec0:	b9c0      	cbnz	r0, 801bef4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bec2:	4a0f      	ldr	r2, [pc, #60]	; (801bf00 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bec4:	6811      	ldr	r1, [r2, #0]
 801bec6:	2214      	movs	r2, #20
 801bec8:	4353      	muls	r3, r2
 801beca:	58c8      	ldr	r0, [r1, r3]
 801becc:	4770      	bx	lr
 801bece:	4a0d      	ldr	r2, [pc, #52]	; (801bf04 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bed0:	8812      	ldrh	r2, [r2, #0]
 801bed2:	440a      	add	r2, r1
 801bed4:	4293      	cmp	r3, r2
 801bed6:	da04      	bge.n	801bee2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bed8:	4a08      	ldr	r2, [pc, #32]	; (801befc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801beda:	6812      	ldr	r2, [r2, #0]
 801bedc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bee0:	4770      	bx	lr
 801bee2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bee6:	4293      	cmp	r3, r2
 801bee8:	d103      	bne.n	801bef2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801beea:	4b07      	ldr	r3, [pc, #28]	; (801bf08 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bef0:	4770      	bx	lr
 801bef2:	2000      	movs	r0, #0
 801bef4:	4770      	bx	lr
 801bef6:	bf00      	nop
 801bef8:	24006dfc 	.word	0x24006dfc
 801befc:	24006de0 	.word	0x24006de0
 801bf00:	24006e04 	.word	0x24006e04
 801bf04:	24006e00 	.word	0x24006e00
 801bf08:	24006d7c 	.word	0x24006d7c

0801bf0c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bf0c:	4b24      	ldr	r3, [pc, #144]	; (801bfa0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bf0e:	8802      	ldrh	r2, [r0, #0]
 801bf10:	8818      	ldrh	r0, [r3, #0]
 801bf12:	4282      	cmp	r2, r0
 801bf14:	d221      	bcs.n	801bf5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bf16:	4b23      	ldr	r3, [pc, #140]	; (801bfa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bf18:	6819      	ldr	r1, [r3, #0]
 801bf1a:	2314      	movs	r3, #20
 801bf1c:	fb03 1302 	mla	r3, r3, r2, r1
 801bf20:	6858      	ldr	r0, [r3, #4]
 801bf22:	2800      	cmp	r0, #0
 801bf24:	d03a      	beq.n	801bf9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf26:	4920      	ldr	r1, [pc, #128]	; (801bfa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf28:	6809      	ldr	r1, [r1, #0]
 801bf2a:	2900      	cmp	r1, #0
 801bf2c:	d036      	beq.n	801bf9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bf32:	2900      	cmp	r1, #0
 801bf34:	d032      	beq.n	801bf9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf36:	891a      	ldrh	r2, [r3, #8]
 801bf38:	8958      	ldrh	r0, [r3, #10]
 801bf3a:	4350      	muls	r0, r2
 801bf3c:	7c5a      	ldrb	r2, [r3, #17]
 801bf3e:	7cdb      	ldrb	r3, [r3, #19]
 801bf40:	0952      	lsrs	r2, r2, #5
 801bf42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bf46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bf4a:	2b0b      	cmp	r3, #11
 801bf4c:	bf18      	it	ne
 801bf4e:	0040      	lslne	r0, r0, #1
 801bf50:	3003      	adds	r0, #3
 801bf52:	f020 0003 	bic.w	r0, r0, #3
 801bf56:	4408      	add	r0, r1
 801bf58:	4770      	bx	lr
 801bf5a:	4b14      	ldr	r3, [pc, #80]	; (801bfac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bf5c:	881b      	ldrh	r3, [r3, #0]
 801bf5e:	4403      	add	r3, r0
 801bf60:	429a      	cmp	r2, r3
 801bf62:	da1a      	bge.n	801bf9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf64:	4b12      	ldr	r3, [pc, #72]	; (801bfb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bf66:	1a10      	subs	r0, r2, r0
 801bf68:	210e      	movs	r1, #14
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	fb01 3000 	mla	r0, r1, r0, r3
 801bf70:	7b03      	ldrb	r3, [r0, #12]
 801bf72:	f003 031f 	and.w	r3, r3, #31
 801bf76:	2b0b      	cmp	r3, #11
 801bf78:	d10b      	bne.n	801bf92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bf7a:	8903      	ldrh	r3, [r0, #8]
 801bf7c:	8940      	ldrh	r0, [r0, #10]
 801bf7e:	4358      	muls	r0, r3
 801bf80:	4b09      	ldr	r3, [pc, #36]	; (801bfa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf82:	3003      	adds	r0, #3
 801bf84:	6819      	ldr	r1, [r3, #0]
 801bf86:	f020 0303 	bic.w	r3, r0, #3
 801bf8a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bf8e:	4418      	add	r0, r3
 801bf90:	4770      	bx	lr
 801bf92:	2b0d      	cmp	r3, #13
 801bf94:	d101      	bne.n	801bf9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf96:	300d      	adds	r0, #13
 801bf98:	4770      	bx	lr
 801bf9a:	2000      	movs	r0, #0
 801bf9c:	4770      	bx	lr
 801bf9e:	bf00      	nop
 801bfa0:	24006dfc 	.word	0x24006dfc
 801bfa4:	24006e04 	.word	0x24006e04
 801bfa8:	24006de0 	.word	0x24006de0
 801bfac:	24006e00 	.word	0x24006e00
 801bfb0:	24006de4 	.word	0x24006de4

0801bfb4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bfb4:	4a17      	ldr	r2, [pc, #92]	; (801c014 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801bfb6:	b510      	push	{r4, lr}
 801bfb8:	8803      	ldrh	r3, [r0, #0]
 801bfba:	8812      	ldrh	r2, [r2, #0]
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	d20c      	bcs.n	801bfda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bfc0:	4a15      	ldr	r2, [pc, #84]	; (801c018 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bfc2:	2114      	movs	r1, #20
 801bfc4:	6812      	ldr	r2, [r2, #0]
 801bfc6:	fb01 2303 	mla	r3, r1, r3, r2
 801bfca:	7c58      	ldrb	r0, [r3, #17]
 801bfcc:	0942      	lsrs	r2, r0, #5
 801bfce:	7cd8      	ldrb	r0, [r3, #19]
 801bfd0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bfd4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bfd8:	bd10      	pop	{r4, pc}
 801bfda:	4910      	ldr	r1, [pc, #64]	; (801c01c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bfdc:	8809      	ldrh	r1, [r1, #0]
 801bfde:	4411      	add	r1, r2
 801bfe0:	428b      	cmp	r3, r1
 801bfe2:	da09      	bge.n	801bff8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bfe4:	1a9b      	subs	r3, r3, r2
 801bfe6:	4a0e      	ldr	r2, [pc, #56]	; (801c020 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bfe8:	210e      	movs	r1, #14
 801bfea:	6812      	ldr	r2, [r2, #0]
 801bfec:	fb01 2303 	mla	r3, r1, r3, r2
 801bff0:	7b18      	ldrb	r0, [r3, #12]
 801bff2:	f000 001f 	and.w	r0, r0, #31
 801bff6:	e7ef      	b.n	801bfd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bff8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bffc:	4293      	cmp	r3, r2
 801bffe:	d106      	bne.n	801c00e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c000:	f7e8 f9d0 	bl	80043a4 <_ZN8touchgfx3HAL3lcdEv>
 801c004:	6803      	ldr	r3, [r0, #0]
 801c006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c00c:	4718      	bx	r3
 801c00e:	2000      	movs	r0, #0
 801c010:	e7e2      	b.n	801bfd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c012:	bf00      	nop
 801c014:	24006dfc 	.word	0x24006dfc
 801c018:	24006e04 	.word	0x24006e04
 801c01c:	24006e00 	.word	0x24006e00
 801c020:	24006de4 	.word	0x24006de4

0801c024 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c024:	2018      	movs	r0, #24
 801c026:	4770      	bx	lr

0801c028 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c028:	2001      	movs	r0, #1
 801c02a:	4770      	bx	lr

0801c02c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c02c:	4b02      	ldr	r3, [pc, #8]	; (801c038 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801c02e:	8818      	ldrh	r0, [r3, #0]
 801c030:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c034:	b280      	uxth	r0, r0
 801c036:	4770      	bx	lr
 801c038:	24006d76 	.word	0x24006d76

0801c03c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c03c:	2bff      	cmp	r3, #255	; 0xff
 801c03e:	d040      	beq.n	801c0c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801c040:	2a2c      	cmp	r2, #44	; 0x2c
 801c042:	d02a      	beq.n	801c09a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801c044:	d80f      	bhi.n	801c066 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801c046:	2a08      	cmp	r2, #8
 801c048:	d037      	beq.n	801c0ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c04a:	d805      	bhi.n	801c058 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801c04c:	2a04      	cmp	r2, #4
 801c04e:	d032      	beq.n	801c0b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801c050:	2a05      	cmp	r2, #5
 801c052:	d02e      	beq.n	801c0b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801c054:	2000      	movs	r0, #0
 801c056:	4770      	bx	lr
 801c058:	2a0a      	cmp	r2, #10
 801c05a:	d02e      	beq.n	801c0ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c05c:	d301      	bcc.n	801c062 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801c05e:	2a0b      	cmp	r2, #11
 801c060:	d1f8      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c062:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c064:	4770      	bx	lr
 801c066:	2a30      	cmp	r2, #48	; 0x30
 801c068:	d029      	beq.n	801c0be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c06a:	d808      	bhi.n	801c07e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801c06c:	2a2e      	cmp	r2, #46	; 0x2e
 801c06e:	684b      	ldr	r3, [r1, #4]
 801c070:	d01a      	beq.n	801c0a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801c072:	d90b      	bls.n	801c08c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801c074:	781b      	ldrb	r3, [r3, #0]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d1ec      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c07a:	6a00      	ldr	r0, [r0, #32]
 801c07c:	4770      	bx	lr
 801c07e:	2a32      	cmp	r2, #50	; 0x32
 801c080:	d01d      	beq.n	801c0be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c082:	d301      	bcc.n	801c088 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801c084:	2a33      	cmp	r2, #51	; 0x33
 801c086:	d1e5      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c088:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c08a:	4770      	bx	lr
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d0f3      	beq.n	801c07a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801c092:	2b01      	cmp	r3, #1
 801c094:	d1de      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c096:	6900      	ldr	r0, [r0, #16]
 801c098:	4770      	bx	lr
 801c09a:	684b      	ldr	r3, [r1, #4]
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	b133      	cbz	r3, 801c0ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801c0a0:	2b01      	cmp	r3, #1
 801c0a2:	d1d7      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c0a4:	6880      	ldr	r0, [r0, #8]
 801c0a6:	4770      	bx	lr
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d1d2      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c0ae:	6980      	ldr	r0, [r0, #24]
 801c0b0:	4770      	bx	lr
 801c0b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c0b4:	4770      	bx	lr
 801c0b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c0b8:	4770      	bx	lr
 801c0ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c0bc:	4770      	bx	lr
 801c0be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c0c0:	4770      	bx	lr
 801c0c2:	2a2c      	cmp	r2, #44	; 0x2c
 801c0c4:	d02a      	beq.n	801c11c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c0c6:	d80f      	bhi.n	801c0e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801c0c8:	2a08      	cmp	r2, #8
 801c0ca:	d035      	beq.n	801c138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801c0cc:	d805      	bhi.n	801c0da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c0ce:	2a04      	cmp	r2, #4
 801c0d0:	d030      	beq.n	801c134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801c0d2:	2a05      	cmp	r2, #5
 801c0d4:	d1be      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c0d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c0d8:	4770      	bx	lr
 801c0da:	2a0a      	cmp	r2, #10
 801c0dc:	d02c      	beq.n	801c138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801c0de:	d301      	bcc.n	801c0e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801c0e0:	2a0b      	cmp	r2, #11
 801c0e2:	d1b7      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c0e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c0e6:	4770      	bx	lr
 801c0e8:	2a30      	cmp	r2, #48	; 0x30
 801c0ea:	d027      	beq.n	801c13c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801c0ec:	d808      	bhi.n	801c100 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801c0ee:	2a2e      	cmp	r2, #46	; 0x2e
 801c0f0:	684b      	ldr	r3, [r1, #4]
 801c0f2:	d01a      	beq.n	801c12a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c0f4:	d90b      	bls.n	801c10e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801c0f6:	781b      	ldrb	r3, [r3, #0]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d1ab      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c0fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c0fe:	4770      	bx	lr
 801c100:	2a32      	cmp	r2, #50	; 0x32
 801c102:	d01b      	beq.n	801c13c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801c104:	d301      	bcc.n	801c10a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801c106:	2a33      	cmp	r2, #51	; 0x33
 801c108:	d1a4      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c10a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c10c:	4770      	bx	lr
 801c10e:	781b      	ldrb	r3, [r3, #0]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d0f3      	beq.n	801c0fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801c114:	2b01      	cmp	r3, #1
 801c116:	d19d      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c118:	6940      	ldr	r0, [r0, #20]
 801c11a:	4770      	bx	lr
 801c11c:	684b      	ldr	r3, [r1, #4]
 801c11e:	781b      	ldrb	r3, [r3, #0]
 801c120:	b133      	cbz	r3, 801c130 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801c122:	2b01      	cmp	r3, #1
 801c124:	d196      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c126:	68c0      	ldr	r0, [r0, #12]
 801c128:	4770      	bx	lr
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d191      	bne.n	801c054 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c130:	69c0      	ldr	r0, [r0, #28]
 801c132:	4770      	bx	lr
 801c134:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c136:	4770      	bx	lr
 801c138:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c13a:	4770      	bx	lr
 801c13c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c13e:	4770      	bx	lr

0801c140 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c144:	b085      	sub	sp, #20
 801c146:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c148:	9203      	str	r2, [sp, #12]
 801c14a:	6870      	ldr	r0, [r6, #4]
 801c14c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c150:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c154:	9101      	str	r1, [sp, #4]
 801c156:	fa1f f885 	uxth.w	r8, r5
 801c15a:	43ed      	mvns	r5, r5
 801c15c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c160:	b2ed      	uxtb	r5, r5
 801c162:	fb00 2404 	mla	r4, r0, r4, r2
 801c166:	6832      	ldr	r2, [r6, #0]
 801c168:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c16c:	4414      	add	r4, r2
 801c16e:	f8dc 2000 	ldr.w	r2, [ip]
 801c172:	9202      	str	r2, [sp, #8]
 801c174:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c178:	f102 0e04 	add.w	lr, r2, #4
 801c17c:	9a01      	ldr	r2, [sp, #4]
 801c17e:	2a00      	cmp	r2, #0
 801c180:	dc03      	bgt.n	801c18a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c182:	9a03      	ldr	r2, [sp, #12]
 801c184:	2a00      	cmp	r2, #0
 801c186:	f340 8116 	ble.w	801c3b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c18a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c18c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c190:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c196:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c19a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	dd0e      	ble.n	801c1c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c1a2:	1406      	asrs	r6, r0, #16
 801c1a4:	d405      	bmi.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c1a6:	4556      	cmp	r6, sl
 801c1a8:	da03      	bge.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c1aa:	1416      	asrs	r6, r2, #16
 801c1ac:	d401      	bmi.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c1ae:	454e      	cmp	r6, r9
 801c1b0:	db07      	blt.n	801c1c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c1b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c1b4:	3b01      	subs	r3, #1
 801c1b6:	3403      	adds	r4, #3
 801c1b8:	4430      	add	r0, r6
 801c1ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c1bc:	4432      	add	r2, r6
 801c1be:	e7ee      	b.n	801c19e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c1c0:	d063      	beq.n	801c28a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c1c2:	1e5e      	subs	r6, r3, #1
 801c1c4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c1c6:	fb07 0706 	mla	r7, r7, r6, r0
 801c1ca:	143f      	asrs	r7, r7, #16
 801c1cc:	d454      	bmi.n	801c278 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c1ce:	4557      	cmp	r7, sl
 801c1d0:	da52      	bge.n	801c278 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c1d2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c1d4:	fb07 2606 	mla	r6, r7, r6, r2
 801c1d8:	1436      	asrs	r6, r6, #16
 801c1da:	d44d      	bmi.n	801c278 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c1dc:	454e      	cmp	r6, r9
 801c1de:	da4b      	bge.n	801c278 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c1e0:	1ce6      	adds	r6, r4, #3
 801c1e2:	4699      	mov	r9, r3
 801c1e4:	f1b9 0f00 	cmp.w	r9, #0
 801c1e8:	f106 0603 	add.w	r6, r6, #3
 801c1ec:	dd48      	ble.n	801c280 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c1ee:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c1f2:	1417      	asrs	r7, r2, #16
 801c1f4:	9902      	ldr	r1, [sp, #8]
 801c1f6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c1fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801c1fe:	fb0b 1707 	mla	r7, fp, r7, r1
 801c202:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c206:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c208:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c20c:	fb1b fb05 	smulbb	fp, fp, r5
 801c210:	4408      	add	r0, r1
 801c212:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c214:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c218:	440a      	add	r2, r1
 801c21a:	eb0e 0a07 	add.w	sl, lr, r7
 801c21e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c222:	fb07 b708 	mla	r7, r7, r8, fp
 801c226:	b2bf      	uxth	r7, r7
 801c228:	f107 0b01 	add.w	fp, r7, #1
 801c22c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c230:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c234:	fb1b fb05 	smulbb	fp, fp, r5
 801c238:	123f      	asrs	r7, r7, #8
 801c23a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c23e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c242:	fb07 b708 	mla	r7, r7, r8, fp
 801c246:	b2bf      	uxth	r7, r7
 801c248:	f107 0b01 	add.w	fp, r7, #1
 801c24c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c250:	123f      	asrs	r7, r7, #8
 801c252:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c256:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c25a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c25e:	fb1a fa05 	smulbb	sl, sl, r5
 801c262:	fb07 a708 	mla	r7, r7, r8, sl
 801c266:	b2bf      	uxth	r7, r7
 801c268:	f107 0a01 	add.w	sl, r7, #1
 801c26c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c270:	123f      	asrs	r7, r7, #8
 801c272:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c276:	e7b5      	b.n	801c1e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c278:	2700      	movs	r7, #0
 801c27a:	1bde      	subs	r6, r3, r7
 801c27c:	2e00      	cmp	r6, #0
 801c27e:	dc42      	bgt.n	801c306 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c288:	441c      	add	r4, r3
 801c28a:	9b01      	ldr	r3, [sp, #4]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	f340 8092 	ble.w	801c3b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c298:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c29c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2a0:	eef0 6a62 	vmov.f32	s13, s5
 801c2a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c2a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2b0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c2b4:	eef0 6a43 	vmov.f32	s13, s6
 801c2b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2bc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c2c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2d8:	ee12 2a90 	vmov	r2, s5
 801c2dc:	eef0 2a47 	vmov.f32	s5, s14
 801c2e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2e4:	ee13 2a10 	vmov	r2, s6
 801c2e8:	9311      	str	r3, [sp, #68]	; 0x44
 801c2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2ec:	eeb0 3a67 	vmov.f32	s6, s15
 801c2f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2f4:	9312      	str	r3, [sp, #72]	; 0x48
 801c2f6:	9b01      	ldr	r3, [sp, #4]
 801c2f8:	9a03      	ldr	r2, [sp, #12]
 801c2fa:	3b01      	subs	r3, #1
 801c2fc:	9301      	str	r3, [sp, #4]
 801c2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c300:	bf08      	it	eq
 801c302:	4613      	moveq	r3, r2
 801c304:	e73a      	b.n	801c17c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c306:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c30a:	d44e      	bmi.n	801c3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c30c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c310:	4556      	cmp	r6, sl
 801c312:	dd4a      	ble.n	801c3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c314:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c318:	d447      	bmi.n	801c3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c31a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c31e:	4559      	cmp	r1, fp
 801c320:	dd43      	ble.n	801c3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c322:	fa0f f986 	sxth.w	r9, r6
 801c326:	9902      	ldr	r1, [sp, #8]
 801c328:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c32c:	fb0b 1909 	mla	r9, fp, r9, r1
 801c330:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c334:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c338:	fb1b fb05 	smulbb	fp, fp, r5
 801c33c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c340:	eb0e 0a09 	add.w	sl, lr, r9
 801c344:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c348:	fb09 b908 	mla	r9, r9, r8, fp
 801c34c:	fa1f f989 	uxth.w	r9, r9
 801c350:	f109 0b01 	add.w	fp, r9, #1
 801c354:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c358:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c35c:	f804 9006 	strb.w	r9, [r4, r6]
 801c360:	4426      	add	r6, r4
 801c362:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c366:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c36a:	fb1b fb05 	smulbb	fp, fp, r5
 801c36e:	fb09 b908 	mla	r9, r9, r8, fp
 801c372:	fa1f f989 	uxth.w	r9, r9
 801c376:	f109 0b01 	add.w	fp, r9, #1
 801c37a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c37e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c382:	f886 9001 	strb.w	r9, [r6, #1]
 801c386:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c38a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c38e:	fb1a fa05 	smulbb	sl, sl, r5
 801c392:	fb09 a908 	mla	r9, r9, r8, sl
 801c396:	fa1f f989 	uxth.w	r9, r9
 801c39a:	f109 0a01 	add.w	sl, r9, #1
 801c39e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c3a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c3a6:	f886 9002 	strb.w	r9, [r6, #2]
 801c3aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c3ac:	3701      	adds	r7, #1
 801c3ae:	4408      	add	r0, r1
 801c3b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c3b2:	440a      	add	r2, r1
 801c3b4:	e761      	b.n	801c27a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c3b6:	b005      	add	sp, #20
 801c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c3c2:	4693      	mov	fp, r2
 801c3c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c3ca:	6868      	ldr	r0, [r5, #4]
 801c3cc:	6877      	ldr	r7, [r6, #4]
 801c3ce:	9100      	str	r1, [sp, #0]
 801c3d0:	3704      	adds	r7, #4
 801c3d2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c3d6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c3da:	fb00 2404 	mla	r4, r0, r4, r2
 801c3de:	682a      	ldr	r2, [r5, #0]
 801c3e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3e4:	4414      	add	r4, r2
 801c3e6:	6832      	ldr	r2, [r6, #0]
 801c3e8:	9201      	str	r2, [sp, #4]
 801c3ea:	9a00      	ldr	r2, [sp, #0]
 801c3ec:	2a00      	cmp	r2, #0
 801c3ee:	dc03      	bgt.n	801c3f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c3f0:	f1bb 0f00 	cmp.w	fp, #0
 801c3f4:	f340 80bc 	ble.w	801c570 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c3f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3fa:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c3fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c404:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c408:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	dd0c      	ble.n	801c42a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c410:	1405      	asrs	r5, r0, #16
 801c412:	d405      	bmi.n	801c420 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c414:	4555      	cmp	r5, sl
 801c416:	da03      	bge.n	801c420 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c418:	1415      	asrs	r5, r2, #16
 801c41a:	d401      	bmi.n	801c420 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c41c:	454d      	cmp	r5, r9
 801c41e:	db05      	blt.n	801c42c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c420:	4440      	add	r0, r8
 801c422:	4472      	add	r2, lr
 801c424:	3b01      	subs	r3, #1
 801c426:	3403      	adds	r4, #3
 801c428:	e7f0      	b.n	801c40c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c42a:	d03f      	beq.n	801c4ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c42c:	1e5d      	subs	r5, r3, #1
 801c42e:	fb08 0c05 	mla	ip, r8, r5, r0
 801c432:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c436:	d42e      	bmi.n	801c496 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c438:	45d4      	cmp	ip, sl
 801c43a:	da2c      	bge.n	801c496 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c43c:	fb0e 2505 	mla	r5, lr, r5, r2
 801c440:	142d      	asrs	r5, r5, #16
 801c442:	d428      	bmi.n	801c496 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c444:	454d      	cmp	r5, r9
 801c446:	da26      	bge.n	801c496 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c448:	1ce5      	adds	r5, r4, #3
 801c44a:	469c      	mov	ip, r3
 801c44c:	f1bc 0f00 	cmp.w	ip, #0
 801c450:	f105 0503 	add.w	r5, r5, #3
 801c454:	dd25      	ble.n	801c4a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c456:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c45a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c45e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c462:	4472      	add	r2, lr
 801c464:	468a      	mov	sl, r1
 801c466:	9901      	ldr	r1, [sp, #4]
 801c468:	fb0a 1909 	mla	r9, sl, r9, r1
 801c46c:	1401      	asrs	r1, r0, #16
 801c46e:	4440      	add	r0, r8
 801c470:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c474:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c478:	eb07 0a09 	add.w	sl, r7, r9
 801c47c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c480:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c484:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c488:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c48c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c490:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c494:	e7da      	b.n	801c44c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c496:	2500      	movs	r5, #0
 801c498:	eba3 0c05 	sub.w	ip, r3, r5
 801c49c:	f1bc 0f00 	cmp.w	ip, #0
 801c4a0:	dc3b      	bgt.n	801c51a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c4a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4aa:	441c      	add	r4, r3
 801c4ac:	9b00      	ldr	r3, [sp, #0]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	dd5e      	ble.n	801c570 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c4b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4bc:	eeb0 6a62 	vmov.f32	s12, s5
 801c4c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4cc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c4d0:	eeb0 6a43 	vmov.f32	s12, s6
 801c4d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4d8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c4dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4f4:	ee12 2a90 	vmov	r2, s5
 801c4f8:	eef0 2a47 	vmov.f32	s5, s14
 801c4fc:	fb92 f8f3 	sdiv	r8, r2, r3
 801c500:	ee13 2a10 	vmov	r2, s6
 801c504:	eeb0 3a67 	vmov.f32	s6, s15
 801c508:	fb92 fef3 	sdiv	lr, r2, r3
 801c50c:	9b00      	ldr	r3, [sp, #0]
 801c50e:	3b01      	subs	r3, #1
 801c510:	9300      	str	r3, [sp, #0]
 801c512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c514:	bf08      	it	eq
 801c516:	465b      	moveq	r3, fp
 801c518:	e767      	b.n	801c3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c51a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c51e:	d423      	bmi.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c520:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c524:	45cc      	cmp	ip, r9
 801c526:	dd1f      	ble.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c528:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c52c:	d41c      	bmi.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c52e:	68f1      	ldr	r1, [r6, #12]
 801c530:	4551      	cmp	r1, sl
 801c532:	dd19      	ble.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c534:	fa0f fc8c 	sxth.w	ip, ip
 801c538:	9901      	ldr	r1, [sp, #4]
 801c53a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c53e:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c542:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c546:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c54a:	eb07 090c 	add.w	r9, r7, ip
 801c54e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c552:	f804 a00c 	strb.w	sl, [r4, ip]
 801c556:	44a4      	add	ip, r4
 801c558:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c55c:	f88c a001 	strb.w	sl, [ip, #1]
 801c560:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c564:	f88c 9002 	strb.w	r9, [ip, #2]
 801c568:	4440      	add	r0, r8
 801c56a:	4472      	add	r2, lr
 801c56c:	3501      	adds	r5, #1
 801c56e:	e793      	b.n	801c498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c570:	b003      	add	sp, #12
 801c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c576 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57a:	b085      	sub	sp, #20
 801c57c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c580:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c582:	9202      	str	r2, [sp, #8]
 801c584:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c588:	6860      	ldr	r0, [r4, #4]
 801c58a:	9203      	str	r2, [sp, #12]
 801c58c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c590:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c594:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c598:	fb00 2505 	mla	r5, r0, r5, r2
 801c59c:	6822      	ldr	r2, [r4, #0]
 801c59e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c5a2:	4415      	add	r5, r2
 801c5a4:	f8dc 2000 	ldr.w	r2, [ip]
 801c5a8:	9200      	str	r2, [sp, #0]
 801c5aa:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c5ae:	3204      	adds	r2, #4
 801c5b0:	9201      	str	r2, [sp, #4]
 801c5b2:	2900      	cmp	r1, #0
 801c5b4:	dc03      	bgt.n	801c5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c5b6:	9a02      	ldr	r2, [sp, #8]
 801c5b8:	2a00      	cmp	r2, #0
 801c5ba:	f340 8127 	ble.w	801c80c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c5be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5c0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c5c4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c5c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5ca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c5ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	dd0d      	ble.n	801c5f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c5d6:	1422      	asrs	r2, r4, #16
 801c5d8:	d405      	bmi.n	801c5e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5da:	4542      	cmp	r2, r8
 801c5dc:	da03      	bge.n	801c5e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5de:	1402      	asrs	r2, r0, #16
 801c5e0:	d401      	bmi.n	801c5e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5e2:	42ba      	cmp	r2, r7
 801c5e4:	db06      	blt.n	801c5f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c5e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5e8:	4474      	add	r4, lr
 801c5ea:	3b01      	subs	r3, #1
 801c5ec:	3503      	adds	r5, #3
 801c5ee:	4410      	add	r0, r2
 801c5f0:	e7ef      	b.n	801c5d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c5f2:	d075      	beq.n	801c6e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c5f4:	1e5a      	subs	r2, r3, #1
 801c5f6:	fb0e 4602 	mla	r6, lr, r2, r4
 801c5fa:	1436      	asrs	r6, r6, #16
 801c5fc:	d465      	bmi.n	801c6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5fe:	4546      	cmp	r6, r8
 801c600:	da63      	bge.n	801c6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c602:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c604:	fb06 0202 	mla	r2, r6, r2, r0
 801c608:	1412      	asrs	r2, r2, #16
 801c60a:	d45e      	bmi.n	801c6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c60c:	42ba      	cmp	r2, r7
 801c60e:	da5c      	bge.n	801c6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c610:	1cef      	adds	r7, r5, #3
 801c612:	4699      	mov	r9, r3
 801c614:	f1b9 0f00 	cmp.w	r9, #0
 801c618:	dd5d      	ble.n	801c6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c61a:	1402      	asrs	r2, r0, #16
 801c61c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c620:	1426      	asrs	r6, r4, #16
 801c622:	4692      	mov	sl, r2
 801c624:	9a00      	ldr	r2, [sp, #0]
 801c626:	fb08 220a 	mla	r2, r8, sl, r2
 801c62a:	5d92      	ldrb	r2, [r2, r6]
 801c62c:	9e01      	ldr	r6, [sp, #4]
 801c62e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c632:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c636:	d041      	beq.n	801c6bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c638:	9a03      	ldr	r2, [sp, #12]
 801c63a:	fa5f fb86 	uxtb.w	fp, r6
 801c63e:	fb02 f808 	mul.w	r8, r2, r8
 801c642:	f108 0201 	add.w	r2, r8, #1
 801c646:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c64a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c64e:	1212      	asrs	r2, r2, #8
 801c650:	fa1f fa82 	uxth.w	sl, r2
 801c654:	43d2      	mvns	r2, r2
 801c656:	fb1b fb0a 	smulbb	fp, fp, sl
 801c65a:	b2d2      	uxtb	r2, r2
 801c65c:	fb08 b802 	mla	r8, r8, r2, fp
 801c660:	fa1f f888 	uxth.w	r8, r8
 801c664:	f108 0b01 	add.w	fp, r8, #1
 801c668:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c66c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c670:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c674:	fb1b fb0a 	smulbb	fp, fp, sl
 801c678:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c67c:	fb16 fa0a 	smulbb	sl, r6, sl
 801c680:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c684:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c688:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c68c:	fb06 aa02 	mla	sl, r6, r2, sl
 801c690:	fb08 b802 	mla	r8, r8, r2, fp
 801c694:	fa1f fa8a 	uxth.w	sl, sl
 801c698:	fa1f f888 	uxth.w	r8, r8
 801c69c:	f10a 0601 	add.w	r6, sl, #1
 801c6a0:	f108 0b01 	add.w	fp, r8, #1
 801c6a4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c6a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c6ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c6b4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c6b8:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6be:	4474      	add	r4, lr
 801c6c0:	3703      	adds	r7, #3
 801c6c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801c6c6:	4410      	add	r0, r2
 801c6c8:	e7a4      	b.n	801c614 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c6ca:	f04f 0800 	mov.w	r8, #0
 801c6ce:	eba3 0208 	sub.w	r2, r3, r8
 801c6d2:	2a00      	cmp	r2, #0
 801c6d4:	dc3b      	bgt.n	801c74e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c6d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6de:	441d      	add	r5, r3
 801c6e0:	2900      	cmp	r1, #0
 801c6e2:	f340 8093 	ble.w	801c80c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c6e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6f0:	3901      	subs	r1, #1
 801c6f2:	eeb0 6a62 	vmov.f32	s12, s5
 801c6f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c702:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c706:	eeb0 6a43 	vmov.f32	s12, s6
 801c70a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c70e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c712:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c716:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c71a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c71e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c722:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c726:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c72a:	ee12 2a90 	vmov	r2, s5
 801c72e:	eef0 2a47 	vmov.f32	s5, s14
 801c732:	fb92 fef3 	sdiv	lr, r2, r3
 801c736:	ee13 2a10 	vmov	r2, s6
 801c73a:	eeb0 3a67 	vmov.f32	s6, s15
 801c73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c742:	9a02      	ldr	r2, [sp, #8]
 801c744:	9312      	str	r3, [sp, #72]	; 0x48
 801c746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c748:	bf08      	it	eq
 801c74a:	4613      	moveq	r3, r2
 801c74c:	e731      	b.n	801c5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c74e:	1427      	asrs	r7, r4, #16
 801c750:	d456      	bmi.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c752:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c756:	42be      	cmp	r6, r7
 801c758:	dd52      	ble.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c75a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c75e:	d44f      	bmi.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c760:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c764:	454a      	cmp	r2, r9
 801c766:	dd4b      	ble.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c768:	9a00      	ldr	r2, [sp, #0]
 801c76a:	b236      	sxth	r6, r6
 801c76c:	fb09 2606 	mla	r6, r9, r6, r2
 801c770:	5df2      	ldrb	r2, [r6, r7]
 801c772:	9e01      	ldr	r6, [sp, #4]
 801c774:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c778:	0e3a      	lsrs	r2, r7, #24
 801c77a:	d041      	beq.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c77c:	9e03      	ldr	r6, [sp, #12]
 801c77e:	fa5f fb87 	uxtb.w	fp, r7
 801c782:	4372      	muls	r2, r6
 801c784:	1c56      	adds	r6, r2, #1
 801c786:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c78a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c78e:	1212      	asrs	r2, r2, #8
 801c790:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c794:	fa1f fa82 	uxth.w	sl, r2
 801c798:	43d2      	mvns	r2, r2
 801c79a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c79e:	b2d2      	uxtb	r2, r2
 801c7a0:	fb09 b902 	mla	r9, r9, r2, fp
 801c7a4:	fa1f f989 	uxth.w	r9, r9
 801c7a8:	f109 0b01 	add.w	fp, r9, #1
 801c7ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c7b0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c7b4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c7b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c7bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7c0:	fb17 fa0a 	smulbb	sl, r7, sl
 801c7c4:	f805 9006 	strb.w	r9, [r5, r6]
 801c7c8:	442e      	add	r6, r5
 801c7ca:	78b7      	ldrb	r7, [r6, #2]
 801c7cc:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c7d0:	fb07 aa02 	mla	sl, r7, r2, sl
 801c7d4:	fb09 b902 	mla	r9, r9, r2, fp
 801c7d8:	fa1f fa8a 	uxth.w	sl, sl
 801c7dc:	fa1f f989 	uxth.w	r9, r9
 801c7e0:	f10a 0701 	add.w	r7, sl, #1
 801c7e4:	f109 0b01 	add.w	fp, r9, #1
 801c7e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c7ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c7f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7f8:	f886 a002 	strb.w	sl, [r6, #2]
 801c7fc:	f886 9001 	strb.w	r9, [r6, #1]
 801c800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c802:	4474      	add	r4, lr
 801c804:	f108 0801 	add.w	r8, r8, #1
 801c808:	4410      	add	r0, r2
 801c80a:	e760      	b.n	801c6ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c80c:	b005      	add	sp, #20
 801c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c812 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c812:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c816:	b085      	sub	sp, #20
 801c818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c81c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c81e:	9203      	str	r2, [sp, #12]
 801c820:	6868      	ldr	r0, [r5, #4]
 801c822:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c826:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c82a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c82e:	fb00 2404 	mla	r4, r0, r4, r2
 801c832:	682a      	ldr	r2, [r5, #0]
 801c834:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c838:	4414      	add	r4, r2
 801c83a:	f8dc 2000 	ldr.w	r2, [ip]
 801c83e:	9201      	str	r2, [sp, #4]
 801c840:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c844:	3204      	adds	r2, #4
 801c846:	9202      	str	r2, [sp, #8]
 801c848:	2900      	cmp	r1, #0
 801c84a:	dc03      	bgt.n	801c854 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c84c:	9a03      	ldr	r2, [sp, #12]
 801c84e:	2a00      	cmp	r2, #0
 801c850:	f340 8137 	ble.w	801cac2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c856:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c85a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c85e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c860:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c864:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c868:	2b00      	cmp	r3, #0
 801c86a:	dd0d      	ble.n	801c888 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c86c:	1405      	asrs	r5, r0, #16
 801c86e:	d405      	bmi.n	801c87c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c870:	4545      	cmp	r5, r8
 801c872:	da03      	bge.n	801c87c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c874:	1415      	asrs	r5, r2, #16
 801c876:	d401      	bmi.n	801c87c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c878:	42bd      	cmp	r5, r7
 801c87a:	db06      	blt.n	801c88a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c87c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c87e:	4470      	add	r0, lr
 801c880:	3b01      	subs	r3, #1
 801c882:	3403      	adds	r4, #3
 801c884:	442a      	add	r2, r5
 801c886:	e7ef      	b.n	801c868 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c888:	d070      	beq.n	801c96c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c88a:	1e5d      	subs	r5, r3, #1
 801c88c:	fb0e 0605 	mla	r6, lr, r5, r0
 801c890:	1436      	asrs	r6, r6, #16
 801c892:	d462      	bmi.n	801c95a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c894:	4546      	cmp	r6, r8
 801c896:	da60      	bge.n	801c95a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c898:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c89a:	fb06 2505 	mla	r5, r6, r5, r2
 801c89e:	142d      	asrs	r5, r5, #16
 801c8a0:	d45b      	bmi.n	801c95a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c8a2:	42bd      	cmp	r5, r7
 801c8a4:	da59      	bge.n	801c95a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c8a6:	1ce5      	adds	r5, r4, #3
 801c8a8:	469a      	mov	sl, r3
 801c8aa:	f1ba 0f00 	cmp.w	sl, #0
 801c8ae:	dd58      	ble.n	801c962 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c8b0:	1416      	asrs	r6, r2, #16
 801c8b2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c8b6:	1407      	asrs	r7, r0, #16
 801c8b8:	46b1      	mov	r9, r6
 801c8ba:	9e01      	ldr	r6, [sp, #4]
 801c8bc:	fb08 6609 	mla	r6, r8, r9, r6
 801c8c0:	5df6      	ldrb	r6, [r6, r7]
 801c8c2:	9f02      	ldr	r7, [sp, #8]
 801c8c4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c8c8:	0e37      	lsrs	r7, r6, #24
 801c8ca:	2fff      	cmp	r7, #255	; 0xff
 801c8cc:	f000 80f0 	beq.w	801cab0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c8d0:	fa5f f887 	uxtb.w	r8, r7
 801c8d4:	b3d7      	cbz	r7, 801c94c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c8d6:	fa1f f788 	uxth.w	r7, r8
 801c8da:	ea6f 0808 	mvn.w	r8, r8
 801c8de:	fa5f fb86 	uxtb.w	fp, r6
 801c8e2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c8e6:	fa5f f888 	uxtb.w	r8, r8
 801c8ea:	fb1b fb07 	smulbb	fp, fp, r7
 801c8ee:	fb09 b908 	mla	r9, r9, r8, fp
 801c8f2:	fa1f f989 	uxth.w	r9, r9
 801c8f6:	f109 0b01 	add.w	fp, r9, #1
 801c8fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8fe:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c902:	fb1b fb08 	smulbb	fp, fp, r8
 801c906:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c90a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c90e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c912:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c916:	fb09 b907 	mla	r9, r9, r7, fp
 801c91a:	fa1f f989 	uxth.w	r9, r9
 801c91e:	f109 0b01 	add.w	fp, r9, #1
 801c922:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c926:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c92a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c92e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c932:	fb19 f808 	smulbb	r8, r9, r8
 801c936:	fb06 8607 	mla	r6, r6, r7, r8
 801c93a:	b2b6      	uxth	r6, r6
 801c93c:	f106 0801 	add.w	r8, r6, #1
 801c940:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c944:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c948:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c94c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c94e:	4470      	add	r0, lr
 801c950:	3503      	adds	r5, #3
 801c952:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c956:	4432      	add	r2, r6
 801c958:	e7a7      	b.n	801c8aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c95a:	2600      	movs	r6, #0
 801c95c:	1b9d      	subs	r5, r3, r6
 801c95e:	2d00      	cmp	r5, #0
 801c960:	dc3b      	bgt.n	801c9da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c96a:	441c      	add	r4, r3
 801c96c:	2900      	cmp	r1, #0
 801c96e:	f340 80a8 	ble.w	801cac2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c972:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c978:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c97c:	3901      	subs	r1, #1
 801c97e:	eeb0 6a62 	vmov.f32	s12, s5
 801c982:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c986:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c98a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c98e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c992:	eeb0 6a43 	vmov.f32	s12, s6
 801c996:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c99a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c99e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9b6:	ee12 2a90 	vmov	r2, s5
 801c9ba:	eef0 2a47 	vmov.f32	s5, s14
 801c9be:	fb92 fef3 	sdiv	lr, r2, r3
 801c9c2:	ee13 2a10 	vmov	r2, s6
 801c9c6:	eeb0 3a67 	vmov.f32	s6, s15
 801c9ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9ce:	9a03      	ldr	r2, [sp, #12]
 801c9d0:	9312      	str	r3, [sp, #72]	; 0x48
 801c9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9d4:	bf08      	it	eq
 801c9d6:	4613      	moveq	r3, r2
 801c9d8:	e736      	b.n	801c848 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c9da:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c9de:	d457      	bmi.n	801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9e0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801c9e4:	4547      	cmp	r7, r8
 801c9e6:	dd53      	ble.n	801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9e8:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c9ec:	d450      	bmi.n	801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9ee:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c9f2:	454d      	cmp	r5, r9
 801c9f4:	dd4c      	ble.n	801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9f6:	9d01      	ldr	r5, [sp, #4]
 801c9f8:	b23f      	sxth	r7, r7
 801c9fa:	fb09 5707 	mla	r7, r9, r7, r5
 801c9fe:	f817 5008 	ldrb.w	r5, [r7, r8]
 801ca02:	9f02      	ldr	r7, [sp, #8]
 801ca04:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ca08:	0e2f      	lsrs	r7, r5, #24
 801ca0a:	2fff      	cmp	r7, #255	; 0xff
 801ca0c:	d045      	beq.n	801ca9a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ca0e:	fa5f f987 	uxtb.w	r9, r7
 801ca12:	b3ef      	cbz	r7, 801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ca14:	fa1f f889 	uxth.w	r8, r9
 801ca18:	ea6f 0909 	mvn.w	r9, r9
 801ca1c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca20:	fa5f fb85 	uxtb.w	fp, r5
 801ca24:	f814 a007 	ldrb.w	sl, [r4, r7]
 801ca28:	fa5f f989 	uxtb.w	r9, r9
 801ca2c:	fb1b fb08 	smulbb	fp, fp, r8
 801ca30:	fb0a ba09 	mla	sl, sl, r9, fp
 801ca34:	fa1f fa8a 	uxth.w	sl, sl
 801ca38:	f10a 0b01 	add.w	fp, sl, #1
 801ca3c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca44:	f804 a007 	strb.w	sl, [r4, r7]
 801ca48:	4427      	add	r7, r4
 801ca4a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ca4e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801ca52:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ca56:	fb1b fb09 	smulbb	fp, fp, r9
 801ca5a:	fb0a ba08 	mla	sl, sl, r8, fp
 801ca5e:	fa1f fa8a 	uxth.w	sl, sl
 801ca62:	f10a 0b01 	add.w	fp, sl, #1
 801ca66:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca6e:	f887 a001 	strb.w	sl, [r7, #1]
 801ca72:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ca76:	fb1a f909 	smulbb	r9, sl, r9
 801ca7a:	fb05 9508 	mla	r5, r5, r8, r9
 801ca7e:	b2ad      	uxth	r5, r5
 801ca80:	f105 0901 	add.w	r9, r5, #1
 801ca84:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca88:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca8c:	f887 9002 	strb.w	r9, [r7, #2]
 801ca90:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca92:	4470      	add	r0, lr
 801ca94:	3601      	adds	r6, #1
 801ca96:	442a      	add	r2, r5
 801ca98:	e760      	b.n	801c95c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ca9a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca9e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801caa2:	55e5      	strb	r5, [r4, r7]
 801caa4:	4427      	add	r7, r4
 801caa6:	0c2d      	lsrs	r5, r5, #16
 801caa8:	f887 8001 	strb.w	r8, [r7, #1]
 801caac:	70bd      	strb	r5, [r7, #2]
 801caae:	e7ef      	b.n	801ca90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cab0:	0a37      	lsrs	r7, r6, #8
 801cab2:	f805 6c03 	strb.w	r6, [r5, #-3]
 801cab6:	0c36      	lsrs	r6, r6, #16
 801cab8:	f805 7c02 	strb.w	r7, [r5, #-2]
 801cabc:	f805 6c01 	strb.w	r6, [r5, #-1]
 801cac0:	e744      	b.n	801c94c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801cac2:	b005      	add	sp, #20
 801cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cac8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cacc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cace:	9201      	str	r2, [sp, #4]
 801cad0:	6870      	ldr	r0, [r6, #4]
 801cad2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801cad6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801cada:	fa1f fe85 	uxth.w	lr, r5
 801cade:	43ed      	mvns	r5, r5
 801cae0:	f8dc 8000 	ldr.w	r8, [ip]
 801cae4:	b2ed      	uxtb	r5, r5
 801cae6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801caea:	fb00 2404 	mla	r4, r0, r4, r2
 801caee:	6832      	ldr	r2, [r6, #0]
 801caf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801caf4:	4414      	add	r4, r2
 801caf6:	2900      	cmp	r1, #0
 801caf8:	dc03      	bgt.n	801cb02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cafa:	9a01      	ldr	r2, [sp, #4]
 801cafc:	2a00      	cmp	r2, #0
 801cafe:	f340 810d 	ble.w	801cd1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cb02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb04:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801cb08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cb0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb0e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cb12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	dd0e      	ble.n	801cb38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cb1a:	1406      	asrs	r6, r0, #16
 801cb1c:	d405      	bmi.n	801cb2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cb1e:	4556      	cmp	r6, sl
 801cb20:	da03      	bge.n	801cb2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cb22:	1416      	asrs	r6, r2, #16
 801cb24:	d401      	bmi.n	801cb2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cb26:	454e      	cmp	r6, r9
 801cb28:	db07      	blt.n	801cb3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cb2a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cb2c:	3b01      	subs	r3, #1
 801cb2e:	3403      	adds	r4, #3
 801cb30:	4430      	add	r0, r6
 801cb32:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cb34:	4432      	add	r2, r6
 801cb36:	e7ee      	b.n	801cb16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cb38:	d060      	beq.n	801cbfc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cb3a:	1e5e      	subs	r6, r3, #1
 801cb3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb3e:	fb07 0706 	mla	r7, r7, r6, r0
 801cb42:	143f      	asrs	r7, r7, #16
 801cb44:	d451      	bmi.n	801cbea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cb46:	4557      	cmp	r7, sl
 801cb48:	da4f      	bge.n	801cbea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cb4a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb4c:	fb07 2606 	mla	r6, r7, r6, r2
 801cb50:	1436      	asrs	r6, r6, #16
 801cb52:	d44a      	bmi.n	801cbea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cb54:	454e      	cmp	r6, r9
 801cb56:	da48      	bge.n	801cbea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cb58:	1ce6      	adds	r6, r4, #3
 801cb5a:	4699      	mov	r9, r3
 801cb5c:	f1b9 0f00 	cmp.w	r9, #0
 801cb60:	f106 0603 	add.w	r6, r6, #3
 801cb64:	dd45      	ble.n	801cbf2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801cb66:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cb6a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb6e:	1417      	asrs	r7, r2, #16
 801cb70:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb74:	fb0b a707 	mla	r7, fp, r7, sl
 801cb78:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb7c:	fb1b fb05 	smulbb	fp, fp, r5
 801cb80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb84:	eb08 0a07 	add.w	sl, r8, r7
 801cb88:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb8c:	fb07 b70e 	mla	r7, r7, lr, fp
 801cb90:	b2bf      	uxth	r7, r7
 801cb92:	f107 0b01 	add.w	fp, r7, #1
 801cb96:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb9a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb9e:	fb1b fb05 	smulbb	fp, fp, r5
 801cba2:	123f      	asrs	r7, r7, #8
 801cba4:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cba8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cbac:	fb07 b70e 	mla	r7, r7, lr, fp
 801cbb0:	b2bf      	uxth	r7, r7
 801cbb2:	f107 0b01 	add.w	fp, r7, #1
 801cbb6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cbba:	123f      	asrs	r7, r7, #8
 801cbbc:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cbc0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cbc4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cbc8:	fb1a fa05 	smulbb	sl, sl, r5
 801cbcc:	fb07 a70e 	mla	r7, r7, lr, sl
 801cbd0:	b2bf      	uxth	r7, r7
 801cbd2:	f107 0a01 	add.w	sl, r7, #1
 801cbd6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cbda:	123f      	asrs	r7, r7, #8
 801cbdc:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cbe0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbe2:	4438      	add	r0, r7
 801cbe4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cbe6:	443a      	add	r2, r7
 801cbe8:	e7b8      	b.n	801cb5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cbea:	2700      	movs	r7, #0
 801cbec:	1bde      	subs	r6, r3, r7
 801cbee:	2e00      	cmp	r6, #0
 801cbf0:	dc3f      	bgt.n	801cc72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cbf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbfa:	441c      	add	r4, r3
 801cbfc:	2900      	cmp	r1, #0
 801cbfe:	f340 808d 	ble.w	801cd1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc0c:	3901      	subs	r1, #1
 801cc0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc12:	eef0 6a62 	vmov.f32	s13, s5
 801cc16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cc1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc22:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cc26:	eef0 6a43 	vmov.f32	s13, s6
 801cc2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc2e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cc32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc4a:	ee12 2a90 	vmov	r2, s5
 801cc4e:	eef0 2a47 	vmov.f32	s5, s14
 801cc52:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc56:	ee13 2a10 	vmov	r2, s6
 801cc5a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc5e:	eeb0 3a67 	vmov.f32	s6, s15
 801cc62:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc66:	9a01      	ldr	r2, [sp, #4]
 801cc68:	9310      	str	r3, [sp, #64]	; 0x40
 801cc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc6c:	bf08      	it	eq
 801cc6e:	4613      	moveq	r3, r2
 801cc70:	e741      	b.n	801caf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cc72:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cc76:	d44b      	bmi.n	801cd10 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc78:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cc7c:	45cb      	cmp	fp, r9
 801cc7e:	dd47      	ble.n	801cd10 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc80:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cc84:	d444      	bmi.n	801cd10 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc86:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cc8a:	4556      	cmp	r6, sl
 801cc8c:	dd40      	ble.n	801cd10 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc8e:	fa0f f68b 	sxth.w	r6, fp
 801cc92:	fb0a 9906 	mla	r9, sl, r6, r9
 801cc96:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc9a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc9e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cca2:	fb1b fb05 	smulbb	fp, fp, r5
 801cca6:	eb08 0a09 	add.w	sl, r8, r9
 801ccaa:	f818 9009 	ldrb.w	r9, [r8, r9]
 801ccae:	fb09 b90e 	mla	r9, r9, lr, fp
 801ccb2:	fa1f f989 	uxth.w	r9, r9
 801ccb6:	f109 0b01 	add.w	fp, r9, #1
 801ccba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ccbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccc2:	f804 9006 	strb.w	r9, [r4, r6]
 801ccc6:	4426      	add	r6, r4
 801ccc8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cccc:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ccd0:	fb1b fb05 	smulbb	fp, fp, r5
 801ccd4:	fb09 b90e 	mla	r9, r9, lr, fp
 801ccd8:	fa1f f989 	uxth.w	r9, r9
 801ccdc:	f109 0b01 	add.w	fp, r9, #1
 801cce0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cce4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cce8:	f886 9001 	strb.w	r9, [r6, #1]
 801ccec:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ccf0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ccf4:	fb1a fa05 	smulbb	sl, sl, r5
 801ccf8:	fb09 a90e 	mla	r9, r9, lr, sl
 801ccfc:	fa1f f989 	uxth.w	r9, r9
 801cd00:	f109 0a01 	add.w	sl, r9, #1
 801cd04:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cd08:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd0c:	f886 9002 	strb.w	r9, [r6, #2]
 801cd10:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cd12:	3701      	adds	r7, #1
 801cd14:	4430      	add	r0, r6
 801cd16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cd18:	4432      	add	r2, r6
 801cd1a:	e767      	b.n	801cbec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801cd1c:	b003      	add	sp, #12
 801cd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd26:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cd28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd2c:	9201      	str	r2, [sp, #4]
 801cd2e:	6868      	ldr	r0, [r5, #4]
 801cd30:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801cd32:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cd36:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801cd3a:	fb00 2404 	mla	r4, r0, r4, r2
 801cd3e:	682a      	ldr	r2, [r5, #0]
 801cd40:	f8d7 8000 	ldr.w	r8, [r7]
 801cd44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd48:	4414      	add	r4, r2
 801cd4a:	2900      	cmp	r1, #0
 801cd4c:	dc03      	bgt.n	801cd56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cd4e:	9a01      	ldr	r2, [sp, #4]
 801cd50:	2a00      	cmp	r2, #0
 801cd52:	f340 80af 	ble.w	801ceb4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cd56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd58:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801cd5c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd62:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801cd66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	dd0c      	ble.n	801cd88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cd6e:	1405      	asrs	r5, r0, #16
 801cd70:	d405      	bmi.n	801cd7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd72:	4555      	cmp	r5, sl
 801cd74:	da03      	bge.n	801cd7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd76:	1415      	asrs	r5, r2, #16
 801cd78:	d401      	bmi.n	801cd7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd7a:	454d      	cmp	r5, r9
 801cd7c:	db05      	blt.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd7e:	4470      	add	r0, lr
 801cd80:	4462      	add	r2, ip
 801cd82:	3b01      	subs	r3, #1
 801cd84:	3403      	adds	r4, #3
 801cd86:	e7f0      	b.n	801cd6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cd88:	d038      	beq.n	801cdfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cd8a:	1e5d      	subs	r5, r3, #1
 801cd8c:	fb0e 0605 	mla	r6, lr, r5, r0
 801cd90:	1436      	asrs	r6, r6, #16
 801cd92:	d42a      	bmi.n	801cdea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd94:	4556      	cmp	r6, sl
 801cd96:	da28      	bge.n	801cdea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd98:	fb0c 2505 	mla	r5, ip, r5, r2
 801cd9c:	142d      	asrs	r5, r5, #16
 801cd9e:	d424      	bmi.n	801cdea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cda0:	454d      	cmp	r5, r9
 801cda2:	da22      	bge.n	801cdea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cda4:	1ce6      	adds	r6, r4, #3
 801cda6:	4699      	mov	r9, r3
 801cda8:	f1b9 0f00 	cmp.w	r9, #0
 801cdac:	f106 0603 	add.w	r6, r6, #3
 801cdb0:	dd1f      	ble.n	801cdf2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801cdb2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801cdb6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cdba:	1415      	asrs	r5, r2, #16
 801cdbc:	4470      	add	r0, lr
 801cdbe:	4462      	add	r2, ip
 801cdc0:	f109 39ff 	add.w	r9, r9, #4294967295
 801cdc4:	fb0b a505 	mla	r5, fp, r5, sl
 801cdc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cdcc:	eb08 0a05 	add.w	sl, r8, r5
 801cdd0:	f818 5005 	ldrb.w	r5, [r8, r5]
 801cdd4:	f806 5c06 	strb.w	r5, [r6, #-6]
 801cdd8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cddc:	f806 5c05 	strb.w	r5, [r6, #-5]
 801cde0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cde4:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cde8:	e7de      	b.n	801cda8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cdea:	2600      	movs	r6, #0
 801cdec:	1b9d      	subs	r5, r3, r6
 801cdee:	2d00      	cmp	r5, #0
 801cdf0:	dc38      	bgt.n	801ce64 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cdf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cdfa:	441c      	add	r4, r3
 801cdfc:	2900      	cmp	r1, #0
 801cdfe:	dd59      	ble.n	801ceb4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ce00:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce0a:	3901      	subs	r1, #1
 801ce0c:	eeb0 6a62 	vmov.f32	s12, s5
 801ce10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce14:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce1c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ce20:	eeb0 6a43 	vmov.f32	s12, s6
 801ce24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce28:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ce2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce44:	ee12 2a90 	vmov	r2, s5
 801ce48:	eef0 2a47 	vmov.f32	s5, s14
 801ce4c:	fb92 fef3 	sdiv	lr, r2, r3
 801ce50:	ee13 2a10 	vmov	r2, s6
 801ce54:	eeb0 3a67 	vmov.f32	s6, s15
 801ce58:	fb92 fcf3 	sdiv	ip, r2, r3
 801ce5c:	9a01      	ldr	r2, [sp, #4]
 801ce5e:	bf08      	it	eq
 801ce60:	4613      	moveq	r3, r2
 801ce62:	e772      	b.n	801cd4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ce64:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ce68:	d420      	bmi.n	801ceac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce6a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ce6e:	45cb      	cmp	fp, r9
 801ce70:	dd1c      	ble.n	801ceac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce72:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ce76:	d419      	bmi.n	801ceac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce78:	68fd      	ldr	r5, [r7, #12]
 801ce7a:	4555      	cmp	r5, sl
 801ce7c:	dd16      	ble.n	801ceac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce7e:	fa0f f58b 	sxth.w	r5, fp
 801ce82:	fb0a 9505 	mla	r5, sl, r5, r9
 801ce86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce8a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ce8e:	eb08 0b05 	add.w	fp, r8, r5
 801ce92:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ce96:	f804 9005 	strb.w	r9, [r4, r5]
 801ce9a:	4425      	add	r5, r4
 801ce9c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801cea0:	f885 9001 	strb.w	r9, [r5, #1]
 801cea4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801cea8:	f885 9002 	strb.w	r9, [r5, #2]
 801ceac:	4470      	add	r0, lr
 801ceae:	4462      	add	r2, ip
 801ceb0:	3601      	adds	r6, #1
 801ceb2:	e79b      	b.n	801cdec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ceb4:	b003      	add	sp, #12
 801ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ceba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ceba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cebe:	b085      	sub	sp, #20
 801cec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cec4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cec6:	9202      	str	r2, [sp, #8]
 801cec8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cecc:	6860      	ldr	r0, [r4, #4]
 801cece:	9203      	str	r2, [sp, #12]
 801ced0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ced4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ced8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cedc:	fb00 2505 	mla	r5, r0, r5, r2
 801cee0:	6822      	ldr	r2, [r4, #0]
 801cee2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cee6:	4415      	add	r5, r2
 801cee8:	f8dc 2000 	ldr.w	r2, [ip]
 801ceec:	9201      	str	r2, [sp, #4]
 801ceee:	2900      	cmp	r1, #0
 801cef0:	dc03      	bgt.n	801cefa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cef2:	9a02      	ldr	r2, [sp, #8]
 801cef4:	2a00      	cmp	r2, #0
 801cef6:	f340 8122 	ble.w	801d13e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cefa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cefc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cf00:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cf04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf06:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cf0a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	dd0d      	ble.n	801cf2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cf12:	1422      	asrs	r2, r4, #16
 801cf14:	d405      	bmi.n	801cf22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cf16:	4542      	cmp	r2, r8
 801cf18:	da03      	bge.n	801cf22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cf1a:	1402      	asrs	r2, r0, #16
 801cf1c:	d401      	bmi.n	801cf22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cf1e:	42ba      	cmp	r2, r7
 801cf20:	db06      	blt.n	801cf30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf24:	4474      	add	r4, lr
 801cf26:	3b01      	subs	r3, #1
 801cf28:	3503      	adds	r5, #3
 801cf2a:	4410      	add	r0, r2
 801cf2c:	e7ef      	b.n	801cf0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cf2e:	d072      	beq.n	801d016 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cf30:	1e5a      	subs	r2, r3, #1
 801cf32:	fb0e 4602 	mla	r6, lr, r2, r4
 801cf36:	1436      	asrs	r6, r6, #16
 801cf38:	d462      	bmi.n	801d000 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cf3a:	4546      	cmp	r6, r8
 801cf3c:	da60      	bge.n	801d000 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cf3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cf40:	fb06 0202 	mla	r2, r6, r2, r0
 801cf44:	1412      	asrs	r2, r2, #16
 801cf46:	d45b      	bmi.n	801d000 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cf48:	42ba      	cmp	r2, r7
 801cf4a:	da59      	bge.n	801d000 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cf4c:	1cef      	adds	r7, r5, #3
 801cf4e:	4699      	mov	r9, r3
 801cf50:	f1b9 0f00 	cmp.w	r9, #0
 801cf54:	dd5a      	ble.n	801d00c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cf56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cf5a:	1426      	asrs	r6, r4, #16
 801cf5c:	1402      	asrs	r2, r0, #16
 801cf5e:	fb08 6202 	mla	r2, r8, r2, r6
 801cf62:	9e01      	ldr	r6, [sp, #4]
 801cf64:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cf68:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cf6c:	d041      	beq.n	801cff2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cf6e:	9a03      	ldr	r2, [sp, #12]
 801cf70:	fa5f fb86 	uxtb.w	fp, r6
 801cf74:	fb02 f808 	mul.w	r8, r2, r8
 801cf78:	f108 0201 	add.w	r2, r8, #1
 801cf7c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cf80:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cf84:	1212      	asrs	r2, r2, #8
 801cf86:	fa1f fa82 	uxth.w	sl, r2
 801cf8a:	43d2      	mvns	r2, r2
 801cf8c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf90:	b2d2      	uxtb	r2, r2
 801cf92:	fb08 b802 	mla	r8, r8, r2, fp
 801cf96:	fa1f f888 	uxth.w	r8, r8
 801cf9a:	f108 0b01 	add.w	fp, r8, #1
 801cf9e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cfa2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cfa6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cfaa:	fb1b fb0a 	smulbb	fp, fp, sl
 801cfae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cfb2:	fb16 fa0a 	smulbb	sl, r6, sl
 801cfb6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cfba:	f807 8c03 	strb.w	r8, [r7, #-3]
 801cfbe:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801cfc2:	fb06 aa02 	mla	sl, r6, r2, sl
 801cfc6:	fb08 b802 	mla	r8, r8, r2, fp
 801cfca:	fa1f fa8a 	uxth.w	sl, sl
 801cfce:	fa1f f888 	uxth.w	r8, r8
 801cfd2:	f10a 0601 	add.w	r6, sl, #1
 801cfd6:	f108 0b01 	add.w	fp, r8, #1
 801cfda:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cfde:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cfe2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfe6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cfea:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cfee:	f807 8c02 	strb.w	r8, [r7, #-2]
 801cff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cff4:	4474      	add	r4, lr
 801cff6:	3703      	adds	r7, #3
 801cff8:	f109 39ff 	add.w	r9, r9, #4294967295
 801cffc:	4410      	add	r0, r2
 801cffe:	e7a7      	b.n	801cf50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d000:	f04f 0800 	mov.w	r8, #0
 801d004:	eba3 0208 	sub.w	r2, r3, r8
 801d008:	2a00      	cmp	r2, #0
 801d00a:	dc3b      	bgt.n	801d084 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d00c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d010:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d014:	441d      	add	r5, r3
 801d016:	2900      	cmp	r1, #0
 801d018:	f340 8091 	ble.w	801d13e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d01c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d022:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d026:	3901      	subs	r1, #1
 801d028:	eeb0 6a62 	vmov.f32	s12, s5
 801d02c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d030:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d034:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d038:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d03c:	eeb0 6a43 	vmov.f32	s12, s6
 801d040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d044:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d04c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d050:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d054:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d058:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d05c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d060:	ee12 2a90 	vmov	r2, s5
 801d064:	eef0 2a47 	vmov.f32	s5, s14
 801d068:	fb92 fef3 	sdiv	lr, r2, r3
 801d06c:	ee13 2a10 	vmov	r2, s6
 801d070:	eeb0 3a67 	vmov.f32	s6, s15
 801d074:	fb92 f3f3 	sdiv	r3, r2, r3
 801d078:	9a02      	ldr	r2, [sp, #8]
 801d07a:	9312      	str	r3, [sp, #72]	; 0x48
 801d07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d07e:	bf08      	it	eq
 801d080:	4613      	moveq	r3, r2
 801d082:	e734      	b.n	801ceee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d084:	1427      	asrs	r7, r4, #16
 801d086:	d454      	bmi.n	801d132 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d088:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d08c:	42be      	cmp	r6, r7
 801d08e:	dd50      	ble.n	801d132 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d090:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d094:	d44d      	bmi.n	801d132 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d096:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d09a:	454a      	cmp	r2, r9
 801d09c:	dd49      	ble.n	801d132 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d09e:	b236      	sxth	r6, r6
 801d0a0:	9a01      	ldr	r2, [sp, #4]
 801d0a2:	fb09 7606 	mla	r6, r9, r6, r7
 801d0a6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d0aa:	0e3a      	lsrs	r2, r7, #24
 801d0ac:	d041      	beq.n	801d132 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d0ae:	9e03      	ldr	r6, [sp, #12]
 801d0b0:	fa5f fb87 	uxtb.w	fp, r7
 801d0b4:	4372      	muls	r2, r6
 801d0b6:	1c56      	adds	r6, r2, #1
 801d0b8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d0bc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d0c0:	1212      	asrs	r2, r2, #8
 801d0c2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d0c6:	fa1f fa82 	uxth.w	sl, r2
 801d0ca:	43d2      	mvns	r2, r2
 801d0cc:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0d0:	b2d2      	uxtb	r2, r2
 801d0d2:	fb09 b902 	mla	r9, r9, r2, fp
 801d0d6:	fa1f f989 	uxth.w	r9, r9
 801d0da:	f109 0b01 	add.w	fp, r9, #1
 801d0de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0e2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d0e6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d0ea:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0f2:	fb17 fa0a 	smulbb	sl, r7, sl
 801d0f6:	f805 9006 	strb.w	r9, [r5, r6]
 801d0fa:	442e      	add	r6, r5
 801d0fc:	78b7      	ldrb	r7, [r6, #2]
 801d0fe:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d102:	fb07 aa02 	mla	sl, r7, r2, sl
 801d106:	fb09 b902 	mla	r9, r9, r2, fp
 801d10a:	fa1f fa8a 	uxth.w	sl, sl
 801d10e:	fa1f f989 	uxth.w	r9, r9
 801d112:	f10a 0701 	add.w	r7, sl, #1
 801d116:	f109 0b01 	add.w	fp, r9, #1
 801d11a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d11e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d122:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d126:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d12a:	f886 a002 	strb.w	sl, [r6, #2]
 801d12e:	f886 9001 	strb.w	r9, [r6, #1]
 801d132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d134:	4474      	add	r4, lr
 801d136:	f108 0801 	add.w	r8, r8, #1
 801d13a:	4410      	add	r0, r2
 801d13c:	e762      	b.n	801d004 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d13e:	b005      	add	sp, #20
 801d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d144 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d148:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d14a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d14e:	9201      	str	r2, [sp, #4]
 801d150:	6860      	ldr	r0, [r4, #4]
 801d152:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d156:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d15a:	fb00 2505 	mla	r5, r0, r5, r2
 801d15e:	6822      	ldr	r2, [r4, #0]
 801d160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d164:	4415      	add	r5, r2
 801d166:	f8dc 2000 	ldr.w	r2, [ip]
 801d16a:	9200      	str	r2, [sp, #0]
 801d16c:	2900      	cmp	r1, #0
 801d16e:	dc03      	bgt.n	801d178 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d170:	9a01      	ldr	r2, [sp, #4]
 801d172:	2a00      	cmp	r2, #0
 801d174:	f340 812b 	ble.w	801d3ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d17a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d17e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d184:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d188:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	dd0e      	ble.n	801d1ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d190:	1422      	asrs	r2, r4, #16
 801d192:	d405      	bmi.n	801d1a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d194:	4572      	cmp	r2, lr
 801d196:	da03      	bge.n	801d1a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d198:	1402      	asrs	r2, r0, #16
 801d19a:	d401      	bmi.n	801d1a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d19c:	42ba      	cmp	r2, r7
 801d19e:	db07      	blt.n	801d1b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d1a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d1a2:	3b01      	subs	r3, #1
 801d1a4:	3503      	adds	r5, #3
 801d1a6:	4414      	add	r4, r2
 801d1a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d1aa:	4410      	add	r0, r2
 801d1ac:	e7ee      	b.n	801d18c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d1ae:	d06f      	beq.n	801d290 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d1b0:	1e5a      	subs	r2, r3, #1
 801d1b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d1b4:	fb06 4602 	mla	r6, r6, r2, r4
 801d1b8:	1436      	asrs	r6, r6, #16
 801d1ba:	d45e      	bmi.n	801d27a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d1bc:	4576      	cmp	r6, lr
 801d1be:	da5c      	bge.n	801d27a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d1c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d1c2:	fb06 0202 	mla	r2, r6, r2, r0
 801d1c6:	1412      	asrs	r2, r2, #16
 801d1c8:	d457      	bmi.n	801d27a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d1ca:	42ba      	cmp	r2, r7
 801d1cc:	da55      	bge.n	801d27a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d1ce:	1cee      	adds	r6, r5, #3
 801d1d0:	469a      	mov	sl, r3
 801d1d2:	f1ba 0f00 	cmp.w	sl, #0
 801d1d6:	dd56      	ble.n	801d286 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d1d8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d1dc:	1427      	asrs	r7, r4, #16
 801d1de:	1402      	asrs	r2, r0, #16
 801d1e0:	fb0e 7202 	mla	r2, lr, r2, r7
 801d1e4:	9f00      	ldr	r7, [sp, #0]
 801d1e6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d1ea:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d1ee:	d03c      	beq.n	801d26a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d1f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d1f4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d1f8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d1fc:	fa5f f28e 	uxtb.w	r2, lr
 801d200:	b2ff      	uxtb	r7, r7
 801d202:	f000 80dd 	beq.w	801d3c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d206:	fa1f f882 	uxth.w	r8, r2
 801d20a:	43d2      	mvns	r2, r2
 801d20c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d210:	fb17 f708 	smulbb	r7, r7, r8
 801d214:	b2d2      	uxtb	r2, r2
 801d216:	fb19 f908 	smulbb	r9, r9, r8
 801d21a:	fb0e 7702 	mla	r7, lr, r2, r7
 801d21e:	fb1b f808 	smulbb	r8, fp, r8
 801d222:	b2bf      	uxth	r7, r7
 801d224:	f107 0e01 	add.w	lr, r7, #1
 801d228:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d22c:	123f      	asrs	r7, r7, #8
 801d22e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d232:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d236:	fb07 9902 	mla	r9, r7, r2, r9
 801d23a:	fa1f f989 	uxth.w	r9, r9
 801d23e:	f109 0701 	add.w	r7, r9, #1
 801d242:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d246:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d24a:	fb07 8802 	mla	r8, r7, r2, r8
 801d24e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d252:	fa1f f888 	uxth.w	r8, r8
 801d256:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d25a:	f108 0201 	add.w	r2, r8, #1
 801d25e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d262:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d266:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d26a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d26c:	3603      	adds	r6, #3
 801d26e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d272:	4414      	add	r4, r2
 801d274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d276:	4410      	add	r0, r2
 801d278:	e7ab      	b.n	801d1d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d27a:	f04f 0e00 	mov.w	lr, #0
 801d27e:	eba3 020e 	sub.w	r2, r3, lr
 801d282:	2a00      	cmp	r2, #0
 801d284:	dc3d      	bgt.n	801d302 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d28a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d28e:	441d      	add	r5, r3
 801d290:	2900      	cmp	r1, #0
 801d292:	f340 809c 	ble.w	801d3ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d296:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d29c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2a0:	3901      	subs	r1, #1
 801d2a2:	eeb0 6a62 	vmov.f32	s12, s5
 801d2a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d2b6:	eeb0 6a43 	vmov.f32	s12, s6
 801d2ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2be:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d2c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2da:	ee12 2a90 	vmov	r2, s5
 801d2de:	eef0 2a47 	vmov.f32	s5, s14
 801d2e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2e6:	ee13 2a10 	vmov	r2, s6
 801d2ea:	930f      	str	r3, [sp, #60]	; 0x3c
 801d2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2ee:	eeb0 3a67 	vmov.f32	s6, s15
 801d2f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2f6:	9a01      	ldr	r2, [sp, #4]
 801d2f8:	9310      	str	r3, [sp, #64]	; 0x40
 801d2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2fc:	bf08      	it	eq
 801d2fe:	4613      	moveq	r3, r2
 801d300:	e734      	b.n	801d16c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d302:	1427      	asrs	r7, r4, #16
 801d304:	d44d      	bmi.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d306:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d30a:	42be      	cmp	r6, r7
 801d30c:	dd49      	ble.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d30e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d312:	d446      	bmi.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d314:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d318:	4542      	cmp	r2, r8
 801d31a:	dd42      	ble.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d31c:	b236      	sxth	r6, r6
 801d31e:	9a00      	ldr	r2, [sp, #0]
 801d320:	fb08 7606 	mla	r6, r8, r6, r7
 801d324:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d328:	0e3a      	lsrs	r2, r7, #24
 801d32a:	d03a      	beq.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d32c:	2aff      	cmp	r2, #255	; 0xff
 801d32e:	b2d6      	uxtb	r6, r2
 801d330:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d334:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d338:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d33c:	b2ff      	uxtb	r7, r7
 801d33e:	d037      	beq.n	801d3b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d340:	fa1f f986 	uxth.w	r9, r6
 801d344:	4472      	add	r2, lr
 801d346:	43f6      	mvns	r6, r6
 801d348:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d34c:	fb17 f709 	smulbb	r7, r7, r9
 801d350:	fb1a fa09 	smulbb	sl, sl, r9
 801d354:	b2f6      	uxtb	r6, r6
 801d356:	fb1b f909 	smulbb	r9, fp, r9
 801d35a:	fb08 7706 	mla	r7, r8, r6, r7
 801d35e:	b2bf      	uxth	r7, r7
 801d360:	f107 0801 	add.w	r8, r7, #1
 801d364:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d368:	123f      	asrs	r7, r7, #8
 801d36a:	54af      	strb	r7, [r5, r2]
 801d36c:	442a      	add	r2, r5
 801d36e:	7857      	ldrb	r7, [r2, #1]
 801d370:	fb07 aa06 	mla	sl, r7, r6, sl
 801d374:	fa1f fa8a 	uxth.w	sl, sl
 801d378:	f10a 0701 	add.w	r7, sl, #1
 801d37c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d380:	7897      	ldrb	r7, [r2, #2]
 801d382:	fb07 9906 	mla	r9, r7, r6, r9
 801d386:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d38a:	fa1f f989 	uxth.w	r9, r9
 801d38e:	f882 a001 	strb.w	sl, [r2, #1]
 801d392:	f109 0601 	add.w	r6, r9, #1
 801d396:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d39a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d39e:	f882 9002 	strb.w	r9, [r2, #2]
 801d3a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3a4:	f10e 0e01 	add.w	lr, lr, #1
 801d3a8:	4414      	add	r4, r2
 801d3aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d3ac:	4410      	add	r0, r2
 801d3ae:	e766      	b.n	801d27e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d3b0:	4472      	add	r2, lr
 801d3b2:	54af      	strb	r7, [r5, r2]
 801d3b4:	442a      	add	r2, r5
 801d3b6:	f882 a001 	strb.w	sl, [r2, #1]
 801d3ba:	f882 b002 	strb.w	fp, [r2, #2]
 801d3be:	e7f0      	b.n	801d3a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d3c0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d3c4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d3c8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d3cc:	e74d      	b.n	801d26a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d3ce:	b003      	add	sp, #12
 801d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3d8:	b087      	sub	sp, #28
 801d3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d3de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d3e0:	9204      	str	r2, [sp, #16]
 801d3e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d3e6:	6860      	ldr	r0, [r4, #4]
 801d3e8:	9205      	str	r2, [sp, #20]
 801d3ea:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d3ee:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d3f2:	9101      	str	r1, [sp, #4]
 801d3f4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d3f8:	fb00 2505 	mla	r5, r0, r5, r2
 801d3fc:	6822      	ldr	r2, [r4, #0]
 801d3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d402:	4415      	add	r5, r2
 801d404:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d408:	3201      	adds	r2, #1
 801d40a:	f022 0201 	bic.w	r2, r2, #1
 801d40e:	9202      	str	r2, [sp, #8]
 801d410:	f8dc 2000 	ldr.w	r2, [ip]
 801d414:	9203      	str	r2, [sp, #12]
 801d416:	9a01      	ldr	r2, [sp, #4]
 801d418:	2a00      	cmp	r2, #0
 801d41a:	dc03      	bgt.n	801d424 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d41c:	9a04      	ldr	r2, [sp, #16]
 801d41e:	2a00      	cmp	r2, #0
 801d420:	f340 8135 	ble.w	801d68e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d424:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d426:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d42a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d42e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d430:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d434:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d438:	2b00      	cmp	r3, #0
 801d43a:	dd0d      	ble.n	801d458 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d43c:	1422      	asrs	r2, r4, #16
 801d43e:	d405      	bmi.n	801d44c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d440:	4542      	cmp	r2, r8
 801d442:	da03      	bge.n	801d44c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d444:	1402      	asrs	r2, r0, #16
 801d446:	d401      	bmi.n	801d44c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d448:	42ba      	cmp	r2, r7
 801d44a:	db06      	blt.n	801d45a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d44c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d44e:	4474      	add	r4, lr
 801d450:	3b01      	subs	r3, #1
 801d452:	3503      	adds	r5, #3
 801d454:	4410      	add	r0, r2
 801d456:	e7ef      	b.n	801d438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d458:	d077      	beq.n	801d54a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d45a:	1e5a      	subs	r2, r3, #1
 801d45c:	fb0e 4602 	mla	r6, lr, r2, r4
 801d460:	1436      	asrs	r6, r6, #16
 801d462:	d469      	bmi.n	801d538 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d464:	4546      	cmp	r6, r8
 801d466:	da67      	bge.n	801d538 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d468:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d46a:	fb06 0202 	mla	r2, r6, r2, r0
 801d46e:	1412      	asrs	r2, r2, #16
 801d470:	d462      	bmi.n	801d538 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d472:	42ba      	cmp	r2, r7
 801d474:	da60      	bge.n	801d538 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d476:	1cee      	adds	r6, r5, #3
 801d478:	4699      	mov	r9, r3
 801d47a:	f1b9 0f00 	cmp.w	r9, #0
 801d47e:	dd5f      	ble.n	801d540 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d480:	1422      	asrs	r2, r4, #16
 801d482:	9902      	ldr	r1, [sp, #8]
 801d484:	1407      	asrs	r7, r0, #16
 801d486:	fb01 2707 	mla	r7, r1, r7, r2
 801d48a:	9903      	ldr	r1, [sp, #12]
 801d48c:	087a      	lsrs	r2, r7, #1
 801d48e:	5c8a      	ldrb	r2, [r1, r2]
 801d490:	07f9      	lsls	r1, r7, #31
 801d492:	bf54      	ite	pl
 801d494:	f002 020f 	andpl.w	r2, r2, #15
 801d498:	1112      	asrmi	r2, r2, #4
 801d49a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d49e:	b2d2      	uxtb	r2, r2
 801d4a0:	2a00      	cmp	r2, #0
 801d4a2:	d042      	beq.n	801d52a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d4a4:	497b      	ldr	r1, [pc, #492]	; (801d694 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d4a6:	680f      	ldr	r7, [r1, #0]
 801d4a8:	9905      	ldr	r1, [sp, #20]
 801d4aa:	fa5f fb87 	uxtb.w	fp, r7
 801d4ae:	434a      	muls	r2, r1
 801d4b0:	f102 0801 	add.w	r8, r2, #1
 801d4b4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d4b8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d4bc:	1212      	asrs	r2, r2, #8
 801d4be:	fa1f fa82 	uxth.w	sl, r2
 801d4c2:	43d2      	mvns	r2, r2
 801d4c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4c8:	b2d2      	uxtb	r2, r2
 801d4ca:	fb08 b802 	mla	r8, r8, r2, fp
 801d4ce:	fa1f f888 	uxth.w	r8, r8
 801d4d2:	f108 0b01 	add.w	fp, r8, #1
 801d4d6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d4da:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d4de:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d4e2:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4ea:	fb17 fa0a 	smulbb	sl, r7, sl
 801d4ee:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d4f2:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d4f6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d4fa:	fb07 aa02 	mla	sl, r7, r2, sl
 801d4fe:	fb08 b802 	mla	r8, r8, r2, fp
 801d502:	fa1f fa8a 	uxth.w	sl, sl
 801d506:	fa1f f888 	uxth.w	r8, r8
 801d50a:	f10a 0701 	add.w	r7, sl, #1
 801d50e:	f108 0b01 	add.w	fp, r8, #1
 801d512:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d516:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d51a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d51e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d522:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d526:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d52a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d52c:	4474      	add	r4, lr
 801d52e:	3603      	adds	r6, #3
 801d530:	f109 39ff 	add.w	r9, r9, #4294967295
 801d534:	4410      	add	r0, r2
 801d536:	e7a0      	b.n	801d47a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d538:	2700      	movs	r7, #0
 801d53a:	1bda      	subs	r2, r3, r7
 801d53c:	2a00      	cmp	r2, #0
 801d53e:	dc3e      	bgt.n	801d5be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d540:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d548:	441d      	add	r5, r3
 801d54a:	9b01      	ldr	r3, [sp, #4]
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	f340 809e 	ble.w	801d68e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d552:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d558:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d55c:	eeb0 6a62 	vmov.f32	s12, s5
 801d560:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d564:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d568:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d56c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d570:	eeb0 6a43 	vmov.f32	s12, s6
 801d574:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d578:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d57c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d580:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d584:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d588:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d58c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d590:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d594:	ee12 2a90 	vmov	r2, s5
 801d598:	eef0 2a47 	vmov.f32	s5, s14
 801d59c:	fb92 fef3 	sdiv	lr, r2, r3
 801d5a0:	ee13 2a10 	vmov	r2, s6
 801d5a4:	eeb0 3a67 	vmov.f32	s6, s15
 801d5a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5ac:	9314      	str	r3, [sp, #80]	; 0x50
 801d5ae:	9b01      	ldr	r3, [sp, #4]
 801d5b0:	9a04      	ldr	r2, [sp, #16]
 801d5b2:	3b01      	subs	r3, #1
 801d5b4:	9301      	str	r3, [sp, #4]
 801d5b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5b8:	bf08      	it	eq
 801d5ba:	4613      	moveq	r3, r2
 801d5bc:	e72b      	b.n	801d416 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d5be:	1426      	asrs	r6, r4, #16
 801d5c0:	d460      	bmi.n	801d684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d5c2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d5c6:	42b2      	cmp	r2, r6
 801d5c8:	dd5c      	ble.n	801d684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d5ca:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d5ce:	d459      	bmi.n	801d684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d5d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d5d4:	4542      	cmp	r2, r8
 801d5d6:	dd55      	ble.n	801d684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d5d8:	9a02      	ldr	r2, [sp, #8]
 801d5da:	9903      	ldr	r1, [sp, #12]
 801d5dc:	fb08 6602 	mla	r6, r8, r2, r6
 801d5e0:	0872      	lsrs	r2, r6, #1
 801d5e2:	07f6      	lsls	r6, r6, #31
 801d5e4:	5c8a      	ldrb	r2, [r1, r2]
 801d5e6:	bf54      	ite	pl
 801d5e8:	f002 020f 	andpl.w	r2, r2, #15
 801d5ec:	1112      	asrmi	r2, r2, #4
 801d5ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d5f2:	b2d2      	uxtb	r2, r2
 801d5f4:	2a00      	cmp	r2, #0
 801d5f6:	d045      	beq.n	801d684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d5f8:	4926      	ldr	r1, [pc, #152]	; (801d694 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d5fa:	f8d1 8000 	ldr.w	r8, [r1]
 801d5fe:	9905      	ldr	r1, [sp, #20]
 801d600:	fa5f fb88 	uxtb.w	fp, r8
 801d604:	434a      	muls	r2, r1
 801d606:	1c56      	adds	r6, r2, #1
 801d608:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d60c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d610:	1212      	asrs	r2, r2, #8
 801d612:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d616:	fa1f fa82 	uxth.w	sl, r2
 801d61a:	43d2      	mvns	r2, r2
 801d61c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d620:	b2d2      	uxtb	r2, r2
 801d622:	fb09 b902 	mla	r9, r9, r2, fp
 801d626:	fa1f f989 	uxth.w	r9, r9
 801d62a:	f109 0b01 	add.w	fp, r9, #1
 801d62e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d632:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d636:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d63a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d63e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d642:	fb18 fa0a 	smulbb	sl, r8, sl
 801d646:	f805 9006 	strb.w	r9, [r5, r6]
 801d64a:	442e      	add	r6, r5
 801d64c:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d650:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d654:	fb08 aa02 	mla	sl, r8, r2, sl
 801d658:	fb09 b902 	mla	r9, r9, r2, fp
 801d65c:	fa1f fa8a 	uxth.w	sl, sl
 801d660:	fa1f f989 	uxth.w	r9, r9
 801d664:	f10a 0801 	add.w	r8, sl, #1
 801d668:	f109 0b01 	add.w	fp, r9, #1
 801d66c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d670:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d674:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d678:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d67c:	f886 a002 	strb.w	sl, [r6, #2]
 801d680:	f886 9001 	strb.w	r9, [r6, #1]
 801d684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d686:	4474      	add	r4, lr
 801d688:	3701      	adds	r7, #1
 801d68a:	4410      	add	r0, r2
 801d68c:	e755      	b.n	801d53a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d68e:	b007      	add	sp, #28
 801d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d694:	24006d84 	.word	0x24006d84

0801d698 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d69c:	b085      	sub	sp, #20
 801d69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d6a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d6a4:	9203      	str	r2, [sp, #12]
 801d6a6:	6860      	ldr	r0, [r4, #4]
 801d6a8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d6ac:	9100      	str	r1, [sp, #0]
 801d6ae:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801d6b2:	fb00 2606 	mla	r6, r0, r6, r2
 801d6b6:	6822      	ldr	r2, [r4, #0]
 801d6b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d6bc:	4416      	add	r6, r2
 801d6be:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d6c2:	3201      	adds	r2, #1
 801d6c4:	f022 0201 	bic.w	r2, r2, #1
 801d6c8:	9201      	str	r2, [sp, #4]
 801d6ca:	f8dc 2000 	ldr.w	r2, [ip]
 801d6ce:	9202      	str	r2, [sp, #8]
 801d6d0:	9a00      	ldr	r2, [sp, #0]
 801d6d2:	2a00      	cmp	r2, #0
 801d6d4:	dc03      	bgt.n	801d6de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d6d6:	9a03      	ldr	r2, [sp, #12]
 801d6d8:	2a00      	cmp	r2, #0
 801d6da:	f340 8140 	ble.w	801d95e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d6e0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d6e4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d6e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d6ea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d6ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	dd0e      	ble.n	801d714 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d6f6:	142a      	asrs	r2, r5, #16
 801d6f8:	d405      	bmi.n	801d706 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d6fa:	4572      	cmp	r2, lr
 801d6fc:	da03      	bge.n	801d706 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d6fe:	1422      	asrs	r2, r4, #16
 801d700:	d401      	bmi.n	801d706 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d702:	42ba      	cmp	r2, r7
 801d704:	db07      	blt.n	801d716 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d706:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d708:	3b01      	subs	r3, #1
 801d70a:	3603      	adds	r6, #3
 801d70c:	4415      	add	r5, r2
 801d70e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d710:	4414      	add	r4, r2
 801d712:	e7ee      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d714:	d072      	beq.n	801d7fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d716:	1e5a      	subs	r2, r3, #1
 801d718:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d71a:	fb00 5002 	mla	r0, r0, r2, r5
 801d71e:	1400      	asrs	r0, r0, #16
 801d720:	d463      	bmi.n	801d7ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d722:	4570      	cmp	r0, lr
 801d724:	da61      	bge.n	801d7ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d726:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d728:	fb00 4202 	mla	r2, r0, r2, r4
 801d72c:	1412      	asrs	r2, r2, #16
 801d72e:	d45c      	bmi.n	801d7ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d730:	42ba      	cmp	r2, r7
 801d732:	da5a      	bge.n	801d7ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d734:	1cf0      	adds	r0, r6, #3
 801d736:	469a      	mov	sl, r3
 801d738:	f1ba 0f00 	cmp.w	sl, #0
 801d73c:	dd59      	ble.n	801d7f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d73e:	142a      	asrs	r2, r5, #16
 801d740:	9901      	ldr	r1, [sp, #4]
 801d742:	1427      	asrs	r7, r4, #16
 801d744:	fb01 2707 	mla	r7, r1, r7, r2
 801d748:	9902      	ldr	r1, [sp, #8]
 801d74a:	087a      	lsrs	r2, r7, #1
 801d74c:	5c8a      	ldrb	r2, [r1, r2]
 801d74e:	07f9      	lsls	r1, r7, #31
 801d750:	bf54      	ite	pl
 801d752:	f002 020f 	andpl.w	r2, r2, #15
 801d756:	1112      	asrmi	r2, r2, #4
 801d758:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d75c:	b2d2      	uxtb	r2, r2
 801d75e:	2a00      	cmp	r2, #0
 801d760:	d03b      	beq.n	801d7da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d762:	4980      	ldr	r1, [pc, #512]	; (801d964 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d764:	2aff      	cmp	r2, #255	; 0xff
 801d766:	680f      	ldr	r7, [r1, #0]
 801d768:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d76c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d770:	b2ff      	uxtb	r7, r7
 801d772:	f000 80ed 	beq.w	801d950 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d776:	fa1f f882 	uxth.w	r8, r2
 801d77a:	43d2      	mvns	r2, r2
 801d77c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d780:	fb17 f708 	smulbb	r7, r7, r8
 801d784:	b2d2      	uxtb	r2, r2
 801d786:	fb19 f908 	smulbb	r9, r9, r8
 801d78a:	fb0e 7702 	mla	r7, lr, r2, r7
 801d78e:	fb1b f808 	smulbb	r8, fp, r8
 801d792:	b2bf      	uxth	r7, r7
 801d794:	f107 0e01 	add.w	lr, r7, #1
 801d798:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d79c:	123f      	asrs	r7, r7, #8
 801d79e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d7a2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d7a6:	fb07 9902 	mla	r9, r7, r2, r9
 801d7aa:	fa1f f989 	uxth.w	r9, r9
 801d7ae:	f109 0701 	add.w	r7, r9, #1
 801d7b2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d7b6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d7ba:	fb07 8802 	mla	r8, r7, r2, r8
 801d7be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7c2:	fa1f f888 	uxth.w	r8, r8
 801d7c6:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d7ca:	f108 0201 	add.w	r2, r8, #1
 801d7ce:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d7d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d7d6:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d7da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7dc:	3003      	adds	r0, #3
 801d7de:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7e2:	4415      	add	r5, r2
 801d7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d7e6:	4414      	add	r4, r2
 801d7e8:	e7a6      	b.n	801d738 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d7ea:	2700      	movs	r7, #0
 801d7ec:	1bda      	subs	r2, r3, r7
 801d7ee:	2a00      	cmp	r2, #0
 801d7f0:	dc40      	bgt.n	801d874 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d7f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d7f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7fa:	441e      	add	r6, r3
 801d7fc:	9b00      	ldr	r3, [sp, #0]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	f340 80ad 	ble.w	801d95e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d804:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d80a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d80e:	eeb0 6a62 	vmov.f32	s12, s5
 801d812:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d816:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d81a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d81e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d822:	eeb0 6a43 	vmov.f32	s12, s6
 801d826:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d82a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d82e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d832:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d836:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d83a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d83e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d842:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d846:	ee12 2a90 	vmov	r2, s5
 801d84a:	eef0 2a47 	vmov.f32	s5, s14
 801d84e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d852:	ee13 2a10 	vmov	r2, s6
 801d856:	9311      	str	r3, [sp, #68]	; 0x44
 801d858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d85a:	eeb0 3a67 	vmov.f32	s6, s15
 801d85e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d862:	9312      	str	r3, [sp, #72]	; 0x48
 801d864:	9b00      	ldr	r3, [sp, #0]
 801d866:	9a03      	ldr	r2, [sp, #12]
 801d868:	3b01      	subs	r3, #1
 801d86a:	9300      	str	r3, [sp, #0]
 801d86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d86e:	bf08      	it	eq
 801d870:	4613      	moveq	r3, r2
 801d872:	e72d      	b.n	801d6d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d874:	1428      	asrs	r0, r5, #16
 801d876:	d45c      	bmi.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d878:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d87c:	4282      	cmp	r2, r0
 801d87e:	dd58      	ble.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d880:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d884:	d455      	bmi.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d886:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d88a:	4572      	cmp	r2, lr
 801d88c:	dd51      	ble.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d88e:	9a01      	ldr	r2, [sp, #4]
 801d890:	9902      	ldr	r1, [sp, #8]
 801d892:	fb0e 0002 	mla	r0, lr, r2, r0
 801d896:	0842      	lsrs	r2, r0, #1
 801d898:	07c0      	lsls	r0, r0, #31
 801d89a:	5c8a      	ldrb	r2, [r1, r2]
 801d89c:	bf54      	ite	pl
 801d89e:	f002 020f 	andpl.w	r2, r2, #15
 801d8a2:	1112      	asrmi	r2, r2, #4
 801d8a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d8a8:	b2d2      	uxtb	r2, r2
 801d8aa:	2a00      	cmp	r2, #0
 801d8ac:	d041      	beq.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d8ae:	492d      	ldr	r1, [pc, #180]	; (801d964 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d8b0:	2aff      	cmp	r2, #255	; 0xff
 801d8b2:	6808      	ldr	r0, [r1, #0]
 801d8b4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d8b8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d8bc:	fa5f fe80 	uxtb.w	lr, r0
 801d8c0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d8c4:	d03b      	beq.n	801d93e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d8c6:	fa1f f982 	uxth.w	r9, r2
 801d8ca:	4438      	add	r0, r7
 801d8cc:	43d2      	mvns	r2, r2
 801d8ce:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d8d2:	fb1e fe09 	smulbb	lr, lr, r9
 801d8d6:	fb1a fa09 	smulbb	sl, sl, r9
 801d8da:	b2d2      	uxtb	r2, r2
 801d8dc:	fb1b f909 	smulbb	r9, fp, r9
 801d8e0:	fb08 ee02 	mla	lr, r8, r2, lr
 801d8e4:	fa1f fe8e 	uxth.w	lr, lr
 801d8e8:	f10e 0801 	add.w	r8, lr, #1
 801d8ec:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d8f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d8f4:	f806 e000 	strb.w	lr, [r6, r0]
 801d8f8:	4430      	add	r0, r6
 801d8fa:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d8fe:	fb0e aa02 	mla	sl, lr, r2, sl
 801d902:	fa1f fa8a 	uxth.w	sl, sl
 801d906:	f10a 0e01 	add.w	lr, sl, #1
 801d90a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d90e:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d912:	fb0e 9902 	mla	r9, lr, r2, r9
 801d916:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d91a:	fa1f f989 	uxth.w	r9, r9
 801d91e:	f880 a001 	strb.w	sl, [r0, #1]
 801d922:	f109 0201 	add.w	r2, r9, #1
 801d926:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d92a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d92e:	f880 9002 	strb.w	r9, [r0, #2]
 801d932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d934:	3701      	adds	r7, #1
 801d936:	4415      	add	r5, r2
 801d938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d93a:	4414      	add	r4, r2
 801d93c:	e756      	b.n	801d7ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d93e:	4438      	add	r0, r7
 801d940:	f806 e000 	strb.w	lr, [r6, r0]
 801d944:	4430      	add	r0, r6
 801d946:	f880 a001 	strb.w	sl, [r0, #1]
 801d94a:	f880 b002 	strb.w	fp, [r0, #2]
 801d94e:	e7f0      	b.n	801d932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d950:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d954:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d958:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d95c:	e73d      	b.n	801d7da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d95e:	b005      	add	sp, #20
 801d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d964:	24006d84 	.word	0x24006d84

0801d968 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801d968:	4770      	bx	lr

0801d96a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801d96a:	4770      	bx	lr

0801d96c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801d96c:	4770      	bx	lr

0801d96e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d96e:	4770      	bx	lr

0801d970 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d970:	4770      	bx	lr

0801d972 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d972:	4770      	bx	lr

0801d974 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d974:	4770      	bx	lr

0801d976 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d976:	4770      	bx	lr

0801d978 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d978:	4770      	bx	lr

0801d97a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d97a:	4770      	bx	lr

0801d97c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d97c:	4770      	bx	lr

0801d97e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d97e:	4770      	bx	lr

0801d980 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d980:	4770      	bx	lr

0801d982 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d982:	4770      	bx	lr

0801d984 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d984:	4770      	bx	lr

0801d986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d986:	4770      	bx	lr

0801d988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d988:	4770      	bx	lr

0801d98a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d98a:	4770      	bx	lr

0801d98c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d98c:	4770      	bx	lr

0801d98e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d98e:	4770      	bx	lr

0801d990 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d990:	4770      	bx	lr

0801d992 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d992:	4770      	bx	lr

0801d994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d994:	4770      	bx	lr
	...

0801d998 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d99a:	4606      	mov	r6, r0
 801d99c:	b087      	sub	sp, #28
 801d99e:	4615      	mov	r5, r2
 801d9a0:	461f      	mov	r7, r3
 801d9a2:	b353      	cbz	r3, 801d9fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d9a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	dd26      	ble.n	801d9fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d9ac:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	dd22      	ble.n	801d9fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d9b4:	6808      	ldr	r0, [r1, #0]
 801d9b6:	aa04      	add	r2, sp, #16
 801d9b8:	6849      	ldr	r1, [r1, #4]
 801d9ba:	4c1b      	ldr	r4, [pc, #108]	; (801da28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d9bc:	c203      	stmia	r2!, {r0, r1}
 801d9be:	a804      	add	r0, sp, #16
 801d9c0:	f7fb fa4a 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9c4:	6820      	ldr	r0, [r4, #0]
 801d9c6:	6803      	ldr	r3, [r0, #0]
 801d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9ca:	4798      	blx	r3
 801d9cc:	2fff      	cmp	r7, #255	; 0xff
 801d9ce:	d016      	beq.n	801d9fe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d9d0:	f010 0f08 	tst.w	r0, #8
 801d9d4:	6820      	ldr	r0, [r4, #0]
 801d9d6:	d015      	beq.n	801da04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d9d8:	2400      	movs	r4, #0
 801d9da:	6801      	ldr	r1, [r0, #0]
 801d9dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d9e0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d9e4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801d9e8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d9ec:	9401      	str	r4, [sp, #4]
 801d9ee:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d9f2:	9400      	str	r4, [sp, #0]
 801d9f4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801d9f6:	4629      	mov	r1, r5
 801d9f8:	47a0      	blx	r4
 801d9fa:	b007      	add	sp, #28
 801d9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9fe:	f010 0f02 	tst.w	r0, #2
 801da02:	e7e7      	b.n	801d9d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801da04:	6803      	ldr	r3, [r0, #0]
 801da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da08:	4798      	blx	r3
 801da0a:	4b08      	ldr	r3, [pc, #32]	; (801da2c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801da0c:	4601      	mov	r1, r0
 801da0e:	4630      	mov	r0, r6
 801da10:	881a      	ldrh	r2, [r3, #0]
 801da12:	6833      	ldr	r3, [r6, #0]
 801da14:	e9cd 5700 	strd	r5, r7, [sp]
 801da18:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801da1a:	ab04      	add	r3, sp, #16
 801da1c:	47a8      	blx	r5
 801da1e:	6820      	ldr	r0, [r4, #0]
 801da20:	6803      	ldr	r3, [r0, #0]
 801da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da24:	4798      	blx	r3
 801da26:	e7e8      	b.n	801d9fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801da28:	24006d7c 	.word	0x24006d7c
 801da2c:	24006d76 	.word	0x24006d76

0801da30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801da30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da34:	b08b      	sub	sp, #44	; 0x2c
 801da36:	460d      	mov	r5, r1
 801da38:	4616      	mov	r6, r2
 801da3a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801da3e:	f1b8 0f00 	cmp.w	r8, #0
 801da42:	d047      	beq.n	801dad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801da44:	6810      	ldr	r0, [r2, #0]
 801da46:	ac06      	add	r4, sp, #24
 801da48:	6851      	ldr	r1, [r2, #4]
 801da4a:	4f51      	ldr	r7, [pc, #324]	; (801db90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801da4c:	c403      	stmia	r4!, {r0, r1}
 801da4e:	6818      	ldr	r0, [r3, #0]
 801da50:	ac08      	add	r4, sp, #32
 801da52:	6859      	ldr	r1, [r3, #4]
 801da54:	c403      	stmia	r4!, {r0, r1}
 801da56:	a806      	add	r0, sp, #24
 801da58:	f7fb f9fe 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da5c:	4631      	mov	r1, r6
 801da5e:	a808      	add	r0, sp, #32
 801da60:	f7fb fa22 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da64:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801da68:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801da6c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801da70:	6838      	ldr	r0, [r7, #0]
 801da72:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da76:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801da7a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801da7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801da82:	440d      	add	r5, r1
 801da84:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801da88:	440a      	add	r2, r1
 801da8a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801da8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801da92:	4413      	add	r3, r2
 801da94:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801da98:	6803      	ldr	r3, [r0, #0]
 801da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da9c:	4798      	blx	r3
 801da9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801daa2:	d01a      	beq.n	801dada <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801daa4:	f010 0f04 	tst.w	r0, #4
 801daa8:	6838      	ldr	r0, [r7, #0]
 801daaa:	d019      	beq.n	801dae0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801daac:	2100      	movs	r1, #0
 801daae:	6807      	ldr	r7, [r0, #0]
 801dab0:	b2a4      	uxth	r4, r4
 801dab2:	f8cd 800c 	str.w	r8, [sp, #12]
 801dab6:	b2b6      	uxth	r6, r6
 801dab8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dabc:	9401      	str	r4, [sp, #4]
 801dabe:	9600      	str	r6, [sp, #0]
 801dac0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dac4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801dac8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dacc:	9102      	str	r1, [sp, #8]
 801dace:	4629      	mov	r1, r5
 801dad0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801dad2:	47a0      	blx	r4
 801dad4:	b00b      	add	sp, #44	; 0x2c
 801dad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dada:	f010 0f01 	tst.w	r0, #1
 801dade:	e7e3      	b.n	801daa8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801dae0:	6803      	ldr	r3, [r0, #0]
 801dae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dae4:	4798      	blx	r3
 801dae6:	4a2b      	ldr	r2, [pc, #172]	; (801db94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801dae8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801daec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801daf0:	8813      	ldrh	r3, [r2, #0]
 801daf2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801daf6:	fb03 f404 	mul.w	r4, r3, r4
 801dafa:	fb03 c101 	mla	r1, r3, r1, ip
 801dafe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db06:	4408      	add	r0, r1
 801db08:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801db0c:	4404      	add	r4, r0
 801db0e:	d02e      	beq.n	801db6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801db10:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801db14:	1b9b      	subs	r3, r3, r6
 801db16:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801db1a:	1b96      	subs	r6, r2, r6
 801db1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db24:	42a0      	cmp	r0, r4
 801db26:	d22d      	bcs.n	801db84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801db28:	eb00 0e01 	add.w	lr, r0, r1
 801db2c:	4570      	cmp	r0, lr
 801db2e:	d210      	bcs.n	801db52 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801db30:	f890 9000 	ldrb.w	r9, [r0]
 801db34:	f815 2b01 	ldrb.w	r2, [r5], #1
 801db38:	fb19 f90c 	smulbb	r9, r9, ip
 801db3c:	fb02 9208 	mla	r2, r2, r8, r9
 801db40:	b292      	uxth	r2, r2
 801db42:	f102 0901 	add.w	r9, r2, #1
 801db46:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801db4a:	1212      	asrs	r2, r2, #8
 801db4c:	f800 2b01 	strb.w	r2, [r0], #1
 801db50:	e7ec      	b.n	801db2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801db52:	4418      	add	r0, r3
 801db54:	4435      	add	r5, r6
 801db56:	e7e5      	b.n	801db24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801db58:	8813      	ldrh	r3, [r2, #0]
 801db5a:	1b9b      	subs	r3, r3, r6
 801db5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db60:	4418      	add	r0, r3
 801db62:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801db66:	1b9b      	subs	r3, r3, r6
 801db68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db6c:	441d      	add	r5, r3
 801db6e:	42a0      	cmp	r0, r4
 801db70:	d208      	bcs.n	801db84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801db72:	eb00 0c01 	add.w	ip, r0, r1
 801db76:	4560      	cmp	r0, ip
 801db78:	d2ee      	bcs.n	801db58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801db7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801db7e:	f800 3b01 	strb.w	r3, [r0], #1
 801db82:	e7f8      	b.n	801db76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801db84:	6838      	ldr	r0, [r7, #0]
 801db86:	6803      	ldr	r3, [r0, #0]
 801db88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db8a:	4798      	blx	r3
 801db8c:	e7a2      	b.n	801dad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801db8e:	bf00      	nop
 801db90:	24006d7c 	.word	0x24006d7c
 801db94:	24006d76 	.word	0x24006d76

0801db98 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801db98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db9a:	2300      	movs	r3, #0
 801db9c:	b085      	sub	sp, #20
 801db9e:	9300      	str	r3, [sp, #0]
 801dba0:	4b41      	ldr	r3, [pc, #260]	; (801dca8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d136      	bne.n	801dc16 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801dba8:	4a40      	ldr	r2, [pc, #256]	; (801dcac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dbaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dbae:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d131      	bne.n	801dc1a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801dbb6:	4b3e      	ldr	r3, [pc, #248]	; (801dcb0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801dbb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dbbc:	ac02      	add	r4, sp, #8
 801dbbe:	6808      	ldr	r0, [r1, #0]
 801dbc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dbc4:	ab02      	add	r3, sp, #8
 801dbc6:	6849      	ldr	r1, [r1, #4]
 801dbc8:	4d3a      	ldr	r5, [pc, #232]	; (801dcb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801dbca:	c303      	stmia	r3!, {r0, r1}
 801dbcc:	4669      	mov	r1, sp
 801dbce:	4620      	mov	r0, r4
 801dbd0:	f7fb f96a 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dbd4:	4668      	mov	r0, sp
 801dbd6:	f7fb f93f 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dbda:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dbde:	f8bd 2000 	ldrh.w	r2, [sp]
 801dbe2:	462e      	mov	r6, r5
 801dbe4:	6828      	ldr	r0, [r5, #0]
 801dbe6:	4413      	add	r3, r2
 801dbe8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801dbec:	f8ad 3008 	strh.w	r3, [sp, #8]
 801dbf0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801dbf4:	4413      	add	r3, r2
 801dbf6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801dbfa:	6803      	ldr	r3, [r0, #0]
 801dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbfe:	4798      	blx	r3
 801dc00:	f010 0f01 	tst.w	r0, #1
 801dc04:	d00b      	beq.n	801dc1e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801dc06:	6828      	ldr	r0, [r5, #0]
 801dc08:	6803      	ldr	r3, [r0, #0]
 801dc0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801dc0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dc10:	4798      	blx	r3
 801dc12:	b005      	add	sp, #20
 801dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc16:	4a26      	ldr	r2, [pc, #152]	; (801dcb0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801dc18:	e7c7      	b.n	801dbaa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801dc1a:	4b24      	ldr	r3, [pc, #144]	; (801dcac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dc1c:	e7cc      	b.n	801dbb8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801dc1e:	6830      	ldr	r0, [r6, #0]
 801dc20:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801dc24:	6803      	ldr	r3, [r0, #0]
 801dc26:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801dc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc2c:	4798      	blx	r3
 801dc2e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801dc32:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dc36:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801dc3a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801dc3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc42:	4404      	add	r4, r0
 801dc44:	6830      	ldr	r0, [r6, #0]
 801dc46:	6803      	ldr	r3, [r0, #0]
 801dc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc4a:	4798      	blx	r3
 801dc4c:	4917      	ldr	r1, [pc, #92]	; (801dcac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dc4e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801dc52:	880b      	ldrh	r3, [r1, #0]
 801dc54:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801dc58:	fb03 c202 	mla	r2, r3, r2, ip
 801dc5c:	437b      	muls	r3, r7
 801dc5e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801dc62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc6a:	4410      	add	r0, r2
 801dc6c:	18c2      	adds	r2, r0, r3
 801dc6e:	4290      	cmp	r0, r2
 801dc70:	d214      	bcs.n	801dc9c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801dc72:	eb00 0c07 	add.w	ip, r0, r7
 801dc76:	4560      	cmp	r0, ip
 801dc78:	d204      	bcs.n	801dc84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801dc7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dc7e:	f800 3b01 	strb.w	r3, [r0], #1
 801dc82:	e7f8      	b.n	801dc76 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801dc84:	880b      	ldrh	r3, [r1, #0]
 801dc86:	1b5b      	subs	r3, r3, r5
 801dc88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc8c:	4418      	add	r0, r3
 801dc8e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801dc92:	1b5b      	subs	r3, r3, r5
 801dc94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc98:	441c      	add	r4, r3
 801dc9a:	e7e8      	b.n	801dc6e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801dc9c:	6830      	ldr	r0, [r6, #0]
 801dc9e:	6803      	ldr	r3, [r0, #0]
 801dca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dca2:	4798      	blx	r3
 801dca4:	e7b5      	b.n	801dc12 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801dca6:	bf00      	nop
 801dca8:	24006d74 	.word	0x24006d74
 801dcac:	24006d76 	.word	0x24006d76
 801dcb0:	24006d78 	.word	0x24006d78
 801dcb4:	24006d7c 	.word	0x24006d7c

0801dcb8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcbc:	b08f      	sub	sp, #60	; 0x3c
 801dcbe:	461c      	mov	r4, r3
 801dcc0:	9203      	str	r2, [sp, #12]
 801dcc2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dcc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dcc8:	6820      	ldr	r0, [r4, #0]
 801dcca:	9100      	str	r1, [sp, #0]
 801dccc:	9204      	str	r2, [sp, #16]
 801dcce:	aa0a      	add	r2, sp, #40	; 0x28
 801dcd0:	6861      	ldr	r1, [r4, #4]
 801dcd2:	c203      	stmia	r2!, {r0, r1}
 801dcd4:	6818      	ldr	r0, [r3, #0]
 801dcd6:	aa0c      	add	r2, sp, #48	; 0x30
 801dcd8:	6859      	ldr	r1, [r3, #4]
 801dcda:	c203      	stmia	r2!, {r0, r1}
 801dcdc:	a80a      	add	r0, sp, #40	; 0x28
 801dcde:	f7fb f8bb 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dce2:	4621      	mov	r1, r4
 801dce4:	a80c      	add	r0, sp, #48	; 0x30
 801dce6:	f7fb f8df 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcea:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801dcee:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801dcf2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dcf6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801dcfa:	bfdb      	ittet	le
 801dcfc:	b2b3      	uxthle	r3, r6
 801dcfe:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801dd02:	2301      	movgt	r3, #1
 801dd04:	fb92 f3f3 	sdivle	r3, r2, r3
 801dd08:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801dd0c:	441d      	add	r5, r3
 801dd0e:	fb92 f1f3 	sdiv	r1, r2, r3
 801dd12:	fa1f fc81 	uxth.w	ip, r1
 801dd16:	3d01      	subs	r5, #1
 801dd18:	fb0c 2413 	mls	r4, ip, r3, r2
 801dd1c:	4661      	mov	r1, ip
 801dd1e:	fb14 f406 	smulbb	r4, r4, r6
 801dd22:	4404      	add	r4, r0
 801dd24:	fb95 f5f3 	sdiv	r5, r5, r3
 801dd28:	b2a4      	uxth	r4, r4
 801dd2a:	b131      	cbz	r1, 801dd3a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801dd2c:	9b03      	ldr	r3, [sp, #12]
 801dd2e:	9900      	ldr	r1, [sp, #0]
 801dd30:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801dd34:	ba1b      	rev	r3, r3
 801dd36:	4419      	add	r1, r3
 801dd38:	9100      	str	r1, [sp, #0]
 801dd3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801dd3e:	b2ad      	uxth	r5, r5
 801dd40:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801dd44:	4418      	add	r0, r3
 801dd46:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dd4a:	00ad      	lsls	r5, r5, #2
 801dd4c:	441a      	add	r2, r3
 801dd4e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dd52:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801dd56:	9301      	str	r3, [sp, #4]
 801dd58:	4b79      	ldr	r3, [pc, #484]	; (801df40 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801dd5a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801dd5e:	6818      	ldr	r0, [r3, #0]
 801dd60:	6803      	ldr	r3, [r0, #0]
 801dd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd64:	4798      	blx	r3
 801dd66:	4a77      	ldr	r2, [pc, #476]	; (801df44 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801dd68:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801dd6c:	2c00      	cmp	r4, #0
 801dd6e:	8813      	ldrh	r3, [r2, #0]
 801dd70:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801dd74:	9209      	str	r2, [sp, #36]	; 0x24
 801dd76:	fb03 c101 	mla	r1, r3, r1, ip
 801dd7a:	fb06 f303 	mul.w	r3, r6, r3
 801dd7e:	bf18      	it	ne
 801dd80:	2600      	movne	r6, #0
 801dd82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dd86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd8a:	4408      	add	r0, r1
 801dd8c:	4403      	add	r3, r0
 801dd8e:	9306      	str	r3, [sp, #24]
 801dd90:	f105 0304 	add.w	r3, r5, #4
 801dd94:	9305      	str	r3, [sp, #20]
 801dd96:	9b01      	ldr	r3, [sp, #4]
 801dd98:	bf08      	it	eq
 801dd9a:	461e      	moveq	r6, r3
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	b2b6      	uxth	r6, r6
 801dda0:	9302      	str	r3, [sp, #8]
 801dda2:	9a06      	ldr	r2, [sp, #24]
 801dda4:	4290      	cmp	r0, r2
 801dda6:	f080 80c2 	bcs.w	801df2e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801ddaa:	b963      	cbnz	r3, 801ddc6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801ddac:	9b00      	ldr	r3, [sp, #0]
 801ddae:	781a      	ldrb	r2, [r3, #0]
 801ddb0:	0993      	lsrs	r3, r2, #6
 801ddb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ddb6:	9202      	str	r2, [sp, #8]
 801ddb8:	1e5a      	subs	r2, r3, #1
 801ddba:	2a02      	cmp	r2, #2
 801ddbc:	d815      	bhi.n	801ddea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801ddbe:	9a00      	ldr	r2, [sp, #0]
 801ddc0:	b29b      	uxth	r3, r3
 801ddc2:	3201      	adds	r2, #1
 801ddc4:	9200      	str	r2, [sp, #0]
 801ddc6:	b1b4      	cbz	r4, 801ddf6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801ddc8:	429c      	cmp	r4, r3
 801ddca:	bf91      	iteee	ls
 801ddcc:	1b1c      	subls	r4, r3, r4
 801ddce:	1ae4      	subhi	r4, r4, r3
 801ddd0:	4635      	movhi	r5, r6
 801ddd2:	f04f 0e00 	movhi.w	lr, #0
 801ddd6:	bf9b      	ittet	ls
 801ddd8:	fa1f fe84 	uxthls.w	lr, r4
 801dddc:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801dde0:	b2a4      	uxthhi	r4, r4
 801dde2:	2400      	movls	r4, #0
 801dde4:	4673      	mov	r3, lr
 801dde6:	462e      	mov	r6, r5
 801dde8:	e7db      	b.n	801dda2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801ddea:	9a00      	ldr	r2, [sp, #0]
 801ddec:	9b00      	ldr	r3, [sp, #0]
 801ddee:	3202      	adds	r2, #2
 801ddf0:	785b      	ldrb	r3, [r3, #1]
 801ddf2:	9200      	str	r2, [sp, #0]
 801ddf4:	e7e7      	b.n	801ddc6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801ddf6:	2204      	movs	r2, #4
 801ddf8:	9905      	ldr	r1, [sp, #20]
 801ddfa:	429e      	cmp	r6, r3
 801ddfc:	4615      	mov	r5, r2
 801ddfe:	9a02      	ldr	r2, [sp, #8]
 801de00:	bf94      	ite	ls
 801de02:	eba3 0e06 	subls.w	lr, r3, r6
 801de06:	46a6      	movhi	lr, r4
 801de08:	fb15 1202 	smlabb	r2, r5, r2, r1
 801de0c:	9903      	ldr	r1, [sp, #12]
 801de0e:	bf8c      	ite	hi
 801de10:	1af5      	subhi	r5, r6, r3
 801de12:	fa1f fe8e 	uxthls.w	lr, lr
 801de16:	f851 c002 	ldr.w	ip, [r1, r2]
 801de1a:	bf9a      	itte	ls
 801de1c:	4625      	movls	r5, r4
 801de1e:	4632      	movls	r2, r6
 801de20:	b2ad      	uxthhi	r5, r5
 801de22:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801de26:	bf88      	it	hi
 801de28:	461a      	movhi	r2, r3
 801de2a:	b179      	cbz	r1, 801de4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801de2c:	29ff      	cmp	r1, #255	; 0xff
 801de2e:	fa5f f98c 	uxtb.w	r9, ip
 801de32:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801de36:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801de3a:	d126      	bne.n	801de8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801de3c:	9f04      	ldr	r7, [sp, #16]
 801de3e:	2fff      	cmp	r7, #255	; 0xff
 801de40:	d123      	bne.n	801de8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801de42:	4682      	mov	sl, r0
 801de44:	4611      	mov	r1, r2
 801de46:	f10a 0a03 	add.w	sl, sl, #3
 801de4a:	b9a9      	cbnz	r1, 801de78 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801de4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801de50:	429e      	cmp	r6, r3
 801de52:	4410      	add	r0, r2
 801de54:	d8c6      	bhi.n	801dde4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801de56:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801de5a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de60:	1b64      	subs	r4, r4, r5
 801de62:	9a01      	ldr	r2, [sp, #4]
 801de64:	881b      	ldrh	r3, [r3, #0]
 801de66:	b2a4      	uxth	r4, r4
 801de68:	1a9b      	subs	r3, r3, r2
 801de6a:	2c00      	cmp	r4, #0
 801de6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de70:	bf18      	it	ne
 801de72:	2500      	movne	r5, #0
 801de74:	4418      	add	r0, r3
 801de76:	e7b5      	b.n	801dde4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801de78:	3901      	subs	r1, #1
 801de7a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801de7e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801de82:	f80a cc01 	strb.w	ip, [sl, #-1]
 801de86:	b289      	uxth	r1, r1
 801de88:	e7dd      	b.n	801de46 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801de8a:	9f04      	ldr	r7, [sp, #16]
 801de8c:	fb07 fa01 	mul.w	sl, r7, r1
 801de90:	f10a 0101 	add.w	r1, sl, #1
 801de94:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801de98:	1209      	asrs	r1, r1, #8
 801de9a:	ea6f 0a01 	mvn.w	sl, r1
 801de9e:	b289      	uxth	r1, r1
 801dea0:	fb19 f901 	smulbb	r9, r9, r1
 801dea4:	fa5f fa8a 	uxtb.w	sl, sl
 801dea8:	fb18 f801 	smulbb	r8, r8, r1
 801deac:	fb1c f101 	smulbb	r1, ip, r1
 801deb0:	fa1f f789 	uxth.w	r7, r9
 801deb4:	4684      	mov	ip, r0
 801deb6:	4691      	mov	r9, r2
 801deb8:	9707      	str	r7, [sp, #28]
 801deba:	b289      	uxth	r1, r1
 801debc:	fa1f f788 	uxth.w	r7, r8
 801dec0:	9708      	str	r7, [sp, #32]
 801dec2:	f10c 0c03 	add.w	ip, ip, #3
 801dec6:	f1b9 0f00 	cmp.w	r9, #0
 801deca:	d0bf      	beq.n	801de4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801decc:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801ded0:	f109 39ff 	add.w	r9, r9, #4294967295
 801ded4:	9f07      	ldr	r7, [sp, #28]
 801ded6:	fa1f f989 	uxth.w	r9, r9
 801deda:	fb08 780a 	mla	r8, r8, sl, r7
 801dede:	9f08      	ldr	r7, [sp, #32]
 801dee0:	fa1f f888 	uxth.w	r8, r8
 801dee4:	f108 0b01 	add.w	fp, r8, #1
 801dee8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801deec:	ea4f 2828 	mov.w	r8, r8, asr #8
 801def0:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801def4:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801def8:	fb08 780a 	mla	r8, r8, sl, r7
 801defc:	fa1f f888 	uxth.w	r8, r8
 801df00:	f108 0b01 	add.w	fp, r8, #1
 801df04:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801df08:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df0c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801df10:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801df14:	fb08 180a 	mla	r8, r8, sl, r1
 801df18:	fa1f f888 	uxth.w	r8, r8
 801df1c:	f108 0b01 	add.w	fp, r8, #1
 801df20:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801df24:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df28:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801df2c:	e7c9      	b.n	801dec2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801df2e:	4b04      	ldr	r3, [pc, #16]	; (801df40 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801df30:	6818      	ldr	r0, [r3, #0]
 801df32:	6803      	ldr	r3, [r0, #0]
 801df34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df36:	4798      	blx	r3
 801df38:	b00f      	add	sp, #60	; 0x3c
 801df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3e:	bf00      	nop
 801df40:	24006d7c 	.word	0x24006d7c
 801df44:	24006d76 	.word	0x24006d76

0801df48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df4c:	b089      	sub	sp, #36	; 0x24
 801df4e:	4607      	mov	r7, r0
 801df50:	4689      	mov	r9, r1
 801df52:	4692      	mov	sl, r2
 801df54:	ac08      	add	r4, sp, #32
 801df56:	461e      	mov	r6, r3
 801df58:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801df5c:	4620      	mov	r0, r4
 801df5e:	f7fd ffa5 	bl	801beac <_ZNK8touchgfx6Bitmap7getDataEv>
 801df62:	683b      	ldr	r3, [r7, #0]
 801df64:	4605      	mov	r5, r0
 801df66:	4620      	mov	r0, r4
 801df68:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801df6c:	f7fd feea 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df70:	4683      	mov	fp, r0
 801df72:	4620      	mov	r0, r4
 801df74:	f7fd ff1a 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df78:	4653      	mov	r3, sl
 801df7a:	464a      	mov	r2, r9
 801df7c:	4639      	mov	r1, r7
 801df7e:	9500      	str	r5, [sp, #0]
 801df80:	e9cd b001 	strd	fp, r0, [sp, #4]
 801df84:	a806      	add	r0, sp, #24
 801df86:	47c0      	blx	r8
 801df88:	a906      	add	r1, sp, #24
 801df8a:	4630      	mov	r0, r6
 801df8c:	f7fd fdbe 	bl	801bb0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801df90:	4628      	mov	r0, r5
 801df92:	b009      	add	sp, #36	; 0x24
 801df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df98 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801df98:	b510      	push	{r4, lr}
 801df9a:	4604      	mov	r4, r0
 801df9c:	2104      	movs	r1, #4
 801df9e:	f007 f928 	bl	80251f2 <_ZdlPvj>
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	bd10      	pop	{r4, pc}

0801dfa6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801dfa6:	b510      	push	{r4, lr}
 801dfa8:	4604      	mov	r4, r0
 801dfaa:	2104      	movs	r1, #4
 801dfac:	f007 f921 	bl	80251f2 <_ZdlPvj>
 801dfb0:	4620      	mov	r0, r4
 801dfb2:	bd10      	pop	{r4, pc}

0801dfb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801dfb4:	b510      	push	{r4, lr}
 801dfb6:	4604      	mov	r4, r0
 801dfb8:	f640 0144 	movw	r1, #2116	; 0x844
 801dfbc:	f007 f919 	bl	80251f2 <_ZdlPvj>
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	bd10      	pop	{r4, pc}

0801dfc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	4604      	mov	r4, r0
 801dfc8:	2104      	movs	r1, #4
 801dfca:	f007 f912 	bl	80251f2 <_ZdlPvj>
 801dfce:	4620      	mov	r0, r4
 801dfd0:	bd10      	pop	{r4, pc}

0801dfd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dfd2:	b510      	push	{r4, lr}
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	2104      	movs	r1, #4
 801dfd8:	f007 f90b 	bl	80251f2 <_ZdlPvj>
 801dfdc:	4620      	mov	r0, r4
 801dfde:	bd10      	pop	{r4, pc}

0801dfe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dfe0:	b510      	push	{r4, lr}
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	2104      	movs	r1, #4
 801dfe6:	f007 f904 	bl	80251f2 <_ZdlPvj>
 801dfea:	4620      	mov	r0, r4
 801dfec:	bd10      	pop	{r4, pc}

0801dfee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dfee:	b510      	push	{r4, lr}
 801dff0:	4604      	mov	r4, r0
 801dff2:	2104      	movs	r1, #4
 801dff4:	f007 f8fd 	bl	80251f2 <_ZdlPvj>
 801dff8:	4620      	mov	r0, r4
 801dffa:	bd10      	pop	{r4, pc}

0801dffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dffc:	b510      	push	{r4, lr}
 801dffe:	4604      	mov	r4, r0
 801e000:	2104      	movs	r1, #4
 801e002:	f007 f8f6 	bl	80251f2 <_ZdlPvj>
 801e006:	4620      	mov	r0, r4
 801e008:	bd10      	pop	{r4, pc}

0801e00a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e00a:	b510      	push	{r4, lr}
 801e00c:	4604      	mov	r4, r0
 801e00e:	2104      	movs	r1, #4
 801e010:	f007 f8ef 	bl	80251f2 <_ZdlPvj>
 801e014:	4620      	mov	r0, r4
 801e016:	bd10      	pop	{r4, pc}

0801e018 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e018:	b510      	push	{r4, lr}
 801e01a:	4604      	mov	r4, r0
 801e01c:	2104      	movs	r1, #4
 801e01e:	f007 f8e8 	bl	80251f2 <_ZdlPvj>
 801e022:	4620      	mov	r0, r4
 801e024:	bd10      	pop	{r4, pc}

0801e026 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e026:	b510      	push	{r4, lr}
 801e028:	4604      	mov	r4, r0
 801e02a:	2104      	movs	r1, #4
 801e02c:	f007 f8e1 	bl	80251f2 <_ZdlPvj>
 801e030:	4620      	mov	r0, r4
 801e032:	bd10      	pop	{r4, pc}

0801e034 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e034:	b510      	push	{r4, lr}
 801e036:	4604      	mov	r4, r0
 801e038:	2104      	movs	r1, #4
 801e03a:	f007 f8da 	bl	80251f2 <_ZdlPvj>
 801e03e:	4620      	mov	r0, r4
 801e040:	bd10      	pop	{r4, pc}

0801e042 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e042:	b510      	push	{r4, lr}
 801e044:	4604      	mov	r4, r0
 801e046:	2104      	movs	r1, #4
 801e048:	f007 f8d3 	bl	80251f2 <_ZdlPvj>
 801e04c:	4620      	mov	r0, r4
 801e04e:	bd10      	pop	{r4, pc}

0801e050 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e050:	b510      	push	{r4, lr}
 801e052:	4604      	mov	r4, r0
 801e054:	2104      	movs	r1, #4
 801e056:	f007 f8cc 	bl	80251f2 <_ZdlPvj>
 801e05a:	4620      	mov	r0, r4
 801e05c:	bd10      	pop	{r4, pc}

0801e05e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e05e:	b510      	push	{r4, lr}
 801e060:	4604      	mov	r4, r0
 801e062:	2104      	movs	r1, #4
 801e064:	f007 f8c5 	bl	80251f2 <_ZdlPvj>
 801e068:	4620      	mov	r0, r4
 801e06a:	bd10      	pop	{r4, pc}

0801e06c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e06c:	b510      	push	{r4, lr}
 801e06e:	4604      	mov	r4, r0
 801e070:	2104      	movs	r1, #4
 801e072:	f007 f8be 	bl	80251f2 <_ZdlPvj>
 801e076:	4620      	mov	r0, r4
 801e078:	bd10      	pop	{r4, pc}

0801e07a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e07a:	b510      	push	{r4, lr}
 801e07c:	4604      	mov	r4, r0
 801e07e:	2104      	movs	r1, #4
 801e080:	f007 f8b7 	bl	80251f2 <_ZdlPvj>
 801e084:	4620      	mov	r0, r4
 801e086:	bd10      	pop	{r4, pc}

0801e088 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e088:	b510      	push	{r4, lr}
 801e08a:	4604      	mov	r4, r0
 801e08c:	2104      	movs	r1, #4
 801e08e:	f007 f8b0 	bl	80251f2 <_ZdlPvj>
 801e092:	4620      	mov	r0, r4
 801e094:	bd10      	pop	{r4, pc}

0801e096 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e096:	b510      	push	{r4, lr}
 801e098:	4604      	mov	r4, r0
 801e09a:	2104      	movs	r1, #4
 801e09c:	f007 f8a9 	bl	80251f2 <_ZdlPvj>
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	bd10      	pop	{r4, pc}

0801e0a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	2104      	movs	r1, #4
 801e0aa:	f007 f8a2 	bl	80251f2 <_ZdlPvj>
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	bd10      	pop	{r4, pc}

0801e0b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e0b2:	b510      	push	{r4, lr}
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	2104      	movs	r1, #4
 801e0b8:	f007 f89b 	bl	80251f2 <_ZdlPvj>
 801e0bc:	4620      	mov	r0, r4
 801e0be:	bd10      	pop	{r4, pc}

0801e0c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e0c0:	b510      	push	{r4, lr}
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	2104      	movs	r1, #4
 801e0c6:	f007 f894 	bl	80251f2 <_ZdlPvj>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	bd10      	pop	{r4, pc}

0801e0ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e0ce:	b510      	push	{r4, lr}
 801e0d0:	4604      	mov	r4, r0
 801e0d2:	2104      	movs	r1, #4
 801e0d4:	f007 f88d 	bl	80251f2 <_ZdlPvj>
 801e0d8:	4620      	mov	r0, r4
 801e0da:	bd10      	pop	{r4, pc}

0801e0dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e0:	b08f      	sub	sp, #60	; 0x3c
 801e0e2:	461c      	mov	r4, r3
 801e0e4:	460e      	mov	r6, r1
 801e0e6:	9206      	str	r2, [sp, #24]
 801e0e8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e0ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e0ee:	9202      	str	r2, [sp, #8]
 801e0f0:	2a00      	cmp	r2, #0
 801e0f2:	f000 8128 	beq.w	801e346 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e0f6:	6820      	ldr	r0, [r4, #0]
 801e0f8:	aa0a      	add	r2, sp, #40	; 0x28
 801e0fa:	6861      	ldr	r1, [r4, #4]
 801e0fc:	c203      	stmia	r2!, {r0, r1}
 801e0fe:	6818      	ldr	r0, [r3, #0]
 801e100:	aa0c      	add	r2, sp, #48	; 0x30
 801e102:	6859      	ldr	r1, [r3, #4]
 801e104:	c203      	stmia	r2!, {r0, r1}
 801e106:	a80a      	add	r0, sp, #40	; 0x28
 801e108:	f7fa fea6 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e10c:	4621      	mov	r1, r4
 801e10e:	a80c      	add	r0, sp, #48	; 0x30
 801e110:	f7fa feca 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e114:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801e118:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801e11c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801e120:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801e124:	bfdb      	ittet	le
 801e126:	b2bb      	uxthle	r3, r7
 801e128:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801e12c:	2301      	movgt	r3, #1
 801e12e:	fb92 f3f3 	sdivle	r3, r2, r3
 801e132:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e136:	441d      	add	r5, r3
 801e138:	fb92 f1f3 	sdiv	r1, r2, r3
 801e13c:	fa1f fc81 	uxth.w	ip, r1
 801e140:	3d01      	subs	r5, #1
 801e142:	fb0c 2413 	mls	r4, ip, r3, r2
 801e146:	4661      	mov	r1, ip
 801e148:	fb14 f407 	smulbb	r4, r4, r7
 801e14c:	4404      	add	r4, r0
 801e14e:	fb95 f5f3 	sdiv	r5, r5, r3
 801e152:	b2a4      	uxth	r4, r4
 801e154:	b121      	cbz	r1, 801e160 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801e156:	9b06      	ldr	r3, [sp, #24]
 801e158:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e15c:	ba1b      	rev	r3, r3
 801e15e:	441e      	add	r6, r3
 801e160:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e164:	b2ad      	uxth	r5, r5
 801e166:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e16a:	4418      	add	r0, r3
 801e16c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e170:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 801e174:	00ad      	lsls	r5, r5, #2
 801e176:	441a      	add	r2, r3
 801e178:	4b74      	ldr	r3, [pc, #464]	; (801e34c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e17a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801e17e:	6818      	ldr	r0, [r3, #0]
 801e180:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801e184:	6803      	ldr	r3, [r0, #0]
 801e186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e188:	4798      	blx	r3
 801e18a:	4a71      	ldr	r2, [pc, #452]	; (801e350 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801e18c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e190:	2c00      	cmp	r4, #0
 801e192:	8813      	ldrh	r3, [r2, #0]
 801e194:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e198:	9209      	str	r2, [sp, #36]	; 0x24
 801e19a:	fb03 c101 	mla	r1, r3, r1, ip
 801e19e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e1a2:	fb03 f307 	mul.w	r3, r3, r7
 801e1a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e1aa:	9204      	str	r2, [sp, #16]
 801e1ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1b0:	9a02      	ldr	r2, [sp, #8]
 801e1b2:	4408      	add	r0, r1
 801e1b4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801e1b8:	4403      	add	r3, r0
 801e1ba:	b292      	uxth	r2, r2
 801e1bc:	9307      	str	r3, [sp, #28]
 801e1be:	f105 0304 	add.w	r3, r5, #4
 801e1c2:	bf0c      	ite	eq
 801e1c4:	4645      	moveq	r5, r8
 801e1c6:	2500      	movne	r5, #0
 801e1c8:	9308      	str	r3, [sp, #32]
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	b2ad      	uxth	r5, r5
 801e1ce:	9205      	str	r2, [sp, #20]
 801e1d0:	9303      	str	r3, [sp, #12]
 801e1d2:	9a07      	ldr	r2, [sp, #28]
 801e1d4:	4282      	cmp	r2, r0
 801e1d6:	f240 80b1 	bls.w	801e33c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801e1da:	b95b      	cbnz	r3, 801e1f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801e1dc:	7832      	ldrb	r2, [r6, #0]
 801e1de:	0993      	lsrs	r3, r2, #6
 801e1e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801e1e4:	9203      	str	r2, [sp, #12]
 801e1e6:	1e5a      	subs	r2, r3, #1
 801e1e8:	2a02      	cmp	r2, #2
 801e1ea:	bf8d      	iteet	hi
 801e1ec:	7873      	ldrbhi	r3, [r6, #1]
 801e1ee:	3601      	addls	r6, #1
 801e1f0:	b29b      	uxthls	r3, r3
 801e1f2:	3602      	addhi	r6, #2
 801e1f4:	b184      	cbz	r4, 801e218 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801e1f6:	429c      	cmp	r4, r3
 801e1f8:	bf91      	iteee	ls
 801e1fa:	1b1c      	subls	r4, r3, r4
 801e1fc:	1ae4      	subhi	r4, r4, r3
 801e1fe:	4629      	movhi	r1, r5
 801e200:	f04f 0e00 	movhi.w	lr, #0
 801e204:	bf9b      	ittet	ls
 801e206:	fa1f fe84 	uxthls.w	lr, r4
 801e20a:	2400      	movls	r4, #0
 801e20c:	b2a4      	uxthhi	r4, r4
 801e20e:	fa1f f188 	uxthls.w	r1, r8
 801e212:	4673      	mov	r3, lr
 801e214:	460d      	mov	r5, r1
 801e216:	e7dc      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801e218:	2203      	movs	r2, #3
 801e21a:	9908      	ldr	r1, [sp, #32]
 801e21c:	42ab      	cmp	r3, r5
 801e21e:	4617      	mov	r7, r2
 801e220:	9a03      	ldr	r2, [sp, #12]
 801e222:	bf24      	itt	cs
 801e224:	eba3 0e05 	subcs.w	lr, r3, r5
 801e228:	9501      	strcs	r5, [sp, #4]
 801e22a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801e22e:	9a06      	ldr	r2, [sp, #24]
 801e230:	bf34      	ite	cc
 801e232:	1ae9      	subcc	r1, r5, r3
 801e234:	fa1f fe8e 	uxthcs.w	lr, lr
 801e238:	4417      	add	r7, r2
 801e23a:	9a02      	ldr	r2, [sp, #8]
 801e23c:	bf2f      	iteee	cs
 801e23e:	4621      	movcs	r1, r4
 801e240:	b289      	uxthcc	r1, r1
 801e242:	9301      	strcc	r3, [sp, #4]
 801e244:	46a6      	movcc	lr, r4
 801e246:	2aff      	cmp	r2, #255	; 0xff
 801e248:	d11e      	bne.n	801e288 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801e24a:	4681      	mov	r9, r0
 801e24c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e250:	f109 0903 	add.w	r9, r9, #3
 801e254:	f1bc 0f00 	cmp.w	ip, #0
 801e258:	d15f      	bne.n	801e31a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801e25a:	9a01      	ldr	r2, [sp, #4]
 801e25c:	42ab      	cmp	r3, r5
 801e25e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e262:	4410      	add	r0, r2
 801e264:	d3d5      	bcc.n	801e212 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801e266:	fa1f f188 	uxth.w	r1, r8
 801e26a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801e26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e270:	1a64      	subs	r4, r4, r1
 801e272:	881b      	ldrh	r3, [r3, #0]
 801e274:	b2a4      	uxth	r4, r4
 801e276:	eba3 0308 	sub.w	r3, r3, r8
 801e27a:	2c00      	cmp	r4, #0
 801e27c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e280:	bf18      	it	ne
 801e282:	2100      	movne	r1, #0
 801e284:	4418      	add	r0, r3
 801e286:	e7c4      	b.n	801e212 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801e288:	4684      	mov	ip, r0
 801e28a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e28e:	f10c 0c03 	add.w	ip, ip, #3
 801e292:	f1ba 0f00 	cmp.w	sl, #0
 801e296:	d0e0      	beq.n	801e25a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801e298:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801e29c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e2a0:	9a05      	ldr	r2, [sp, #20]
 801e2a2:	f897 9000 	ldrb.w	r9, [r7]
 801e2a6:	fa1f fa8a 	uxth.w	sl, sl
 801e2aa:	fb1b fb02 	smulbb	fp, fp, r2
 801e2ae:	9a04      	ldr	r2, [sp, #16]
 801e2b0:	fb09 b902 	mla	r9, r9, r2, fp
 801e2b4:	9a05      	ldr	r2, [sp, #20]
 801e2b6:	fa1f f989 	uxth.w	r9, r9
 801e2ba:	f109 0b01 	add.w	fp, r9, #1
 801e2be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e2c2:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801e2c6:	fb1b fb02 	smulbb	fp, fp, r2
 801e2ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2ce:	9a04      	ldr	r2, [sp, #16]
 801e2d0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e2d4:	f897 9001 	ldrb.w	r9, [r7, #1]
 801e2d8:	fb09 b902 	mla	r9, r9, r2, fp
 801e2dc:	9a05      	ldr	r2, [sp, #20]
 801e2de:	fa1f f989 	uxth.w	r9, r9
 801e2e2:	f109 0b01 	add.w	fp, r9, #1
 801e2e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e2ea:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801e2ee:	fb1b fb02 	smulbb	fp, fp, r2
 801e2f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2f6:	9a04      	ldr	r2, [sp, #16]
 801e2f8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801e2fc:	f897 9002 	ldrb.w	r9, [r7, #2]
 801e300:	fb09 b902 	mla	r9, r9, r2, fp
 801e304:	fa1f f989 	uxth.w	r9, r9
 801e308:	f109 0b01 	add.w	fp, r9, #1
 801e30c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e310:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e314:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801e318:	e7b9      	b.n	801e28e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801e31a:	f897 a000 	ldrb.w	sl, [r7]
 801e31e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e322:	f809 ac03 	strb.w	sl, [r9, #-3]
 801e326:	fa1f fc8c 	uxth.w	ip, ip
 801e32a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801e32e:	f809 ac02 	strb.w	sl, [r9, #-2]
 801e332:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e336:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e33a:	e789      	b.n	801e250 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801e33c:	4b03      	ldr	r3, [pc, #12]	; (801e34c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e33e:	6818      	ldr	r0, [r3, #0]
 801e340:	6803      	ldr	r3, [r0, #0]
 801e342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e344:	4798      	blx	r3
 801e346:	b00f      	add	sp, #60	; 0x3c
 801e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e34c:	24006d7c 	.word	0x24006d7c
 801e350:	24006d76 	.word	0x24006d76

0801e354 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e358:	b09b      	sub	sp, #108	; 0x6c
 801e35a:	461d      	mov	r5, r3
 801e35c:	4604      	mov	r4, r0
 801e35e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e360:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 801e364:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801e368:	9208      	str	r2, [sp, #32]
 801e36a:	2a00      	cmp	r2, #0
 801e36c:	f000 81f3 	beq.w	801e756 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801e370:	6828      	ldr	r0, [r5, #0]
 801e372:	aa16      	add	r2, sp, #88	; 0x58
 801e374:	6869      	ldr	r1, [r5, #4]
 801e376:	c203      	stmia	r2!, {r0, r1}
 801e378:	6818      	ldr	r0, [r3, #0]
 801e37a:	aa18      	add	r2, sp, #96	; 0x60
 801e37c:	6859      	ldr	r1, [r3, #4]
 801e37e:	c203      	stmia	r2!, {r0, r1}
 801e380:	a816      	add	r0, sp, #88	; 0x58
 801e382:	f7fa fd69 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e386:	4629      	mov	r1, r5
 801e388:	a818      	add	r0, sp, #96	; 0x60
 801e38a:	f7fa fd8d 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e38e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801e392:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 801e396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e39a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 801e39e:	bfdb      	ittet	le
 801e3a0:	b29a      	uxthle	r2, r3
 801e3a2:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801e3a6:	f04f 0a01 	movgt.w	sl, #1
 801e3aa:	fb91 faf2 	sdivle	sl, r1, r2
 801e3ae:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 801e3b2:	4456      	add	r6, sl
 801e3b4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801e3b8:	3e01      	subs	r6, #1
 801e3ba:	fb92 f0fa 	sdiv	r0, r2, sl
 801e3be:	b280      	uxth	r0, r0
 801e3c0:	fb00 281a 	mls	r8, r0, sl, r2
 801e3c4:	900e      	str	r0, [sp, #56]	; 0x38
 801e3c6:	fb18 f803 	smulbb	r8, r8, r3
 801e3ca:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801e3ce:	4488      	add	r8, r1
 801e3d0:	4419      	add	r1, r3
 801e3d2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801e3d6:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 801e3da:	fa1f f888 	uxth.w	r8, r8
 801e3de:	441a      	add	r2, r3
 801e3e0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801e3e4:	9303      	str	r3, [sp, #12]
 801e3e6:	4b9c      	ldr	r3, [pc, #624]	; (801e658 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801e3e8:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	6803      	ldr	r3, [r0, #0]
 801e3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3f2:	4798      	blx	r3
 801e3f4:	4b99      	ldr	r3, [pc, #612]	; (801e65c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801e3f6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 801e3fa:	f1b8 0f00 	cmp.w	r8, #0
 801e3fe:	881a      	ldrh	r2, [r3, #0]
 801e400:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 801e404:	fb02 f505 	mul.w	r5, r2, r5
 801e408:	fb02 7101 	mla	r1, r2, r1, r7
 801e40c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e410:	9314      	str	r3, [sp, #80]	; 0x50
 801e412:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e416:	9b08      	ldr	r3, [sp, #32]
 801e418:	fb96 f6fa 	sdiv	r6, r6, sl
 801e41c:	4408      	add	r0, r1
 801e41e:	f106 0601 	add.w	r6, r6, #1
 801e422:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e426:	f04f 0100 	mov.w	r1, #0
 801e42a:	eb00 0205 	add.w	r2, r0, r5
 801e42e:	b2b6      	uxth	r6, r6
 801e430:	b29b      	uxth	r3, r3
 801e432:	910b      	str	r1, [sp, #44]	; 0x2c
 801e434:	9209      	str	r2, [sp, #36]	; 0x24
 801e436:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e438:	930d      	str	r3, [sp, #52]	; 0x34
 801e43a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e43e:	4b88      	ldr	r3, [pc, #544]	; (801e660 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801e440:	f106 0204 	add.w	r2, r6, #4
 801e444:	eba3 0304 	sub.w	r3, r3, r4
 801e448:	9205      	str	r2, [sp, #20]
 801e44a:	9a03      	ldr	r2, [sp, #12]
 801e44c:	bf18      	it	ne
 801e44e:	2200      	movne	r2, #0
 801e450:	9315      	str	r3, [sp, #84]	; 0x54
 801e452:	b292      	uxth	r2, r2
 801e454:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e458:	fa11 f383 	uxtah	r3, r1, r3
 801e45c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e45e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e462:	3304      	adds	r3, #4
 801e464:	9306      	str	r3, [sp, #24]
 801e466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e468:	4283      	cmp	r3, r0
 801e46a:	f240 816f 	bls.w	801e74c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801e46e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801e472:	f04f 0900 	mov.w	r9, #0
 801e476:	9d06      	ldr	r5, [sp, #24]
 801e478:	fbb8 f3f3 	udiv	r3, r8, r3
 801e47c:	ebaa 0303 	sub.w	r3, sl, r3
 801e480:	782d      	ldrb	r5, [r5, #0]
 801e482:	b29b      	uxth	r3, r3
 801e484:	950f      	str	r5, [sp, #60]	; 0x3c
 801e486:	3501      	adds	r5, #1
 801e488:	9312      	str	r3, [sp, #72]	; 0x48
 801e48a:	9b06      	ldr	r3, [sp, #24]
 801e48c:	9504      	str	r5, [sp, #16]
 801e48e:	7859      	ldrb	r1, [r3, #1]
 801e490:	789b      	ldrb	r3, [r3, #2]
 801e492:	021b      	lsls	r3, r3, #8
 801e494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e498:	9906      	ldr	r1, [sp, #24]
 801e49a:	78c9      	ldrb	r1, [r1, #3]
 801e49c:	430b      	orrs	r3, r1
 801e49e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e4a0:	4419      	add	r1, r3
 801e4a2:	1c4d      	adds	r5, r1, #1
 801e4a4:	7849      	ldrb	r1, [r1, #1]
 801e4a6:	9502      	str	r5, [sp, #8]
 801e4a8:	0209      	lsls	r1, r1, #8
 801e4aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e4ac:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801e4b0:	5ceb      	ldrb	r3, [r5, r3]
 801e4b2:	4319      	orrs	r1, r3
 801e4b4:	b28b      	uxth	r3, r1
 801e4b6:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801e4ba:	930a      	str	r3, [sp, #40]	; 0x28
 801e4bc:	2300      	movs	r3, #0
 801e4be:	9307      	str	r3, [sp, #28]
 801e4c0:	2301      	movs	r3, #1
 801e4c2:	e9cd 3300 	strd	r3, r3, [sp]
 801e4c6:	469c      	mov	ip, r3
 801e4c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e4cc:	930c      	str	r3, [sp, #48]	; 0x30
 801e4ce:	f1b8 0f00 	cmp.w	r8, #0
 801e4d2:	f000 8082 	beq.w	801e5da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801e4d6:	45c4      	cmp	ip, r8
 801e4d8:	d270      	bcs.n	801e5bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801e4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4dc:	eba8 080c 	sub.w	r8, r8, ip
 801e4e0:	4611      	mov	r1, r2
 801e4e2:	4283      	cmp	r3, r0
 801e4e4:	fa1f f888 	uxth.w	r8, r8
 801e4e8:	d802      	bhi.n	801e4f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801e4ea:	e074      	b.n	801e5d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d15f      	bne.n	801e5b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801e4f0:	9b02      	ldr	r3, [sp, #8]
 801e4f2:	9a01      	ldr	r2, [sp, #4]
 801e4f4:	785b      	ldrb	r3, [r3, #1]
 801e4f6:	f1c2 0207 	rsb	r2, r2, #7
 801e4fa:	9d01      	ldr	r5, [sp, #4]
 801e4fc:	4093      	lsls	r3, r2
 801e4fe:	005b      	lsls	r3, r3, #1
 801e500:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801e504:	9b02      	ldr	r3, [sp, #8]
 801e506:	781b      	ldrb	r3, [r3, #0]
 801e508:	412b      	asrs	r3, r5
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	4313      	orrs	r3, r2
 801e50e:	462a      	mov	r2, r5
 801e510:	3201      	adds	r2, #1
 801e512:	b29e      	uxth	r6, r3
 801e514:	b2d2      	uxtb	r2, r2
 801e516:	2a08      	cmp	r2, #8
 801e518:	9201      	str	r2, [sp, #4]
 801e51a:	9a02      	ldr	r2, [sp, #8]
 801e51c:	bf09      	itett	eq
 801e51e:	3202      	addeq	r2, #2
 801e520:	3201      	addne	r2, #1
 801e522:	9202      	streq	r2, [sp, #8]
 801e524:	2200      	moveq	r2, #0
 801e526:	bf14      	ite	ne
 801e528:	9202      	strne	r2, [sp, #8]
 801e52a:	9201      	streq	r2, [sp, #4]
 801e52c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e52e:	42b2      	cmp	r2, r6
 801e530:	d309      	bcc.n	801e546 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801e532:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801e536:	2301      	movs	r3, #1
 801e538:	9a04      	ldr	r2, [sp, #16]
 801e53a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801e53e:	d30e      	bcc.n	801e55e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801e540:	9300      	str	r3, [sp, #0]
 801e542:	2500      	movs	r5, #0
 801e544:	e035      	b.n	801e5b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e546:	9b04      	ldr	r3, [sp, #16]
 801e548:	429e      	cmp	r6, r3
 801e54a:	d318      	bcc.n	801e57e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801e54c:	9b00      	ldr	r3, [sp, #0]
 801e54e:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801e552:	18e3      	adds	r3, r4, r3
 801e554:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801e558:	9b00      	ldr	r3, [sp, #0]
 801e55a:	3301      	adds	r3, #1
 801e55c:	b29b      	uxth	r3, r3
 801e55e:	9a04      	ldr	r2, [sp, #16]
 801e560:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 801e564:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e568:	9f00      	ldr	r7, [sp, #0]
 801e56a:	7115      	strb	r5, [r2, #4]
 801e56c:	3701      	adds	r7, #1
 801e56e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e570:	7157      	strb	r7, [r2, #5]
 801e572:	80d5      	strh	r5, [r2, #6]
 801e574:	9a04      	ldr	r2, [sp, #16]
 801e576:	3201      	adds	r2, #1
 801e578:	b292      	uxth	r2, r2
 801e57a:	9204      	str	r2, [sp, #16]
 801e57c:	e7e0      	b.n	801e540 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801e57e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e582:	4632      	mov	r2, r6
 801e584:	795b      	ldrb	r3, [r3, #5]
 801e586:	f603 0504 	addw	r5, r3, #2052	; 0x804
 801e58a:	4425      	add	r5, r4
 801e58c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801e58e:	eb07 0c05 	add.w	ip, r7, r5
 801e592:	f1bc 0f00 	cmp.w	ip, #0
 801e596:	dd07      	ble.n	801e5a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801e598:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e59c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e5a0:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801e5a4:	88d2      	ldrh	r2, [r2, #6]
 801e5a6:	e7f1      	b.n	801e58c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801e5a8:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801e5ac:	b29b      	uxth	r3, r3
 801e5ae:	e7c3      	b.n	801e538 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801e5b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e5b2:	460a      	mov	r2, r1
 801e5b4:	960a      	str	r6, [sp, #40]	; 0x28
 801e5b6:	46a9      	mov	r9, r5
 801e5b8:	469c      	mov	ip, r3
 801e5ba:	e788      	b.n	801e4ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801e5bc:	ebac 0308 	sub.w	r3, ip, r8
 801e5c0:	eb09 0508 	add.w	r5, r9, r8
 801e5c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e5c8:	b29b      	uxth	r3, r3
 801e5ca:	b2ad      	uxth	r5, r5
 801e5cc:	f04f 0800 	mov.w	r8, #0
 801e5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5d2:	4282      	cmp	r2, r0
 801e5d4:	d88a      	bhi.n	801e4ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801e5d6:	460a      	mov	r2, r1
 801e5d8:	e745      	b.n	801e466 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801e5da:	4594      	cmp	ip, r2
 801e5dc:	9d08      	ldr	r5, [sp, #32]
 801e5de:	4686      	mov	lr, r0
 801e5e0:	bf27      	ittee	cs
 801e5e2:	ebac 0302 	subcs.w	r3, ip, r2
 801e5e6:	4616      	movcs	r6, r2
 801e5e8:	eba2 010c 	subcc.w	r1, r2, ip
 801e5ec:	4666      	movcc	r6, ip
 801e5ee:	bf27      	ittee	cs
 801e5f0:	b29b      	uxthcs	r3, r3
 801e5f2:	4641      	movcs	r1, r8
 801e5f4:	b289      	uxthcc	r1, r1
 801e5f6:	4643      	movcc	r3, r8
 801e5f8:	2dff      	cmp	r5, #255	; 0xff
 801e5fa:	eb09 0506 	add.w	r5, r9, r6
 801e5fe:	b2ad      	uxth	r5, r5
 801e600:	d130      	bne.n	801e664 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e602:	45a9      	cmp	r9, r5
 801e604:	f10e 0e03 	add.w	lr, lr, #3
 801e608:	d17a      	bne.n	801e700 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801e60a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e60e:	4594      	cmp	ip, r2
 801e610:	4430      	add	r0, r6
 801e612:	d3db      	bcc.n	801e5cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801e614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e616:	9903      	ldr	r1, [sp, #12]
 801e618:	8812      	ldrh	r2, [r2, #0]
 801e61a:	1a52      	subs	r2, r2, r1
 801e61c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e61e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e622:	4410      	add	r0, r2
 801e624:	9a07      	ldr	r2, [sp, #28]
 801e626:	3201      	adds	r2, #1
 801e628:	428a      	cmp	r2, r1
 801e62a:	9207      	str	r2, [sp, #28]
 801e62c:	f040 8081 	bne.w	801e732 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801e630:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 801e634:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 801e638:	9b03      	ldr	r3, [sp, #12]
 801e63a:	eba8 080c 	sub.w	r8, r8, ip
 801e63e:	fa1f f888 	uxth.w	r8, r8
 801e642:	f1b8 0f00 	cmp.w	r8, #0
 801e646:	bf08      	it	eq
 801e648:	461a      	moveq	r2, r3
 801e64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e64c:	bf18      	it	ne
 801e64e:	2200      	movne	r2, #0
 801e650:	3301      	adds	r3, #1
 801e652:	b292      	uxth	r2, r2
 801e654:	930b      	str	r3, [sp, #44]	; 0x2c
 801e656:	e6fd      	b.n	801e454 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801e658:	24006d7c 	.word	0x24006d7c
 801e65c:	24006d76 	.word	0x24006d76
 801e660:	fffff7fb 	.word	0xfffff7fb
 801e664:	45a9      	cmp	r9, r5
 801e666:	f10e 0e03 	add.w	lr, lr, #3
 801e66a:	d0ce      	beq.n	801e60a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801e66c:	f109 0701 	add.w	r7, r9, #1
 801e670:	44a1      	add	r9, r4
 801e672:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801e676:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801e67a:	9713      	str	r7, [sp, #76]	; 0x4c
 801e67c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e680:	9f05      	ldr	r7, [sp, #20]
 801e682:	eb07 0908 	add.w	r9, r7, r8
 801e686:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e68a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e68c:	fb1b fb07 	smulbb	fp, fp, r7
 801e690:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e692:	fb08 b807 	mla	r8, r8, r7, fp
 801e696:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e698:	fa1f f888 	uxth.w	r8, r8
 801e69c:	f108 0b01 	add.w	fp, r8, #1
 801e6a0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e6a4:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801e6a8:	fb1b fb07 	smulbb	fp, fp, r7
 801e6ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e6b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e6b2:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e6b6:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e6ba:	fb08 b807 	mla	r8, r8, r7, fp
 801e6be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e6c0:	fa1f f888 	uxth.w	r8, r8
 801e6c4:	f108 0b01 	add.w	fp, r8, #1
 801e6c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e6cc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e6d0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e6d4:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e6d8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801e6dc:	fb19 f907 	smulbb	r9, r9, r7
 801e6e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e6e2:	fb08 9807 	mla	r8, r8, r7, r9
 801e6e6:	fa1f f888 	uxth.w	r8, r8
 801e6ea:	f108 0901 	add.w	r9, r8, #1
 801e6ee:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801e6f2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801e6f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e6fa:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e6fe:	e7b1      	b.n	801e664 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e700:	f109 0b01 	add.w	fp, r9, #1
 801e704:	44a1      	add	r9, r4
 801e706:	9f05      	ldr	r7, [sp, #20]
 801e708:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801e70c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e710:	eb07 0908 	add.w	r9, r7, r8
 801e714:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e718:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e71c:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e720:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e724:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e728:	fa1f f98b 	uxth.w	r9, fp
 801e72c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e730:	e767      	b.n	801e602 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801e732:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e736:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801e73a:	eba8 0801 	sub.w	r8, r8, r1
 801e73e:	fa1f f888 	uxth.w	r8, r8
 801e742:	f1b8 0f00 	cmp.w	r8, #0
 801e746:	bf18      	it	ne
 801e748:	2100      	movne	r1, #0
 801e74a:	e741      	b.n	801e5d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801e74c:	4b03      	ldr	r3, [pc, #12]	; (801e75c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801e74e:	6818      	ldr	r0, [r3, #0]
 801e750:	6803      	ldr	r3, [r0, #0]
 801e752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e754:	4798      	blx	r3
 801e756:	b01b      	add	sp, #108	; 0x6c
 801e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e75c:	24006d7c 	.word	0x24006d7c

0801e760 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e764:	b09d      	sub	sp, #116	; 0x74
 801e766:	461d      	mov	r5, r3
 801e768:	4604      	mov	r4, r0
 801e76a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e76c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 801e770:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801e774:	920c      	str	r2, [sp, #48]	; 0x30
 801e776:	2a00      	cmp	r2, #0
 801e778:	f000 81de 	beq.w	801eb38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801e77c:	6828      	ldr	r0, [r5, #0]
 801e77e:	aa18      	add	r2, sp, #96	; 0x60
 801e780:	6869      	ldr	r1, [r5, #4]
 801e782:	c203      	stmia	r2!, {r0, r1}
 801e784:	6818      	ldr	r0, [r3, #0]
 801e786:	aa1a      	add	r2, sp, #104	; 0x68
 801e788:	6859      	ldr	r1, [r3, #4]
 801e78a:	c203      	stmia	r2!, {r0, r1}
 801e78c:	a818      	add	r0, sp, #96	; 0x60
 801e78e:	f7fa fb63 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e792:	4629      	mov	r1, r5
 801e794:	a81a      	add	r0, sp, #104	; 0x68
 801e796:	f7fa fb87 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e79a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801e79e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 801e7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e7a6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801e7aa:	bfdb      	ittet	le
 801e7ac:	b29a      	uxthle	r2, r3
 801e7ae:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801e7b2:	2201      	movgt	r2, #1
 801e7b4:	fb91 f2f2 	sdivle	r2, r1, r2
 801e7b8:	9201      	str	r2, [sp, #4]
 801e7ba:	9801      	ldr	r0, [sp, #4]
 801e7bc:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801e7c0:	9901      	ldr	r1, [sp, #4]
 801e7c2:	fb92 f0f0 	sdiv	r0, r2, r0
 801e7c6:	b280      	uxth	r0, r0
 801e7c8:	440f      	add	r7, r1
 801e7ca:	900d      	str	r0, [sp, #52]	; 0x34
 801e7cc:	3f01      	subs	r7, #1
 801e7ce:	9801      	ldr	r0, [sp, #4]
 801e7d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e7d2:	fb05 2510 	mls	r5, r5, r0, r2
 801e7d6:	fb97 f7f1 	sdiv	r7, r7, r1
 801e7da:	fb15 f503 	smulbb	r5, r5, r3
 801e7de:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801e7e2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801e7e6:	3701      	adds	r7, #1
 801e7e8:	440d      	add	r5, r1
 801e7ea:	4419      	add	r1, r3
 801e7ec:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801e7f0:	b2bf      	uxth	r7, r7
 801e7f2:	441a      	add	r2, r3
 801e7f4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801e7f8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801e7fc:	00bf      	lsls	r7, r7, #2
 801e7fe:	9304      	str	r3, [sp, #16]
 801e800:	b2ad      	uxth	r5, r5
 801e802:	4bb0      	ldr	r3, [pc, #704]	; (801eac4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801e804:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801e808:	6818      	ldr	r0, [r3, #0]
 801e80a:	6803      	ldr	r3, [r0, #0]
 801e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e80e:	4798      	blx	r3
 801e810:	4bad      	ldr	r3, [pc, #692]	; (801eac8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801e812:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801e816:	2d00      	cmp	r5, #0
 801e818:	881a      	ldrh	r2, [r3, #0]
 801e81a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 801e81e:	fb02 f606 	mul.w	r6, r2, r6
 801e822:	fb02 c101 	mla	r1, r2, r1, ip
 801e826:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e82a:	9316      	str	r3, [sp, #88]	; 0x58
 801e82c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e830:	4ba6      	ldr	r3, [pc, #664]	; (801eacc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801e832:	eb00 0801 	add.w	r8, r0, r1
 801e836:	bf18      	it	ne
 801e838:	2100      	movne	r1, #0
 801e83a:	eba3 0304 	sub.w	r3, r3, r4
 801e83e:	eb08 0206 	add.w	r2, r8, r6
 801e842:	9317      	str	r3, [sp, #92]	; 0x5c
 801e844:	9208      	str	r2, [sp, #32]
 801e846:	f107 0204 	add.w	r2, r7, #4
 801e84a:	9211      	str	r2, [sp, #68]	; 0x44
 801e84c:	9a04      	ldr	r2, [sp, #16]
 801e84e:	bf08      	it	eq
 801e850:	4611      	moveq	r1, r2
 801e852:	2200      	movs	r2, #0
 801e854:	b289      	uxth	r1, r1
 801e856:	920b      	str	r2, [sp, #44]	; 0x2c
 801e858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e85c:	fa12 f383 	uxtah	r3, r2, r3
 801e860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e866:	3304      	adds	r3, #4
 801e868:	9306      	str	r3, [sp, #24]
 801e86a:	9b08      	ldr	r3, [sp, #32]
 801e86c:	4543      	cmp	r3, r8
 801e86e:	f240 815e 	bls.w	801eb2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801e872:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801e876:	f04f 0b01 	mov.w	fp, #1
 801e87a:	9a01      	ldr	r2, [sp, #4]
 801e87c:	9806      	ldr	r0, [sp, #24]
 801e87e:	465e      	mov	r6, fp
 801e880:	f8cd b008 	str.w	fp, [sp, #8]
 801e884:	7800      	ldrb	r0, [r0, #0]
 801e886:	fbb5 f3f3 	udiv	r3, r5, r3
 801e88a:	1ad3      	subs	r3, r2, r3
 801e88c:	900e      	str	r0, [sp, #56]	; 0x38
 801e88e:	3001      	adds	r0, #1
 801e890:	b29b      	uxth	r3, r3
 801e892:	9005      	str	r0, [sp, #20]
 801e894:	9312      	str	r3, [sp, #72]	; 0x48
 801e896:	9b06      	ldr	r3, [sp, #24]
 801e898:	785a      	ldrb	r2, [r3, #1]
 801e89a:	789b      	ldrb	r3, [r3, #2]
 801e89c:	021b      	lsls	r3, r3, #8
 801e89e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e8a2:	9a06      	ldr	r2, [sp, #24]
 801e8a4:	78d2      	ldrb	r2, [r2, #3]
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8aa:	441a      	add	r2, r3
 801e8ac:	1c50      	adds	r0, r2, #1
 801e8ae:	7852      	ldrb	r2, [r2, #1]
 801e8b0:	9003      	str	r0, [sp, #12]
 801e8b2:	0212      	lsls	r2, r2, #8
 801e8b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e8b6:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801e8ba:	5cc3      	ldrb	r3, [r0, r3]
 801e8bc:	431a      	orrs	r2, r3
 801e8be:	b293      	uxth	r3, r2
 801e8c0:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801e8c4:	930a      	str	r3, [sp, #40]	; 0x28
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	461a      	mov	r2, r3
 801e8ca:	9307      	str	r3, [sp, #28]
 801e8cc:	2d00      	cmp	r5, #0
 801e8ce:	d07c      	beq.n	801e9ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e8d0:	42ae      	cmp	r6, r5
 801e8d2:	d26c      	bcs.n	801e9ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801e8d4:	9b08      	ldr	r3, [sp, #32]
 801e8d6:	1bad      	subs	r5, r5, r6
 801e8d8:	4608      	mov	r0, r1
 801e8da:	4543      	cmp	r3, r8
 801e8dc:	b2ad      	uxth	r5, r5
 801e8de:	d802      	bhi.n	801e8e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801e8e0:	e071      	b.n	801e9c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d15d      	bne.n	801e9a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801e8e6:	9b03      	ldr	r3, [sp, #12]
 801e8e8:	9a02      	ldr	r2, [sp, #8]
 801e8ea:	785b      	ldrb	r3, [r3, #1]
 801e8ec:	f1c2 0207 	rsb	r2, r2, #7
 801e8f0:	9902      	ldr	r1, [sp, #8]
 801e8f2:	4093      	lsls	r3, r2
 801e8f4:	005b      	lsls	r3, r3, #1
 801e8f6:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801e8fa:	9b03      	ldr	r3, [sp, #12]
 801e8fc:	781b      	ldrb	r3, [r3, #0]
 801e8fe:	410b      	asrs	r3, r1
 801e900:	3101      	adds	r1, #1
 801e902:	b2c9      	uxtb	r1, r1
 801e904:	b2db      	uxtb	r3, r3
 801e906:	2908      	cmp	r1, #8
 801e908:	9102      	str	r1, [sp, #8]
 801e90a:	9903      	ldr	r1, [sp, #12]
 801e90c:	ea43 0302 	orr.w	r3, r3, r2
 801e910:	bf0c      	ite	eq
 801e912:	3102      	addeq	r1, #2
 801e914:	3101      	addne	r1, #1
 801e916:	b29a      	uxth	r2, r3
 801e918:	bf05      	ittet	eq
 801e91a:	9103      	streq	r1, [sp, #12]
 801e91c:	2100      	moveq	r1, #0
 801e91e:	9103      	strne	r1, [sp, #12]
 801e920:	9102      	streq	r1, [sp, #8]
 801e922:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e924:	4291      	cmp	r1, r2
 801e926:	d30a      	bcc.n	801e93e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801e928:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801e92c:	2301      	movs	r3, #1
 801e92e:	9905      	ldr	r1, [sp, #20]
 801e930:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e934:	d30f      	bcc.n	801e956 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801e936:	469b      	mov	fp, r3
 801e938:	f04f 0c00 	mov.w	ip, #0
 801e93c:	e032      	b.n	801e9a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801e93e:	9b05      	ldr	r3, [sp, #20]
 801e940:	429a      	cmp	r2, r3
 801e942:	d318      	bcc.n	801e976 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801e944:	eb04 030b 	add.w	r3, r4, fp
 801e948:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801e94c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801e950:	f10b 0301 	add.w	r3, fp, #1
 801e954:	b29b      	uxth	r3, r3
 801e956:	9905      	ldr	r1, [sp, #20]
 801e958:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801e95c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e960:	710e      	strb	r6, [r1, #4]
 801e962:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e964:	80ce      	strh	r6, [r1, #6]
 801e966:	f10b 0601 	add.w	r6, fp, #1
 801e96a:	714e      	strb	r6, [r1, #5]
 801e96c:	9905      	ldr	r1, [sp, #20]
 801e96e:	3101      	adds	r1, #1
 801e970:	b289      	uxth	r1, r1
 801e972:	9105      	str	r1, [sp, #20]
 801e974:	e7df      	b.n	801e936 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801e976:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e97a:	4611      	mov	r1, r2
 801e97c:	795b      	ldrb	r3, [r3, #5]
 801e97e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801e982:	4426      	add	r6, r4
 801e984:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e986:	4437      	add	r7, r6
 801e988:	2f00      	cmp	r7, #0
 801e98a:	dd06      	ble.n	801e99a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801e98c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e990:	790f      	ldrb	r7, [r1, #4]
 801e992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e996:	88c9      	ldrh	r1, [r1, #6]
 801e998:	e7f4      	b.n	801e984 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801e99a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801e99e:	b29b      	uxth	r3, r3
 801e9a0:	e7c5      	b.n	801e92e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801e9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9a4:	920a      	str	r2, [sp, #40]	; 0x28
 801e9a6:	4601      	mov	r1, r0
 801e9a8:	4662      	mov	r2, ip
 801e9aa:	461e      	mov	r6, r3
 801e9ac:	e78e      	b.n	801e8cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801e9ae:	1b73      	subs	r3, r6, r5
 801e9b0:	eb02 0c05 	add.w	ip, r2, r5
 801e9b4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e9b8:	b29b      	uxth	r3, r3
 801e9ba:	fa1f fc8c 	uxth.w	ip, ip
 801e9be:	2500      	movs	r5, #0
 801e9c0:	9a08      	ldr	r2, [sp, #32]
 801e9c2:	4542      	cmp	r2, r8
 801e9c4:	d88d      	bhi.n	801e8e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801e9c6:	4601      	mov	r1, r0
 801e9c8:	e74f      	b.n	801e86a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801e9ca:	428e      	cmp	r6, r1
 801e9cc:	bf2b      	itete	cs
 801e9ce:	468e      	movcs	lr, r1
 801e9d0:	46b6      	movcc	lr, r6
 801e9d2:	1a73      	subcs	r3, r6, r1
 801e9d4:	1b88      	subcc	r0, r1, r6
 801e9d6:	eb02 0c0e 	add.w	ip, r2, lr
 801e9da:	bf2b      	itete	cs
 801e9dc:	4628      	movcs	r0, r5
 801e9de:	462b      	movcc	r3, r5
 801e9e0:	b29b      	uxthcs	r3, r3
 801e9e2:	b280      	uxthcc	r0, r0
 801e9e4:	f108 0503 	add.w	r5, r8, #3
 801e9e8:	fa1f fc8c 	uxth.w	ip, ip
 801e9ec:	4562      	cmp	r2, ip
 801e9ee:	d06f      	beq.n	801ead0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801e9f0:	1c57      	adds	r7, r2, #1
 801e9f2:	4422      	add	r2, r4
 801e9f4:	b2bf      	uxth	r7, r7
 801e9f6:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801e9fa:	9713      	str	r7, [sp, #76]	; 0x4c
 801e9fc:	2704      	movs	r7, #4
 801e9fe:	46b9      	mov	r9, r7
 801ea00:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ea02:	fb19 7202 	smlabb	r2, r9, r2, r7
 801ea06:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ea08:	58bf      	ldr	r7, [r7, r2]
 801ea0a:	0e3a      	lsrs	r2, r7, #24
 801ea0c:	9209      	str	r2, [sp, #36]	; 0x24
 801ea0e:	d016      	beq.n	801ea3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801ea10:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ea14:	fa5f fa87 	uxtb.w	sl, r7
 801ea18:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ea1c:	fa5f f289 	uxtb.w	r2, r9
 801ea20:	9214      	str	r2, [sp, #80]	; 0x50
 801ea22:	b2fa      	uxtb	r2, r7
 801ea24:	9215      	str	r2, [sp, #84]	; 0x54
 801ea26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea28:	2aff      	cmp	r2, #255	; 0xff
 801ea2a:	d10b      	bne.n	801ea44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ea2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea2e:	2aff      	cmp	r2, #255	; 0xff
 801ea30:	d108      	bne.n	801ea44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ea32:	f805 ac03 	strb.w	sl, [r5, #-3]
 801ea36:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ea3a:	f805 7c01 	strb.w	r7, [r5, #-1]
 801ea3e:	3503      	adds	r5, #3
 801ea40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea42:	e7d3      	b.n	801e9ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801ea44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ea46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea48:	437a      	muls	r2, r7
 801ea4a:	1c57      	adds	r7, r2, #1
 801ea4c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801ea50:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801ea54:	1212      	asrs	r2, r2, #8
 801ea56:	fa1f f982 	uxth.w	r9, r2
 801ea5a:	43d2      	mvns	r2, r2
 801ea5c:	fb1a fa09 	smulbb	sl, sl, r9
 801ea60:	b2d2      	uxtb	r2, r2
 801ea62:	fb07 a702 	mla	r7, r7, r2, sl
 801ea66:	9209      	str	r2, [sp, #36]	; 0x24
 801ea68:	b2bf      	uxth	r7, r7
 801ea6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea6c:	f107 0a01 	add.w	sl, r7, #1
 801ea70:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ea74:	fb12 fa09 	smulbb	sl, r2, r9
 801ea78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea7a:	123f      	asrs	r7, r7, #8
 801ea7c:	f805 7c03 	strb.w	r7, [r5, #-3]
 801ea80:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801ea84:	fb07 aa02 	mla	sl, r7, r2, sl
 801ea88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ea8a:	fb12 f909 	smulbb	r9, r2, r9
 801ea8e:	fa1f fa8a 	uxth.w	sl, sl
 801ea92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea94:	f10a 0701 	add.w	r7, sl, #1
 801ea98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea9c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801eaa0:	fb07 9902 	mla	r9, r7, r2, r9
 801eaa4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eaa8:	fa1f f989 	uxth.w	r9, r9
 801eaac:	f805 ac02 	strb.w	sl, [r5, #-2]
 801eab0:	f109 0201 	add.w	r2, r9, #1
 801eab4:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801eab8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eabc:	f805 9c01 	strb.w	r9, [r5, #-1]
 801eac0:	e7bd      	b.n	801ea3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801eac2:	bf00      	nop
 801eac4:	24006d7c 	.word	0x24006d7c
 801eac8:	24006d76 	.word	0x24006d76
 801eacc:	fffff7fb 	.word	0xfffff7fb
 801ead0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ead4:	428e      	cmp	r6, r1
 801ead6:	44f0      	add	r8, lr
 801ead8:	f4ff af71 	bcc.w	801e9be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801eadc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801eade:	9904      	ldr	r1, [sp, #16]
 801eae0:	8812      	ldrh	r2, [r2, #0]
 801eae2:	1a52      	subs	r2, r2, r1
 801eae4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eae6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eaea:	4490      	add	r8, r2
 801eaec:	9a07      	ldr	r2, [sp, #28]
 801eaee:	3201      	adds	r2, #1
 801eaf0:	428a      	cmp	r2, r1
 801eaf2:	9207      	str	r2, [sp, #28]
 801eaf4:	d111      	bne.n	801eb1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801eaf6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801eafa:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 801eafe:	9b04      	ldr	r3, [sp, #16]
 801eb00:	eba5 050c 	sub.w	r5, r5, ip
 801eb04:	b2ad      	uxth	r5, r5
 801eb06:	2d00      	cmp	r5, #0
 801eb08:	bf08      	it	eq
 801eb0a:	4619      	moveq	r1, r3
 801eb0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb0e:	bf18      	it	ne
 801eb10:	2100      	movne	r1, #0
 801eb12:	3301      	adds	r3, #1
 801eb14:	b289      	uxth	r1, r1
 801eb16:	930b      	str	r3, [sp, #44]	; 0x2c
 801eb18:	e69e      	b.n	801e858 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801eb1a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801eb1e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801eb22:	1a2d      	subs	r5, r5, r0
 801eb24:	b2ad      	uxth	r5, r5
 801eb26:	2d00      	cmp	r5, #0
 801eb28:	bf18      	it	ne
 801eb2a:	2000      	movne	r0, #0
 801eb2c:	e748      	b.n	801e9c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801eb2e:	4b04      	ldr	r3, [pc, #16]	; (801eb40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801eb30:	6818      	ldr	r0, [r3, #0]
 801eb32:	6803      	ldr	r3, [r0, #0]
 801eb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb36:	4798      	blx	r3
 801eb38:	b01d      	add	sp, #116	; 0x74
 801eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3e:	bf00      	nop
 801eb40:	24006d7c 	.word	0x24006d7c

0801eb44 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb48:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801eb4c:	9c06      	ldr	r4, [sp, #24]
 801eb4e:	2800      	cmp	r0, #0
 801eb50:	d06e      	beq.n	801ec30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801eb52:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801eb56:	2d00      	cmp	r5, #0
 801eb58:	dd6a      	ble.n	801ec30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801eb5a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801eb5e:	f1bc 0f00 	cmp.w	ip, #0
 801eb62:	dd65      	ble.n	801ec30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801eb64:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801eb68:	28ff      	cmp	r0, #255	; 0xff
 801eb6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb6e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801eb72:	fb02 3306 	mla	r3, r2, r6, r3
 801eb76:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801eb7a:	b2e4      	uxtb	r4, r4
 801eb7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb80:	4419      	add	r1, r3
 801eb82:	fb02 f30c 	mul.w	r3, r2, ip
 801eb86:	eba2 0205 	sub.w	r2, r2, r5
 801eb8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb96:	440b      	add	r3, r1
 801eb98:	d03e      	beq.n	801ec18 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801eb9a:	fa1f fc80 	uxth.w	ip, r0
 801eb9e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801eba2:	fb06 f60c 	mul.w	r6, r6, ip
 801eba6:	b280      	uxth	r0, r0
 801eba8:	fb07 f70c 	mul.w	r7, r7, ip
 801ebac:	fb04 f40c 	mul.w	r4, r4, ip
 801ebb0:	4299      	cmp	r1, r3
 801ebb2:	d23d      	bcs.n	801ec30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ebb4:	eb01 0c05 	add.w	ip, r1, r5
 801ebb8:	458c      	cmp	ip, r1
 801ebba:	f101 0e03 	add.w	lr, r1, #3
 801ebbe:	d928      	bls.n	801ec12 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801ebc0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ebc4:	fb11 f100 	smulbb	r1, r1, r0
 801ebc8:	4421      	add	r1, r4
 801ebca:	b289      	uxth	r1, r1
 801ebcc:	f101 0801 	add.w	r8, r1, #1
 801ebd0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ebd4:	1209      	asrs	r1, r1, #8
 801ebd6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ebda:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801ebde:	fb11 f100 	smulbb	r1, r1, r0
 801ebe2:	4439      	add	r1, r7
 801ebe4:	b289      	uxth	r1, r1
 801ebe6:	f101 0801 	add.w	r8, r1, #1
 801ebea:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ebee:	1209      	asrs	r1, r1, #8
 801ebf0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ebf4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ebf8:	fb11 f100 	smulbb	r1, r1, r0
 801ebfc:	4431      	add	r1, r6
 801ebfe:	b289      	uxth	r1, r1
 801ec00:	f101 0801 	add.w	r8, r1, #1
 801ec04:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ec08:	1209      	asrs	r1, r1, #8
 801ec0a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801ec0e:	4671      	mov	r1, lr
 801ec10:	e7d2      	b.n	801ebb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801ec12:	4411      	add	r1, r2
 801ec14:	e7cc      	b.n	801ebb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801ec16:	4411      	add	r1, r2
 801ec18:	4299      	cmp	r1, r3
 801ec1a:	d209      	bcs.n	801ec30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ec1c:	1948      	adds	r0, r1, r5
 801ec1e:	4281      	cmp	r1, r0
 801ec20:	d2f9      	bcs.n	801ec16 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801ec22:	700c      	strb	r4, [r1, #0]
 801ec24:	3103      	adds	r1, #3
 801ec26:	f801 7c02 	strb.w	r7, [r1, #-2]
 801ec2a:	f801 6c01 	strb.w	r6, [r1, #-1]
 801ec2e:	e7f6      	b.n	801ec1e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801ec30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ec34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec38:	b093      	sub	sp, #76	; 0x4c
 801ec3a:	4699      	mov	r9, r3
 801ec3c:	4617      	mov	r7, r2
 801ec3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ec42:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801ec46:	4604      	mov	r4, r0
 801ec48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ec4c:	a80c      	add	r0, sp, #48	; 0x30
 801ec4e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801ec52:	460d      	mov	r5, r1
 801ec54:	4649      	mov	r1, r9
 801ec56:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ec5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ec5e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801ec62:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801ec66:	f7f7 f931 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801ec6a:	4639      	mov	r1, r7
 801ec6c:	a80c      	add	r0, sp, #48	; 0x30
 801ec6e:	f7f7 f92d 	bl	8015ecc <_ZN8touchgfx4RectaNERKS0_>
 801ec72:	4b78      	ldr	r3, [pc, #480]	; (801ee54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ec74:	8818      	ldrh	r0, [r3, #0]
 801ec76:	4b78      	ldr	r3, [pc, #480]	; (801ee58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801ec78:	b202      	sxth	r2, r0
 801ec7a:	8819      	ldrh	r1, [r3, #0]
 801ec7c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801ec80:	b20f      	sxth	r7, r1
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	da07      	bge.n	801ec96 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801ec86:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801ec8a:	4463      	add	r3, ip
 801ec8c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ec90:	2300      	movs	r3, #0
 801ec92:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801ec96:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801ec9a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801ec9e:	1ad2      	subs	r2, r2, r3
 801eca0:	4594      	cmp	ip, r2
 801eca2:	bfc4      	itt	gt
 801eca4:	1ac2      	subgt	r2, r0, r3
 801eca6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801ecaa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ecae:	2a00      	cmp	r2, #0
 801ecb0:	da07      	bge.n	801ecc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801ecb2:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801ecb6:	4462      	add	r2, ip
 801ecb8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801ecbc:	2200      	movs	r2, #0
 801ecbe:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801ecc2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ecc6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801ecca:	1abf      	subs	r7, r7, r2
 801eccc:	45bc      	cmp	ip, r7
 801ecce:	f8df c190 	ldr.w	ip, [pc, #400]	; 801ee60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801ecd2:	bfc8      	it	gt
 801ecd4:	1a8f      	subgt	r7, r1, r2
 801ecd6:	f89c c000 	ldrb.w	ip, [ip]
 801ecda:	bfc8      	it	gt
 801ecdc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801ece0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801ece4:	f1bc 0f00 	cmp.w	ip, #0
 801ece8:	d176      	bne.n	801edd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801ecea:	4287      	cmp	r7, r0
 801ecec:	bf14      	ite	ne
 801ecee:	2100      	movne	r1, #0
 801ecf0:	2101      	moveq	r1, #1
 801ecf2:	2f00      	cmp	r7, #0
 801ecf4:	9107      	str	r1, [sp, #28]
 801ecf6:	dd73      	ble.n	801ede0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ecf8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801ecfc:	2900      	cmp	r1, #0
 801ecfe:	9104      	str	r1, [sp, #16]
 801ed00:	dd6e      	ble.n	801ede0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ed02:	f8b9 1000 	ldrh.w	r1, [r9]
 801ed06:	a80e      	add	r0, sp, #56	; 0x38
 801ed08:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801ed0c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ed10:	1a5b      	subs	r3, r3, r1
 801ed12:	a910      	add	r1, sp, #64	; 0x40
 801ed14:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ed18:	b21b      	sxth	r3, r3
 801ed1a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801ed1e:	f8df a144 	ldr.w	sl, [pc, #324]	; 801ee64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801ed22:	9305      	str	r3, [sp, #20]
 801ed24:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801ed28:	1ad2      	subs	r2, r2, r3
 801ed2a:	b213      	sxth	r3, r2
 801ed2c:	9306      	str	r3, [sp, #24]
 801ed2e:	9b05      	ldr	r3, [sp, #20]
 801ed30:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801ed34:	9b06      	ldr	r3, [sp, #24]
 801ed36:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ed3a:	9b04      	ldr	r3, [sp, #16]
 801ed3c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ed40:	2300      	movs	r3, #0
 801ed42:	9310      	str	r3, [sp, #64]	; 0x40
 801ed44:	f7fa f8b0 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed48:	4640      	mov	r0, r8
 801ed4a:	f7fa f885 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed4e:	a810      	add	r0, sp, #64	; 0x40
 801ed50:	f7fa f882 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed54:	4b41      	ldr	r3, [pc, #260]	; (801ee5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801ed56:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ed5a:	4628      	mov	r0, r5
 801ed5c:	881b      	ldrh	r3, [r3, #0]
 801ed5e:	9308      	str	r3, [sp, #32]
 801ed60:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ed64:	b21b      	sxth	r3, r3
 801ed66:	9303      	str	r3, [sp, #12]
 801ed68:	682b      	ldr	r3, [r5, #0]
 801ed6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed6c:	4798      	blx	r3
 801ed6e:	9a03      	ldr	r2, [sp, #12]
 801ed70:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ed74:	4681      	mov	r9, r0
 801ed76:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801ed7a:	fb13 f302 	smulbb	r3, r3, r2
 801ed7e:	2203      	movs	r2, #3
 801ed80:	f8da 0000 	ldr.w	r0, [sl]
 801ed84:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ed88:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ed8a:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed8c:	441d      	add	r5, r3
 801ed8e:	6803      	ldr	r3, [r0, #0]
 801ed90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed92:	4798      	blx	r3
 801ed94:	9009      	str	r0, [sp, #36]	; 0x24
 801ed96:	f8da 0000 	ldr.w	r0, [sl]
 801ed9a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ed9e:	6803      	ldr	r3, [r0, #0]
 801eda0:	910a      	str	r1, [sp, #40]	; 0x28
 801eda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eda4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801eda8:	4798      	blx	r3
 801edaa:	f010 0f01 	tst.w	r0, #1
 801edae:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801edb2:	d01e      	beq.n	801edf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801edb4:	f8da 0000 	ldr.w	r0, [sl]
 801edb8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801edbc:	6803      	ldr	r3, [r0, #0]
 801edbe:	9200      	str	r2, [sp, #0]
 801edc0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801edc2:	462b      	mov	r3, r5
 801edc4:	e898 0006 	ldmia.w	r8, {r1, r2}
 801edc8:	47b0      	blx	r6
 801edca:	9b05      	ldr	r3, [sp, #20]
 801edcc:	80a7      	strh	r7, [r4, #4]
 801edce:	8023      	strh	r3, [r4, #0]
 801edd0:	9b06      	ldr	r3, [sp, #24]
 801edd2:	8063      	strh	r3, [r4, #2]
 801edd4:	9b04      	ldr	r3, [sp, #16]
 801edd6:	e007      	b.n	801ede8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801edd8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801eddc:	4288      	cmp	r0, r1
 801edde:	e785      	b.n	801ecec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801ede0:	2300      	movs	r3, #0
 801ede2:	8023      	strh	r3, [r4, #0]
 801ede4:	8063      	strh	r3, [r4, #2]
 801ede6:	80a3      	strh	r3, [r4, #4]
 801ede8:	4620      	mov	r0, r4
 801edea:	80e3      	strh	r3, [r4, #6]
 801edec:	b013      	add	sp, #76	; 0x4c
 801edee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf2:	fb09 f606 	mul.w	r6, r9, r6
 801edf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edf8:	fb11 6602 	smlabb	r6, r1, r2, r6
 801edfc:	9a07      	ldr	r2, [sp, #28]
 801edfe:	4433      	add	r3, r6
 801ee00:	461e      	mov	r6, r3
 801ee02:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ee06:	b16a      	cbz	r2, 801ee24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801ee08:	9a08      	ldr	r2, [sp, #32]
 801ee0a:	4593      	cmp	fp, r2
 801ee0c:	d10a      	bne.n	801ee24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801ee0e:	f8da 0000 	ldr.w	r0, [sl]
 801ee12:	fb09 f303 	mul.w	r3, r9, r3
 801ee16:	4629      	mov	r1, r5
 801ee18:	6802      	ldr	r2, [r0, #0]
 801ee1a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801ee1e:	4632      	mov	r2, r6
 801ee20:	47d0      	blx	sl
 801ee22:	e7d2      	b.n	801edca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801ee24:	9a03      	ldr	r2, [sp, #12]
 801ee26:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801ee64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801ee2a:	fb02 5803 	mla	r8, r2, r3, r5
 801ee2e:	4545      	cmp	r5, r8
 801ee30:	d2cb      	bcs.n	801edca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801ee32:	f8db 0000 	ldr.w	r0, [fp]
 801ee36:	4629      	mov	r1, r5
 801ee38:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801ee3c:	6802      	ldr	r2, [r0, #0]
 801ee3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee42:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801ee46:	4632      	mov	r2, r6
 801ee48:	47d0      	blx	sl
 801ee4a:	9b03      	ldr	r3, [sp, #12]
 801ee4c:	444e      	add	r6, r9
 801ee4e:	441d      	add	r5, r3
 801ee50:	e7ed      	b.n	801ee2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801ee52:	bf00      	nop
 801ee54:	24006d70 	.word	0x24006d70
 801ee58:	24006d72 	.word	0x24006d72
 801ee5c:	24006d76 	.word	0x24006d76
 801ee60:	24006d74 	.word	0x24006d74
 801ee64:	24006d7c 	.word	0x24006d7c

0801ee68 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ee68:	2200      	movs	r2, #0
 801ee6a:	490d      	ldr	r1, [pc, #52]	; (801eea0 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 801ee6c:	6042      	str	r2, [r0, #4]
 801ee6e:	6001      	str	r1, [r0, #0]
 801ee70:	6602      	str	r2, [r0, #96]	; 0x60
 801ee72:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ee76:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ee7a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ee7e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ee82:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ee86:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ee8a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ee8e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ee92:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ee96:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ee9a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801ee9e:	4770      	bx	lr
 801eea0:	080283b8 	.word	0x080283b8

0801eea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801eea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eea8:	b091      	sub	sp, #68	; 0x44
 801eeaa:	4607      	mov	r7, r0
 801eeac:	4688      	mov	r8, r1
 801eeae:	6810      	ldr	r0, [r2, #0]
 801eeb0:	6851      	ldr	r1, [r2, #4]
 801eeb2:	ac0c      	add	r4, sp, #48	; 0x30
 801eeb4:	4616      	mov	r6, r2
 801eeb6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801eeba:	4d64      	ldr	r5, [pc, #400]	; (801f04c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801eebc:	f8df a190 	ldr.w	sl, [pc, #400]	; 801f050 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801eec0:	c403      	stmia	r4!, {r0, r1}
 801eec2:	6818      	ldr	r0, [r3, #0]
 801eec4:	ac0e      	add	r4, sp, #56	; 0x38
 801eec6:	6859      	ldr	r1, [r3, #4]
 801eec8:	c403      	stmia	r4!, {r0, r1}
 801eeca:	a80c      	add	r0, sp, #48	; 0x30
 801eecc:	f7f9 ffc4 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eed0:	4631      	mov	r1, r6
 801eed2:	a80e      	add	r0, sp, #56	; 0x38
 801eed4:	f7f9 ffe8 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eed8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801eedc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eee0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801eee4:	6828      	ldr	r0, [r5, #0]
 801eee6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eeea:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801eeee:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801eef2:	440f      	add	r7, r1
 801eef4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801eef8:	440a      	add	r2, r1
 801eefa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801eefe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ef02:	4413      	add	r3, r2
 801ef04:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ef08:	6803      	ldr	r3, [r0, #0]
 801ef0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef0c:	4798      	blx	r3
 801ef0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ef12:	6828      	ldr	r0, [r5, #0]
 801ef14:	d01f      	beq.n	801ef56 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801ef16:	2201      	movs	r2, #1
 801ef18:	2500      	movs	r5, #0
 801ef1a:	6801      	ldr	r1, [r0, #0]
 801ef1c:	b2a4      	uxth	r4, r4
 801ef1e:	b2b6      	uxth	r6, r6
 801ef20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ef24:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801ef28:	250b      	movs	r5, #11
 801ef2a:	9507      	str	r5, [sp, #28]
 801ef2c:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef30:	f8cd 9010 	str.w	r9, [sp, #16]
 801ef34:	9602      	str	r6, [sp, #8]
 801ef36:	9401      	str	r4, [sp, #4]
 801ef38:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801ef3c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ef40:	9203      	str	r2, [sp, #12]
 801ef42:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ef46:	9200      	str	r2, [sp, #0]
 801ef48:	4642      	mov	r2, r8
 801ef4a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ef4c:	4639      	mov	r1, r7
 801ef4e:	47a0      	blx	r4
 801ef50:	b011      	add	sp, #68	; 0x44
 801ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef56:	6803      	ldr	r3, [r0, #0]
 801ef58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef5a:	4798      	blx	r3
 801ef5c:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef60:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ef64:	f04f 0e04 	mov.w	lr, #4
 801ef68:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ef6c:	436e      	muls	r6, r5
 801ef6e:	fb05 2303 	mla	r3, r5, r3, r2
 801ef72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef76:	1b2d      	subs	r5, r5, r4
 801ef78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef80:	4418      	add	r0, r3
 801ef82:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ef86:	1982      	adds	r2, r0, r6
 801ef88:	1b1b      	subs	r3, r3, r4
 801ef8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef90:	4290      	cmp	r0, r2
 801ef92:	d254      	bcs.n	801f03e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ef94:	eb00 0a04 	add.w	sl, r0, r4
 801ef98:	4550      	cmp	r0, sl
 801ef9a:	d24c      	bcs.n	801f036 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ef9c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801efa0:	fb1e e101 	smlabb	r1, lr, r1, lr
 801efa4:	eb08 0c01 	add.w	ip, r8, r1
 801efa8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801efac:	b173      	cbz	r3, 801efcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801efae:	2bff      	cmp	r3, #255	; 0xff
 801efb0:	f818 b001 	ldrb.w	fp, [r8, r1]
 801efb4:	d10c      	bne.n	801efd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801efb6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801efba:	d109      	bne.n	801efd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801efbc:	f880 b000 	strb.w	fp, [r0]
 801efc0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801efc4:	7043      	strb	r3, [r0, #1]
 801efc6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801efca:	7083      	strb	r3, [r0, #2]
 801efcc:	3003      	adds	r0, #3
 801efce:	e7e3      	b.n	801ef98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801efd0:	fb09 f103 	mul.w	r1, r9, r3
 801efd4:	1c4b      	adds	r3, r1, #1
 801efd6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801efda:	7801      	ldrb	r1, [r0, #0]
 801efdc:	121b      	asrs	r3, r3, #8
 801efde:	b29e      	uxth	r6, r3
 801efe0:	43db      	mvns	r3, r3
 801efe2:	fb1b fb06 	smulbb	fp, fp, r6
 801efe6:	b2db      	uxtb	r3, r3
 801efe8:	fb01 b103 	mla	r1, r1, r3, fp
 801efec:	b289      	uxth	r1, r1
 801efee:	f101 0b01 	add.w	fp, r1, #1
 801eff2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801eff6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801effa:	fb1b fb03 	smulbb	fp, fp, r3
 801effe:	1209      	asrs	r1, r1, #8
 801f000:	7001      	strb	r1, [r0, #0]
 801f002:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f006:	fb01 b106 	mla	r1, r1, r6, fp
 801f00a:	b289      	uxth	r1, r1
 801f00c:	f101 0b01 	add.w	fp, r1, #1
 801f010:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f014:	1209      	asrs	r1, r1, #8
 801f016:	7041      	strb	r1, [r0, #1]
 801f018:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801f01c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801f020:	fb1c f303 	smulbb	r3, ip, r3
 801f024:	fb01 3606 	mla	r6, r1, r6, r3
 801f028:	b2b6      	uxth	r6, r6
 801f02a:	1c73      	adds	r3, r6, #1
 801f02c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f030:	1236      	asrs	r6, r6, #8
 801f032:	7086      	strb	r6, [r0, #2]
 801f034:	e7ca      	b.n	801efcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801f036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f038:	4428      	add	r0, r5
 801f03a:	441f      	add	r7, r3
 801f03c:	e7a8      	b.n	801ef90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801f03e:	4b03      	ldr	r3, [pc, #12]	; (801f04c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801f040:	6818      	ldr	r0, [r3, #0]
 801f042:	6803      	ldr	r3, [r0, #0]
 801f044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f046:	4798      	blx	r3
 801f048:	e782      	b.n	801ef50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801f04a:	bf00      	nop
 801f04c:	24006d7c 	.word	0x24006d7c
 801f050:	24006d76 	.word	0x24006d76

0801f054 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f058:	b091      	sub	sp, #68	; 0x44
 801f05a:	4680      	mov	r8, r0
 801f05c:	460e      	mov	r6, r1
 801f05e:	6810      	ldr	r0, [r2, #0]
 801f060:	6851      	ldr	r1, [r2, #4]
 801f062:	ad0c      	add	r5, sp, #48	; 0x30
 801f064:	4614      	mov	r4, r2
 801f066:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f06a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801f204 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801f06e:	f8df a198 	ldr.w	sl, [pc, #408]	; 801f208 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801f072:	c503      	stmia	r5!, {r0, r1}
 801f074:	6818      	ldr	r0, [r3, #0]
 801f076:	ad0e      	add	r5, sp, #56	; 0x38
 801f078:	6859      	ldr	r1, [r3, #4]
 801f07a:	c503      	stmia	r5!, {r0, r1}
 801f07c:	a80c      	add	r0, sp, #48	; 0x30
 801f07e:	f7f9 feeb 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f082:	4621      	mov	r1, r4
 801f084:	a80e      	add	r0, sp, #56	; 0x38
 801f086:	f7f9 ff0f 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f08a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f08e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f092:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f096:	f8d9 0000 	ldr.w	r0, [r9]
 801f09a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f09e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801f0a2:	eb08 0401 	add.w	r4, r8, r1
 801f0a6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f0aa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f0ae:	440a      	add	r2, r1
 801f0b0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f0b4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f0b8:	4413      	add	r3, r2
 801f0ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f0be:	6803      	ldr	r3, [r0, #0]
 801f0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f0c2:	4798      	blx	r3
 801f0c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f0c8:	f8d9 0000 	ldr.w	r0, [r9]
 801f0cc:	d022      	beq.n	801f114 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801f0ce:	2200      	movs	r2, #0
 801f0d0:	f04f 0c01 	mov.w	ip, #1
 801f0d4:	6801      	ldr	r1, [r0, #0]
 801f0d6:	b2ad      	uxth	r5, r5
 801f0d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f0dc:	e9cd c208 	strd	ip, r2, [sp, #32]
 801f0e0:	f04f 0c0b 	mov.w	ip, #11
 801f0e4:	f8cd c01c 	str.w	ip, [sp, #28]
 801f0e8:	f8ba c000 	ldrh.w	ip, [sl]
 801f0ec:	9704      	str	r7, [sp, #16]
 801f0ee:	9502      	str	r5, [sp, #8]
 801f0f0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801f0f4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f0f8:	9203      	str	r2, [sp, #12]
 801f0fa:	fa1f f288 	uxth.w	r2, r8
 801f0fe:	9201      	str	r2, [sp, #4]
 801f100:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f104:	9200      	str	r2, [sp, #0]
 801f106:	4632      	mov	r2, r6
 801f108:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801f10a:	4621      	mov	r1, r4
 801f10c:	47a8      	blx	r5
 801f10e:	b011      	add	sp, #68	; 0x44
 801f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f114:	6803      	ldr	r3, [r0, #0]
 801f116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f118:	4798      	blx	r3
 801f11a:	f8ba 2000 	ldrh.w	r2, [sl]
 801f11e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f122:	f04f 0e03 	mov.w	lr, #3
 801f126:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801f12a:	4355      	muls	r5, r2
 801f12c:	fa1f fc87 	uxth.w	ip, r7
 801f130:	fb02 1303 	mla	r3, r2, r3, r1
 801f134:	eba2 0208 	sub.w	r2, r2, r8
 801f138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f13c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f140:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f144:	4418      	add	r0, r3
 801f146:	920b      	str	r2, [sp, #44]	; 0x2c
 801f148:	1943      	adds	r3, r0, r5
 801f14a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f14e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801f152:	eba2 0208 	sub.w	r2, r2, r8
 801f156:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f15a:	b2ad      	uxth	r5, r5
 801f15c:	4298      	cmp	r0, r3
 801f15e:	d24a      	bcs.n	801f1f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801f160:	eb00 0908 	add.w	r9, r0, r8
 801f164:	4621      	mov	r1, r4
 801f166:	4548      	cmp	r0, r9
 801f168:	460c      	mov	r4, r1
 801f16a:	d240      	bcs.n	801f1ee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801f16c:	f04f 0a04 	mov.w	sl, #4
 801f170:	7824      	ldrb	r4, [r4, #0]
 801f172:	2fff      	cmp	r7, #255	; 0xff
 801f174:	f101 0101 	add.w	r1, r1, #1
 801f178:	fb1e a404 	smlabb	r4, lr, r4, sl
 801f17c:	eb06 0a04 	add.w	sl, r6, r4
 801f180:	f816 b004 	ldrb.w	fp, [r6, r4]
 801f184:	d02b      	beq.n	801f1de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801f186:	7804      	ldrb	r4, [r0, #0]
 801f188:	fb14 f405 	smulbb	r4, r4, r5
 801f18c:	fb0b 440c 	mla	r4, fp, ip, r4
 801f190:	b2a4      	uxth	r4, r4
 801f192:	f104 0b01 	add.w	fp, r4, #1
 801f196:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f19a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f19e:	fb1b fb05 	smulbb	fp, fp, r5
 801f1a2:	1224      	asrs	r4, r4, #8
 801f1a4:	7004      	strb	r4, [r0, #0]
 801f1a6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f1aa:	fb04 b40c 	mla	r4, r4, ip, fp
 801f1ae:	b2a4      	uxth	r4, r4
 801f1b0:	f104 0b01 	add.w	fp, r4, #1
 801f1b4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f1b8:	1224      	asrs	r4, r4, #8
 801f1ba:	7044      	strb	r4, [r0, #1]
 801f1bc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f1c0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f1c4:	fb1a fa05 	smulbb	sl, sl, r5
 801f1c8:	fb04 a40c 	mla	r4, r4, ip, sl
 801f1cc:	b2a4      	uxth	r4, r4
 801f1ce:	f104 0a01 	add.w	sl, r4, #1
 801f1d2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f1d6:	1224      	asrs	r4, r4, #8
 801f1d8:	7084      	strb	r4, [r0, #2]
 801f1da:	3003      	adds	r0, #3
 801f1dc:	e7c3      	b.n	801f166 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801f1de:	f880 b000 	strb.w	fp, [r0]
 801f1e2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f1e6:	7044      	strb	r4, [r0, #1]
 801f1e8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f1ec:	e7f4      	b.n	801f1d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801f1ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1f0:	4420      	add	r0, r4
 801f1f2:	188c      	adds	r4, r1, r2
 801f1f4:	e7b2      	b.n	801f15c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801f1f6:	4b03      	ldr	r3, [pc, #12]	; (801f204 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801f1f8:	6818      	ldr	r0, [r3, #0]
 801f1fa:	6803      	ldr	r3, [r0, #0]
 801f1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1fe:	4798      	blx	r3
 801f200:	e785      	b.n	801f10e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801f202:	bf00      	nop
 801f204:	24006d7c 	.word	0x24006d7c
 801f208:	24006d76 	.word	0x24006d76

0801f20c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f20c:	b4f0      	push	{r4, r5, r6, r7}
 801f20e:	460c      	mov	r4, r1
 801f210:	4611      	mov	r1, r2
 801f212:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f216:	461a      	mov	r2, r3
 801f218:	780f      	ldrb	r7, [r1, #0]
 801f21a:	9b04      	ldr	r3, [sp, #16]
 801f21c:	784e      	ldrb	r6, [r1, #1]
 801f21e:	b11f      	cbz	r7, 801f228 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801f220:	2f01      	cmp	r7, #1
 801f222:	d01d      	beq.n	801f260 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801f224:	bcf0      	pop	{r4, r5, r6, r7}
 801f226:	4770      	bx	lr
 801f228:	2e03      	cmp	r6, #3
 801f22a:	d8fb      	bhi.n	801f224 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f22c:	e8df f006 	tbb	[pc, r6]
 801f230:	16140702 	.word	0x16140702
 801f234:	9504      	str	r5, [sp, #16]
 801f236:	4620      	mov	r0, r4
 801f238:	bcf0      	pop	{r4, r5, r6, r7}
 801f23a:	f7ff be33 	b.w	801eea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f23e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f240:	2800      	cmp	r0, #0
 801f242:	d0ef      	beq.n	801f224 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f244:	6806      	ldr	r6, [r0, #0]
 801f246:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801f24a:	68f5      	ldr	r5, [r6, #12]
 801f24c:	4613      	mov	r3, r2
 801f24e:	46ac      	mov	ip, r5
 801f250:	460a      	mov	r2, r1
 801f252:	4621      	mov	r1, r4
 801f254:	bcf0      	pop	{r4, r5, r6, r7}
 801f256:	4760      	bx	ip
 801f258:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f25a:	e7f1      	b.n	801f240 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801f25c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f25e:	e7ef      	b.n	801f240 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801f260:	2e03      	cmp	r6, #3
 801f262:	d8df      	bhi.n	801f224 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f264:	e8df f006 	tbb	[pc, r6]
 801f268:	110f0702 	.word	0x110f0702
 801f26c:	9504      	str	r5, [sp, #16]
 801f26e:	4620      	mov	r0, r4
 801f270:	bcf0      	pop	{r4, r5, r6, r7}
 801f272:	f7ff beef 	b.w	801f054 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f276:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f278:	2800      	cmp	r0, #0
 801f27a:	d0d3      	beq.n	801f224 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801f27c:	6806      	ldr	r6, [r0, #0]
 801f27e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801f282:	68b5      	ldr	r5, [r6, #8]
 801f284:	e7e2      	b.n	801f24c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801f286:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f288:	e7f6      	b.n	801f278 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801f28a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f28c:	e7f4      	b.n	801f278 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801f290 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f294:	4605      	mov	r5, r0
 801f296:	b08f      	sub	sp, #60	; 0x3c
 801f298:	460c      	mov	r4, r1
 801f29a:	461f      	mov	r7, r3
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d052      	beq.n	801f346 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801f2a0:	6808      	ldr	r0, [r1, #0]
 801f2a2:	ab0a      	add	r3, sp, #40	; 0x28
 801f2a4:	6849      	ldr	r1, [r1, #4]
 801f2a6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801f470 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801f2aa:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801f474 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801f2ae:	c303      	stmia	r3!, {r0, r1}
 801f2b0:	6810      	ldr	r0, [r2, #0]
 801f2b2:	ab0c      	add	r3, sp, #48	; 0x30
 801f2b4:	6851      	ldr	r1, [r2, #4]
 801f2b6:	c303      	stmia	r3!, {r0, r1}
 801f2b8:	a80a      	add	r0, sp, #40	; 0x28
 801f2ba:	f7f9 fdcd 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2be:	4621      	mov	r1, r4
 801f2c0:	a80c      	add	r0, sp, #48	; 0x30
 801f2c2:	f7f9 fdf1 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2c6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f2ca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801f2ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f2d2:	f8d8 0000 	ldr.w	r0, [r8]
 801f2d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f2da:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801f2de:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801f2e2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f2e6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801f2ea:	440a      	add	r2, r1
 801f2ec:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801f2f0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f2f4:	4413      	add	r3, r2
 801f2f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f2fa:	6803      	ldr	r3, [r0, #0]
 801f2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2fe:	4798      	blx	r3
 801f300:	2fff      	cmp	r7, #255	; 0xff
 801f302:	d023      	beq.n	801f34c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801f304:	f010 0f04 	tst.w	r0, #4
 801f308:	f8d8 0000 	ldr.w	r0, [r8]
 801f30c:	d021      	beq.n	801f352 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801f30e:	2100      	movs	r1, #0
 801f310:	f04f 0e01 	mov.w	lr, #1
 801f314:	f8d0 c000 	ldr.w	ip, [r0]
 801f318:	b2a4      	uxth	r4, r4
 801f31a:	9106      	str	r1, [sp, #24]
 801f31c:	b2b6      	uxth	r6, r6
 801f31e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801f322:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801f326:	e9cd e107 	strd	lr, r1, [sp, #28]
 801f32a:	f8b9 e000 	ldrh.w	lr, [r9]
 801f32e:	9703      	str	r7, [sp, #12]
 801f330:	9401      	str	r4, [sp, #4]
 801f332:	9600      	str	r6, [sp, #0]
 801f334:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f338:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f33c:	9102      	str	r1, [sp, #8]
 801f33e:	4629      	mov	r1, r5
 801f340:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801f344:	47a0      	blx	r4
 801f346:	b00f      	add	sp, #60	; 0x3c
 801f348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f34c:	f010 0f01 	tst.w	r0, #1
 801f350:	e7da      	b.n	801f308 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801f352:	6803      	ldr	r3, [r0, #0]
 801f354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f356:	4798      	blx	r3
 801f358:	f8b9 1000 	ldrh.w	r1, [r9]
 801f35c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801f360:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801f364:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f368:	434c      	muls	r4, r1
 801f36a:	2fff      	cmp	r7, #255	; 0xff
 801f36c:	fb01 2303 	mla	r3, r1, r3, r2
 801f370:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f374:	eba1 0106 	sub.w	r1, r1, r6
 801f378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f37c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f380:	4418      	add	r0, r3
 801f382:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801f386:	eba3 0606 	sub.w	r6, r3, r6
 801f38a:	4404      	add	r4, r0
 801f38c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801f390:	d04a      	beq.n	801f428 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801f392:	43fa      	mvns	r2, r7
 801f394:	b2bb      	uxth	r3, r7
 801f396:	b2d7      	uxtb	r7, r2
 801f398:	42a0      	cmp	r0, r4
 801f39a:	d263      	bcs.n	801f464 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f39c:	eb00 0e0c 	add.w	lr, r0, ip
 801f3a0:	4586      	cmp	lr, r0
 801f3a2:	f100 0803 	add.w	r8, r0, #3
 801f3a6:	d93a      	bls.n	801f41e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801f3a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 801f3ac:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801f3b0:	00d0      	lsls	r0, r2, #3
 801f3b2:	fb19 f907 	smulbb	r9, r9, r7
 801f3b6:	b2c0      	uxtb	r0, r0
 801f3b8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f3bc:	fb00 9003 	mla	r0, r0, r3, r9
 801f3c0:	b280      	uxth	r0, r0
 801f3c2:	f100 0901 	add.w	r9, r0, #1
 801f3c6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f3ca:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801f3ce:	fb19 f907 	smulbb	r9, r9, r7
 801f3d2:	1200      	asrs	r0, r0, #8
 801f3d4:	f808 0c03 	strb.w	r0, [r8, #-3]
 801f3d8:	10d0      	asrs	r0, r2, #3
 801f3da:	1212      	asrs	r2, r2, #8
 801f3dc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f3e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f3e4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801f3e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f3ec:	fb00 9003 	mla	r0, r0, r3, r9
 801f3f0:	b280      	uxth	r0, r0
 801f3f2:	f100 0901 	add.w	r9, r0, #1
 801f3f6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f3fa:	1200      	asrs	r0, r0, #8
 801f3fc:	f808 0c02 	strb.w	r0, [r8, #-2]
 801f400:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801f404:	fb10 f007 	smulbb	r0, r0, r7
 801f408:	fb02 0203 	mla	r2, r2, r3, r0
 801f40c:	b292      	uxth	r2, r2
 801f40e:	1c50      	adds	r0, r2, #1
 801f410:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f414:	4640      	mov	r0, r8
 801f416:	1212      	asrs	r2, r2, #8
 801f418:	f808 2c01 	strb.w	r2, [r8, #-1]
 801f41c:	e7c0      	b.n	801f3a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801f41e:	4408      	add	r0, r1
 801f420:	4435      	add	r5, r6
 801f422:	e7b9      	b.n	801f398 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801f424:	4408      	add	r0, r1
 801f426:	4435      	add	r5, r6
 801f428:	42a0      	cmp	r0, r4
 801f42a:	d21b      	bcs.n	801f464 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f42c:	eb00 070c 	add.w	r7, r0, ip
 801f430:	42b8      	cmp	r0, r7
 801f432:	d2f7      	bcs.n	801f424 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801f434:	f835 3b02 	ldrh.w	r3, [r5], #2
 801f438:	3003      	adds	r0, #3
 801f43a:	00da      	lsls	r2, r3, #3
 801f43c:	b2d2      	uxtb	r2, r2
 801f43e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f442:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f446:	10da      	asrs	r2, r3, #3
 801f448:	121b      	asrs	r3, r3, #8
 801f44a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f44e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f452:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f456:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f45a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f45e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f462:	e7e5      	b.n	801f430 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801f464:	4b02      	ldr	r3, [pc, #8]	; (801f470 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801f466:	6818      	ldr	r0, [r3, #0]
 801f468:	6803      	ldr	r3, [r0, #0]
 801f46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f46c:	4798      	blx	r3
 801f46e:	e76a      	b.n	801f346 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801f470:	24006d7c 	.word	0x24006d7c
 801f474:	24006d76 	.word	0x24006d76

0801f478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f47c:	b08a      	sub	sp, #40	; 0x28
 801f47e:	460d      	mov	r5, r1
 801f480:	4604      	mov	r4, r0
 801f482:	461e      	mov	r6, r3
 801f484:	6808      	ldr	r0, [r1, #0]
 801f486:	ab06      	add	r3, sp, #24
 801f488:	6849      	ldr	r1, [r1, #4]
 801f48a:	4f5d      	ldr	r7, [pc, #372]	; (801f600 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f48c:	c303      	stmia	r3!, {r0, r1}
 801f48e:	6810      	ldr	r0, [r2, #0]
 801f490:	ab08      	add	r3, sp, #32
 801f492:	6851      	ldr	r1, [r2, #4]
 801f494:	c303      	stmia	r3!, {r0, r1}
 801f496:	a806      	add	r0, sp, #24
 801f498:	f7f9 fcde 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f49c:	4629      	mov	r1, r5
 801f49e:	a808      	add	r0, sp, #32
 801f4a0:	f7f9 fd02 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f4a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f4ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f4b0:	6838      	ldr	r0, [r7, #0]
 801f4b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f4b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f4ba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f4be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f4c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f4c6:	440a      	add	r2, r1
 801f4c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f4cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f4d0:	4413      	add	r3, r2
 801f4d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f4d6:	6803      	ldr	r3, [r0, #0]
 801f4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4da:	4798      	blx	r3
 801f4dc:	2eff      	cmp	r6, #255	; 0xff
 801f4de:	d119      	bne.n	801f514 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f4e0:	f010 0f20 	tst.w	r0, #32
 801f4e4:	6838      	ldr	r0, [r7, #0]
 801f4e6:	d018      	beq.n	801f51a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f4e8:	b2ad      	uxth	r5, r5
 801f4ea:	2700      	movs	r7, #0
 801f4ec:	6801      	ldr	r1, [r0, #0]
 801f4ee:	9501      	str	r5, [sp, #4]
 801f4f0:	fa1f f588 	uxth.w	r5, r8
 801f4f4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f4f8:	9500      	str	r5, [sp, #0]
 801f4fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f4fe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801f502:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f506:	9602      	str	r6, [sp, #8]
 801f508:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801f50a:	4621      	mov	r1, r4
 801f50c:	47a8      	blx	r5
 801f50e:	b00a      	add	sp, #40	; 0x28
 801f510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f514:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f518:	e7e4      	b.n	801f4e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801f51a:	6803      	ldr	r3, [r0, #0]
 801f51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f51e:	4798      	blx	r3
 801f520:	4b38      	ldr	r3, [pc, #224]	; (801f604 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801f522:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f526:	f8b3 c000 	ldrh.w	ip, [r3]
 801f52a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f52e:	fb0c f505 	mul.w	r5, ip, r5
 801f532:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801f536:	fb0c 2303 	mla	r3, ip, r3, r2
 801f53a:	ebac 0c08 	sub.w	ip, ip, r8
 801f53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f542:	ebae 0e08 	sub.w	lr, lr, r8
 801f546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f54a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f54e:	4418      	add	r0, r3
 801f550:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f554:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f558:	4405      	add	r5, r0
 801f55a:	42a8      	cmp	r0, r5
 801f55c:	d24a      	bcs.n	801f5f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801f55e:	eb00 0803 	add.w	r8, r0, r3
 801f562:	4540      	cmp	r0, r8
 801f564:	d243      	bcs.n	801f5ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801f566:	78e2      	ldrb	r2, [r4, #3]
 801f568:	b15a      	cbz	r2, 801f582 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f56a:	2aff      	cmp	r2, #255	; 0xff
 801f56c:	f894 9000 	ldrb.w	r9, [r4]
 801f570:	d10a      	bne.n	801f588 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f572:	2eff      	cmp	r6, #255	; 0xff
 801f574:	d108      	bne.n	801f588 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f576:	f880 9000 	strb.w	r9, [r0]
 801f57a:	7862      	ldrb	r2, [r4, #1]
 801f57c:	7042      	strb	r2, [r0, #1]
 801f57e:	78a2      	ldrb	r2, [r4, #2]
 801f580:	7082      	strb	r2, [r0, #2]
 801f582:	3003      	adds	r0, #3
 801f584:	3404      	adds	r4, #4
 801f586:	e7ec      	b.n	801f562 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801f588:	4372      	muls	r2, r6
 801f58a:	1c51      	adds	r1, r2, #1
 801f58c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f590:	1209      	asrs	r1, r1, #8
 801f592:	fa1f fa81 	uxth.w	sl, r1
 801f596:	43c9      	mvns	r1, r1
 801f598:	fb19 f90a 	smulbb	r9, r9, sl
 801f59c:	b2ca      	uxtb	r2, r1
 801f59e:	7801      	ldrb	r1, [r0, #0]
 801f5a0:	fb01 9902 	mla	r9, r1, r2, r9
 801f5a4:	fa1f f989 	uxth.w	r9, r9
 801f5a8:	f109 0101 	add.w	r1, r9, #1
 801f5ac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f5b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f5b4:	f880 9000 	strb.w	r9, [r0]
 801f5b8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f5bc:	7861      	ldrb	r1, [r4, #1]
 801f5be:	fb19 f902 	smulbb	r9, r9, r2
 801f5c2:	fb01 910a 	mla	r1, r1, sl, r9
 801f5c6:	b289      	uxth	r1, r1
 801f5c8:	f101 0901 	add.w	r9, r1, #1
 801f5cc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f5d0:	1209      	asrs	r1, r1, #8
 801f5d2:	7041      	strb	r1, [r0, #1]
 801f5d4:	7881      	ldrb	r1, [r0, #2]
 801f5d6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f5da:	fb11 f202 	smulbb	r2, r1, r2
 801f5de:	fb09 220a 	mla	r2, r9, sl, r2
 801f5e2:	b292      	uxth	r2, r2
 801f5e4:	1c51      	adds	r1, r2, #1
 801f5e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f5ea:	1212      	asrs	r2, r2, #8
 801f5ec:	e7c8      	b.n	801f580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801f5ee:	4460      	add	r0, ip
 801f5f0:	4474      	add	r4, lr
 801f5f2:	e7b2      	b.n	801f55a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801f5f4:	6838      	ldr	r0, [r7, #0]
 801f5f6:	6803      	ldr	r3, [r0, #0]
 801f5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5fa:	4798      	blx	r3
 801f5fc:	e787      	b.n	801f50e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f5fe:	bf00      	nop
 801f600:	24006d7c 	.word	0x24006d7c
 801f604:	24006d76 	.word	0x24006d76

0801f608 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f60c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f610:	4607      	mov	r7, r0
 801f612:	460c      	mov	r4, r1
 801f614:	4692      	mov	sl, r2
 801f616:	4699      	mov	r9, r3
 801f618:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f61a:	b31d      	cbz	r5, 801f664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f61c:	4608      	mov	r0, r1
 801f61e:	f7fc fb91 	bl	801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f622:	4680      	mov	r8, r0
 801f624:	4620      	mov	r0, r4
 801f626:	f7fc fbc1 	bl	801bdac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f62a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f62e:	4620      	mov	r0, r4
 801f630:	f8ad a008 	strh.w	sl, [sp, #8]
 801f634:	f8ad 900a 	strh.w	r9, [sp, #10]
 801f638:	f8ad 800c 	strh.w	r8, [sp, #12]
 801f63c:	f7fc fcba 	bl	801bfb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f640:	280b      	cmp	r0, #11
 801f642:	d80f      	bhi.n	801f664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f644:	e8df f000 	tbb	[pc, r0]
 801f648:	0e062a21 	.word	0x0e062a21
 801f64c:	0e0e0e0e 	.word	0x0e0e0e0e
 801f650:	110e0e0e 	.word	0x110e0e0e
 801f654:	4620      	mov	r0, r4
 801f656:	f7fc fc29 	bl	801beac <_ZNK8touchgfx6Bitmap7getDataEv>
 801f65a:	462b      	mov	r3, r5
 801f65c:	4632      	mov	r2, r6
 801f65e:	a902      	add	r1, sp, #8
 801f660:	f7ff ff0a 	bl	801f478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f664:	b004      	add	sp, #16
 801f666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f66a:	4620      	mov	r0, r4
 801f66c:	f7fc fc1e 	bl	801beac <_ZNK8touchgfx6Bitmap7getDataEv>
 801f670:	4680      	mov	r8, r0
 801f672:	4620      	mov	r0, r4
 801f674:	f7fc fc4a 	bl	801bf0c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f678:	ab02      	add	r3, sp, #8
 801f67a:	4602      	mov	r2, r0
 801f67c:	4641      	mov	r1, r8
 801f67e:	4638      	mov	r0, r7
 801f680:	e9cd 6500 	strd	r6, r5, [sp]
 801f684:	f7ff fdc2 	bl	801f20c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f688:	e7ec      	b.n	801f664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f68a:	4620      	mov	r0, r4
 801f68c:	f7fc fc0e 	bl	801beac <_ZNK8touchgfx6Bitmap7getDataEv>
 801f690:	462b      	mov	r3, r5
 801f692:	4632      	mov	r2, r6
 801f694:	a902      	add	r1, sp, #8
 801f696:	f7ff fdfb 	bl	801f290 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f69a:	e7e3      	b.n	801f664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f69c:	683b      	ldr	r3, [r7, #0]
 801f69e:	4620      	mov	r0, r4
 801f6a0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f6a4:	f7fc fc02 	bl	801beac <_ZNK8touchgfx6Bitmap7getDataEv>
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	4601      	mov	r1, r0
 801f6ac:	aa02      	add	r2, sp, #8
 801f6ae:	4638      	mov	r0, r7
 801f6b0:	e9cd 5300 	strd	r5, r3, [sp]
 801f6b4:	4633      	mov	r3, r6
 801f6b6:	47c0      	blx	r8
 801f6b8:	e7d4      	b.n	801f664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801f6ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f6ba:	b4f0      	push	{r4, r5, r6, r7}
 801f6bc:	4616      	mov	r6, r2
 801f6be:	461c      	mov	r4, r3
 801f6c0:	460d      	mov	r5, r1
 801f6c2:	9a04      	ldr	r2, [sp, #16]
 801f6c4:	2e01      	cmp	r6, #1
 801f6c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f6ca:	d00e      	beq.n	801f6ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801f6cc:	d303      	bcc.n	801f6d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801f6ce:	2e02      	cmp	r6, #2
 801f6d0:	d006      	beq.n	801f6e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801f6d2:	bcf0      	pop	{r4, r5, r6, r7}
 801f6d4:	4770      	bx	lr
 801f6d6:	4621      	mov	r1, r4
 801f6d8:	4628      	mov	r0, r5
 801f6da:	bcf0      	pop	{r4, r5, r6, r7}
 801f6dc:	f7ff bdd8 	b.w	801f290 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f6e0:	4621      	mov	r1, r4
 801f6e2:	4628      	mov	r0, r5
 801f6e4:	bcf0      	pop	{r4, r5, r6, r7}
 801f6e6:	f7ff bec7 	b.w	801f478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f6ea:	6805      	ldr	r5, [r0, #0]
 801f6ec:	2600      	movs	r6, #0
 801f6ee:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f6f2:	68ed      	ldr	r5, [r5, #12]
 801f6f4:	4613      	mov	r3, r2
 801f6f6:	4622      	mov	r2, r4
 801f6f8:	46ac      	mov	ip, r5
 801f6fa:	bcf0      	pop	{r4, r5, r6, r7}
 801f6fc:	4760      	bx	ip
	...

0801f700 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f700:	b160      	cbz	r0, 801f71c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801f702:	2903      	cmp	r1, #3
 801f704:	d818      	bhi.n	801f738 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f706:	e8df f001 	tbb	[pc, r1]
 801f70a:	1902      	.short	0x1902
 801f70c:	1b06      	.short	0x1b06
 801f70e:	4b0e      	ldr	r3, [pc, #56]	; (801f748 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f710:	8818      	ldrh	r0, [r3, #0]
 801f712:	4240      	negs	r0, r0
 801f714:	4770      	bx	lr
 801f716:	4b0c      	ldr	r3, [pc, #48]	; (801f748 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f718:	8818      	ldrh	r0, [r3, #0]
 801f71a:	4770      	bx	lr
 801f71c:	2903      	cmp	r1, #3
 801f71e:	d80b      	bhi.n	801f738 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f720:	a301      	add	r3, pc, #4	; (adr r3, 801f728 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801f722:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f726:	bf00      	nop
 801f728:	0801f73d 	.word	0x0801f73d
 801f72c:	0801f717 	.word	0x0801f717
 801f730:	0801f741 	.word	0x0801f741
 801f734:	0801f70f 	.word	0x0801f70f
 801f738:	2000      	movs	r0, #0
 801f73a:	4770      	bx	lr
 801f73c:	2001      	movs	r0, #1
 801f73e:	4770      	bx	lr
 801f740:	f04f 30ff 	mov.w	r0, #4294967295
 801f744:	4770      	bx	lr
 801f746:	bf00      	nop
 801f748:	24006d76 	.word	0x24006d76

0801f74c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f74c:	b160      	cbz	r0, 801f768 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801f74e:	2903      	cmp	r1, #3
 801f750:	d818      	bhi.n	801f784 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f752:	e8df f001 	tbb	[pc, r1]
 801f756:	0219      	.short	0x0219
 801f758:	051b      	.short	0x051b
 801f75a:	4b0e      	ldr	r3, [pc, #56]	; (801f794 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f75c:	8818      	ldrh	r0, [r3, #0]
 801f75e:	4770      	bx	lr
 801f760:	4b0c      	ldr	r3, [pc, #48]	; (801f794 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f762:	8818      	ldrh	r0, [r3, #0]
 801f764:	4240      	negs	r0, r0
 801f766:	4770      	bx	lr
 801f768:	2903      	cmp	r1, #3
 801f76a:	d80b      	bhi.n	801f784 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f76c:	a301      	add	r3, pc, #4	; (adr r3, 801f774 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801f76e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f772:	bf00      	nop
 801f774:	0801f75b 	.word	0x0801f75b
 801f778:	0801f78d 	.word	0x0801f78d
 801f77c:	0801f761 	.word	0x0801f761
 801f780:	0801f789 	.word	0x0801f789
 801f784:	2000      	movs	r0, #0
 801f786:	4770      	bx	lr
 801f788:	2001      	movs	r0, #1
 801f78a:	4770      	bx	lr
 801f78c:	f04f 30ff 	mov.w	r0, #4294967295
 801f790:	4770      	bx	lr
 801f792:	bf00      	nop
 801f794:	24006d76 	.word	0x24006d76

0801f798 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f79c:	b097      	sub	sp, #92	; 0x5c
 801f79e:	910b      	str	r1, [sp, #44]	; 0x2c
 801f7a0:	a912      	add	r1, sp, #72	; 0x48
 801f7a2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801f7a6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801f7aa:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801f7ae:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801f7b2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801f7b6:	e881 000c 	stmia.w	r1, {r2, r3}
 801f7ba:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801f7be:	930a      	str	r3, [sp, #40]	; 0x28
 801f7c0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f7c4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801f7c8:	9311      	str	r3, [sp, #68]	; 0x44
 801f7ca:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801f7ce:	798d      	ldrb	r5, [r1, #6]
 801f7d0:	930c      	str	r3, [sp, #48]	; 0x30
 801f7d2:	7b4b      	ldrb	r3, [r1, #13]
 801f7d4:	0158      	lsls	r0, r3, #5
 801f7d6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f7da:	4328      	orrs	r0, r5
 801f7dc:	9009      	str	r0, [sp, #36]	; 0x24
 801f7de:	f000 817c 	beq.w	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f7e2:	011b      	lsls	r3, r3, #4
 801f7e4:	79c8      	ldrb	r0, [r1, #7]
 801f7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f7ea:	4303      	orrs	r3, r0
 801f7ec:	930e      	str	r3, [sp, #56]	; 0x38
 801f7ee:	f000 8174 	beq.w	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f7f2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f7f6:	b29b      	uxth	r3, r3
 801f7f8:	2f00      	cmp	r7, #0
 801f7fa:	f000 8116 	beq.w	801fa2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801f7fe:	1aff      	subs	r7, r7, r3
 801f800:	b2bf      	uxth	r7, r7
 801f802:	043b      	lsls	r3, r7, #16
 801f804:	d502      	bpl.n	801f80c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f806:	1bf6      	subs	r6, r6, r7
 801f808:	2700      	movs	r7, #0
 801f80a:	b236      	sxth	r6, r6
 801f80c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f810:	a812      	add	r0, sp, #72	; 0x48
 801f812:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f816:	428e      	cmp	r6, r1
 801f818:	b28b      	uxth	r3, r1
 801f81a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801f81e:	bfbf      	itttt	lt
 801f820:	18ff      	addlt	r7, r7, r3
 801f822:	1bbe      	sublt	r6, r7, r6
 801f824:	b2b7      	uxthlt	r7, r6
 801f826:	460e      	movlt	r6, r1
 801f828:	8891      	ldrh	r1, [r2, #4]
 801f82a:	440b      	add	r3, r1
 801f82c:	4631      	mov	r1, r6
 801f82e:	b21b      	sxth	r3, r3
 801f830:	9310      	str	r3, [sp, #64]	; 0x40
 801f832:	88d3      	ldrh	r3, [r2, #6]
 801f834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f836:	449a      	add	sl, r3
 801f838:	fa0f f38a 	sxth.w	r3, sl
 801f83c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801f840:	930f      	str	r3, [sp, #60]	; 0x3c
 801f842:	4bb5      	ldr	r3, [pc, #724]	; (801fb18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f844:	f893 b000 	ldrb.w	fp, [r3]
 801f848:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f84c:	f1dc 0300 	rsbs	r3, ip, #0
 801f850:	eb43 030c 	adc.w	r3, r3, ip
 801f854:	930d      	str	r3, [sp, #52]	; 0x34
 801f856:	464b      	mov	r3, r9
 801f858:	f7f9 f973 	bl	8018b42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f85c:	4631      	mov	r1, r6
 801f85e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801f862:	464b      	mov	r3, r9
 801f864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f866:	a812      	add	r0, sp, #72	; 0x48
 801f868:	f7f9 f988 	bl	8018b7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f86c:	a916      	add	r1, sp, #88	; 0x58
 801f86e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f872:	a815      	add	r0, sp, #84	; 0x54
 801f874:	f7f9 faae 	bl	8018dd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f878:	f1b9 0f00 	cmp.w	r9, #0
 801f87c:	f040 80d8 	bne.w	801fa30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801f880:	f1bb 0f01 	cmp.w	fp, #1
 801f884:	f040 80dc 	bne.w	801fa40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801f888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f88a:	b153      	cbz	r3, 801f8a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f88c:	2508      	movs	r5, #8
 801f88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f890:	fb95 f3f8 	sdiv	r3, r5, r8
 801f894:	1e5d      	subs	r5, r3, #1
 801f896:	4415      	add	r5, r2
 801f898:	fb95 f5f3 	sdiv	r5, r5, r3
 801f89c:	fb15 f503 	smulbb	r5, r5, r3
 801f8a0:	b2ad      	uxth	r5, r5
 801f8a2:	b907      	cbnz	r7, 801f8a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f8a4:	b16c      	cbz	r4, 801f8c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f8a6:	fb04 7305 	mla	r3, r4, r5, r7
 801f8aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f8ac:	ebaa 0a04 	sub.w	sl, sl, r4
 801f8b0:	fb08 f303 	mul.w	r3, r8, r3
 801f8b4:	fa1f fa8a 	uxth.w	sl, sl
 801f8b8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f8bc:	f003 0407 	and.w	r4, r3, #7
 801f8c0:	9226      	str	r2, [sp, #152]	; 0x98
 801f8c2:	4649      	mov	r1, r9
 801f8c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f8c6:	f7ff ff1b 	bl	801f700 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f8ca:	4683      	mov	fp, r0
 801f8cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f8ce:	f7ff ff3d 	bl	801f74c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8d6:	4681      	mov	r9, r0
 801f8d8:	1a9b      	subs	r3, r3, r2
 801f8da:	459a      	cmp	sl, r3
 801f8dc:	bfa8      	it	ge
 801f8de:	469a      	movge	sl, r3
 801f8e0:	f1ba 0f00 	cmp.w	sl, #0
 801f8e4:	f340 80f9 	ble.w	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f8e8:	1bf6      	subs	r6, r6, r7
 801f8ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8ec:	1b9e      	subs	r6, r3, r6
 801f8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8f0:	429e      	cmp	r6, r3
 801f8f2:	bfd4      	ite	le
 801f8f4:	ebc7 0706 	rsble	r7, r7, r6
 801f8f8:	ebc7 0703 	rsbgt	r7, r7, r3
 801f8fc:	2f00      	cmp	r7, #0
 801f8fe:	f340 80ec 	ble.w	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f902:	1bed      	subs	r5, r5, r7
 801f904:	fb08 f305 	mul.w	r3, r8, r5
 801f908:	930d      	str	r3, [sp, #52]	; 0x34
 801f90a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f90c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f910:	930e      	str	r3, [sp, #56]	; 0x38
 801f912:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f914:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f918:	930f      	str	r3, [sp, #60]	; 0x3c
 801f91a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f91c:	b2db      	uxtb	r3, r3
 801f91e:	9310      	str	r3, [sp, #64]	; 0x40
 801f920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f922:	2b00      	cmp	r3, #0
 801f924:	f040 80de 	bne.w	801fae4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f928:	4b7c      	ldr	r3, [pc, #496]	; (801fb1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f92a:	6818      	ldr	r0, [r3, #0]
 801f92c:	6803      	ldr	r3, [r0, #0]
 801f92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f930:	4798      	blx	r3
 801f932:	2301      	movs	r3, #1
 801f934:	4a7a      	ldr	r2, [pc, #488]	; (801fb20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f936:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f93a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f93e:	fa03 f308 	lsl.w	r3, r3, r8
 801f942:	8811      	ldrh	r1, [r2, #0]
 801f944:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f948:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f94c:	3b01      	subs	r3, #1
 801f94e:	fb06 bb07 	mla	fp, r6, r7, fp
 801f952:	b2db      	uxtb	r3, r3
 801f954:	930a      	str	r3, [sp, #40]	; 0x28
 801f956:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801f95a:	fb01 2303 	mla	r3, r1, r3, r2
 801f95e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f962:	18c3      	adds	r3, r0, r3
 801f964:	9309      	str	r3, [sp, #36]	; 0x24
 801f966:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f968:	781a      	ldrb	r2, [r3, #0]
 801f96a:	4122      	asrs	r2, r4
 801f96c:	b2d2      	uxtb	r2, r2
 801f96e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f972:	f0c0 80d7 	bcc.w	801fb24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801f976:	46be      	mov	lr, r7
 801f978:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f97a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f97e:	f0c0 80ba 	bcc.w	801faf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801f982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f984:	4013      	ands	r3, r2
 801f986:	d041      	beq.n	801fa0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801f988:	20ff      	movs	r0, #255	; 0xff
 801f98a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f98c:	fb90 f5f5 	sdiv	r5, r0, r5
 801f990:	436b      	muls	r3, r5
 801f992:	2bfe      	cmp	r3, #254	; 0xfe
 801f994:	dd03      	ble.n	801f99e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801f996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f998:	4285      	cmp	r5, r0
 801f99a:	f000 80a5 	beq.w	801fae8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f99e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f9a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f9a2:	fb15 f303 	smulbb	r3, r5, r3
 801f9a6:	b29b      	uxth	r3, r3
 801f9a8:	1c5d      	adds	r5, r3, #1
 801f9aa:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f9ae:	780d      	ldrb	r5, [r1, #0]
 801f9b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f9b4:	fa1f fc83 	uxth.w	ip, r3
 801f9b8:	43db      	mvns	r3, r3
 801f9ba:	fb10 f90c 	smulbb	r9, r0, ip
 801f9be:	b2db      	uxtb	r3, r3
 801f9c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f9c2:	fb05 9503 	mla	r5, r5, r3, r9
 801f9c6:	b2ad      	uxth	r5, r5
 801f9c8:	f105 0901 	add.w	r9, r5, #1
 801f9cc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f9d0:	fb10 f90c 	smulbb	r9, r0, ip
 801f9d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f9d6:	122d      	asrs	r5, r5, #8
 801f9d8:	fb10 fc0c 	smulbb	ip, r0, ip
 801f9dc:	700d      	strb	r5, [r1, #0]
 801f9de:	784d      	ldrb	r5, [r1, #1]
 801f9e0:	fb05 9503 	mla	r5, r5, r3, r9
 801f9e4:	b2ad      	uxth	r5, r5
 801f9e6:	f105 0901 	add.w	r9, r5, #1
 801f9ea:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f9ee:	122d      	asrs	r5, r5, #8
 801f9f0:	704d      	strb	r5, [r1, #1]
 801f9f2:	788d      	ldrb	r5, [r1, #2]
 801f9f4:	fb05 cc03 	mla	ip, r5, r3, ip
 801f9f8:	fa1f fc8c 	uxth.w	ip, ip
 801f9fc:	f10c 0301 	add.w	r3, ip, #1
 801fa00:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fa04:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fa08:	f881 c002 	strb.w	ip, [r1, #2]
 801fa0c:	4444      	add	r4, r8
 801fa0e:	4431      	add	r1, r6
 801fa10:	b2a4      	uxth	r4, r4
 801fa12:	2c07      	cmp	r4, #7
 801fa14:	bf89      	itett	hi
 801fa16:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801fa18:	fa42 f208 	asrls.w	r2, r2, r8
 801fa1c:	2400      	movhi	r4, #0
 801fa1e:	785a      	ldrbhi	r2, [r3, #1]
 801fa20:	bf8a      	itet	hi
 801fa22:	3301      	addhi	r3, #1
 801fa24:	b2d2      	uxtbls	r2, r2
 801fa26:	9326      	strhi	r3, [sp, #152]	; 0x98
 801fa28:	e7a7      	b.n	801f97a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801fa2a:	441e      	add	r6, r3
 801fa2c:	b236      	sxth	r6, r6
 801fa2e:	e6ed      	b.n	801f80c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fa30:	f1b9 0f01 	cmp.w	r9, #1
 801fa34:	f47f af28 	bne.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa38:	f1bb 0f01 	cmp.w	fp, #1
 801fa3c:	f47f af24 	bne.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa40:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801fb1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801fa44:	f8db 0000 	ldr.w	r0, [fp]
 801fa48:	6803      	ldr	r3, [r0, #0]
 801fa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fa4c:	4798      	blx	r3
 801fa4e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801fa52:	465a      	mov	r2, fp
 801fa54:	d006      	beq.n	801fa64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801fa56:	f1b8 0f04 	cmp.w	r8, #4
 801fa5a:	d141      	bne.n	801fae0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801fa5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fa5e:	3300      	adds	r3, #0
 801fa60:	bf18      	it	ne
 801fa62:	2301      	movne	r3, #1
 801fa64:	0580      	lsls	r0, r0, #22
 801fa66:	d566      	bpl.n	801fb36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801fa68:	f1b8 0f08 	cmp.w	r8, #8
 801fa6c:	d163      	bne.n	801fb36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	bf0c      	ite	eq
 801fa72:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801fa76:	f44f 7180 	movne.w	r1, #256	; 0x100
 801fa7a:	2f00      	cmp	r7, #0
 801fa7c:	f47f af04 	bne.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa80:	2c00      	cmp	r4, #0
 801fa82:	f47f af01 	bne.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa88:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fa8a:	18f3      	adds	r3, r6, r3
 801fa8c:	4283      	cmp	r3, r0
 801fa8e:	f73f aefb 	bgt.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa92:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fa94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa96:	4403      	add	r3, r0
 801fa98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fa9a:	4283      	cmp	r3, r0
 801fa9c:	f73f aef4 	bgt.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801faa0:	f1b8 0f08 	cmp.w	r8, #8
 801faa4:	6810      	ldr	r0, [r2, #0]
 801faa6:	f04f 0600 	mov.w	r6, #0
 801faaa:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801faae:	bf18      	it	ne
 801fab0:	3501      	addne	r5, #1
 801fab2:	6804      	ldr	r4, [r0, #0]
 801fab4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801fab8:	bf18      	it	ne
 801faba:	f025 0501 	bicne.w	r5, r5, #1
 801fabe:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801fac2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fac4:	bf18      	it	ne
 801fac6:	b2ad      	uxthne	r5, r5
 801fac8:	9104      	str	r1, [sp, #16]
 801faca:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801facc:	e9cd 5a00 	strd	r5, sl, [sp]
 801fad0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801fad4:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fad6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801fad8:	47a0      	blx	r4
 801fada:	b017      	add	sp, #92	; 0x5c
 801fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fae0:	2300      	movs	r3, #0
 801fae2:	e7bf      	b.n	801fa64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801fae4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fae6:	e724      	b.n	801f932 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801fae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801faea:	700b      	strb	r3, [r1, #0]
 801faec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801faee:	704b      	strb	r3, [r1, #1]
 801faf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faf2:	708b      	strb	r3, [r1, #2]
 801faf4:	e78a      	b.n	801fa0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801faf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801faf8:	b153      	cbz	r3, 801fb10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801fafa:	441c      	add	r4, r3
 801fafc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fafe:	b2a4      	uxth	r4, r4
 801fb00:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fb04:	f004 0407 	and.w	r4, r4, #7
 801fb08:	781a      	ldrb	r2, [r3, #0]
 801fb0a:	9326      	str	r3, [sp, #152]	; 0x98
 801fb0c:	4122      	asrs	r2, r4
 801fb0e:	b2d2      	uxtb	r2, r2
 801fb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb12:	445b      	add	r3, fp
 801fb14:	9309      	str	r3, [sp, #36]	; 0x24
 801fb16:	e72a      	b.n	801f96e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801fb18:	24006d74 	.word	0x24006d74
 801fb1c:	24006d7c 	.word	0x24006d7c
 801fb20:	24006d76 	.word	0x24006d76
 801fb24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d1d7      	bne.n	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801fb2a:	4b06      	ldr	r3, [pc, #24]	; (801fb44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801fb2c:	6818      	ldr	r0, [r3, #0]
 801fb2e:	6803      	ldr	r3, [r0, #0]
 801fb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb32:	4798      	blx	r3
 801fb34:	e7d1      	b.n	801fada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	f43f aea6 	beq.w	801f888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fb40:	e79b      	b.n	801fa7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801fb42:	bf00      	nop
 801fb44:	24006d7c 	.word	0x24006d7c

0801fb48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fb48:	b538      	push	{r3, r4, r5, lr}
 801fb4a:	4c15      	ldr	r4, [pc, #84]	; (801fba0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fb4c:	4605      	mov	r5, r0
 801fb4e:	7823      	ldrb	r3, [r4, #0]
 801fb50:	f3bf 8f5b 	dmb	ish
 801fb54:	07da      	lsls	r2, r3, #31
 801fb56:	d40b      	bmi.n	801fb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb58:	4620      	mov	r0, r4
 801fb5a:	f005 fb4c 	bl	80251f6 <__cxa_guard_acquire>
 801fb5e:	b138      	cbz	r0, 801fb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb60:	4620      	mov	r0, r4
 801fb62:	f005 fb54 	bl	802520e <__cxa_guard_release>
 801fb66:	4a0f      	ldr	r2, [pc, #60]	; (801fba4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb68:	490f      	ldr	r1, [pc, #60]	; (801fba8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fb6a:	4810      	ldr	r0, [pc, #64]	; (801fbac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb6c:	f005 fb3c 	bl	80251e8 <__aeabi_atexit>
 801fb70:	4c0f      	ldr	r4, [pc, #60]	; (801fbb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fb72:	7823      	ldrb	r3, [r4, #0]
 801fb74:	f3bf 8f5b 	dmb	ish
 801fb78:	07db      	lsls	r3, r3, #31
 801fb7a:	d40b      	bmi.n	801fb94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb7c:	4620      	mov	r0, r4
 801fb7e:	f005 fb3a 	bl	80251f6 <__cxa_guard_acquire>
 801fb82:	b138      	cbz	r0, 801fb94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb84:	4620      	mov	r0, r4
 801fb86:	f005 fb42 	bl	802520e <__cxa_guard_release>
 801fb8a:	4a06      	ldr	r2, [pc, #24]	; (801fba4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb8c:	4909      	ldr	r1, [pc, #36]	; (801fbb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fb8e:	480a      	ldr	r0, [pc, #40]	; (801fbb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb90:	f005 fb2a 	bl	80251e8 <__aeabi_atexit>
 801fb94:	4b05      	ldr	r3, [pc, #20]	; (801fbac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb96:	612b      	str	r3, [r5, #16]
 801fb98:	4b07      	ldr	r3, [pc, #28]	; (801fbb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb9a:	616b      	str	r3, [r5, #20]
 801fb9c:	bd38      	pop	{r3, r4, r5, pc}
 801fb9e:	bf00      	nop
 801fba0:	24006e54 	.word	0x24006e54
 801fba4:	24000000 	.word	0x24000000
 801fba8:	0801d991 	.word	0x0801d991
 801fbac:	2400009c 	.word	0x2400009c
 801fbb0:	24006e58 	.word	0x24006e58
 801fbb4:	0801d98f 	.word	0x0801d98f
 801fbb8:	240000a0 	.word	0x240000a0

0801fbbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fbbc:	b538      	push	{r3, r4, r5, lr}
 801fbbe:	4c15      	ldr	r4, [pc, #84]	; (801fc14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fbc0:	4605      	mov	r5, r0
 801fbc2:	7823      	ldrb	r3, [r4, #0]
 801fbc4:	f3bf 8f5b 	dmb	ish
 801fbc8:	07da      	lsls	r2, r3, #31
 801fbca:	d40b      	bmi.n	801fbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f005 fb12 	bl	80251f6 <__cxa_guard_acquire>
 801fbd2:	b138      	cbz	r0, 801fbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	f005 fb1a 	bl	802520e <__cxa_guard_release>
 801fbda:	4a0f      	ldr	r2, [pc, #60]	; (801fc18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fbdc:	490f      	ldr	r1, [pc, #60]	; (801fc1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fbde:	4810      	ldr	r0, [pc, #64]	; (801fc20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fbe0:	f005 fb02 	bl	80251e8 <__aeabi_atexit>
 801fbe4:	4c0f      	ldr	r4, [pc, #60]	; (801fc24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fbe6:	7823      	ldrb	r3, [r4, #0]
 801fbe8:	f3bf 8f5b 	dmb	ish
 801fbec:	07db      	lsls	r3, r3, #31
 801fbee:	d40b      	bmi.n	801fc08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbf0:	4620      	mov	r0, r4
 801fbf2:	f005 fb00 	bl	80251f6 <__cxa_guard_acquire>
 801fbf6:	b138      	cbz	r0, 801fc08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbf8:	4620      	mov	r0, r4
 801fbfa:	f005 fb08 	bl	802520e <__cxa_guard_release>
 801fbfe:	4a06      	ldr	r2, [pc, #24]	; (801fc18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fc00:	4909      	ldr	r1, [pc, #36]	; (801fc28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fc02:	480a      	ldr	r0, [pc, #40]	; (801fc2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fc04:	f005 faf0 	bl	80251e8 <__aeabi_atexit>
 801fc08:	4b05      	ldr	r3, [pc, #20]	; (801fc20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fc0a:	60ab      	str	r3, [r5, #8]
 801fc0c:	4b07      	ldr	r3, [pc, #28]	; (801fc2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fc0e:	60eb      	str	r3, [r5, #12]
 801fc10:	bd38      	pop	{r3, r4, r5, pc}
 801fc12:	bf00      	nop
 801fc14:	24006e34 	.word	0x24006e34
 801fc18:	24000000 	.word	0x24000000
 801fc1c:	0801d995 	.word	0x0801d995
 801fc20:	2400007c 	.word	0x2400007c
 801fc24:	24006e38 	.word	0x24006e38
 801fc28:	0801d993 	.word	0x0801d993
 801fc2c:	24000080 	.word	0x24000080

0801fc30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fc30:	b510      	push	{r4, lr}
 801fc32:	4604      	mov	r4, r0
 801fc34:	f7ff ff88 	bl	801fb48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fc38:	4620      	mov	r0, r4
 801fc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc3e:	f7ff bfbd 	b.w	801fbbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fc44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fc44:	b538      	push	{r3, r4, r5, lr}
 801fc46:	4c15      	ldr	r4, [pc, #84]	; (801fc9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fc48:	4605      	mov	r5, r0
 801fc4a:	7823      	ldrb	r3, [r4, #0]
 801fc4c:	f3bf 8f5b 	dmb	ish
 801fc50:	07da      	lsls	r2, r3, #31
 801fc52:	d40b      	bmi.n	801fc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc54:	4620      	mov	r0, r4
 801fc56:	f005 face 	bl	80251f6 <__cxa_guard_acquire>
 801fc5a:	b138      	cbz	r0, 801fc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f005 fad6 	bl	802520e <__cxa_guard_release>
 801fc62:	4a0f      	ldr	r2, [pc, #60]	; (801fca0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc64:	490f      	ldr	r1, [pc, #60]	; (801fca4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fc66:	4810      	ldr	r0, [pc, #64]	; (801fca8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc68:	f005 fabe 	bl	80251e8 <__aeabi_atexit>
 801fc6c:	4c0f      	ldr	r4, [pc, #60]	; (801fcac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fc6e:	7823      	ldrb	r3, [r4, #0]
 801fc70:	f3bf 8f5b 	dmb	ish
 801fc74:	07db      	lsls	r3, r3, #31
 801fc76:	d40b      	bmi.n	801fc90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc78:	4620      	mov	r0, r4
 801fc7a:	f005 fabc 	bl	80251f6 <__cxa_guard_acquire>
 801fc7e:	b138      	cbz	r0, 801fc90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc80:	4620      	mov	r0, r4
 801fc82:	f005 fac4 	bl	802520e <__cxa_guard_release>
 801fc86:	4a06      	ldr	r2, [pc, #24]	; (801fca0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc88:	4909      	ldr	r1, [pc, #36]	; (801fcb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fc8a:	480a      	ldr	r0, [pc, #40]	; (801fcb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc8c:	f005 faac 	bl	80251e8 <__aeabi_atexit>
 801fc90:	4b05      	ldr	r3, [pc, #20]	; (801fca8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc92:	622b      	str	r3, [r5, #32]
 801fc94:	4b07      	ldr	r3, [pc, #28]	; (801fcb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc96:	626b      	str	r3, [r5, #36]	; 0x24
 801fc98:	bd38      	pop	{r3, r4, r5, pc}
 801fc9a:	bf00      	nop
 801fc9c:	24006e5c 	.word	0x24006e5c
 801fca0:	24000000 	.word	0x24000000
 801fca4:	0801d989 	.word	0x0801d989
 801fca8:	240000a4 	.word	0x240000a4
 801fcac:	24006e60 	.word	0x24006e60
 801fcb0:	0801d987 	.word	0x0801d987
 801fcb4:	240000a8 	.word	0x240000a8

0801fcb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fcb8:	b538      	push	{r3, r4, r5, lr}
 801fcba:	4c15      	ldr	r4, [pc, #84]	; (801fd10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fcbc:	4605      	mov	r5, r0
 801fcbe:	7823      	ldrb	r3, [r4, #0]
 801fcc0:	f3bf 8f5b 	dmb	ish
 801fcc4:	07da      	lsls	r2, r3, #31
 801fcc6:	d40b      	bmi.n	801fce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fcc8:	4620      	mov	r0, r4
 801fcca:	f005 fa94 	bl	80251f6 <__cxa_guard_acquire>
 801fcce:	b138      	cbz	r0, 801fce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fcd0:	4620      	mov	r0, r4
 801fcd2:	f005 fa9c 	bl	802520e <__cxa_guard_release>
 801fcd6:	4a0f      	ldr	r2, [pc, #60]	; (801fd14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fcd8:	490f      	ldr	r1, [pc, #60]	; (801fd18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fcda:	4810      	ldr	r0, [pc, #64]	; (801fd1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fcdc:	f005 fa84 	bl	80251e8 <__aeabi_atexit>
 801fce0:	4c0f      	ldr	r4, [pc, #60]	; (801fd20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fce2:	7823      	ldrb	r3, [r4, #0]
 801fce4:	f3bf 8f5b 	dmb	ish
 801fce8:	07db      	lsls	r3, r3, #31
 801fcea:	d40b      	bmi.n	801fd04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fcec:	4620      	mov	r0, r4
 801fcee:	f005 fa82 	bl	80251f6 <__cxa_guard_acquire>
 801fcf2:	b138      	cbz	r0, 801fd04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f005 fa8a 	bl	802520e <__cxa_guard_release>
 801fcfa:	4a06      	ldr	r2, [pc, #24]	; (801fd14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fcfc:	4909      	ldr	r1, [pc, #36]	; (801fd24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fcfe:	480a      	ldr	r0, [pc, #40]	; (801fd28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fd00:	f005 fa72 	bl	80251e8 <__aeabi_atexit>
 801fd04:	4b05      	ldr	r3, [pc, #20]	; (801fd1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fd06:	61ab      	str	r3, [r5, #24]
 801fd08:	4b07      	ldr	r3, [pc, #28]	; (801fd28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fd0a:	61eb      	str	r3, [r5, #28]
 801fd0c:	bd38      	pop	{r3, r4, r5, pc}
 801fd0e:	bf00      	nop
 801fd10:	24006e3c 	.word	0x24006e3c
 801fd14:	24000000 	.word	0x24000000
 801fd18:	0801d98d 	.word	0x0801d98d
 801fd1c:	24000084 	.word	0x24000084
 801fd20:	24006e40 	.word	0x24006e40
 801fd24:	0801d98b 	.word	0x0801d98b
 801fd28:	24000088 	.word	0x24000088

0801fd2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fd2c:	b510      	push	{r4, lr}
 801fd2e:	4604      	mov	r4, r0
 801fd30:	f7ff ff88 	bl	801fc44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fd34:	4620      	mov	r0, r4
 801fd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd3a:	f7ff bfbd 	b.w	801fcb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fd40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fd40:	b538      	push	{r3, r4, r5, lr}
 801fd42:	4c15      	ldr	r4, [pc, #84]	; (801fd98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fd44:	4605      	mov	r5, r0
 801fd46:	7823      	ldrb	r3, [r4, #0]
 801fd48:	f3bf 8f5b 	dmb	ish
 801fd4c:	07da      	lsls	r2, r3, #31
 801fd4e:	d40b      	bmi.n	801fd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fd50:	4620      	mov	r0, r4
 801fd52:	f005 fa50 	bl	80251f6 <__cxa_guard_acquire>
 801fd56:	b138      	cbz	r0, 801fd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fd58:	4620      	mov	r0, r4
 801fd5a:	f005 fa58 	bl	802520e <__cxa_guard_release>
 801fd5e:	4a0f      	ldr	r2, [pc, #60]	; (801fd9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd60:	490f      	ldr	r1, [pc, #60]	; (801fda0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fd62:	4810      	ldr	r0, [pc, #64]	; (801fda4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd64:	f005 fa40 	bl	80251e8 <__aeabi_atexit>
 801fd68:	4c0f      	ldr	r4, [pc, #60]	; (801fda8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fd6a:	7823      	ldrb	r3, [r4, #0]
 801fd6c:	f3bf 8f5b 	dmb	ish
 801fd70:	07db      	lsls	r3, r3, #31
 801fd72:	d40b      	bmi.n	801fd8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd74:	4620      	mov	r0, r4
 801fd76:	f005 fa3e 	bl	80251f6 <__cxa_guard_acquire>
 801fd7a:	b138      	cbz	r0, 801fd8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd7c:	4620      	mov	r0, r4
 801fd7e:	f005 fa46 	bl	802520e <__cxa_guard_release>
 801fd82:	4a06      	ldr	r2, [pc, #24]	; (801fd9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd84:	4909      	ldr	r1, [pc, #36]	; (801fdac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fd86:	480a      	ldr	r0, [pc, #40]	; (801fdb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd88:	f005 fa2e 	bl	80251e8 <__aeabi_atexit>
 801fd8c:	4b05      	ldr	r3, [pc, #20]	; (801fda4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd8e:	632b      	str	r3, [r5, #48]	; 0x30
 801fd90:	4b07      	ldr	r3, [pc, #28]	; (801fdb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd92:	636b      	str	r3, [r5, #52]	; 0x34
 801fd94:	bd38      	pop	{r3, r4, r5, pc}
 801fd96:	bf00      	nop
 801fd98:	24006e44 	.word	0x24006e44
 801fd9c:	24000000 	.word	0x24000000
 801fda0:	0801d981 	.word	0x0801d981
 801fda4:	2400008c 	.word	0x2400008c
 801fda8:	24006e48 	.word	0x24006e48
 801fdac:	0801d97f 	.word	0x0801d97f
 801fdb0:	24000090 	.word	0x24000090

0801fdb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fdb4:	b538      	push	{r3, r4, r5, lr}
 801fdb6:	4c15      	ldr	r4, [pc, #84]	; (801fe0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fdb8:	4605      	mov	r5, r0
 801fdba:	7823      	ldrb	r3, [r4, #0]
 801fdbc:	f3bf 8f5b 	dmb	ish
 801fdc0:	07da      	lsls	r2, r3, #31
 801fdc2:	d40b      	bmi.n	801fddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fdc4:	4620      	mov	r0, r4
 801fdc6:	f005 fa16 	bl	80251f6 <__cxa_guard_acquire>
 801fdca:	b138      	cbz	r0, 801fddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fdcc:	4620      	mov	r0, r4
 801fdce:	f005 fa1e 	bl	802520e <__cxa_guard_release>
 801fdd2:	4a0f      	ldr	r2, [pc, #60]	; (801fe10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fdd4:	490f      	ldr	r1, [pc, #60]	; (801fe14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fdd6:	4810      	ldr	r0, [pc, #64]	; (801fe18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fdd8:	f005 fa06 	bl	80251e8 <__aeabi_atexit>
 801fddc:	4c0f      	ldr	r4, [pc, #60]	; (801fe1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801fdde:	7823      	ldrb	r3, [r4, #0]
 801fde0:	f3bf 8f5b 	dmb	ish
 801fde4:	07db      	lsls	r3, r3, #31
 801fde6:	d40b      	bmi.n	801fe00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fde8:	4620      	mov	r0, r4
 801fdea:	f005 fa04 	bl	80251f6 <__cxa_guard_acquire>
 801fdee:	b138      	cbz	r0, 801fe00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fdf0:	4620      	mov	r0, r4
 801fdf2:	f005 fa0c 	bl	802520e <__cxa_guard_release>
 801fdf6:	4a06      	ldr	r2, [pc, #24]	; (801fe10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fdf8:	4909      	ldr	r1, [pc, #36]	; (801fe20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fdfa:	480a      	ldr	r0, [pc, #40]	; (801fe24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fdfc:	f005 f9f4 	bl	80251e8 <__aeabi_atexit>
 801fe00:	4b05      	ldr	r3, [pc, #20]	; (801fe18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fe02:	62ab      	str	r3, [r5, #40]	; 0x28
 801fe04:	4b07      	ldr	r3, [pc, #28]	; (801fe24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fe06:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fe08:	bd38      	pop	{r3, r4, r5, pc}
 801fe0a:	bf00      	nop
 801fe0c:	24006e1c 	.word	0x24006e1c
 801fe10:	24000000 	.word	0x24000000
 801fe14:	0801d985 	.word	0x0801d985
 801fe18:	24000064 	.word	0x24000064
 801fe1c:	24006e20 	.word	0x24006e20
 801fe20:	0801d983 	.word	0x0801d983
 801fe24:	24000068 	.word	0x24000068

0801fe28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801fe28:	b510      	push	{r4, lr}
 801fe2a:	4604      	mov	r4, r0
 801fe2c:	f7ff ff88 	bl	801fd40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801fe30:	4620      	mov	r0, r4
 801fe32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe36:	f7ff bfbd 	b.w	801fdb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801fe3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fe3c:	b538      	push	{r3, r4, r5, lr}
 801fe3e:	4c15      	ldr	r4, [pc, #84]	; (801fe94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fe40:	4605      	mov	r5, r0
 801fe42:	7823      	ldrb	r3, [r4, #0]
 801fe44:	f3bf 8f5b 	dmb	ish
 801fe48:	07da      	lsls	r2, r3, #31
 801fe4a:	d40b      	bmi.n	801fe64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fe4c:	4620      	mov	r0, r4
 801fe4e:	f005 f9d2 	bl	80251f6 <__cxa_guard_acquire>
 801fe52:	b138      	cbz	r0, 801fe64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fe54:	4620      	mov	r0, r4
 801fe56:	f005 f9da 	bl	802520e <__cxa_guard_release>
 801fe5a:	4a0f      	ldr	r2, [pc, #60]	; (801fe98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe5c:	490f      	ldr	r1, [pc, #60]	; (801fe9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fe5e:	4810      	ldr	r0, [pc, #64]	; (801fea0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe60:	f005 f9c2 	bl	80251e8 <__aeabi_atexit>
 801fe64:	4c0f      	ldr	r4, [pc, #60]	; (801fea4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fe66:	7823      	ldrb	r3, [r4, #0]
 801fe68:	f3bf 8f5b 	dmb	ish
 801fe6c:	07db      	lsls	r3, r3, #31
 801fe6e:	d40b      	bmi.n	801fe88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe70:	4620      	mov	r0, r4
 801fe72:	f005 f9c0 	bl	80251f6 <__cxa_guard_acquire>
 801fe76:	b138      	cbz	r0, 801fe88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe78:	4620      	mov	r0, r4
 801fe7a:	f005 f9c8 	bl	802520e <__cxa_guard_release>
 801fe7e:	4a06      	ldr	r2, [pc, #24]	; (801fe98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe80:	4909      	ldr	r1, [pc, #36]	; (801fea8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fe82:	480a      	ldr	r0, [pc, #40]	; (801feac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe84:	f005 f9b0 	bl	80251e8 <__aeabi_atexit>
 801fe88:	4b05      	ldr	r3, [pc, #20]	; (801fea0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe8a:	642b      	str	r3, [r5, #64]	; 0x40
 801fe8c:	4b07      	ldr	r3, [pc, #28]	; (801feac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe8e:	646b      	str	r3, [r5, #68]	; 0x44
 801fe90:	bd38      	pop	{r3, r4, r5, pc}
 801fe92:	bf00      	nop
 801fe94:	24006e4c 	.word	0x24006e4c
 801fe98:	24000000 	.word	0x24000000
 801fe9c:	0801d979 	.word	0x0801d979
 801fea0:	24000094 	.word	0x24000094
 801fea4:	24006e50 	.word	0x24006e50
 801fea8:	0801d977 	.word	0x0801d977
 801feac:	24000098 	.word	0x24000098

0801feb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801feb0:	b538      	push	{r3, r4, r5, lr}
 801feb2:	4c15      	ldr	r4, [pc, #84]	; (801ff08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801feb4:	4605      	mov	r5, r0
 801feb6:	7823      	ldrb	r3, [r4, #0]
 801feb8:	f3bf 8f5b 	dmb	ish
 801febc:	07da      	lsls	r2, r3, #31
 801febe:	d40b      	bmi.n	801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fec0:	4620      	mov	r0, r4
 801fec2:	f005 f998 	bl	80251f6 <__cxa_guard_acquire>
 801fec6:	b138      	cbz	r0, 801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fec8:	4620      	mov	r0, r4
 801feca:	f005 f9a0 	bl	802520e <__cxa_guard_release>
 801fece:	4a0f      	ldr	r2, [pc, #60]	; (801ff0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fed0:	490f      	ldr	r1, [pc, #60]	; (801ff10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fed2:	4810      	ldr	r0, [pc, #64]	; (801ff14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fed4:	f005 f988 	bl	80251e8 <__aeabi_atexit>
 801fed8:	4c0f      	ldr	r4, [pc, #60]	; (801ff18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801feda:	7823      	ldrb	r3, [r4, #0]
 801fedc:	f3bf 8f5b 	dmb	ish
 801fee0:	07db      	lsls	r3, r3, #31
 801fee2:	d40b      	bmi.n	801fefc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fee4:	4620      	mov	r0, r4
 801fee6:	f005 f986 	bl	80251f6 <__cxa_guard_acquire>
 801feea:	b138      	cbz	r0, 801fefc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801feec:	4620      	mov	r0, r4
 801feee:	f005 f98e 	bl	802520e <__cxa_guard_release>
 801fef2:	4a06      	ldr	r2, [pc, #24]	; (801ff0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fef4:	4909      	ldr	r1, [pc, #36]	; (801ff1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801fef6:	480a      	ldr	r0, [pc, #40]	; (801ff20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fef8:	f005 f976 	bl	80251e8 <__aeabi_atexit>
 801fefc:	4b05      	ldr	r3, [pc, #20]	; (801ff14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fefe:	63ab      	str	r3, [r5, #56]	; 0x38
 801ff00:	4b07      	ldr	r3, [pc, #28]	; (801ff20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ff02:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ff04:	bd38      	pop	{r3, r4, r5, pc}
 801ff06:	bf00      	nop
 801ff08:	24006e2c 	.word	0x24006e2c
 801ff0c:	24000000 	.word	0x24000000
 801ff10:	0801d97d 	.word	0x0801d97d
 801ff14:	24000074 	.word	0x24000074
 801ff18:	24006e30 	.word	0x24006e30
 801ff1c:	0801d97b 	.word	0x0801d97b
 801ff20:	24000078 	.word	0x24000078

0801ff24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ff24:	b510      	push	{r4, lr}
 801ff26:	4604      	mov	r4, r0
 801ff28:	f7ff ff88 	bl	801fe3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ff2c:	4620      	mov	r0, r4
 801ff2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff32:	f7ff bfbd 	b.w	801feb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ff38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ff38:	b538      	push	{r3, r4, r5, lr}
 801ff3a:	4c15      	ldr	r4, [pc, #84]	; (801ff90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ff3c:	4605      	mov	r5, r0
 801ff3e:	7823      	ldrb	r3, [r4, #0]
 801ff40:	f3bf 8f5b 	dmb	ish
 801ff44:	07da      	lsls	r2, r3, #31
 801ff46:	d40b      	bmi.n	801ff60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ff48:	4620      	mov	r0, r4
 801ff4a:	f005 f954 	bl	80251f6 <__cxa_guard_acquire>
 801ff4e:	b138      	cbz	r0, 801ff60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ff50:	4620      	mov	r0, r4
 801ff52:	f005 f95c 	bl	802520e <__cxa_guard_release>
 801ff56:	4a0f      	ldr	r2, [pc, #60]	; (801ff94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff58:	490f      	ldr	r1, [pc, #60]	; (801ff98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ff5a:	4810      	ldr	r0, [pc, #64]	; (801ff9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff5c:	f005 f944 	bl	80251e8 <__aeabi_atexit>
 801ff60:	4c0f      	ldr	r4, [pc, #60]	; (801ffa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ff62:	7823      	ldrb	r3, [r4, #0]
 801ff64:	f3bf 8f5b 	dmb	ish
 801ff68:	07db      	lsls	r3, r3, #31
 801ff6a:	d40b      	bmi.n	801ff84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff6c:	4620      	mov	r0, r4
 801ff6e:	f005 f942 	bl	80251f6 <__cxa_guard_acquire>
 801ff72:	b138      	cbz	r0, 801ff84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff74:	4620      	mov	r0, r4
 801ff76:	f005 f94a 	bl	802520e <__cxa_guard_release>
 801ff7a:	4a06      	ldr	r2, [pc, #24]	; (801ff94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff7c:	4909      	ldr	r1, [pc, #36]	; (801ffa4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ff7e:	480a      	ldr	r0, [pc, #40]	; (801ffa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff80:	f005 f932 	bl	80251e8 <__aeabi_atexit>
 801ff84:	4b05      	ldr	r3, [pc, #20]	; (801ff9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff86:	652b      	str	r3, [r5, #80]	; 0x50
 801ff88:	4b07      	ldr	r3, [pc, #28]	; (801ffa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff8a:	656b      	str	r3, [r5, #84]	; 0x54
 801ff8c:	bd38      	pop	{r3, r4, r5, pc}
 801ff8e:	bf00      	nop
 801ff90:	24006e24 	.word	0x24006e24
 801ff94:	24000000 	.word	0x24000000
 801ff98:	0801d971 	.word	0x0801d971
 801ff9c:	2400006c 	.word	0x2400006c
 801ffa0:	24006e28 	.word	0x24006e28
 801ffa4:	0801d96f 	.word	0x0801d96f
 801ffa8:	24000070 	.word	0x24000070

0801ffac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ffac:	b538      	push	{r3, r4, r5, lr}
 801ffae:	4c15      	ldr	r4, [pc, #84]	; (8020004 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ffb0:	4605      	mov	r5, r0
 801ffb2:	7823      	ldrb	r3, [r4, #0]
 801ffb4:	f3bf 8f5b 	dmb	ish
 801ffb8:	07da      	lsls	r2, r3, #31
 801ffba:	d40b      	bmi.n	801ffd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ffbc:	4620      	mov	r0, r4
 801ffbe:	f005 f91a 	bl	80251f6 <__cxa_guard_acquire>
 801ffc2:	b138      	cbz	r0, 801ffd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ffc4:	4620      	mov	r0, r4
 801ffc6:	f005 f922 	bl	802520e <__cxa_guard_release>
 801ffca:	4a0f      	ldr	r2, [pc, #60]	; (8020008 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ffcc:	490f      	ldr	r1, [pc, #60]	; (802000c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ffce:	4810      	ldr	r0, [pc, #64]	; (8020010 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ffd0:	f005 f90a 	bl	80251e8 <__aeabi_atexit>
 801ffd4:	4c0f      	ldr	r4, [pc, #60]	; (8020014 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ffd6:	7823      	ldrb	r3, [r4, #0]
 801ffd8:	f3bf 8f5b 	dmb	ish
 801ffdc:	07db      	lsls	r3, r3, #31
 801ffde:	d40b      	bmi.n	801fff8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ffe0:	4620      	mov	r0, r4
 801ffe2:	f005 f908 	bl	80251f6 <__cxa_guard_acquire>
 801ffe6:	b138      	cbz	r0, 801fff8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ffe8:	4620      	mov	r0, r4
 801ffea:	f005 f910 	bl	802520e <__cxa_guard_release>
 801ffee:	4a06      	ldr	r2, [pc, #24]	; (8020008 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fff0:	4909      	ldr	r1, [pc, #36]	; (8020018 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801fff2:	480a      	ldr	r0, [pc, #40]	; (802001c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fff4:	f005 f8f8 	bl	80251e8 <__aeabi_atexit>
 801fff8:	4b05      	ldr	r3, [pc, #20]	; (8020010 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fffa:	64ab      	str	r3, [r5, #72]	; 0x48
 801fffc:	4b07      	ldr	r3, [pc, #28]	; (802001c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fffe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020000:	bd38      	pop	{r3, r4, r5, pc}
 8020002:	bf00      	nop
 8020004:	24006e14 	.word	0x24006e14
 8020008:	24000000 	.word	0x24000000
 802000c:	0801d975 	.word	0x0801d975
 8020010:	2400005c 	.word	0x2400005c
 8020014:	24006e18 	.word	0x24006e18
 8020018:	0801d973 	.word	0x0801d973
 802001c:	24000060 	.word	0x24000060

08020020 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8020020:	b510      	push	{r4, lr}
 8020022:	4604      	mov	r4, r0
 8020024:	f7ff ff88 	bl	801ff38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020028:	4620      	mov	r0, r4
 802002a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802002e:	f7ff bfbd 	b.w	801ffac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08020032 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8020032:	b510      	push	{r4, lr}
 8020034:	4604      	mov	r4, r0
 8020036:	f7ff fff3 	bl	8020020 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 802003a:	4620      	mov	r0, r4
 802003c:	f7ff ff72 	bl	801ff24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8020040:	4620      	mov	r0, r4
 8020042:	f7ff fe73 	bl	801fd2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8020046:	4620      	mov	r0, r4
 8020048:	f7ff fdf2 	bl	801fc30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 802004c:	4620      	mov	r0, r4
 802004e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020052:	f7ff bee9 	b.w	801fe28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020058 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8020058:	b538      	push	{r3, r4, r5, lr}
 802005a:	4c0b      	ldr	r4, [pc, #44]	; (8020088 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 802005c:	4605      	mov	r5, r0
 802005e:	7823      	ldrb	r3, [r4, #0]
 8020060:	f3bf 8f5b 	dmb	ish
 8020064:	07db      	lsls	r3, r3, #31
 8020066:	d40b      	bmi.n	8020080 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8020068:	4620      	mov	r0, r4
 802006a:	f005 f8c4 	bl	80251f6 <__cxa_guard_acquire>
 802006e:	b138      	cbz	r0, 8020080 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8020070:	4620      	mov	r0, r4
 8020072:	f005 f8cc 	bl	802520e <__cxa_guard_release>
 8020076:	4a05      	ldr	r2, [pc, #20]	; (802008c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8020078:	4905      	ldr	r1, [pc, #20]	; (8020090 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 802007a:	4806      	ldr	r0, [pc, #24]	; (8020094 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802007c:	f005 f8b4 	bl	80251e8 <__aeabi_atexit>
 8020080:	4b04      	ldr	r3, [pc, #16]	; (8020094 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8020082:	65ab      	str	r3, [r5, #88]	; 0x58
 8020084:	bd38      	pop	{r3, r4, r5, pc}
 8020086:	bf00      	nop
 8020088:	24006e08 	.word	0x24006e08
 802008c:	24000000 	.word	0x24000000
 8020090:	0801d96d 	.word	0x0801d96d
 8020094:	24000054 	.word	0x24000054

08020098 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8020098:	b538      	push	{r3, r4, r5, lr}
 802009a:	4c0b      	ldr	r4, [pc, #44]	; (80200c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 802009c:	4605      	mov	r5, r0
 802009e:	7823      	ldrb	r3, [r4, #0]
 80200a0:	f3bf 8f5b 	dmb	ish
 80200a4:	07db      	lsls	r3, r3, #31
 80200a6:	d40b      	bmi.n	80200c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 80200a8:	4620      	mov	r0, r4
 80200aa:	f005 f8a4 	bl	80251f6 <__cxa_guard_acquire>
 80200ae:	b138      	cbz	r0, 80200c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 80200b0:	4620      	mov	r0, r4
 80200b2:	f005 f8ac 	bl	802520e <__cxa_guard_release>
 80200b6:	4a05      	ldr	r2, [pc, #20]	; (80200cc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 80200b8:	4905      	ldr	r1, [pc, #20]	; (80200d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 80200ba:	4806      	ldr	r0, [pc, #24]	; (80200d4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80200bc:	f005 f894 	bl	80251e8 <__aeabi_atexit>
 80200c0:	4b04      	ldr	r3, [pc, #16]	; (80200d4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80200c2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80200c4:	bd38      	pop	{r3, r4, r5, pc}
 80200c6:	bf00      	nop
 80200c8:	24006e0c 	.word	0x24006e0c
 80200cc:	24000000 	.word	0x24000000
 80200d0:	0801d96b 	.word	0x0801d96b
 80200d4:	24000058 	.word	0x24000058

080200d8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 80200d8:	b570      	push	{r4, r5, r6, lr}
 80200da:	4d0c      	ldr	r5, [pc, #48]	; (802010c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 80200dc:	4606      	mov	r6, r0
 80200de:	4c0c      	ldr	r4, [pc, #48]	; (8020110 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 80200e0:	782b      	ldrb	r3, [r5, #0]
 80200e2:	f3bf 8f5b 	dmb	ish
 80200e6:	f013 0f01 	tst.w	r3, #1
 80200ea:	d10d      	bne.n	8020108 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 80200ec:	4628      	mov	r0, r5
 80200ee:	f005 f882 	bl	80251f6 <__cxa_guard_acquire>
 80200f2:	b148      	cbz	r0, 8020108 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 80200f4:	4b07      	ldr	r3, [pc, #28]	; (8020114 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80200f6:	4628      	mov	r0, r5
 80200f8:	6023      	str	r3, [r4, #0]
 80200fa:	f005 f888 	bl	802520e <__cxa_guard_release>
 80200fe:	4a06      	ldr	r2, [pc, #24]	; (8020118 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8020100:	4620      	mov	r0, r4
 8020102:	4906      	ldr	r1, [pc, #24]	; (802011c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8020104:	f005 f870 	bl	80251e8 <__aeabi_atexit>
 8020108:	6634      	str	r4, [r6, #96]	; 0x60
 802010a:	bd70      	pop	{r4, r5, r6, pc}
 802010c:	24006e10 	.word	0x24006e10
 8020110:	24006e64 	.word	0x24006e64
 8020114:	08028210 	.word	0x08028210
 8020118:	24000000 	.word	0x24000000
 802011c:	0801d969 	.word	0x0801d969

08020120 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8020120:	b510      	push	{r4, lr}
 8020122:	4604      	mov	r4, r0
 8020124:	f7ff ff98 	bl	8020058 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8020128:	4620      	mov	r0, r4
 802012a:	f7ff ffb5 	bl	8020098 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 802012e:	4620      	mov	r0, r4
 8020130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020134:	f7ff bfd0 	b.w	80200d8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08020138 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8020138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802013c:	b087      	sub	sp, #28
 802013e:	788d      	ldrb	r5, [r1, #2]
 8020140:	f891 9000 	ldrb.w	r9, [r1]
 8020144:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020148:	9501      	str	r5, [sp, #4]
 802014a:	784d      	ldrb	r5, [r1, #1]
 802014c:	9203      	str	r2, [sp, #12]
 802014e:	9502      	str	r5, [sp, #8]
 8020150:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8020154:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8020158:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 802015c:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8020160:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8020164:	fb06 0708 	mla	r7, r6, r8, r0
 8020168:	2e00      	cmp	r6, #0
 802016a:	eb02 0a07 	add.w	sl, r2, r7
 802016e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8020172:	9d01      	ldr	r5, [sp, #4]
 8020174:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8020178:	ea45 0509 	orr.w	r5, r5, r9
 802017c:	9505      	str	r5, [sp, #20]
 802017e:	f2c0 80b2 	blt.w	80202e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8020182:	45b3      	cmp	fp, r6
 8020184:	f340 80af 	ble.w	80202e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8020188:	2800      	cmp	r0, #0
 802018a:	f2c0 80aa 	blt.w	80202e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802018e:	4580      	cmp	r8, r0
 8020190:	f340 80a7 	ble.w	80202e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8020194:	9a03      	ldr	r2, [sp, #12]
 8020196:	5dd7      	ldrb	r7, [r2, r7]
 8020198:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802019c:	441f      	add	r7, r3
 802019e:	1c42      	adds	r2, r0, #1
 80201a0:	f100 80a4 	bmi.w	80202ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80201a4:	4590      	cmp	r8, r2
 80201a6:	f340 80a1 	ble.w	80202ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80201aa:	2c00      	cmp	r4, #0
 80201ac:	f000 809e 	beq.w	80202ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80201b0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80201b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80201b8:	441d      	add	r5, r3
 80201ba:	3601      	adds	r6, #1
 80201bc:	f100 809a 	bmi.w	80202f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80201c0:	45b3      	cmp	fp, r6
 80201c2:	f340 8097 	ble.w	80202f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80201c6:	f1bc 0f00 	cmp.w	ip, #0
 80201ca:	f000 8093 	beq.w	80202f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80201ce:	2800      	cmp	r0, #0
 80201d0:	f2c0 808e 	blt.w	80202f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80201d4:	4580      	cmp	r8, r0
 80201d6:	f340 808b 	ble.w	80202f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80201da:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80201de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80201e2:	441e      	add	r6, r3
 80201e4:	3001      	adds	r0, #1
 80201e6:	f100 8088 	bmi.w	80202fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80201ea:	4580      	cmp	r8, r0
 80201ec:	f340 8085 	ble.w	80202fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80201f0:	2c00      	cmp	r4, #0
 80201f2:	f000 8082 	beq.w	80202fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80201f6:	44d0      	add	r8, sl
 80201f8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80201fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020200:	4413      	add	r3, r2
 8020202:	b2a4      	uxth	r4, r4
 8020204:	f895 a000 	ldrb.w	sl, [r5]
 8020208:	fa1f fc8c 	uxth.w	ip, ip
 802020c:	fb04 fb0c 	mul.w	fp, r4, ip
 8020210:	0124      	lsls	r4, r4, #4
 8020212:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8020216:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 802021a:	eba4 040b 	sub.w	r4, r4, fp
 802021e:	fa1f f08c 	uxth.w	r0, ip
 8020222:	b2a2      	uxth	r2, r4
 8020224:	783c      	ldrb	r4, [r7, #0]
 8020226:	eba8 0800 	sub.w	r8, r8, r0
 802022a:	fa1f fc8e 	uxth.w	ip, lr
 802022e:	fb02 fa0a 	mul.w	sl, r2, sl
 8020232:	ea6f 0e0e 	mvn.w	lr, lr
 8020236:	fa1f f888 	uxth.w	r8, r8
 802023a:	fa5f fe8e 	uxtb.w	lr, lr
 802023e:	fb08 aa04 	mla	sl, r8, r4, sl
 8020242:	7834      	ldrb	r4, [r6, #0]
 8020244:	fb19 f90e 	smulbb	r9, r9, lr
 8020248:	fb00 aa04 	mla	sl, r0, r4, sl
 802024c:	781c      	ldrb	r4, [r3, #0]
 802024e:	fb0b a404 	mla	r4, fp, r4, sl
 8020252:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020256:	fb04 990c 	mla	r9, r4, ip, r9
 802025a:	fa1f f989 	uxth.w	r9, r9
 802025e:	f109 0401 	add.w	r4, r9, #1
 8020262:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020266:	ea4f 2929 	mov.w	r9, r9, asr #8
 802026a:	f881 9000 	strb.w	r9, [r1]
 802026e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020272:	787c      	ldrb	r4, [r7, #1]
 8020274:	fb02 f909 	mul.w	r9, r2, r9
 8020278:	fb08 9904 	mla	r9, r8, r4, r9
 802027c:	7874      	ldrb	r4, [r6, #1]
 802027e:	fb00 9904 	mla	r9, r0, r4, r9
 8020282:	785c      	ldrb	r4, [r3, #1]
 8020284:	fb0b 9404 	mla	r4, fp, r4, r9
 8020288:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 802028c:	9c02      	ldr	r4, [sp, #8]
 802028e:	fb14 f90e 	smulbb	r9, r4, lr
 8020292:	fb0a 940c 	mla	r4, sl, ip, r9
 8020296:	b2a4      	uxth	r4, r4
 8020298:	f104 0901 	add.w	r9, r4, #1
 802029c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80202a0:	1224      	asrs	r4, r4, #8
 80202a2:	704c      	strb	r4, [r1, #1]
 80202a4:	78ad      	ldrb	r5, [r5, #2]
 80202a6:	78bc      	ldrb	r4, [r7, #2]
 80202a8:	436a      	muls	r2, r5
 80202aa:	789b      	ldrb	r3, [r3, #2]
 80202ac:	fb08 2204 	mla	r2, r8, r4, r2
 80202b0:	78b4      	ldrb	r4, [r6, #2]
 80202b2:	fb00 2004 	mla	r0, r0, r4, r2
 80202b6:	fb0b 0b03 	mla	fp, fp, r3, r0
 80202ba:	9b01      	ldr	r3, [sp, #4]
 80202bc:	fb13 fe0e 	smulbb	lr, r3, lr
 80202c0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80202c4:	fb0b ec0c 	mla	ip, fp, ip, lr
 80202c8:	fa1f fc8c 	uxth.w	ip, ip
 80202cc:	f10c 0e01 	add.w	lr, ip, #1
 80202d0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80202d4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80202d8:	f881 c002 	strb.w	ip, [r1, #2]
 80202dc:	b007      	add	sp, #28
 80202de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202e2:	af05      	add	r7, sp, #20
 80202e4:	e75b      	b.n	802019e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80202e6:	ad05      	add	r5, sp, #20
 80202e8:	462f      	mov	r7, r5
 80202ea:	e766      	b.n	80201ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80202ec:	ad05      	add	r5, sp, #20
 80202ee:	e764      	b.n	80201ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80202f0:	ae05      	add	r6, sp, #20
 80202f2:	e777      	b.n	80201e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80202f4:	ab05      	add	r3, sp, #20
 80202f6:	461e      	mov	r6, r3
 80202f8:	e783      	b.n	8020202 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80202fa:	ab05      	add	r3, sp, #20
 80202fc:	e781      	b.n	8020202 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080202fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020302:	b093      	sub	sp, #76	; 0x4c
 8020304:	9210      	str	r2, [sp, #64]	; 0x40
 8020306:	9309      	str	r3, [sp, #36]	; 0x24
 8020308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802030a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 802030e:	9011      	str	r0, [sp, #68]	; 0x44
 8020310:	930e      	str	r3, [sp, #56]	; 0x38
 8020312:	6850      	ldr	r0, [r2, #4]
 8020314:	910d      	str	r1, [sp, #52]	; 0x34
 8020316:	6812      	ldr	r2, [r2, #0]
 8020318:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802031c:	fb00 1303 	mla	r3, r0, r3, r1
 8020320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020324:	18d3      	adds	r3, r2, r3
 8020326:	930a      	str	r3, [sp, #40]	; 0x28
 8020328:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	930c      	str	r3, [sp, #48]	; 0x30
 802032e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020330:	685c      	ldr	r4, [r3, #4]
 8020332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020334:	3404      	adds	r4, #4
 8020336:	43db      	mvns	r3, r3
 8020338:	b2db      	uxtb	r3, r3
 802033a:	930b      	str	r3, [sp, #44]	; 0x2c
 802033c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802033e:	2b00      	cmp	r3, #0
 8020340:	dc03      	bgt.n	802034a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020342:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020344:	2b00      	cmp	r3, #0
 8020346:	f340 8250 	ble.w	80207ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802034a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802034c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020350:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020354:	1e48      	subs	r0, r1, #1
 8020356:	1e55      	subs	r5, r2, #1
 8020358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802035a:	2b00      	cmp	r3, #0
 802035c:	f340 80ee 	ble.w	802053c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020360:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020364:	1436      	asrs	r6, r6, #16
 8020366:	ea4f 4323 	mov.w	r3, r3, asr #16
 802036a:	d406      	bmi.n	802037a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802036c:	4286      	cmp	r6, r0
 802036e:	da04      	bge.n	802037a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020370:	2b00      	cmp	r3, #0
 8020372:	db02      	blt.n	802037a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020374:	42ab      	cmp	r3, r5
 8020376:	f2c0 80e2 	blt.w	802053e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802037a:	3601      	adds	r6, #1
 802037c:	f100 80cf 	bmi.w	802051e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020380:	42b1      	cmp	r1, r6
 8020382:	f2c0 80cc 	blt.w	802051e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020386:	3301      	adds	r3, #1
 8020388:	f100 80c9 	bmi.w	802051e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802038c:	429a      	cmp	r2, r3
 802038e:	f2c0 80c6 	blt.w	802051e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020392:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8020396:	f1bb 0f00 	cmp.w	fp, #0
 802039a:	f340 80f1 	ble.w	8020580 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802039e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80203a2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80203a4:	141d      	asrs	r5, r3, #16
 80203a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80203a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80203ac:	68c7      	ldr	r7, [r0, #12]
 80203ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80203b0:	1418      	asrs	r0, r3, #16
 80203b2:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80203b6:	6892      	ldr	r2, [r2, #8]
 80203b8:	f100 8137 	bmi.w	802062a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80203bc:	f102 3cff 	add.w	ip, r2, #4294967295
 80203c0:	4560      	cmp	r0, ip
 80203c2:	f280 8132 	bge.w	802062a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80203c6:	2d00      	cmp	r5, #0
 80203c8:	f2c0 812f 	blt.w	802062a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80203cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80203d0:	4565      	cmp	r5, ip
 80203d2:	f280 812a 	bge.w	802062a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80203d6:	b212      	sxth	r2, r2
 80203d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80203da:	fb05 0002 	mla	r0, r5, r2, r0
 80203de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80203e0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80203e4:	4405      	add	r5, r0
 80203e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80203ea:	eb04 0e0c 	add.w	lr, r4, ip
 80203ee:	f1b8 0f00 	cmp.w	r8, #0
 80203f2:	f000 810c 	beq.w	802060e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80203f6:	786f      	ldrb	r7, [r5, #1]
 80203f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80203fc:	4427      	add	r7, r4
 80203fe:	2900      	cmp	r1, #0
 8020400:	f000 810d 	beq.w	802061e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8020404:	18a8      	adds	r0, r5, r2
 8020406:	5caa      	ldrb	r2, [r5, r2]
 8020408:	7840      	ldrb	r0, [r0, #1]
 802040a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802040e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020412:	4422      	add	r2, r4
 8020414:	4420      	add	r0, r4
 8020416:	fa1f f388 	uxth.w	r3, r8
 802041a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 802041e:	b289      	uxth	r1, r1
 8020420:	f897 c000 	ldrb.w	ip, [r7]
 8020424:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8020428:	fb03 f901 	mul.w	r9, r3, r1
 802042c:	011b      	lsls	r3, r3, #4
 802042e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020432:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020436:	eba3 0309 	sub.w	r3, r3, r9
 802043a:	b289      	uxth	r1, r1
 802043c:	b29b      	uxth	r3, r3
 802043e:	eba8 0801 	sub.w	r8, r8, r1
 8020442:	fb03 fc0c 	mul.w	ip, r3, ip
 8020446:	fa1f f888 	uxth.w	r8, r8
 802044a:	930f      	str	r3, [sp, #60]	; 0x3c
 802044c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802044e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020452:	f892 a000 	ldrb.w	sl, [r2]
 8020456:	fb01 cc0a 	mla	ip, r1, sl, ip
 802045a:	f890 a000 	ldrb.w	sl, [r0]
 802045e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020462:	f896 a000 	ldrb.w	sl, [r6]
 8020466:	fb1a fa03 	smulbb	sl, sl, r3
 802046a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802046e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020470:	fb0c ac05 	mla	ip, ip, r5, sl
 8020474:	fa1f fc8c 	uxth.w	ip, ip
 8020478:	f10c 0a01 	add.w	sl, ip, #1
 802047c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020480:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020484:	f886 a000 	strb.w	sl, [r6]
 8020488:	f897 c001 	ldrb.w	ip, [r7, #1]
 802048c:	f89e a001 	ldrb.w	sl, [lr, #1]
 8020490:	fb03 fc0c 	mul.w	ip, r3, ip
 8020494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020496:	fb08 cc0a 	mla	ip, r8, sl, ip
 802049a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802049e:	fb01 cc0a 	mla	ip, r1, sl, ip
 80204a2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80204a6:	fb09 cc0a 	mla	ip, r9, sl, ip
 80204aa:	f896 a001 	ldrb.w	sl, [r6, #1]
 80204ae:	fb1a fa03 	smulbb	sl, sl, r3
 80204b2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80204b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80204b8:	fb0c ac05 	mla	ip, ip, r5, sl
 80204bc:	fa1f fc8c 	uxth.w	ip, ip
 80204c0:	f10c 0a01 	add.w	sl, ip, #1
 80204c4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80204c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80204cc:	f886 c001 	strb.w	ip, [r6, #1]
 80204d0:	78bf      	ldrb	r7, [r7, #2]
 80204d2:	f89e c002 	ldrb.w	ip, [lr, #2]
 80204d6:	437b      	muls	r3, r7
 80204d8:	fb08 330c 	mla	r3, r8, ip, r3
 80204dc:	f892 c002 	ldrb.w	ip, [r2, #2]
 80204e0:	7882      	ldrb	r2, [r0, #2]
 80204e2:	fb01 310c 	mla	r1, r1, ip, r3
 80204e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204e8:	fb09 1902 	mla	r9, r9, r2, r1
 80204ec:	78b1      	ldrb	r1, [r6, #2]
 80204ee:	fb11 f103 	smulbb	r1, r1, r3
 80204f2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80204f6:	fb09 1505 	mla	r5, r9, r5, r1
 80204fa:	b2ad      	uxth	r5, r5
 80204fc:	1c6b      	adds	r3, r5, #1
 80204fe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020502:	122d      	asrs	r5, r5, #8
 8020504:	70b5      	strb	r5, [r6, #2]
 8020506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020508:	3603      	adds	r6, #3
 802050a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802050c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020510:	4413      	add	r3, r2
 8020512:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020514:	931d      	str	r3, [sp, #116]	; 0x74
 8020516:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020518:	4413      	add	r3, r2
 802051a:	931e      	str	r3, [sp, #120]	; 0x78
 802051c:	e73b      	b.n	8020396 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802051e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020520:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8020522:	4433      	add	r3, r6
 8020524:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8020526:	931d      	str	r3, [sp, #116]	; 0x74
 8020528:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802052a:	4433      	add	r3, r6
 802052c:	931e      	str	r3, [sp, #120]	; 0x78
 802052e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020530:	3b01      	subs	r3, #1
 8020532:	9309      	str	r3, [sp, #36]	; 0x24
 8020534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020536:	3303      	adds	r3, #3
 8020538:	930a      	str	r3, [sp, #40]	; 0x28
 802053a:	e70d      	b.n	8020358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802053c:	d028      	beq.n	8020590 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802053e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020540:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020542:	3b01      	subs	r3, #1
 8020544:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020546:	fb00 5003 	mla	r0, r0, r3, r5
 802054a:	1400      	asrs	r0, r0, #16
 802054c:	f53f af21 	bmi.w	8020392 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020550:	3901      	subs	r1, #1
 8020552:	4288      	cmp	r0, r1
 8020554:	f6bf af1d 	bge.w	8020392 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020558:	9920      	ldr	r1, [sp, #128]	; 0x80
 802055a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802055c:	fb01 0303 	mla	r3, r1, r3, r0
 8020560:	141b      	asrs	r3, r3, #16
 8020562:	f53f af16 	bmi.w	8020392 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020566:	3a01      	subs	r2, #1
 8020568:	4293      	cmp	r3, r2
 802056a:	f6bf af12 	bge.w	8020392 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802056e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020570:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020574:	1cdf      	adds	r7, r3, #3
 8020576:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 802057a:	f1b9 0f00 	cmp.w	r9, #0
 802057e:	dc73      	bgt.n	8020668 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802058c:	441a      	add	r2, r3
 802058e:	920a      	str	r2, [sp, #40]	; 0x28
 8020590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020592:	2b00      	cmp	r3, #0
 8020594:	f340 8129 	ble.w	80207ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8020598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802059c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802059e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80205a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205a6:	eef0 6a62 	vmov.f32	s13, s5
 80205aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80205ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205b6:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80205ba:	eef0 6a43 	vmov.f32	s13, s6
 80205be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205c2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80205c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205de:	ee12 2a90 	vmov	r2, s5
 80205e2:	eef0 2a47 	vmov.f32	s5, s14
 80205e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ea:	ee13 2a10 	vmov	r2, s6
 80205ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80205f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80205f2:	eeb0 3a67 	vmov.f32	s6, s15
 80205f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205fa:	9320      	str	r3, [sp, #128]	; 0x80
 80205fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020600:	3b01      	subs	r3, #1
 8020602:	930d      	str	r3, [sp, #52]	; 0x34
 8020604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020606:	bf08      	it	eq
 8020608:	4613      	moveq	r3, r2
 802060a:	9309      	str	r3, [sp, #36]	; 0x24
 802060c:	e696      	b.n	802033c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802060e:	b149      	cbz	r1, 8020624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8020610:	5caa      	ldrb	r2, [r5, r2]
 8020612:	4670      	mov	r0, lr
 8020614:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020618:	4422      	add	r2, r4
 802061a:	4677      	mov	r7, lr
 802061c:	e6fb      	b.n	8020416 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802061e:	4670      	mov	r0, lr
 8020620:	4672      	mov	r2, lr
 8020622:	e6f8      	b.n	8020416 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020624:	4670      	mov	r0, lr
 8020626:	4672      	mov	r2, lr
 8020628:	e7f7      	b.n	802061a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802062a:	f110 0c01 	adds.w	ip, r0, #1
 802062e:	f53f af6a 	bmi.w	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020632:	4562      	cmp	r2, ip
 8020634:	f6ff af67 	blt.w	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020638:	f115 0c01 	adds.w	ip, r5, #1
 802063c:	f53f af63 	bmi.w	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020640:	4567      	cmp	r7, ip
 8020642:	f6ff af60 	blt.w	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020648:	b23f      	sxth	r7, r7
 802064a:	b212      	sxth	r2, r2
 802064c:	9002      	str	r0, [sp, #8]
 802064e:	9701      	str	r7, [sp, #4]
 8020650:	9200      	str	r2, [sp, #0]
 8020652:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020656:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802065a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802065e:	4623      	mov	r3, r4
 8020660:	4631      	mov	r1, r6
 8020662:	f7ff fd69 	bl	8020138 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020666:	e74e      	b.n	8020506 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020668:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802066a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802066c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020670:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020672:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020674:	1400      	asrs	r0, r0, #16
 8020676:	142d      	asrs	r5, r5, #16
 8020678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802067a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802067e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020682:	fb02 5000 	mla	r0, r2, r0, r5
 8020686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020688:	f815 e000 	ldrb.w	lr, [r5, r0]
 802068c:	eb05 0c00 	add.w	ip, r5, r0
 8020690:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020694:	eb04 060e 	add.w	r6, r4, lr
 8020698:	2b00      	cmp	r3, #0
 802069a:	f000 8097 	beq.w	80207cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802069e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80206a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80206a6:	4425      	add	r5, r4
 80206a8:	2900      	cmp	r1, #0
 80206aa:	f000 8098 	beq.w	80207de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80206ae:	eb0c 0002 	add.w	r0, ip, r2
 80206b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80206b6:	7840      	ldrb	r0, [r0, #1]
 80206b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80206c0:	4422      	add	r2, r4
 80206c2:	4420      	add	r0, r4
 80206c4:	b29b      	uxth	r3, r3
 80206c6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80206ca:	b289      	uxth	r1, r1
 80206cc:	f895 e000 	ldrb.w	lr, [r5]
 80206d0:	3703      	adds	r7, #3
 80206d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80206d6:	fb03 f801 	mul.w	r8, r3, r1
 80206da:	011b      	lsls	r3, r3, #4
 80206dc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80206e0:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80206e4:	eba3 0308 	sub.w	r3, r3, r8
 80206e8:	b289      	uxth	r1, r1
 80206ea:	b29b      	uxth	r3, r3
 80206ec:	ebac 0c01 	sub.w	ip, ip, r1
 80206f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80206f4:	fa1f fc8c 	uxth.w	ip, ip
 80206f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80206fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206fc:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020700:	f892 b000 	ldrb.w	fp, [r2]
 8020704:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020708:	f890 b000 	ldrb.w	fp, [r0]
 802070c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020710:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8020714:	fb1b fb03 	smulbb	fp, fp, r3
 8020718:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802071c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802071e:	fb0e be0a 	mla	lr, lr, sl, fp
 8020722:	fa1f fe8e 	uxth.w	lr, lr
 8020726:	f10e 0b01 	add.w	fp, lr, #1
 802072a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802072e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020732:	f807 ec06 	strb.w	lr, [r7, #-6]
 8020736:	f895 e001 	ldrb.w	lr, [r5, #1]
 802073a:	f896 b001 	ldrb.w	fp, [r6, #1]
 802073e:	fb03 fe0e 	mul.w	lr, r3, lr
 8020742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020744:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020748:	f892 b001 	ldrb.w	fp, [r2, #1]
 802074c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020750:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020754:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020758:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802075c:	fb1b fb03 	smulbb	fp, fp, r3
 8020760:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020766:	fb0e be0a 	mla	lr, lr, sl, fp
 802076a:	fa1f fe8e 	uxth.w	lr, lr
 802076e:	f10e 0b01 	add.w	fp, lr, #1
 8020772:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020776:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802077a:	f807 ec05 	strb.w	lr, [r7, #-5]
 802077e:	78ad      	ldrb	r5, [r5, #2]
 8020780:	78b6      	ldrb	r6, [r6, #2]
 8020782:	436b      	muls	r3, r5
 8020784:	7895      	ldrb	r5, [r2, #2]
 8020786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020788:	fb0c 3306 	mla	r3, ip, r6, r3
 802078c:	fb01 3305 	mla	r3, r1, r5, r3
 8020790:	7885      	ldrb	r5, [r0, #2]
 8020792:	fb08 3805 	mla	r8, r8, r5, r3
 8020796:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802079a:	fb13 f302 	smulbb	r3, r3, r2
 802079e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80207a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80207a4:	fb08 380a 	mla	r8, r8, sl, r3
 80207a8:	fa1f f888 	uxth.w	r8, r8
 80207ac:	f108 0301 	add.w	r3, r8, #1
 80207b0:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80207b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80207b6:	4413      	add	r3, r2
 80207b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80207ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80207be:	931d      	str	r3, [sp, #116]	; 0x74
 80207c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80207c2:	f807 8c04 	strb.w	r8, [r7, #-4]
 80207c6:	4413      	add	r3, r2
 80207c8:	931e      	str	r3, [sp, #120]	; 0x78
 80207ca:	e6d6      	b.n	802057a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80207cc:	b151      	cbz	r1, 80207e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80207ce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80207d2:	4630      	mov	r0, r6
 80207d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80207d8:	4422      	add	r2, r4
 80207da:	4635      	mov	r5, r6
 80207dc:	e772      	b.n	80206c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80207de:	4630      	mov	r0, r6
 80207e0:	4632      	mov	r2, r6
 80207e2:	e76f      	b.n	80206c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80207e4:	4630      	mov	r0, r6
 80207e6:	4632      	mov	r2, r6
 80207e8:	e7f7      	b.n	80207da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80207ea:	b013      	add	sp, #76	; 0x4c
 80207ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80207f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80207f4:	784c      	ldrb	r4, [r1, #1]
 80207f6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80207fa:	0224      	lsls	r4, r4, #8
 80207fc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8020800:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020804:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020808:	f891 a000 	ldrb.w	sl, [r1]
 802080c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8020810:	ea44 040a 	orr.w	r4, r4, sl
 8020814:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8020818:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 802081c:	9401      	str	r4, [sp, #4]
 802081e:	fb05 c70e 	mla	r7, r5, lr, ip
 8020822:	2d00      	cmp	r5, #0
 8020824:	eb02 0807 	add.w	r8, r2, r7
 8020828:	db72      	blt.n	8020910 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802082a:	45a9      	cmp	r9, r5
 802082c:	dd70      	ble.n	8020910 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802082e:	f1bc 0f00 	cmp.w	ip, #0
 8020832:	db6b      	blt.n	802090c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8020834:	45e6      	cmp	lr, ip
 8020836:	dd69      	ble.n	802090c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8020838:	5dd7      	ldrb	r7, [r2, r7]
 802083a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802083e:	441f      	add	r7, r3
 8020840:	f11c 0201 	adds.w	r2, ip, #1
 8020844:	d467      	bmi.n	8020916 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8020846:	4596      	cmp	lr, r2
 8020848:	dd65      	ble.n	8020916 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802084a:	2800      	cmp	r0, #0
 802084c:	d063      	beq.n	8020916 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802084e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020852:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020856:	441c      	add	r4, r3
 8020858:	3501      	adds	r5, #1
 802085a:	d460      	bmi.n	802091e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802085c:	45a9      	cmp	r9, r5
 802085e:	dd5e      	ble.n	802091e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020860:	2e00      	cmp	r6, #0
 8020862:	d05c      	beq.n	802091e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020864:	f1bc 0f00 	cmp.w	ip, #0
 8020868:	db57      	blt.n	802091a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802086a:	45e6      	cmp	lr, ip
 802086c:	dd55      	ble.n	802091a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802086e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020876:	441d      	add	r5, r3
 8020878:	f11c 0201 	adds.w	r2, ip, #1
 802087c:	d452      	bmi.n	8020924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802087e:	4596      	cmp	lr, r2
 8020880:	dd50      	ble.n	8020924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8020882:	2800      	cmp	r0, #0
 8020884:	d04e      	beq.n	8020924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8020886:	44c6      	add	lr, r8
 8020888:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802088c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020890:	4413      	add	r3, r2
 8020892:	b280      	uxth	r0, r0
 8020894:	f897 8000 	ldrb.w	r8, [r7]
 8020898:	b2b2      	uxth	r2, r6
 802089a:	fb00 f602 	mul.w	r6, r0, r2
 802089e:	0100      	lsls	r0, r0, #4
 80208a0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80208a4:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80208a8:	1b80      	subs	r0, r0, r6
 80208aa:	fa1f fc82 	uxth.w	ip, r2
 80208ae:	b282      	uxth	r2, r0
 80208b0:	7820      	ldrb	r0, [r4, #0]
 80208b2:	ebae 0e0c 	sub.w	lr, lr, ip
 80208b6:	4350      	muls	r0, r2
 80208b8:	fa1f fe8e 	uxth.w	lr, lr
 80208bc:	fb0e 0808 	mla	r8, lr, r8, r0
 80208c0:	7828      	ldrb	r0, [r5, #0]
 80208c2:	fb0c 8800 	mla	r8, ip, r0, r8
 80208c6:	7818      	ldrb	r0, [r3, #0]
 80208c8:	fb06 8000 	mla	r0, r6, r0, r8
 80208cc:	1200      	asrs	r0, r0, #8
 80208ce:	7008      	strb	r0, [r1, #0]
 80208d0:	7860      	ldrb	r0, [r4, #1]
 80208d2:	f897 8001 	ldrb.w	r8, [r7, #1]
 80208d6:	4350      	muls	r0, r2
 80208d8:	fb0e 0808 	mla	r8, lr, r8, r0
 80208dc:	7868      	ldrb	r0, [r5, #1]
 80208de:	fb0c 8800 	mla	r8, ip, r0, r8
 80208e2:	7858      	ldrb	r0, [r3, #1]
 80208e4:	fb06 8000 	mla	r0, r6, r0, r8
 80208e8:	1200      	asrs	r0, r0, #8
 80208ea:	7048      	strb	r0, [r1, #1]
 80208ec:	78a0      	ldrb	r0, [r4, #2]
 80208ee:	78bf      	ldrb	r7, [r7, #2]
 80208f0:	4350      	muls	r0, r2
 80208f2:	78aa      	ldrb	r2, [r5, #2]
 80208f4:	fb0e 0007 	mla	r0, lr, r7, r0
 80208f8:	fb0c 0c02 	mla	ip, ip, r2, r0
 80208fc:	789a      	ldrb	r2, [r3, #2]
 80208fe:	fb06 c202 	mla	r2, r6, r2, ip
 8020902:	1212      	asrs	r2, r2, #8
 8020904:	708a      	strb	r2, [r1, #2]
 8020906:	b002      	add	sp, #8
 8020908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802090c:	af01      	add	r7, sp, #4
 802090e:	e797      	b.n	8020840 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8020910:	ac01      	add	r4, sp, #4
 8020912:	4627      	mov	r7, r4
 8020914:	e7a0      	b.n	8020858 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020916:	ac01      	add	r4, sp, #4
 8020918:	e79e      	b.n	8020858 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802091a:	ad01      	add	r5, sp, #4
 802091c:	e7ac      	b.n	8020878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 802091e:	ab01      	add	r3, sp, #4
 8020920:	461d      	mov	r5, r3
 8020922:	e7b6      	b.n	8020892 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8020924:	ab01      	add	r3, sp, #4
 8020926:	e7b4      	b.n	8020892 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08020928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802092c:	b08d      	sub	sp, #52	; 0x34
 802092e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020932:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8020936:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020938:	900b      	str	r0, [sp, #44]	; 0x2c
 802093a:	9306      	str	r3, [sp, #24]
 802093c:	6850      	ldr	r0, [r2, #4]
 802093e:	6812      	ldr	r2, [r2, #0]
 8020940:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020942:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8020946:	fb00 1303 	mla	r3, r0, r3, r1
 802094a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802094e:	18d3      	adds	r3, r2, r3
 8020950:	9307      	str	r3, [sp, #28]
 8020952:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	9308      	str	r3, [sp, #32]
 8020958:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802095a:	685d      	ldr	r5, [r3, #4]
 802095c:	3504      	adds	r5, #4
 802095e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020960:	2b00      	cmp	r3, #0
 8020962:	dc03      	bgt.n	802096c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020966:	2b00      	cmp	r3, #0
 8020968:	f340 81e6 	ble.w	8020d38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802096c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802096e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020972:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020976:	1e48      	subs	r0, r1, #1
 8020978:	1e56      	subs	r6, r2, #1
 802097a:	9b06      	ldr	r3, [sp, #24]
 802097c:	2b00      	cmp	r3, #0
 802097e:	f340 80bd 	ble.w	8020afc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8020982:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020984:	1427      	asrs	r7, r4, #16
 8020986:	ea4f 4323 	mov.w	r3, r3, asr #16
 802098a:	d406      	bmi.n	802099a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802098c:	4287      	cmp	r7, r0
 802098e:	da04      	bge.n	802099a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020990:	2b00      	cmp	r3, #0
 8020992:	db02      	blt.n	802099a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020994:	42b3      	cmp	r3, r6
 8020996:	f2c0 80b2 	blt.w	8020afe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802099a:	3701      	adds	r7, #1
 802099c:	f100 80a1 	bmi.w	8020ae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80209a0:	42b9      	cmp	r1, r7
 80209a2:	f2c0 809e 	blt.w	8020ae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80209a6:	3301      	adds	r3, #1
 80209a8:	f100 809b 	bmi.w	8020ae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80209ac:	429a      	cmp	r2, r3
 80209ae:	f2c0 8098 	blt.w	8020ae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80209b2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80209b6:	f1bb 0f00 	cmp.w	fp, #0
 80209ba:	f340 80bf 	ble.w	8020b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80209be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80209c0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80209c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80209c4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80209c8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80209cc:	1420      	asrs	r0, r4, #16
 80209ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80209d0:	ea4f 4723 	mov.w	r7, r3, asr #16
 80209d4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80209d8:	6892      	ldr	r2, [r2, #8]
 80209da:	f100 8103 	bmi.w	8020be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80209de:	f102 3eff 	add.w	lr, r2, #4294967295
 80209e2:	4570      	cmp	r0, lr
 80209e4:	f280 80fe 	bge.w	8020be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80209e8:	2f00      	cmp	r7, #0
 80209ea:	f2c0 80fb 	blt.w	8020be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80209ee:	f10c 3eff 	add.w	lr, ip, #4294967295
 80209f2:	4577      	cmp	r7, lr
 80209f4:	f280 80f6 	bge.w	8020be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80209f8:	b212      	sxth	r2, r2
 80209fa:	fb07 0002 	mla	r0, r7, r2, r0
 80209fe:	9f08      	ldr	r7, [sp, #32]
 8020a00:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020a04:	eb07 0e00 	add.w	lr, r7, r0
 8020a08:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020a0c:	eb05 0c08 	add.w	ip, r5, r8
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	f000 80d8 	beq.w	8020bc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020a16:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020a1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020a1e:	442f      	add	r7, r5
 8020a20:	2900      	cmp	r1, #0
 8020a22:	f000 80d9 	beq.w	8020bd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020a26:	eb0e 0002 	add.w	r0, lr, r2
 8020a2a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020a2e:	7840      	ldrb	r0, [r0, #1]
 8020a30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a38:	442a      	add	r2, r5
 8020a3a:	4428      	add	r0, r5
 8020a3c:	b29b      	uxth	r3, r3
 8020a3e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8020a42:	b289      	uxth	r1, r1
 8020a44:	f897 8000 	ldrb.w	r8, [r7]
 8020a48:	fb03 f901 	mul.w	r9, r3, r1
 8020a4c:	011b      	lsls	r3, r3, #4
 8020a4e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020a52:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020a56:	eba3 0309 	sub.w	r3, r3, r9
 8020a5a:	b289      	uxth	r1, r1
 8020a5c:	b29b      	uxth	r3, r3
 8020a5e:	ebae 0e01 	sub.w	lr, lr, r1
 8020a62:	fb03 f808 	mul.w	r8, r3, r8
 8020a66:	fa1f fe8e 	uxth.w	lr, lr
 8020a6a:	fb0e 880a 	mla	r8, lr, sl, r8
 8020a6e:	f892 a000 	ldrb.w	sl, [r2]
 8020a72:	fb01 880a 	mla	r8, r1, sl, r8
 8020a76:	f890 a000 	ldrb.w	sl, [r0]
 8020a7a:	fb09 880a 	mla	r8, r9, sl, r8
 8020a7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020a82:	f886 8000 	strb.w	r8, [r6]
 8020a86:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020a8a:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020a8e:	fb03 f808 	mul.w	r8, r3, r8
 8020a92:	fb0e 880a 	mla	r8, lr, sl, r8
 8020a96:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020a9a:	fb01 880a 	mla	r8, r1, sl, r8
 8020a9e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020aa2:	fb09 880a 	mla	r8, r9, sl, r8
 8020aa6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020aaa:	f886 8001 	strb.w	r8, [r6, #1]
 8020aae:	78bf      	ldrb	r7, [r7, #2]
 8020ab0:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020ab4:	437b      	muls	r3, r7
 8020ab6:	7892      	ldrb	r2, [r2, #2]
 8020ab8:	fb0e 330c 	mla	r3, lr, ip, r3
 8020abc:	fb01 3102 	mla	r1, r1, r2, r3
 8020ac0:	7882      	ldrb	r2, [r0, #2]
 8020ac2:	fb09 1902 	mla	r9, r9, r2, r1
 8020ac6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020aca:	f886 9002 	strb.w	r9, [r6, #2]
 8020ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ad0:	3603      	adds	r6, #3
 8020ad2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020ad4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020ad8:	441c      	add	r4, r3
 8020ada:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020adc:	4413      	add	r3, r2
 8020ade:	9318      	str	r3, [sp, #96]	; 0x60
 8020ae0:	e769      	b.n	80209b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ae4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8020ae6:	441c      	add	r4, r3
 8020ae8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020aea:	443b      	add	r3, r7
 8020aec:	9318      	str	r3, [sp, #96]	; 0x60
 8020aee:	9b06      	ldr	r3, [sp, #24]
 8020af0:	3b01      	subs	r3, #1
 8020af2:	9306      	str	r3, [sp, #24]
 8020af4:	9b07      	ldr	r3, [sp, #28]
 8020af6:	3303      	adds	r3, #3
 8020af8:	9307      	str	r3, [sp, #28]
 8020afa:	e73e      	b.n	802097a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020afc:	d026      	beq.n	8020b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020afe:	9b06      	ldr	r3, [sp, #24]
 8020b00:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020b02:	3b01      	subs	r3, #1
 8020b04:	fb00 4003 	mla	r0, r0, r3, r4
 8020b08:	1400      	asrs	r0, r0, #16
 8020b0a:	f53f af52 	bmi.w	80209b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020b0e:	3901      	subs	r1, #1
 8020b10:	4288      	cmp	r0, r1
 8020b12:	f6bf af4e 	bge.w	80209b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020b16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020b18:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020b1a:	fb01 0303 	mla	r3, r1, r3, r0
 8020b1e:	141b      	asrs	r3, r3, #16
 8020b20:	f53f af47 	bmi.w	80209b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020b24:	3a01      	subs	r2, #1
 8020b26:	4293      	cmp	r3, r2
 8020b28:	f6bf af43 	bge.w	80209b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020b2c:	9b07      	ldr	r3, [sp, #28]
 8020b2e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020b32:	f103 0803 	add.w	r8, r3, #3
 8020b36:	f1ba 0f00 	cmp.w	sl, #0
 8020b3a:	dc71      	bgt.n	8020c20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020b3c:	9b06      	ldr	r3, [sp, #24]
 8020b3e:	9a07      	ldr	r2, [sp, #28]
 8020b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b48:	441a      	add	r2, r3
 8020b4a:	9207      	str	r2, [sp, #28]
 8020b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	f340 80f2 	ble.w	8020d38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020b54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020b5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b5e:	eeb0 6a62 	vmov.f32	s12, s5
 8020b62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b6e:	ee16 4a10 	vmov	r4, s12
 8020b72:	eeb0 6a43 	vmov.f32	s12, s6
 8020b76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b7a:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8020b7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b96:	ee12 2a90 	vmov	r2, s5
 8020b9a:	eef0 2a47 	vmov.f32	s5, s14
 8020b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ba2:	ee13 2a10 	vmov	r2, s6
 8020ba6:	9319      	str	r3, [sp, #100]	; 0x64
 8020ba8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020baa:	eeb0 3a67 	vmov.f32	s6, s15
 8020bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8020bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020bb8:	3b01      	subs	r3, #1
 8020bba:	9309      	str	r3, [sp, #36]	; 0x24
 8020bbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020bbe:	bf08      	it	eq
 8020bc0:	4613      	moveq	r3, r2
 8020bc2:	9306      	str	r3, [sp, #24]
 8020bc4:	e6cb      	b.n	802095e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020bc6:	b151      	cbz	r1, 8020bde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020bc8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020bcc:	4660      	mov	r0, ip
 8020bce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020bd2:	442a      	add	r2, r5
 8020bd4:	4667      	mov	r7, ip
 8020bd6:	e731      	b.n	8020a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020bd8:	4660      	mov	r0, ip
 8020bda:	4662      	mov	r2, ip
 8020bdc:	e72e      	b.n	8020a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020bde:	4660      	mov	r0, ip
 8020be0:	4662      	mov	r2, ip
 8020be2:	e7f7      	b.n	8020bd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8020be4:	f110 0e01 	adds.w	lr, r0, #1
 8020be8:	f53f af71 	bmi.w	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020bec:	4572      	cmp	r2, lr
 8020bee:	f6ff af6e 	blt.w	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020bf2:	f117 0e01 	adds.w	lr, r7, #1
 8020bf6:	f53f af6a 	bmi.w	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020bfa:	45f4      	cmp	ip, lr
 8020bfc:	f6ff af67 	blt.w	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020c00:	b212      	sxth	r2, r2
 8020c02:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020c06:	fa0f f38c 	sxth.w	r3, ip
 8020c0a:	9200      	str	r2, [sp, #0]
 8020c0c:	4631      	mov	r1, r6
 8020c0e:	9a08      	ldr	r2, [sp, #32]
 8020c10:	9301      	str	r3, [sp, #4]
 8020c12:	462b      	mov	r3, r5
 8020c14:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020c18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020c1a:	f7ff fde9 	bl	80207f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020c1e:	e756      	b.n	8020ace <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020c20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020c22:	1426      	asrs	r6, r4, #16
 8020c24:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020c26:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020c2a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020c2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020c30:	1400      	asrs	r0, r0, #16
 8020c32:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020c36:	fb02 6000 	mla	r0, r2, r0, r6
 8020c3a:	9e08      	ldr	r6, [sp, #32]
 8020c3c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020c40:	eb06 0c00 	add.w	ip, r6, r0
 8020c44:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020c48:	eb05 070e 	add.w	r7, r5, lr
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d064      	beq.n	8020d1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8020c50:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8020c54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020c58:	442e      	add	r6, r5
 8020c5a:	2900      	cmp	r1, #0
 8020c5c:	d066      	beq.n	8020d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8020c5e:	eb0c 0002 	add.w	r0, ip, r2
 8020c62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020c66:	7840      	ldrb	r0, [r0, #1]
 8020c68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020c70:	442a      	add	r2, r5
 8020c72:	4428      	add	r0, r5
 8020c74:	b29b      	uxth	r3, r3
 8020c76:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020c7a:	b289      	uxth	r1, r1
 8020c7c:	f896 e000 	ldrb.w	lr, [r6]
 8020c80:	f108 0803 	add.w	r8, r8, #3
 8020c84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020c88:	fb03 f901 	mul.w	r9, r3, r1
 8020c8c:	011b      	lsls	r3, r3, #4
 8020c8e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020c92:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020c96:	eba3 0309 	sub.w	r3, r3, r9
 8020c9a:	b289      	uxth	r1, r1
 8020c9c:	b29b      	uxth	r3, r3
 8020c9e:	ebac 0c01 	sub.w	ip, ip, r1
 8020ca2:	fb03 fe0e 	mul.w	lr, r3, lr
 8020ca6:	fa1f fc8c 	uxth.w	ip, ip
 8020caa:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020cae:	f892 b000 	ldrb.w	fp, [r2]
 8020cb2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020cb6:	f890 b000 	ldrb.w	fp, [r0]
 8020cba:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020cbe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020cc2:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020cc6:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020cca:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020cce:	fb03 fe0e 	mul.w	lr, r3, lr
 8020cd2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020cd6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020cda:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020cde:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020ce2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020ce6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020cea:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020cee:	78b6      	ldrb	r6, [r6, #2]
 8020cf0:	78bf      	ldrb	r7, [r7, #2]
 8020cf2:	4373      	muls	r3, r6
 8020cf4:	7896      	ldrb	r6, [r2, #2]
 8020cf6:	7882      	ldrb	r2, [r0, #2]
 8020cf8:	fb0c 3307 	mla	r3, ip, r7, r3
 8020cfc:	fb01 3306 	mla	r3, r1, r6, r3
 8020d00:	fb09 3902 	mla	r9, r9, r2, r3
 8020d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020d06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020d08:	441c      	add	r4, r3
 8020d0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020d0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d10:	4413      	add	r3, r2
 8020d12:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020d16:	9318      	str	r3, [sp, #96]	; 0x60
 8020d18:	e70d      	b.n	8020b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8020d1a:	b151      	cbz	r1, 8020d32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8020d1c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020d20:	4638      	mov	r0, r7
 8020d22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d26:	442a      	add	r2, r5
 8020d28:	463e      	mov	r6, r7
 8020d2a:	e7a3      	b.n	8020c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020d2c:	4638      	mov	r0, r7
 8020d2e:	463a      	mov	r2, r7
 8020d30:	e7a0      	b.n	8020c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020d32:	4638      	mov	r0, r7
 8020d34:	463a      	mov	r2, r7
 8020d36:	e7f7      	b.n	8020d28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8020d38:	b00d      	add	sp, #52	; 0x34
 8020d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d42:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8020d46:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020d4a:	2d00      	cmp	r5, #0
 8020d4c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020d50:	fb05 700c 	mla	r0, r5, ip, r7
 8020d54:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8020d58:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8020d5c:	eb02 0800 	add.w	r8, r2, r0
 8020d60:	f2c0 8118 	blt.w	8020f94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020d64:	45a9      	cmp	r9, r5
 8020d66:	f340 8115 	ble.w	8020f94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020d6a:	2f00      	cmp	r7, #0
 8020d6c:	f2c0 8110 	blt.w	8020f90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020d70:	45bc      	cmp	ip, r7
 8020d72:	f340 810d 	ble.w	8020f90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020d76:	5c12      	ldrb	r2, [r2, r0]
 8020d78:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020d7c:	1c7a      	adds	r2, r7, #1
 8020d7e:	f100 810c 	bmi.w	8020f9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020d82:	4594      	cmp	ip, r2
 8020d84:	f340 8109 	ble.w	8020f9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020d88:	2c00      	cmp	r4, #0
 8020d8a:	f000 8108 	beq.w	8020f9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8020d8e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020d92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020d96:	3501      	adds	r5, #1
 8020d98:	f100 8105 	bmi.w	8020fa6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020d9c:	45a9      	cmp	r9, r5
 8020d9e:	f340 8102 	ble.w	8020fa6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020da2:	f1be 0f00 	cmp.w	lr, #0
 8020da6:	f000 8101 	beq.w	8020fac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8020daa:	2f00      	cmp	r7, #0
 8020dac:	f2c0 80f9 	blt.w	8020fa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020db0:	45bc      	cmp	ip, r7
 8020db2:	f340 80f6 	ble.w	8020fa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020db6:	f818 200c 	ldrb.w	r2, [r8, ip]
 8020dba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020dbe:	3701      	adds	r7, #1
 8020dc0:	f100 80f7 	bmi.w	8020fb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020dc4:	45bc      	cmp	ip, r7
 8020dc6:	f340 80f4 	ble.w	8020fb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020dca:	2c00      	cmp	r4, #0
 8020dcc:	f000 80f3 	beq.w	8020fb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8020dd0:	44c4      	add	ip, r8
 8020dd2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020dd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020dda:	fa1f fc84 	uxth.w	ip, r4
 8020dde:	fa1f f48e 	uxth.w	r4, lr
 8020de2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020de6:	fb04 fe0c 	mul.w	lr, r4, ip
 8020dea:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020dee:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020df2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8020df6:	ebac 070e 	sub.w	r7, ip, lr
 8020dfa:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020dfe:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020e02:	b2a4      	uxth	r4, r4
 8020e04:	b2bf      	uxth	r7, r7
 8020e06:	1b1b      	subs	r3, r3, r4
 8020e08:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020e0c:	fb07 fc0a 	mul.w	ip, r7, sl
 8020e10:	b29b      	uxth	r3, r3
 8020e12:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020e16:	9300      	str	r3, [sp, #0]
 8020e18:	fb04 cc09 	mla	ip, r4, r9, ip
 8020e1c:	fb0e cc08 	mla	ip, lr, r8, ip
 8020e20:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020e24:	9301      	str	r3, [sp, #4]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	f000 80af 	beq.w	8020f8a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8020e2c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020e30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e34:	fb0b fc0c 	mul.w	ip, fp, ip
 8020e38:	fb0b f606 	mul.w	r6, fp, r6
 8020e3c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020e40:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020e44:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020e48:	44dc      	add	ip, fp
 8020e4a:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8020e4e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e56:	fb0a fb0b 	mul.w	fp, sl, fp
 8020e5a:	fb0a fa00 	mul.w	sl, sl, r0
 8020e5e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020e62:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020e66:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020e6a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020e6e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020e72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e76:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020e7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e7e:	0a36      	lsrs	r6, r6, #8
 8020e80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e84:	44dc      	add	ip, fp
 8020e86:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020e8a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020e8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e92:	fb09 fb0b 	mul.w	fp, r9, fp
 8020e96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e9a:	fb09 f905 	mul.w	r9, r9, r5
 8020e9e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020ea2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ea6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8020eaa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020eae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020eb2:	fb0c fc07 	mul.w	ip, ip, r7
 8020eb6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020eba:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8020ebe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020ec2:	4458      	add	r0, fp
 8020ec4:	fb08 f505 	mul.w	r5, r8, r5
 8020ec8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ecc:	fb08 f802 	mul.w	r8, r8, r2
 8020ed0:	0a00      	lsrs	r0, r0, #8
 8020ed2:	0a2a      	lsrs	r2, r5, #8
 8020ed4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020ed8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020edc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020ee0:	4415      	add	r5, r2
 8020ee2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020ee6:	0a2d      	lsrs	r5, r5, #8
 8020ee8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020eec:	9a00      	ldr	r2, [sp, #0]
 8020eee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020ef2:	fb03 cc02 	mla	ip, r3, r2, ip
 8020ef6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020efa:	9b01      	ldr	r3, [sp, #4]
 8020efc:	fb05 c50e 	mla	r5, r5, lr, ip
 8020f00:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020f04:	fb00 5004 	mla	r0, r0, r4, r5
 8020f08:	0a00      	lsrs	r0, r0, #8
 8020f0a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020f0e:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8020f12:	4378      	muls	r0, r7
 8020f14:	fb02 0006 	mla	r0, r2, r6, r0
 8020f18:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020f1c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8020f20:	fb04 e000 	mla	r0, r4, r0, lr
 8020f24:	0a00      	lsrs	r0, r0, #8
 8020f26:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020f2a:	4328      	orrs	r0, r5
 8020f2c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8020f30:	b2ad      	uxth	r5, r5
 8020f32:	b2c4      	uxtb	r4, r0
 8020f34:	436b      	muls	r3, r5
 8020f36:	fb14 f405 	smulbb	r4, r4, r5
 8020f3a:	1c5a      	adds	r2, r3, #1
 8020f3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020f40:	780b      	ldrb	r3, [r1, #0]
 8020f42:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8020f46:	b2d2      	uxtb	r2, r2
 8020f48:	fb03 4302 	mla	r3, r3, r2, r4
 8020f4c:	b29b      	uxth	r3, r3
 8020f4e:	1c5c      	adds	r4, r3, #1
 8020f50:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020f54:	784c      	ldrb	r4, [r1, #1]
 8020f56:	fb14 f402 	smulbb	r4, r4, r2
 8020f5a:	121b      	asrs	r3, r3, #8
 8020f5c:	700b      	strb	r3, [r1, #0]
 8020f5e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020f62:	fb03 4305 	mla	r3, r3, r5, r4
 8020f66:	b29b      	uxth	r3, r3
 8020f68:	1c5c      	adds	r4, r3, #1
 8020f6a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020f6e:	0c04      	lsrs	r4, r0, #16
 8020f70:	7888      	ldrb	r0, [r1, #2]
 8020f72:	121b      	asrs	r3, r3, #8
 8020f74:	fb10 f002 	smulbb	r0, r0, r2
 8020f78:	704b      	strb	r3, [r1, #1]
 8020f7a:	fb04 0005 	mla	r0, r4, r5, r0
 8020f7e:	b280      	uxth	r0, r0
 8020f80:	1c43      	adds	r3, r0, #1
 8020f82:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020f86:	1200      	asrs	r0, r0, #8
 8020f88:	7088      	strb	r0, [r1, #2]
 8020f8a:	b003      	add	sp, #12
 8020f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f90:	2600      	movs	r6, #0
 8020f92:	e6f3      	b.n	8020d7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8020f94:	2000      	movs	r0, #0
 8020f96:	4606      	mov	r6, r0
 8020f98:	e6fd      	b.n	8020d96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020f9a:	2000      	movs	r0, #0
 8020f9c:	e6fb      	b.n	8020d96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020f9e:	4620      	mov	r0, r4
 8020fa0:	e6f9      	b.n	8020d96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020fa2:	2500      	movs	r5, #0
 8020fa4:	e70b      	b.n	8020dbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8020fa6:	2200      	movs	r2, #0
 8020fa8:	4615      	mov	r5, r2
 8020faa:	e716      	b.n	8020dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020fac:	4672      	mov	r2, lr
 8020fae:	4675      	mov	r5, lr
 8020fb0:	e713      	b.n	8020dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020fb2:	2200      	movs	r2, #0
 8020fb4:	e711      	b.n	8020dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020fb6:	4622      	mov	r2, r4
 8020fb8:	e70f      	b.n	8020dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08020fba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fbe:	b09f      	sub	sp, #124	; 0x7c
 8020fc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8020fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8020fc4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020fc6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020fca:	901d      	str	r0, [sp, #116]	; 0x74
 8020fcc:	931c      	str	r3, [sp, #112]	; 0x70
 8020fce:	6850      	ldr	r0, [r2, #4]
 8020fd0:	9119      	str	r1, [sp, #100]	; 0x64
 8020fd2:	6812      	ldr	r2, [r2, #0]
 8020fd4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020fd6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020fda:	fb00 1303 	mla	r3, r0, r3, r1
 8020fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fe2:	18d3      	adds	r3, r2, r3
 8020fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8020fe6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	9312      	str	r3, [sp, #72]	; 0x48
 8020fec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020fee:	685e      	ldr	r6, [r3, #4]
 8020ff0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020ff4:	3604      	adds	r6, #4
 8020ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8020ff8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	dc03      	bgt.n	8021006 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020ffe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021000:	2b00      	cmp	r3, #0
 8021002:	f340 8378 	ble.w	80216f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8021006:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021008:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802100c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021010:	1e48      	subs	r0, r1, #1
 8021012:	1e57      	subs	r7, r2, #1
 8021014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021016:	2b00      	cmp	r3, #0
 8021018:	f340 818c 	ble.w	8021334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802101c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802101e:	142b      	asrs	r3, r5, #16
 8021020:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021024:	d406      	bmi.n	8021034 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021026:	4584      	cmp	ip, r0
 8021028:	da04      	bge.n	8021034 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802102a:	2b00      	cmp	r3, #0
 802102c:	db02      	blt.n	8021034 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802102e:	42bb      	cmp	r3, r7
 8021030:	f2c0 8181 	blt.w	8021336 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021034:	f11c 0c01 	adds.w	ip, ip, #1
 8021038:	f100 816f 	bmi.w	802131a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802103c:	4561      	cmp	r1, ip
 802103e:	f2c0 816c 	blt.w	802131a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021042:	3301      	adds	r3, #1
 8021044:	f100 8169 	bmi.w	802131a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021048:	429a      	cmp	r2, r3
 802104a:	f2c0 8166 	blt.w	802131a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802104e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021050:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021052:	931a      	str	r3, [sp, #104]	; 0x68
 8021054:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021056:	2b00      	cmp	r3, #0
 8021058:	f340 818c 	ble.w	8021374 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802105c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802105e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021062:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021066:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802106a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802106c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021070:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021072:	141b      	asrs	r3, r3, #16
 8021074:	f100 81d0 	bmi.w	8021418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021078:	f100 38ff 	add.w	r8, r0, #4294967295
 802107c:	4543      	cmp	r3, r8
 802107e:	f280 81cb 	bge.w	8021418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021082:	f1bc 0f00 	cmp.w	ip, #0
 8021086:	f2c0 81c7 	blt.w	8021418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802108a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802108e:	45c4      	cmp	ip, r8
 8021090:	f280 81c2 	bge.w	8021418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021094:	b200      	sxth	r0, r0
 8021096:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021098:	fb0c 3300 	mla	r3, ip, r0, r3
 802109c:	eb04 0803 	add.w	r8, r4, r3
 80210a0:	5ce3      	ldrb	r3, [r4, r3]
 80210a2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80210a6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80210aa:	2a00      	cmp	r2, #0
 80210ac:	f000 81a9 	beq.w	8021402 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80210b0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80210b4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80210b8:	940e      	str	r4, [sp, #56]	; 0x38
 80210ba:	0e24      	lsrs	r4, r4, #24
 80210bc:	9415      	str	r4, [sp, #84]	; 0x54
 80210be:	b179      	cbz	r1, 80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80210c0:	eb08 0c00 	add.w	ip, r8, r0
 80210c4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80210c8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80210cc:	900a      	str	r0, [sp, #40]	; 0x28
 80210ce:	0e00      	lsrs	r0, r0, #24
 80210d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80210d2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80210d6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80210da:	900f      	str	r0, [sp, #60]	; 0x3c
 80210dc:	0e00      	lsrs	r0, r0, #24
 80210de:	9016      	str	r0, [sp, #88]	; 0x58
 80210e0:	b292      	uxth	r2, r2
 80210e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80210e4:	b289      	uxth	r1, r1
 80210e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80210e8:	fb02 f901 	mul.w	r9, r2, r1
 80210ec:	0112      	lsls	r2, r2, #4
 80210ee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80210f2:	eba2 0809 	sub.w	r8, r2, r9
 80210f6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80210fa:	b289      	uxth	r1, r1
 80210fc:	fa1f f888 	uxth.w	r8, r8
 8021100:	1a52      	subs	r2, r2, r1
 8021102:	fb08 f000 	mul.w	r0, r8, r0
 8021106:	b292      	uxth	r2, r2
 8021108:	fb02 000e 	mla	r0, r2, lr, r0
 802110c:	fb01 0004 	mla	r0, r1, r4, r0
 8021110:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021112:	fb09 0004 	mla	r0, r9, r4, r0
 8021116:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802111a:	2800      	cmp	r0, #0
 802111c:	f000 80f2 	beq.w	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021120:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021124:	d01b      	beq.n	802115e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8021126:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802112a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802112e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021132:	fb0e fe03 	mul.w	lr, lr, r3
 8021136:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802113a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802113e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021142:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021146:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802114a:	4453      	add	r3, sl
 802114c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021150:	0a1b      	lsrs	r3, r3, #8
 8021152:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021156:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802115a:	ea43 030c 	orr.w	r3, r3, ip
 802115e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021160:	2cff      	cmp	r4, #255	; 0xff
 8021162:	d021      	beq.n	80211a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021164:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021166:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802116a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802116c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021170:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021172:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021176:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021178:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802117c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021180:	fb04 fa0a 	mul.w	sl, r4, sl
 8021184:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021188:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802118c:	44de      	add	lr, fp
 802118e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021192:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021196:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802119a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802119e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211a2:	ea4e 040a 	orr.w	r4, lr, sl
 80211a6:	940e      	str	r4, [sp, #56]	; 0x38
 80211a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211aa:	2cff      	cmp	r4, #255	; 0xff
 80211ac:	d021      	beq.n	80211f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80211ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211b0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80211b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211b6:	fb04 fb0b 	mul.w	fp, r4, fp
 80211ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80211c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211c2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80211c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80211ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211d2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80211d6:	44de      	add	lr, fp
 80211d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80211dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211ec:	ea4e 040a 	orr.w	r4, lr, sl
 80211f0:	940a      	str	r4, [sp, #40]	; 0x28
 80211f2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80211f4:	2cff      	cmp	r4, #255	; 0xff
 80211f6:	d021      	beq.n	802123c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80211f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211fa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80211fe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021200:	fb04 fb0b 	mul.w	fp, r4, fp
 8021204:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021206:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802120a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802120c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021210:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021214:	fb04 fa0a 	mul.w	sl, r4, sl
 8021218:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802121c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021220:	44de      	add	lr, fp
 8021222:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021226:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802122a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802122e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021232:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021236:	ea4e 040a 	orr.w	r4, lr, sl
 802123a:	940f      	str	r4, [sp, #60]	; 0x3c
 802123c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802123e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021246:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802124a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802124c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021250:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021254:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021258:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802125a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802125e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021262:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021264:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021268:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802126c:	fb08 f80e 	mul.w	r8, r8, lr
 8021270:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021274:	fb02 8303 	mla	r3, r2, r3, r8
 8021278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802127a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802127e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021284:	fb01 330a 	mla	r3, r1, sl, r3
 8021288:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802128c:	fb09 3901 	mla	r9, r9, r1, r3
 8021290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021292:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021294:	4343      	muls	r3, r0
 8021296:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802129a:	1c58      	adds	r0, r3, #1
 802129c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80212a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80212a4:	ea4c 0c09 	orr.w	ip, ip, r9
 80212a8:	783b      	ldrb	r3, [r7, #0]
 80212aa:	fa5f f28c 	uxtb.w	r2, ip
 80212ae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80212b2:	fb12 f201 	smulbb	r2, r2, r1
 80212b6:	b2c0      	uxtb	r0, r0
 80212b8:	fb03 2300 	mla	r3, r3, r0, r2
 80212bc:	b29b      	uxth	r3, r3
 80212be:	1c5a      	adds	r2, r3, #1
 80212c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80212c4:	787a      	ldrb	r2, [r7, #1]
 80212c6:	fb12 f200 	smulbb	r2, r2, r0
 80212ca:	121b      	asrs	r3, r3, #8
 80212cc:	703b      	strb	r3, [r7, #0]
 80212ce:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80212d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80212d6:	fb03 2301 	mla	r3, r3, r1, r2
 80212da:	b29b      	uxth	r3, r3
 80212dc:	1c5a      	adds	r2, r3, #1
 80212de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80212e2:	121b      	asrs	r3, r3, #8
 80212e4:	707b      	strb	r3, [r7, #1]
 80212e6:	78bb      	ldrb	r3, [r7, #2]
 80212e8:	fb13 f000 	smulbb	r0, r3, r0
 80212ec:	fb0c 0c01 	mla	ip, ip, r1, r0
 80212f0:	fa1f fc8c 	uxth.w	ip, ip
 80212f4:	f10c 0301 	add.w	r3, ip, #1
 80212f8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80212fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021300:	f887 c002 	strb.w	ip, [r7, #2]
 8021304:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021306:	3703      	adds	r7, #3
 8021308:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802130a:	441a      	add	r2, r3
 802130c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802130e:	441d      	add	r5, r3
 8021310:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021312:	9229      	str	r2, [sp, #164]	; 0xa4
 8021314:	3b01      	subs	r3, #1
 8021316:	931a      	str	r3, [sp, #104]	; 0x68
 8021318:	e69c      	b.n	8021054 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802131a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802131c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802131e:	441c      	add	r4, r3
 8021320:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021322:	441d      	add	r5, r3
 8021324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021326:	9429      	str	r4, [sp, #164]	; 0xa4
 8021328:	3b01      	subs	r3, #1
 802132a:	9309      	str	r3, [sp, #36]	; 0x24
 802132c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802132e:	3303      	adds	r3, #3
 8021330:	930c      	str	r3, [sp, #48]	; 0x30
 8021332:	e66f      	b.n	8021014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021334:	d026      	beq.n	8021384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021338:	982b      	ldr	r0, [sp, #172]	; 0xac
 802133a:	3b01      	subs	r3, #1
 802133c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802133e:	fb00 4003 	mla	r0, r0, r3, r4
 8021342:	1400      	asrs	r0, r0, #16
 8021344:	f53f ae83 	bmi.w	802104e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021348:	3901      	subs	r1, #1
 802134a:	4288      	cmp	r0, r1
 802134c:	f6bf ae7f 	bge.w	802104e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021350:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021352:	fb01 5303 	mla	r3, r1, r3, r5
 8021356:	141b      	asrs	r3, r3, #16
 8021358:	f53f ae79 	bmi.w	802104e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802135c:	3a01      	subs	r2, #1
 802135e:	4293      	cmp	r3, r2
 8021360:	f6bf ae75 	bge.w	802104e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021366:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802136a:	f103 0e03 	add.w	lr, r3, #3
 802136e:	f1bb 0f00 	cmp.w	fp, #0
 8021372:	dc71      	bgt.n	8021458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021376:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802137a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802137c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021380:	4423      	add	r3, r4
 8021382:	930c      	str	r3, [sp, #48]	; 0x30
 8021384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021386:	2b00      	cmp	r3, #0
 8021388:	f340 81b5 	ble.w	80216f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802138c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021390:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021392:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021396:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802139a:	eef0 6a62 	vmov.f32	s13, s5
 802139e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80213a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80213a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80213aa:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80213ae:	eef0 6a43 	vmov.f32	s13, s6
 80213b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80213b6:	ee16 5a90 	vmov	r5, s13
 80213ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80213be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80213c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80213c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80213ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80213ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80213d2:	ee12 2a90 	vmov	r2, s5
 80213d6:	eef0 2a47 	vmov.f32	s5, s14
 80213da:	fb92 f3f3 	sdiv	r3, r2, r3
 80213de:	ee13 2a10 	vmov	r2, s6
 80213e2:	932b      	str	r3, [sp, #172]	; 0xac
 80213e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213e6:	eeb0 3a67 	vmov.f32	s6, s15
 80213ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80213ee:	932c      	str	r3, [sp, #176]	; 0xb0
 80213f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80213f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80213f4:	3b01      	subs	r3, #1
 80213f6:	9319      	str	r3, [sp, #100]	; 0x64
 80213f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213fa:	bf08      	it	eq
 80213fc:	4613      	moveq	r3, r2
 80213fe:	9309      	str	r3, [sp, #36]	; 0x24
 8021400:	e5fa      	b.n	8020ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021402:	2900      	cmp	r1, #0
 8021404:	f43f ae6c 	beq.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021408:	f818 0000 	ldrb.w	r0, [r8, r0]
 802140c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021410:	900a      	str	r0, [sp, #40]	; 0x28
 8021412:	0e00      	lsrs	r0, r0, #24
 8021414:	9013      	str	r0, [sp, #76]	; 0x4c
 8021416:	e663      	b.n	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021418:	f113 0801 	adds.w	r8, r3, #1
 802141c:	f53f af72 	bmi.w	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021420:	4540      	cmp	r0, r8
 8021422:	f6ff af6f 	blt.w	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021426:	f11c 0801 	adds.w	r8, ip, #1
 802142a:	f53f af6b 	bmi.w	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802142e:	45c6      	cmp	lr, r8
 8021430:	f6ff af68 	blt.w	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021434:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021436:	b200      	sxth	r0, r0
 8021438:	9302      	str	r3, [sp, #8]
 802143a:	fa0f f38e 	sxth.w	r3, lr
 802143e:	9000      	str	r0, [sp, #0]
 8021440:	9301      	str	r3, [sp, #4]
 8021442:	4633      	mov	r3, r6
 8021444:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021446:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802144a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802144e:	4639      	mov	r1, r7
 8021450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021452:	f7ff fc74 	bl	8020d3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021456:	e755      	b.n	8021304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021458:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802145a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802145e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021460:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021464:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021466:	1427      	asrs	r7, r4, #16
 8021468:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802146a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802146e:	142b      	asrs	r3, r5, #16
 8021470:	fb01 7303 	mla	r3, r1, r3, r7
 8021474:	18e7      	adds	r7, r4, r3
 8021476:	5ce3      	ldrb	r3, [r4, r3]
 8021478:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802147c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021480:	2a00      	cmp	r2, #0
 8021482:	f000 812e 	beq.w	80216e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8021486:	f897 8001 	ldrb.w	r8, [r7, #1]
 802148a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802148e:	9410      	str	r4, [sp, #64]	; 0x40
 8021490:	0e24      	lsrs	r4, r4, #24
 8021492:	9417      	str	r4, [sp, #92]	; 0x5c
 8021494:	b170      	cbz	r0, 80214b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8021496:	eb07 0801 	add.w	r8, r7, r1
 802149a:	5c79      	ldrb	r1, [r7, r1]
 802149c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80214a2:	0e09      	lsrs	r1, r1, #24
 80214a4:	9114      	str	r1, [sp, #80]	; 0x50
 80214a6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80214aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214ae:	9111      	str	r1, [sp, #68]	; 0x44
 80214b0:	0e09      	lsrs	r1, r1, #24
 80214b2:	9118      	str	r1, [sp, #96]	; 0x60
 80214b4:	b292      	uxth	r2, r2
 80214b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80214b8:	b280      	uxth	r0, r0
 80214ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214bc:	fb02 f900 	mul.w	r9, r2, r0
 80214c0:	0112      	lsls	r2, r2, #4
 80214c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80214c6:	eba2 0809 	sub.w	r8, r2, r9
 80214ca:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80214ce:	b280      	uxth	r0, r0
 80214d0:	fa1f f888 	uxth.w	r8, r8
 80214d4:	1a12      	subs	r2, r2, r0
 80214d6:	fb08 f101 	mul.w	r1, r8, r1
 80214da:	b292      	uxth	r2, r2
 80214dc:	fb02 110c 	mla	r1, r2, ip, r1
 80214e0:	fb00 1104 	mla	r1, r0, r4, r1
 80214e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80214e6:	fb09 1104 	mla	r1, r9, r4, r1
 80214ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80214ee:	2900      	cmp	r1, #0
 80214f0:	f000 80ec 	beq.w	80216cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80214f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80214f8:	d019      	beq.n	802152e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80214fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80214fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021502:	fb0c fa0a 	mul.w	sl, ip, sl
 8021506:	fb0c fc03 	mul.w	ip, ip, r3
 802150a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802150e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021512:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021516:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802151a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802151e:	4453      	add	r3, sl
 8021520:	0a3f      	lsrs	r7, r7, #8
 8021522:	0a1b      	lsrs	r3, r3, #8
 8021524:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021528:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802152c:	433b      	orrs	r3, r7
 802152e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021530:	2cff      	cmp	r4, #255	; 0xff
 8021532:	d020      	beq.n	8021576 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8021534:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021536:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802153a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802153c:	4367      	muls	r7, r4
 802153e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021540:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021544:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021548:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802154a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802154e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021552:	fb04 fa0a 	mul.w	sl, r4, sl
 8021556:	44bc      	add	ip, r7
 8021558:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802155c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021560:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021564:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021568:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802156c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021570:	ea4c 040a 	orr.w	r4, ip, sl
 8021574:	9410      	str	r4, [sp, #64]	; 0x40
 8021576:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021578:	2cff      	cmp	r4, #255	; 0xff
 802157a:	d020      	beq.n	80215be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 802157c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802157e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021582:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021584:	4367      	muls	r7, r4
 8021586:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021588:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802158c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021590:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021592:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021596:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802159a:	fb04 fa0a 	mul.w	sl, r4, sl
 802159e:	44bc      	add	ip, r7
 80215a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80215a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80215ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215b8:	ea4c 040a 	orr.w	r4, ip, sl
 80215bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80215be:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80215c0:	2cff      	cmp	r4, #255	; 0xff
 80215c2:	d020      	beq.n	8021606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80215c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80215c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80215ca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80215cc:	4367      	muls	r7, r4
 80215ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80215d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80215d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80215d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80215da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80215de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80215e6:	44bc      	add	ip, r7
 80215e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80215ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80215f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021600:	ea4c 040a 	orr.w	r4, ip, sl
 8021604:	9411      	str	r4, [sp, #68]	; 0x44
 8021606:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021608:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802160c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021610:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021614:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021616:	fb08 f707 	mul.w	r7, r8, r7
 802161a:	fb02 770c 	mla	r7, r2, ip, r7
 802161e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021622:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021624:	fb00 770c 	mla	r7, r0, ip, r7
 8021628:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802162c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802162e:	fb09 770c 	mla	r7, r9, ip, r7
 8021632:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021636:	fb08 f80c 	mul.w	r8, r8, ip
 802163a:	0a3f      	lsrs	r7, r7, #8
 802163c:	fb02 8303 	mla	r3, r2, r3, r8
 8021640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021642:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021646:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802164a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802164c:	fb00 330a 	mla	r3, r0, sl, r3
 8021650:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021654:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021656:	fb09 3c0c 	mla	ip, r9, ip, r3
 802165a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802165c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021660:	434b      	muls	r3, r1
 8021662:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021666:	1c59      	adds	r1, r3, #1
 8021668:	ea47 070c 	orr.w	r7, r7, ip
 802166c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021670:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021674:	b2fa      	uxtb	r2, r7
 8021676:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802167a:	fb12 f200 	smulbb	r2, r2, r0
 802167e:	b2c9      	uxtb	r1, r1
 8021680:	fb03 2301 	mla	r3, r3, r1, r2
 8021684:	b29b      	uxth	r3, r3
 8021686:	1c5a      	adds	r2, r3, #1
 8021688:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802168c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021690:	fb12 f201 	smulbb	r2, r2, r1
 8021694:	121b      	asrs	r3, r3, #8
 8021696:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802169a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802169e:	0c3f      	lsrs	r7, r7, #16
 80216a0:	fb03 2300 	mla	r3, r3, r0, r2
 80216a4:	b29b      	uxth	r3, r3
 80216a6:	1c5a      	adds	r2, r3, #1
 80216a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80216ac:	121b      	asrs	r3, r3, #8
 80216ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80216b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80216b6:	fb13 f101 	smulbb	r1, r3, r1
 80216ba:	fb07 1700 	mla	r7, r7, r0, r1
 80216be:	b2bf      	uxth	r7, r7
 80216c0:	1c7b      	adds	r3, r7, #1
 80216c2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80216c6:	123f      	asrs	r7, r7, #8
 80216c8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80216cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80216ce:	f10e 0e03 	add.w	lr, lr, #3
 80216d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80216d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80216d8:	441a      	add	r2, r3
 80216da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80216dc:	9229      	str	r2, [sp, #164]	; 0xa4
 80216de:	441d      	add	r5, r3
 80216e0:	e645      	b.n	802136e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80216e2:	2800      	cmp	r0, #0
 80216e4:	f43f aee6 	beq.w	80214b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80216e8:	5c79      	ldrb	r1, [r7, r1]
 80216ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80216ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80216f0:	0e09      	lsrs	r1, r1, #24
 80216f2:	9114      	str	r1, [sp, #80]	; 0x50
 80216f4:	e6de      	b.n	80214b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80216f6:	b01f      	add	sp, #124	; 0x7c
 80216f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80216fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021700:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8021704:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021708:	2d00      	cmp	r5, #0
 802170a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802170e:	fb05 700e 	mla	r0, r5, lr, r7
 8021712:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8021716:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802171a:	eb02 0800 	add.w	r8, r2, r0
 802171e:	f2c0 8105 	blt.w	802192c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8021722:	45a9      	cmp	r9, r5
 8021724:	f340 8102 	ble.w	802192c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8021728:	2f00      	cmp	r7, #0
 802172a:	f2c0 80fd 	blt.w	8021928 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802172e:	45be      	cmp	lr, r7
 8021730:	f340 80fa 	ble.w	8021928 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8021734:	5c12      	ldrb	r2, [r2, r0]
 8021736:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802173a:	1c7a      	adds	r2, r7, #1
 802173c:	f100 80f9 	bmi.w	8021932 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8021740:	4596      	cmp	lr, r2
 8021742:	f340 80f6 	ble.w	8021932 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8021746:	2c00      	cmp	r4, #0
 8021748:	f000 80f5 	beq.w	8021936 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 802174c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021750:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021754:	3501      	adds	r5, #1
 8021756:	f100 80f2 	bmi.w	802193e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802175a:	45a9      	cmp	r9, r5
 802175c:	f340 80ef 	ble.w	802193e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8021760:	f1bc 0f00 	cmp.w	ip, #0
 8021764:	f000 80ee 	beq.w	8021944 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8021768:	2f00      	cmp	r7, #0
 802176a:	f2c0 80e6 	blt.w	802193a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802176e:	45be      	cmp	lr, r7
 8021770:	f340 80e3 	ble.w	802193a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8021774:	f818 200e 	ldrb.w	r2, [r8, lr]
 8021778:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802177c:	3701      	adds	r7, #1
 802177e:	f100 80e4 	bmi.w	802194a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8021782:	45be      	cmp	lr, r7
 8021784:	f340 80e1 	ble.w	802194a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8021788:	2c00      	cmp	r4, #0
 802178a:	f000 80e0 	beq.w	802194e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802178e:	44c6      	add	lr, r8
 8021790:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021794:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021798:	b2a3      	uxth	r3, r4
 802179a:	fa1f fc8c 	uxth.w	ip, ip
 802179e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80217a2:	fb0c fe03 	mul.w	lr, ip, r3
 80217a6:	011b      	lsls	r3, r3, #4
 80217a8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80217ac:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80217b0:	eba3 070e 	sub.w	r7, r3, lr
 80217b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80217b8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80217bc:	fa1f f48c 	uxth.w	r4, ip
 80217c0:	b2bf      	uxth	r7, r7
 80217c2:	1b1b      	subs	r3, r3, r4
 80217c4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80217c8:	fb07 fc0a 	mul.w	ip, r7, sl
 80217cc:	b29b      	uxth	r3, r3
 80217ce:	fb03 cc0b 	mla	ip, r3, fp, ip
 80217d2:	9300      	str	r3, [sp, #0]
 80217d4:	fb04 cc09 	mla	ip, r4, r9, ip
 80217d8:	fb0e cc08 	mla	ip, lr, r8, ip
 80217dc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80217e0:	9301      	str	r3, [sp, #4]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	f000 809d 	beq.w	8021922 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80217e8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80217ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80217f0:	fb0b fc0c 	mul.w	ip, fp, ip
 80217f4:	fb0b f606 	mul.w	r6, fp, r6
 80217f8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80217fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021800:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021804:	44dc      	add	ip, fp
 8021806:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 802180a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802180e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021812:	fb0a fb0b 	mul.w	fp, sl, fp
 8021816:	fb0a fa00 	mul.w	sl, sl, r0
 802181a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802181e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021822:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021826:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802182a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802182e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021832:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021836:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802183a:	0a36      	lsrs	r6, r6, #8
 802183c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021840:	44dc      	add	ip, fp
 8021842:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021846:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802184a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802184e:	fb09 fb0b 	mul.w	fp, r9, fp
 8021852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021856:	fb09 f905 	mul.w	r9, r9, r5
 802185a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802185e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021862:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8021866:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802186a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802186e:	fb0c fc07 	mul.w	ip, ip, r7
 8021872:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8021876:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802187a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802187e:	4458      	add	r0, fp
 8021880:	fb08 f505 	mul.w	r5, r8, r5
 8021884:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021888:	fb08 f802 	mul.w	r8, r8, r2
 802188c:	0a00      	lsrs	r0, r0, #8
 802188e:	0a2a      	lsrs	r2, r5, #8
 8021890:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8021894:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021898:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802189c:	4415      	add	r5, r2
 802189e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80218a2:	0a2d      	lsrs	r5, r5, #8
 80218a4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80218a8:	9a00      	ldr	r2, [sp, #0]
 80218aa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80218ae:	fb03 cc02 	mla	ip, r3, r2, ip
 80218b2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80218b6:	9b01      	ldr	r3, [sp, #4]
 80218b8:	fb05 c50e 	mla	r5, r5, lr, ip
 80218bc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80218c0:	43db      	mvns	r3, r3
 80218c2:	fb00 5004 	mla	r0, r0, r4, r5
 80218c6:	b2db      	uxtb	r3, r3
 80218c8:	0a00      	lsrs	r0, r0, #8
 80218ca:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80218ce:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80218d2:	4378      	muls	r0, r7
 80218d4:	fb02 0006 	mla	r0, r2, r6, r0
 80218d8:	780a      	ldrb	r2, [r1, #0]
 80218da:	fb0e 0e08 	mla	lr, lr, r8, r0
 80218de:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80218e2:	fb04 e000 	mla	r0, r4, r0, lr
 80218e6:	fb02 f403 	mul.w	r4, r2, r3
 80218ea:	0a00      	lsrs	r0, r0, #8
 80218ec:	1c62      	adds	r2, r4, #1
 80218ee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80218f2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80218f6:	4328      	orrs	r0, r5
 80218f8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80218fc:	700a      	strb	r2, [r1, #0]
 80218fe:	784a      	ldrb	r2, [r1, #1]
 8021900:	435a      	muls	r2, r3
 8021902:	1c54      	adds	r4, r2, #1
 8021904:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8021908:	0a02      	lsrs	r2, r0, #8
 802190a:	0c00      	lsrs	r0, r0, #16
 802190c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021910:	704a      	strb	r2, [r1, #1]
 8021912:	788a      	ldrb	r2, [r1, #2]
 8021914:	4353      	muls	r3, r2
 8021916:	1c5a      	adds	r2, r3, #1
 8021918:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802191c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021920:	7088      	strb	r0, [r1, #2]
 8021922:	b003      	add	sp, #12
 8021924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021928:	2600      	movs	r6, #0
 802192a:	e706      	b.n	802173a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 802192c:	2000      	movs	r0, #0
 802192e:	4606      	mov	r6, r0
 8021930:	e710      	b.n	8021754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021932:	2000      	movs	r0, #0
 8021934:	e70e      	b.n	8021754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021936:	4620      	mov	r0, r4
 8021938:	e70c      	b.n	8021754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802193a:	2500      	movs	r5, #0
 802193c:	e71e      	b.n	802177c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 802193e:	2200      	movs	r2, #0
 8021940:	4615      	mov	r5, r2
 8021942:	e729      	b.n	8021798 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021944:	4662      	mov	r2, ip
 8021946:	4665      	mov	r5, ip
 8021948:	e726      	b.n	8021798 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802194a:	2200      	movs	r2, #0
 802194c:	e724      	b.n	8021798 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802194e:	4622      	mov	r2, r4
 8021950:	e722      	b.n	8021798 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08021952 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021956:	b09b      	sub	sp, #108	; 0x6c
 8021958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802195c:	9218      	str	r2, [sp, #96]	; 0x60
 802195e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021960:	9019      	str	r0, [sp, #100]	; 0x64
 8021962:	9116      	str	r1, [sp, #88]	; 0x58
 8021964:	6850      	ldr	r0, [r2, #4]
 8021966:	9307      	str	r3, [sp, #28]
 8021968:	6812      	ldr	r2, [r2, #0]
 802196a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802196c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021970:	fb00 1303 	mla	r3, r0, r3, r1
 8021974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021978:	18d3      	adds	r3, r2, r3
 802197a:	930a      	str	r3, [sp, #40]	; 0x28
 802197c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	930f      	str	r3, [sp, #60]	; 0x3c
 8021982:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021984:	685e      	ldr	r6, [r3, #4]
 8021986:	3604      	adds	r6, #4
 8021988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802198a:	2b00      	cmp	r3, #0
 802198c:	dc03      	bgt.n	8021996 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802198e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021990:	2b00      	cmp	r3, #0
 8021992:	f340 834f 	ble.w	8022034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021996:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021998:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802199c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80219a0:	1e48      	subs	r0, r1, #1
 80219a2:	1e57      	subs	r7, r2, #1
 80219a4:	9b07      	ldr	r3, [sp, #28]
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	f340 8178 	ble.w	8021c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80219ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80219ae:	142b      	asrs	r3, r5, #16
 80219b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80219b4:	d406      	bmi.n	80219c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80219b6:	4584      	cmp	ip, r0
 80219b8:	da04      	bge.n	80219c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	db02      	blt.n	80219c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80219be:	42bb      	cmp	r3, r7
 80219c0:	f2c0 816d 	blt.w	8021c9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80219c4:	f11c 0c01 	adds.w	ip, ip, #1
 80219c8:	f100 815b 	bmi.w	8021c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80219cc:	4561      	cmp	r1, ip
 80219ce:	f2c0 8158 	blt.w	8021c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80219d2:	3301      	adds	r3, #1
 80219d4:	f100 8155 	bmi.w	8021c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80219d8:	429a      	cmp	r2, r3
 80219da:	f2c0 8152 	blt.w	8021c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80219de:	9b07      	ldr	r3, [sp, #28]
 80219e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80219e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80219e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	f340 8178 	ble.w	8021cdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80219ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80219ee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80219f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80219f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80219fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80219fc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021a00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021a02:	141b      	asrs	r3, r3, #16
 8021a04:	f100 81ba 	bmi.w	8021d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021a08:	f101 38ff 	add.w	r8, r1, #4294967295
 8021a0c:	4543      	cmp	r3, r8
 8021a0e:	f280 81b5 	bge.w	8021d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021a12:	f1bc 0f00 	cmp.w	ip, #0
 8021a16:	f2c0 81b1 	blt.w	8021d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021a1a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a1e:	45c4      	cmp	ip, r8
 8021a20:	f280 81ac 	bge.w	8021d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021a24:	b209      	sxth	r1, r1
 8021a26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a28:	fb0c 3301 	mla	r3, ip, r1, r3
 8021a2c:	eb04 0803 	add.w	r8, r4, r3
 8021a30:	5ce3      	ldrb	r3, [r4, r3]
 8021a32:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a36:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021a3a:	2a00      	cmp	r2, #0
 8021a3c:	f000 8193 	beq.w	8021d66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8021a40:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021a44:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8021a4a:	0e24      	lsrs	r4, r4, #24
 8021a4c:	9412      	str	r4, [sp, #72]	; 0x48
 8021a4e:	b178      	cbz	r0, 8021a70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021a50:	eb08 0c01 	add.w	ip, r8, r1
 8021a54:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021a58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a5c:	9108      	str	r1, [sp, #32]
 8021a5e:	0e09      	lsrs	r1, r1, #24
 8021a60:	9110      	str	r1, [sp, #64]	; 0x40
 8021a62:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021a66:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a6a:	910c      	str	r1, [sp, #48]	; 0x30
 8021a6c:	0e09      	lsrs	r1, r1, #24
 8021a6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8021a70:	b292      	uxth	r2, r2
 8021a72:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021a74:	b280      	uxth	r0, r0
 8021a76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a78:	fb02 f900 	mul.w	r9, r2, r0
 8021a7c:	0112      	lsls	r2, r2, #4
 8021a7e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021a82:	eba2 0809 	sub.w	r8, r2, r9
 8021a86:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021a8a:	b280      	uxth	r0, r0
 8021a8c:	fa1f f888 	uxth.w	r8, r8
 8021a90:	1a12      	subs	r2, r2, r0
 8021a92:	fb08 f101 	mul.w	r1, r8, r1
 8021a96:	b292      	uxth	r2, r2
 8021a98:	fb02 110e 	mla	r1, r2, lr, r1
 8021a9c:	fb00 1104 	mla	r1, r0, r4, r1
 8021aa0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021aa2:	fb09 1104 	mla	r1, r9, r4, r1
 8021aa6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021aaa:	2900      	cmp	r1, #0
 8021aac:	f000 80de 	beq.w	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021ab0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021ab4:	d01b      	beq.n	8021aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8021ab6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021abe:	fb0e fa0a 	mul.w	sl, lr, sl
 8021ac2:	fb0e fe03 	mul.w	lr, lr, r3
 8021ac6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021aca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ace:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ad2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ad6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021ada:	4453      	add	r3, sl
 8021adc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ae0:	0a1b      	lsrs	r3, r3, #8
 8021ae2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021ae6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021aea:	ea43 030c 	orr.w	r3, r3, ip
 8021aee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021af0:	2cff      	cmp	r4, #255	; 0xff
 8021af2:	d021      	beq.n	8021b38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021af4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021af6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021afa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021afc:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b06:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b10:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b1c:	44de      	add	lr, fp
 8021b1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b32:	ea4e 040a 	orr.w	r4, lr, sl
 8021b36:	940b      	str	r4, [sp, #44]	; 0x2c
 8021b38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b3a:	2cff      	cmp	r4, #255	; 0xff
 8021b3c:	d021      	beq.n	8021b82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021b3e:	9c08      	ldr	r4, [sp, #32]
 8021b40:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b46:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b4a:	9c08      	ldr	r4, [sp, #32]
 8021b4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b52:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b66:	44de      	add	lr, fp
 8021b68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b7c:	ea4e 040a 	orr.w	r4, lr, sl
 8021b80:	9408      	str	r4, [sp, #32]
 8021b82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b84:	2cff      	cmp	r4, #255	; 0xff
 8021b86:	d021      	beq.n	8021bcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021b88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b90:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b96:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ba0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ba4:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ba8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021bb0:	44de      	add	lr, fp
 8021bb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021bb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021bbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021bc6:	ea4e 040a 	orr.w	r4, lr, sl
 8021bca:	940c      	str	r4, [sp, #48]	; 0x30
 8021bcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bd6:	43c9      	mvns	r1, r1
 8021bd8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021bdc:	9c08      	ldr	r4, [sp, #32]
 8021bde:	b2c9      	uxtb	r1, r1
 8021be0:	fb08 fc0c 	mul.w	ip, r8, ip
 8021be4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021be8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021bec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021bee:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021bf2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021bf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bf8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021bfc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021c00:	fb08 f80e 	mul.w	r8, r8, lr
 8021c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c08:	fb02 8303 	mla	r3, r2, r3, r8
 8021c0c:	9a08      	ldr	r2, [sp, #32]
 8021c0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c12:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c18:	fb00 330a 	mla	r3, r0, sl, r3
 8021c1c:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021c20:	fb09 3900 	mla	r9, r9, r0, r3
 8021c24:	783b      	ldrb	r3, [r7, #0]
 8021c26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c2a:	fb03 f201 	mul.w	r2, r3, r1
 8021c2e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c32:	1c53      	adds	r3, r2, #1
 8021c34:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c3c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021c40:	703b      	strb	r3, [r7, #0]
 8021c42:	787b      	ldrb	r3, [r7, #1]
 8021c44:	434b      	muls	r3, r1
 8021c46:	1c5a      	adds	r2, r3, #1
 8021c48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c4c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021c50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021c54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c58:	707b      	strb	r3, [r7, #1]
 8021c5a:	78bb      	ldrb	r3, [r7, #2]
 8021c5c:	4359      	muls	r1, r3
 8021c5e:	1c4b      	adds	r3, r1, #1
 8021c60:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021c64:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021c68:	f887 c002 	strb.w	ip, [r7, #2]
 8021c6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c6e:	3703      	adds	r7, #3
 8021c70:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021c72:	441a      	add	r2, r3
 8021c74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c76:	441d      	add	r5, r3
 8021c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c7a:	9225      	str	r2, [sp, #148]	; 0x94
 8021c7c:	3b01      	subs	r3, #1
 8021c7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c80:	e6b0      	b.n	80219e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021c82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c84:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021c86:	441c      	add	r4, r3
 8021c88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c8a:	441d      	add	r5, r3
 8021c8c:	9b07      	ldr	r3, [sp, #28]
 8021c8e:	9425      	str	r4, [sp, #148]	; 0x94
 8021c90:	3b01      	subs	r3, #1
 8021c92:	9307      	str	r3, [sp, #28]
 8021c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c96:	3303      	adds	r3, #3
 8021c98:	930a      	str	r3, [sp, #40]	; 0x28
 8021c9a:	e683      	b.n	80219a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021c9c:	d026      	beq.n	8021cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8021c9e:	9b07      	ldr	r3, [sp, #28]
 8021ca0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021ca2:	3b01      	subs	r3, #1
 8021ca4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021ca6:	fb00 4003 	mla	r0, r0, r3, r4
 8021caa:	1400      	asrs	r0, r0, #16
 8021cac:	f53f ae97 	bmi.w	80219de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021cb0:	3901      	subs	r1, #1
 8021cb2:	4288      	cmp	r0, r1
 8021cb4:	f6bf ae93 	bge.w	80219de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021cb8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021cba:	fb01 5303 	mla	r3, r1, r3, r5
 8021cbe:	141b      	asrs	r3, r3, #16
 8021cc0:	f53f ae8d 	bmi.w	80219de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021cc4:	3a01      	subs	r2, #1
 8021cc6:	4293      	cmp	r3, r2
 8021cc8:	f6bf ae89 	bge.w	80219de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021cd2:	f103 0e03 	add.w	lr, r3, #3
 8021cd6:	f1bb 0f00 	cmp.w	fp, #0
 8021cda:	dc6d      	bgt.n	8021db8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8021cdc:	9b07      	ldr	r3, [sp, #28]
 8021cde:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ce4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ce8:	4423      	add	r3, r4
 8021cea:	930a      	str	r3, [sp, #40]	; 0x28
 8021cec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	f340 81a0 	ble.w	8022034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021cf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021cfe:	eeb0 6a62 	vmov.f32	s12, s5
 8021d02:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021d06:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d0e:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8021d12:	eeb0 6a43 	vmov.f32	s12, s6
 8021d16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d1a:	ee16 5a10 	vmov	r5, s12
 8021d1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d22:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d26:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d36:	ee12 2a90 	vmov	r2, s5
 8021d3a:	eef0 2a47 	vmov.f32	s5, s14
 8021d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d42:	ee13 2a10 	vmov	r2, s6
 8021d46:	9327      	str	r3, [sp, #156]	; 0x9c
 8021d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d4a:	eeb0 3a67 	vmov.f32	s6, s15
 8021d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d52:	9328      	str	r3, [sp, #160]	; 0xa0
 8021d54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021d58:	3b01      	subs	r3, #1
 8021d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8021d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d5e:	bf08      	it	eq
 8021d60:	4613      	moveq	r3, r2
 8021d62:	9307      	str	r3, [sp, #28]
 8021d64:	e610      	b.n	8021988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021d66:	2800      	cmp	r0, #0
 8021d68:	f43f ae82 	beq.w	8021a70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021d6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021d74:	9108      	str	r1, [sp, #32]
 8021d76:	0e09      	lsrs	r1, r1, #24
 8021d78:	9110      	str	r1, [sp, #64]	; 0x40
 8021d7a:	e679      	b.n	8021a70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021d7c:	f113 0801 	adds.w	r8, r3, #1
 8021d80:	f53f af74 	bmi.w	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d84:	4541      	cmp	r1, r8
 8021d86:	f6ff af71 	blt.w	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d8a:	f11c 0801 	adds.w	r8, ip, #1
 8021d8e:	f53f af6d 	bmi.w	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d92:	45c6      	cmp	lr, r8
 8021d94:	f6ff af6a 	blt.w	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021d98:	b209      	sxth	r1, r1
 8021d9a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021d9e:	fa0f f38e 	sxth.w	r3, lr
 8021da2:	9100      	str	r1, [sp, #0]
 8021da4:	4639      	mov	r1, r7
 8021da6:	9301      	str	r3, [sp, #4]
 8021da8:	4633      	mov	r3, r6
 8021daa:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021dae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021db0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021db2:	f7ff fca3 	bl	80216fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021db6:	e759      	b.n	8021c6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021db8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021dba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021dbe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021dc0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021dc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021dc6:	1427      	asrs	r7, r4, #16
 8021dc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021dca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021dce:	142b      	asrs	r3, r5, #16
 8021dd0:	fb01 7303 	mla	r3, r1, r3, r7
 8021dd4:	18e7      	adds	r7, r4, r3
 8021dd6:	5ce3      	ldrb	r3, [r4, r3]
 8021dd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021ddc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021de0:	2a00      	cmp	r2, #0
 8021de2:	f000 811d 	beq.w	8022020 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8021de6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021dea:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021dee:	940d      	str	r4, [sp, #52]	; 0x34
 8021df0:	0e24      	lsrs	r4, r4, #24
 8021df2:	9414      	str	r4, [sp, #80]	; 0x50
 8021df4:	b170      	cbz	r0, 8021e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021df6:	eb07 0801 	add.w	r8, r7, r1
 8021dfa:	5c79      	ldrb	r1, [r7, r1]
 8021dfc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e00:	9109      	str	r1, [sp, #36]	; 0x24
 8021e02:	0e09      	lsrs	r1, r1, #24
 8021e04:	9111      	str	r1, [sp, #68]	; 0x44
 8021e06:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021e0a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e0e:	910e      	str	r1, [sp, #56]	; 0x38
 8021e10:	0e09      	lsrs	r1, r1, #24
 8021e12:	9115      	str	r1, [sp, #84]	; 0x54
 8021e14:	b292      	uxth	r2, r2
 8021e16:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e18:	b280      	uxth	r0, r0
 8021e1a:	fb02 f900 	mul.w	r9, r2, r0
 8021e1e:	0112      	lsls	r2, r2, #4
 8021e20:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e24:	eba2 0809 	sub.w	r8, r2, r9
 8021e28:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e2e:	b280      	uxth	r0, r0
 8021e30:	fa1f f888 	uxth.w	r8, r8
 8021e34:	1a09      	subs	r1, r1, r0
 8021e36:	fb08 f202 	mul.w	r2, r8, r2
 8021e3a:	b289      	uxth	r1, r1
 8021e3c:	fb01 220c 	mla	r2, r1, ip, r2
 8021e40:	fb00 2204 	mla	r2, r0, r4, r2
 8021e44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e46:	fb09 2204 	mla	r2, r9, r4, r2
 8021e4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021e4e:	2a00      	cmp	r2, #0
 8021e50:	f000 80db 	beq.w	802200a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021e54:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021e58:	d019      	beq.n	8021e8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8021e5a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e62:	fb0c fa0a 	mul.w	sl, ip, sl
 8021e66:	fb0c fc03 	mul.w	ip, ip, r3
 8021e6a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e6e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e72:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021e76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e7a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021e7e:	4453      	add	r3, sl
 8021e80:	0a3f      	lsrs	r7, r7, #8
 8021e82:	0a1b      	lsrs	r3, r3, #8
 8021e84:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e8c:	433b      	orrs	r3, r7
 8021e8e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021e90:	2cff      	cmp	r4, #255	; 0xff
 8021e92:	d020      	beq.n	8021ed6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021e94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021e96:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021e9a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021e9c:	4367      	muls	r7, r4
 8021e9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ea0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ea4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ea8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021eaa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021eae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021eb2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021eb6:	44bc      	add	ip, r7
 8021eb8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ebc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ec0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ec8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ecc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ed0:	ea4c 040a 	orr.w	r4, ip, sl
 8021ed4:	940d      	str	r4, [sp, #52]	; 0x34
 8021ed6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ed8:	2cff      	cmp	r4, #255	; 0xff
 8021eda:	d020      	beq.n	8021f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8021edc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ede:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021ee2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ee4:	4367      	muls	r7, r4
 8021ee6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ee8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021eec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ef0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ef2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ef6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021efa:	fb04 fa0a 	mul.w	sl, r4, sl
 8021efe:	44bc      	add	ip, r7
 8021f00:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f18:	ea4c 040a 	orr.w	r4, ip, sl
 8021f1c:	9409      	str	r4, [sp, #36]	; 0x24
 8021f1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f20:	2cff      	cmp	r4, #255	; 0xff
 8021f22:	d020      	beq.n	8021f66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8021f24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f26:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f2a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f2c:	4367      	muls	r7, r4
 8021f2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f42:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f46:	44bc      	add	ip, r7
 8021f48:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f60:	ea4c 040a 	orr.w	r4, ip, sl
 8021f64:	940e      	str	r4, [sp, #56]	; 0x38
 8021f66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f68:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f70:	43d2      	mvns	r2, r2
 8021f72:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021f78:	b2d2      	uxtb	r2, r2
 8021f7a:	fb08 f707 	mul.w	r7, r8, r7
 8021f7e:	fb01 770c 	mla	r7, r1, ip, r7
 8021f82:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f88:	fb00 770c 	mla	r7, r0, ip, r7
 8021f8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f92:	fb09 770c 	mla	r7, r9, ip, r7
 8021f96:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021f9a:	fb08 f80c 	mul.w	r8, r8, ip
 8021f9e:	0a3f      	lsrs	r7, r7, #8
 8021fa0:	fb01 8303 	mla	r3, r1, r3, r8
 8021fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021fa6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021faa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021fae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021fb0:	fb00 330a 	mla	r3, r0, sl, r3
 8021fb4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021fb8:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021fbc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021fc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fc4:	fb03 f102 	mul.w	r1, r3, r2
 8021fc8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fcc:	1c4b      	adds	r3, r1, #1
 8021fce:	ea47 070c 	orr.w	r7, r7, ip
 8021fd2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021fd6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021fda:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021fde:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021fe2:	4353      	muls	r3, r2
 8021fe4:	1c59      	adds	r1, r3, #1
 8021fe6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021fea:	0a3b      	lsrs	r3, r7, #8
 8021fec:	0c3f      	lsrs	r7, r7, #16
 8021fee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021ff2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021ff6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021ffa:	435a      	muls	r2, r3
 8021ffc:	1c53      	adds	r3, r2, #1
 8021ffe:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022002:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022006:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802200a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802200c:	f10e 0e03 	add.w	lr, lr, #3
 8022010:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022012:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022016:	441a      	add	r2, r3
 8022018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802201a:	9225      	str	r2, [sp, #148]	; 0x94
 802201c:	441d      	add	r5, r3
 802201e:	e65a      	b.n	8021cd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022020:	2800      	cmp	r0, #0
 8022022:	f43f aef7 	beq.w	8021e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022026:	5c79      	ldrb	r1, [r7, r1]
 8022028:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802202c:	9109      	str	r1, [sp, #36]	; 0x24
 802202e:	0e09      	lsrs	r1, r1, #24
 8022030:	9111      	str	r1, [sp, #68]	; 0x44
 8022032:	e6ef      	b.n	8021e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022034:	b01b      	add	sp, #108	; 0x6c
 8022036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802203a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802203a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802203e:	b08d      	sub	sp, #52	; 0x34
 8022040:	468b      	mov	fp, r1
 8022042:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8022046:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802204a:	fb0c 5703 	mla	r7, ip, r3, r5
 802204e:	f1bc 0f00 	cmp.w	ip, #0
 8022052:	910b      	str	r1, [sp, #44]	; 0x2c
 8022054:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022058:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802205c:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8022060:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8022064:	eb02 0607 	add.w	r6, r2, r7
 8022068:	f89b 4000 	ldrb.w	r4, [fp]
 802206c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8022070:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8022074:	f2c0 80c1 	blt.w	80221fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8022078:	45e6      	cmp	lr, ip
 802207a:	f340 80be 	ble.w	80221fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802207e:	2d00      	cmp	r5, #0
 8022080:	f2c0 80b7 	blt.w	80221f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8022084:	42ab      	cmp	r3, r5
 8022086:	f340 80b4 	ble.w	80221f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802208a:	5dd2      	ldrb	r2, [r2, r7]
 802208c:	9205      	str	r2, [sp, #20]
 802208e:	7872      	ldrb	r2, [r6, #1]
 8022090:	9206      	str	r2, [sp, #24]
 8022092:	78b2      	ldrb	r2, [r6, #2]
 8022094:	9207      	str	r2, [sp, #28]
 8022096:	1c6a      	adds	r2, r5, #1
 8022098:	f100 80b6 	bmi.w	8022208 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802209c:	4293      	cmp	r3, r2
 802209e:	f340 80b3 	ble.w	8022208 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80220a2:	f1b8 0f00 	cmp.w	r8, #0
 80220a6:	f000 80af 	beq.w	8022208 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80220aa:	78f2      	ldrb	r2, [r6, #3]
 80220ac:	9201      	str	r2, [sp, #4]
 80220ae:	7932      	ldrb	r2, [r6, #4]
 80220b0:	9202      	str	r2, [sp, #8]
 80220b2:	7972      	ldrb	r2, [r6, #5]
 80220b4:	9203      	str	r2, [sp, #12]
 80220b6:	f11c 0c01 	adds.w	ip, ip, #1
 80220ba:	f100 80ad 	bmi.w	8022218 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80220be:	45e6      	cmp	lr, ip
 80220c0:	f340 80aa 	ble.w	8022218 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80220c4:	f1ba 0f00 	cmp.w	sl, #0
 80220c8:	f000 80a6 	beq.w	8022218 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80220cc:	2d00      	cmp	r5, #0
 80220ce:	f2c0 809f 	blt.w	8022210 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80220d2:	42ab      	cmp	r3, r5
 80220d4:	f340 809c 	ble.w	8022210 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80220d8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80220dc:	f816 9002 	ldrb.w	r9, [r6, r2]
 80220e0:	2203      	movs	r2, #3
 80220e2:	fb03 6c02 	mla	ip, r3, r2, r6
 80220e6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80220ea:	f89c e002 	ldrb.w	lr, [ip, #2]
 80220ee:	9704      	str	r7, [sp, #16]
 80220f0:	3501      	adds	r5, #1
 80220f2:	f100 8098 	bmi.w	8022226 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80220f6:	42ab      	cmp	r3, r5
 80220f8:	f340 8095 	ble.w	8022226 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80220fc:	f1b8 0f00 	cmp.w	r8, #0
 8022100:	f000 8091 	beq.w	8022226 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8022104:	f04f 0c03 	mov.w	ip, #3
 8022108:	fb13 c20c 	smlabb	r2, r3, ip, ip
 802210c:	5cb5      	ldrb	r5, [r6, r2]
 802210e:	fb03 620c 	mla	r2, r3, ip, r6
 8022112:	fb03 630c 	mla	r3, r3, ip, r6
 8022116:	7912      	ldrb	r2, [r2, #4]
 8022118:	795e      	ldrb	r6, [r3, #5]
 802211a:	fa1f f388 	uxth.w	r3, r8
 802211e:	fa1f fc8a 	uxth.w	ip, sl
 8022122:	fb03 f70c 	mul.w	r7, r3, ip
 8022126:	011b      	lsls	r3, r3, #4
 8022128:	9708      	str	r7, [sp, #32]
 802212a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 802212e:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8022132:	1bdb      	subs	r3, r3, r7
 8022134:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8022138:	fa1f fc8c 	uxth.w	ip, ip
 802213c:	b29b      	uxth	r3, r3
 802213e:	9709      	str	r7, [sp, #36]	; 0x24
 8022140:	ebaa 0a0c 	sub.w	sl, sl, ip
 8022144:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022146:	930a      	str	r3, [sp, #40]	; 0x28
 8022148:	fa1f fa8a 	uxth.w	sl, sl
 802214c:	ea6f 0807 	mvn.w	r8, r7
 8022150:	9f01      	ldr	r7, [sp, #4]
 8022152:	435f      	muls	r7, r3
 8022154:	9b05      	ldr	r3, [sp, #20]
 8022156:	fa5f f888 	uxtb.w	r8, r8
 802215a:	fb0a 7703 	mla	r7, sl, r3, r7
 802215e:	9b08      	ldr	r3, [sp, #32]
 8022160:	fb14 f408 	smulbb	r4, r4, r8
 8022164:	fb0c 7709 	mla	r7, ip, r9, r7
 8022168:	fb10 f008 	smulbb	r0, r0, r8
 802216c:	fb11 f108 	smulbb	r1, r1, r8
 8022170:	fb03 7705 	mla	r7, r3, r5, r7
 8022174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022176:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802217a:	fb07 4703 	mla	r7, r7, r3, r4
 802217e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022180:	b2bf      	uxth	r7, r7
 8022182:	1c7c      	adds	r4, r7, #1
 8022184:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8022188:	1224      	asrs	r4, r4, #8
 802218a:	f88b 4000 	strb.w	r4, [fp]
 802218e:	9c02      	ldr	r4, [sp, #8]
 8022190:	435c      	muls	r4, r3
 8022192:	9b06      	ldr	r3, [sp, #24]
 8022194:	fb0a 4403 	mla	r4, sl, r3, r4
 8022198:	9b04      	ldr	r3, [sp, #16]
 802219a:	fb0c 4403 	mla	r4, ip, r3, r4
 802219e:	9b08      	ldr	r3, [sp, #32]
 80221a0:	fb03 4402 	mla	r4, r3, r2, r4
 80221a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80221a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80221ac:	fb04 0403 	mla	r4, r4, r3, r0
 80221b0:	9b03      	ldr	r3, [sp, #12]
 80221b2:	435a      	muls	r2, r3
 80221b4:	b2a4      	uxth	r4, r4
 80221b6:	4613      	mov	r3, r2
 80221b8:	9a07      	ldr	r2, [sp, #28]
 80221ba:	1c60      	adds	r0, r4, #1
 80221bc:	fb0a 3a02 	mla	sl, sl, r2, r3
 80221c0:	9b08      	ldr	r3, [sp, #32]
 80221c2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80221c6:	fb0c ac0e 	mla	ip, ip, lr, sl
 80221ca:	1224      	asrs	r4, r4, #8
 80221cc:	fb03 c606 	mla	r6, r3, r6, ip
 80221d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221d2:	f88b 4001 	strb.w	r4, [fp, #1]
 80221d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80221da:	fb06 1103 	mla	r1, r6, r3, r1
 80221de:	b289      	uxth	r1, r1
 80221e0:	1c4e      	adds	r6, r1, #1
 80221e2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80221e6:	1209      	asrs	r1, r1, #8
 80221e8:	f88b 1002 	strb.w	r1, [fp, #2]
 80221ec:	b00d      	add	sp, #52	; 0x34
 80221ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80221f6:	9405      	str	r4, [sp, #20]
 80221f8:	e74d      	b.n	8022096 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80221fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80221fe:	9401      	str	r4, [sp, #4]
 8022200:	9405      	str	r4, [sp, #20]
 8022202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022206:	e756      	b.n	80220b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8022208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802220c:	9401      	str	r4, [sp, #4]
 802220e:	e752      	b.n	80220b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8022210:	468e      	mov	lr, r1
 8022212:	9004      	str	r0, [sp, #16]
 8022214:	46a1      	mov	r9, r4
 8022216:	e76b      	b.n	80220f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8022218:	460e      	mov	r6, r1
 802221a:	4602      	mov	r2, r0
 802221c:	4625      	mov	r5, r4
 802221e:	468e      	mov	lr, r1
 8022220:	9004      	str	r0, [sp, #16]
 8022222:	46a1      	mov	r9, r4
 8022224:	e779      	b.n	802211a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8022226:	460e      	mov	r6, r1
 8022228:	4602      	mov	r2, r0
 802222a:	4625      	mov	r5, r4
 802222c:	e775      	b.n	802211a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0802222e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802222e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022232:	b09f      	sub	sp, #124	; 0x7c
 8022234:	920e      	str	r2, [sp, #56]	; 0x38
 8022236:	9307      	str	r3, [sp, #28]
 8022238:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802223a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802223e:	901d      	str	r0, [sp, #116]	; 0x74
 8022240:	930c      	str	r3, [sp, #48]	; 0x30
 8022242:	6850      	ldr	r0, [r2, #4]
 8022244:	910b      	str	r1, [sp, #44]	; 0x2c
 8022246:	6812      	ldr	r2, [r2, #0]
 8022248:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802224c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8022250:	fb00 1303 	mla	r3, r0, r3, r1
 8022254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022258:	18d3      	adds	r3, r2, r3
 802225a:	9308      	str	r3, [sp, #32]
 802225c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	930a      	str	r3, [sp, #40]	; 0x28
 8022262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022264:	43db      	mvns	r3, r3
 8022266:	b2db      	uxtb	r3, r3
 8022268:	9309      	str	r3, [sp, #36]	; 0x24
 802226a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802226c:	2b00      	cmp	r3, #0
 802226e:	dc03      	bgt.n	8022278 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022272:	2b00      	cmp	r3, #0
 8022274:	f340 81f5 	ble.w	8022662 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8022278:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802227a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802227e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022282:	1e48      	subs	r0, r1, #1
 8022284:	1e54      	subs	r4, r2, #1
 8022286:	9b07      	ldr	r3, [sp, #28]
 8022288:	2b00      	cmp	r3, #0
 802228a:	f340 80d5 	ble.w	8022438 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802228e:	ea5f 452a 	movs.w	r5, sl, asr #16
 8022292:	ea4f 4328 	mov.w	r3, r8, asr #16
 8022296:	d406      	bmi.n	80222a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022298:	4285      	cmp	r5, r0
 802229a:	da04      	bge.n	80222a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802229c:	2b00      	cmp	r3, #0
 802229e:	db02      	blt.n	80222a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80222a0:	42a3      	cmp	r3, r4
 80222a2:	f2c0 80ca 	blt.w	802243a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80222a6:	3501      	adds	r5, #1
 80222a8:	f100 80bb 	bmi.w	8022422 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80222ac:	42a9      	cmp	r1, r5
 80222ae:	f2c0 80b8 	blt.w	8022422 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80222b2:	3301      	adds	r3, #1
 80222b4:	f100 80b5 	bmi.w	8022422 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80222b8:	429a      	cmp	r2, r3
 80222ba:	f2c0 80b2 	blt.w	8022422 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80222be:	9b07      	ldr	r3, [sp, #28]
 80222c0:	9d08      	ldr	r5, [sp, #32]
 80222c2:	930d      	str	r3, [sp, #52]	; 0x34
 80222c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	f340 80d6 	ble.w	8022478 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80222cc:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80222ce:	ea4f 4428 	mov.w	r4, r8, asr #16
 80222d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80222d4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80222d8:	68c6      	ldr	r6, [r0, #12]
 80222da:	ea5f 402a 	movs.w	r0, sl, asr #16
 80222de:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80222e2:	689b      	ldr	r3, [r3, #8]
 80222e4:	f100 810f 	bmi.w	8022506 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80222e8:	1e5f      	subs	r7, r3, #1
 80222ea:	42b8      	cmp	r0, r7
 80222ec:	f280 810b 	bge.w	8022506 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80222f0:	2c00      	cmp	r4, #0
 80222f2:	f2c0 8108 	blt.w	8022506 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80222f6:	1e77      	subs	r7, r6, #1
 80222f8:	42bc      	cmp	r4, r7
 80222fa:	f280 8104 	bge.w	8022506 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80222fe:	b21b      	sxth	r3, r3
 8022300:	fb04 0003 	mla	r0, r4, r3, r0
 8022304:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802230a:	1826      	adds	r6, r4, r0
 802230c:	5c24      	ldrb	r4, [r4, r0]
 802230e:	78b7      	ldrb	r7, [r6, #2]
 8022310:	7870      	ldrb	r0, [r6, #1]
 8022312:	970f      	str	r7, [sp, #60]	; 0x3c
 8022314:	7977      	ldrb	r7, [r6, #5]
 8022316:	f896 e003 	ldrb.w	lr, [r6, #3]
 802231a:	f896 c004 	ldrb.w	ip, [r6, #4]
 802231e:	9710      	str	r7, [sp, #64]	; 0x40
 8022320:	b1c9      	cbz	r1, 8022356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022322:	f04f 0b03 	mov.w	fp, #3
 8022326:	f06f 0904 	mvn.w	r9, #4
 802232a:	3605      	adds	r6, #5
 802232c:	fb13 930b 	smlabb	r3, r3, fp, r9
 8022330:	eb06 0b03 	add.w	fp, r6, r3
 8022334:	5cf3      	ldrb	r3, [r6, r3]
 8022336:	9311      	str	r3, [sp, #68]	; 0x44
 8022338:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802233c:	9313      	str	r3, [sp, #76]	; 0x4c
 802233e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022342:	9315      	str	r3, [sp, #84]	; 0x54
 8022344:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8022348:	9312      	str	r3, [sp, #72]	; 0x48
 802234a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802234e:	9314      	str	r3, [sp, #80]	; 0x50
 8022350:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8022354:	9316      	str	r3, [sp, #88]	; 0x58
 8022356:	b292      	uxth	r2, r2
 8022358:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802235a:	b289      	uxth	r1, r1
 802235c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8022360:	fb02 f601 	mul.w	r6, r2, r1
 8022364:	0112      	lsls	r2, r2, #4
 8022366:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802236a:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 802236e:	1b92      	subs	r2, r2, r6
 8022370:	b289      	uxth	r1, r1
 8022372:	b292      	uxth	r2, r2
 8022374:	eba9 0901 	sub.w	r9, r9, r1
 8022378:	fb02 fe0e 	mul.w	lr, r2, lr
 802237c:	fa1f f989 	uxth.w	r9, r9
 8022380:	fb02 fc0c 	mul.w	ip, r2, ip
 8022384:	fb09 e404 	mla	r4, r9, r4, lr
 8022388:	f895 e000 	ldrb.w	lr, [r5]
 802238c:	fb09 c000 	mla	r0, r9, r0, ip
 8022390:	fb01 4407 	mla	r4, r1, r7, r4
 8022394:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022396:	fb06 4407 	mla	r4, r6, r7, r4
 802239a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802239c:	fb1e fe07 	smulbb	lr, lr, r7
 80223a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80223a4:	fb04 e403 	mla	r4, r4, r3, lr
 80223a8:	b2a4      	uxth	r4, r4
 80223aa:	f104 0e01 	add.w	lr, r4, #1
 80223ae:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80223b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80223b4:	fb01 0004 	mla	r0, r1, r4, r0
 80223b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80223ba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80223be:	fb06 0004 	mla	r0, r6, r4, r0
 80223c2:	786c      	ldrb	r4, [r5, #1]
 80223c4:	f885 e000 	strb.w	lr, [r5]
 80223c8:	fb14 f407 	smulbb	r4, r4, r7
 80223cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80223d0:	fb00 4003 	mla	r0, r0, r3, r4
 80223d4:	b280      	uxth	r0, r0
 80223d6:	1c44      	adds	r4, r0, #1
 80223d8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80223dc:	1200      	asrs	r0, r0, #8
 80223de:	7068      	strb	r0, [r5, #1]
 80223e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80223e2:	4342      	muls	r2, r0
 80223e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80223e6:	fb09 2200 	mla	r2, r9, r0, r2
 80223ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80223ec:	fb01 2100 	mla	r1, r1, r0, r2
 80223f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80223f2:	fb06 1602 	mla	r6, r6, r2, r1
 80223f6:	78a9      	ldrb	r1, [r5, #2]
 80223f8:	fb11 f107 	smulbb	r1, r1, r7
 80223fc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022400:	fb06 1303 	mla	r3, r6, r3, r1
 8022404:	b29b      	uxth	r3, r3
 8022406:	1c5e      	adds	r6, r3, #1
 8022408:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802240c:	121b      	asrs	r3, r3, #8
 802240e:	70ab      	strb	r3, [r5, #2]
 8022410:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022412:	3503      	adds	r5, #3
 8022414:	449a      	add	sl, r3
 8022416:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022418:	4498      	add	r8, r3
 802241a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802241c:	3b01      	subs	r3, #1
 802241e:	930d      	str	r3, [sp, #52]	; 0x34
 8022420:	e750      	b.n	80222c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022422:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022424:	449a      	add	sl, r3
 8022426:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022428:	4498      	add	r8, r3
 802242a:	9b07      	ldr	r3, [sp, #28]
 802242c:	3b01      	subs	r3, #1
 802242e:	9307      	str	r3, [sp, #28]
 8022430:	9b08      	ldr	r3, [sp, #32]
 8022432:	3303      	adds	r3, #3
 8022434:	9308      	str	r3, [sp, #32]
 8022436:	e726      	b.n	8022286 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022438:	d026      	beq.n	8022488 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802243a:	9b07      	ldr	r3, [sp, #28]
 802243c:	982b      	ldr	r0, [sp, #172]	; 0xac
 802243e:	3b01      	subs	r3, #1
 8022440:	fb00 a003 	mla	r0, r0, r3, sl
 8022444:	1400      	asrs	r0, r0, #16
 8022446:	f53f af3a 	bmi.w	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802244a:	3901      	subs	r1, #1
 802244c:	4288      	cmp	r0, r1
 802244e:	f6bf af36 	bge.w	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022452:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022454:	fb01 8303 	mla	r3, r1, r3, r8
 8022458:	141b      	asrs	r3, r3, #16
 802245a:	f53f af30 	bmi.w	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802245e:	3a01      	subs	r2, #1
 8022460:	4293      	cmp	r3, r2
 8022462:	f6bf af2c 	bge.w	80222be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022466:	9b08      	ldr	r3, [sp, #32]
 8022468:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802246c:	1cdd      	adds	r5, r3, #3
 802246e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8022472:	f1bc 0f00 	cmp.w	ip, #0
 8022476:	dc5f      	bgt.n	8022538 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8022478:	9b07      	ldr	r3, [sp, #28]
 802247a:	9a08      	ldr	r2, [sp, #32]
 802247c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022480:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022484:	441a      	add	r2, r3
 8022486:	9208      	str	r2, [sp, #32]
 8022488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802248a:	2b00      	cmp	r3, #0
 802248c:	f340 80e9 	ble.w	8022662 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8022490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022496:	ee30 0a04 	vadd.f32	s0, s0, s8
 802249a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802249e:	eef0 6a62 	vmov.f32	s13, s5
 80224a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80224a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80224aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224ae:	ee16 aa90 	vmov	sl, s13
 80224b2:	eef0 6a43 	vmov.f32	s13, s6
 80224b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224ba:	ee16 8a90 	vmov	r8, s13
 80224be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80224c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80224c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80224ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80224d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80224d6:	ee12 2a90 	vmov	r2, s5
 80224da:	eef0 2a47 	vmov.f32	s5, s14
 80224de:	fb92 f3f3 	sdiv	r3, r2, r3
 80224e2:	ee13 2a10 	vmov	r2, s6
 80224e6:	932b      	str	r3, [sp, #172]	; 0xac
 80224e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224ea:	eeb0 3a67 	vmov.f32	s6, s15
 80224ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80224f2:	932c      	str	r3, [sp, #176]	; 0xb0
 80224f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80224f8:	3b01      	subs	r3, #1
 80224fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80224fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224fe:	bf08      	it	eq
 8022500:	4613      	moveq	r3, r2
 8022502:	9307      	str	r3, [sp, #28]
 8022504:	e6b1      	b.n	802226a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022506:	1c47      	adds	r7, r0, #1
 8022508:	d482      	bmi.n	8022410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802250a:	42bb      	cmp	r3, r7
 802250c:	db80      	blt.n	8022410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802250e:	1c67      	adds	r7, r4, #1
 8022510:	f53f af7e 	bmi.w	8022410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022514:	42be      	cmp	r6, r7
 8022516:	f6ff af7b 	blt.w	8022410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802251a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802251c:	b236      	sxth	r6, r6
 802251e:	9001      	str	r0, [sp, #4]
 8022520:	b21b      	sxth	r3, r3
 8022522:	9600      	str	r6, [sp, #0]
 8022524:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022526:	e9cd 1704 	strd	r1, r7, [sp, #16]
 802252a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802252e:	4629      	mov	r1, r5
 8022530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022532:	f7ff fd82 	bl	802203a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022536:	e76b      	b.n	8022410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022538:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802253a:	ea4f 402a 	mov.w	r0, sl, asr #16
 802253e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022542:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8022546:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802254a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802254e:	fb07 0101 	mla	r1, r7, r1, r0
 8022552:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022554:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022558:	1844      	adds	r4, r0, r1
 802255a:	5c40      	ldrb	r0, [r0, r1]
 802255c:	78a6      	ldrb	r6, [r4, #2]
 802255e:	7861      	ldrb	r1, [r4, #1]
 8022560:	960f      	str	r6, [sp, #60]	; 0x3c
 8022562:	78e6      	ldrb	r6, [r4, #3]
 8022564:	910d      	str	r1, [sp, #52]	; 0x34
 8022566:	9610      	str	r6, [sp, #64]	; 0x40
 8022568:	f894 9004 	ldrb.w	r9, [r4, #4]
 802256c:	f894 b005 	ldrb.w	fp, [r4, #5]
 8022570:	b192      	cbz	r2, 8022598 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022572:	f06f 0604 	mvn.w	r6, #4
 8022576:	2103      	movs	r1, #3
 8022578:	3405      	adds	r4, #5
 802257a:	fb17 6701 	smlabb	r7, r7, r1, r6
 802257e:	19e6      	adds	r6, r4, r7
 8022580:	5de4      	ldrb	r4, [r4, r7]
 8022582:	9417      	str	r4, [sp, #92]	; 0x5c
 8022584:	7874      	ldrb	r4, [r6, #1]
 8022586:	9419      	str	r4, [sp, #100]	; 0x64
 8022588:	78b4      	ldrb	r4, [r6, #2]
 802258a:	941b      	str	r4, [sp, #108]	; 0x6c
 802258c:	78f4      	ldrb	r4, [r6, #3]
 802258e:	9418      	str	r4, [sp, #96]	; 0x60
 8022590:	7934      	ldrb	r4, [r6, #4]
 8022592:	941a      	str	r4, [sp, #104]	; 0x68
 8022594:	7974      	ldrb	r4, [r6, #5]
 8022596:	941c      	str	r4, [sp, #112]	; 0x70
 8022598:	b29b      	uxth	r3, r3
 802259a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802259c:	b292      	uxth	r2, r2
 802259e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80225a0:	3503      	adds	r5, #3
 80225a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80225a6:	fb03 f402 	mul.w	r4, r3, r2
 80225aa:	011b      	lsls	r3, r3, #4
 80225ac:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80225b0:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80225b4:	1b1b      	subs	r3, r3, r4
 80225b6:	b292      	uxth	r2, r2
 80225b8:	b29b      	uxth	r3, r3
 80225ba:	1ab6      	subs	r6, r6, r2
 80225bc:	435f      	muls	r7, r3
 80225be:	b2b6      	uxth	r6, r6
 80225c0:	fb03 f909 	mul.w	r9, r3, r9
 80225c4:	fb03 fb0b 	mul.w	fp, r3, fp
 80225c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80225ca:	fb06 7000 	mla	r0, r6, r0, r7
 80225ce:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80225d0:	fb06 bb03 	mla	fp, r6, r3, fp
 80225d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80225d6:	fb02 0007 	mla	r0, r2, r7, r0
 80225da:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80225dc:	fb02 bb03 	mla	fp, r2, r3, fp
 80225e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80225e2:	fb04 0007 	mla	r0, r4, r7, r0
 80225e6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80225ea:	fb17 f701 	smulbb	r7, r7, r1
 80225ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80225f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80225f4:	fb00 700e 	mla	r0, r0, lr, r7
 80225f8:	fb06 9101 	mla	r1, r6, r1, r9
 80225fc:	b280      	uxth	r0, r0
 80225fe:	1c47      	adds	r7, r0, #1
 8022600:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8022604:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022606:	1200      	asrs	r0, r0, #8
 8022608:	f805 0c06 	strb.w	r0, [r5, #-6]
 802260c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802260e:	fb02 1100 	mla	r1, r2, r0, r1
 8022612:	981a      	ldr	r0, [sp, #104]	; 0x68
 8022614:	fb04 1100 	mla	r1, r4, r0, r1
 8022618:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 802261c:	fb04 b403 	mla	r4, r4, r3, fp
 8022620:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8022624:	fb10 f007 	smulbb	r0, r0, r7
 8022628:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802262c:	fb13 f307 	smulbb	r3, r3, r7
 8022630:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022634:	fb01 010e 	mla	r1, r1, lr, r0
 8022638:	fb04 340e 	mla	r4, r4, lr, r3
 802263c:	b289      	uxth	r1, r1
 802263e:	b2a4      	uxth	r4, r4
 8022640:	1c48      	adds	r0, r1, #1
 8022642:	1c63      	adds	r3, r4, #1
 8022644:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022648:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802264c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802264e:	1209      	asrs	r1, r1, #8
 8022650:	1224      	asrs	r4, r4, #8
 8022652:	449a      	add	sl, r3
 8022654:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022656:	f805 1c05 	strb.w	r1, [r5, #-5]
 802265a:	f805 4c04 	strb.w	r4, [r5, #-4]
 802265e:	4498      	add	r8, r3
 8022660:	e707      	b.n	8022472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8022662:	b01f      	add	sp, #124	; 0x7c
 8022664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022668 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802266c:	b087      	sub	sp, #28
 802266e:	780d      	ldrb	r5, [r1, #0]
 8022670:	784c      	ldrb	r4, [r1, #1]
 8022672:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8022676:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 802267a:	9004      	str	r0, [sp, #16]
 802267c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8022680:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8022684:	9005      	str	r0, [sp, #20]
 8022686:	fb06 bc03 	mla	ip, r6, r3, fp
 802268a:	2e00      	cmp	r6, #0
 802268c:	7888      	ldrb	r0, [r1, #2]
 802268e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022692:	eb02 090c 	add.w	r9, r2, ip
 8022696:	f2c0 8084 	blt.w	80227a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802269a:	42b7      	cmp	r7, r6
 802269c:	f340 8081 	ble.w	80227a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80226a0:	f1bb 0f00 	cmp.w	fp, #0
 80226a4:	db79      	blt.n	802279a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80226a6:	455b      	cmp	r3, fp
 80226a8:	dd77      	ble.n	802279a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80226aa:	f812 200c 	ldrb.w	r2, [r2, ip]
 80226ae:	9201      	str	r2, [sp, #4]
 80226b0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80226b4:	9202      	str	r2, [sp, #8]
 80226b6:	f899 2002 	ldrb.w	r2, [r9, #2]
 80226ba:	9203      	str	r2, [sp, #12]
 80226bc:	f11b 0201 	adds.w	r2, fp, #1
 80226c0:	d476      	bmi.n	80227b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80226c2:	4293      	cmp	r3, r2
 80226c4:	dd74      	ble.n	80227b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80226c6:	9a04      	ldr	r2, [sp, #16]
 80226c8:	2a00      	cmp	r2, #0
 80226ca:	d071      	beq.n	80227b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80226cc:	f899 8003 	ldrb.w	r8, [r9, #3]
 80226d0:	f899 c004 	ldrb.w	ip, [r9, #4]
 80226d4:	f899 a005 	ldrb.w	sl, [r9, #5]
 80226d8:	3601      	adds	r6, #1
 80226da:	d471      	bmi.n	80227c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80226dc:	42b7      	cmp	r7, r6
 80226de:	dd6f      	ble.n	80227c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80226e0:	9a05      	ldr	r2, [sp, #20]
 80226e2:	2a00      	cmp	r2, #0
 80226e4:	d06c      	beq.n	80227c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80226e6:	f1bb 0f00 	cmp.w	fp, #0
 80226ea:	db65      	blt.n	80227b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80226ec:	455b      	cmp	r3, fp
 80226ee:	dd63      	ble.n	80227b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80226f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80226f4:	f819 e002 	ldrb.w	lr, [r9, r2]
 80226f8:	2203      	movs	r2, #3
 80226fa:	fb03 9602 	mla	r6, r3, r2, r9
 80226fe:	7877      	ldrb	r7, [r6, #1]
 8022700:	78b6      	ldrb	r6, [r6, #2]
 8022702:	f11b 0b01 	adds.w	fp, fp, #1
 8022706:	d40c      	bmi.n	8022722 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8022708:	455b      	cmp	r3, fp
 802270a:	dd0a      	ble.n	8022722 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 802270c:	9a04      	ldr	r2, [sp, #16]
 802270e:	b142      	cbz	r2, 8022722 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8022710:	2203      	movs	r2, #3
 8022712:	fb13 2002 	smlabb	r0, r3, r2, r2
 8022716:	f819 5000 	ldrb.w	r5, [r9, r0]
 802271a:	fb03 9002 	mla	r0, r3, r2, r9
 802271e:	7904      	ldrb	r4, [r0, #4]
 8022720:	7940      	ldrb	r0, [r0, #5]
 8022722:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8022726:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802272a:	fb03 fb02 	mul.w	fp, r3, r2
 802272e:	011b      	lsls	r3, r3, #4
 8022730:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8022734:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8022738:	eba3 030b 	sub.w	r3, r3, fp
 802273c:	b292      	uxth	r2, r2
 802273e:	b29b      	uxth	r3, r3
 8022740:	eba9 0902 	sub.w	r9, r9, r2
 8022744:	9304      	str	r3, [sp, #16]
 8022746:	fa1f f989 	uxth.w	r9, r9
 802274a:	fb03 f808 	mul.w	r8, r3, r8
 802274e:	9b01      	ldr	r3, [sp, #4]
 8022750:	fb09 8803 	mla	r8, r9, r3, r8
 8022754:	9b04      	ldr	r3, [sp, #16]
 8022756:	fb03 fc0c 	mul.w	ip, r3, ip
 802275a:	9b02      	ldr	r3, [sp, #8]
 802275c:	fb02 880e 	mla	r8, r2, lr, r8
 8022760:	fb09 cc03 	mla	ip, r9, r3, ip
 8022764:	9b04      	ldr	r3, [sp, #16]
 8022766:	fb0b 8805 	mla	r8, fp, r5, r8
 802276a:	fb02 c707 	mla	r7, r2, r7, ip
 802276e:	fb03 f30a 	mul.w	r3, r3, sl
 8022772:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022776:	fb0b 7404 	mla	r4, fp, r4, r7
 802277a:	f881 8000 	strb.w	r8, [r1]
 802277e:	1224      	asrs	r4, r4, #8
 8022780:	704c      	strb	r4, [r1, #1]
 8022782:	9c03      	ldr	r4, [sp, #12]
 8022784:	fb09 3904 	mla	r9, r9, r4, r3
 8022788:	fb02 9206 	mla	r2, r2, r6, r9
 802278c:	fb0b 2000 	mla	r0, fp, r0, r2
 8022790:	1200      	asrs	r0, r0, #8
 8022792:	7088      	strb	r0, [r1, #2]
 8022794:	b007      	add	sp, #28
 8022796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802279a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802279e:	9501      	str	r5, [sp, #4]
 80227a0:	e78c      	b.n	80226bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80227a2:	4682      	mov	sl, r0
 80227a4:	46a4      	mov	ip, r4
 80227a6:	46a8      	mov	r8, r5
 80227a8:	9501      	str	r5, [sp, #4]
 80227aa:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80227ae:	e793      	b.n	80226d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80227b0:	4682      	mov	sl, r0
 80227b2:	46a4      	mov	ip, r4
 80227b4:	46a8      	mov	r8, r5
 80227b6:	e78f      	b.n	80226d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80227b8:	4606      	mov	r6, r0
 80227ba:	4627      	mov	r7, r4
 80227bc:	46ae      	mov	lr, r5
 80227be:	e7a0      	b.n	8022702 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80227c0:	4606      	mov	r6, r0
 80227c2:	4627      	mov	r7, r4
 80227c4:	46ae      	mov	lr, r5
 80227c6:	e7ac      	b.n	8022722 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080227c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227cc:	b09b      	sub	sp, #108	; 0x6c
 80227ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80227d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80227d2:	9019      	str	r0, [sp, #100]	; 0x64
 80227d4:	9109      	str	r1, [sp, #36]	; 0x24
 80227d6:	6850      	ldr	r0, [r2, #4]
 80227d8:	9306      	str	r3, [sp, #24]
 80227da:	6812      	ldr	r2, [r2, #0]
 80227dc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80227e0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80227e4:	fb00 1303 	mla	r3, r0, r3, r1
 80227e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227ec:	18d3      	adds	r3, r2, r3
 80227ee:	9307      	str	r3, [sp, #28]
 80227f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	9308      	str	r3, [sp, #32]
 80227f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	dc03      	bgt.n	8022804 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80227fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227fe:	2b00      	cmp	r3, #0
 8022800:	f340 81ab 	ble.w	8022b5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022804:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022806:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802280a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802280e:	1e48      	subs	r0, r1, #1
 8022810:	1e55      	subs	r5, r2, #1
 8022812:	9b06      	ldr	r3, [sp, #24]
 8022814:	2b00      	cmp	r3, #0
 8022816:	f340 80b1 	ble.w	802297c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802281a:	ea5f 462b 	movs.w	r6, fp, asr #16
 802281e:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022822:	d406      	bmi.n	8022832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022824:	4286      	cmp	r6, r0
 8022826:	da04      	bge.n	8022832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022828:	2b00      	cmp	r3, #0
 802282a:	db02      	blt.n	8022832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802282c:	42ab      	cmp	r3, r5
 802282e:	f2c0 80a6 	blt.w	802297e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022832:	3601      	adds	r6, #1
 8022834:	f100 8097 	bmi.w	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022838:	42b1      	cmp	r1, r6
 802283a:	f2c0 8094 	blt.w	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802283e:	3301      	adds	r3, #1
 8022840:	f100 8091 	bmi.w	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022844:	429a      	cmp	r2, r3
 8022846:	f2c0 808e 	blt.w	8022966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802284a:	9b06      	ldr	r3, [sp, #24]
 802284c:	9e07      	ldr	r6, [sp, #28]
 802284e:	930a      	str	r3, [sp, #40]	; 0x28
 8022850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022852:	2b00      	cmp	r3, #0
 8022854:	f340 80b0 	ble.w	80229b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022858:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802285a:	1425      	asrs	r5, r4, #16
 802285c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802285e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8022862:	68c7      	ldr	r7, [r0, #12]
 8022864:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022868:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802286c:	689b      	ldr	r3, [r3, #8]
 802286e:	f100 80ea 	bmi.w	8022a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022872:	f103 3cff 	add.w	ip, r3, #4294967295
 8022876:	4560      	cmp	r0, ip
 8022878:	f280 80e5 	bge.w	8022a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802287c:	2d00      	cmp	r5, #0
 802287e:	f2c0 80e2 	blt.w	8022a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022882:	f107 3cff 	add.w	ip, r7, #4294967295
 8022886:	4565      	cmp	r5, ip
 8022888:	f280 80dd 	bge.w	8022a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802288c:	b21b      	sxth	r3, r3
 802288e:	fb05 0003 	mla	r0, r5, r3, r0
 8022892:	9d08      	ldr	r5, [sp, #32]
 8022894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022898:	182f      	adds	r7, r5, r0
 802289a:	5c2d      	ldrb	r5, [r5, r0]
 802289c:	7878      	ldrb	r0, [r7, #1]
 802289e:	f897 e002 	ldrb.w	lr, [r7, #2]
 80228a2:	900c      	str	r0, [sp, #48]	; 0x30
 80228a4:	f897 9003 	ldrb.w	r9, [r7, #3]
 80228a8:	f897 8004 	ldrb.w	r8, [r7, #4]
 80228ac:	f897 a005 	ldrb.w	sl, [r7, #5]
 80228b0:	b1c9      	cbz	r1, 80228e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80228b2:	f04f 0c03 	mov.w	ip, #3
 80228b6:	f06f 0004 	mvn.w	r0, #4
 80228ba:	3705      	adds	r7, #5
 80228bc:	fb13 030c 	smlabb	r3, r3, ip, r0
 80228c0:	eb07 0c03 	add.w	ip, r7, r3
 80228c4:	5cfb      	ldrb	r3, [r7, r3]
 80228c6:	930d      	str	r3, [sp, #52]	; 0x34
 80228c8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80228cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80228ce:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80228d2:	9311      	str	r3, [sp, #68]	; 0x44
 80228d4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80228d8:	930e      	str	r3, [sp, #56]	; 0x38
 80228da:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80228de:	9310      	str	r3, [sp, #64]	; 0x40
 80228e0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80228e4:	9312      	str	r3, [sp, #72]	; 0x48
 80228e6:	b292      	uxth	r2, r2
 80228e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80228ea:	b289      	uxth	r1, r1
 80228ec:	fb02 f301 	mul.w	r3, r2, r1
 80228f0:	0112      	lsls	r2, r2, #4
 80228f2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80228f6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80228fa:	1ad2      	subs	r2, r2, r3
 80228fc:	b289      	uxth	r1, r1
 80228fe:	b292      	uxth	r2, r2
 8022900:	1a7f      	subs	r7, r7, r1
 8022902:	fb02 f909 	mul.w	r9, r2, r9
 8022906:	b2bf      	uxth	r7, r7
 8022908:	fb02 f808 	mul.w	r8, r2, r8
 802290c:	fb02 fa0a 	mul.w	sl, r2, sl
 8022910:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022912:	fb07 9905 	mla	r9, r7, r5, r9
 8022916:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022918:	fb07 8800 	mla	r8, r7, r0, r8
 802291c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802291e:	fb07 aa0e 	mla	sl, r7, lr, sl
 8022922:	fb01 9905 	mla	r9, r1, r5, r9
 8022926:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022928:	fb01 8800 	mla	r8, r1, r0, r8
 802292c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802292e:	fb01 a102 	mla	r1, r1, r2, sl
 8022932:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022934:	fb03 9905 	mla	r9, r3, r5, r9
 8022938:	fb03 8800 	mla	r8, r3, r0, r8
 802293c:	fb03 1302 	mla	r3, r3, r2, r1
 8022940:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022944:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022948:	121b      	asrs	r3, r3, #8
 802294a:	f886 9000 	strb.w	r9, [r6]
 802294e:	f886 8001 	strb.w	r8, [r6, #1]
 8022952:	70b3      	strb	r3, [r6, #2]
 8022954:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022956:	3603      	adds	r6, #3
 8022958:	449b      	add	fp, r3
 802295a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802295c:	441c      	add	r4, r3
 802295e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022960:	3b01      	subs	r3, #1
 8022962:	930a      	str	r3, [sp, #40]	; 0x28
 8022964:	e774      	b.n	8022850 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8022966:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022968:	449b      	add	fp, r3
 802296a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802296c:	441c      	add	r4, r3
 802296e:	9b06      	ldr	r3, [sp, #24]
 8022970:	3b01      	subs	r3, #1
 8022972:	9306      	str	r3, [sp, #24]
 8022974:	9b07      	ldr	r3, [sp, #28]
 8022976:	3303      	adds	r3, #3
 8022978:	9307      	str	r3, [sp, #28]
 802297a:	e74a      	b.n	8022812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802297c:	d024      	beq.n	80229c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802297e:	9b06      	ldr	r3, [sp, #24]
 8022980:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022982:	3b01      	subs	r3, #1
 8022984:	fb00 b003 	mla	r0, r0, r3, fp
 8022988:	1400      	asrs	r0, r0, #16
 802298a:	f53f af5e 	bmi.w	802284a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802298e:	3901      	subs	r1, #1
 8022990:	4288      	cmp	r0, r1
 8022992:	f6bf af5a 	bge.w	802284a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022996:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022998:	fb01 4303 	mla	r3, r1, r3, r4
 802299c:	141b      	asrs	r3, r3, #16
 802299e:	f53f af54 	bmi.w	802284a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80229a2:	3a01      	subs	r2, #1
 80229a4:	4293      	cmp	r3, r2
 80229a6:	f6bf af50 	bge.w	802284a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80229aa:	9b07      	ldr	r3, [sp, #28]
 80229ac:	f8dd e018 	ldr.w	lr, [sp, #24]
 80229b0:	1cde      	adds	r6, r3, #3
 80229b2:	f1be 0f00 	cmp.w	lr, #0
 80229b6:	dc5f      	bgt.n	8022a78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80229b8:	9b06      	ldr	r3, [sp, #24]
 80229ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80229be:	9b07      	ldr	r3, [sp, #28]
 80229c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80229c4:	4423      	add	r3, r4
 80229c6:	9307      	str	r3, [sp, #28]
 80229c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	f340 80c5 	ble.w	8022b5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80229d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80229d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80229da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80229de:	eef0 6a62 	vmov.f32	s13, s5
 80229e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80229ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229ee:	ee16 ba90 	vmov	fp, s13
 80229f2:	eef0 6a43 	vmov.f32	s13, s6
 80229f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229fa:	ee16 4a90 	vmov	r4, s13
 80229fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a16:	ee12 2a90 	vmov	r2, s5
 8022a1a:	eef0 2a47 	vmov.f32	s5, s14
 8022a1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a22:	ee13 2a10 	vmov	r2, s6
 8022a26:	9327      	str	r3, [sp, #156]	; 0x9c
 8022a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a2a:	eeb0 3a67 	vmov.f32	s6, s15
 8022a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a32:	9328      	str	r3, [sp, #160]	; 0xa0
 8022a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022a38:	3b01      	subs	r3, #1
 8022a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8022a3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a3e:	bf08      	it	eq
 8022a40:	4613      	moveq	r3, r2
 8022a42:	9306      	str	r3, [sp, #24]
 8022a44:	e6d7      	b.n	80227f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022a46:	f110 0c01 	adds.w	ip, r0, #1
 8022a4a:	d483      	bmi.n	8022954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022a4c:	4563      	cmp	r3, ip
 8022a4e:	db81      	blt.n	8022954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022a50:	f115 0c01 	adds.w	ip, r5, #1
 8022a54:	f53f af7e 	bmi.w	8022954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022a58:	4567      	cmp	r7, ip
 8022a5a:	f6ff af7b 	blt.w	8022954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022a5e:	b23f      	sxth	r7, r7
 8022a60:	b21b      	sxth	r3, r3
 8022a62:	9700      	str	r7, [sp, #0]
 8022a64:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022a68:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022a6c:	9a08      	ldr	r2, [sp, #32]
 8022a6e:	4631      	mov	r1, r6
 8022a70:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022a72:	f7ff fdf9 	bl	8022668 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022a76:	e76d      	b.n	8022954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022a78:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022a7a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022a7e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022a82:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022a86:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022a8a:	1421      	asrs	r1, r4, #16
 8022a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8022a8e:	fb0c 0101 	mla	r1, ip, r1, r0
 8022a92:	9808      	ldr	r0, [sp, #32]
 8022a94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022a98:	1845      	adds	r5, r0, r1
 8022a9a:	5c40      	ldrb	r0, [r0, r1]
 8022a9c:	796f      	ldrb	r7, [r5, #5]
 8022a9e:	7869      	ldrb	r1, [r5, #1]
 8022aa0:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022aa4:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022aa8:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022aac:	970c      	str	r7, [sp, #48]	; 0x30
 8022aae:	b1a2      	cbz	r2, 8022ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8022ab0:	2703      	movs	r7, #3
 8022ab2:	f06f 0304 	mvn.w	r3, #4
 8022ab6:	3505      	adds	r5, #5
 8022ab8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022abc:	eb05 070c 	add.w	r7, r5, ip
 8022ac0:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022ac4:	9513      	str	r5, [sp, #76]	; 0x4c
 8022ac6:	787d      	ldrb	r5, [r7, #1]
 8022ac8:	9515      	str	r5, [sp, #84]	; 0x54
 8022aca:	78bd      	ldrb	r5, [r7, #2]
 8022acc:	9517      	str	r5, [sp, #92]	; 0x5c
 8022ace:	78fd      	ldrb	r5, [r7, #3]
 8022ad0:	9514      	str	r5, [sp, #80]	; 0x50
 8022ad2:	793d      	ldrb	r5, [r7, #4]
 8022ad4:	9516      	str	r5, [sp, #88]	; 0x58
 8022ad6:	797d      	ldrb	r5, [r7, #5]
 8022ad8:	9518      	str	r5, [sp, #96]	; 0x60
 8022ada:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022ade:	b292      	uxth	r2, r2
 8022ae0:	3603      	adds	r6, #3
 8022ae2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022ae6:	fb03 f502 	mul.w	r5, r3, r2
 8022aea:	011b      	lsls	r3, r3, #4
 8022aec:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022af0:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022af4:	1b5b      	subs	r3, r3, r5
 8022af6:	b292      	uxth	r2, r2
 8022af8:	b29b      	uxth	r3, r3
 8022afa:	1abf      	subs	r7, r7, r2
 8022afc:	fb03 f909 	mul.w	r9, r3, r9
 8022b00:	b2bf      	uxth	r7, r7
 8022b02:	fb03 fa0a 	mul.w	sl, r3, sl
 8022b06:	fb07 9901 	mla	r9, r7, r1, r9
 8022b0a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022b0c:	fb07 aa00 	mla	sl, r7, r0, sl
 8022b10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022b12:	fb02 9901 	mla	r9, r2, r1, r9
 8022b16:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022b18:	fb02 aa00 	mla	sl, r2, r0, sl
 8022b1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022b1e:	fb05 9901 	mla	r9, r5, r1, r9
 8022b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b24:	fb05 aa00 	mla	sl, r5, r0, sl
 8022b28:	434b      	muls	r3, r1
 8022b2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022b2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022b30:	fb07 3308 	mla	r3, r7, r8, r3
 8022b34:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b38:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022b3c:	fb02 3201 	mla	r2, r2, r1, r3
 8022b40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b42:	f806 9c05 	strb.w	r9, [r6, #-5]
 8022b46:	fb05 2503 	mla	r5, r5, r3, r2
 8022b4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022b4c:	122d      	asrs	r5, r5, #8
 8022b4e:	449b      	add	fp, r3
 8022b50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022b52:	f806 5c04 	strb.w	r5, [r6, #-4]
 8022b56:	441c      	add	r4, r3
 8022b58:	e72b      	b.n	80229b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022b5a:	b01b      	add	sp, #108	; 0x6c
 8022b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b64:	b087      	sub	sp, #28
 8022b66:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8022b6a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022b6e:	fb05 7003 	mla	r0, r5, r3, r7
 8022b72:	2d00      	cmp	r5, #0
 8022b74:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8022b78:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8022b7c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022b80:	f2c0 811f 	blt.w	8022dc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022b84:	45a8      	cmp	r8, r5
 8022b86:	f340 811c 	ble.w	8022dc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022b8a:	2f00      	cmp	r7, #0
 8022b8c:	f2c0 8117 	blt.w	8022dbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022b90:	42bb      	cmp	r3, r7
 8022b92:	f340 8114 	ble.w	8022dbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022b96:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022b9a:	1c7a      	adds	r2, r7, #1
 8022b9c:	f100 8114 	bmi.w	8022dc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022ba0:	4293      	cmp	r3, r2
 8022ba2:	f340 8111 	ble.w	8022dc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022ba6:	2c00      	cmp	r4, #0
 8022ba8:	f000 8110 	beq.w	8022dcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8022bac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022bb0:	3501      	adds	r5, #1
 8022bb2:	f100 810f 	bmi.w	8022dd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022bb6:	45a8      	cmp	r8, r5
 8022bb8:	f340 810c 	ble.w	8022dd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022bbc:	f1be 0f00 	cmp.w	lr, #0
 8022bc0:	f000 810b 	beq.w	8022dda <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8022bc4:	2f00      	cmp	r7, #0
 8022bc6:	f2c0 8103 	blt.w	8022dd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022bca:	42bb      	cmp	r3, r7
 8022bcc:	f340 8100 	ble.w	8022dd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022bd0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022bd4:	3701      	adds	r7, #1
 8022bd6:	f100 8103 	bmi.w	8022de0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022bda:	42bb      	cmp	r3, r7
 8022bdc:	f340 8100 	ble.w	8022de0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022be0:	2c00      	cmp	r4, #0
 8022be2:	f000 80ff 	beq.w	8022de4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8022be6:	3301      	adds	r3, #1
 8022be8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022bec:	fa1f fc84 	uxth.w	ip, r4
 8022bf0:	fa1f fe8e 	uxth.w	lr, lr
 8022bf4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022bf8:	fb0c f90e 	mul.w	r9, ip, lr
 8022bfc:	0e13      	lsrs	r3, r2, #24
 8022bfe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022c02:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022c06:	9302      	str	r3, [sp, #8]
 8022c08:	ebac 0709 	sub.w	r7, ip, r9
 8022c0c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022c10:	fa1f f48e 	uxth.w	r4, lr
 8022c14:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8022c18:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c1c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022c20:	fb0a fe0e 	mul.w	lr, sl, lr
 8022c24:	1b1b      	subs	r3, r3, r4
 8022c26:	fb0a f606 	mul.w	r6, sl, r6
 8022c2a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022c2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022c32:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022c36:	b29b      	uxth	r3, r3
 8022c38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c3c:	b2bf      	uxth	r7, r7
 8022c3e:	9301      	str	r3, [sp, #4]
 8022c40:	44e6      	add	lr, ip
 8022c42:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022c46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c4a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022c4e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8022c52:	9303      	str	r3, [sp, #12]
 8022c54:	0a33      	lsrs	r3, r6, #8
 8022c56:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8022c5a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022c5e:	9304      	str	r3, [sp, #16]
 8022c60:	fb0b f606 	mul.w	r6, fp, r6
 8022c64:	fb0b f000 	mul.w	r0, fp, r0
 8022c68:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8022c6c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022c70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c74:	44b6      	add	lr, r6
 8022c76:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8022c7a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022c7e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8022c82:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022c86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c8a:	fb08 f606 	mul.w	r6, r8, r6
 8022c8e:	0a03      	lsrs	r3, r0, #8
 8022c90:	fb08 f505 	mul.w	r5, r8, r5
 8022c94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c98:	0a30      	lsrs	r0, r6, #8
 8022c9a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022c9e:	9305      	str	r3, [sp, #20]
 8022ca0:	0e13      	lsrs	r3, r2, #24
 8022ca2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022ca6:	fb0e fe07 	mul.w	lr, lr, r7
 8022caa:	4430      	add	r0, r6
 8022cac:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022cb0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022cb4:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8022cb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022cbc:	0a00      	lsrs	r0, r0, #8
 8022cbe:	435e      	muls	r6, r3
 8022cc0:	0a2d      	lsrs	r5, r5, #8
 8022cc2:	435a      	muls	r2, r3
 8022cc4:	9b03      	ldr	r3, [sp, #12]
 8022cc6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022cca:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022cce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022cd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022cd6:	44b4      	add	ip, r6
 8022cd8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8022cdc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ce0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022ce4:	9e01      	ldr	r6, [sp, #4]
 8022ce6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022cea:	fb03 ee06 	mla	lr, r3, r6, lr
 8022cee:	9b04      	ldr	r3, [sp, #16]
 8022cf0:	0a12      	lsrs	r2, r2, #8
 8022cf2:	fb0c ee09 	mla	lr, ip, r9, lr
 8022cf6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8022cfa:	9b05      	ldr	r3, [sp, #20]
 8022cfc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d00:	fb00 ee04 	mla	lr, r0, r4, lr
 8022d04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d08:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8022d0c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8022d10:	9b01      	ldr	r3, [sp, #4]
 8022d12:	fb07 fe0e 	mul.w	lr, r7, lr
 8022d16:	fb07 f70b 	mul.w	r7, r7, fp
 8022d1a:	fb03 ee06 	mla	lr, r3, r6, lr
 8022d1e:	fb03 730a 	mla	r3, r3, sl, r7
 8022d22:	fb09 e202 	mla	r2, r9, r2, lr
 8022d26:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8022d2a:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022d2e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8022d32:	fb04 3408 	mla	r4, r4, r8, r3
 8022d36:	9b02      	ldr	r3, [sp, #8]
 8022d38:	b292      	uxth	r2, r2
 8022d3a:	fb09 4903 	mla	r9, r9, r3, r4
 8022d3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d42:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022d46:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022d4a:	fb09 f902 	mul.w	r9, r9, r2
 8022d4e:	ea40 0e0e 	orr.w	lr, r0, lr
 8022d52:	f109 0301 	add.w	r3, r9, #1
 8022d56:	fa5f f08e 	uxtb.w	r0, lr
 8022d5a:	fb10 f002 	smulbb	r0, r0, r2
 8022d5e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022d62:	780b      	ldrb	r3, [r1, #0]
 8022d64:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8022d68:	fa5f f989 	uxtb.w	r9, r9
 8022d6c:	fb03 0309 	mla	r3, r3, r9, r0
 8022d70:	b29b      	uxth	r3, r3
 8022d72:	1c58      	adds	r0, r3, #1
 8022d74:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022d78:	7848      	ldrb	r0, [r1, #1]
 8022d7a:	fb10 f009 	smulbb	r0, r0, r9
 8022d7e:	121b      	asrs	r3, r3, #8
 8022d80:	700b      	strb	r3, [r1, #0]
 8022d82:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022d86:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022d8a:	fb03 0302 	mla	r3, r3, r2, r0
 8022d8e:	b29b      	uxth	r3, r3
 8022d90:	1c58      	adds	r0, r3, #1
 8022d92:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022d96:	121b      	asrs	r3, r3, #8
 8022d98:	704b      	strb	r3, [r1, #1]
 8022d9a:	788b      	ldrb	r3, [r1, #2]
 8022d9c:	fb13 f909 	smulbb	r9, r3, r9
 8022da0:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022da4:	fa1f fe8e 	uxth.w	lr, lr
 8022da8:	f10e 0301 	add.w	r3, lr, #1
 8022dac:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022db0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022db4:	f881 e002 	strb.w	lr, [r1, #2]
 8022db8:	b007      	add	sp, #28
 8022dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dbe:	2600      	movs	r6, #0
 8022dc0:	e6eb      	b.n	8022b9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8022dc2:	2000      	movs	r0, #0
 8022dc4:	4606      	mov	r6, r0
 8022dc6:	e6f3      	b.n	8022bb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022dc8:	2000      	movs	r0, #0
 8022dca:	e6f1      	b.n	8022bb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022dcc:	4620      	mov	r0, r4
 8022dce:	e6ef      	b.n	8022bb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022dd0:	2500      	movs	r5, #0
 8022dd2:	e6ff      	b.n	8022bd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	4615      	mov	r5, r2
 8022dd8:	e708      	b.n	8022bec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022dda:	4672      	mov	r2, lr
 8022ddc:	4675      	mov	r5, lr
 8022dde:	e705      	b.n	8022bec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022de0:	2200      	movs	r2, #0
 8022de2:	e703      	b.n	8022bec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022de4:	4622      	mov	r2, r4
 8022de6:	e701      	b.n	8022bec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08022de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dec:	b09d      	sub	sp, #116	; 0x74
 8022dee:	9219      	str	r2, [sp, #100]	; 0x64
 8022df0:	9307      	str	r3, [sp, #28]
 8022df2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022df4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022df8:	901b      	str	r0, [sp, #108]	; 0x6c
 8022dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8022dfc:	6850      	ldr	r0, [r2, #4]
 8022dfe:	9117      	str	r1, [sp, #92]	; 0x5c
 8022e00:	6812      	ldr	r2, [r2, #0]
 8022e02:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022e06:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022e0a:	fb00 1303 	mla	r3, r0, r3, r1
 8022e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e12:	18d3      	adds	r3, r2, r3
 8022e14:	930a      	str	r3, [sp, #40]	; 0x28
 8022e16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8022e1c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8022e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022e24:	2b00      	cmp	r3, #0
 8022e26:	dc03      	bgt.n	8022e30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022e2a:	2b00      	cmp	r3, #0
 8022e2c:	f340 8368 	ble.w	8023500 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022e30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e3a:	1e48      	subs	r0, r1, #1
 8022e3c:	1e57      	subs	r7, r2, #1
 8022e3e:	9b07      	ldr	r3, [sp, #28]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	f340 8187 	ble.w	8023154 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022e46:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022e4a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e4e:	d406      	bmi.n	8022e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022e50:	4584      	cmp	ip, r0
 8022e52:	da04      	bge.n	8022e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	db02      	blt.n	8022e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022e58:	42bb      	cmp	r3, r7
 8022e5a:	f2c0 817c 	blt.w	8023156 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022e5e:	f11c 0c01 	adds.w	ip, ip, #1
 8022e62:	f100 816c 	bmi.w	802313e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e66:	4561      	cmp	r1, ip
 8022e68:	f2c0 8169 	blt.w	802313e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e6c:	3301      	adds	r3, #1
 8022e6e:	f100 8166 	bmi.w	802313e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e72:	429a      	cmp	r2, r3
 8022e74:	f2c0 8163 	blt.w	802313e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e78:	9b07      	ldr	r3, [sp, #28]
 8022e7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022e7c:	9318      	str	r3, [sp, #96]	; 0x60
 8022e7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	f340 8186 	ble.w	8023192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022e86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e88:	142a      	asrs	r2, r5, #16
 8022e8a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022e8e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022e92:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022e96:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022e9a:	f100 81cb 	bmi.w	8023234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022e9e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022ea2:	4542      	cmp	r2, r8
 8022ea4:	f280 81c6 	bge.w	8023234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022ea8:	2800      	cmp	r0, #0
 8022eaa:	f2c0 81c3 	blt.w	8023234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022eae:	f103 38ff 	add.w	r8, r3, #4294967295
 8022eb2:	4540      	cmp	r0, r8
 8022eb4:	f280 81be 	bge.w	8023234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022eb8:	fa0f f38e 	sxth.w	r3, lr
 8022ebc:	fb00 2203 	mla	r2, r0, r3, r2
 8022ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022ec2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022ec6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022eca:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022ece:	2900      	cmp	r1, #0
 8022ed0:	f000 81a6 	beq.w	8023220 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022ed4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022ed8:	900c      	str	r0, [sp, #48]	; 0x30
 8022eda:	0e00      	lsrs	r0, r0, #24
 8022edc:	9013      	str	r0, [sp, #76]	; 0x4c
 8022ede:	f1bc 0f00 	cmp.w	ip, #0
 8022ee2:	d00f      	beq.n	8022f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022ee8:	3b01      	subs	r3, #1
 8022eea:	009b      	lsls	r3, r3, #2
 8022eec:	3304      	adds	r3, #4
 8022eee:	eb08 0003 	add.w	r0, r8, r3
 8022ef2:	f858 3003 	ldr.w	r3, [r8, r3]
 8022ef6:	9308      	str	r3, [sp, #32]
 8022ef8:	0e1b      	lsrs	r3, r3, #24
 8022efa:	9311      	str	r3, [sp, #68]	; 0x44
 8022efc:	6843      	ldr	r3, [r0, #4]
 8022efe:	930d      	str	r3, [sp, #52]	; 0x34
 8022f00:	0e1b      	lsrs	r3, r3, #24
 8022f02:	9314      	str	r3, [sp, #80]	; 0x50
 8022f04:	b289      	uxth	r1, r1
 8022f06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022f08:	fa1f fc8c 	uxth.w	ip, ip
 8022f0c:	0108      	lsls	r0, r1, #4
 8022f0e:	fb01 f90c 	mul.w	r9, r1, ip
 8022f12:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022f16:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8022f1a:	eba0 0809 	sub.w	r8, r0, r9
 8022f1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022f20:	fa1f f18c 	uxth.w	r1, ip
 8022f24:	fa1f f888 	uxth.w	r8, r8
 8022f28:	1a5b      	subs	r3, r3, r1
 8022f2a:	fb08 f000 	mul.w	r0, r8, r0
 8022f2e:	b29b      	uxth	r3, r3
 8022f30:	fb03 000e 	mla	r0, r3, lr, r0
 8022f34:	fb01 0004 	mla	r0, r1, r4, r0
 8022f38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022f3a:	fb09 0004 	mla	r0, r9, r4, r0
 8022f3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022f42:	2800      	cmp	r0, #0
 8022f44:	f000 80f2 	beq.w	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f48:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022f4c:	d01b      	beq.n	8022f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022f4e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022f52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f56:	fb0e fa0a 	mul.w	sl, lr, sl
 8022f5a:	fb0e fe02 	mul.w	lr, lr, r2
 8022f5e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022f62:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022f66:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022f6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022f72:	4452      	add	r2, sl
 8022f74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f78:	0a12      	lsrs	r2, r2, #8
 8022f7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f82:	ea42 020c 	orr.w	r2, r2, ip
 8022f86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f88:	2cff      	cmp	r4, #255	; 0xff
 8022f8a:	d021      	beq.n	8022fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022f8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f8e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022f92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f94:	fb04 fb0b 	mul.w	fp, r4, fp
 8022f98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022f9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022fa0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022fa4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022fa8:	fb04 fa0a 	mul.w	sl, r4, sl
 8022fac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022fb4:	44de      	add	lr, fp
 8022fb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022fba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fca:	ea4e 040a 	orr.w	r4, lr, sl
 8022fce:	940c      	str	r4, [sp, #48]	; 0x30
 8022fd0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022fd2:	2cff      	cmp	r4, #255	; 0xff
 8022fd4:	d021      	beq.n	802301a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022fd6:	9c08      	ldr	r4, [sp, #32]
 8022fd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022fdc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022fde:	fb04 fb0b 	mul.w	fp, r4, fp
 8022fe2:	9c08      	ldr	r4, [sp, #32]
 8022fe4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022fe8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022fea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022fee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ff2:	fb04 fa0a 	mul.w	sl, r4, sl
 8022ff6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ffa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ffe:	44de      	add	lr, fp
 8023000:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023004:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802300c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023014:	ea4e 040a 	orr.w	r4, lr, sl
 8023018:	9408      	str	r4, [sp, #32]
 802301a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802301c:	2cff      	cmp	r4, #255	; 0xff
 802301e:	d021      	beq.n	8023064 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023020:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023022:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023026:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023028:	fb04 fb0b 	mul.w	fp, r4, fp
 802302c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802302e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023032:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023034:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023038:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802303c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023040:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023044:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023048:	44de      	add	lr, fp
 802304a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802304e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023052:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023056:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802305a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802305e:	ea4e 040a 	orr.w	r4, lr, sl
 8023062:	940d      	str	r4, [sp, #52]	; 0x34
 8023064:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023066:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802306a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802306e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023072:	9c08      	ldr	r4, [sp, #32]
 8023074:	fb08 fc0c 	mul.w	ip, r8, ip
 8023078:	fb03 cc0e 	mla	ip, r3, lr, ip
 802307c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023080:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023082:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023086:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802308a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802308c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023090:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023094:	fb08 f80e 	mul.w	r8, r8, lr
 8023098:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802309c:	fb03 8202 	mla	r2, r3, r2, r8
 80230a0:	9b08      	ldr	r3, [sp, #32]
 80230a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230a6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80230aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230ac:	fb01 220a 	mla	r2, r1, sl, r2
 80230b0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80230b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80230b6:	fb09 2901 	mla	r9, r9, r1, r2
 80230ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80230bc:	4343      	muls	r3, r0
 80230be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80230c2:	1c58      	adds	r0, r3, #1
 80230c4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80230c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80230cc:	783b      	ldrb	r3, [r7, #0]
 80230ce:	ea4c 0c09 	orr.w	ip, ip, r9
 80230d2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80230d6:	fa5f f28c 	uxtb.w	r2, ip
 80230da:	b2c0      	uxtb	r0, r0
 80230dc:	fb12 f201 	smulbb	r2, r2, r1
 80230e0:	fb03 2300 	mla	r3, r3, r0, r2
 80230e4:	b29b      	uxth	r3, r3
 80230e6:	1c5a      	adds	r2, r3, #1
 80230e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80230ec:	787a      	ldrb	r2, [r7, #1]
 80230ee:	fb12 f200 	smulbb	r2, r2, r0
 80230f2:	121b      	asrs	r3, r3, #8
 80230f4:	703b      	strb	r3, [r7, #0]
 80230f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80230fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80230fe:	fb03 2301 	mla	r3, r3, r1, r2
 8023102:	b29b      	uxth	r3, r3
 8023104:	1c5a      	adds	r2, r3, #1
 8023106:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802310a:	121b      	asrs	r3, r3, #8
 802310c:	707b      	strb	r3, [r7, #1]
 802310e:	78bb      	ldrb	r3, [r7, #2]
 8023110:	fb13 f000 	smulbb	r0, r3, r0
 8023114:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023118:	fa1f fc8c 	uxth.w	ip, ip
 802311c:	f10c 0301 	add.w	r3, ip, #1
 8023120:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023124:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023128:	f887 c002 	strb.w	ip, [r7, #2]
 802312c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802312e:	3703      	adds	r7, #3
 8023130:	441d      	add	r5, r3
 8023132:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023134:	441e      	add	r6, r3
 8023136:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023138:	3b01      	subs	r3, #1
 802313a:	9318      	str	r3, [sp, #96]	; 0x60
 802313c:	e69f      	b.n	8022e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802313e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023140:	441d      	add	r5, r3
 8023142:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023144:	441e      	add	r6, r3
 8023146:	9b07      	ldr	r3, [sp, #28]
 8023148:	3b01      	subs	r3, #1
 802314a:	9307      	str	r3, [sp, #28]
 802314c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802314e:	3303      	adds	r3, #3
 8023150:	930a      	str	r3, [sp, #40]	; 0x28
 8023152:	e674      	b.n	8022e3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023154:	d025      	beq.n	80231a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023156:	9b07      	ldr	r3, [sp, #28]
 8023158:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802315a:	3b01      	subs	r3, #1
 802315c:	fb00 5003 	mla	r0, r0, r3, r5
 8023160:	1400      	asrs	r0, r0, #16
 8023162:	f53f ae89 	bmi.w	8022e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023166:	3901      	subs	r1, #1
 8023168:	4288      	cmp	r0, r1
 802316a:	f6bf ae85 	bge.w	8022e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802316e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023170:	fb01 6303 	mla	r3, r1, r3, r6
 8023174:	141b      	asrs	r3, r3, #16
 8023176:	f53f ae7f 	bmi.w	8022e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802317a:	3a01      	subs	r2, #1
 802317c:	4293      	cmp	r3, r2
 802317e:	f6bf ae7b 	bge.w	8022e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023184:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023188:	f103 0e03 	add.w	lr, r3, #3
 802318c:	f1bb 0f00 	cmp.w	fp, #0
 8023190:	dc6e      	bgt.n	8023270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8023192:	9b07      	ldr	r3, [sp, #28]
 8023194:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802319a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802319e:	4423      	add	r3, r4
 80231a0:	930a      	str	r3, [sp, #40]	; 0x28
 80231a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	f340 81ab 	ble.w	8023500 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80231aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80231b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80231b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80231b8:	eef0 6a62 	vmov.f32	s13, s5
 80231bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231c8:	ee16 5a90 	vmov	r5, s13
 80231cc:	eef0 6a43 	vmov.f32	s13, s6
 80231d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231d4:	ee16 6a90 	vmov	r6, s13
 80231d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231f0:	ee12 2a90 	vmov	r2, s5
 80231f4:	eef0 2a47 	vmov.f32	s5, s14
 80231f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80231fc:	ee13 2a10 	vmov	r2, s6
 8023200:	9329      	str	r3, [sp, #164]	; 0xa4
 8023202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023204:	eeb0 3a67 	vmov.f32	s6, s15
 8023208:	fb92 f3f3 	sdiv	r3, r2, r3
 802320c:	932a      	str	r3, [sp, #168]	; 0xa8
 802320e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023210:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023212:	3b01      	subs	r3, #1
 8023214:	9317      	str	r3, [sp, #92]	; 0x5c
 8023216:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023218:	bf08      	it	eq
 802321a:	4613      	moveq	r3, r2
 802321c:	9307      	str	r3, [sp, #28]
 802321e:	e600      	b.n	8022e22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023220:	f1bc 0f00 	cmp.w	ip, #0
 8023224:	f43f ae6e 	beq.w	8022f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023228:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802322c:	9308      	str	r3, [sp, #32]
 802322e:	0e1b      	lsrs	r3, r3, #24
 8023230:	9311      	str	r3, [sp, #68]	; 0x44
 8023232:	e667      	b.n	8022f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023234:	f112 0801 	adds.w	r8, r2, #1
 8023238:	f53f af78 	bmi.w	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802323c:	45c6      	cmp	lr, r8
 802323e:	f6ff af75 	blt.w	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023242:	f110 0801 	adds.w	r8, r0, #1
 8023246:	f53f af71 	bmi.w	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802324a:	4543      	cmp	r3, r8
 802324c:	f6ff af6e 	blt.w	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023250:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023252:	b21b      	sxth	r3, r3
 8023254:	9201      	str	r2, [sp, #4]
 8023256:	9300      	str	r3, [sp, #0]
 8023258:	fa0f f38e 	sxth.w	r3, lr
 802325c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802325e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023262:	e9cd c404 	strd	ip, r4, [sp, #16]
 8023266:	4639      	mov	r1, r7
 8023268:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802326a:	f7ff fc79 	bl	8022b60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802326e:	e75d      	b.n	802312c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023270:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023272:	142f      	asrs	r7, r5, #16
 8023274:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023276:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802327a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802327e:	1433      	asrs	r3, r6, #16
 8023280:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023284:	fb02 7303 	mla	r3, r2, r3, r7
 8023288:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802328c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023290:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023294:	2900      	cmp	r1, #0
 8023296:	f000 812a 	beq.w	80234ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802329a:	687c      	ldr	r4, [r7, #4]
 802329c:	940e      	str	r4, [sp, #56]	; 0x38
 802329e:	0e24      	lsrs	r4, r4, #24
 80232a0:	9415      	str	r4, [sp, #84]	; 0x54
 80232a2:	b178      	cbz	r0, 80232c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80232a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80232a8:	3a01      	subs	r2, #1
 80232aa:	0092      	lsls	r2, r2, #2
 80232ac:	3204      	adds	r2, #4
 80232ae:	eb07 0802 	add.w	r8, r7, r2
 80232b2:	58ba      	ldr	r2, [r7, r2]
 80232b4:	9209      	str	r2, [sp, #36]	; 0x24
 80232b6:	0e12      	lsrs	r2, r2, #24
 80232b8:	9212      	str	r2, [sp, #72]	; 0x48
 80232ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80232be:	920f      	str	r2, [sp, #60]	; 0x3c
 80232c0:	0e12      	lsrs	r2, r2, #24
 80232c2:	9216      	str	r2, [sp, #88]	; 0x58
 80232c4:	b289      	uxth	r1, r1
 80232c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80232c8:	b280      	uxth	r0, r0
 80232ca:	fb01 f900 	mul.w	r9, r1, r0
 80232ce:	0109      	lsls	r1, r1, #4
 80232d0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80232d4:	eba1 0809 	sub.w	r8, r1, r9
 80232d8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80232dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80232de:	b280      	uxth	r0, r0
 80232e0:	fa1f f888 	uxth.w	r8, r8
 80232e4:	1a12      	subs	r2, r2, r0
 80232e6:	fb08 f101 	mul.w	r1, r8, r1
 80232ea:	b292      	uxth	r2, r2
 80232ec:	fb02 110c 	mla	r1, r2, ip, r1
 80232f0:	fb00 1104 	mla	r1, r0, r4, r1
 80232f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80232f6:	fb09 1104 	mla	r1, r9, r4, r1
 80232fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80232fe:	2900      	cmp	r1, #0
 8023300:	f000 80ec 	beq.w	80234dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023304:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023308:	d019      	beq.n	802333e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802330a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802330e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023312:	fb0c fa0a 	mul.w	sl, ip, sl
 8023316:	fb0c fc03 	mul.w	ip, ip, r3
 802331a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802331e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023322:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023326:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802332a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802332e:	4453      	add	r3, sl
 8023330:	0a3f      	lsrs	r7, r7, #8
 8023332:	0a1b      	lsrs	r3, r3, #8
 8023334:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023338:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802333c:	433b      	orrs	r3, r7
 802333e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023340:	2cff      	cmp	r4, #255	; 0xff
 8023342:	d020      	beq.n	8023386 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8023344:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023346:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802334a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802334c:	4367      	muls	r7, r4
 802334e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023350:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023354:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023358:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802335a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802335e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023362:	fb04 fa0a 	mul.w	sl, r4, sl
 8023366:	44bc      	add	ip, r7
 8023368:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802336c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023370:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023374:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023378:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802337c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023380:	ea4c 040a 	orr.w	r4, ip, sl
 8023384:	940e      	str	r4, [sp, #56]	; 0x38
 8023386:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023388:	2cff      	cmp	r4, #255	; 0xff
 802338a:	d020      	beq.n	80233ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802338c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802338e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023392:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023394:	4367      	muls	r7, r4
 8023396:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023398:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802339c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80233a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80233a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80233ae:	44bc      	add	ip, r7
 80233b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80233b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80233bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80233c8:	ea4c 040a 	orr.w	r4, ip, sl
 80233cc:	9409      	str	r4, [sp, #36]	; 0x24
 80233ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80233d0:	2cff      	cmp	r4, #255	; 0xff
 80233d2:	d020      	beq.n	8023416 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80233d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80233d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80233da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80233dc:	4367      	muls	r7, r4
 80233de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80233e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80233e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80233e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80233ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80233ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80233f6:	44bc      	add	ip, r7
 80233f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80233fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023400:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023404:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023408:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802340c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023410:	ea4c 040a 	orr.w	r4, ip, sl
 8023414:	940f      	str	r4, [sp, #60]	; 0x3c
 8023416:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023418:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802341c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023420:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023424:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023426:	fb08 f707 	mul.w	r7, r8, r7
 802342a:	fb02 770c 	mla	r7, r2, ip, r7
 802342e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023432:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023434:	fb00 770c 	mla	r7, r0, ip, r7
 8023438:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802343c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802343e:	fb09 770c 	mla	r7, r9, ip, r7
 8023442:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023446:	fb08 f80c 	mul.w	r8, r8, ip
 802344a:	0a3f      	lsrs	r7, r7, #8
 802344c:	fb02 8303 	mla	r3, r2, r3, r8
 8023450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023452:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023456:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802345a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802345c:	fb00 330a 	mla	r3, r0, sl, r3
 8023460:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023464:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023466:	fb09 3c0c 	mla	ip, r9, ip, r3
 802346a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802346c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023470:	434b      	muls	r3, r1
 8023472:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023476:	1c59      	adds	r1, r3, #1
 8023478:	ea47 070c 	orr.w	r7, r7, ip
 802347c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023480:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023484:	b2fa      	uxtb	r2, r7
 8023486:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802348a:	fb12 f200 	smulbb	r2, r2, r0
 802348e:	b2c9      	uxtb	r1, r1
 8023490:	fb03 2301 	mla	r3, r3, r1, r2
 8023494:	b29b      	uxth	r3, r3
 8023496:	1c5a      	adds	r2, r3, #1
 8023498:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802349c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80234a0:	fb12 f201 	smulbb	r2, r2, r1
 80234a4:	121b      	asrs	r3, r3, #8
 80234a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80234aa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80234ae:	0c3f      	lsrs	r7, r7, #16
 80234b0:	fb03 2300 	mla	r3, r3, r0, r2
 80234b4:	b29b      	uxth	r3, r3
 80234b6:	1c5a      	adds	r2, r3, #1
 80234b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80234bc:	121b      	asrs	r3, r3, #8
 80234be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80234c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80234c6:	fb13 f101 	smulbb	r1, r3, r1
 80234ca:	fb07 1700 	mla	r7, r7, r0, r1
 80234ce:	b2bf      	uxth	r7, r7
 80234d0:	1c79      	adds	r1, r7, #1
 80234d2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80234d6:	123f      	asrs	r7, r7, #8
 80234d8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80234dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234de:	f10e 0e03 	add.w	lr, lr, #3
 80234e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80234e6:	441d      	add	r5, r3
 80234e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234ea:	441e      	add	r6, r3
 80234ec:	e64e      	b.n	802318c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80234ee:	2800      	cmp	r0, #0
 80234f0:	f43f aee8 	beq.w	80232c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80234f4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80234f8:	9209      	str	r2, [sp, #36]	; 0x24
 80234fa:	0e12      	lsrs	r2, r2, #24
 80234fc:	9212      	str	r2, [sp, #72]	; 0x48
 80234fe:	e6e1      	b.n	80232c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023500:	b01d      	add	sp, #116	; 0x74
 8023502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023506 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8023506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802350a:	b087      	sub	sp, #28
 802350c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8023510:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8023514:	fb05 7003 	mla	r0, r5, r3, r7
 8023518:	2d00      	cmp	r5, #0
 802351a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802351e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8023522:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8023526:	f2c0 810a 	blt.w	802373e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802352a:	45a8      	cmp	r8, r5
 802352c:	f340 8107 	ble.w	802373e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8023530:	2f00      	cmp	r7, #0
 8023532:	f2c0 8102 	blt.w	802373a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8023536:	42bb      	cmp	r3, r7
 8023538:	f340 80ff 	ble.w	802373a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802353c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8023540:	1c7a      	adds	r2, r7, #1
 8023542:	f100 80ff 	bmi.w	8023744 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8023546:	4293      	cmp	r3, r2
 8023548:	f340 80fc 	ble.w	8023744 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802354c:	2c00      	cmp	r4, #0
 802354e:	f000 80fb 	beq.w	8023748 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8023552:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8023556:	3501      	adds	r5, #1
 8023558:	f100 80fa 	bmi.w	8023750 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802355c:	45a8      	cmp	r8, r5
 802355e:	f340 80f7 	ble.w	8023750 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023562:	f1be 0f00 	cmp.w	lr, #0
 8023566:	f000 80f6 	beq.w	8023756 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802356a:	2f00      	cmp	r7, #0
 802356c:	f2c0 80ee 	blt.w	802374c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8023570:	42bb      	cmp	r3, r7
 8023572:	f340 80eb 	ble.w	802374c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8023576:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802357a:	3701      	adds	r7, #1
 802357c:	f100 80ee 	bmi.w	802375c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8023580:	42bb      	cmp	r3, r7
 8023582:	f340 80eb 	ble.w	802375c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8023586:	2c00      	cmp	r4, #0
 8023588:	f000 80ea 	beq.w	8023760 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802358c:	3301      	adds	r3, #1
 802358e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023592:	fa1f fc84 	uxth.w	ip, r4
 8023596:	fa1f fe8e 	uxth.w	lr, lr
 802359a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802359e:	fb0c f90e 	mul.w	r9, ip, lr
 80235a2:	0e13      	lsrs	r3, r2, #24
 80235a4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80235a8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80235ac:	9302      	str	r3, [sp, #8]
 80235ae:	ebac 0709 	sub.w	r7, ip, r9
 80235b2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80235b6:	fa1f f48e 	uxth.w	r4, lr
 80235ba:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80235be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80235c2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80235c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80235ca:	1b1b      	subs	r3, r3, r4
 80235cc:	fb0a f606 	mul.w	r6, sl, r6
 80235d0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80235d4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80235d8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80235dc:	b29b      	uxth	r3, r3
 80235de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235e2:	b2bf      	uxth	r7, r7
 80235e4:	9301      	str	r3, [sp, #4]
 80235e6:	44e6      	add	lr, ip
 80235e8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80235ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235f0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80235f4:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80235f8:	9303      	str	r3, [sp, #12]
 80235fa:	0a33      	lsrs	r3, r6, #8
 80235fc:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8023600:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023604:	9304      	str	r3, [sp, #16]
 8023606:	fb0b f606 	mul.w	r6, fp, r6
 802360a:	fb0b f000 	mul.w	r0, fp, r0
 802360e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8023612:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023616:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802361a:	44b6      	add	lr, r6
 802361c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8023620:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8023624:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8023628:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802362c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023630:	fb08 f606 	mul.w	r6, r8, r6
 8023634:	0a03      	lsrs	r3, r0, #8
 8023636:	fb08 f505 	mul.w	r5, r8, r5
 802363a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802363e:	0a30      	lsrs	r0, r6, #8
 8023640:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023644:	9305      	str	r3, [sp, #20]
 8023646:	0e13      	lsrs	r3, r2, #24
 8023648:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802364c:	fb0e fe07 	mul.w	lr, lr, r7
 8023650:	4430      	add	r0, r6
 8023652:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023656:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802365a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802365e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023662:	0a00      	lsrs	r0, r0, #8
 8023664:	435e      	muls	r6, r3
 8023666:	0a2d      	lsrs	r5, r5, #8
 8023668:	435a      	muls	r2, r3
 802366a:	9b03      	ldr	r3, [sp, #12]
 802366c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023670:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023674:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023678:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802367c:	44b4      	add	ip, r6
 802367e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8023682:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023686:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802368a:	9e01      	ldr	r6, [sp, #4]
 802368c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023690:	fb03 ee06 	mla	lr, r3, r6, lr
 8023694:	9b04      	ldr	r3, [sp, #16]
 8023696:	0a12      	lsrs	r2, r2, #8
 8023698:	fb0c ee09 	mla	lr, ip, r9, lr
 802369c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80236a0:	9b05      	ldr	r3, [sp, #20]
 80236a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80236a6:	fb00 ee04 	mla	lr, r0, r4, lr
 80236aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80236ae:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80236b2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80236b6:	9b01      	ldr	r3, [sp, #4]
 80236b8:	fb07 fe0e 	mul.w	lr, r7, lr
 80236bc:	fb07 f70b 	mul.w	r7, r7, fp
 80236c0:	fb03 ee06 	mla	lr, r3, r6, lr
 80236c4:	fb03 730a 	mla	r3, r3, sl, r7
 80236c8:	fb09 e202 	mla	r2, r9, r2, lr
 80236cc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80236d0:	fb04 2e0e 	mla	lr, r4, lr, r2
 80236d4:	fb04 3408 	mla	r4, r4, r8, r3
 80236d8:	9b02      	ldr	r3, [sp, #8]
 80236da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80236de:	fb09 4903 	mla	r9, r9, r3, r4
 80236e2:	780b      	ldrb	r3, [r1, #0]
 80236e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80236e8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80236ec:	ea40 0e0e 	orr.w	lr, r0, lr
 80236f0:	fa5f f989 	uxtb.w	r9, r9
 80236f4:	fb03 f209 	mul.w	r2, r3, r9
 80236f8:	1c53      	adds	r3, r2, #1
 80236fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80236fe:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023702:	700b      	strb	r3, [r1, #0]
 8023704:	784b      	ldrb	r3, [r1, #1]
 8023706:	fb03 f309 	mul.w	r3, r3, r9
 802370a:	1c5a      	adds	r2, r3, #1
 802370c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023710:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023714:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023718:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802371c:	704b      	strb	r3, [r1, #1]
 802371e:	788b      	ldrb	r3, [r1, #2]
 8023720:	fb03 f909 	mul.w	r9, r3, r9
 8023724:	f109 0301 	add.w	r3, r9, #1
 8023728:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802372c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8023730:	f881 e002 	strb.w	lr, [r1, #2]
 8023734:	b007      	add	sp, #28
 8023736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802373a:	2600      	movs	r6, #0
 802373c:	e700      	b.n	8023540 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802373e:	2000      	movs	r0, #0
 8023740:	4606      	mov	r6, r0
 8023742:	e708      	b.n	8023556 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023744:	2000      	movs	r0, #0
 8023746:	e706      	b.n	8023556 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023748:	4620      	mov	r0, r4
 802374a:	e704      	b.n	8023556 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802374c:	2500      	movs	r5, #0
 802374e:	e714      	b.n	802357a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8023750:	2200      	movs	r2, #0
 8023752:	4615      	mov	r5, r2
 8023754:	e71d      	b.n	8023592 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023756:	4672      	mov	r2, lr
 8023758:	4675      	mov	r5, lr
 802375a:	e71a      	b.n	8023592 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802375c:	2200      	movs	r2, #0
 802375e:	e718      	b.n	8023592 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023760:	4622      	mov	r2, r4
 8023762:	e716      	b.n	8023592 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08023764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023768:	b099      	sub	sp, #100	; 0x64
 802376a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 802376e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023770:	9017      	str	r0, [sp, #92]	; 0x5c
 8023772:	9306      	str	r3, [sp, #24]
 8023774:	6850      	ldr	r0, [r2, #4]
 8023776:	6812      	ldr	r2, [r2, #0]
 8023778:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802377c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8023780:	fb00 1303 	mla	r3, r0, r3, r1
 8023784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023788:	18d3      	adds	r3, r2, r3
 802378a:	9309      	str	r3, [sp, #36]	; 0x24
 802378c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	930e      	str	r3, [sp, #56]	; 0x38
 8023792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023794:	2b00      	cmp	r3, #0
 8023796:	dc03      	bgt.n	80237a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802379a:	2b00      	cmp	r3, #0
 802379c:	f340 8360 	ble.w	8023e60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80237a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80237a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237aa:	1e48      	subs	r0, r1, #1
 80237ac:	1e57      	subs	r7, r2, #1
 80237ae:	9b06      	ldr	r3, [sp, #24]
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	f340 817b 	ble.w	8023aac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80237b6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80237ba:	ea4f 4326 	mov.w	r3, r6, asr #16
 80237be:	d406      	bmi.n	80237ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80237c0:	4584      	cmp	ip, r0
 80237c2:	da04      	bge.n	80237ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80237c4:	2b00      	cmp	r3, #0
 80237c6:	db02      	blt.n	80237ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80237c8:	42bb      	cmp	r3, r7
 80237ca:	f2c0 8170 	blt.w	8023aae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80237ce:	f11c 0c01 	adds.w	ip, ip, #1
 80237d2:	f100 8160 	bmi.w	8023a96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80237d6:	4561      	cmp	r1, ip
 80237d8:	f2c0 815d 	blt.w	8023a96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80237dc:	3301      	adds	r3, #1
 80237de:	f100 815a 	bmi.w	8023a96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80237e2:	429a      	cmp	r2, r3
 80237e4:	f2c0 8157 	blt.w	8023a96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80237e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80237ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80237ee:	f1b8 0f00 	cmp.w	r8, #0
 80237f2:	f340 8179 	ble.w	8023ae8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80237f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80237f8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80237fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80237fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023802:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023806:	142a      	asrs	r2, r5, #16
 8023808:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802380c:	689b      	ldr	r3, [r3, #8]
 802380e:	f100 81be 	bmi.w	8023b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023812:	f103 39ff 	add.w	r9, r3, #4294967295
 8023816:	454a      	cmp	r2, r9
 8023818:	f280 81b9 	bge.w	8023b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802381c:	f1bc 0f00 	cmp.w	ip, #0
 8023820:	f2c0 81b5 	blt.w	8023b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023824:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023828:	45cc      	cmp	ip, r9
 802382a:	f280 81b0 	bge.w	8023b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802382e:	b21b      	sxth	r3, r3
 8023830:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023832:	fb0c 2203 	mla	r2, ip, r3, r2
 8023836:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802383a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802383e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023842:	2900      	cmp	r1, #0
 8023844:	f000 8197 	beq.w	8023b76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023848:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802384c:	940a      	str	r4, [sp, #40]	; 0x28
 802384e:	0e24      	lsrs	r4, r4, #24
 8023850:	9411      	str	r4, [sp, #68]	; 0x44
 8023852:	b180      	cbz	r0, 8023876 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023858:	3b01      	subs	r3, #1
 802385a:	009b      	lsls	r3, r3, #2
 802385c:	3304      	adds	r3, #4
 802385e:	eb09 0c03 	add.w	ip, r9, r3
 8023862:	f859 3003 	ldr.w	r3, [r9, r3]
 8023866:	9307      	str	r3, [sp, #28]
 8023868:	0e1b      	lsrs	r3, r3, #24
 802386a:	930f      	str	r3, [sp, #60]	; 0x3c
 802386c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023870:	930b      	str	r3, [sp, #44]	; 0x2c
 8023872:	0e1b      	lsrs	r3, r3, #24
 8023874:	9312      	str	r3, [sp, #72]	; 0x48
 8023876:	b289      	uxth	r1, r1
 8023878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802387a:	b280      	uxth	r0, r0
 802387c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802387e:	fb01 fa00 	mul.w	sl, r1, r0
 8023882:	0109      	lsls	r1, r1, #4
 8023884:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023888:	eba1 090a 	sub.w	r9, r1, sl
 802388c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023890:	b280      	uxth	r0, r0
 8023892:	fa1f f989 	uxth.w	r9, r9
 8023896:	1a09      	subs	r1, r1, r0
 8023898:	fb09 f303 	mul.w	r3, r9, r3
 802389c:	b289      	uxth	r1, r1
 802389e:	fb01 330e 	mla	r3, r1, lr, r3
 80238a2:	fb00 3304 	mla	r3, r0, r4, r3
 80238a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80238a8:	fb0a 3304 	mla	r3, sl, r4, r3
 80238ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	f000 80e8 	beq.w	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80238b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80238ba:	d01b      	beq.n	80238f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80238bc:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80238c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238c4:	fb0e fb0b 	mul.w	fp, lr, fp
 80238c8:	fb0e fe02 	mul.w	lr, lr, r2
 80238cc:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80238d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80238d4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80238d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80238e0:	445a      	add	r2, fp
 80238e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238e6:	0a12      	lsrs	r2, r2, #8
 80238e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238f0:	ea42 020c 	orr.w	r2, r2, ip
 80238f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80238f6:	2cff      	cmp	r4, #255	; 0xff
 80238f8:	d021      	beq.n	802393e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80238fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80238fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023900:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023902:	fb04 fc0c 	mul.w	ip, r4, ip
 8023906:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023908:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802390c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023910:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023912:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023916:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802391a:	fb04 fb0b 	mul.w	fp, r4, fp
 802391e:	44e6      	add	lr, ip
 8023920:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023928:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802392c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023930:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023934:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023938:	ea4e 040b 	orr.w	r4, lr, fp
 802393c:	940a      	str	r4, [sp, #40]	; 0x28
 802393e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023940:	2cff      	cmp	r4, #255	; 0xff
 8023942:	d021      	beq.n	8023988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023944:	9c07      	ldr	r4, [sp, #28]
 8023946:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802394a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802394c:	fb04 fc0c 	mul.w	ip, r4, ip
 8023950:	9c07      	ldr	r4, [sp, #28]
 8023952:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023956:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802395a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802395c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023960:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023964:	fb04 fb0b 	mul.w	fp, r4, fp
 8023968:	44e6      	add	lr, ip
 802396a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802396e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023972:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023976:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802397a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802397e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023982:	ea4e 040b 	orr.w	r4, lr, fp
 8023986:	9407      	str	r4, [sp, #28]
 8023988:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802398a:	2cff      	cmp	r4, #255	; 0xff
 802398c:	d021      	beq.n	80239d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802398e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023990:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023994:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023996:	fb04 fc0c 	mul.w	ip, r4, ip
 802399a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802399c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80239a0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80239a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80239a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80239aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80239b2:	44e6      	add	lr, ip
 80239b4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80239b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239bc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80239c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80239c8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80239cc:	ea4e 040b 	orr.w	r4, lr, fp
 80239d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80239d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80239d4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80239d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239dc:	2bff      	cmp	r3, #255	; 0xff
 80239de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80239e2:	9c07      	ldr	r4, [sp, #28]
 80239e4:	fb09 fc0c 	mul.w	ip, r9, ip
 80239e8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80239ec:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80239f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80239f2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80239f6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80239fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80239fc:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023a00:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023a04:	fb09 f90e 	mul.w	r9, r9, lr
 8023a08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a0c:	fb01 9202 	mla	r2, r1, r2, r9
 8023a10:	9907      	ldr	r1, [sp, #28]
 8023a12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023a16:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8023a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023a1c:	fb00 220b 	mla	r2, r0, fp, r2
 8023a20:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023a24:	fb0a 2a00 	mla	sl, sl, r0, r2
 8023a28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a30:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023a34:	fa5f f08c 	uxtb.w	r0, ip
 8023a38:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023a3c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023a40:	f000 80a2 	beq.w	8023b88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8023a44:	43db      	mvns	r3, r3
 8023a46:	783a      	ldrb	r2, [r7, #0]
 8023a48:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023a4c:	b2db      	uxtb	r3, r3
 8023a4e:	fb02 fe03 	mul.w	lr, r2, r3
 8023a52:	fb0a fa03 	mul.w	sl, sl, r3
 8023a56:	f10e 0201 	add.w	r2, lr, #1
 8023a5a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023a5e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023a62:	703a      	strb	r2, [r7, #0]
 8023a64:	787a      	ldrb	r2, [r7, #1]
 8023a66:	fb02 f003 	mul.w	r0, r2, r3
 8023a6a:	f10a 0301 	add.w	r3, sl, #1
 8023a6e:	1c42      	adds	r2, r0, #1
 8023a70:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023a74:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023a78:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023a7c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023a80:	707a      	strb	r2, [r7, #1]
 8023a82:	f887 c002 	strb.w	ip, [r7, #2]
 8023a86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a88:	3703      	adds	r7, #3
 8023a8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a8e:	441d      	add	r5, r3
 8023a90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a92:	441e      	add	r6, r3
 8023a94:	e6ab      	b.n	80237ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023a96:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a98:	441d      	add	r5, r3
 8023a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a9c:	441e      	add	r6, r3
 8023a9e:	9b06      	ldr	r3, [sp, #24]
 8023aa0:	3b01      	subs	r3, #1
 8023aa2:	9306      	str	r3, [sp, #24]
 8023aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aa6:	3303      	adds	r3, #3
 8023aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8023aaa:	e680      	b.n	80237ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023aac:	d024      	beq.n	8023af8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023aae:	9b06      	ldr	r3, [sp, #24]
 8023ab0:	9825      	ldr	r0, [sp, #148]	; 0x94
 8023ab2:	3b01      	subs	r3, #1
 8023ab4:	fb00 5003 	mla	r0, r0, r3, r5
 8023ab8:	1400      	asrs	r0, r0, #16
 8023aba:	f53f ae95 	bmi.w	80237e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023abe:	3901      	subs	r1, #1
 8023ac0:	4288      	cmp	r0, r1
 8023ac2:	f6bf ae91 	bge.w	80237e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023ac6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8023ac8:	fb01 6303 	mla	r3, r1, r3, r6
 8023acc:	141b      	asrs	r3, r3, #16
 8023ace:	f53f ae8b 	bmi.w	80237e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023ad2:	3a01      	subs	r2, #1
 8023ad4:	4293      	cmp	r3, r2
 8023ad6:	f6bf ae87 	bge.w	80237e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023adc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023ae0:	1cdf      	adds	r7, r3, #3
 8023ae2:	f1bb 0f00 	cmp.w	fp, #0
 8023ae6:	dc6e      	bgt.n	8023bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8023ae8:	9b06      	ldr	r3, [sp, #24]
 8023aea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023af0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023af4:	4423      	add	r3, r4
 8023af6:	9309      	str	r3, [sp, #36]	; 0x24
 8023af8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	f340 81b0 	ble.w	8023e60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8023b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023b06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023b0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023b0e:	eef0 6a62 	vmov.f32	s13, s5
 8023b12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023b16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023b1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b1e:	ee16 5a90 	vmov	r5, s13
 8023b22:	eef0 6a43 	vmov.f32	s13, s6
 8023b26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b2a:	ee16 6a90 	vmov	r6, s13
 8023b2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b46:	ee12 2a90 	vmov	r2, s5
 8023b4a:	eef0 2a47 	vmov.f32	s5, s14
 8023b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b52:	ee13 2a10 	vmov	r2, s6
 8023b56:	9325      	str	r3, [sp, #148]	; 0x94
 8023b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023b5a:	eeb0 3a67 	vmov.f32	s6, s15
 8023b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b62:	9326      	str	r3, [sp, #152]	; 0x98
 8023b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023b66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023b68:	3b01      	subs	r3, #1
 8023b6a:	9315      	str	r3, [sp, #84]	; 0x54
 8023b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023b6e:	bf08      	it	eq
 8023b70:	4613      	moveq	r3, r2
 8023b72:	9306      	str	r3, [sp, #24]
 8023b74:	e60d      	b.n	8023792 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8023b76:	2800      	cmp	r0, #0
 8023b78:	f43f ae7d 	beq.w	8023876 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023b7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023b80:	9307      	str	r3, [sp, #28]
 8023b82:	0e1b      	lsrs	r3, r3, #24
 8023b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8023b86:	e676      	b.n	8023876 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023b88:	7038      	strb	r0, [r7, #0]
 8023b8a:	7079      	strb	r1, [r7, #1]
 8023b8c:	e779      	b.n	8023a82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023b8e:	f112 0901 	adds.w	r9, r2, #1
 8023b92:	f53f af78 	bmi.w	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023b96:	454b      	cmp	r3, r9
 8023b98:	f6ff af75 	blt.w	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023b9c:	f11c 0901 	adds.w	r9, ip, #1
 8023ba0:	f53f af71 	bmi.w	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023ba4:	45ce      	cmp	lr, r9
 8023ba6:	f6ff af6e 	blt.w	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023baa:	b21b      	sxth	r3, r3
 8023bac:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023bb0:	fa0f f28e 	sxth.w	r2, lr
 8023bb4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023bb8:	9200      	str	r2, [sp, #0]
 8023bba:	4639      	mov	r1, r7
 8023bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023bbe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023bc0:	f7ff fca1 	bl	8023506 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023bc4:	e75f      	b.n	8023a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023bc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023bc8:	1429      	asrs	r1, r5, #16
 8023bca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023bcc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023bd0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023bd4:	1433      	asrs	r3, r6, #16
 8023bd6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023bda:	fb0c 1303 	mla	r3, ip, r3, r1
 8023bde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023be0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023be4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023be8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023bec:	2a00      	cmp	r2, #0
 8023bee:	f000 8129 	beq.w	8023e44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8023bf2:	684c      	ldr	r4, [r1, #4]
 8023bf4:	940c      	str	r4, [sp, #48]	; 0x30
 8023bf6:	0e24      	lsrs	r4, r4, #24
 8023bf8:	9413      	str	r4, [sp, #76]	; 0x4c
 8023bfa:	b198      	cbz	r0, 8023c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023bfc:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023c00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023c04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023c08:	f10c 0c04 	add.w	ip, ip, #4
 8023c0c:	eb01 080c 	add.w	r8, r1, ip
 8023c10:	f851 100c 	ldr.w	r1, [r1, ip]
 8023c14:	9108      	str	r1, [sp, #32]
 8023c16:	0e09      	lsrs	r1, r1, #24
 8023c18:	9110      	str	r1, [sp, #64]	; 0x40
 8023c1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023c1e:	910d      	str	r1, [sp, #52]	; 0x34
 8023c20:	0e09      	lsrs	r1, r1, #24
 8023c22:	9114      	str	r1, [sp, #80]	; 0x50
 8023c24:	b292      	uxth	r2, r2
 8023c26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023c28:	b280      	uxth	r0, r0
 8023c2a:	fb02 f900 	mul.w	r9, r2, r0
 8023c2e:	0112      	lsls	r2, r2, #4
 8023c30:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023c34:	eba2 0809 	sub.w	r8, r2, r9
 8023c38:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023c3e:	b280      	uxth	r0, r0
 8023c40:	fa1f f888 	uxth.w	r8, r8
 8023c44:	1a09      	subs	r1, r1, r0
 8023c46:	fb08 f202 	mul.w	r2, r8, r2
 8023c4a:	b289      	uxth	r1, r1
 8023c4c:	fb01 220e 	mla	r2, r1, lr, r2
 8023c50:	fb00 2204 	mla	r2, r0, r4, r2
 8023c54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023c56:	fb09 2204 	mla	r2, r9, r4, r2
 8023c5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023c5e:	2a00      	cmp	r2, #0
 8023c60:	f000 80e8 	beq.w	8023e34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8023c64:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023c68:	d01b      	beq.n	8023ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8023c6a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023c6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c72:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c76:	fb0e fe03 	mul.w	lr, lr, r3
 8023c7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c7e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c82:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023c86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c8a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c8e:	4453      	add	r3, sl
 8023c90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c94:	0a1b      	lsrs	r3, r3, #8
 8023c96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c9e:	ea43 030c 	orr.w	r3, r3, ip
 8023ca2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ca4:	2cff      	cmp	r4, #255	; 0xff
 8023ca6:	d021      	beq.n	8023cec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8023ca8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023caa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023cae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023cb0:	fb04 fc0c 	mul.w	ip, r4, ip
 8023cb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023cb6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023cba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023cbe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023cc0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023cc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cc8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ccc:	44e6      	add	lr, ip
 8023cce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ce2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ce6:	ea4e 040a 	orr.w	r4, lr, sl
 8023cea:	940c      	str	r4, [sp, #48]	; 0x30
 8023cec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023cee:	2cff      	cmp	r4, #255	; 0xff
 8023cf0:	d021      	beq.n	8023d36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8023cf2:	9c08      	ldr	r4, [sp, #32]
 8023cf4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023cf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023cfa:	fb04 fc0c 	mul.w	ip, r4, ip
 8023cfe:	9c08      	ldr	r4, [sp, #32]
 8023d00:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023d04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023d06:	fb04 fa0e 	mul.w	sl, r4, lr
 8023d0a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023d0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023d12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d16:	44e6      	add	lr, ip
 8023d18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d30:	ea4e 040a 	orr.w	r4, lr, sl
 8023d34:	9408      	str	r4, [sp, #32]
 8023d36:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d38:	2cff      	cmp	r4, #255	; 0xff
 8023d3a:	d021      	beq.n	8023d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8023d3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023d3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023d42:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d44:	fb04 fc0c 	mul.w	ip, r4, ip
 8023d48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023d4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023d4e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023d52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d54:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023d58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023d60:	44e6      	add	lr, ip
 8023d62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d7a:	ea4e 040a 	orr.w	r4, lr, sl
 8023d7e:	940d      	str	r4, [sp, #52]	; 0x34
 8023d80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023d82:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023d86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d8a:	2aff      	cmp	r2, #255	; 0xff
 8023d8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023d90:	9c08      	ldr	r4, [sp, #32]
 8023d92:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d96:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d9a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023d9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023da0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023da4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023da8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023daa:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023dae:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023db2:	fb08 f80e 	mul.w	r8, r8, lr
 8023db6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dba:	fb01 8303 	mla	r3, r1, r3, r8
 8023dbe:	9908      	ldr	r1, [sp, #32]
 8023dc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023dc4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023dc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023dca:	fb00 330a 	mla	r3, r0, sl, r3
 8023dce:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023dd2:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023dd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023dda:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023dde:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023de2:	fa5f f08c 	uxtb.w	r0, ip
 8023de6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023dea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023dee:	d032      	beq.n	8023e56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8023df0:	43d2      	mvns	r2, r2
 8023df2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023df6:	b2d2      	uxtb	r2, r2
 8023df8:	fb0e fe02 	mul.w	lr, lr, r2
 8023dfc:	f10e 0301 	add.w	r3, lr, #1
 8023e00:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023e04:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023e08:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023e0c:	4350      	muls	r0, r2
 8023e0e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023e12:	1c43      	adds	r3, r0, #1
 8023e14:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023e18:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023e1c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023e20:	4353      	muls	r3, r2
 8023e22:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023e26:	1c5a      	adds	r2, r3, #1
 8023e28:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023e2c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023e30:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023e34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023e36:	3703      	adds	r7, #3
 8023e38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e3c:	441d      	add	r5, r3
 8023e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e40:	441e      	add	r6, r3
 8023e42:	e64e      	b.n	8023ae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8023e44:	2800      	cmp	r0, #0
 8023e46:	f43f aeed 	beq.w	8023c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023e4a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023e4e:	9108      	str	r1, [sp, #32]
 8023e50:	0e09      	lsrs	r1, r1, #24
 8023e52:	9110      	str	r1, [sp, #64]	; 0x40
 8023e54:	e6e6      	b.n	8023c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023e56:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023e5a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023e5e:	e7e7      	b.n	8023e30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8023e60:	b019      	add	sp, #100	; 0x64
 8023e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023e68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8023e70:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023e74:	2c00      	cmp	r4, #0
 8023e76:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023e7a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8023e7e:	fb00 4e03 	mla	lr, r0, r3, r4
 8023e82:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8023e86:	f2c0 80b8 	blt.w	8023ffa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023e8a:	45a1      	cmp	r9, r4
 8023e8c:	f340 80b5 	ble.w	8023ffa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023e90:	2800      	cmp	r0, #0
 8023e92:	f2c0 80b2 	blt.w	8023ffa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023e96:	4580      	cmp	r8, r0
 8023e98:	f340 80af 	ble.w	8023ffa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023e9c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8023ea0:	f01e 0f01 	tst.w	lr, #1
 8023ea4:	5d56      	ldrb	r6, [r2, r5]
 8023ea6:	bf0c      	ite	eq
 8023ea8:	f006 060f 	andeq.w	r6, r6, #15
 8023eac:	1136      	asrne	r6, r6, #4
 8023eae:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023eb2:	b2f6      	uxtb	r6, r6
 8023eb4:	f114 0a01 	adds.w	sl, r4, #1
 8023eb8:	f100 80a1 	bmi.w	8023ffe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ebc:	45d1      	cmp	r9, sl
 8023ebe:	f340 809e 	ble.w	8023ffe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ec2:	2800      	cmp	r0, #0
 8023ec4:	f2c0 809b 	blt.w	8023ffe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ec8:	4580      	cmp	r8, r0
 8023eca:	f340 8098 	ble.w	8023ffe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023ece:	2f00      	cmp	r7, #0
 8023ed0:	f000 8097 	beq.w	8024002 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8023ed4:	f10e 0b01 	add.w	fp, lr, #1
 8023ed8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023edc:	f01b 0f01 	tst.w	fp, #1
 8023ee0:	5d55      	ldrb	r5, [r2, r5]
 8023ee2:	bf0c      	ite	eq
 8023ee4:	f005 050f 	andeq.w	r5, r5, #15
 8023ee8:	112d      	asrne	r5, r5, #4
 8023eea:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023eee:	b2ed      	uxtb	r5, r5
 8023ef0:	f1bc 0f00 	cmp.w	ip, #0
 8023ef4:	f000 8089 	beq.w	802400a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8023ef8:	2c00      	cmp	r4, #0
 8023efa:	f100 0001 	add.w	r0, r0, #1
 8023efe:	f2c0 8082 	blt.w	8024006 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023f02:	45a1      	cmp	r9, r4
 8023f04:	dd7f      	ble.n	8024006 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023f06:	2800      	cmp	r0, #0
 8023f08:	db7d      	blt.n	8024006 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023f0a:	4580      	cmp	r8, r0
 8023f0c:	dd7b      	ble.n	8024006 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023f0e:	eb03 0b0e 	add.w	fp, r3, lr
 8023f12:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023f16:	f01b 0f01 	tst.w	fp, #1
 8023f1a:	5d14      	ldrb	r4, [r2, r4]
 8023f1c:	bf0c      	ite	eq
 8023f1e:	f004 040f 	andeq.w	r4, r4, #15
 8023f22:	1124      	asrne	r4, r4, #4
 8023f24:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023f28:	b2e4      	uxtb	r4, r4
 8023f2a:	f1ba 0f00 	cmp.w	sl, #0
 8023f2e:	db6f      	blt.n	8024010 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023f30:	45d1      	cmp	r9, sl
 8023f32:	dd6d      	ble.n	8024010 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023f34:	2800      	cmp	r0, #0
 8023f36:	db6b      	blt.n	8024010 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023f38:	4580      	cmp	r8, r0
 8023f3a:	dd69      	ble.n	8024010 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023f3c:	2f00      	cmp	r7, #0
 8023f3e:	d069      	beq.n	8024014 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8023f40:	3301      	adds	r3, #1
 8023f42:	449e      	add	lr, r3
 8023f44:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023f48:	f01e 0f01 	tst.w	lr, #1
 8023f4c:	5cd0      	ldrb	r0, [r2, r3]
 8023f4e:	bf0c      	ite	eq
 8023f50:	f000 000f 	andeq.w	r0, r0, #15
 8023f54:	1100      	asrne	r0, r0, #4
 8023f56:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023f5a:	b2c3      	uxtb	r3, r0
 8023f5c:	b2ba      	uxth	r2, r7
 8023f5e:	fa1f fc8c 	uxth.w	ip, ip
 8023f62:	fb02 f00c 	mul.w	r0, r2, ip
 8023f66:	0112      	lsls	r2, r2, #4
 8023f68:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023f6c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023f70:	1a12      	subs	r2, r2, r0
 8023f72:	fa1f fc8c 	uxth.w	ip, ip
 8023f76:	b292      	uxth	r2, r2
 8023f78:	eba7 070c 	sub.w	r7, r7, ip
 8023f7c:	436a      	muls	r2, r5
 8023f7e:	b2bf      	uxth	r7, r7
 8023f80:	fb06 2207 	mla	r2, r6, r7, r2
 8023f84:	fb0c 2404 	mla	r4, ip, r4, r2
 8023f88:	fb00 4303 	mla	r3, r0, r3, r4
 8023f8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f90:	b38b      	cbz	r3, 8023ff6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8023f92:	4a21      	ldr	r2, [pc, #132]	; (8024018 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8023f94:	6814      	ldr	r4, [r2, #0]
 8023f96:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8023f9a:	b2e5      	uxtb	r5, r4
 8023f9c:	4353      	muls	r3, r2
 8023f9e:	1c5a      	adds	r2, r3, #1
 8023fa0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fa4:	1212      	asrs	r2, r2, #8
 8023fa6:	b290      	uxth	r0, r2
 8023fa8:	43d2      	mvns	r2, r2
 8023faa:	fb15 f500 	smulbb	r5, r5, r0
 8023fae:	b2d3      	uxtb	r3, r2
 8023fb0:	780a      	ldrb	r2, [r1, #0]
 8023fb2:	fb02 5203 	mla	r2, r2, r3, r5
 8023fb6:	b292      	uxth	r2, r2
 8023fb8:	1c55      	adds	r5, r2, #1
 8023fba:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023fbe:	784d      	ldrb	r5, [r1, #1]
 8023fc0:	fb15 f503 	smulbb	r5, r5, r3
 8023fc4:	1212      	asrs	r2, r2, #8
 8023fc6:	700a      	strb	r2, [r1, #0]
 8023fc8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023fcc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023fd0:	fb02 5200 	mla	r2, r2, r0, r5
 8023fd4:	b292      	uxth	r2, r2
 8023fd6:	1c55      	adds	r5, r2, #1
 8023fd8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023fdc:	1212      	asrs	r2, r2, #8
 8023fde:	704a      	strb	r2, [r1, #1]
 8023fe0:	788a      	ldrb	r2, [r1, #2]
 8023fe2:	fb12 f303 	smulbb	r3, r2, r3
 8023fe6:	fb04 3300 	mla	r3, r4, r0, r3
 8023fea:	b29b      	uxth	r3, r3
 8023fec:	1c5a      	adds	r2, r3, #1
 8023fee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ff2:	121b      	asrs	r3, r3, #8
 8023ff4:	708b      	strb	r3, [r1, #2]
 8023ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ffa:	2600      	movs	r6, #0
 8023ffc:	e75a      	b.n	8023eb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8023ffe:	2500      	movs	r5, #0
 8024000:	e776      	b.n	8023ef0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8024002:	463d      	mov	r5, r7
 8024004:	e774      	b.n	8023ef0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8024006:	2400      	movs	r4, #0
 8024008:	e78f      	b.n	8023f2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 802400a:	4663      	mov	r3, ip
 802400c:	4664      	mov	r4, ip
 802400e:	e7a5      	b.n	8023f5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024010:	2300      	movs	r3, #0
 8024012:	e7a3      	b.n	8023f5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024014:	463b      	mov	r3, r7
 8024016:	e7a1      	b.n	8023f5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8024018:	24006d84 	.word	0x24006d84

0802401c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024020:	b097      	sub	sp, #92	; 0x5c
 8024022:	9214      	str	r2, [sp, #80]	; 0x50
 8024024:	9309      	str	r3, [sp, #36]	; 0x24
 8024026:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024028:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802402c:	9015      	str	r0, [sp, #84]	; 0x54
 802402e:	910c      	str	r1, [sp, #48]	; 0x30
 8024030:	6850      	ldr	r0, [r2, #4]
 8024032:	930e      	str	r3, [sp, #56]	; 0x38
 8024034:	6812      	ldr	r2, [r2, #0]
 8024036:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802403a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 802403e:	fb00 1303 	mla	r3, r0, r3, r1
 8024042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024046:	eb02 0a03 	add.w	sl, r2, r3
 802404a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802404c:	689b      	ldr	r3, [r3, #8]
 802404e:	3301      	adds	r3, #1
 8024050:	f023 0301 	bic.w	r3, r3, #1
 8024054:	930f      	str	r3, [sp, #60]	; 0x3c
 8024056:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024058:	681f      	ldr	r7, [r3, #0]
 802405a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802405c:	2b00      	cmp	r3, #0
 802405e:	dc03      	bgt.n	8024068 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024060:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024062:	2b00      	cmp	r3, #0
 8024064:	f340 8247 	ble.w	80244f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8024068:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802406a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802406e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024072:	1e48      	subs	r0, r1, #1
 8024074:	f102 3cff 	add.w	ip, r2, #4294967295
 8024078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802407a:	2b00      	cmp	r3, #0
 802407c:	f340 80e5 	ble.w	802424a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8024080:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8024084:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024088:	d406      	bmi.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802408a:	4586      	cmp	lr, r0
 802408c:	da04      	bge.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802408e:	2b00      	cmp	r3, #0
 8024090:	db02      	blt.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024092:	4563      	cmp	r3, ip
 8024094:	f2c0 80da 	blt.w	802424c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024098:	f11e 0e01 	adds.w	lr, lr, #1
 802409c:	f100 80cb 	bmi.w	8024236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80240a0:	4571      	cmp	r1, lr
 80240a2:	f2c0 80c8 	blt.w	8024236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80240a6:	3301      	adds	r3, #1
 80240a8:	f100 80c5 	bmi.w	8024236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80240ac:	429a      	cmp	r2, r3
 80240ae:	f2c0 80c2 	blt.w	8024236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80240b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240b4:	46d0      	mov	r8, sl
 80240b6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80240ba:	930d      	str	r3, [sp, #52]	; 0x34
 80240bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240be:	2b00      	cmp	r3, #0
 80240c0:	f340 80e3 	ble.w	802428a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80240c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240c6:	1430      	asrs	r0, r6, #16
 80240c8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80240cc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80240d0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80240d4:	142b      	asrs	r3, r5, #16
 80240d6:	f100 812e 	bmi.w	8024336 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80240da:	f10c 3bff 	add.w	fp, ip, #4294967295
 80240de:	455b      	cmp	r3, fp
 80240e0:	f280 8129 	bge.w	8024336 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80240e4:	2800      	cmp	r0, #0
 80240e6:	f2c0 8126 	blt.w	8024336 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80240ea:	f10e 3bff 	add.w	fp, lr, #4294967295
 80240ee:	4558      	cmp	r0, fp
 80240f0:	f280 8121 	bge.w	8024336 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80240f4:	fb00 3309 	mla	r3, r0, r9, r3
 80240f8:	0858      	lsrs	r0, r3, #1
 80240fa:	07dc      	lsls	r4, r3, #31
 80240fc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024100:	bf54      	ite	pl
 8024102:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024106:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802410a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802410e:	fa5f fc8c 	uxtb.w	ip, ip
 8024112:	2a00      	cmp	r2, #0
 8024114:	f000 80fe 	beq.w	8024314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8024118:	1c58      	adds	r0, r3, #1
 802411a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802411e:	07c0      	lsls	r0, r0, #31
 8024120:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024124:	bf54      	ite	pl
 8024126:	f00e 0e0f 	andpl.w	lr, lr, #15
 802412a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802412e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024132:	fa5f f08e 	uxtb.w	r0, lr
 8024136:	9010      	str	r0, [sp, #64]	; 0x40
 8024138:	b1d9      	cbz	r1, 8024172 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802413a:	444b      	add	r3, r9
 802413c:	0858      	lsrs	r0, r3, #1
 802413e:	07dc      	lsls	r4, r3, #31
 8024140:	f103 0301 	add.w	r3, r3, #1
 8024144:	5c38      	ldrb	r0, [r7, r0]
 8024146:	bf54      	ite	pl
 8024148:	f000 000f 	andpl.w	r0, r0, #15
 802414c:	1100      	asrmi	r0, r0, #4
 802414e:	07dc      	lsls	r4, r3, #31
 8024150:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024154:	b2c0      	uxtb	r0, r0
 8024156:	900a      	str	r0, [sp, #40]	; 0x28
 8024158:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802415c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024160:	bf54      	ite	pl
 8024162:	f00e 030f 	andpl.w	r3, lr, #15
 8024166:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802416a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802416e:	b2db      	uxtb	r3, r3
 8024170:	9311      	str	r3, [sp, #68]	; 0x44
 8024172:	b292      	uxth	r2, r2
 8024174:	b289      	uxth	r1, r1
 8024176:	0113      	lsls	r3, r2, #4
 8024178:	fb02 f001 	mul.w	r0, r2, r1
 802417c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802417e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024182:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8024186:	1a1b      	subs	r3, r3, r0
 8024188:	b289      	uxth	r1, r1
 802418a:	b29b      	uxth	r3, r3
 802418c:	ebae 0e01 	sub.w	lr, lr, r1
 8024190:	4353      	muls	r3, r2
 8024192:	fa1f fe8e 	uxth.w	lr, lr
 8024196:	fb0c 320e 	mla	r2, ip, lr, r3
 802419a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802419c:	fb01 2203 	mla	r2, r1, r3, r2
 80241a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80241a2:	fb00 2203 	mla	r2, r0, r3, r2
 80241a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80241aa:	2a00      	cmp	r2, #0
 80241ac:	d039      	beq.n	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80241ae:	4bc7      	ldr	r3, [pc, #796]	; (80244cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80241b0:	6819      	ldr	r1, [r3, #0]
 80241b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241b4:	fa5f fc81 	uxtb.w	ip, r1
 80241b8:	435a      	muls	r2, r3
 80241ba:	1c53      	adds	r3, r2, #1
 80241bc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80241c0:	1212      	asrs	r2, r2, #8
 80241c2:	b290      	uxth	r0, r2
 80241c4:	43d2      	mvns	r2, r2
 80241c6:	fb1c fc00 	smulbb	ip, ip, r0
 80241ca:	b2d3      	uxtb	r3, r2
 80241cc:	f898 2000 	ldrb.w	r2, [r8]
 80241d0:	fb02 c203 	mla	r2, r2, r3, ip
 80241d4:	b292      	uxth	r2, r2
 80241d6:	f102 0c01 	add.w	ip, r2, #1
 80241da:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80241de:	f898 c001 	ldrb.w	ip, [r8, #1]
 80241e2:	fb1c fc03 	smulbb	ip, ip, r3
 80241e6:	1212      	asrs	r2, r2, #8
 80241e8:	f888 2000 	strb.w	r2, [r8]
 80241ec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80241f0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80241f4:	fb02 c200 	mla	r2, r2, r0, ip
 80241f8:	b292      	uxth	r2, r2
 80241fa:	f102 0c01 	add.w	ip, r2, #1
 80241fe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024202:	1212      	asrs	r2, r2, #8
 8024204:	f888 2001 	strb.w	r2, [r8, #1]
 8024208:	f898 2002 	ldrb.w	r2, [r8, #2]
 802420c:	fb12 f303 	smulbb	r3, r2, r3
 8024210:	fb01 3300 	mla	r3, r1, r0, r3
 8024214:	b29b      	uxth	r3, r3
 8024216:	1c5a      	adds	r2, r3, #1
 8024218:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802421c:	121b      	asrs	r3, r3, #8
 802421e:	f888 3002 	strb.w	r3, [r8, #2]
 8024222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024224:	f108 0803 	add.w	r8, r8, #3
 8024228:	441d      	add	r5, r3
 802422a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802422c:	441e      	add	r6, r3
 802422e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024230:	3b01      	subs	r3, #1
 8024232:	930d      	str	r3, [sp, #52]	; 0x34
 8024234:	e742      	b.n	80240bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024238:	f10a 0a03 	add.w	sl, sl, #3
 802423c:	441d      	add	r5, r3
 802423e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024240:	441e      	add	r6, r3
 8024242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024244:	3b01      	subs	r3, #1
 8024246:	9309      	str	r3, [sp, #36]	; 0x24
 8024248:	e716      	b.n	8024078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802424a:	d024      	beq.n	8024296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802424c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802424e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024250:	3b01      	subs	r3, #1
 8024252:	fb00 5003 	mla	r0, r0, r3, r5
 8024256:	1400      	asrs	r0, r0, #16
 8024258:	f53f af2b 	bmi.w	80240b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802425c:	3901      	subs	r1, #1
 802425e:	4288      	cmp	r0, r1
 8024260:	f6bf af27 	bge.w	80240b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024264:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024266:	fb01 6303 	mla	r3, r1, r3, r6
 802426a:	141b      	asrs	r3, r3, #16
 802426c:	f53f af21 	bmi.w	80240b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024270:	3a01      	subs	r2, #1
 8024272:	4293      	cmp	r3, r2
 8024274:	f6bf af1d 	bge.w	80240b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024278:	f10a 0e03 	add.w	lr, sl, #3
 802427c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8024280:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024284:	f1b8 0f00 	cmp.w	r8, #0
 8024288:	dc76      	bgt.n	8024378 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802428c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024290:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024294:	44a2      	add	sl, r4
 8024296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024298:	2b00      	cmp	r3, #0
 802429a:	f340 812c 	ble.w	80244f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802429e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80242a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80242a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242ac:	eef0 6a62 	vmov.f32	s13, s5
 80242b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80242b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80242b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242bc:	ee16 5a90 	vmov	r5, s13
 80242c0:	eef0 6a43 	vmov.f32	s13, s6
 80242c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242c8:	ee16 6a90 	vmov	r6, s13
 80242cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80242dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80242e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80242e4:	ee12 2a90 	vmov	r2, s5
 80242e8:	eef0 2a47 	vmov.f32	s5, s14
 80242ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80242f0:	ee13 2a10 	vmov	r2, s6
 80242f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80242f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80242f8:	eeb0 3a67 	vmov.f32	s6, s15
 80242fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024300:	9324      	str	r3, [sp, #144]	; 0x90
 8024302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024306:	3b01      	subs	r3, #1
 8024308:	930c      	str	r3, [sp, #48]	; 0x30
 802430a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802430c:	bf08      	it	eq
 802430e:	4613      	moveq	r3, r2
 8024310:	9309      	str	r3, [sp, #36]	; 0x24
 8024312:	e6a2      	b.n	802405a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024314:	2900      	cmp	r1, #0
 8024316:	f43f af2c 	beq.w	8024172 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802431a:	eb09 0003 	add.w	r0, r9, r3
 802431e:	0843      	lsrs	r3, r0, #1
 8024320:	07c0      	lsls	r0, r0, #31
 8024322:	5cfb      	ldrb	r3, [r7, r3]
 8024324:	bf54      	ite	pl
 8024326:	f003 030f 	andpl.w	r3, r3, #15
 802432a:	111b      	asrmi	r3, r3, #4
 802432c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024330:	b2db      	uxtb	r3, r3
 8024332:	930a      	str	r3, [sp, #40]	; 0x28
 8024334:	e71d      	b.n	8024172 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8024336:	f113 0b01 	adds.w	fp, r3, #1
 802433a:	f53f af72 	bmi.w	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802433e:	45dc      	cmp	ip, fp
 8024340:	f6ff af6f 	blt.w	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024344:	f110 0b01 	adds.w	fp, r0, #1
 8024348:	f53f af6b 	bmi.w	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802434c:	45de      	cmp	lr, fp
 802434e:	f6ff af68 	blt.w	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024352:	9302      	str	r3, [sp, #8]
 8024354:	fa0f f38e 	sxth.w	r3, lr
 8024358:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802435a:	9301      	str	r3, [sp, #4]
 802435c:	fa0f f38c 	sxth.w	r3, ip
 8024360:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024364:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024368:	9300      	str	r3, [sp, #0]
 802436a:	463a      	mov	r2, r7
 802436c:	464b      	mov	r3, r9
 802436e:	4641      	mov	r1, r8
 8024370:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024372:	f7ff fd79 	bl	8023e68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8024376:	e754      	b.n	8024222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024378:	142a      	asrs	r2, r5, #16
 802437a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802437e:	1433      	asrs	r3, r6, #16
 8024380:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024384:	fb09 2303 	mla	r3, r9, r3, r2
 8024388:	085a      	lsrs	r2, r3, #1
 802438a:	07dc      	lsls	r4, r3, #31
 802438c:	5cba      	ldrb	r2, [r7, r2]
 802438e:	bf54      	ite	pl
 8024390:	f002 020f 	andpl.w	r2, r2, #15
 8024394:	1112      	asrmi	r2, r2, #4
 8024396:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802439a:	b2d2      	uxtb	r2, r2
 802439c:	2900      	cmp	r1, #0
 802439e:	f000 8097 	beq.w	80244d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80243a2:	f103 0b01 	add.w	fp, r3, #1
 80243a6:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80243aa:	f01b 0f01 	tst.w	fp, #1
 80243ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243b2:	bf0c      	ite	eq
 80243b4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80243b8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80243bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243c0:	fa5f f48c 	uxtb.w	r4, ip
 80243c4:	9412      	str	r4, [sp, #72]	; 0x48
 80243c6:	b300      	cbz	r0, 802440a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80243c8:	444b      	add	r3, r9
 80243ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243ce:	07dc      	lsls	r4, r3, #31
 80243d0:	f103 0301 	add.w	r3, r3, #1
 80243d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243d8:	bf54      	ite	pl
 80243da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80243de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80243e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243e6:	fa5f f48c 	uxtb.w	r4, ip
 80243ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80243f0:	07dc      	lsls	r4, r3, #31
 80243f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243f6:	bf54      	ite	pl
 80243f8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80243fc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024400:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024404:	fa5f f38c 	uxtb.w	r3, ip
 8024408:	9313      	str	r3, [sp, #76]	; 0x4c
 802440a:	b289      	uxth	r1, r1
 802440c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802440e:	b280      	uxth	r0, r0
 8024410:	fb01 f300 	mul.w	r3, r1, r0
 8024414:	0109      	lsls	r1, r1, #4
 8024416:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802441a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802441e:	1ac9      	subs	r1, r1, r3
 8024420:	b280      	uxth	r0, r0
 8024422:	b289      	uxth	r1, r1
 8024424:	ebac 0c00 	sub.w	ip, ip, r0
 8024428:	4361      	muls	r1, r4
 802442a:	fa1f fc8c 	uxth.w	ip, ip
 802442e:	fb02 120c 	mla	r2, r2, ip, r1
 8024432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024434:	fb00 2001 	mla	r0, r0, r1, r2
 8024438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802443a:	fb03 0302 	mla	r3, r3, r2, r0
 802443e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024442:	2b00      	cmp	r3, #0
 8024444:	d039      	beq.n	80244ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024446:	4a21      	ldr	r2, [pc, #132]	; (80244cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024448:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802444c:	6810      	ldr	r0, [r2, #0]
 802444e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024450:	fa5f fc80 	uxtb.w	ip, r0
 8024454:	4353      	muls	r3, r2
 8024456:	1c5a      	adds	r2, r3, #1
 8024458:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802445c:	121b      	asrs	r3, r3, #8
 802445e:	b29a      	uxth	r2, r3
 8024460:	43db      	mvns	r3, r3
 8024462:	fb1c fc02 	smulbb	ip, ip, r2
 8024466:	b2db      	uxtb	r3, r3
 8024468:	fb01 c103 	mla	r1, r1, r3, ip
 802446c:	b289      	uxth	r1, r1
 802446e:	f101 0c01 	add.w	ip, r1, #1
 8024472:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024476:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802447a:	fb1c fc03 	smulbb	ip, ip, r3
 802447e:	1209      	asrs	r1, r1, #8
 8024480:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024484:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024488:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802448c:	fb01 c102 	mla	r1, r1, r2, ip
 8024490:	b289      	uxth	r1, r1
 8024492:	f101 0c01 	add.w	ip, r1, #1
 8024496:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802449a:	1209      	asrs	r1, r1, #8
 802449c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80244a0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80244a4:	fb11 f303 	smulbb	r3, r1, r3
 80244a8:	fb00 3002 	mla	r0, r0, r2, r3
 80244ac:	b280      	uxth	r0, r0
 80244ae:	1c42      	adds	r2, r0, #1
 80244b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244b4:	1200      	asrs	r0, r0, #8
 80244b6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80244ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80244bc:	f10e 0e03 	add.w	lr, lr, #3
 80244c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80244c4:	441d      	add	r5, r3
 80244c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80244c8:	441e      	add	r6, r3
 80244ca:	e6db      	b.n	8024284 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80244cc:	24006d84 	.word	0x24006d84
 80244d0:	2800      	cmp	r0, #0
 80244d2:	d09a      	beq.n	802440a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80244d4:	444b      	add	r3, r9
 80244d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80244da:	07db      	lsls	r3, r3, #31
 80244dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80244e0:	bf54      	ite	pl
 80244e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80244e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80244ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80244ee:	fa5f f38c 	uxtb.w	r3, ip
 80244f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80244f4:	e789      	b.n	802440a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80244f6:	b017      	add	sp, #92	; 0x5c
 80244f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80244fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024500:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8024504:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024508:	2d00      	cmp	r5, #0
 802450a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802450e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8024512:	fb04 5e03 	mla	lr, r4, r3, r5
 8024516:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802451a:	f2c0 80b1 	blt.w	8024680 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802451e:	45a9      	cmp	r9, r5
 8024520:	f340 80ae 	ble.w	8024680 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024524:	2c00      	cmp	r4, #0
 8024526:	f2c0 80ab 	blt.w	8024680 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802452a:	45a0      	cmp	r8, r4
 802452c:	f340 80a8 	ble.w	8024680 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8024530:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8024534:	f01e 0f01 	tst.w	lr, #1
 8024538:	5d97      	ldrb	r7, [r2, r6]
 802453a:	bf0c      	ite	eq
 802453c:	f007 070f 	andeq.w	r7, r7, #15
 8024540:	113f      	asrne	r7, r7, #4
 8024542:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8024546:	b2ff      	uxtb	r7, r7
 8024548:	f115 0a01 	adds.w	sl, r5, #1
 802454c:	f100 809a 	bmi.w	8024684 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024550:	45d1      	cmp	r9, sl
 8024552:	f340 8097 	ble.w	8024684 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024556:	2c00      	cmp	r4, #0
 8024558:	f2c0 8094 	blt.w	8024684 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802455c:	45a0      	cmp	r8, r4
 802455e:	f340 8091 	ble.w	8024684 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024562:	2800      	cmp	r0, #0
 8024564:	f000 8090 	beq.w	8024688 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8024568:	f10e 0b01 	add.w	fp, lr, #1
 802456c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8024570:	f01b 0f01 	tst.w	fp, #1
 8024574:	5d96      	ldrb	r6, [r2, r6]
 8024576:	bf0c      	ite	eq
 8024578:	f006 060f 	andeq.w	r6, r6, #15
 802457c:	1136      	asrne	r6, r6, #4
 802457e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024582:	b2f6      	uxtb	r6, r6
 8024584:	f1bc 0f00 	cmp.w	ip, #0
 8024588:	f000 8082 	beq.w	8024690 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802458c:	2d00      	cmp	r5, #0
 802458e:	f104 0401 	add.w	r4, r4, #1
 8024592:	db7b      	blt.n	802468c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024594:	45a9      	cmp	r9, r5
 8024596:	dd79      	ble.n	802468c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024598:	2c00      	cmp	r4, #0
 802459a:	db77      	blt.n	802468c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802459c:	45a0      	cmp	r8, r4
 802459e:	dd75      	ble.n	802468c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80245a0:	eb03 0b0e 	add.w	fp, r3, lr
 80245a4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80245a8:	f01b 0f01 	tst.w	fp, #1
 80245ac:	5d55      	ldrb	r5, [r2, r5]
 80245ae:	bf0c      	ite	eq
 80245b0:	f005 050f 	andeq.w	r5, r5, #15
 80245b4:	112d      	asrne	r5, r5, #4
 80245b6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80245ba:	b2ed      	uxtb	r5, r5
 80245bc:	f1ba 0f00 	cmp.w	sl, #0
 80245c0:	db69      	blt.n	8024696 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80245c2:	45d1      	cmp	r9, sl
 80245c4:	dd67      	ble.n	8024696 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80245c6:	2c00      	cmp	r4, #0
 80245c8:	db65      	blt.n	8024696 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80245ca:	45a0      	cmp	r8, r4
 80245cc:	dd63      	ble.n	8024696 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80245ce:	2800      	cmp	r0, #0
 80245d0:	d063      	beq.n	802469a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80245d2:	3301      	adds	r3, #1
 80245d4:	449e      	add	lr, r3
 80245d6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80245da:	f01e 0f01 	tst.w	lr, #1
 80245de:	5cd4      	ldrb	r4, [r2, r3]
 80245e0:	bf0c      	ite	eq
 80245e2:	f004 040f 	andeq.w	r4, r4, #15
 80245e6:	1124      	asrne	r4, r4, #4
 80245e8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80245ec:	b2e3      	uxtb	r3, r4
 80245ee:	b282      	uxth	r2, r0
 80245f0:	fa1f fc8c 	uxth.w	ip, ip
 80245f4:	fb02 f40c 	mul.w	r4, r2, ip
 80245f8:	0112      	lsls	r2, r2, #4
 80245fa:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80245fe:	fa1f f08c 	uxth.w	r0, ip
 8024602:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8024606:	1b12      	subs	r2, r2, r4
 8024608:	ebac 0c00 	sub.w	ip, ip, r0
 802460c:	b292      	uxth	r2, r2
 802460e:	fa1f fc8c 	uxth.w	ip, ip
 8024612:	4372      	muls	r2, r6
 8024614:	fb07 220c 	mla	r2, r7, ip, r2
 8024618:	fb00 2005 	mla	r0, r0, r5, r2
 802461c:	fb04 0303 	mla	r3, r4, r3, r0
 8024620:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024624:	b353      	cbz	r3, 802467c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8024626:	4a1e      	ldr	r2, [pc, #120]	; (80246a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8024628:	7808      	ldrb	r0, [r1, #0]
 802462a:	6814      	ldr	r4, [r2, #0]
 802462c:	b29a      	uxth	r2, r3
 802462e:	43db      	mvns	r3, r3
 8024630:	b2e5      	uxtb	r5, r4
 8024632:	b2db      	uxtb	r3, r3
 8024634:	fb15 f502 	smulbb	r5, r5, r2
 8024638:	fb00 5003 	mla	r0, r0, r3, r5
 802463c:	b280      	uxth	r0, r0
 802463e:	1c45      	adds	r5, r0, #1
 8024640:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024644:	784d      	ldrb	r5, [r1, #1]
 8024646:	fb15 f503 	smulbb	r5, r5, r3
 802464a:	1200      	asrs	r0, r0, #8
 802464c:	7008      	strb	r0, [r1, #0]
 802464e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024652:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024656:	fb00 5002 	mla	r0, r0, r2, r5
 802465a:	b280      	uxth	r0, r0
 802465c:	1c45      	adds	r5, r0, #1
 802465e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024662:	1200      	asrs	r0, r0, #8
 8024664:	7048      	strb	r0, [r1, #1]
 8024666:	7888      	ldrb	r0, [r1, #2]
 8024668:	fb10 f303 	smulbb	r3, r0, r3
 802466c:	fb04 3202 	mla	r2, r4, r2, r3
 8024670:	b292      	uxth	r2, r2
 8024672:	1c53      	adds	r3, r2, #1
 8024674:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024678:	1212      	asrs	r2, r2, #8
 802467a:	708a      	strb	r2, [r1, #2]
 802467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024680:	2700      	movs	r7, #0
 8024682:	e761      	b.n	8024548 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8024684:	2600      	movs	r6, #0
 8024686:	e77d      	b.n	8024584 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8024688:	4606      	mov	r6, r0
 802468a:	e77b      	b.n	8024584 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802468c:	2500      	movs	r5, #0
 802468e:	e795      	b.n	80245bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8024690:	4663      	mov	r3, ip
 8024692:	4665      	mov	r5, ip
 8024694:	e7ab      	b.n	80245ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8024696:	2300      	movs	r3, #0
 8024698:	e7a9      	b.n	80245ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802469a:	4603      	mov	r3, r0
 802469c:	e7a7      	b.n	80245ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802469e:	bf00      	nop
 80246a0:	24006d84 	.word	0x24006d84

080246a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80246a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246a8:	b093      	sub	sp, #76	; 0x4c
 80246aa:	461c      	mov	r4, r3
 80246ac:	920c      	str	r2, [sp, #48]	; 0x30
 80246ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80246b0:	9011      	str	r0, [sp, #68]	; 0x44
 80246b2:	9107      	str	r1, [sp, #28]
 80246b4:	6850      	ldr	r0, [r2, #4]
 80246b6:	6812      	ldr	r2, [r2, #0]
 80246b8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80246bc:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 80246c0:	fb00 1303 	mla	r3, r0, r3, r1
 80246c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80246c8:	eb02 0b03 	add.w	fp, r2, r3
 80246cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246ce:	689b      	ldr	r3, [r3, #8]
 80246d0:	3301      	adds	r3, #1
 80246d2:	f023 0301 	bic.w	r3, r3, #1
 80246d6:	9309      	str	r3, [sp, #36]	; 0x24
 80246d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246da:	f8d3 8000 	ldr.w	r8, [r3]
 80246de:	9b07      	ldr	r3, [sp, #28]
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	dc03      	bgt.n	80246ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80246e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	f340 822b 	ble.w	8024b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80246ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80246f6:	1e48      	subs	r0, r1, #1
 80246f8:	1e57      	subs	r7, r2, #1
 80246fa:	2c00      	cmp	r4, #0
 80246fc:	f340 80d7 	ble.w	80248ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024700:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8024704:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024708:	d406      	bmi.n	8024718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802470a:	4584      	cmp	ip, r0
 802470c:	da04      	bge.n	8024718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802470e:	2b00      	cmp	r3, #0
 8024710:	db02      	blt.n	8024718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8024712:	42bb      	cmp	r3, r7
 8024714:	f2c0 80cc 	blt.w	80248b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024718:	f11c 0c01 	adds.w	ip, ip, #1
 802471c:	f100 80bf 	bmi.w	802489e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024720:	4561      	cmp	r1, ip
 8024722:	f2c0 80bc 	blt.w	802489e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024726:	3301      	adds	r3, #1
 8024728:	f100 80b9 	bmi.w	802489e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802472c:	429a      	cmp	r2, r3
 802472e:	f2c0 80b6 	blt.w	802489e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024732:	46a2      	mov	sl, r4
 8024734:	465f      	mov	r7, fp
 8024736:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802473a:	f1ba 0f00 	cmp.w	sl, #0
 802473e:	f340 80d4 	ble.w	80248ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024742:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8024746:	1430      	asrs	r0, r6, #16
 8024748:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802474c:	9308      	str	r3, [sp, #32]
 802474e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024750:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024754:	142b      	asrs	r3, r5, #16
 8024756:	f100 8124 	bmi.w	80249a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802475a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802475e:	4293      	cmp	r3, r2
 8024760:	f280 811f 	bge.w	80249a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024764:	2800      	cmp	r0, #0
 8024766:	f2c0 811c 	blt.w	80249a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802476a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802476e:	4290      	cmp	r0, r2
 8024770:	f280 8117 	bge.w	80249a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024774:	fb00 3309 	mla	r3, r0, r9, r3
 8024778:	0858      	lsrs	r0, r3, #1
 802477a:	07da      	lsls	r2, r3, #31
 802477c:	9a08      	ldr	r2, [sp, #32]
 802477e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8024782:	bf54      	ite	pl
 8024784:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024788:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802478c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024790:	fa5f fc8c 	uxtb.w	ip, ip
 8024794:	2a00      	cmp	r2, #0
 8024796:	f000 80ed 	beq.w	8024974 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802479a:	1c58      	adds	r0, r3, #1
 802479c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80247a0:	07c0      	lsls	r0, r0, #31
 80247a2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80247a6:	bf54      	ite	pl
 80247a8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80247ac:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80247b0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80247b4:	fa5f fe8e 	uxtb.w	lr, lr
 80247b8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80247bc:	b1c9      	cbz	r1, 80247f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80247be:	444b      	add	r3, r9
 80247c0:	0858      	lsrs	r0, r3, #1
 80247c2:	07da      	lsls	r2, r3, #31
 80247c4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80247c8:	bf54      	ite	pl
 80247ca:	f000 000f 	andpl.w	r0, r0, #15
 80247ce:	1100      	asrmi	r0, r0, #4
 80247d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80247d4:	b2c0      	uxtb	r0, r0
 80247d6:	900a      	str	r0, [sp, #40]	; 0x28
 80247d8:	1c58      	adds	r0, r3, #1
 80247da:	0843      	lsrs	r3, r0, #1
 80247dc:	07c2      	lsls	r2, r0, #31
 80247de:	f818 3003 	ldrb.w	r3, [r8, r3]
 80247e2:	bf54      	ite	pl
 80247e4:	f003 030f 	andpl.w	r3, r3, #15
 80247e8:	111b      	asrmi	r3, r3, #4
 80247ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80247ee:	b2db      	uxtb	r3, r3
 80247f0:	930e      	str	r3, [sp, #56]	; 0x38
 80247f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80247f6:	b289      	uxth	r1, r1
 80247f8:	fb02 f301 	mul.w	r3, r2, r1
 80247fc:	0112      	lsls	r2, r2, #4
 80247fe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024802:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024806:	1ad2      	subs	r2, r2, r3
 8024808:	b289      	uxth	r1, r1
 802480a:	b292      	uxth	r2, r2
 802480c:	1a40      	subs	r0, r0, r1
 802480e:	fa1f fe80 	uxth.w	lr, r0
 8024812:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024814:	4342      	muls	r2, r0
 8024816:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802481a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802481c:	fb01 c102 	mla	r1, r1, r2, ip
 8024820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024822:	fb03 1302 	mla	r3, r3, r2, r1
 8024826:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802482a:	b383      	cbz	r3, 802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802482c:	4ac6      	ldr	r2, [pc, #792]	; (8024b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802482e:	2bff      	cmp	r3, #255	; 0xff
 8024830:	6812      	ldr	r2, [r2, #0]
 8024832:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8024836:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802483a:	b2d2      	uxtb	r2, r2
 802483c:	f000 80ac 	beq.w	8024998 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024840:	b299      	uxth	r1, r3
 8024842:	43db      	mvns	r3, r3
 8024844:	f897 c000 	ldrb.w	ip, [r7]
 8024848:	fb12 f201 	smulbb	r2, r2, r1
 802484c:	b2db      	uxtb	r3, r3
 802484e:	fb10 f001 	smulbb	r0, r0, r1
 8024852:	fb0c 2203 	mla	r2, ip, r3, r2
 8024856:	fb1e f101 	smulbb	r1, lr, r1
 802485a:	b292      	uxth	r2, r2
 802485c:	f102 0c01 	add.w	ip, r2, #1
 8024860:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024864:	1212      	asrs	r2, r2, #8
 8024866:	703a      	strb	r2, [r7, #0]
 8024868:	787a      	ldrb	r2, [r7, #1]
 802486a:	fb02 0003 	mla	r0, r2, r3, r0
 802486e:	b280      	uxth	r0, r0
 8024870:	1c42      	adds	r2, r0, #1
 8024872:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024876:	78ba      	ldrb	r2, [r7, #2]
 8024878:	fb02 1303 	mla	r3, r2, r3, r1
 802487c:	1200      	asrs	r0, r0, #8
 802487e:	b29b      	uxth	r3, r3
 8024880:	7078      	strb	r0, [r7, #1]
 8024882:	f103 0e01 	add.w	lr, r3, #1
 8024886:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802488a:	121b      	asrs	r3, r3, #8
 802488c:	70bb      	strb	r3, [r7, #2]
 802488e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024890:	3703      	adds	r7, #3
 8024892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024896:	441d      	add	r5, r3
 8024898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802489a:	441e      	add	r6, r3
 802489c:	e74d      	b.n	802473a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802489e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80248a0:	3c01      	subs	r4, #1
 80248a2:	f10b 0b03 	add.w	fp, fp, #3
 80248a6:	441d      	add	r5, r3
 80248a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80248aa:	441e      	add	r6, r3
 80248ac:	e725      	b.n	80246fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80248ae:	d021      	beq.n	80248f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80248b0:	1e63      	subs	r3, r4, #1
 80248b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80248b4:	fb00 5003 	mla	r0, r0, r3, r5
 80248b8:	1400      	asrs	r0, r0, #16
 80248ba:	f53f af3a 	bmi.w	8024732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80248be:	3901      	subs	r1, #1
 80248c0:	4288      	cmp	r0, r1
 80248c2:	f6bf af36 	bge.w	8024732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80248c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80248c8:	fb01 6303 	mla	r3, r1, r3, r6
 80248cc:	141b      	asrs	r3, r3, #16
 80248ce:	f53f af30 	bmi.w	8024732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80248d2:	3a01      	subs	r2, #1
 80248d4:	4293      	cmp	r3, r2
 80248d6:	f6bf af2c 	bge.w	8024732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80248da:	f10b 0c03 	add.w	ip, fp, #3
 80248de:	46a6      	mov	lr, r4
 80248e0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80248e4:	f1be 0f00 	cmp.w	lr, #0
 80248e8:	dc79      	bgt.n	80249de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80248ea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80248ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80248f2:	44a3      	add	fp, r4
 80248f4:	9b07      	ldr	r3, [sp, #28]
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	f340 8123 	ble.w	8024b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80248fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024900:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024902:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802490a:	eef0 6a62 	vmov.f32	s13, s5
 802490e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024912:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802491a:	ee16 5a90 	vmov	r5, s13
 802491e:	eef0 6a43 	vmov.f32	s13, s6
 8024922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024926:	ee16 6a90 	vmov	r6, s13
 802492a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802492e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024932:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802493a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802493e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024942:	ee12 2a90 	vmov	r2, s5
 8024946:	eef0 2a47 	vmov.f32	s5, s14
 802494a:	fb92 f3f3 	sdiv	r3, r2, r3
 802494e:	ee13 2a10 	vmov	r2, s6
 8024952:	931f      	str	r3, [sp, #124]	; 0x7c
 8024954:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024956:	eeb0 3a67 	vmov.f32	s6, s15
 802495a:	fb92 f3f3 	sdiv	r3, r2, r3
 802495e:	9320      	str	r3, [sp, #128]	; 0x80
 8024960:	9b07      	ldr	r3, [sp, #28]
 8024962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024964:	3b01      	subs	r3, #1
 8024966:	9307      	str	r3, [sp, #28]
 8024968:	bf08      	it	eq
 802496a:	4614      	moveq	r4, r2
 802496c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802496e:	bf18      	it	ne
 8024970:	461c      	movne	r4, r3
 8024972:	e6b4      	b.n	80246de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024974:	2900      	cmp	r1, #0
 8024976:	f43f af3c 	beq.w	80247f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802497a:	eb09 0003 	add.w	r0, r9, r3
 802497e:	0843      	lsrs	r3, r0, #1
 8024980:	07c0      	lsls	r0, r0, #31
 8024982:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024986:	bf54      	ite	pl
 8024988:	f003 030f 	andpl.w	r3, r3, #15
 802498c:	111b      	asrmi	r3, r3, #4
 802498e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024992:	b2db      	uxtb	r3, r3
 8024994:	930a      	str	r3, [sp, #40]	; 0x28
 8024996:	e72c      	b.n	80247f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024998:	703a      	strb	r2, [r7, #0]
 802499a:	7078      	strb	r0, [r7, #1]
 802499c:	f887 e002 	strb.w	lr, [r7, #2]
 80249a0:	e775      	b.n	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249a2:	1c5a      	adds	r2, r3, #1
 80249a4:	f53f af73 	bmi.w	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249a8:	4594      	cmp	ip, r2
 80249aa:	f6ff af70 	blt.w	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249ae:	1c42      	adds	r2, r0, #1
 80249b0:	f53f af6d 	bmi.w	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249b4:	4596      	cmp	lr, r2
 80249b6:	f6ff af6a 	blt.w	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249ba:	9302      	str	r3, [sp, #8]
 80249bc:	fa0f f38e 	sxth.w	r3, lr
 80249c0:	9a08      	ldr	r2, [sp, #32]
 80249c2:	9301      	str	r3, [sp, #4]
 80249c4:	fa0f f38c 	sxth.w	r3, ip
 80249c8:	9105      	str	r1, [sp, #20]
 80249ca:	4639      	mov	r1, r7
 80249cc:	9300      	str	r3, [sp, #0]
 80249ce:	464b      	mov	r3, r9
 80249d0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80249d4:	4642      	mov	r2, r8
 80249d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80249d8:	f7ff fd90 	bl	80244fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80249dc:	e757      	b.n	802488e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80249de:	142a      	asrs	r2, r5, #16
 80249e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80249e4:	1433      	asrs	r3, r6, #16
 80249e6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80249ea:	fb09 2303 	mla	r3, r9, r3, r2
 80249ee:	085a      	lsrs	r2, r3, #1
 80249f0:	07d9      	lsls	r1, r3, #31
 80249f2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80249f6:	bf54      	ite	pl
 80249f8:	f002 020f 	andpl.w	r2, r2, #15
 80249fc:	1112      	asrmi	r2, r2, #4
 80249fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024a02:	b2d2      	uxtb	r2, r2
 8024a04:	2800      	cmp	r0, #0
 8024a06:	f000 8085 	beq.w	8024b14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8024a0a:	f103 0a01 	add.w	sl, r3, #1
 8024a0e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024a12:	f01a 0f01 	tst.w	sl, #1
 8024a16:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024a1a:	bf0c      	ite	eq
 8024a1c:	f001 010f 	andeq.w	r1, r1, #15
 8024a20:	1109      	asrne	r1, r1, #4
 8024a22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a26:	b2c9      	uxtb	r1, r1
 8024a28:	910f      	str	r1, [sp, #60]	; 0x3c
 8024a2a:	b1df      	cbz	r7, 8024a64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024a2c:	444b      	add	r3, r9
 8024a2e:	0859      	lsrs	r1, r3, #1
 8024a30:	f013 0f01 	tst.w	r3, #1
 8024a34:	f103 0301 	add.w	r3, r3, #1
 8024a38:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024a3c:	bf0c      	ite	eq
 8024a3e:	f001 010f 	andeq.w	r1, r1, #15
 8024a42:	1109      	asrne	r1, r1, #4
 8024a44:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a48:	b2c9      	uxtb	r1, r1
 8024a4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8024a4c:	0859      	lsrs	r1, r3, #1
 8024a4e:	07db      	lsls	r3, r3, #31
 8024a50:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024a54:	bf54      	ite	pl
 8024a56:	f001 010f 	andpl.w	r1, r1, #15
 8024a5a:	1109      	asrmi	r1, r1, #4
 8024a5c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a60:	b2c9      	uxtb	r1, r1
 8024a62:	9110      	str	r1, [sp, #64]	; 0x40
 8024a64:	b280      	uxth	r0, r0
 8024a66:	b2bf      	uxth	r7, r7
 8024a68:	fb00 f307 	mul.w	r3, r0, r7
 8024a6c:	0100      	lsls	r0, r0, #4
 8024a6e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8024a72:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024a76:	1ac0      	subs	r0, r0, r3
 8024a78:	b2bf      	uxth	r7, r7
 8024a7a:	b280      	uxth	r0, r0
 8024a7c:	1bc9      	subs	r1, r1, r7
 8024a7e:	fa1f fa81 	uxth.w	sl, r1
 8024a82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024a84:	4348      	muls	r0, r1
 8024a86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024a88:	fb02 020a 	mla	r2, r2, sl, r0
 8024a8c:	fb07 2701 	mla	r7, r7, r1, r2
 8024a90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024a92:	fb03 7302 	mla	r3, r3, r2, r7
 8024a96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a9a:	b393      	cbz	r3, 8024b02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024a9c:	4a2a      	ldr	r2, [pc, #168]	; (8024b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024a9e:	2bff      	cmp	r3, #255	; 0xff
 8024aa0:	6811      	ldr	r1, [r2, #0]
 8024aa2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024aa6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024aaa:	b2c9      	uxtb	r1, r1
 8024aac:	d042      	beq.n	8024b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8024aae:	b298      	uxth	r0, r3
 8024ab0:	43db      	mvns	r3, r3
 8024ab2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024ab6:	fb11 f100 	smulbb	r1, r1, r0
 8024aba:	b2db      	uxtb	r3, r3
 8024abc:	fb17 f700 	smulbb	r7, r7, r0
 8024ac0:	fb02 1103 	mla	r1, r2, r3, r1
 8024ac4:	fb1a f000 	smulbb	r0, sl, r0
 8024ac8:	b289      	uxth	r1, r1
 8024aca:	1c4a      	adds	r2, r1, #1
 8024acc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024ad0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024ad4:	fb02 7703 	mla	r7, r2, r3, r7
 8024ad8:	1209      	asrs	r1, r1, #8
 8024ada:	b2bf      	uxth	r7, r7
 8024adc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024ae0:	1c7a      	adds	r2, r7, #1
 8024ae2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024ae6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024aea:	fb02 0303 	mla	r3, r2, r3, r0
 8024aee:	123f      	asrs	r7, r7, #8
 8024af0:	b29b      	uxth	r3, r3
 8024af2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024af6:	1c5a      	adds	r2, r3, #1
 8024af8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024afc:	121b      	asrs	r3, r3, #8
 8024afe:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8024b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024b04:	f10c 0c03 	add.w	ip, ip, #3
 8024b08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024b0c:	441d      	add	r5, r3
 8024b0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024b10:	441e      	add	r6, r3
 8024b12:	e6e7      	b.n	80248e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024b14:	2f00      	cmp	r7, #0
 8024b16:	d0a5      	beq.n	8024a64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024b18:	444b      	add	r3, r9
 8024b1a:	0859      	lsrs	r1, r3, #1
 8024b1c:	07db      	lsls	r3, r3, #31
 8024b1e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024b22:	bf54      	ite	pl
 8024b24:	f001 010f 	andpl.w	r1, r1, #15
 8024b28:	1109      	asrmi	r1, r1, #4
 8024b2a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b2e:	b2c9      	uxtb	r1, r1
 8024b30:	910b      	str	r1, [sp, #44]	; 0x2c
 8024b32:	e797      	b.n	8024a64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024b34:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024b38:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024b3c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8024b40:	e7df      	b.n	8024b02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024b42:	b013      	add	sp, #76	; 0x4c
 8024b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b48:	24006d84 	.word	0x24006d84

08024b4c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8024b4c:	b530      	push	{r4, r5, lr}
 8024b4e:	b29d      	uxth	r5, r3
 8024b50:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8024b54:	780c      	ldrb	r4, [r1, #0]
 8024b56:	b298      	uxth	r0, r3
 8024b58:	7813      	ldrb	r3, [r2, #0]
 8024b5a:	fb14 f405 	smulbb	r4, r4, r5
 8024b5e:	fb13 f300 	smulbb	r3, r3, r0
 8024b62:	441c      	add	r4, r3
 8024b64:	b2a4      	uxth	r4, r4
 8024b66:	1c63      	adds	r3, r4, #1
 8024b68:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024b6c:	7853      	ldrb	r3, [r2, #1]
 8024b6e:	fb13 f300 	smulbb	r3, r3, r0
 8024b72:	1224      	asrs	r4, r4, #8
 8024b74:	7014      	strb	r4, [r2, #0]
 8024b76:	784c      	ldrb	r4, [r1, #1]
 8024b78:	fb14 f405 	smulbb	r4, r4, r5
 8024b7c:	441c      	add	r4, r3
 8024b7e:	b2a4      	uxth	r4, r4
 8024b80:	1c63      	adds	r3, r4, #1
 8024b82:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024b86:	1224      	asrs	r4, r4, #8
 8024b88:	7054      	strb	r4, [r2, #1]
 8024b8a:	788b      	ldrb	r3, [r1, #2]
 8024b8c:	7891      	ldrb	r1, [r2, #2]
 8024b8e:	fb13 f305 	smulbb	r3, r3, r5
 8024b92:	fb11 f000 	smulbb	r0, r1, r0
 8024b96:	4403      	add	r3, r0
 8024b98:	b29b      	uxth	r3, r3
 8024b9a:	1c59      	adds	r1, r3, #1
 8024b9c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024ba0:	121b      	asrs	r3, r3, #8
 8024ba2:	7093      	strb	r3, [r2, #2]
 8024ba4:	bd30      	pop	{r4, r5, pc}
	...

08024ba8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8024ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bac:	461c      	mov	r4, r3
 8024bae:	b08b      	sub	sp, #44	; 0x2c
 8024bb0:	460e      	mov	r6, r1
 8024bb2:	4615      	mov	r5, r2
 8024bb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024bb6:	4682      	mov	sl, r0
 8024bb8:	6861      	ldr	r1, [r4, #4]
 8024bba:	aa06      	add	r2, sp, #24
 8024bbc:	6820      	ldr	r0, [r4, #0]
 8024bbe:	2702      	movs	r7, #2
 8024bc0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 8024bc4:	3504      	adds	r5, #4
 8024bc6:	c203      	stmia	r2!, {r0, r1}
 8024bc8:	6818      	ldr	r0, [r3, #0]
 8024bca:	aa08      	add	r2, sp, #32
 8024bcc:	6859      	ldr	r1, [r3, #4]
 8024bce:	c203      	stmia	r2!, {r0, r1}
 8024bd0:	a806      	add	r0, sp, #24
 8024bd2:	f7f4 f941 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024bd6:	4621      	mov	r1, r4
 8024bd8:	a808      	add	r0, sp, #32
 8024bda:	f7f4 f965 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024bde:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024be2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 8024be6:	f002 0301 	and.w	r3, r2, #1
 8024bea:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8024bee:	9302      	str	r3, [sp, #8]
 8024bf0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024bf4:	f003 0101 	and.w	r1, r3, #1
 8024bf8:	9101      	str	r1, [sp, #4]
 8024bfa:	9801      	ldr	r0, [sp, #4]
 8024bfc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8024c00:	4403      	add	r3, r0
 8024c02:	fb01 2303 	mla	r3, r1, r3, r2
 8024c06:	fb93 f3f7 	sdiv	r3, r3, r7
 8024c0a:	441e      	add	r6, r3
 8024c0c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024c10:	441a      	add	r2, r3
 8024c12:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8024c16:	4419      	add	r1, r3
 8024c18:	4b70      	ldr	r3, [pc, #448]	; (8024ddc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024c1a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8024c1e:	6818      	ldr	r0, [r3, #0]
 8024c20:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8024c24:	6803      	ldr	r3, [r0, #0]
 8024c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c28:	4798      	blx	r3
 8024c2a:	4a6d      	ldr	r2, [pc, #436]	; (8024de0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8024c2c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8024c30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024c34:	8813      	ldrh	r3, [r2, #0]
 8024c36:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8024c3a:	fb03 1404 	mla	r4, r3, r4, r1
 8024c3e:	4611      	mov	r1, r2
 8024c40:	fb0b f303 	mul.w	r3, fp, r3
 8024c44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024c48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c4c:	4404      	add	r4, r0
 8024c4e:	4423      	add	r3, r4
 8024c50:	d073      	beq.n	8024d3a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8024c52:	9705      	str	r7, [sp, #20]
 8024c54:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024c58:	9b03      	ldr	r3, [sp, #12]
 8024c5a:	429c      	cmp	r4, r3
 8024c5c:	f080 80b5 	bcs.w	8024dca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024c60:	9b02      	ldr	r3, [sp, #8]
 8024c62:	b35b      	cbz	r3, 8024cbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8024c64:	7831      	ldrb	r1, [r6, #0]
 8024c66:	4622      	mov	r2, r4
 8024c68:	1c77      	adds	r7, r6, #1
 8024c6a:	3403      	adds	r4, #3
 8024c6c:	f001 010f 	and.w	r1, r1, #15
 8024c70:	f108 3bff 	add.w	fp, r8, #4294967295
 8024c74:	464b      	mov	r3, r9
 8024c76:	4650      	mov	r0, sl
 8024c78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024c7c:	4429      	add	r1, r5
 8024c7e:	f7ff ff65 	bl	8024b4c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024c82:	f1bb 0f01 	cmp.w	fp, #1
 8024c86:	dd1c      	ble.n	8024cc2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8024c88:	7839      	ldrb	r1, [r7, #0]
 8024c8a:	4622      	mov	r2, r4
 8024c8c:	464b      	mov	r3, r9
 8024c8e:	4650      	mov	r0, sl
 8024c90:	0909      	lsrs	r1, r1, #4
 8024c92:	f1ab 0b02 	sub.w	fp, fp, #2
 8024c96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024c9a:	4429      	add	r1, r5
 8024c9c:	f7ff ff56 	bl	8024b4c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024ca0:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024ca4:	1ce2      	adds	r2, r4, #3
 8024ca6:	464b      	mov	r3, r9
 8024ca8:	f001 010f 	and.w	r1, r1, #15
 8024cac:	4650      	mov	r0, sl
 8024cae:	3406      	adds	r4, #6
 8024cb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024cb4:	4429      	add	r1, r5
 8024cb6:	f7ff ff49 	bl	8024b4c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024cba:	e7e2      	b.n	8024c82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024cbc:	4637      	mov	r7, r6
 8024cbe:	46c3      	mov	fp, r8
 8024cc0:	e7df      	b.n	8024c82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024cc2:	d10a      	bne.n	8024cda <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8024cc4:	7839      	ldrb	r1, [r7, #0]
 8024cc6:	4622      	mov	r2, r4
 8024cc8:	3403      	adds	r4, #3
 8024cca:	464b      	mov	r3, r9
 8024ccc:	0909      	lsrs	r1, r1, #4
 8024cce:	4650      	mov	r0, sl
 8024cd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024cd4:	4429      	add	r1, r5
 8024cd6:	f7ff ff39 	bl	8024b4c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024cda:	9b04      	ldr	r3, [sp, #16]
 8024cdc:	9a01      	ldr	r2, [sp, #4]
 8024cde:	881b      	ldrh	r3, [r3, #0]
 8024ce0:	eba3 0308 	sub.w	r3, r3, r8
 8024ce4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024ce8:	441c      	add	r4, r3
 8024cea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024cee:	4413      	add	r3, r2
 8024cf0:	9a05      	ldr	r2, [sp, #20]
 8024cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8024cf6:	441e      	add	r6, r3
 8024cf8:	e7ae      	b.n	8024c58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8024cfa:	4632      	mov	r2, r6
 8024cfc:	46c4      	mov	ip, r8
 8024cfe:	e037      	b.n	8024d70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024d00:	d10e      	bne.n	8024d20 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8024d02:	7812      	ldrb	r2, [r2, #0]
 8024d04:	3003      	adds	r0, #3
 8024d06:	0912      	lsrs	r2, r2, #4
 8024d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d0c:	18ac      	adds	r4, r5, r2
 8024d0e:	5caa      	ldrb	r2, [r5, r2]
 8024d10:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024d14:	7862      	ldrb	r2, [r4, #1]
 8024d16:	f800 2c02 	strb.w	r2, [r0, #-2]
 8024d1a:	78a2      	ldrb	r2, [r4, #2]
 8024d1c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8024d20:	880c      	ldrh	r4, [r1, #0]
 8024d22:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8024d26:	eba4 0408 	sub.w	r4, r4, r8
 8024d2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024d2e:	4404      	add	r4, r0
 8024d30:	9801      	ldr	r0, [sp, #4]
 8024d32:	4402      	add	r2, r0
 8024d34:	fb92 f2f7 	sdiv	r2, r2, r7
 8024d38:	4416      	add	r6, r2
 8024d3a:	429c      	cmp	r4, r3
 8024d3c:	d245      	bcs.n	8024dca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024d3e:	9a02      	ldr	r2, [sp, #8]
 8024d40:	2a00      	cmp	r2, #0
 8024d42:	d0da      	beq.n	8024cfa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8024d44:	7830      	ldrb	r0, [r6, #0]
 8024d46:	1c72      	adds	r2, r6, #1
 8024d48:	3403      	adds	r4, #3
 8024d4a:	f000 000f 	and.w	r0, r0, #15
 8024d4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d52:	eb05 0c00 	add.w	ip, r5, r0
 8024d56:	5c28      	ldrb	r0, [r5, r0]
 8024d58:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024d5c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024d60:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024d64:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024d68:	f108 3cff 	add.w	ip, r8, #4294967295
 8024d6c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024d70:	f1bc 0f01 	cmp.w	ip, #1
 8024d74:	4620      	mov	r0, r4
 8024d76:	f104 0406 	add.w	r4, r4, #6
 8024d7a:	ddc1      	ble.n	8024d00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8024d7c:	7810      	ldrb	r0, [r2, #0]
 8024d7e:	f1ac 0c02 	sub.w	ip, ip, #2
 8024d82:	0900      	lsrs	r0, r0, #4
 8024d84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d88:	eb05 0e00 	add.w	lr, r5, r0
 8024d8c:	5c28      	ldrb	r0, [r5, r0]
 8024d8e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8024d92:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024d96:	f804 0c05 	strb.w	r0, [r4, #-5]
 8024d9a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024d9e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8024da2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8024da6:	f000 000f 	and.w	r0, r0, #15
 8024daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024dae:	eb05 0e00 	add.w	lr, r5, r0
 8024db2:	5c28      	ldrb	r0, [r5, r0]
 8024db4:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024db8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024dbc:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024dc0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024dc4:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024dc8:	e7d2      	b.n	8024d70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024dca:	4b04      	ldr	r3, [pc, #16]	; (8024ddc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024dcc:	6818      	ldr	r0, [r3, #0]
 8024dce:	6803      	ldr	r3, [r0, #0]
 8024dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dd2:	4798      	blx	r3
 8024dd4:	b00b      	add	sp, #44	; 0x2c
 8024dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dda:	bf00      	nop
 8024ddc:	24006d7c 	.word	0x24006d7c
 8024de0:	24006d76 	.word	0x24006d76

08024de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8024de4:	b530      	push	{r4, r5, lr}
 8024de6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8024dea:	780d      	ldrb	r5, [r1, #0]
 8024dec:	28ff      	cmp	r0, #255	; 0xff
 8024dee:	d107      	bne.n	8024e00 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024df0:	2bff      	cmp	r3, #255	; 0xff
 8024df2:	d105      	bne.n	8024e00 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024df4:	7015      	strb	r5, [r2, #0]
 8024df6:	784b      	ldrb	r3, [r1, #1]
 8024df8:	7053      	strb	r3, [r2, #1]
 8024dfa:	788b      	ldrb	r3, [r1, #2]
 8024dfc:	7093      	strb	r3, [r2, #2]
 8024dfe:	bd30      	pop	{r4, r5, pc}
 8024e00:	fb10 f003 	smulbb	r0, r0, r3
 8024e04:	b283      	uxth	r3, r0
 8024e06:	1c58      	adds	r0, r3, #1
 8024e08:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024e0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024e10:	b284      	uxth	r4, r0
 8024e12:	43c0      	mvns	r0, r0
 8024e14:	fb15 f504 	smulbb	r5, r5, r4
 8024e18:	b2c3      	uxtb	r3, r0
 8024e1a:	7810      	ldrb	r0, [r2, #0]
 8024e1c:	fb00 5003 	mla	r0, r0, r3, r5
 8024e20:	b280      	uxth	r0, r0
 8024e22:	1c45      	adds	r5, r0, #1
 8024e24:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024e28:	7855      	ldrb	r5, [r2, #1]
 8024e2a:	fb15 f503 	smulbb	r5, r5, r3
 8024e2e:	1200      	asrs	r0, r0, #8
 8024e30:	7010      	strb	r0, [r2, #0]
 8024e32:	7848      	ldrb	r0, [r1, #1]
 8024e34:	fb00 5004 	mla	r0, r0, r4, r5
 8024e38:	b280      	uxth	r0, r0
 8024e3a:	1c45      	adds	r5, r0, #1
 8024e3c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024e40:	1200      	asrs	r0, r0, #8
 8024e42:	7050      	strb	r0, [r2, #1]
 8024e44:	7888      	ldrb	r0, [r1, #2]
 8024e46:	7891      	ldrb	r1, [r2, #2]
 8024e48:	fb11 f303 	smulbb	r3, r1, r3
 8024e4c:	fb00 3304 	mla	r3, r0, r4, r3
 8024e50:	b29b      	uxth	r3, r3
 8024e52:	1c59      	adds	r1, r3, #1
 8024e54:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024e58:	121b      	asrs	r3, r3, #8
 8024e5a:	e7cf      	b.n	8024dfc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08024e5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8024e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e60:	461d      	mov	r5, r3
 8024e62:	b08f      	sub	sp, #60	; 0x3c
 8024e64:	460c      	mov	r4, r1
 8024e66:	4616      	mov	r6, r2
 8024e68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024e6a:	4680      	mov	r8, r0
 8024e6c:	6869      	ldr	r1, [r5, #4]
 8024e6e:	aa0a      	add	r2, sp, #40	; 0x28
 8024e70:	6828      	ldr	r0, [r5, #0]
 8024e72:	3604      	adds	r6, #4
 8024e74:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 8024e78:	4f57      	ldr	r7, [pc, #348]	; (8024fd8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8024e7a:	c203      	stmia	r2!, {r0, r1}
 8024e7c:	6818      	ldr	r0, [r3, #0]
 8024e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8024e80:	6859      	ldr	r1, [r3, #4]
 8024e82:	c203      	stmia	r2!, {r0, r1}
 8024e84:	a80a      	add	r0, sp, #40	; 0x28
 8024e86:	f7f3 ffe7 	bl	8018e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024e8a:	4629      	mov	r1, r5
 8024e8c:	a80c      	add	r0, sp, #48	; 0x30
 8024e8e:	2502      	movs	r5, #2
 8024e90:	f7f4 f80a 	bl	8018ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024e94:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8024e98:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 8024e9c:	f002 0301 	and.w	r3, r2, #1
 8024ea0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8024ea4:	9304      	str	r3, [sp, #16]
 8024ea6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024eaa:	f003 0101 	and.w	r1, r3, #1
 8024eae:	9103      	str	r1, [sp, #12]
 8024eb0:	9803      	ldr	r0, [sp, #12]
 8024eb2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8024eb6:	4403      	add	r3, r0
 8024eb8:	6838      	ldr	r0, [r7, #0]
 8024eba:	fb01 2303 	mla	r3, r1, r3, r2
 8024ebe:	fb93 f3f5 	sdiv	r3, r3, r5
 8024ec2:	18e5      	adds	r5, r4, r3
 8024ec4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8024ec8:	441a      	add	r2, r3
 8024eca:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024ece:	4419      	add	r1, r3
 8024ed0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8024ed4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8024ed8:	6803      	ldr	r3, [r0, #0]
 8024eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024edc:	4798      	blx	r3
 8024ede:	4a3f      	ldr	r2, [pc, #252]	; (8024fdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8024ee0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8024ee4:	8813      	ldrh	r3, [r2, #0]
 8024ee6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8024eea:	9207      	str	r2, [sp, #28]
 8024eec:	fb03 1404 	mla	r4, r3, r4, r1
 8024ef0:	fb0a f303 	mul.w	r3, sl, r3
 8024ef4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024efc:	4404      	add	r4, r0
 8024efe:	18e3      	adds	r3, r4, r3
 8024f00:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8024f04:	9b05      	ldr	r3, [sp, #20]
 8024f06:	429c      	cmp	r4, r3
 8024f08:	d25d      	bcs.n	8024fc6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8024f0a:	9b04      	ldr	r3, [sp, #16]
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d037      	beq.n	8024f80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8024f10:	782b      	ldrb	r3, [r5, #0]
 8024f12:	1c6f      	adds	r7, r5, #1
 8024f14:	f003 030f 	and.w	r3, r3, #15
 8024f18:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f1e:	0e1b      	lsrs	r3, r3, #24
 8024f20:	d006      	beq.n	8024f30 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8024f22:	9300      	str	r3, [sp, #0]
 8024f24:	4622      	mov	r2, r4
 8024f26:	464b      	mov	r3, r9
 8024f28:	a909      	add	r1, sp, #36	; 0x24
 8024f2a:	4640      	mov	r0, r8
 8024f2c:	f7ff ff5a 	bl	8024de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024f30:	3403      	adds	r4, #3
 8024f32:	f10b 3aff 	add.w	sl, fp, #4294967295
 8024f36:	f1ba 0f01 	cmp.w	sl, #1
 8024f3a:	dd24      	ble.n	8024f86 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8024f3c:	783b      	ldrb	r3, [r7, #0]
 8024f3e:	091b      	lsrs	r3, r3, #4
 8024f40:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f44:	9308      	str	r3, [sp, #32]
 8024f46:	0e1b      	lsrs	r3, r3, #24
 8024f48:	d006      	beq.n	8024f58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8024f4a:	9300      	str	r3, [sp, #0]
 8024f4c:	4622      	mov	r2, r4
 8024f4e:	464b      	mov	r3, r9
 8024f50:	a908      	add	r1, sp, #32
 8024f52:	4640      	mov	r0, r8
 8024f54:	f7ff ff46 	bl	8024de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024f58:	f817 3b01 	ldrb.w	r3, [r7], #1
 8024f5c:	f003 030f 	and.w	r3, r3, #15
 8024f60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f64:	9309      	str	r3, [sp, #36]	; 0x24
 8024f66:	0e1b      	lsrs	r3, r3, #24
 8024f68:	d006      	beq.n	8024f78 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8024f6a:	9300      	str	r3, [sp, #0]
 8024f6c:	1ce2      	adds	r2, r4, #3
 8024f6e:	464b      	mov	r3, r9
 8024f70:	a909      	add	r1, sp, #36	; 0x24
 8024f72:	4640      	mov	r0, r8
 8024f74:	f7ff ff36 	bl	8024de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024f78:	3406      	adds	r4, #6
 8024f7a:	f1aa 0a02 	sub.w	sl, sl, #2
 8024f7e:	e7da      	b.n	8024f36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024f80:	462f      	mov	r7, r5
 8024f82:	46da      	mov	sl, fp
 8024f84:	e7d7      	b.n	8024f36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024f86:	d10e      	bne.n	8024fa6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8024f88:	783b      	ldrb	r3, [r7, #0]
 8024f8a:	091b      	lsrs	r3, r3, #4
 8024f8c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f90:	9309      	str	r3, [sp, #36]	; 0x24
 8024f92:	0e1b      	lsrs	r3, r3, #24
 8024f94:	d006      	beq.n	8024fa4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8024f96:	9300      	str	r3, [sp, #0]
 8024f98:	4622      	mov	r2, r4
 8024f9a:	464b      	mov	r3, r9
 8024f9c:	a909      	add	r1, sp, #36	; 0x24
 8024f9e:	4640      	mov	r0, r8
 8024fa0:	f7ff ff20 	bl	8024de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024fa4:	3403      	adds	r4, #3
 8024fa6:	9b07      	ldr	r3, [sp, #28]
 8024fa8:	9a03      	ldr	r2, [sp, #12]
 8024faa:	881b      	ldrh	r3, [r3, #0]
 8024fac:	eba3 030b 	sub.w	r3, r3, fp
 8024fb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024fb4:	441c      	add	r4, r3
 8024fb6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024fba:	4413      	add	r3, r2
 8024fbc:	2202      	movs	r2, #2
 8024fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8024fc2:	441d      	add	r5, r3
 8024fc4:	e79e      	b.n	8024f04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8024fc6:	9b06      	ldr	r3, [sp, #24]
 8024fc8:	6818      	ldr	r0, [r3, #0]
 8024fca:	6803      	ldr	r3, [r0, #0]
 8024fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024fce:	4798      	blx	r3
 8024fd0:	b00f      	add	sp, #60	; 0x3c
 8024fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fd6:	bf00      	nop
 8024fd8:	24006d7c 	.word	0x24006d7c
 8024fdc:	24006d76 	.word	0x24006d76

08024fe0 <CRC_Lock>:
 8024fe0:	4a20      	ldr	r2, [pc, #128]	; (8025064 <CRC_Lock+0x84>)
 8024fe2:	b530      	push	{r4, r5, lr}
 8024fe4:	6813      	ldr	r3, [r2, #0]
 8024fe6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024fea:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024fee:	f023 0301 	bic.w	r3, r3, #1
 8024ff2:	6013      	str	r3, [r2, #0]
 8024ff4:	4b1c      	ldr	r3, [pc, #112]	; (8025068 <CRC_Lock+0x88>)
 8024ff6:	681a      	ldr	r2, [r3, #0]
 8024ff8:	4022      	ands	r2, r4
 8024ffa:	42aa      	cmp	r2, r5
 8024ffc:	d005      	beq.n	802500a <CRC_Lock+0x2a>
 8024ffe:	681b      	ldr	r3, [r3, #0]
 8025000:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025004:	4023      	ands	r3, r4
 8025006:	4293      	cmp	r3, r2
 8025008:	d124      	bne.n	8025054 <CRC_Lock+0x74>
 802500a:	4b18      	ldr	r3, [pc, #96]	; (802506c <CRC_Lock+0x8c>)
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	bb0b      	cbnz	r3, 8025054 <CRC_Lock+0x74>
 8025010:	4b17      	ldr	r3, [pc, #92]	; (8025070 <CRC_Lock+0x90>)
 8025012:	681a      	ldr	r2, [r3, #0]
 8025014:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025018:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802501c:	d00d      	beq.n	802503a <CRC_Lock+0x5a>
 802501e:	681a      	ldr	r2, [r3, #0]
 8025020:	f240 4483 	movw	r4, #1155	; 0x483
 8025024:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025028:	42a2      	cmp	r2, r4
 802502a:	d006      	beq.n	802503a <CRC_Lock+0x5a>
 802502c:	681b      	ldr	r3, [r3, #0]
 802502e:	f240 4285 	movw	r2, #1157	; 0x485
 8025032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025036:	4293      	cmp	r3, r2
 8025038:	d10c      	bne.n	8025054 <CRC_Lock+0x74>
 802503a:	4b0e      	ldr	r3, [pc, #56]	; (8025074 <CRC_Lock+0x94>)
 802503c:	2201      	movs	r2, #1
 802503e:	601a      	str	r2, [r3, #0]
 8025040:	681a      	ldr	r2, [r3, #0]
 8025042:	2a00      	cmp	r2, #0
 8025044:	d1fc      	bne.n	8025040 <CRC_Lock+0x60>
 8025046:	4b0c      	ldr	r3, [pc, #48]	; (8025078 <CRC_Lock+0x98>)
 8025048:	6018      	str	r0, [r3, #0]
 802504a:	6818      	ldr	r0, [r3, #0]
 802504c:	1a43      	subs	r3, r0, r1
 802504e:	4258      	negs	r0, r3
 8025050:	4158      	adcs	r0, r3
 8025052:	bd30      	pop	{r4, r5, pc}
 8025054:	4b09      	ldr	r3, [pc, #36]	; (802507c <CRC_Lock+0x9c>)
 8025056:	2201      	movs	r2, #1
 8025058:	601a      	str	r2, [r3, #0]
 802505a:	681a      	ldr	r2, [r3, #0]
 802505c:	2a00      	cmp	r2, #0
 802505e:	d1fc      	bne.n	802505a <CRC_Lock+0x7a>
 8025060:	4b07      	ldr	r3, [pc, #28]	; (8025080 <CRC_Lock+0xa0>)
 8025062:	e7f1      	b.n	8025048 <CRC_Lock+0x68>
 8025064:	e0002000 	.word	0xe0002000
 8025068:	e000ed00 	.word	0xe000ed00
 802506c:	e0042000 	.word	0xe0042000
 8025070:	5c001000 	.word	0x5c001000
 8025074:	58024c08 	.word	0x58024c08
 8025078:	58024c00 	.word	0x58024c00
 802507c:	40023008 	.word	0x40023008
 8025080:	40023000 	.word	0x40023000

08025084 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025084:	6101      	str	r1, [r0, #16]
 8025086:	4770      	bx	lr

08025088 <_ZN8touchgfx8Gestures4tickEv>:
 8025088:	7b83      	ldrb	r3, [r0, #14]
 802508a:	b14b      	cbz	r3, 80250a0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802508c:	8903      	ldrh	r3, [r0, #8]
 802508e:	3301      	adds	r3, #1
 8025090:	b29b      	uxth	r3, r3
 8025092:	2b07      	cmp	r3, #7
 8025094:	8103      	strh	r3, [r0, #8]
 8025096:	bf81      	itttt	hi
 8025098:	2300      	movhi	r3, #0
 802509a:	8143      	strhhi	r3, [r0, #10]
 802509c:	8183      	strhhi	r3, [r0, #12]
 802509e:	7383      	strbhi	r3, [r0, #14]
 80250a0:	4770      	bx	lr
	...

080250a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80250a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80250a8:	4698      	mov	r8, r3
 80250aa:	8883      	ldrh	r3, [r0, #4]
 80250ac:	4604      	mov	r4, r0
 80250ae:	4617      	mov	r7, r2
 80250b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80250b4:	eba8 0303 	sub.w	r3, r8, r3
 80250b8:	4a19      	ldr	r2, [pc, #100]	; (8025120 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80250ba:	460e      	mov	r6, r1
 80250bc:	b21b      	sxth	r3, r3
 80250be:	88c1      	ldrh	r1, [r0, #6]
 80250c0:	9200      	str	r2, [sp, #0]
 80250c2:	2000      	movs	r0, #0
 80250c4:	2b00      	cmp	r3, #0
 80250c6:	8aa2      	ldrh	r2, [r4, #20]
 80250c8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80250cc:	bfb8      	it	lt
 80250ce:	425b      	neglt	r3, r3
 80250d0:	f88d 0004 	strb.w	r0, [sp, #4]
 80250d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80250d8:	b21b      	sxth	r3, r3
 80250da:	f8ad 800a 	strh.w	r8, [sp, #10]
 80250de:	f8ad 500c 	strh.w	r5, [sp, #12]
 80250e2:	4293      	cmp	r3, r2
 80250e4:	dc07      	bgt.n	80250f6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80250e6:	1a69      	subs	r1, r5, r1
 80250e8:	b209      	sxth	r1, r1
 80250ea:	2900      	cmp	r1, #0
 80250ec:	bfb8      	it	lt
 80250ee:	4249      	neglt	r1, r1
 80250f0:	b209      	sxth	r1, r1
 80250f2:	428a      	cmp	r2, r1
 80250f4:	da10      	bge.n	8025118 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80250f6:	6920      	ldr	r0, [r4, #16]
 80250f8:	4669      	mov	r1, sp
 80250fa:	eba8 0606 	sub.w	r6, r8, r6
 80250fe:	1bef      	subs	r7, r5, r7
 8025100:	6803      	ldr	r3, [r0, #0]
 8025102:	685b      	ldr	r3, [r3, #4]
 8025104:	4798      	blx	r3
 8025106:	2300      	movs	r3, #0
 8025108:	2001      	movs	r0, #1
 802510a:	8166      	strh	r6, [r4, #10]
 802510c:	8123      	strh	r3, [r4, #8]
 802510e:	81a7      	strh	r7, [r4, #12]
 8025110:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025114:	80e5      	strh	r5, [r4, #6]
 8025116:	73a0      	strb	r0, [r4, #14]
 8025118:	b004      	add	sp, #16
 802511a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802511e:	bf00      	nop
 8025120:	08028184 	.word	0x08028184

08025124 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025126:	461e      	mov	r6, r3
 8025128:	1e4b      	subs	r3, r1, #1
 802512a:	b085      	sub	sp, #20
 802512c:	4604      	mov	r4, r0
 802512e:	2b01      	cmp	r3, #1
 8025130:	460d      	mov	r5, r1
 8025132:	4617      	mov	r7, r2
 8025134:	d84b      	bhi.n	80251ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025136:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802513a:	1cd3      	adds	r3, r2, #3
 802513c:	b29b      	uxth	r3, r3
 802513e:	2b06      	cmp	r3, #6
 8025140:	d916      	bls.n	8025170 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025142:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80251e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025146:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802514a:	f8cd c004 	str.w	ip, [sp, #4]
 802514e:	f04f 0c00 	mov.w	ip, #0
 8025152:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025156:	6900      	ldr	r0, [r0, #16]
 8025158:	f8ad 100c 	strh.w	r1, [sp, #12]
 802515c:	a901      	add	r1, sp, #4
 802515e:	f88d c008 	strb.w	ip, [sp, #8]
 8025162:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025166:	f8ad 300e 	strh.w	r3, [sp, #14]
 802516a:	6803      	ldr	r3, [r0, #0]
 802516c:	689b      	ldr	r3, [r3, #8]
 802516e:	4798      	blx	r3
 8025170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025174:	1cd3      	adds	r3, r2, #3
 8025176:	b29b      	uxth	r3, r3
 8025178:	2b06      	cmp	r3, #6
 802517a:	d916      	bls.n	80251aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802517c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80251e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025180:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025184:	f8cd c004 	str.w	ip, [sp, #4]
 8025188:	f04f 0c01 	mov.w	ip, #1
 802518c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025190:	6920      	ldr	r0, [r4, #16]
 8025192:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025196:	a901      	add	r1, sp, #4
 8025198:	f88d c008 	strb.w	ip, [sp, #8]
 802519c:	f8ad 200a 	strh.w	r2, [sp, #10]
 80251a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251a4:	6803      	ldr	r3, [r0, #0]
 80251a6:	689b      	ldr	r3, [r3, #8]
 80251a8:	4798      	blx	r3
 80251aa:	4b0d      	ldr	r3, [pc, #52]	; (80251e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80251ac:	a901      	add	r1, sp, #4
 80251ae:	6920      	ldr	r0, [r4, #16]
 80251b0:	9301      	str	r3, [sp, #4]
 80251b2:	2300      	movs	r3, #0
 80251b4:	f88d 5008 	strb.w	r5, [sp, #8]
 80251b8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80251bc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80251c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251c4:	6803      	ldr	r3, [r0, #0]
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	4798      	blx	r3
 80251ca:	b005      	add	sp, #20
 80251cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251ce:	2900      	cmp	r1, #0
 80251d0:	d1eb      	bne.n	80251aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251d2:	80a2      	strh	r2, [r4, #4]
 80251d4:	80c6      	strh	r6, [r0, #6]
 80251d6:	60a1      	str	r1, [r4, #8]
 80251d8:	81a1      	strh	r1, [r4, #12]
 80251da:	73a1      	strb	r1, [r4, #14]
 80251dc:	e7e5      	b.n	80251aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251de:	bf00      	nop
 80251e0:	08028170 	.word	0x08028170
 80251e4:	08028198 	.word	0x08028198

080251e8 <__aeabi_atexit>:
 80251e8:	460b      	mov	r3, r1
 80251ea:	4601      	mov	r1, r0
 80251ec:	4618      	mov	r0, r3
 80251ee:	f000 b90f 	b.w	8025410 <__cxa_atexit>

080251f2 <_ZdlPvj>:
 80251f2:	f000 b812 	b.w	802521a <_ZdlPv>

080251f6 <__cxa_guard_acquire>:
 80251f6:	6803      	ldr	r3, [r0, #0]
 80251f8:	07db      	lsls	r3, r3, #31
 80251fa:	d406      	bmi.n	802520a <__cxa_guard_acquire+0x14>
 80251fc:	7843      	ldrb	r3, [r0, #1]
 80251fe:	b103      	cbz	r3, 8025202 <__cxa_guard_acquire+0xc>
 8025200:	deff      	udf	#255	; 0xff
 8025202:	2301      	movs	r3, #1
 8025204:	7043      	strb	r3, [r0, #1]
 8025206:	4618      	mov	r0, r3
 8025208:	4770      	bx	lr
 802520a:	2000      	movs	r0, #0
 802520c:	4770      	bx	lr

0802520e <__cxa_guard_release>:
 802520e:	2301      	movs	r3, #1
 8025210:	6003      	str	r3, [r0, #0]
 8025212:	4770      	bx	lr

08025214 <__cxa_pure_virtual>:
 8025214:	b508      	push	{r3, lr}
 8025216:	f000 f80f 	bl	8025238 <_ZSt9terminatev>

0802521a <_ZdlPv>:
 802521a:	f000 b845 	b.w	80252a8 <free>

0802521e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802521e:	b508      	push	{r3, lr}
 8025220:	4780      	blx	r0
 8025222:	f000 f80e 	bl	8025242 <abort>
	...

08025228 <_ZSt13get_terminatev>:
 8025228:	4b02      	ldr	r3, [pc, #8]	; (8025234 <_ZSt13get_terminatev+0xc>)
 802522a:	6818      	ldr	r0, [r3, #0]
 802522c:	f3bf 8f5b 	dmb	ish
 8025230:	4770      	bx	lr
 8025232:	bf00      	nop
 8025234:	240000ac 	.word	0x240000ac

08025238 <_ZSt9terminatev>:
 8025238:	b508      	push	{r3, lr}
 802523a:	f7ff fff5 	bl	8025228 <_ZSt13get_terminatev>
 802523e:	f7ff ffee 	bl	802521e <_ZN10__cxxabiv111__terminateEPFvvE>

08025242 <abort>:
 8025242:	b508      	push	{r3, lr}
 8025244:	2006      	movs	r0, #6
 8025246:	f000 fa39 	bl	80256bc <raise>
 802524a:	2001      	movs	r0, #1
 802524c:	f7dc fa98 	bl	8001780 <_exit>

08025250 <__assert_func>:
 8025250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025252:	4614      	mov	r4, r2
 8025254:	461a      	mov	r2, r3
 8025256:	4b09      	ldr	r3, [pc, #36]	; (802527c <__assert_func+0x2c>)
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	4605      	mov	r5, r0
 802525c:	68d8      	ldr	r0, [r3, #12]
 802525e:	b14c      	cbz	r4, 8025274 <__assert_func+0x24>
 8025260:	4b07      	ldr	r3, [pc, #28]	; (8025280 <__assert_func+0x30>)
 8025262:	9100      	str	r1, [sp, #0]
 8025264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025268:	4906      	ldr	r1, [pc, #24]	; (8025284 <__assert_func+0x34>)
 802526a:	462b      	mov	r3, r5
 802526c:	f000 f982 	bl	8025574 <fiprintf>
 8025270:	f7ff ffe7 	bl	8025242 <abort>
 8025274:	4b04      	ldr	r3, [pc, #16]	; (8025288 <__assert_func+0x38>)
 8025276:	461c      	mov	r4, r3
 8025278:	e7f3      	b.n	8025262 <__assert_func+0x12>
 802527a:	bf00      	nop
 802527c:	24000108 	.word	0x24000108
 8025280:	08028408 	.word	0x08028408
 8025284:	08028415 	.word	0x08028415
 8025288:	08028443 	.word	0x08028443

0802528c <atexit>:
 802528c:	2300      	movs	r3, #0
 802528e:	4601      	mov	r1, r0
 8025290:	461a      	mov	r2, r3
 8025292:	4618      	mov	r0, r3
 8025294:	f000 bac0 	b.w	8025818 <__register_exitproc>

08025298 <malloc>:
 8025298:	4b02      	ldr	r3, [pc, #8]	; (80252a4 <malloc+0xc>)
 802529a:	4601      	mov	r1, r0
 802529c:	6818      	ldr	r0, [r3, #0]
 802529e:	f000 b82b 	b.w	80252f8 <_malloc_r>
 80252a2:	bf00      	nop
 80252a4:	24000108 	.word	0x24000108

080252a8 <free>:
 80252a8:	4b02      	ldr	r3, [pc, #8]	; (80252b4 <free+0xc>)
 80252aa:	4601      	mov	r1, r0
 80252ac:	6818      	ldr	r0, [r3, #0]
 80252ae:	f000 bb11 	b.w	80258d4 <_free_r>
 80252b2:	bf00      	nop
 80252b4:	24000108 	.word	0x24000108

080252b8 <sbrk_aligned>:
 80252b8:	b570      	push	{r4, r5, r6, lr}
 80252ba:	4e0e      	ldr	r6, [pc, #56]	; (80252f4 <sbrk_aligned+0x3c>)
 80252bc:	460c      	mov	r4, r1
 80252be:	6831      	ldr	r1, [r6, #0]
 80252c0:	4605      	mov	r5, r0
 80252c2:	b911      	cbnz	r1, 80252ca <sbrk_aligned+0x12>
 80252c4:	f000 fa4a 	bl	802575c <_sbrk_r>
 80252c8:	6030      	str	r0, [r6, #0]
 80252ca:	4621      	mov	r1, r4
 80252cc:	4628      	mov	r0, r5
 80252ce:	f000 fa45 	bl	802575c <_sbrk_r>
 80252d2:	1c43      	adds	r3, r0, #1
 80252d4:	d00a      	beq.n	80252ec <sbrk_aligned+0x34>
 80252d6:	1cc4      	adds	r4, r0, #3
 80252d8:	f024 0403 	bic.w	r4, r4, #3
 80252dc:	42a0      	cmp	r0, r4
 80252de:	d007      	beq.n	80252f0 <sbrk_aligned+0x38>
 80252e0:	1a21      	subs	r1, r4, r0
 80252e2:	4628      	mov	r0, r5
 80252e4:	f000 fa3a 	bl	802575c <_sbrk_r>
 80252e8:	3001      	adds	r0, #1
 80252ea:	d101      	bne.n	80252f0 <sbrk_aligned+0x38>
 80252ec:	f04f 34ff 	mov.w	r4, #4294967295
 80252f0:	4620      	mov	r0, r4
 80252f2:	bd70      	pop	{r4, r5, r6, pc}
 80252f4:	240076ac 	.word	0x240076ac

080252f8 <_malloc_r>:
 80252f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80252fc:	1ccd      	adds	r5, r1, #3
 80252fe:	f025 0503 	bic.w	r5, r5, #3
 8025302:	3508      	adds	r5, #8
 8025304:	2d0c      	cmp	r5, #12
 8025306:	bf38      	it	cc
 8025308:	250c      	movcc	r5, #12
 802530a:	2d00      	cmp	r5, #0
 802530c:	4607      	mov	r7, r0
 802530e:	db01      	blt.n	8025314 <_malloc_r+0x1c>
 8025310:	42a9      	cmp	r1, r5
 8025312:	d905      	bls.n	8025320 <_malloc_r+0x28>
 8025314:	230c      	movs	r3, #12
 8025316:	603b      	str	r3, [r7, #0]
 8025318:	2600      	movs	r6, #0
 802531a:	4630      	mov	r0, r6
 802531c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80253f4 <_malloc_r+0xfc>
 8025324:	f000 f868 	bl	80253f8 <__malloc_lock>
 8025328:	f8d8 3000 	ldr.w	r3, [r8]
 802532c:	461c      	mov	r4, r3
 802532e:	bb5c      	cbnz	r4, 8025388 <_malloc_r+0x90>
 8025330:	4629      	mov	r1, r5
 8025332:	4638      	mov	r0, r7
 8025334:	f7ff ffc0 	bl	80252b8 <sbrk_aligned>
 8025338:	1c43      	adds	r3, r0, #1
 802533a:	4604      	mov	r4, r0
 802533c:	d155      	bne.n	80253ea <_malloc_r+0xf2>
 802533e:	f8d8 4000 	ldr.w	r4, [r8]
 8025342:	4626      	mov	r6, r4
 8025344:	2e00      	cmp	r6, #0
 8025346:	d145      	bne.n	80253d4 <_malloc_r+0xdc>
 8025348:	2c00      	cmp	r4, #0
 802534a:	d048      	beq.n	80253de <_malloc_r+0xe6>
 802534c:	6823      	ldr	r3, [r4, #0]
 802534e:	4631      	mov	r1, r6
 8025350:	4638      	mov	r0, r7
 8025352:	eb04 0903 	add.w	r9, r4, r3
 8025356:	f000 fa01 	bl	802575c <_sbrk_r>
 802535a:	4581      	cmp	r9, r0
 802535c:	d13f      	bne.n	80253de <_malloc_r+0xe6>
 802535e:	6821      	ldr	r1, [r4, #0]
 8025360:	1a6d      	subs	r5, r5, r1
 8025362:	4629      	mov	r1, r5
 8025364:	4638      	mov	r0, r7
 8025366:	f7ff ffa7 	bl	80252b8 <sbrk_aligned>
 802536a:	3001      	adds	r0, #1
 802536c:	d037      	beq.n	80253de <_malloc_r+0xe6>
 802536e:	6823      	ldr	r3, [r4, #0]
 8025370:	442b      	add	r3, r5
 8025372:	6023      	str	r3, [r4, #0]
 8025374:	f8d8 3000 	ldr.w	r3, [r8]
 8025378:	2b00      	cmp	r3, #0
 802537a:	d038      	beq.n	80253ee <_malloc_r+0xf6>
 802537c:	685a      	ldr	r2, [r3, #4]
 802537e:	42a2      	cmp	r2, r4
 8025380:	d12b      	bne.n	80253da <_malloc_r+0xe2>
 8025382:	2200      	movs	r2, #0
 8025384:	605a      	str	r2, [r3, #4]
 8025386:	e00f      	b.n	80253a8 <_malloc_r+0xb0>
 8025388:	6822      	ldr	r2, [r4, #0]
 802538a:	1b52      	subs	r2, r2, r5
 802538c:	d41f      	bmi.n	80253ce <_malloc_r+0xd6>
 802538e:	2a0b      	cmp	r2, #11
 8025390:	d917      	bls.n	80253c2 <_malloc_r+0xca>
 8025392:	1961      	adds	r1, r4, r5
 8025394:	42a3      	cmp	r3, r4
 8025396:	6025      	str	r5, [r4, #0]
 8025398:	bf18      	it	ne
 802539a:	6059      	strne	r1, [r3, #4]
 802539c:	6863      	ldr	r3, [r4, #4]
 802539e:	bf08      	it	eq
 80253a0:	f8c8 1000 	streq.w	r1, [r8]
 80253a4:	5162      	str	r2, [r4, r5]
 80253a6:	604b      	str	r3, [r1, #4]
 80253a8:	4638      	mov	r0, r7
 80253aa:	f104 060b 	add.w	r6, r4, #11
 80253ae:	f000 f829 	bl	8025404 <__malloc_unlock>
 80253b2:	f026 0607 	bic.w	r6, r6, #7
 80253b6:	1d23      	adds	r3, r4, #4
 80253b8:	1af2      	subs	r2, r6, r3
 80253ba:	d0ae      	beq.n	802531a <_malloc_r+0x22>
 80253bc:	1b9b      	subs	r3, r3, r6
 80253be:	50a3      	str	r3, [r4, r2]
 80253c0:	e7ab      	b.n	802531a <_malloc_r+0x22>
 80253c2:	42a3      	cmp	r3, r4
 80253c4:	6862      	ldr	r2, [r4, #4]
 80253c6:	d1dd      	bne.n	8025384 <_malloc_r+0x8c>
 80253c8:	f8c8 2000 	str.w	r2, [r8]
 80253cc:	e7ec      	b.n	80253a8 <_malloc_r+0xb0>
 80253ce:	4623      	mov	r3, r4
 80253d0:	6864      	ldr	r4, [r4, #4]
 80253d2:	e7ac      	b.n	802532e <_malloc_r+0x36>
 80253d4:	4634      	mov	r4, r6
 80253d6:	6876      	ldr	r6, [r6, #4]
 80253d8:	e7b4      	b.n	8025344 <_malloc_r+0x4c>
 80253da:	4613      	mov	r3, r2
 80253dc:	e7cc      	b.n	8025378 <_malloc_r+0x80>
 80253de:	230c      	movs	r3, #12
 80253e0:	603b      	str	r3, [r7, #0]
 80253e2:	4638      	mov	r0, r7
 80253e4:	f000 f80e 	bl	8025404 <__malloc_unlock>
 80253e8:	e797      	b.n	802531a <_malloc_r+0x22>
 80253ea:	6025      	str	r5, [r4, #0]
 80253ec:	e7dc      	b.n	80253a8 <_malloc_r+0xb0>
 80253ee:	605b      	str	r3, [r3, #4]
 80253f0:	deff      	udf	#255	; 0xff
 80253f2:	bf00      	nop
 80253f4:	240076a8 	.word	0x240076a8

080253f8 <__malloc_lock>:
 80253f8:	4801      	ldr	r0, [pc, #4]	; (8025400 <__malloc_lock+0x8>)
 80253fa:	f000 b9fc 	b.w	80257f6 <__retarget_lock_acquire_recursive>
 80253fe:	bf00      	nop
 8025400:	240077f1 	.word	0x240077f1

08025404 <__malloc_unlock>:
 8025404:	4801      	ldr	r0, [pc, #4]	; (802540c <__malloc_unlock+0x8>)
 8025406:	f000 b9f7 	b.w	80257f8 <__retarget_lock_release_recursive>
 802540a:	bf00      	nop
 802540c:	240077f1 	.word	0x240077f1

08025410 <__cxa_atexit>:
 8025410:	b510      	push	{r4, lr}
 8025412:	4c05      	ldr	r4, [pc, #20]	; (8025428 <__cxa_atexit+0x18>)
 8025414:	4613      	mov	r3, r2
 8025416:	b12c      	cbz	r4, 8025424 <__cxa_atexit+0x14>
 8025418:	460a      	mov	r2, r1
 802541a:	4601      	mov	r1, r0
 802541c:	2002      	movs	r0, #2
 802541e:	f000 f9fb 	bl	8025818 <__register_exitproc>
 8025422:	bd10      	pop	{r4, pc}
 8025424:	4620      	mov	r0, r4
 8025426:	e7fc      	b.n	8025422 <__cxa_atexit+0x12>
 8025428:	08025819 	.word	0x08025819

0802542c <std>:
 802542c:	2300      	movs	r3, #0
 802542e:	b510      	push	{r4, lr}
 8025430:	4604      	mov	r4, r0
 8025432:	e9c0 3300 	strd	r3, r3, [r0]
 8025436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802543a:	6083      	str	r3, [r0, #8]
 802543c:	8181      	strh	r1, [r0, #12]
 802543e:	6643      	str	r3, [r0, #100]	; 0x64
 8025440:	81c2      	strh	r2, [r0, #14]
 8025442:	6183      	str	r3, [r0, #24]
 8025444:	4619      	mov	r1, r3
 8025446:	2208      	movs	r2, #8
 8025448:	305c      	adds	r0, #92	; 0x5c
 802544a:	f000 f906 	bl	802565a <memset>
 802544e:	4b0d      	ldr	r3, [pc, #52]	; (8025484 <std+0x58>)
 8025450:	6263      	str	r3, [r4, #36]	; 0x24
 8025452:	4b0d      	ldr	r3, [pc, #52]	; (8025488 <std+0x5c>)
 8025454:	62a3      	str	r3, [r4, #40]	; 0x28
 8025456:	4b0d      	ldr	r3, [pc, #52]	; (802548c <std+0x60>)
 8025458:	62e3      	str	r3, [r4, #44]	; 0x2c
 802545a:	4b0d      	ldr	r3, [pc, #52]	; (8025490 <std+0x64>)
 802545c:	6323      	str	r3, [r4, #48]	; 0x30
 802545e:	4b0d      	ldr	r3, [pc, #52]	; (8025494 <std+0x68>)
 8025460:	6224      	str	r4, [r4, #32]
 8025462:	429c      	cmp	r4, r3
 8025464:	d006      	beq.n	8025474 <std+0x48>
 8025466:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802546a:	4294      	cmp	r4, r2
 802546c:	d002      	beq.n	8025474 <std+0x48>
 802546e:	33d0      	adds	r3, #208	; 0xd0
 8025470:	429c      	cmp	r4, r3
 8025472:	d105      	bne.n	8025480 <std+0x54>
 8025474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802547c:	f000 b9ba 	b.w	80257f4 <__retarget_lock_init_recursive>
 8025480:	bd10      	pop	{r4, pc}
 8025482:	bf00      	nop
 8025484:	080255d5 	.word	0x080255d5
 8025488:	080255f7 	.word	0x080255f7
 802548c:	0802562f 	.word	0x0802562f
 8025490:	08025653 	.word	0x08025653
 8025494:	240076b0 	.word	0x240076b0

08025498 <stdio_exit_handler>:
 8025498:	4a02      	ldr	r2, [pc, #8]	; (80254a4 <stdio_exit_handler+0xc>)
 802549a:	4903      	ldr	r1, [pc, #12]	; (80254a8 <stdio_exit_handler+0x10>)
 802549c:	4803      	ldr	r0, [pc, #12]	; (80254ac <stdio_exit_handler+0x14>)
 802549e:	f000 b87b 	b.w	8025598 <_fwalk_sglue>
 80254a2:	bf00      	nop
 80254a4:	240000b0 	.word	0x240000b0
 80254a8:	08026021 	.word	0x08026021
 80254ac:	240000bc 	.word	0x240000bc

080254b0 <cleanup_stdio>:
 80254b0:	6841      	ldr	r1, [r0, #4]
 80254b2:	4b0c      	ldr	r3, [pc, #48]	; (80254e4 <cleanup_stdio+0x34>)
 80254b4:	4299      	cmp	r1, r3
 80254b6:	b510      	push	{r4, lr}
 80254b8:	4604      	mov	r4, r0
 80254ba:	d001      	beq.n	80254c0 <cleanup_stdio+0x10>
 80254bc:	f000 fdb0 	bl	8026020 <_fflush_r>
 80254c0:	68a1      	ldr	r1, [r4, #8]
 80254c2:	4b09      	ldr	r3, [pc, #36]	; (80254e8 <cleanup_stdio+0x38>)
 80254c4:	4299      	cmp	r1, r3
 80254c6:	d002      	beq.n	80254ce <cleanup_stdio+0x1e>
 80254c8:	4620      	mov	r0, r4
 80254ca:	f000 fda9 	bl	8026020 <_fflush_r>
 80254ce:	68e1      	ldr	r1, [r4, #12]
 80254d0:	4b06      	ldr	r3, [pc, #24]	; (80254ec <cleanup_stdio+0x3c>)
 80254d2:	4299      	cmp	r1, r3
 80254d4:	d004      	beq.n	80254e0 <cleanup_stdio+0x30>
 80254d6:	4620      	mov	r0, r4
 80254d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254dc:	f000 bda0 	b.w	8026020 <_fflush_r>
 80254e0:	bd10      	pop	{r4, pc}
 80254e2:	bf00      	nop
 80254e4:	240076b0 	.word	0x240076b0
 80254e8:	24007718 	.word	0x24007718
 80254ec:	24007780 	.word	0x24007780

080254f0 <global_stdio_init.part.0>:
 80254f0:	b510      	push	{r4, lr}
 80254f2:	4b0b      	ldr	r3, [pc, #44]	; (8025520 <global_stdio_init.part.0+0x30>)
 80254f4:	4c0b      	ldr	r4, [pc, #44]	; (8025524 <global_stdio_init.part.0+0x34>)
 80254f6:	4a0c      	ldr	r2, [pc, #48]	; (8025528 <global_stdio_init.part.0+0x38>)
 80254f8:	601a      	str	r2, [r3, #0]
 80254fa:	4620      	mov	r0, r4
 80254fc:	2200      	movs	r2, #0
 80254fe:	2104      	movs	r1, #4
 8025500:	f7ff ff94 	bl	802542c <std>
 8025504:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025508:	2201      	movs	r2, #1
 802550a:	2109      	movs	r1, #9
 802550c:	f7ff ff8e 	bl	802542c <std>
 8025510:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8025514:	2202      	movs	r2, #2
 8025516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802551a:	2112      	movs	r1, #18
 802551c:	f7ff bf86 	b.w	802542c <std>
 8025520:	240077e8 	.word	0x240077e8
 8025524:	240076b0 	.word	0x240076b0
 8025528:	08025499 	.word	0x08025499

0802552c <__sfp_lock_acquire>:
 802552c:	4801      	ldr	r0, [pc, #4]	; (8025534 <__sfp_lock_acquire+0x8>)
 802552e:	f000 b962 	b.w	80257f6 <__retarget_lock_acquire_recursive>
 8025532:	bf00      	nop
 8025534:	240077f2 	.word	0x240077f2

08025538 <__sfp_lock_release>:
 8025538:	4801      	ldr	r0, [pc, #4]	; (8025540 <__sfp_lock_release+0x8>)
 802553a:	f000 b95d 	b.w	80257f8 <__retarget_lock_release_recursive>
 802553e:	bf00      	nop
 8025540:	240077f2 	.word	0x240077f2

08025544 <__sinit>:
 8025544:	b510      	push	{r4, lr}
 8025546:	4604      	mov	r4, r0
 8025548:	f7ff fff0 	bl	802552c <__sfp_lock_acquire>
 802554c:	6a23      	ldr	r3, [r4, #32]
 802554e:	b11b      	cbz	r3, 8025558 <__sinit+0x14>
 8025550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025554:	f7ff bff0 	b.w	8025538 <__sfp_lock_release>
 8025558:	4b04      	ldr	r3, [pc, #16]	; (802556c <__sinit+0x28>)
 802555a:	6223      	str	r3, [r4, #32]
 802555c:	4b04      	ldr	r3, [pc, #16]	; (8025570 <__sinit+0x2c>)
 802555e:	681b      	ldr	r3, [r3, #0]
 8025560:	2b00      	cmp	r3, #0
 8025562:	d1f5      	bne.n	8025550 <__sinit+0xc>
 8025564:	f7ff ffc4 	bl	80254f0 <global_stdio_init.part.0>
 8025568:	e7f2      	b.n	8025550 <__sinit+0xc>
 802556a:	bf00      	nop
 802556c:	080254b1 	.word	0x080254b1
 8025570:	240077e8 	.word	0x240077e8

08025574 <fiprintf>:
 8025574:	b40e      	push	{r1, r2, r3}
 8025576:	b503      	push	{r0, r1, lr}
 8025578:	4601      	mov	r1, r0
 802557a:	ab03      	add	r3, sp, #12
 802557c:	4805      	ldr	r0, [pc, #20]	; (8025594 <fiprintf+0x20>)
 802557e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025582:	6800      	ldr	r0, [r0, #0]
 8025584:	9301      	str	r3, [sp, #4]
 8025586:	f000 fa1b 	bl	80259c0 <_vfiprintf_r>
 802558a:	b002      	add	sp, #8
 802558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025590:	b003      	add	sp, #12
 8025592:	4770      	bx	lr
 8025594:	24000108 	.word	0x24000108

08025598 <_fwalk_sglue>:
 8025598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802559c:	4607      	mov	r7, r0
 802559e:	4688      	mov	r8, r1
 80255a0:	4614      	mov	r4, r2
 80255a2:	2600      	movs	r6, #0
 80255a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80255a8:	f1b9 0901 	subs.w	r9, r9, #1
 80255ac:	d505      	bpl.n	80255ba <_fwalk_sglue+0x22>
 80255ae:	6824      	ldr	r4, [r4, #0]
 80255b0:	2c00      	cmp	r4, #0
 80255b2:	d1f7      	bne.n	80255a4 <_fwalk_sglue+0xc>
 80255b4:	4630      	mov	r0, r6
 80255b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80255ba:	89ab      	ldrh	r3, [r5, #12]
 80255bc:	2b01      	cmp	r3, #1
 80255be:	d907      	bls.n	80255d0 <_fwalk_sglue+0x38>
 80255c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80255c4:	3301      	adds	r3, #1
 80255c6:	d003      	beq.n	80255d0 <_fwalk_sglue+0x38>
 80255c8:	4629      	mov	r1, r5
 80255ca:	4638      	mov	r0, r7
 80255cc:	47c0      	blx	r8
 80255ce:	4306      	orrs	r6, r0
 80255d0:	3568      	adds	r5, #104	; 0x68
 80255d2:	e7e9      	b.n	80255a8 <_fwalk_sglue+0x10>

080255d4 <__sread>:
 80255d4:	b510      	push	{r4, lr}
 80255d6:	460c      	mov	r4, r1
 80255d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255dc:	f000 f898 	bl	8025710 <_read_r>
 80255e0:	2800      	cmp	r0, #0
 80255e2:	bfab      	itete	ge
 80255e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80255e6:	89a3      	ldrhlt	r3, [r4, #12]
 80255e8:	181b      	addge	r3, r3, r0
 80255ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80255ee:	bfac      	ite	ge
 80255f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80255f2:	81a3      	strhlt	r3, [r4, #12]
 80255f4:	bd10      	pop	{r4, pc}

080255f6 <__swrite>:
 80255f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255fa:	461f      	mov	r7, r3
 80255fc:	898b      	ldrh	r3, [r1, #12]
 80255fe:	05db      	lsls	r3, r3, #23
 8025600:	4605      	mov	r5, r0
 8025602:	460c      	mov	r4, r1
 8025604:	4616      	mov	r6, r2
 8025606:	d505      	bpl.n	8025614 <__swrite+0x1e>
 8025608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802560c:	2302      	movs	r3, #2
 802560e:	2200      	movs	r2, #0
 8025610:	f000 f86c 	bl	80256ec <_lseek_r>
 8025614:	89a3      	ldrh	r3, [r4, #12]
 8025616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802561a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802561e:	81a3      	strh	r3, [r4, #12]
 8025620:	4632      	mov	r2, r6
 8025622:	463b      	mov	r3, r7
 8025624:	4628      	mov	r0, r5
 8025626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802562a:	f000 b8a7 	b.w	802577c <_write_r>

0802562e <__sseek>:
 802562e:	b510      	push	{r4, lr}
 8025630:	460c      	mov	r4, r1
 8025632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025636:	f000 f859 	bl	80256ec <_lseek_r>
 802563a:	1c43      	adds	r3, r0, #1
 802563c:	89a3      	ldrh	r3, [r4, #12]
 802563e:	bf15      	itete	ne
 8025640:	6560      	strne	r0, [r4, #84]	; 0x54
 8025642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802564a:	81a3      	strheq	r3, [r4, #12]
 802564c:	bf18      	it	ne
 802564e:	81a3      	strhne	r3, [r4, #12]
 8025650:	bd10      	pop	{r4, pc}

08025652 <__sclose>:
 8025652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025656:	f000 b839 	b.w	80256cc <_close_r>

0802565a <memset>:
 802565a:	4402      	add	r2, r0
 802565c:	4603      	mov	r3, r0
 802565e:	4293      	cmp	r3, r2
 8025660:	d100      	bne.n	8025664 <memset+0xa>
 8025662:	4770      	bx	lr
 8025664:	f803 1b01 	strb.w	r1, [r3], #1
 8025668:	e7f9      	b.n	802565e <memset+0x4>

0802566a <_raise_r>:
 802566a:	291f      	cmp	r1, #31
 802566c:	b538      	push	{r3, r4, r5, lr}
 802566e:	4604      	mov	r4, r0
 8025670:	460d      	mov	r5, r1
 8025672:	d904      	bls.n	802567e <_raise_r+0x14>
 8025674:	2316      	movs	r3, #22
 8025676:	6003      	str	r3, [r0, #0]
 8025678:	f04f 30ff 	mov.w	r0, #4294967295
 802567c:	bd38      	pop	{r3, r4, r5, pc}
 802567e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8025680:	b112      	cbz	r2, 8025688 <_raise_r+0x1e>
 8025682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025686:	b94b      	cbnz	r3, 802569c <_raise_r+0x32>
 8025688:	4620      	mov	r0, r4
 802568a:	f000 f865 	bl	8025758 <_getpid_r>
 802568e:	462a      	mov	r2, r5
 8025690:	4601      	mov	r1, r0
 8025692:	4620      	mov	r0, r4
 8025694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025698:	f000 b84c 	b.w	8025734 <_kill_r>
 802569c:	2b01      	cmp	r3, #1
 802569e:	d00a      	beq.n	80256b6 <_raise_r+0x4c>
 80256a0:	1c59      	adds	r1, r3, #1
 80256a2:	d103      	bne.n	80256ac <_raise_r+0x42>
 80256a4:	2316      	movs	r3, #22
 80256a6:	6003      	str	r3, [r0, #0]
 80256a8:	2001      	movs	r0, #1
 80256aa:	e7e7      	b.n	802567c <_raise_r+0x12>
 80256ac:	2400      	movs	r4, #0
 80256ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80256b2:	4628      	mov	r0, r5
 80256b4:	4798      	blx	r3
 80256b6:	2000      	movs	r0, #0
 80256b8:	e7e0      	b.n	802567c <_raise_r+0x12>
	...

080256bc <raise>:
 80256bc:	4b02      	ldr	r3, [pc, #8]	; (80256c8 <raise+0xc>)
 80256be:	4601      	mov	r1, r0
 80256c0:	6818      	ldr	r0, [r3, #0]
 80256c2:	f7ff bfd2 	b.w	802566a <_raise_r>
 80256c6:	bf00      	nop
 80256c8:	24000108 	.word	0x24000108

080256cc <_close_r>:
 80256cc:	b538      	push	{r3, r4, r5, lr}
 80256ce:	4d06      	ldr	r5, [pc, #24]	; (80256e8 <_close_r+0x1c>)
 80256d0:	2300      	movs	r3, #0
 80256d2:	4604      	mov	r4, r0
 80256d4:	4608      	mov	r0, r1
 80256d6:	602b      	str	r3, [r5, #0]
 80256d8:	f7dc f895 	bl	8001806 <_close>
 80256dc:	1c43      	adds	r3, r0, #1
 80256de:	d102      	bne.n	80256e6 <_close_r+0x1a>
 80256e0:	682b      	ldr	r3, [r5, #0]
 80256e2:	b103      	cbz	r3, 80256e6 <_close_r+0x1a>
 80256e4:	6023      	str	r3, [r4, #0]
 80256e6:	bd38      	pop	{r3, r4, r5, pc}
 80256e8:	240077ec 	.word	0x240077ec

080256ec <_lseek_r>:
 80256ec:	b538      	push	{r3, r4, r5, lr}
 80256ee:	4d07      	ldr	r5, [pc, #28]	; (802570c <_lseek_r+0x20>)
 80256f0:	4604      	mov	r4, r0
 80256f2:	4608      	mov	r0, r1
 80256f4:	4611      	mov	r1, r2
 80256f6:	2200      	movs	r2, #0
 80256f8:	602a      	str	r2, [r5, #0]
 80256fa:	461a      	mov	r2, r3
 80256fc:	f7dc f8aa 	bl	8001854 <_lseek>
 8025700:	1c43      	adds	r3, r0, #1
 8025702:	d102      	bne.n	802570a <_lseek_r+0x1e>
 8025704:	682b      	ldr	r3, [r5, #0]
 8025706:	b103      	cbz	r3, 802570a <_lseek_r+0x1e>
 8025708:	6023      	str	r3, [r4, #0]
 802570a:	bd38      	pop	{r3, r4, r5, pc}
 802570c:	240077ec 	.word	0x240077ec

08025710 <_read_r>:
 8025710:	b538      	push	{r3, r4, r5, lr}
 8025712:	4d07      	ldr	r5, [pc, #28]	; (8025730 <_read_r+0x20>)
 8025714:	4604      	mov	r4, r0
 8025716:	4608      	mov	r0, r1
 8025718:	4611      	mov	r1, r2
 802571a:	2200      	movs	r2, #0
 802571c:	602a      	str	r2, [r5, #0]
 802571e:	461a      	mov	r2, r3
 8025720:	f7dc f838 	bl	8001794 <_read>
 8025724:	1c43      	adds	r3, r0, #1
 8025726:	d102      	bne.n	802572e <_read_r+0x1e>
 8025728:	682b      	ldr	r3, [r5, #0]
 802572a:	b103      	cbz	r3, 802572e <_read_r+0x1e>
 802572c:	6023      	str	r3, [r4, #0]
 802572e:	bd38      	pop	{r3, r4, r5, pc}
 8025730:	240077ec 	.word	0x240077ec

08025734 <_kill_r>:
 8025734:	b538      	push	{r3, r4, r5, lr}
 8025736:	4d07      	ldr	r5, [pc, #28]	; (8025754 <_kill_r+0x20>)
 8025738:	2300      	movs	r3, #0
 802573a:	4604      	mov	r4, r0
 802573c:	4608      	mov	r0, r1
 802573e:	4611      	mov	r1, r2
 8025740:	602b      	str	r3, [r5, #0]
 8025742:	f7dc f80d 	bl	8001760 <_kill>
 8025746:	1c43      	adds	r3, r0, #1
 8025748:	d102      	bne.n	8025750 <_kill_r+0x1c>
 802574a:	682b      	ldr	r3, [r5, #0]
 802574c:	b103      	cbz	r3, 8025750 <_kill_r+0x1c>
 802574e:	6023      	str	r3, [r4, #0]
 8025750:	bd38      	pop	{r3, r4, r5, pc}
 8025752:	bf00      	nop
 8025754:	240077ec 	.word	0x240077ec

08025758 <_getpid_r>:
 8025758:	f7db bffa 	b.w	8001750 <_getpid>

0802575c <_sbrk_r>:
 802575c:	b538      	push	{r3, r4, r5, lr}
 802575e:	4d06      	ldr	r5, [pc, #24]	; (8025778 <_sbrk_r+0x1c>)
 8025760:	2300      	movs	r3, #0
 8025762:	4604      	mov	r4, r0
 8025764:	4608      	mov	r0, r1
 8025766:	602b      	str	r3, [r5, #0]
 8025768:	f7dc f882 	bl	8001870 <_sbrk>
 802576c:	1c43      	adds	r3, r0, #1
 802576e:	d102      	bne.n	8025776 <_sbrk_r+0x1a>
 8025770:	682b      	ldr	r3, [r5, #0]
 8025772:	b103      	cbz	r3, 8025776 <_sbrk_r+0x1a>
 8025774:	6023      	str	r3, [r4, #0]
 8025776:	bd38      	pop	{r3, r4, r5, pc}
 8025778:	240077ec 	.word	0x240077ec

0802577c <_write_r>:
 802577c:	b538      	push	{r3, r4, r5, lr}
 802577e:	4d07      	ldr	r5, [pc, #28]	; (802579c <_write_r+0x20>)
 8025780:	4604      	mov	r4, r0
 8025782:	4608      	mov	r0, r1
 8025784:	4611      	mov	r1, r2
 8025786:	2200      	movs	r2, #0
 8025788:	602a      	str	r2, [r5, #0]
 802578a:	461a      	mov	r2, r3
 802578c:	f7dc f81f 	bl	80017ce <_write>
 8025790:	1c43      	adds	r3, r0, #1
 8025792:	d102      	bne.n	802579a <_write_r+0x1e>
 8025794:	682b      	ldr	r3, [r5, #0]
 8025796:	b103      	cbz	r3, 802579a <_write_r+0x1e>
 8025798:	6023      	str	r3, [r4, #0]
 802579a:	bd38      	pop	{r3, r4, r5, pc}
 802579c:	240077ec 	.word	0x240077ec

080257a0 <__errno>:
 80257a0:	4b01      	ldr	r3, [pc, #4]	; (80257a8 <__errno+0x8>)
 80257a2:	6818      	ldr	r0, [r3, #0]
 80257a4:	4770      	bx	lr
 80257a6:	bf00      	nop
 80257a8:	24000108 	.word	0x24000108

080257ac <__libc_init_array>:
 80257ac:	b570      	push	{r4, r5, r6, lr}
 80257ae:	4d0d      	ldr	r5, [pc, #52]	; (80257e4 <__libc_init_array+0x38>)
 80257b0:	4c0d      	ldr	r4, [pc, #52]	; (80257e8 <__libc_init_array+0x3c>)
 80257b2:	1b64      	subs	r4, r4, r5
 80257b4:	10a4      	asrs	r4, r4, #2
 80257b6:	2600      	movs	r6, #0
 80257b8:	42a6      	cmp	r6, r4
 80257ba:	d109      	bne.n	80257d0 <__libc_init_array+0x24>
 80257bc:	4d0b      	ldr	r5, [pc, #44]	; (80257ec <__libc_init_array+0x40>)
 80257be:	4c0c      	ldr	r4, [pc, #48]	; (80257f0 <__libc_init_array+0x44>)
 80257c0:	f000 fd70 	bl	80262a4 <_init>
 80257c4:	1b64      	subs	r4, r4, r5
 80257c6:	10a4      	asrs	r4, r4, #2
 80257c8:	2600      	movs	r6, #0
 80257ca:	42a6      	cmp	r6, r4
 80257cc:	d105      	bne.n	80257da <__libc_init_array+0x2e>
 80257ce:	bd70      	pop	{r4, r5, r6, pc}
 80257d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80257d4:	4798      	blx	r3
 80257d6:	3601      	adds	r6, #1
 80257d8:	e7ee      	b.n	80257b8 <__libc_init_array+0xc>
 80257da:	f855 3b04 	ldr.w	r3, [r5], #4
 80257de:	4798      	blx	r3
 80257e0:	3601      	adds	r6, #1
 80257e2:	e7f2      	b.n	80257ca <__libc_init_array+0x1e>
 80257e4:	080284d0 	.word	0x080284d0
 80257e8:	080284d0 	.word	0x080284d0
 80257ec:	080284d0 	.word	0x080284d0
 80257f0:	080284e4 	.word	0x080284e4

080257f4 <__retarget_lock_init_recursive>:
 80257f4:	4770      	bx	lr

080257f6 <__retarget_lock_acquire_recursive>:
 80257f6:	4770      	bx	lr

080257f8 <__retarget_lock_release_recursive>:
 80257f8:	4770      	bx	lr

080257fa <memcpy>:
 80257fa:	440a      	add	r2, r1
 80257fc:	4291      	cmp	r1, r2
 80257fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8025802:	d100      	bne.n	8025806 <memcpy+0xc>
 8025804:	4770      	bx	lr
 8025806:	b510      	push	{r4, lr}
 8025808:	f811 4b01 	ldrb.w	r4, [r1], #1
 802580c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025810:	4291      	cmp	r1, r2
 8025812:	d1f9      	bne.n	8025808 <memcpy+0xe>
 8025814:	bd10      	pop	{r4, pc}
	...

08025818 <__register_exitproc>:
 8025818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802581c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80258d0 <__register_exitproc+0xb8>
 8025820:	4606      	mov	r6, r0
 8025822:	f8d8 0000 	ldr.w	r0, [r8]
 8025826:	461f      	mov	r7, r3
 8025828:	460d      	mov	r5, r1
 802582a:	4691      	mov	r9, r2
 802582c:	f7ff ffe3 	bl	80257f6 <__retarget_lock_acquire_recursive>
 8025830:	4b23      	ldr	r3, [pc, #140]	; (80258c0 <__register_exitproc+0xa8>)
 8025832:	681c      	ldr	r4, [r3, #0]
 8025834:	b934      	cbnz	r4, 8025844 <__register_exitproc+0x2c>
 8025836:	4c23      	ldr	r4, [pc, #140]	; (80258c4 <__register_exitproc+0xac>)
 8025838:	601c      	str	r4, [r3, #0]
 802583a:	4b23      	ldr	r3, [pc, #140]	; (80258c8 <__register_exitproc+0xb0>)
 802583c:	b113      	cbz	r3, 8025844 <__register_exitproc+0x2c>
 802583e:	681b      	ldr	r3, [r3, #0]
 8025840:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025844:	6863      	ldr	r3, [r4, #4]
 8025846:	2b1f      	cmp	r3, #31
 8025848:	dd07      	ble.n	802585a <__register_exitproc+0x42>
 802584a:	f8d8 0000 	ldr.w	r0, [r8]
 802584e:	f7ff ffd3 	bl	80257f8 <__retarget_lock_release_recursive>
 8025852:	f04f 30ff 	mov.w	r0, #4294967295
 8025856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802585a:	b32e      	cbz	r6, 80258a8 <__register_exitproc+0x90>
 802585c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025860:	b968      	cbnz	r0, 802587e <__register_exitproc+0x66>
 8025862:	4b1a      	ldr	r3, [pc, #104]	; (80258cc <__register_exitproc+0xb4>)
 8025864:	2b00      	cmp	r3, #0
 8025866:	d0f0      	beq.n	802584a <__register_exitproc+0x32>
 8025868:	f44f 7084 	mov.w	r0, #264	; 0x108
 802586c:	f7ff fd14 	bl	8025298 <malloc>
 8025870:	2800      	cmp	r0, #0
 8025872:	d0ea      	beq.n	802584a <__register_exitproc+0x32>
 8025874:	2300      	movs	r3, #0
 8025876:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802587a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802587e:	6863      	ldr	r3, [r4, #4]
 8025880:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025884:	2201      	movs	r2, #1
 8025886:	409a      	lsls	r2, r3
 8025888:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802588c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025890:	4313      	orrs	r3, r2
 8025892:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025896:	2e02      	cmp	r6, #2
 8025898:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802589c:	bf02      	ittt	eq
 802589e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80258a2:	4313      	orreq	r3, r2
 80258a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80258a8:	6863      	ldr	r3, [r4, #4]
 80258aa:	f8d8 0000 	ldr.w	r0, [r8]
 80258ae:	1c5a      	adds	r2, r3, #1
 80258b0:	3302      	adds	r3, #2
 80258b2:	6062      	str	r2, [r4, #4]
 80258b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80258b8:	f7ff ff9e 	bl	80257f8 <__retarget_lock_release_recursive>
 80258bc:	2000      	movs	r0, #0
 80258be:	e7ca      	b.n	8025856 <__register_exitproc+0x3e>
 80258c0:	24007880 	.word	0x24007880
 80258c4:	240077f4 	.word	0x240077f4
 80258c8:	08028444 	.word	0x08028444
 80258cc:	08025299 	.word	0x08025299
 80258d0:	2400010c 	.word	0x2400010c

080258d4 <_free_r>:
 80258d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80258d6:	2900      	cmp	r1, #0
 80258d8:	d044      	beq.n	8025964 <_free_r+0x90>
 80258da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80258de:	9001      	str	r0, [sp, #4]
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	f1a1 0404 	sub.w	r4, r1, #4
 80258e6:	bfb8      	it	lt
 80258e8:	18e4      	addlt	r4, r4, r3
 80258ea:	f7ff fd85 	bl	80253f8 <__malloc_lock>
 80258ee:	4a1e      	ldr	r2, [pc, #120]	; (8025968 <_free_r+0x94>)
 80258f0:	9801      	ldr	r0, [sp, #4]
 80258f2:	6813      	ldr	r3, [r2, #0]
 80258f4:	b933      	cbnz	r3, 8025904 <_free_r+0x30>
 80258f6:	6063      	str	r3, [r4, #4]
 80258f8:	6014      	str	r4, [r2, #0]
 80258fa:	b003      	add	sp, #12
 80258fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025900:	f7ff bd80 	b.w	8025404 <__malloc_unlock>
 8025904:	42a3      	cmp	r3, r4
 8025906:	d908      	bls.n	802591a <_free_r+0x46>
 8025908:	6825      	ldr	r5, [r4, #0]
 802590a:	1961      	adds	r1, r4, r5
 802590c:	428b      	cmp	r3, r1
 802590e:	bf01      	itttt	eq
 8025910:	6819      	ldreq	r1, [r3, #0]
 8025912:	685b      	ldreq	r3, [r3, #4]
 8025914:	1949      	addeq	r1, r1, r5
 8025916:	6021      	streq	r1, [r4, #0]
 8025918:	e7ed      	b.n	80258f6 <_free_r+0x22>
 802591a:	461a      	mov	r2, r3
 802591c:	685b      	ldr	r3, [r3, #4]
 802591e:	b10b      	cbz	r3, 8025924 <_free_r+0x50>
 8025920:	42a3      	cmp	r3, r4
 8025922:	d9fa      	bls.n	802591a <_free_r+0x46>
 8025924:	6811      	ldr	r1, [r2, #0]
 8025926:	1855      	adds	r5, r2, r1
 8025928:	42a5      	cmp	r5, r4
 802592a:	d10b      	bne.n	8025944 <_free_r+0x70>
 802592c:	6824      	ldr	r4, [r4, #0]
 802592e:	4421      	add	r1, r4
 8025930:	1854      	adds	r4, r2, r1
 8025932:	42a3      	cmp	r3, r4
 8025934:	6011      	str	r1, [r2, #0]
 8025936:	d1e0      	bne.n	80258fa <_free_r+0x26>
 8025938:	681c      	ldr	r4, [r3, #0]
 802593a:	685b      	ldr	r3, [r3, #4]
 802593c:	6053      	str	r3, [r2, #4]
 802593e:	440c      	add	r4, r1
 8025940:	6014      	str	r4, [r2, #0]
 8025942:	e7da      	b.n	80258fa <_free_r+0x26>
 8025944:	d902      	bls.n	802594c <_free_r+0x78>
 8025946:	230c      	movs	r3, #12
 8025948:	6003      	str	r3, [r0, #0]
 802594a:	e7d6      	b.n	80258fa <_free_r+0x26>
 802594c:	6825      	ldr	r5, [r4, #0]
 802594e:	1961      	adds	r1, r4, r5
 8025950:	428b      	cmp	r3, r1
 8025952:	bf04      	itt	eq
 8025954:	6819      	ldreq	r1, [r3, #0]
 8025956:	685b      	ldreq	r3, [r3, #4]
 8025958:	6063      	str	r3, [r4, #4]
 802595a:	bf04      	itt	eq
 802595c:	1949      	addeq	r1, r1, r5
 802595e:	6021      	streq	r1, [r4, #0]
 8025960:	6054      	str	r4, [r2, #4]
 8025962:	e7ca      	b.n	80258fa <_free_r+0x26>
 8025964:	b003      	add	sp, #12
 8025966:	bd30      	pop	{r4, r5, pc}
 8025968:	240076a8 	.word	0x240076a8

0802596c <__sfputc_r>:
 802596c:	6893      	ldr	r3, [r2, #8]
 802596e:	3b01      	subs	r3, #1
 8025970:	2b00      	cmp	r3, #0
 8025972:	b410      	push	{r4}
 8025974:	6093      	str	r3, [r2, #8]
 8025976:	da08      	bge.n	802598a <__sfputc_r+0x1e>
 8025978:	6994      	ldr	r4, [r2, #24]
 802597a:	42a3      	cmp	r3, r4
 802597c:	db01      	blt.n	8025982 <__sfputc_r+0x16>
 802597e:	290a      	cmp	r1, #10
 8025980:	d103      	bne.n	802598a <__sfputc_r+0x1e>
 8025982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025986:	f000 bb73 	b.w	8026070 <__swbuf_r>
 802598a:	6813      	ldr	r3, [r2, #0]
 802598c:	1c58      	adds	r0, r3, #1
 802598e:	6010      	str	r0, [r2, #0]
 8025990:	7019      	strb	r1, [r3, #0]
 8025992:	4608      	mov	r0, r1
 8025994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025998:	4770      	bx	lr

0802599a <__sfputs_r>:
 802599a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802599c:	4606      	mov	r6, r0
 802599e:	460f      	mov	r7, r1
 80259a0:	4614      	mov	r4, r2
 80259a2:	18d5      	adds	r5, r2, r3
 80259a4:	42ac      	cmp	r4, r5
 80259a6:	d101      	bne.n	80259ac <__sfputs_r+0x12>
 80259a8:	2000      	movs	r0, #0
 80259aa:	e007      	b.n	80259bc <__sfputs_r+0x22>
 80259ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80259b0:	463a      	mov	r2, r7
 80259b2:	4630      	mov	r0, r6
 80259b4:	f7ff ffda 	bl	802596c <__sfputc_r>
 80259b8:	1c43      	adds	r3, r0, #1
 80259ba:	d1f3      	bne.n	80259a4 <__sfputs_r+0xa>
 80259bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080259c0 <_vfiprintf_r>:
 80259c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259c4:	460d      	mov	r5, r1
 80259c6:	b09d      	sub	sp, #116	; 0x74
 80259c8:	4614      	mov	r4, r2
 80259ca:	4698      	mov	r8, r3
 80259cc:	4606      	mov	r6, r0
 80259ce:	b118      	cbz	r0, 80259d8 <_vfiprintf_r+0x18>
 80259d0:	6a03      	ldr	r3, [r0, #32]
 80259d2:	b90b      	cbnz	r3, 80259d8 <_vfiprintf_r+0x18>
 80259d4:	f7ff fdb6 	bl	8025544 <__sinit>
 80259d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80259da:	07d9      	lsls	r1, r3, #31
 80259dc:	d405      	bmi.n	80259ea <_vfiprintf_r+0x2a>
 80259de:	89ab      	ldrh	r3, [r5, #12]
 80259e0:	059a      	lsls	r2, r3, #22
 80259e2:	d402      	bmi.n	80259ea <_vfiprintf_r+0x2a>
 80259e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80259e6:	f7ff ff06 	bl	80257f6 <__retarget_lock_acquire_recursive>
 80259ea:	89ab      	ldrh	r3, [r5, #12]
 80259ec:	071b      	lsls	r3, r3, #28
 80259ee:	d501      	bpl.n	80259f4 <_vfiprintf_r+0x34>
 80259f0:	692b      	ldr	r3, [r5, #16]
 80259f2:	b99b      	cbnz	r3, 8025a1c <_vfiprintf_r+0x5c>
 80259f4:	4629      	mov	r1, r5
 80259f6:	4630      	mov	r0, r6
 80259f8:	f000 fb78 	bl	80260ec <__swsetup_r>
 80259fc:	b170      	cbz	r0, 8025a1c <_vfiprintf_r+0x5c>
 80259fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025a00:	07dc      	lsls	r4, r3, #31
 8025a02:	d504      	bpl.n	8025a0e <_vfiprintf_r+0x4e>
 8025a04:	f04f 30ff 	mov.w	r0, #4294967295
 8025a08:	b01d      	add	sp, #116	; 0x74
 8025a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a0e:	89ab      	ldrh	r3, [r5, #12]
 8025a10:	0598      	lsls	r0, r3, #22
 8025a12:	d4f7      	bmi.n	8025a04 <_vfiprintf_r+0x44>
 8025a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025a16:	f7ff feef 	bl	80257f8 <__retarget_lock_release_recursive>
 8025a1a:	e7f3      	b.n	8025a04 <_vfiprintf_r+0x44>
 8025a1c:	2300      	movs	r3, #0
 8025a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8025a20:	2320      	movs	r3, #32
 8025a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8025a2a:	2330      	movs	r3, #48	; 0x30
 8025a2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8025be0 <_vfiprintf_r+0x220>
 8025a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025a34:	f04f 0901 	mov.w	r9, #1
 8025a38:	4623      	mov	r3, r4
 8025a3a:	469a      	mov	sl, r3
 8025a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025a40:	b10a      	cbz	r2, 8025a46 <_vfiprintf_r+0x86>
 8025a42:	2a25      	cmp	r2, #37	; 0x25
 8025a44:	d1f9      	bne.n	8025a3a <_vfiprintf_r+0x7a>
 8025a46:	ebba 0b04 	subs.w	fp, sl, r4
 8025a4a:	d00b      	beq.n	8025a64 <_vfiprintf_r+0xa4>
 8025a4c:	465b      	mov	r3, fp
 8025a4e:	4622      	mov	r2, r4
 8025a50:	4629      	mov	r1, r5
 8025a52:	4630      	mov	r0, r6
 8025a54:	f7ff ffa1 	bl	802599a <__sfputs_r>
 8025a58:	3001      	adds	r0, #1
 8025a5a:	f000 80a9 	beq.w	8025bb0 <_vfiprintf_r+0x1f0>
 8025a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a60:	445a      	add	r2, fp
 8025a62:	9209      	str	r2, [sp, #36]	; 0x24
 8025a64:	f89a 3000 	ldrb.w	r3, [sl]
 8025a68:	2b00      	cmp	r3, #0
 8025a6a:	f000 80a1 	beq.w	8025bb0 <_vfiprintf_r+0x1f0>
 8025a6e:	2300      	movs	r3, #0
 8025a70:	f04f 32ff 	mov.w	r2, #4294967295
 8025a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025a78:	f10a 0a01 	add.w	sl, sl, #1
 8025a7c:	9304      	str	r3, [sp, #16]
 8025a7e:	9307      	str	r3, [sp, #28]
 8025a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025a84:	931a      	str	r3, [sp, #104]	; 0x68
 8025a86:	4654      	mov	r4, sl
 8025a88:	2205      	movs	r2, #5
 8025a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a8e:	4854      	ldr	r0, [pc, #336]	; (8025be0 <_vfiprintf_r+0x220>)
 8025a90:	f7da fc2e 	bl	80002f0 <memchr>
 8025a94:	9a04      	ldr	r2, [sp, #16]
 8025a96:	b9d8      	cbnz	r0, 8025ad0 <_vfiprintf_r+0x110>
 8025a98:	06d1      	lsls	r1, r2, #27
 8025a9a:	bf44      	itt	mi
 8025a9c:	2320      	movmi	r3, #32
 8025a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025aa2:	0713      	lsls	r3, r2, #28
 8025aa4:	bf44      	itt	mi
 8025aa6:	232b      	movmi	r3, #43	; 0x2b
 8025aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025aac:	f89a 3000 	ldrb.w	r3, [sl]
 8025ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8025ab2:	d015      	beq.n	8025ae0 <_vfiprintf_r+0x120>
 8025ab4:	9a07      	ldr	r2, [sp, #28]
 8025ab6:	4654      	mov	r4, sl
 8025ab8:	2000      	movs	r0, #0
 8025aba:	f04f 0c0a 	mov.w	ip, #10
 8025abe:	4621      	mov	r1, r4
 8025ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025ac4:	3b30      	subs	r3, #48	; 0x30
 8025ac6:	2b09      	cmp	r3, #9
 8025ac8:	d94d      	bls.n	8025b66 <_vfiprintf_r+0x1a6>
 8025aca:	b1b0      	cbz	r0, 8025afa <_vfiprintf_r+0x13a>
 8025acc:	9207      	str	r2, [sp, #28]
 8025ace:	e014      	b.n	8025afa <_vfiprintf_r+0x13a>
 8025ad0:	eba0 0308 	sub.w	r3, r0, r8
 8025ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8025ad8:	4313      	orrs	r3, r2
 8025ada:	9304      	str	r3, [sp, #16]
 8025adc:	46a2      	mov	sl, r4
 8025ade:	e7d2      	b.n	8025a86 <_vfiprintf_r+0xc6>
 8025ae0:	9b03      	ldr	r3, [sp, #12]
 8025ae2:	1d19      	adds	r1, r3, #4
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	9103      	str	r1, [sp, #12]
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	bfbb      	ittet	lt
 8025aec:	425b      	neglt	r3, r3
 8025aee:	f042 0202 	orrlt.w	r2, r2, #2
 8025af2:	9307      	strge	r3, [sp, #28]
 8025af4:	9307      	strlt	r3, [sp, #28]
 8025af6:	bfb8      	it	lt
 8025af8:	9204      	strlt	r2, [sp, #16]
 8025afa:	7823      	ldrb	r3, [r4, #0]
 8025afc:	2b2e      	cmp	r3, #46	; 0x2e
 8025afe:	d10c      	bne.n	8025b1a <_vfiprintf_r+0x15a>
 8025b00:	7863      	ldrb	r3, [r4, #1]
 8025b02:	2b2a      	cmp	r3, #42	; 0x2a
 8025b04:	d134      	bne.n	8025b70 <_vfiprintf_r+0x1b0>
 8025b06:	9b03      	ldr	r3, [sp, #12]
 8025b08:	1d1a      	adds	r2, r3, #4
 8025b0a:	681b      	ldr	r3, [r3, #0]
 8025b0c:	9203      	str	r2, [sp, #12]
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	bfb8      	it	lt
 8025b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8025b16:	3402      	adds	r4, #2
 8025b18:	9305      	str	r3, [sp, #20]
 8025b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8025bf0 <_vfiprintf_r+0x230>
 8025b1e:	7821      	ldrb	r1, [r4, #0]
 8025b20:	2203      	movs	r2, #3
 8025b22:	4650      	mov	r0, sl
 8025b24:	f7da fbe4 	bl	80002f0 <memchr>
 8025b28:	b138      	cbz	r0, 8025b3a <_vfiprintf_r+0x17a>
 8025b2a:	9b04      	ldr	r3, [sp, #16]
 8025b2c:	eba0 000a 	sub.w	r0, r0, sl
 8025b30:	2240      	movs	r2, #64	; 0x40
 8025b32:	4082      	lsls	r2, r0
 8025b34:	4313      	orrs	r3, r2
 8025b36:	3401      	adds	r4, #1
 8025b38:	9304      	str	r3, [sp, #16]
 8025b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b3e:	4829      	ldr	r0, [pc, #164]	; (8025be4 <_vfiprintf_r+0x224>)
 8025b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025b44:	2206      	movs	r2, #6
 8025b46:	f7da fbd3 	bl	80002f0 <memchr>
 8025b4a:	2800      	cmp	r0, #0
 8025b4c:	d03f      	beq.n	8025bce <_vfiprintf_r+0x20e>
 8025b4e:	4b26      	ldr	r3, [pc, #152]	; (8025be8 <_vfiprintf_r+0x228>)
 8025b50:	bb1b      	cbnz	r3, 8025b9a <_vfiprintf_r+0x1da>
 8025b52:	9b03      	ldr	r3, [sp, #12]
 8025b54:	3307      	adds	r3, #7
 8025b56:	f023 0307 	bic.w	r3, r3, #7
 8025b5a:	3308      	adds	r3, #8
 8025b5c:	9303      	str	r3, [sp, #12]
 8025b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b60:	443b      	add	r3, r7
 8025b62:	9309      	str	r3, [sp, #36]	; 0x24
 8025b64:	e768      	b.n	8025a38 <_vfiprintf_r+0x78>
 8025b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8025b6a:	460c      	mov	r4, r1
 8025b6c:	2001      	movs	r0, #1
 8025b6e:	e7a6      	b.n	8025abe <_vfiprintf_r+0xfe>
 8025b70:	2300      	movs	r3, #0
 8025b72:	3401      	adds	r4, #1
 8025b74:	9305      	str	r3, [sp, #20]
 8025b76:	4619      	mov	r1, r3
 8025b78:	f04f 0c0a 	mov.w	ip, #10
 8025b7c:	4620      	mov	r0, r4
 8025b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025b82:	3a30      	subs	r2, #48	; 0x30
 8025b84:	2a09      	cmp	r2, #9
 8025b86:	d903      	bls.n	8025b90 <_vfiprintf_r+0x1d0>
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	d0c6      	beq.n	8025b1a <_vfiprintf_r+0x15a>
 8025b8c:	9105      	str	r1, [sp, #20]
 8025b8e:	e7c4      	b.n	8025b1a <_vfiprintf_r+0x15a>
 8025b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8025b94:	4604      	mov	r4, r0
 8025b96:	2301      	movs	r3, #1
 8025b98:	e7f0      	b.n	8025b7c <_vfiprintf_r+0x1bc>
 8025b9a:	ab03      	add	r3, sp, #12
 8025b9c:	9300      	str	r3, [sp, #0]
 8025b9e:	462a      	mov	r2, r5
 8025ba0:	4b12      	ldr	r3, [pc, #72]	; (8025bec <_vfiprintf_r+0x22c>)
 8025ba2:	a904      	add	r1, sp, #16
 8025ba4:	4630      	mov	r0, r6
 8025ba6:	f3af 8000 	nop.w
 8025baa:	4607      	mov	r7, r0
 8025bac:	1c78      	adds	r0, r7, #1
 8025bae:	d1d6      	bne.n	8025b5e <_vfiprintf_r+0x19e>
 8025bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025bb2:	07d9      	lsls	r1, r3, #31
 8025bb4:	d405      	bmi.n	8025bc2 <_vfiprintf_r+0x202>
 8025bb6:	89ab      	ldrh	r3, [r5, #12]
 8025bb8:	059a      	lsls	r2, r3, #22
 8025bba:	d402      	bmi.n	8025bc2 <_vfiprintf_r+0x202>
 8025bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025bbe:	f7ff fe1b 	bl	80257f8 <__retarget_lock_release_recursive>
 8025bc2:	89ab      	ldrh	r3, [r5, #12]
 8025bc4:	065b      	lsls	r3, r3, #25
 8025bc6:	f53f af1d 	bmi.w	8025a04 <_vfiprintf_r+0x44>
 8025bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025bcc:	e71c      	b.n	8025a08 <_vfiprintf_r+0x48>
 8025bce:	ab03      	add	r3, sp, #12
 8025bd0:	9300      	str	r3, [sp, #0]
 8025bd2:	462a      	mov	r2, r5
 8025bd4:	4b05      	ldr	r3, [pc, #20]	; (8025bec <_vfiprintf_r+0x22c>)
 8025bd6:	a904      	add	r1, sp, #16
 8025bd8:	4630      	mov	r0, r6
 8025bda:	f000 f879 	bl	8025cd0 <_printf_i>
 8025bde:	e7e4      	b.n	8025baa <_vfiprintf_r+0x1ea>
 8025be0:	08028448 	.word	0x08028448
 8025be4:	08028452 	.word	0x08028452
 8025be8:	00000000 	.word	0x00000000
 8025bec:	0802599b 	.word	0x0802599b
 8025bf0:	0802844e 	.word	0x0802844e

08025bf4 <_printf_common>:
 8025bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025bf8:	4616      	mov	r6, r2
 8025bfa:	4699      	mov	r9, r3
 8025bfc:	688a      	ldr	r2, [r1, #8]
 8025bfe:	690b      	ldr	r3, [r1, #16]
 8025c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025c04:	4293      	cmp	r3, r2
 8025c06:	bfb8      	it	lt
 8025c08:	4613      	movlt	r3, r2
 8025c0a:	6033      	str	r3, [r6, #0]
 8025c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025c10:	4607      	mov	r7, r0
 8025c12:	460c      	mov	r4, r1
 8025c14:	b10a      	cbz	r2, 8025c1a <_printf_common+0x26>
 8025c16:	3301      	adds	r3, #1
 8025c18:	6033      	str	r3, [r6, #0]
 8025c1a:	6823      	ldr	r3, [r4, #0]
 8025c1c:	0699      	lsls	r1, r3, #26
 8025c1e:	bf42      	ittt	mi
 8025c20:	6833      	ldrmi	r3, [r6, #0]
 8025c22:	3302      	addmi	r3, #2
 8025c24:	6033      	strmi	r3, [r6, #0]
 8025c26:	6825      	ldr	r5, [r4, #0]
 8025c28:	f015 0506 	ands.w	r5, r5, #6
 8025c2c:	d106      	bne.n	8025c3c <_printf_common+0x48>
 8025c2e:	f104 0a19 	add.w	sl, r4, #25
 8025c32:	68e3      	ldr	r3, [r4, #12]
 8025c34:	6832      	ldr	r2, [r6, #0]
 8025c36:	1a9b      	subs	r3, r3, r2
 8025c38:	42ab      	cmp	r3, r5
 8025c3a:	dc26      	bgt.n	8025c8a <_printf_common+0x96>
 8025c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025c40:	1e13      	subs	r3, r2, #0
 8025c42:	6822      	ldr	r2, [r4, #0]
 8025c44:	bf18      	it	ne
 8025c46:	2301      	movne	r3, #1
 8025c48:	0692      	lsls	r2, r2, #26
 8025c4a:	d42b      	bmi.n	8025ca4 <_printf_common+0xb0>
 8025c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025c50:	4649      	mov	r1, r9
 8025c52:	4638      	mov	r0, r7
 8025c54:	47c0      	blx	r8
 8025c56:	3001      	adds	r0, #1
 8025c58:	d01e      	beq.n	8025c98 <_printf_common+0xa4>
 8025c5a:	6823      	ldr	r3, [r4, #0]
 8025c5c:	6922      	ldr	r2, [r4, #16]
 8025c5e:	f003 0306 	and.w	r3, r3, #6
 8025c62:	2b04      	cmp	r3, #4
 8025c64:	bf02      	ittt	eq
 8025c66:	68e5      	ldreq	r5, [r4, #12]
 8025c68:	6833      	ldreq	r3, [r6, #0]
 8025c6a:	1aed      	subeq	r5, r5, r3
 8025c6c:	68a3      	ldr	r3, [r4, #8]
 8025c6e:	bf0c      	ite	eq
 8025c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025c74:	2500      	movne	r5, #0
 8025c76:	4293      	cmp	r3, r2
 8025c78:	bfc4      	itt	gt
 8025c7a:	1a9b      	subgt	r3, r3, r2
 8025c7c:	18ed      	addgt	r5, r5, r3
 8025c7e:	2600      	movs	r6, #0
 8025c80:	341a      	adds	r4, #26
 8025c82:	42b5      	cmp	r5, r6
 8025c84:	d11a      	bne.n	8025cbc <_printf_common+0xc8>
 8025c86:	2000      	movs	r0, #0
 8025c88:	e008      	b.n	8025c9c <_printf_common+0xa8>
 8025c8a:	2301      	movs	r3, #1
 8025c8c:	4652      	mov	r2, sl
 8025c8e:	4649      	mov	r1, r9
 8025c90:	4638      	mov	r0, r7
 8025c92:	47c0      	blx	r8
 8025c94:	3001      	adds	r0, #1
 8025c96:	d103      	bne.n	8025ca0 <_printf_common+0xac>
 8025c98:	f04f 30ff 	mov.w	r0, #4294967295
 8025c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ca0:	3501      	adds	r5, #1
 8025ca2:	e7c6      	b.n	8025c32 <_printf_common+0x3e>
 8025ca4:	18e1      	adds	r1, r4, r3
 8025ca6:	1c5a      	adds	r2, r3, #1
 8025ca8:	2030      	movs	r0, #48	; 0x30
 8025caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025cae:	4422      	add	r2, r4
 8025cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025cb8:	3302      	adds	r3, #2
 8025cba:	e7c7      	b.n	8025c4c <_printf_common+0x58>
 8025cbc:	2301      	movs	r3, #1
 8025cbe:	4622      	mov	r2, r4
 8025cc0:	4649      	mov	r1, r9
 8025cc2:	4638      	mov	r0, r7
 8025cc4:	47c0      	blx	r8
 8025cc6:	3001      	adds	r0, #1
 8025cc8:	d0e6      	beq.n	8025c98 <_printf_common+0xa4>
 8025cca:	3601      	adds	r6, #1
 8025ccc:	e7d9      	b.n	8025c82 <_printf_common+0x8e>
	...

08025cd0 <_printf_i>:
 8025cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025cd4:	7e0f      	ldrb	r7, [r1, #24]
 8025cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025cd8:	2f78      	cmp	r7, #120	; 0x78
 8025cda:	4691      	mov	r9, r2
 8025cdc:	4680      	mov	r8, r0
 8025cde:	460c      	mov	r4, r1
 8025ce0:	469a      	mov	sl, r3
 8025ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025ce6:	d807      	bhi.n	8025cf8 <_printf_i+0x28>
 8025ce8:	2f62      	cmp	r7, #98	; 0x62
 8025cea:	d80a      	bhi.n	8025d02 <_printf_i+0x32>
 8025cec:	2f00      	cmp	r7, #0
 8025cee:	f000 80d4 	beq.w	8025e9a <_printf_i+0x1ca>
 8025cf2:	2f58      	cmp	r7, #88	; 0x58
 8025cf4:	f000 80c0 	beq.w	8025e78 <_printf_i+0x1a8>
 8025cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025d00:	e03a      	b.n	8025d78 <_printf_i+0xa8>
 8025d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025d06:	2b15      	cmp	r3, #21
 8025d08:	d8f6      	bhi.n	8025cf8 <_printf_i+0x28>
 8025d0a:	a101      	add	r1, pc, #4	; (adr r1, 8025d10 <_printf_i+0x40>)
 8025d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025d10:	08025d69 	.word	0x08025d69
 8025d14:	08025d7d 	.word	0x08025d7d
 8025d18:	08025cf9 	.word	0x08025cf9
 8025d1c:	08025cf9 	.word	0x08025cf9
 8025d20:	08025cf9 	.word	0x08025cf9
 8025d24:	08025cf9 	.word	0x08025cf9
 8025d28:	08025d7d 	.word	0x08025d7d
 8025d2c:	08025cf9 	.word	0x08025cf9
 8025d30:	08025cf9 	.word	0x08025cf9
 8025d34:	08025cf9 	.word	0x08025cf9
 8025d38:	08025cf9 	.word	0x08025cf9
 8025d3c:	08025e81 	.word	0x08025e81
 8025d40:	08025da9 	.word	0x08025da9
 8025d44:	08025e3b 	.word	0x08025e3b
 8025d48:	08025cf9 	.word	0x08025cf9
 8025d4c:	08025cf9 	.word	0x08025cf9
 8025d50:	08025ea3 	.word	0x08025ea3
 8025d54:	08025cf9 	.word	0x08025cf9
 8025d58:	08025da9 	.word	0x08025da9
 8025d5c:	08025cf9 	.word	0x08025cf9
 8025d60:	08025cf9 	.word	0x08025cf9
 8025d64:	08025e43 	.word	0x08025e43
 8025d68:	682b      	ldr	r3, [r5, #0]
 8025d6a:	1d1a      	adds	r2, r3, #4
 8025d6c:	681b      	ldr	r3, [r3, #0]
 8025d6e:	602a      	str	r2, [r5, #0]
 8025d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d78:	2301      	movs	r3, #1
 8025d7a:	e09f      	b.n	8025ebc <_printf_i+0x1ec>
 8025d7c:	6820      	ldr	r0, [r4, #0]
 8025d7e:	682b      	ldr	r3, [r5, #0]
 8025d80:	0607      	lsls	r7, r0, #24
 8025d82:	f103 0104 	add.w	r1, r3, #4
 8025d86:	6029      	str	r1, [r5, #0]
 8025d88:	d501      	bpl.n	8025d8e <_printf_i+0xbe>
 8025d8a:	681e      	ldr	r6, [r3, #0]
 8025d8c:	e003      	b.n	8025d96 <_printf_i+0xc6>
 8025d8e:	0646      	lsls	r6, r0, #25
 8025d90:	d5fb      	bpl.n	8025d8a <_printf_i+0xba>
 8025d92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025d96:	2e00      	cmp	r6, #0
 8025d98:	da03      	bge.n	8025da2 <_printf_i+0xd2>
 8025d9a:	232d      	movs	r3, #45	; 0x2d
 8025d9c:	4276      	negs	r6, r6
 8025d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025da2:	485a      	ldr	r0, [pc, #360]	; (8025f0c <_printf_i+0x23c>)
 8025da4:	230a      	movs	r3, #10
 8025da6:	e012      	b.n	8025dce <_printf_i+0xfe>
 8025da8:	682b      	ldr	r3, [r5, #0]
 8025daa:	6820      	ldr	r0, [r4, #0]
 8025dac:	1d19      	adds	r1, r3, #4
 8025dae:	6029      	str	r1, [r5, #0]
 8025db0:	0605      	lsls	r5, r0, #24
 8025db2:	d501      	bpl.n	8025db8 <_printf_i+0xe8>
 8025db4:	681e      	ldr	r6, [r3, #0]
 8025db6:	e002      	b.n	8025dbe <_printf_i+0xee>
 8025db8:	0641      	lsls	r1, r0, #25
 8025dba:	d5fb      	bpl.n	8025db4 <_printf_i+0xe4>
 8025dbc:	881e      	ldrh	r6, [r3, #0]
 8025dbe:	4853      	ldr	r0, [pc, #332]	; (8025f0c <_printf_i+0x23c>)
 8025dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8025dc2:	bf0c      	ite	eq
 8025dc4:	2308      	moveq	r3, #8
 8025dc6:	230a      	movne	r3, #10
 8025dc8:	2100      	movs	r1, #0
 8025dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025dce:	6865      	ldr	r5, [r4, #4]
 8025dd0:	60a5      	str	r5, [r4, #8]
 8025dd2:	2d00      	cmp	r5, #0
 8025dd4:	bfa2      	ittt	ge
 8025dd6:	6821      	ldrge	r1, [r4, #0]
 8025dd8:	f021 0104 	bicge.w	r1, r1, #4
 8025ddc:	6021      	strge	r1, [r4, #0]
 8025dde:	b90e      	cbnz	r6, 8025de4 <_printf_i+0x114>
 8025de0:	2d00      	cmp	r5, #0
 8025de2:	d04b      	beq.n	8025e7c <_printf_i+0x1ac>
 8025de4:	4615      	mov	r5, r2
 8025de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8025dea:	fb03 6711 	mls	r7, r3, r1, r6
 8025dee:	5dc7      	ldrb	r7, [r0, r7]
 8025df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025df4:	4637      	mov	r7, r6
 8025df6:	42bb      	cmp	r3, r7
 8025df8:	460e      	mov	r6, r1
 8025dfa:	d9f4      	bls.n	8025de6 <_printf_i+0x116>
 8025dfc:	2b08      	cmp	r3, #8
 8025dfe:	d10b      	bne.n	8025e18 <_printf_i+0x148>
 8025e00:	6823      	ldr	r3, [r4, #0]
 8025e02:	07de      	lsls	r6, r3, #31
 8025e04:	d508      	bpl.n	8025e18 <_printf_i+0x148>
 8025e06:	6923      	ldr	r3, [r4, #16]
 8025e08:	6861      	ldr	r1, [r4, #4]
 8025e0a:	4299      	cmp	r1, r3
 8025e0c:	bfde      	ittt	le
 8025e0e:	2330      	movle	r3, #48	; 0x30
 8025e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025e18:	1b52      	subs	r2, r2, r5
 8025e1a:	6122      	str	r2, [r4, #16]
 8025e1c:	f8cd a000 	str.w	sl, [sp]
 8025e20:	464b      	mov	r3, r9
 8025e22:	aa03      	add	r2, sp, #12
 8025e24:	4621      	mov	r1, r4
 8025e26:	4640      	mov	r0, r8
 8025e28:	f7ff fee4 	bl	8025bf4 <_printf_common>
 8025e2c:	3001      	adds	r0, #1
 8025e2e:	d14a      	bne.n	8025ec6 <_printf_i+0x1f6>
 8025e30:	f04f 30ff 	mov.w	r0, #4294967295
 8025e34:	b004      	add	sp, #16
 8025e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e3a:	6823      	ldr	r3, [r4, #0]
 8025e3c:	f043 0320 	orr.w	r3, r3, #32
 8025e40:	6023      	str	r3, [r4, #0]
 8025e42:	4833      	ldr	r0, [pc, #204]	; (8025f10 <_printf_i+0x240>)
 8025e44:	2778      	movs	r7, #120	; 0x78
 8025e46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025e4a:	6823      	ldr	r3, [r4, #0]
 8025e4c:	6829      	ldr	r1, [r5, #0]
 8025e4e:	061f      	lsls	r7, r3, #24
 8025e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8025e54:	d402      	bmi.n	8025e5c <_printf_i+0x18c>
 8025e56:	065f      	lsls	r7, r3, #25
 8025e58:	bf48      	it	mi
 8025e5a:	b2b6      	uxthmi	r6, r6
 8025e5c:	07df      	lsls	r7, r3, #31
 8025e5e:	bf48      	it	mi
 8025e60:	f043 0320 	orrmi.w	r3, r3, #32
 8025e64:	6029      	str	r1, [r5, #0]
 8025e66:	bf48      	it	mi
 8025e68:	6023      	strmi	r3, [r4, #0]
 8025e6a:	b91e      	cbnz	r6, 8025e74 <_printf_i+0x1a4>
 8025e6c:	6823      	ldr	r3, [r4, #0]
 8025e6e:	f023 0320 	bic.w	r3, r3, #32
 8025e72:	6023      	str	r3, [r4, #0]
 8025e74:	2310      	movs	r3, #16
 8025e76:	e7a7      	b.n	8025dc8 <_printf_i+0xf8>
 8025e78:	4824      	ldr	r0, [pc, #144]	; (8025f0c <_printf_i+0x23c>)
 8025e7a:	e7e4      	b.n	8025e46 <_printf_i+0x176>
 8025e7c:	4615      	mov	r5, r2
 8025e7e:	e7bd      	b.n	8025dfc <_printf_i+0x12c>
 8025e80:	682b      	ldr	r3, [r5, #0]
 8025e82:	6826      	ldr	r6, [r4, #0]
 8025e84:	6961      	ldr	r1, [r4, #20]
 8025e86:	1d18      	adds	r0, r3, #4
 8025e88:	6028      	str	r0, [r5, #0]
 8025e8a:	0635      	lsls	r5, r6, #24
 8025e8c:	681b      	ldr	r3, [r3, #0]
 8025e8e:	d501      	bpl.n	8025e94 <_printf_i+0x1c4>
 8025e90:	6019      	str	r1, [r3, #0]
 8025e92:	e002      	b.n	8025e9a <_printf_i+0x1ca>
 8025e94:	0670      	lsls	r0, r6, #25
 8025e96:	d5fb      	bpl.n	8025e90 <_printf_i+0x1c0>
 8025e98:	8019      	strh	r1, [r3, #0]
 8025e9a:	2300      	movs	r3, #0
 8025e9c:	6123      	str	r3, [r4, #16]
 8025e9e:	4615      	mov	r5, r2
 8025ea0:	e7bc      	b.n	8025e1c <_printf_i+0x14c>
 8025ea2:	682b      	ldr	r3, [r5, #0]
 8025ea4:	1d1a      	adds	r2, r3, #4
 8025ea6:	602a      	str	r2, [r5, #0]
 8025ea8:	681d      	ldr	r5, [r3, #0]
 8025eaa:	6862      	ldr	r2, [r4, #4]
 8025eac:	2100      	movs	r1, #0
 8025eae:	4628      	mov	r0, r5
 8025eb0:	f7da fa1e 	bl	80002f0 <memchr>
 8025eb4:	b108      	cbz	r0, 8025eba <_printf_i+0x1ea>
 8025eb6:	1b40      	subs	r0, r0, r5
 8025eb8:	6060      	str	r0, [r4, #4]
 8025eba:	6863      	ldr	r3, [r4, #4]
 8025ebc:	6123      	str	r3, [r4, #16]
 8025ebe:	2300      	movs	r3, #0
 8025ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ec4:	e7aa      	b.n	8025e1c <_printf_i+0x14c>
 8025ec6:	6923      	ldr	r3, [r4, #16]
 8025ec8:	462a      	mov	r2, r5
 8025eca:	4649      	mov	r1, r9
 8025ecc:	4640      	mov	r0, r8
 8025ece:	47d0      	blx	sl
 8025ed0:	3001      	adds	r0, #1
 8025ed2:	d0ad      	beq.n	8025e30 <_printf_i+0x160>
 8025ed4:	6823      	ldr	r3, [r4, #0]
 8025ed6:	079b      	lsls	r3, r3, #30
 8025ed8:	d413      	bmi.n	8025f02 <_printf_i+0x232>
 8025eda:	68e0      	ldr	r0, [r4, #12]
 8025edc:	9b03      	ldr	r3, [sp, #12]
 8025ede:	4298      	cmp	r0, r3
 8025ee0:	bfb8      	it	lt
 8025ee2:	4618      	movlt	r0, r3
 8025ee4:	e7a6      	b.n	8025e34 <_printf_i+0x164>
 8025ee6:	2301      	movs	r3, #1
 8025ee8:	4632      	mov	r2, r6
 8025eea:	4649      	mov	r1, r9
 8025eec:	4640      	mov	r0, r8
 8025eee:	47d0      	blx	sl
 8025ef0:	3001      	adds	r0, #1
 8025ef2:	d09d      	beq.n	8025e30 <_printf_i+0x160>
 8025ef4:	3501      	adds	r5, #1
 8025ef6:	68e3      	ldr	r3, [r4, #12]
 8025ef8:	9903      	ldr	r1, [sp, #12]
 8025efa:	1a5b      	subs	r3, r3, r1
 8025efc:	42ab      	cmp	r3, r5
 8025efe:	dcf2      	bgt.n	8025ee6 <_printf_i+0x216>
 8025f00:	e7eb      	b.n	8025eda <_printf_i+0x20a>
 8025f02:	2500      	movs	r5, #0
 8025f04:	f104 0619 	add.w	r6, r4, #25
 8025f08:	e7f5      	b.n	8025ef6 <_printf_i+0x226>
 8025f0a:	bf00      	nop
 8025f0c:	08028459 	.word	0x08028459
 8025f10:	0802846a 	.word	0x0802846a

08025f14 <__sflush_r>:
 8025f14:	898a      	ldrh	r2, [r1, #12]
 8025f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f1a:	4605      	mov	r5, r0
 8025f1c:	0710      	lsls	r0, r2, #28
 8025f1e:	460c      	mov	r4, r1
 8025f20:	d458      	bmi.n	8025fd4 <__sflush_r+0xc0>
 8025f22:	684b      	ldr	r3, [r1, #4]
 8025f24:	2b00      	cmp	r3, #0
 8025f26:	dc05      	bgt.n	8025f34 <__sflush_r+0x20>
 8025f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025f2a:	2b00      	cmp	r3, #0
 8025f2c:	dc02      	bgt.n	8025f34 <__sflush_r+0x20>
 8025f2e:	2000      	movs	r0, #0
 8025f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f36:	2e00      	cmp	r6, #0
 8025f38:	d0f9      	beq.n	8025f2e <__sflush_r+0x1a>
 8025f3a:	2300      	movs	r3, #0
 8025f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025f40:	682f      	ldr	r7, [r5, #0]
 8025f42:	6a21      	ldr	r1, [r4, #32]
 8025f44:	602b      	str	r3, [r5, #0]
 8025f46:	d032      	beq.n	8025fae <__sflush_r+0x9a>
 8025f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025f4a:	89a3      	ldrh	r3, [r4, #12]
 8025f4c:	075a      	lsls	r2, r3, #29
 8025f4e:	d505      	bpl.n	8025f5c <__sflush_r+0x48>
 8025f50:	6863      	ldr	r3, [r4, #4]
 8025f52:	1ac0      	subs	r0, r0, r3
 8025f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025f56:	b10b      	cbz	r3, 8025f5c <__sflush_r+0x48>
 8025f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025f5a:	1ac0      	subs	r0, r0, r3
 8025f5c:	2300      	movs	r3, #0
 8025f5e:	4602      	mov	r2, r0
 8025f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f62:	6a21      	ldr	r1, [r4, #32]
 8025f64:	4628      	mov	r0, r5
 8025f66:	47b0      	blx	r6
 8025f68:	1c43      	adds	r3, r0, #1
 8025f6a:	89a3      	ldrh	r3, [r4, #12]
 8025f6c:	d106      	bne.n	8025f7c <__sflush_r+0x68>
 8025f6e:	6829      	ldr	r1, [r5, #0]
 8025f70:	291d      	cmp	r1, #29
 8025f72:	d82b      	bhi.n	8025fcc <__sflush_r+0xb8>
 8025f74:	4a29      	ldr	r2, [pc, #164]	; (802601c <__sflush_r+0x108>)
 8025f76:	410a      	asrs	r2, r1
 8025f78:	07d6      	lsls	r6, r2, #31
 8025f7a:	d427      	bmi.n	8025fcc <__sflush_r+0xb8>
 8025f7c:	2200      	movs	r2, #0
 8025f7e:	6062      	str	r2, [r4, #4]
 8025f80:	04d9      	lsls	r1, r3, #19
 8025f82:	6922      	ldr	r2, [r4, #16]
 8025f84:	6022      	str	r2, [r4, #0]
 8025f86:	d504      	bpl.n	8025f92 <__sflush_r+0x7e>
 8025f88:	1c42      	adds	r2, r0, #1
 8025f8a:	d101      	bne.n	8025f90 <__sflush_r+0x7c>
 8025f8c:	682b      	ldr	r3, [r5, #0]
 8025f8e:	b903      	cbnz	r3, 8025f92 <__sflush_r+0x7e>
 8025f90:	6560      	str	r0, [r4, #84]	; 0x54
 8025f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f94:	602f      	str	r7, [r5, #0]
 8025f96:	2900      	cmp	r1, #0
 8025f98:	d0c9      	beq.n	8025f2e <__sflush_r+0x1a>
 8025f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f9e:	4299      	cmp	r1, r3
 8025fa0:	d002      	beq.n	8025fa8 <__sflush_r+0x94>
 8025fa2:	4628      	mov	r0, r5
 8025fa4:	f7ff fc96 	bl	80258d4 <_free_r>
 8025fa8:	2000      	movs	r0, #0
 8025faa:	6360      	str	r0, [r4, #52]	; 0x34
 8025fac:	e7c0      	b.n	8025f30 <__sflush_r+0x1c>
 8025fae:	2301      	movs	r3, #1
 8025fb0:	4628      	mov	r0, r5
 8025fb2:	47b0      	blx	r6
 8025fb4:	1c41      	adds	r1, r0, #1
 8025fb6:	d1c8      	bne.n	8025f4a <__sflush_r+0x36>
 8025fb8:	682b      	ldr	r3, [r5, #0]
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d0c5      	beq.n	8025f4a <__sflush_r+0x36>
 8025fbe:	2b1d      	cmp	r3, #29
 8025fc0:	d001      	beq.n	8025fc6 <__sflush_r+0xb2>
 8025fc2:	2b16      	cmp	r3, #22
 8025fc4:	d101      	bne.n	8025fca <__sflush_r+0xb6>
 8025fc6:	602f      	str	r7, [r5, #0]
 8025fc8:	e7b1      	b.n	8025f2e <__sflush_r+0x1a>
 8025fca:	89a3      	ldrh	r3, [r4, #12]
 8025fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025fd0:	81a3      	strh	r3, [r4, #12]
 8025fd2:	e7ad      	b.n	8025f30 <__sflush_r+0x1c>
 8025fd4:	690f      	ldr	r7, [r1, #16]
 8025fd6:	2f00      	cmp	r7, #0
 8025fd8:	d0a9      	beq.n	8025f2e <__sflush_r+0x1a>
 8025fda:	0793      	lsls	r3, r2, #30
 8025fdc:	680e      	ldr	r6, [r1, #0]
 8025fde:	bf08      	it	eq
 8025fe0:	694b      	ldreq	r3, [r1, #20]
 8025fe2:	600f      	str	r7, [r1, #0]
 8025fe4:	bf18      	it	ne
 8025fe6:	2300      	movne	r3, #0
 8025fe8:	eba6 0807 	sub.w	r8, r6, r7
 8025fec:	608b      	str	r3, [r1, #8]
 8025fee:	f1b8 0f00 	cmp.w	r8, #0
 8025ff2:	dd9c      	ble.n	8025f2e <__sflush_r+0x1a>
 8025ff4:	6a21      	ldr	r1, [r4, #32]
 8025ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ff8:	4643      	mov	r3, r8
 8025ffa:	463a      	mov	r2, r7
 8025ffc:	4628      	mov	r0, r5
 8025ffe:	47b0      	blx	r6
 8026000:	2800      	cmp	r0, #0
 8026002:	dc06      	bgt.n	8026012 <__sflush_r+0xfe>
 8026004:	89a3      	ldrh	r3, [r4, #12]
 8026006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802600a:	81a3      	strh	r3, [r4, #12]
 802600c:	f04f 30ff 	mov.w	r0, #4294967295
 8026010:	e78e      	b.n	8025f30 <__sflush_r+0x1c>
 8026012:	4407      	add	r7, r0
 8026014:	eba8 0800 	sub.w	r8, r8, r0
 8026018:	e7e9      	b.n	8025fee <__sflush_r+0xda>
 802601a:	bf00      	nop
 802601c:	dfbffffe 	.word	0xdfbffffe

08026020 <_fflush_r>:
 8026020:	b538      	push	{r3, r4, r5, lr}
 8026022:	690b      	ldr	r3, [r1, #16]
 8026024:	4605      	mov	r5, r0
 8026026:	460c      	mov	r4, r1
 8026028:	b913      	cbnz	r3, 8026030 <_fflush_r+0x10>
 802602a:	2500      	movs	r5, #0
 802602c:	4628      	mov	r0, r5
 802602e:	bd38      	pop	{r3, r4, r5, pc}
 8026030:	b118      	cbz	r0, 802603a <_fflush_r+0x1a>
 8026032:	6a03      	ldr	r3, [r0, #32]
 8026034:	b90b      	cbnz	r3, 802603a <_fflush_r+0x1a>
 8026036:	f7ff fa85 	bl	8025544 <__sinit>
 802603a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802603e:	2b00      	cmp	r3, #0
 8026040:	d0f3      	beq.n	802602a <_fflush_r+0xa>
 8026042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026044:	07d0      	lsls	r0, r2, #31
 8026046:	d404      	bmi.n	8026052 <_fflush_r+0x32>
 8026048:	0599      	lsls	r1, r3, #22
 802604a:	d402      	bmi.n	8026052 <_fflush_r+0x32>
 802604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802604e:	f7ff fbd2 	bl	80257f6 <__retarget_lock_acquire_recursive>
 8026052:	4628      	mov	r0, r5
 8026054:	4621      	mov	r1, r4
 8026056:	f7ff ff5d 	bl	8025f14 <__sflush_r>
 802605a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802605c:	07da      	lsls	r2, r3, #31
 802605e:	4605      	mov	r5, r0
 8026060:	d4e4      	bmi.n	802602c <_fflush_r+0xc>
 8026062:	89a3      	ldrh	r3, [r4, #12]
 8026064:	059b      	lsls	r3, r3, #22
 8026066:	d4e1      	bmi.n	802602c <_fflush_r+0xc>
 8026068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802606a:	f7ff fbc5 	bl	80257f8 <__retarget_lock_release_recursive>
 802606e:	e7dd      	b.n	802602c <_fflush_r+0xc>

08026070 <__swbuf_r>:
 8026070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026072:	460e      	mov	r6, r1
 8026074:	4614      	mov	r4, r2
 8026076:	4605      	mov	r5, r0
 8026078:	b118      	cbz	r0, 8026082 <__swbuf_r+0x12>
 802607a:	6a03      	ldr	r3, [r0, #32]
 802607c:	b90b      	cbnz	r3, 8026082 <__swbuf_r+0x12>
 802607e:	f7ff fa61 	bl	8025544 <__sinit>
 8026082:	69a3      	ldr	r3, [r4, #24]
 8026084:	60a3      	str	r3, [r4, #8]
 8026086:	89a3      	ldrh	r3, [r4, #12]
 8026088:	071a      	lsls	r2, r3, #28
 802608a:	d525      	bpl.n	80260d8 <__swbuf_r+0x68>
 802608c:	6923      	ldr	r3, [r4, #16]
 802608e:	b31b      	cbz	r3, 80260d8 <__swbuf_r+0x68>
 8026090:	6823      	ldr	r3, [r4, #0]
 8026092:	6922      	ldr	r2, [r4, #16]
 8026094:	1a98      	subs	r0, r3, r2
 8026096:	6963      	ldr	r3, [r4, #20]
 8026098:	b2f6      	uxtb	r6, r6
 802609a:	4283      	cmp	r3, r0
 802609c:	4637      	mov	r7, r6
 802609e:	dc04      	bgt.n	80260aa <__swbuf_r+0x3a>
 80260a0:	4621      	mov	r1, r4
 80260a2:	4628      	mov	r0, r5
 80260a4:	f7ff ffbc 	bl	8026020 <_fflush_r>
 80260a8:	b9e0      	cbnz	r0, 80260e4 <__swbuf_r+0x74>
 80260aa:	68a3      	ldr	r3, [r4, #8]
 80260ac:	3b01      	subs	r3, #1
 80260ae:	60a3      	str	r3, [r4, #8]
 80260b0:	6823      	ldr	r3, [r4, #0]
 80260b2:	1c5a      	adds	r2, r3, #1
 80260b4:	6022      	str	r2, [r4, #0]
 80260b6:	701e      	strb	r6, [r3, #0]
 80260b8:	6962      	ldr	r2, [r4, #20]
 80260ba:	1c43      	adds	r3, r0, #1
 80260bc:	429a      	cmp	r2, r3
 80260be:	d004      	beq.n	80260ca <__swbuf_r+0x5a>
 80260c0:	89a3      	ldrh	r3, [r4, #12]
 80260c2:	07db      	lsls	r3, r3, #31
 80260c4:	d506      	bpl.n	80260d4 <__swbuf_r+0x64>
 80260c6:	2e0a      	cmp	r6, #10
 80260c8:	d104      	bne.n	80260d4 <__swbuf_r+0x64>
 80260ca:	4621      	mov	r1, r4
 80260cc:	4628      	mov	r0, r5
 80260ce:	f7ff ffa7 	bl	8026020 <_fflush_r>
 80260d2:	b938      	cbnz	r0, 80260e4 <__swbuf_r+0x74>
 80260d4:	4638      	mov	r0, r7
 80260d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260d8:	4621      	mov	r1, r4
 80260da:	4628      	mov	r0, r5
 80260dc:	f000 f806 	bl	80260ec <__swsetup_r>
 80260e0:	2800      	cmp	r0, #0
 80260e2:	d0d5      	beq.n	8026090 <__swbuf_r+0x20>
 80260e4:	f04f 37ff 	mov.w	r7, #4294967295
 80260e8:	e7f4      	b.n	80260d4 <__swbuf_r+0x64>
	...

080260ec <__swsetup_r>:
 80260ec:	b538      	push	{r3, r4, r5, lr}
 80260ee:	4b2a      	ldr	r3, [pc, #168]	; (8026198 <__swsetup_r+0xac>)
 80260f0:	4605      	mov	r5, r0
 80260f2:	6818      	ldr	r0, [r3, #0]
 80260f4:	460c      	mov	r4, r1
 80260f6:	b118      	cbz	r0, 8026100 <__swsetup_r+0x14>
 80260f8:	6a03      	ldr	r3, [r0, #32]
 80260fa:	b90b      	cbnz	r3, 8026100 <__swsetup_r+0x14>
 80260fc:	f7ff fa22 	bl	8025544 <__sinit>
 8026100:	89a3      	ldrh	r3, [r4, #12]
 8026102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026106:	0718      	lsls	r0, r3, #28
 8026108:	d422      	bmi.n	8026150 <__swsetup_r+0x64>
 802610a:	06d9      	lsls	r1, r3, #27
 802610c:	d407      	bmi.n	802611e <__swsetup_r+0x32>
 802610e:	2309      	movs	r3, #9
 8026110:	602b      	str	r3, [r5, #0]
 8026112:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026116:	81a3      	strh	r3, [r4, #12]
 8026118:	f04f 30ff 	mov.w	r0, #4294967295
 802611c:	e034      	b.n	8026188 <__swsetup_r+0x9c>
 802611e:	0758      	lsls	r0, r3, #29
 8026120:	d512      	bpl.n	8026148 <__swsetup_r+0x5c>
 8026122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026124:	b141      	cbz	r1, 8026138 <__swsetup_r+0x4c>
 8026126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802612a:	4299      	cmp	r1, r3
 802612c:	d002      	beq.n	8026134 <__swsetup_r+0x48>
 802612e:	4628      	mov	r0, r5
 8026130:	f7ff fbd0 	bl	80258d4 <_free_r>
 8026134:	2300      	movs	r3, #0
 8026136:	6363      	str	r3, [r4, #52]	; 0x34
 8026138:	89a3      	ldrh	r3, [r4, #12]
 802613a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802613e:	81a3      	strh	r3, [r4, #12]
 8026140:	2300      	movs	r3, #0
 8026142:	6063      	str	r3, [r4, #4]
 8026144:	6923      	ldr	r3, [r4, #16]
 8026146:	6023      	str	r3, [r4, #0]
 8026148:	89a3      	ldrh	r3, [r4, #12]
 802614a:	f043 0308 	orr.w	r3, r3, #8
 802614e:	81a3      	strh	r3, [r4, #12]
 8026150:	6923      	ldr	r3, [r4, #16]
 8026152:	b94b      	cbnz	r3, 8026168 <__swsetup_r+0x7c>
 8026154:	89a3      	ldrh	r3, [r4, #12]
 8026156:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802615a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802615e:	d003      	beq.n	8026168 <__swsetup_r+0x7c>
 8026160:	4621      	mov	r1, r4
 8026162:	4628      	mov	r0, r5
 8026164:	f000 f840 	bl	80261e8 <__smakebuf_r>
 8026168:	89a0      	ldrh	r0, [r4, #12]
 802616a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802616e:	f010 0301 	ands.w	r3, r0, #1
 8026172:	d00a      	beq.n	802618a <__swsetup_r+0x9e>
 8026174:	2300      	movs	r3, #0
 8026176:	60a3      	str	r3, [r4, #8]
 8026178:	6963      	ldr	r3, [r4, #20]
 802617a:	425b      	negs	r3, r3
 802617c:	61a3      	str	r3, [r4, #24]
 802617e:	6923      	ldr	r3, [r4, #16]
 8026180:	b943      	cbnz	r3, 8026194 <__swsetup_r+0xa8>
 8026182:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026186:	d1c4      	bne.n	8026112 <__swsetup_r+0x26>
 8026188:	bd38      	pop	{r3, r4, r5, pc}
 802618a:	0781      	lsls	r1, r0, #30
 802618c:	bf58      	it	pl
 802618e:	6963      	ldrpl	r3, [r4, #20]
 8026190:	60a3      	str	r3, [r4, #8]
 8026192:	e7f4      	b.n	802617e <__swsetup_r+0x92>
 8026194:	2000      	movs	r0, #0
 8026196:	e7f7      	b.n	8026188 <__swsetup_r+0x9c>
 8026198:	24000108 	.word	0x24000108

0802619c <__swhatbuf_r>:
 802619c:	b570      	push	{r4, r5, r6, lr}
 802619e:	460c      	mov	r4, r1
 80261a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261a4:	2900      	cmp	r1, #0
 80261a6:	b096      	sub	sp, #88	; 0x58
 80261a8:	4615      	mov	r5, r2
 80261aa:	461e      	mov	r6, r3
 80261ac:	da0d      	bge.n	80261ca <__swhatbuf_r+0x2e>
 80261ae:	89a3      	ldrh	r3, [r4, #12]
 80261b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80261b4:	f04f 0100 	mov.w	r1, #0
 80261b8:	bf0c      	ite	eq
 80261ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80261be:	2340      	movne	r3, #64	; 0x40
 80261c0:	2000      	movs	r0, #0
 80261c2:	6031      	str	r1, [r6, #0]
 80261c4:	602b      	str	r3, [r5, #0]
 80261c6:	b016      	add	sp, #88	; 0x58
 80261c8:	bd70      	pop	{r4, r5, r6, pc}
 80261ca:	466a      	mov	r2, sp
 80261cc:	f000 f848 	bl	8026260 <_fstat_r>
 80261d0:	2800      	cmp	r0, #0
 80261d2:	dbec      	blt.n	80261ae <__swhatbuf_r+0x12>
 80261d4:	9901      	ldr	r1, [sp, #4]
 80261d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80261da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80261de:	4259      	negs	r1, r3
 80261e0:	4159      	adcs	r1, r3
 80261e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80261e6:	e7eb      	b.n	80261c0 <__swhatbuf_r+0x24>

080261e8 <__smakebuf_r>:
 80261e8:	898b      	ldrh	r3, [r1, #12]
 80261ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80261ec:	079d      	lsls	r5, r3, #30
 80261ee:	4606      	mov	r6, r0
 80261f0:	460c      	mov	r4, r1
 80261f2:	d507      	bpl.n	8026204 <__smakebuf_r+0x1c>
 80261f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80261f8:	6023      	str	r3, [r4, #0]
 80261fa:	6123      	str	r3, [r4, #16]
 80261fc:	2301      	movs	r3, #1
 80261fe:	6163      	str	r3, [r4, #20]
 8026200:	b002      	add	sp, #8
 8026202:	bd70      	pop	{r4, r5, r6, pc}
 8026204:	ab01      	add	r3, sp, #4
 8026206:	466a      	mov	r2, sp
 8026208:	f7ff ffc8 	bl	802619c <__swhatbuf_r>
 802620c:	9900      	ldr	r1, [sp, #0]
 802620e:	4605      	mov	r5, r0
 8026210:	4630      	mov	r0, r6
 8026212:	f7ff f871 	bl	80252f8 <_malloc_r>
 8026216:	b948      	cbnz	r0, 802622c <__smakebuf_r+0x44>
 8026218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802621c:	059a      	lsls	r2, r3, #22
 802621e:	d4ef      	bmi.n	8026200 <__smakebuf_r+0x18>
 8026220:	f023 0303 	bic.w	r3, r3, #3
 8026224:	f043 0302 	orr.w	r3, r3, #2
 8026228:	81a3      	strh	r3, [r4, #12]
 802622a:	e7e3      	b.n	80261f4 <__smakebuf_r+0xc>
 802622c:	89a3      	ldrh	r3, [r4, #12]
 802622e:	6020      	str	r0, [r4, #0]
 8026230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026234:	81a3      	strh	r3, [r4, #12]
 8026236:	9b00      	ldr	r3, [sp, #0]
 8026238:	6163      	str	r3, [r4, #20]
 802623a:	9b01      	ldr	r3, [sp, #4]
 802623c:	6120      	str	r0, [r4, #16]
 802623e:	b15b      	cbz	r3, 8026258 <__smakebuf_r+0x70>
 8026240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026244:	4630      	mov	r0, r6
 8026246:	f000 f81d 	bl	8026284 <_isatty_r>
 802624a:	b128      	cbz	r0, 8026258 <__smakebuf_r+0x70>
 802624c:	89a3      	ldrh	r3, [r4, #12]
 802624e:	f023 0303 	bic.w	r3, r3, #3
 8026252:	f043 0301 	orr.w	r3, r3, #1
 8026256:	81a3      	strh	r3, [r4, #12]
 8026258:	89a3      	ldrh	r3, [r4, #12]
 802625a:	431d      	orrs	r5, r3
 802625c:	81a5      	strh	r5, [r4, #12]
 802625e:	e7cf      	b.n	8026200 <__smakebuf_r+0x18>

08026260 <_fstat_r>:
 8026260:	b538      	push	{r3, r4, r5, lr}
 8026262:	4d07      	ldr	r5, [pc, #28]	; (8026280 <_fstat_r+0x20>)
 8026264:	2300      	movs	r3, #0
 8026266:	4604      	mov	r4, r0
 8026268:	4608      	mov	r0, r1
 802626a:	4611      	mov	r1, r2
 802626c:	602b      	str	r3, [r5, #0]
 802626e:	f7db fad6 	bl	800181e <_fstat>
 8026272:	1c43      	adds	r3, r0, #1
 8026274:	d102      	bne.n	802627c <_fstat_r+0x1c>
 8026276:	682b      	ldr	r3, [r5, #0]
 8026278:	b103      	cbz	r3, 802627c <_fstat_r+0x1c>
 802627a:	6023      	str	r3, [r4, #0]
 802627c:	bd38      	pop	{r3, r4, r5, pc}
 802627e:	bf00      	nop
 8026280:	240077ec 	.word	0x240077ec

08026284 <_isatty_r>:
 8026284:	b538      	push	{r3, r4, r5, lr}
 8026286:	4d06      	ldr	r5, [pc, #24]	; (80262a0 <_isatty_r+0x1c>)
 8026288:	2300      	movs	r3, #0
 802628a:	4604      	mov	r4, r0
 802628c:	4608      	mov	r0, r1
 802628e:	602b      	str	r3, [r5, #0]
 8026290:	f7db fad5 	bl	800183e <_isatty>
 8026294:	1c43      	adds	r3, r0, #1
 8026296:	d102      	bne.n	802629e <_isatty_r+0x1a>
 8026298:	682b      	ldr	r3, [r5, #0]
 802629a:	b103      	cbz	r3, 802629e <_isatty_r+0x1a>
 802629c:	6023      	str	r3, [r4, #0]
 802629e:	bd38      	pop	{r3, r4, r5, pc}
 80262a0:	240077ec 	.word	0x240077ec

080262a4 <_init>:
 80262a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262a6:	bf00      	nop
 80262a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80262aa:	bc08      	pop	{r3}
 80262ac:	469e      	mov	lr, r3
 80262ae:	4770      	bx	lr

080262b0 <_fini>:
 80262b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262b2:	bf00      	nop
 80262b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80262b6:	bc08      	pop	{r3}
 80262b8:	469e      	mov	lr, r3
 80262ba:	4770      	bx	lr
