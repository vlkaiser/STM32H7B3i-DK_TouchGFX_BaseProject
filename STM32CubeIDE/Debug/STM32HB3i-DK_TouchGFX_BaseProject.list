
STM32HB3i-DK_TouchGFX_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023adc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a8c  08023d8c  08023d8c  00033d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08025818  08025818  00035818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08025834  08025834  00035834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  0802583c  0802583c  0003583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  08025850  08025850  00035850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000110  24000000  08025858  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000753c  24000110  08025968  00040110  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  2400764c  08025968  0004764c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00110428  2**0
                  CONTENTS, READONLY
 11 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 FontFlashSection 00000404  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000024  90000404  90000404  00110404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  90000428  90000428  00110456  2**0
                  CONTENTS
 15 .comment      000000c2  00000000  00000000  00110456  2**0
                  CONTENTS, READONLY
 16 .debug_info   00091cae  00000000  00000000  00110518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00010ceb  00000000  00000000  001a21c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003a78  00000000  00000000  001b2eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002c73  00000000  00000000  001b6930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00010b23  00000000  00000000  001b95a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004b317  00000000  00000000  001ca0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00176850  00000000  00000000  002153dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00010114  00000000  00000000  0038bc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000b2  00000000  00000000  0039bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08023d74 	.word	0x08023d74

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08023d74 	.word	0x08023d74

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x128>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069e:	f3bf 8f4f 	dsb	sy
}
 80006a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a4:	f3bf 8f6f 	isb	sy
}
 80006a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <main+0x128>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <main+0x128>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <main+0x128>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x128>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d138      	bne.n	8000756 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <main+0x128>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <main+0x128>)
 80006f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000702:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	4925      	ldr	r1, [pc, #148]	; (80007b4 <main+0x128>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x82>
    } while(sets-- != 0U);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0x128>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <main+0x128>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f007 ff0a 	bl	8008570 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800075c:	f000 fc04 	bl	8000f68 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f836 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 fa9a 	bl	8000c9c <MX_GPIO_Init>
  MX_CRC_Init();
 8000768:	f000 f8a8 	bl	80008bc <MX_CRC_Init>
  MX_DMA2D_Init();
 800076c:	f000 f8c8 	bl	8000900 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000770:	f000 f900 	bl	8000974 <MX_I2C4_Init>
  MX_LTDC_Init();
 8000774:	f000 f93e 	bl	80009f4 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000778:	f000 f9be 	bl	8000af8 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 800077c:	f000 fa2e 	bl	8000bdc <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8000780:	f001 f8d0 	bl	8001924 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000784:	f001 f8c7 	bl	8001916 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000788:	f00f fcae 	bl	80100e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <main+0x12c>)
 800078e:	2100      	movs	r1, #0
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <main+0x130>)
 8000792:	f00f fcf3 	bl	801017c <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <main+0x134>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of LEDblink_task */
  LEDblink_taskHandle = osThreadNew(Start_LEDblink_task, NULL, &LEDblink_task_attributes);
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <main+0x138>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <main+0x13c>)
 80007a2:	f00f fceb 	bl	801017c <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <main+0x140>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ac:	f00f fcc0 	bl	8010130 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x124>
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	08024858 	.word	0x08024858
 80007bc:	08001935 	.word	0x08001935
 80007c0:	240003a4 	.word	0x240003a4
 80007c4:	0802487c 	.word	0x0802487c
 80007c8:	08000f25 	.word	0x08000f25
 80007cc:	240003a8 	.word	0x240003a8

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	; 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f022 fca3 	bl	802312a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f022 fc9d 	bl	802312a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <SystemClock_Config+0xe4>)
 80007f2:	f04f 32ff 	mov.w	r2, #4294967295
 80007f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fa:	2004      	movs	r0, #4
 80007fc:	f00b f8b4 	bl	800b968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <SystemClock_Config+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <SystemClock_Config+0xe8>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <SystemClock_Config+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <SystemClock_Config+0xe8>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800083e:	230c      	movs	r3, #12
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000842:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000854:	2304      	movs	r3, #4
 8000856:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000858:	2300      	movs	r3, #0
 800085a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4618      	mov	r0, r3
 8000866:	f00b f8d9 	bl	800ba1c <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000870:	f000 fbde 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	233f      	movs	r3, #63	; 0x3f
 8000876:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000880:	2308      	movs	r3, #8
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2103      	movs	r1, #3
 800089a:	4618      	mov	r0, r3
 800089c:	f00b fcf0 	bl	800c280 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008a6:	f000 fbc3 	bl	8001030 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3770      	adds	r7, #112	; 0x70
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58024800 	.word	0x58024800

080008bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <MX_CRC_Init+0x40>)
 80008c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_CRC_Init+0x3c>)
 80008e6:	f008 f851 	bl	800898c <HAL_CRC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008f0:	f000 fb9e 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2400012c 	.word	0x2400012c
 80008fc:	40023000 	.word	0x40023000

08000900 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <MX_DMA2D_Init+0x70>)
 8000908:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_DMA2D_Init+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000912:	2202      	movs	r2, #2
 8000914:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_DMA2D_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000924:	2202      	movs	r2, #2
 8000926:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_DMA2D_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000930:	2200      	movs	r2, #0
 8000932:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DMA2D_Init+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000942:	2200      	movs	r2, #0
 8000944:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_DMA2D_Init+0x6c>)
 8000948:	f008 f912 	bl	8008b70 <HAL_DMA2D_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 fb6d 	bl	8001030 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000956:	2101      	movs	r1, #1
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_DMA2D_Init+0x6c>)
 800095a:	f008 fa7d 	bl	8008e58 <HAL_DMA2D_ConfigLayer>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000964:	f000 fb64 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	24000150 	.word	0x24000150
 8000970:	52001000 	.word	0x52001000

08000974 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C4_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C4_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10808AD0;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C4_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C4_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C4_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009b0:	f008 fe08 	bl	80095c4 <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fb39 	bl	8001030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009c4:	f009 fbbe 	bl	800a144 <HAL_I2CEx_ConfigAnalogFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f000 fb2f 	bl	8001030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009d6:	f009 fc00 	bl	800a1da <HAL_I2CEx_ConfigDigitalFilter>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80009e0:	f000 fb26 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240001b8 	.word	0x240001b8
 80009ec:	58001c00 	.word	0x58001c00
 80009f0:	10808ad0 	.word	0x10808ad0

080009f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2234      	movs	r2, #52	; 0x34
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f022 fb92 	bl	802312a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a08:	4a3a      	ldr	r2, [pc, #232]	; (8000af4 <MX_LTDC_Init+0x100>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a26:	2228      	movs	r2, #40	; 0x28
 8000a28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a32:	222a      	movs	r2, #42	; 0x2a
 8000a34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a38:	220b      	movs	r2, #11
 8000a3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a3e:	f240 220a 	movw	r2, #522	; 0x20a
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a46:	f240 121b 	movw	r2, #283	; 0x11b
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a4e:	f240 222a 	movw	r2, #554	; 0x22a
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a56:	f240 121d 	movw	r2, #285	; 0x11d
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000a76:	f009 fbfd 	bl	800a274 <HAL_LTDC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 fad6 	bl	8001030 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a96:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ab2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ab8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000abe:	23ff      	movs	r3, #255	; 0xff
 8000ac0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_LTDC_Init+0xfc>)
 8000ad8:	f009 fd54 	bl	800a584 <HAL_LTDC_ConfigLayer>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 faa5 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2400020c 	.word	0x2400020c
 8000af4:	50001000 	.word	0x50001000

08000af8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b08:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <MX_OCTOSPI1_Init+0xe0>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 32;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b20:	221a      	movs	r2, #26
 8000b22:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b3e:	2203      	movs	r2, #3
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b58:	2208      	movs	r2, #8
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b6a:	f009 ff9d 	bl	800aaa8 <HAL_OSPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_OCTOSPI1_Init+0x80>
  {
    Error_Handler();
 8000b74:	f000 fa5c 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeOutPeriod = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <MX_OCTOSPI1_Init+0xdc>)
 8000b86:	f00a fbdf 	bl	800b348 <HAL_OSPI_MemoryMapped>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000b90:	f000 fa4e 	bl	8001030 <Error_Handler>
  }
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f006 fc5d 	bl	800745c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f006 fbce 	bl	8007348 <BSP_OSPI_NOR_Init>
 8000bac:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000bb4:	f000 fa3c 	bl	8001030 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f006 fceb 	bl	8007594 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8000bbe:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_OCTOSPI1_Init+0xd2>
  {
    Error_Handler();
 8000bc6:	f000 fa33 	bl	8001030 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240002b4 	.word	0x240002b4
 8000bd8:	52005000 	.word	0x52005000

08000bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <MX_USART1_UART_Init+0xb8>)
 8000be6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c04:	220c      	movs	r2, #12
 8000c06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c28:	f00d ffb2 	bl	800eb90 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 f9fd 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c3a:	f00f f946 	bl	800feca <HAL_UARTEx_SetTxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f000 f9f4 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c4c:	f00f f97b 	bl	800ff46 <HAL_UARTEx_SetRxFifoThreshold>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 f9eb 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c5c:	f00f f8fc 	bl	800fe58 <HAL_UARTEx_DisableFifoMode>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c66:	f000 f9e3 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
#ifdef DEBUG
  uint8_t MSG[] = "Initializing...\n\r";
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART1_UART_Init+0xbc>)
 8000c6c:	1d3c      	adds	r4, r7, #4
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2212      	movs	r2, #18
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_USART1_UART_Init+0xb4>)
 8000c82:	f00d ffd5 	bl	800ec30 <HAL_UART_Transmit>
#endif
  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000310 	.word	0x24000310
 8000c94:	40011000 	.word	0x40011000
 8000c98:	08023da8 	.word	0x08023da8

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb2:	4b8b      	ldr	r3, [pc, #556]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	4a89      	ldr	r2, [pc, #548]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc2:	4b87      	ldr	r3, [pc, #540]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ccc:	623b      	str	r3, [r7, #32]
 8000cce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b83      	ldr	r3, [pc, #524]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce0:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cee:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfe:	4b78      	ldr	r3, [pc, #480]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0c:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d12:	4a73      	ldr	r2, [pc, #460]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1c:	4b70      	ldr	r3, [pc, #448]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d30:	4a6b      	ldr	r2, [pc, #428]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d3a:	4b69      	ldr	r3, [pc, #420]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b65      	ldr	r3, [pc, #404]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	4a64      	ldr	r2, [pc, #400]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d58:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b5e      	ldr	r3, [pc, #376]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d94:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000da4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <MX_GPIO_Init+0x244>)
 8000db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f640 0104 	movw	r1, #2052	; 0x804
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <MX_GPIO_Init+0x248>)
 8000dc8:	f008 fbae 	bl	8009528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4845      	ldr	r0, [pc, #276]	; (8000ee8 <MX_GPIO_Init+0x24c>)
 8000dd2:	f008 fba9 	bl	8009528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f241 0106 	movw	r1, #4102	; 0x1006
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <MX_GPIO_Init+0x250>)
 8000dde:	f008 fba3 	bl	8009528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000de8:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <MX_GPIO_Init+0x254>)
 8000dea:	f008 fb9d 	bl	8009528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000dee:	f640 0304 	movw	r3, #2052	; 0x804
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <MX_GPIO_Init+0x248>)
 8000e08:	f008 f8d4 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <MX_GPIO_Init+0x24c>)
 8000e24:	f008 f8c6 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8000e28:	f241 0302 	movw	r3, #4098	; 0x1002
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_GPIO_Init+0x250>)
 8000e42:	f008 f8b7 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0x258>)
 8000e5e:	f008 f8a9 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e62:	2304      	movs	r3, #4
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x25c>)
 8000e78:	f008 f89c 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8000e7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <MX_GPIO_Init+0x254>)
 8000e96:	f008 f88d 	bl	8008fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_GPIO_Init+0x250>)
 8000eb2:	f008 f87f 	bl	8008fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f007 fcb4 	bl	8008828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ec0:	2008      	movs	r0, #8
 8000ec2:	f007 fccb 	bl	800885c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f007 fcac 	bl	8008828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed0:	2028      	movs	r0, #40	; 0x28
 8000ed2:	f007 fcc3 	bl	800885c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58022000 	.word	0x58022000
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58020800 	.word	0x58020800
 8000ef8:	58021c00 	.word	0x58021c00

08000efc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint32_t userButtonPressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BTN_Pin)
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_EXTI_Callback+0x18>
	{
		userButtonPressed = 1;
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
	}
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	240003ac 	.word	0x240003ac

08000f24 <Start_LEDblink_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LEDblink_task */
void Start_LEDblink_task(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LEDblink_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <Start_LEDblink_task+0x38>)
 8000f30:	f008 fb13 	bl	800955a <HAL_GPIO_TogglePin>
	#ifdef DEBUG
	  uint8_t MSG[] = "Blink\n\r";
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <Start_LEDblink_task+0x3c>)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3e:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8000f42:	f107 0108 	add.w	r1, r7, #8
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <Start_LEDblink_task+0x40>)
 8000f4e:	f00d fe6f 	bl	800ec30 <HAL_UART_Transmit>
	#endif
	  osDelay(2000);
 8000f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f56:	f00f f9a3 	bl	80102a0 <osDelay>
  {
 8000f5a:	e7e7      	b.n	8000f2c <Start_LEDblink_task+0x8>
 8000f5c:	58021800 	.word	0x58021800
 8000f60:	08023dbc 	.word	0x08023dbc
 8000f64:	24000310 	.word	0x24000310

08000f68 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f7a:	f007 fc8b 	bl	8008894 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f8a:	231f      	movs	r3, #31
 8000f8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f8e:	2387      	movs	r3, #135	; 0x87
 8000f90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f96:	2300      	movs	r3, #0
 8000f98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fca9 	bl	8008904 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000fb6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000fba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000fbc:	2319      	movs	r3, #25
 8000fbe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fc98 	bl	8008904 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000fd8:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000fdc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000fde:	2313      	movs	r3, #19
 8000fe0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f007 fc8d 	bl	8008904 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000fea:	2303      	movs	r3, #3
 8000fec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000fee:	2311      	movs	r3, #17
 8000ff0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 fc83 	bl	8008904 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f007 fc60 	bl	80088c4 <HAL_MPU_Enable>

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101e:	f007 fae3 	bl	80085e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40001000 	.word	0x40001000

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x38>)
 8001048:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_MspInit+0x38>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x38>)
 8001058:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	210f      	movs	r1, #15
 8001068:	f06f 0001 	mvn.w	r0, #1
 800106c:	f007 fbdc 	bl	8008828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400

0800107c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_CRC_MspInit+0x3c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10e      	bne.n	80010ac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_CRC_MspInit+0x40>)
 8001090:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_CRC_MspInit+0x40>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_CRC_MspInit+0x40>)
 80010a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40023000 	.word	0x40023000
 80010bc:	58024400 	.word	0x58024400

080010c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_DMA2D_MspInit+0x48>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d116      	bne.n	8001100 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_DMA2D_MspInit+0x4c>)
 80010d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_DMA2D_MspInit+0x4c>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_DMA2D_MspInit+0x4c>)
 80010e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2105      	movs	r1, #5
 80010f4:	205a      	movs	r0, #90	; 0x5a
 80010f6:	f007 fb97 	bl	8008828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010fa:	205a      	movs	r0, #90	; 0x5a
 80010fc:	f007 fbae 	bl	800885c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	52001000 	.word	0x52001000
 800110c:	58024400 	.word	0x58024400

08001110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ba      	sub	sp, #232	; 0xe8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	22c0      	movs	r2, #192	; 0xc0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f021 fffa 	bl	802312a <memset>
  if(hi2c->Instance==I2C4)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_I2C_MspInit+0xc8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d146      	bne.n	80011ce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001140:	f04f 0210 	mov.w	r2, #16
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f00b fc60 	bl	800ca1c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001162:	f7ff ff65 	bl	8001030 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 8001168:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 8001178:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001184:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800119e:	2304      	movs	r3, #4
 80011a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <HAL_I2C_MspInit+0xd0>)
 80011ac:	f007 ff02 	bl	8008fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 80011b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_I2C_MspInit+0xcc>)
 80011c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	37e8      	adds	r7, #232	; 0xe8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	58001c00 	.word	0x58001c00
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020c00 	.word	0x58020c00

080011e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_I2C_MspDeInit+0x40>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d111      	bne.n	800121a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_I2C_MspDeInit+0x44>)
 80011f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_I2C_MspDeInit+0x44>)
 80011fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001202:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <HAL_I2C_MspDeInit+0x48>)
 800120c:	f008 f882 	bl	8009314 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_I2C_MspDeInit+0x48>)
 8001216:	f008 f87d 	bl	8009314 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58001c00 	.word	0x58001c00
 8001228:	58024400 	.word	0x58024400
 800122c:	58020c00 	.word	0x58020c00

08001230 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0bc      	sub	sp, #240	; 0xf0
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	22c0      	movs	r2, #192	; 0xc0
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f021 ff6a 	bl	802312a <memset>
  if(hltdc->Instance==LTDC)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_LTDC_MspInit+0x188>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f040 80a6 	bne.w	80013ae <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001262:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800126e:	2318      	movs	r3, #24
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001272:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001278:	2311      	movs	r3, #17
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001280:	231e      	movs	r3, #30
 8001282:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001284:	2300      	movs	r3, #0
 8001286:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001288:	2300      	movs	r3, #0
 800128a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f00b fbc1 	bl	800ca1c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80012a0:	f7ff fec6 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012a4:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012a6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80012b4:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c8:	4a3c      	ldr	r2, [pc, #240]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e6:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 80012f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 8001300:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001304:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_LTDC_MspInit+0x18c>)
 8001310:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 800131c:	23ff      	movs	r3, #255	; 0xff
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001334:	230e      	movs	r3, #14
 8001336:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800133a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800133e:	4619      	mov	r1, r3
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <HAL_LTDC_MspInit+0x190>)
 8001342:	f007 fe37 	bl	8008fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8001346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001360:	230e      	movs	r3, #14
 8001362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001366:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800136a:	4619      	mov	r1, r3
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <HAL_LTDC_MspInit+0x194>)
 800136e:	f007 fe21 	bl	8008fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001372:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800138c:	230e      	movs	r3, #14
 800138e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001392:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001396:	4619      	mov	r1, r3
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <HAL_LTDC_MspInit+0x198>)
 800139a:	f007 fe0b 	bl	8008fb4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2105      	movs	r1, #5
 80013a2:	2058      	movs	r0, #88	; 0x58
 80013a4:	f007 fa40 	bl	8008828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013a8:	2058      	movs	r0, #88	; 0x58
 80013aa:	f007 fa57 	bl	800885c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37f0      	adds	r7, #240	; 0xf0
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	50001000 	.word	0x50001000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58022800 	.word	0x58022800
 80013c4:	58022400 	.word	0x58022400
 80013c8:	58022000 	.word	0x58022000

080013cc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b4      	sub	sp, #208	; 0xd0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	; 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f021 fea4 	bl	802312a <memset>
  if(hospi->Instance==OCTOSPI1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <HAL_OSPI_MspInit+0xd4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d154      	bne.n	8001496 <HAL_OSPI_MspInit+0xca>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */
	__HAL_RCC_OSPI1_FORCE_RESET();
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 80013ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80013f0:	4a2c      	ldr	r2, [pc, #176]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	67d3      	str	r3, [r2, #124]	; 0x7c
	__HAL_RCC_OSPI1_RELEASE_RESET();
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 80013fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80013fc:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 80013fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001402:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001414:	230a      	movs	r3, #10
 8001416:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800141c:	2302      	movs	r3, #2
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001424:	23c0      	movs	r3, #192	; 0xc0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 5462;
 800142c:	f241 5356 	movw	r3, #5462	; 0x1556
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001432:	2320      	movs	r3, #32
 8001434:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4618      	mov	r0, r3
 800143c:	f00b faee 	bl	800ca1c <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_OSPI_MspInit+0x7e>
    {
      Error_Handler();
 8001446:	f7ff fdf3 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 800144c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 8001452:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001456:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 800145c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 800146a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_OSPI_MspInit+0xd8>)
 800147a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	205c      	movs	r0, #92	; 0x5c
 800148c:	f007 f9cc 	bl	8008828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001490:	205c      	movs	r0, #92	; 0x5c
 8001492:	f007 f9e3 	bl	800885c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37d0      	adds	r7, #208	; 0xd0
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	52005000 	.word	0x52005000
 80014a4:	58024400 	.word	0x58024400

080014a8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_OSPI_MspDeInit+0x40>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d112      	bne.n	80014e0 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_OSPI_MspDeInit+0x44>)
 80014bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_OSPI_MspDeInit+0x44>)
 80014c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014c6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_OSPI_MspDeInit+0x44>)
 80014cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_OSPI_MspDeInit+0x44>)
 80014d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014d6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80014da:	205c      	movs	r0, #92	; 0x5c
 80014dc:	f007 f9cc 	bl	8008878 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	52005000 	.word	0x52005000
 80014ec:	58024400 	.word	0x58024400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ba      	sub	sp, #232	; 0xe8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	22c0      	movs	r2, #192	; 0xc0
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f021 fe0a 	bl	802312a <memset>
  if(huart->Instance==USART1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_UART_MspInit+0xc8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d146      	bne.n	80015ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001520:	f04f 0201 	mov.w	r2, #1
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4618      	mov	r0, r3
 8001538:	f00b fa70 	bl	800ca1c <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001542:	f7ff fd75 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_UART_MspInit+0xcc>)
 8001548:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_UART_MspInit+0xcc>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_UART_MspInit+0xcc>)
 8001558:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_UART_MspInit+0xcc>)
 8001566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_UART_MspInit+0xcc>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0xcc>)
 8001576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_UART_MspInit+0xd0>)
 80015aa:	f007 fd03 	bl	8008fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	37e8      	adds	r7, #232	; 0xe8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40011000 	.word	0x40011000
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58020000 	.word	0x58020000

080015c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b090      	sub	sp, #64	; 0x40
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	d827      	bhi.n	8001622 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015d2:	2200      	movs	r2, #0
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	2036      	movs	r0, #54	; 0x36
 80015d8:	f007 f926 	bl	8008828 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015dc:	2036      	movs	r0, #54	; 0x36
 80015de:	f007 f93d 	bl	800885c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <HAL_InitTick+0xc4>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_InitTick+0xc8>)
 80015ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_InitTick+0xc8>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_InitTick+0xc8>)
 80015fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001606:	f107 0210 	add.w	r2, r7, #16
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f00b f9c1 	bl	800c998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <HAL_InitTick+0x6a>
 8001620:	e001      	b.n	8001626 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e02b      	b.n	800167e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001626:	f00b f98b 	bl	800c940 <HAL_RCC_GetPCLK1Freq>
 800162a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800162c:	e004      	b.n	8001638 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162e:	f00b f987 	bl	800c940 <HAL_RCC_GetPCLK1Freq>
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_InitTick+0xcc>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	3b01      	subs	r3, #1
 8001644:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_InitTick+0xd0>)
 8001648:	4a13      	ldr	r2, [pc, #76]	; (8001698 <HAL_InitTick+0xd4>)
 800164a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_InitTick+0xd0>)
 800164e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001652:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_InitTick+0xd0>)
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_InitTick+0xd0>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_InitTick+0xd0>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_InitTick+0xd0>)
 8001668:	f00c ffb8 	bl	800e5dc <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <HAL_InitTick+0xd0>)
 8001674:	f00d f814 	bl	800e6a0 <HAL_TIM_Base_Start_IT>
 8001678:	4603      	mov	r3, r0
 800167a:	e000      	b.n	800167e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	3740      	adds	r7, #64	; 0x40
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24000044 	.word	0x24000044
 800168c:	58024400 	.word	0x58024400
 8001690:	431bde83 	.word	0x431bde83
 8001694:	240003b0 	.word	0x240003b0
 8001698:	40001000 	.word	0x40001000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80016cc:	2004      	movs	r0, #4
 80016ce:	f007 ff5e 	bl	800958e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80016da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016de:	f007 ff56 	bl	800958e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f00d f84f 	bl	800e790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	240003b0 	.word	0x240003b0

080016fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <LTDC_IRQHandler+0x10>)
 8001702:	f008 fe87 	bl	800a414 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2400020c 	.word	0x2400020c

08001710 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA2D_IRQHandler+0x10>)
 8001716:	f007 fa8f 	bl	8008c38 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000150 	.word	0x24000150

08001724 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OCTOSPI1_IRQHandler+0x10>)
 800172a:	f009 faa1 	bl	800ac70 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	240002b4 	.word	0x240002b4

08001738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return 1;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_kill>:

int _kill(int pid, int sig)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001752:	f021 fd8d 	bl	8023270 <__errno>
 8001756:	4603      	mov	r3, r0
 8001758:	2216      	movs	r2, #22
 800175a:	601a      	str	r2, [r3, #0]
  return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_exit>:

void _exit (int status)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ffe7 	bl	8001748 <_kill>
  while (1) {}    /* Make sure we hang here */
 800177a:	e7fe      	b.n	800177a <_exit+0x12>

0800177c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00a      	b.n	80017a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178e:	f3af 8000 	nop.w
 8001792:	4601      	mov	r1, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf0      	blt.n	800178e <_read+0x12>
  }

  return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e009      	b.n	80017dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf1      	blt.n	80017c8 <_write+0x12>
  }
  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_close>:

int _close(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001816:	605a      	str	r2, [r3, #4]
  return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_isatty>:

int _isatty(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f021 fcf2 	bl	8023270 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	24040000 	.word	0x24040000
 80018b8:	00001000 	.word	0x00001000
 80018bc:	240003fc 	.word	0x240003fc
 80018c0:	24007650 	.word	0x24007650

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f006 fdda 	bl	8008480 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f021 fcc3 	bl	802327c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7fe fec9 	bl	800068c <main>
  bx  lr
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001900:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001904:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8001908:	08025858 	.word	0x08025858
  ldr r2, =_sbss
 800190c:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8001910:	2400764c 	.word	0x2400764c

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>

08001916 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001928:	f001 fd4e 	bl	80033c8 <touchgfx_components_init>
  touchgfx_init();
 800192c:	f001 fd22 	bl	8003374 <touchgfx_init>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800193c:	f001 fd4c 	bl	80033d8 <touchgfx_taskEntry>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    {
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
    }
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	080248c0 	.word	0x080248c0

08001968 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    }
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffe9 	bl	8001948 <_ZN8touchgfx15TouchControllerD1Ev>
 8001976:	2104      	movs	r1, #4
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f021 f9a2 	bl	8022cc2 <_ZdlPvj>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8001990:	2308      	movs	r3, #8
 8001992:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_ZN20STM32TouchController4initEv+0x30>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_ZN20STM32TouchController4initEv+0x34>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	4619      	mov	r1, r3
 80019aa:	2000      	movs	r0, #0
 80019ac:	f006 fb4a 	bl	8008044 <BSP_TS_Init>
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24006a36 	.word	0x24006a36
 80019bc:	24006a38 	.word	0x24006a38

080019c0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	2000      	movs	r0, #0
 80019e0:	f006 fbd6 	bl	8008190 <BSP_TS_GetState>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a06:	bf00      	nop
    {
        configASSERT(0);
 8001a08:	e7fe      	b.n	8001a08 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]

        return true;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff81 	bl	8001948 <_ZN8touchgfx15TouchControllerD1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	080248a8 	.word	0x080248a8

08001a54 <_ZN20STM32TouchControllerD0Ev>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_ZN20STM32TouchControllerD1Ev>
 8001a62:	2104      	movs	r1, #4
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f021 f92c 	bl	8022cc2 <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d826      	bhi.n	8001ae2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
 8001a94:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001abb 	.word	0x08001abb
 8001aa4:	08001ac9 	.word	0x08001ac9
 8001aa8:	08001ad7 	.word	0x08001ad7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8001ab4:	f007 fd38 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001ab8:	e013      	b.n	8001ae2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8001ac2:	f007 fd31 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001ac6:	e00c      	b.n	8001ae2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ace:	4808      	ldr	r0, [pc, #32]	; (8001af0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8001ad0:	f007 fd2a 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001ad4:	e005      	b.n	8001ae2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8001adc:	f007 fd24 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001ae0:	bf00      	nop
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020400 	.word	0x58020400
 8001af4:	58022000 	.word	0x58022000

08001af8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d826      	bhi.n	8001b56 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b2f 	.word	0x08001b2f
 8001b18:	08001b3d 	.word	0x08001b3d
 8001b1c:	08001b4b 	.word	0x08001b4b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001b28:	f007 fcfe 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001b2c:	e013      	b.n	8001b56 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001b36:	f007 fcf7 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001b3a:	e00c      	b.n	8001b56 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001b44:	f007 fcf0 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001b48:	e005      	b.n	8001b56 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x70>)
 8001b50:	f007 fcea 	bl	8009528 <HAL_GPIO_WritePin>
#endif
        break;
 8001b54:	bf00      	nop
    }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	58020000 	.word	0x58020000
 8001b64:	58020400 	.word	0x58020400
 8001b68:	58022000 	.word	0x58022000

08001b6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d822      	bhi.n	8001bc2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001ba1 	.word	0x08001ba1
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001bb9 	.word	0x08001bb9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8001b9a:	f007 fcde 	bl	800955a <HAL_GPIO_TogglePin>
#endif
        break;
 8001b9e:	e010      	b.n	8001bc2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8001ba6:	f007 fcd8 	bl	800955a <HAL_GPIO_TogglePin>
#endif
        break;
 8001baa:	e00a      	b.n	8001bc2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8001bb2:	f007 fcd2 	bl	800955a <HAL_GPIO_TogglePin>
#endif
        break;
 8001bb6:	e004      	b.n	8001bc2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>)
 8001bbc:	f007 fccd 	bl	800955a <HAL_GPIO_TogglePin>
#endif
        break;
 8001bc0:	bf00      	nop
    }
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	58020000 	.word	0x58020000
 8001bd0:	58020400 	.word	0x58020400
 8001bd4:	58022000 	.word	0x58022000

08001bd8 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    {
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
    }
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	08025154 	.word	0x08025154

08001bf8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    }
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe9 	bl	8001bd8 <_ZN8touchgfx3HALD1Ev>
 8001c06:	217c      	movs	r1, #124	; 0x7c
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f021 f85a 	bl	8022cc2 <_ZdlPvj>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d304      	bcc.n	8001c64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	883a      	ldrh	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d205      	bcs.n	8001c70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001c68:	219e      	movs	r1, #158	; 0x9e
 8001c6a:	480a      	ldr	r0, [pc, #40]	; (8001c94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001c6c:	f021 f858 	bl	8022d20 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001c70:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001c78:	883b      	ldrh	r3, [r7, #0]
 8001c7a:	8013      	strh	r3, [r2, #0]
    }
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24006a30 	.word	0x24006a30
 8001c88:	24006a32 	.word	0x24006a32
 8001c8c:	08023dc4 	.word	0x08023dc4
 8001c90:	08023e28 	.word	0x08023e28
 8001c94:	08023e6c 	.word	0x08023e6c
 8001c98:	24006a36 	.word	0x24006a36
 8001c9c:	24006a38 	.word	0x24006a38

08001ca0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4798      	blx	r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	e000      	b.n	8001cc8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001cc6:	2300      	movs	r3, #0
    }
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f012 fe2d 	bl	8014938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	33ac      	adds	r3, #172	; 0xac
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
    }
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001cfc:	2300      	movs	r3, #0
    }
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001d24:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001d2a:	f020 fff9 	bl	8022d20 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001d48:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	338c      	adds	r3, #140	; 0x8c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	4798      	blx	r3
    }
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	08023eb4 	.word	0x08023eb4
 8001d64:	08023eec 	.word	0x08023eec
 8001d68:	08023e6c 	.word	0x08023e6c
 8001d6c:	24006a3a 	.word	0x24006a3a

08001d70 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001d8e:	701a      	strb	r2, [r3, #0]
    }
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	24006a3b 	.word	0x24006a3b

08001da0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001da8:	2300      	movs	r3, #0
    }
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4798      	blx	r3
        }
    }
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3318      	adds	r3, #24
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4798      	blx	r3
 8001e0e:	4603      	mov	r3, r0
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d011      	beq.n	8001e54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11e      	bne.n	8001e76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e44:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001e52:	e010      	b.n	8001e76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00c      	beq.n	8001e76 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001e68:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
    }
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	24006a34 	.word	0x24006a34
 8001e88:	24006a32 	.word	0x24006a32
 8001e8c:	24006a30 	.word	0x24006a30

08001e90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f011 ffaa 	bl	8013df4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe8d 	bl	8001bd8 <_ZN8touchgfx3HALD1Ev>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	08024c60 	.word	0x08024c60

08001ecc <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001eda:	217c      	movs	r1, #124	; 0x7c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f020 fef0 	bl	8022cc2 <_ZdlPvj>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffca 	bl	8001e90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 fd4e 	bl	80039b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3380      	adds	r3, #128	; 0x80
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
    enableInterrupts();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3378      	adds	r3, #120	; 0x78
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001f3c:	f000 f954 	bl	80021e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3370      	adds	r3, #112	; 0x70
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8001f54:	f007 fae8 	bl	8009528 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001f5e:	f007 fae3 	bl	8009528 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2102      	movs	r1, #2
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001f68:	f007 fade 	bl	8009528 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001f6c:	f000 f93c 	bl	80021e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3370      	adds	r3, #112	; 0x70
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8001f7e:	e7f5      	b.n	8001f6c <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8001f80:	58022800 	.word	0x58022800
 8001f84:	58020000 	.word	0x58020000

08001f88 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fda4 	bl	8003ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fda3 	bl	8003afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 fdaa 	bl	8003b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fdc:	f3bf 8f4f 	dsb	sy
}
 8001fe0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fe8:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	0b5b      	lsrs	r3, r3, #13
 8001fee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ff2:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002006:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800200c:	4911      	ldr	r1, [pc, #68]	; (8002054 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e5a      	subs	r2, r3, #1
 8002018:	60fa      	str	r2, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ea      	bne.n	8001ffe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	613a      	str	r2, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1db      	bne.n	8001ff4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800203c:	f3bf 8f4f 	dsb	sy
}
 8002040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002042:	f3bf 8f6f 	isb	sy
}
 8002046:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002048:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f001 fcc8 	bl	80039f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 fccc 	bl	8003a18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fcce 	bl	8003a34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fcd0 	bl	8003a50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff feed 	bl	8001ea8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	080248d8 	.word	0x080248d8

080020dc <_ZN11TouchGFXHALD0Ev>:
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffe7 	bl	80020b8 <_ZN11TouchGFXHALD1Ev>
 80020ea:	217c      	movs	r1, #124	; 0x7c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f020 fde8 	bl	8022cc2 <_ZdlPvj>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002100:	2200      	movs	r2, #0
 8002102:	2101      	movs	r1, #1
 8002104:	2001      	movs	r0, #1
 8002106:	f00e f8e6 	bl	80102d6 <osSemaphoreNew>
 800210a:	4603      	mov	r3, r0
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800210e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800211c:	2128      	movs	r1, #40	; 0x28
 800211e:	480e      	ldr	r0, [pc, #56]	; (8002158 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002120:	f020 fdfe 	bl	8022d20 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002124:	2200      	movs	r2, #0
 8002126:	2104      	movs	r1, #4
 8002128:	2001      	movs	r0, #1
 800212a:	f00e f9f3 	bl	8010514 <osMessageQueueNew>
 800212e:	4603      	mov	r3, r0
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002132:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002144:	f020 fdec 	bl	8022d20 <__assert_func>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000400 	.word	0x24000400
 8002150:	08023f3c 	.word	0x08023f3c
 8002154:	08023f88 	.word	0x08023f88
 8002158:	08023fb8 	.word	0x08023fb8
 800215c:	24000404 	.word	0x24000404
 8002160:	0802404c 	.word	0x0802404c

08002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	4618      	mov	r0, r3
 8002172:	f00e f939 	bl	80103e8 <osSemaphoreAcquire>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000400 	.word	0x24000400

08002180 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f00e f97f 	bl	801048c <osSemaphoreRelease>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	24000400 	.word	0x24000400

08002198 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00e f920 	bl	80103e8 <osSemaphoreAcquire>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	24000400 	.word	0x24000400

080021b0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00e f967 	bl	801048c <osSemaphoreRelease>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	24000400 	.word	0x24000400

080021c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80021d6:	f00e fa11 	bl	80105fc <osMessageQueuePut>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24000404 	.word	0x24000404
 80021e4:	24000004 	.word	0x24000004

080021e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	1d39      	adds	r1, r7, #4
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	f00e fa60 	bl	80106bc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	1d39      	adds	r1, r7, #4
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	2200      	movs	r2, #0
 8002208:	f00e fa58 	bl	80106bc <osMessageQueueGet>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	24000404 	.word	0x24000404

08002218 <__NVIC_EnableIRQ>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_DisableIRQ>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db12      	blt.n	800228c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	490a      	ldr	r1, [pc, #40]	; (8002298 <__NVIC_DisableIRQ+0x44>)
 800226e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	3320      	adds	r3, #32
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002280:	f3bf 8f4f 	dsb	sy
}
 8002284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002286:	f3bf 8f6f 	isb	sy
}
 800228a:	bf00      	nop
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
        : color(0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    {
    }
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    {
        return color;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
    }
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    {
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
    }
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	08024a00 	.word	0x08024a00

080022f0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    }
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffe9 	bl	80022d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80022fe:	2104      	movs	r1, #4
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f020 fcde 	bl	8022cc2 <_ZdlPvj>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3344      	adds	r3, #68	; 0x44
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
    }
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    {
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
    }
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	0802522c 	.word	0x0802522c

0800234c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    }
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffe9 	bl	800232c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800235a:	210c      	movs	r1, #12
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f020 fcb0 	bl	8022cc2 <_ZdlPvj>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	721a      	strb	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	725a      	strb	r2, [r3, #9]
    {
    }
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	0802522c 	.word	0x0802522c

080023a0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80023a8:	2301      	movs	r3, #1
    }
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3328      	adds	r3, #40	; 0x28
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
    }
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
        return instance;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
    }
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	24006a3c 	.word	0x24006a3c

080023ec <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3314      	adds	r3, #20
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4610      	mov	r0, r2
 8002404:	4798      	blx	r3
    }
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002416:	f7ff ffdd 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ffe5 	bl	80023ec <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	330c      	adds	r3, #12
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff30 	bl	800229c <_ZN8touchgfx9colortypeC1Ev>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	330c      	adds	r3, #12
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff ff87 	bl	800236c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <_ZN8STM32DMAC1Ev+0x50>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 000c 	add.w	r0, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3320      	adds	r3, #32
 800246e:	2260      	movs	r2, #96	; 0x60
 8002470:	4619      	mov	r1, r3
 8002472:	f012 fb9b 	bl	8014bac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3320      	adds	r3, #32
 800247a:	245f      	movs	r4, #95	; 0x5f
 800247c:	461d      	mov	r5, r3
 800247e:	e004      	b.n	800248a <_ZN8STM32DMAC1Ev+0x42>
 8002480:	4628      	mov	r0, r5
 8002482:	f7ff ffd2 	bl	800242a <_ZN8touchgfx6BlitOpC1Ev>
 8002486:	3524      	adds	r5, #36	; 0x24
 8002488:	3c01      	subs	r4, #1
 800248a:	2c00      	cmp	r4, #0
 800248c:	daf8      	bge.n	8002480 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}
 8002498:	080249b0 	.word	0x080249b0

0800249c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	4a09      	ldr	r2, [pc, #36]	; (80024cc <_ZN8STM32DMAD1Ev+0x30>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80024aa:	205a      	movs	r0, #90	; 0x5a
 80024ac:	f7ff fed2 	bl	8002254 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	330c      	adds	r3, #12
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fab3 	bl	8002a20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff35 	bl	800232c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	080249b0 	.word	0x080249b0

080024d0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
}
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ffdf 	bl	800249c <_ZN8STM32DMAD1Ev>
 80024de:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f020 fbed 	bl	8022cc2 <_ZdlPvj>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 80024fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 800250e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 8002528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <_ZN8STM32DMA10initializeEv+0x54>)
 800252c:	f023 0310 	bic.w	r3, r3, #16
 8002530:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <_ZN8STM32DMA10initializeEv+0x58>)
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002536:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002538:	205a      	movs	r0, #90	; 0x5a
 800253a:	f7ff fe6d 	bl	8002218 <__NVIC_EnableIRQ>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	58024400 	.word	0x58024400
 800254c:	24000150 	.word	0x24000150
 8002550:	0800240f 	.word	0x0800240f

08002554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b0b      	cmp	r3, #11
 8002568:	d826      	bhi.n	80025b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	080025ad 	.word	0x080025ad
 8002574:	080025a7 	.word	0x080025a7
 8002578:	080025a1 	.word	0x080025a1
 800257c:	080025b9 	.word	0x080025b9
 8002580:	080025b9 	.word	0x080025b9
 8002584:	080025b9 	.word	0x080025b9
 8002588:	080025b9 	.word	0x080025b9
 800258c:	080025b3 	.word	0x080025b3
 8002590:	080025b3 	.word	0x080025b3
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025b3 	.word	0x080025b3
 800259c:	080025b3 	.word	0x080025b3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
        break;
 80025a4:	e00e      	b.n	80025c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80025a6:	2301      	movs	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e00b      	b.n	80025c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60fb      	str	r3, [r7, #12]
        break;
 80025b0:	e008      	b.n	80025c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80025b2:	2305      	movs	r3, #5
 80025b4:	60fb      	str	r3, [r7, #12]
        break;
 80025b6:	e005      	b.n	80025c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80025ba:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80025bc:	2165      	movs	r1, #101	; 0x65
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80025c0:	f020 fbae 	bl	8022d20 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	08024090 	.word	0x08024090
 80025d4:	080240ac 	.word	0x080240ac
 80025d8:	080240f8 	.word	0x080240f8

080025dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b0a      	cmp	r3, #10
 80025f0:	d821      	bhi.n	8002636 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002631 	.word	0x08002631
 80025fc:	0800262b 	.word	0x0800262b
 8002600:	08002625 	.word	0x08002625
 8002604:	08002637 	.word	0x08002637
 8002608:	08002637 	.word	0x08002637
 800260c:	08002637 	.word	0x08002637
 8002610:	08002637 	.word	0x08002637
 8002614:	0800262b 	.word	0x0800262b
 8002618:	0800262b 	.word	0x0800262b
 800261c:	0800262b 	.word	0x0800262b
 8002620:	0800262b 	.word	0x0800262b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
        break;
 8002628:	e00b      	b.n	8002642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800262a:	2301      	movs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
        break;
 800262e:	e008      	b.n	8002642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002630:	2302      	movs	r3, #2
 8002632:	60fb      	str	r3, [r7, #12]
        break;
 8002634:	e005      	b.n	8002642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800263a:	2186      	movs	r1, #134	; 0x86
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800263e:	f020 fb6f 	bl	8022d20 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	08024090 	.word	0x08024090
 8002650:	0802418c 	.word	0x0802418c
 8002654:	080240f8 	.word	0x080240f8

08002658 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002660:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	7f5b      	ldrb	r3, [r3, #29]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff67 	bl	8002554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002686:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	7f9b      	ldrb	r3, [r3, #30]
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff60 	bl	8002554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002694:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7f9b      	ldrb	r3, [r3, #30]
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff9d 	bl	80025dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80026a2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	8b5b      	ldrh	r3, [r3, #26]
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	8a9b      	ldrh	r3, [r3, #20]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	8b5b      	ldrh	r3, [r3, #26]
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	8a9b      	ldrh	r3, [r3, #20]
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	4b8e      	ldr	r3, [pc, #568]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026c2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	8b1b      	ldrh	r3, [r3, #24]
 80026c8:	461a      	mov	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	8a9b      	ldrh	r3, [r3, #20]
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026d2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80026d4:	4a89      	ldr	r2, [pc, #548]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	8adb      	ldrh	r3, [r3, #22]
 80026de:	461a      	mov	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	8a9b      	ldrh	r3, [r3, #20]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	4b84      	ldr	r3, [pc, #528]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	4b82      	ldr	r3, [pc, #520]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4b80      	ldr	r3, [pc, #512]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026fa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d037      	beq.n	8002776 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270a:	f200 80e3 	bhi.w	80028d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	d015      	beq.n	8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	f200 80dc 	bhi.w	80028d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d045      	beq.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	f200 80d7 	bhi.w	80028d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	f000 80bf 	beq.w	80028aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	f200 80d1 	bhi.w	80028d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002732:	2b04      	cmp	r3, #4
 8002734:	f000 80a4 	beq.w	8002880 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002738:	2b20      	cmp	r3, #32
 800273a:	f000 80b6 	beq.w	80028aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800273e:	e0c9      	b.n	80028d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	7f1b      	ldrb	r3, [r3, #28]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4619      	mov	r1, r3
 8002748:	4a6c      	ldr	r2, [pc, #432]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800274a:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800274c:	430b      	orrs	r3, r1
 800274e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	4c69      	ldr	r4, [pc, #420]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fdae 	bl	80022b8 <_ZNK8touchgfx9colortypecvmEv>
 800275c:	4603      	mov	r3, r0
 800275e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002760:	4a66      	ldr	r2, [pc, #408]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	4b64      	ldr	r3, [pc, #400]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800276c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002770:	4a64      	ldr	r2, [pc, #400]	; (8002904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002772:	601a      	str	r2, [r3, #0]
        break;
 8002774:	e0d9      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	4619      	mov	r1, r3
 800277e:	4a5f      	ldr	r2, [pc, #380]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002782:	430b      	orrs	r3, r1
 8002784:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	4c5c      	ldr	r4, [pc, #368]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fd93 	bl	80022b8 <_ZNK8touchgfx9colortypecvmEv>
 8002792:	4603      	mov	r3, r0
 8002794:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002796:	4a59      	ldr	r2, [pc, #356]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	4b56      	ldr	r3, [pc, #344]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027a2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80027a4:	4b55      	ldr	r3, [pc, #340]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027a6:	4a57      	ldr	r2, [pc, #348]	; (8002904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80027a8:	601a      	str	r2, [r3, #0]
        break;
 80027aa:	e0be      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 80027b2:	2301      	movs	r3, #1
 80027b4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7f1b      	ldrb	r3, [r3, #28]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	461a      	mov	r2, r3
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4a4e      	ldr	r2, [pc, #312]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027ca:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	4b49      	ldr	r3, [pc, #292]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027d6:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	4b47      	ldr	r3, [pc, #284]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00d      	beq.n	800280a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 80027ee:	e020      	b.n	8002832 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80027f0:	4b42      	ldr	r3, [pc, #264]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	8852      	ldrh	r2, [r2, #2]
 80027fc:	3a01      	subs	r2, #1
 80027fe:	0212      	lsls	r2, r2, #8
 8002800:	4611      	mov	r1, r2
 8002802:	4a3e      	ldr	r2, [pc, #248]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002804:	430b      	orrs	r3, r1
 8002806:	61d3      	str	r3, [r2, #28]
                break;
 8002808:	e01a      	b.n	8002840 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7f1b      	ldrb	r3, [r3, #28]
 800280e:	2bff      	cmp	r3, #255	; 0xff
 8002810:	d101      	bne.n	8002816 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002812:	2300      	movs	r3, #0
 8002814:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800281c:	4013      	ands	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	8852      	ldrh	r2, [r2, #2]
 8002822:	3a01      	subs	r2, #1
 8002824:	0212      	lsls	r2, r2, #8
 8002826:	4313      	orrs	r3, r2
 8002828:	4a34      	ldr	r2, [pc, #208]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800282a:	f043 0310 	orr.w	r3, r3, #16
 800282e:	61d3      	str	r3, [r2, #28]
                break;
 8002830:	e006      	b.n	8002840 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002832:	4b37      	ldr	r3, [pc, #220]	; (8002910 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002834:	4a37      	ldr	r2, [pc, #220]	; (8002914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800283a:	4837      	ldr	r0, [pc, #220]	; (8002918 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800283c:	f020 fa70 	bl	8022d20 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002846:	f043 0320 	orr.w	r3, r3, #32
 800284a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800284c:	bf00      	nop
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f4      	bne.n	800284e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002866:	2210      	movs	r2, #16
 8002868:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002874:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002876:	e058      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800287a:	4a28      	ldr	r2, [pc, #160]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800287c:	601a      	str	r2, [r3, #0]
        break;
 800287e:	e054      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	7f1b      	ldrb	r3, [r3, #28]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	461a      	mov	r2, r3
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028a0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028a4:	4a17      	ldr	r2, [pc, #92]	; (8002904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80028a6:	601a      	str	r2, [r3, #0]
        break;
 80028a8:	e03f      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	7f1b      	ldrb	r3, [r3, #28]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	461a      	mov	r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	4a11      	ldr	r2, [pc, #68]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028bc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028ca:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80028d0:	601a      	str	r2, [r3, #0]
        break;
 80028d2:	e02a      	b.n	800292a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	461a      	mov	r2, r3
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7f5a      	ldrb	r2, [r3, #29]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7f9b      	ldrb	r3, [r3, #30]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d015      	beq.n	8002920 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80028f4:	4b01      	ldr	r3, [pc, #4]	; (80028fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80028f8:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80028fa:	e015      	b.n	8002928 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 80028fc:	52001000 	.word	0x52001000
 8002900:	0002000a 	.word	0x0002000a
 8002904:	00020201 	.word	0x00020201
 8002908:	00020009 	.word	0x00020009
 800290c:	ffff00ef 	.word	0xffff00ef
 8002910:	080241d8 	.word	0x080241d8
 8002914:	080241f4 	.word	0x080241f4
 8002918:	080240f8 	.word	0x080240f8
 800291c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002922:	f240 2201 	movw	r2, #513	; 0x201
 8002926:	601a      	str	r2, [r3, #0]
        break;
 8002928:	bf00      	nop
    }
}
 800292a:	bf00      	nop
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	52001000 	.word	0x52001000

08002938 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7f9b      	ldrb	r3, [r3, #30]
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fe47 	bl	80025dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800294e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002950:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	8adb      	ldrh	r3, [r3, #22]
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	8a9b      	ldrh	r3, [r3, #20]
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	8b5b      	ldrh	r3, [r3, #26]
 8002974:	461a      	mov	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	8a9b      	ldrh	r3, [r3, #20]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d12e      	bne.n	80029e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	8b5b      	ldrh	r3, [r3, #26]
 800298c:	461a      	mov	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	8a9b      	ldrh	r3, [r3, #20]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002996:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	8b5b      	ldrh	r3, [r3, #26]
 800299c:	461a      	mov	r2, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	8a9b      	ldrh	r3, [r3, #20]
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80029a8:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7f1b      	ldrb	r3, [r3, #28]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80029ba:	430b      	orrs	r3, r1
 80029bc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	4c13      	ldr	r4, [pc, #76]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fc77 	bl	80022b8 <_ZNK8touchgfx9colortypecvmEv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029d4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029dc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80029e2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80029e4:	e010      	b.n	8002a08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	4c06      	ldr	r4, [pc, #24]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fc5d 	bl	80022b8 <_ZNK8touchgfx9colortypecvmEv>
 80029fe:	4603      	mov	r3, r0
 8002a00:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002a04:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	52001000 	.word	0x52001000
 8002a14:	00010009 	.word	0x00010009
 8002a18:	00020201 	.word	0x00020201
 8002a1c:	00030201 	.word	0x00030201

08002a20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fc4d 	bl	80022d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	0802527c 	.word	0x0802527c

08002a44 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffe7 	bl	8002a20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002a52:	2114      	movs	r1, #20
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f020 f934 	bl	8022cc2 <_ZdlPvj>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	805a      	strh	r2, [r3, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	809a      	strh	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	80da      	strh	r2, [r3, #6]
    {
    }
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
    }
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	24006a98 	.word	0x24006a98

08002ab4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    {
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
    }
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	08024c4c 	.word	0x08024c4c

08002ad4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    }
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ffe9 	bl	8002ab4 <_ZN8touchgfx12FontProviderD1Ev>
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f020 f8ec 	bl	8022cc2 <_ZdlPvj>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	611a      	str	r2, [r3, #16]
    {
    }
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08024c3c 	.word	0x08024c3c

08002b34 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    {
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
    }
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	08024c3c 	.word	0x08024c3c

08002b54 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    }
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe9 	bl	8002b34 <_ZN8touchgfx7MVPHeapD1Ev>
 8002b62:	2114      	movs	r1, #20
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f020 f8ac 	bl	8022cc2 <_ZdlPvj>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
    {
    }
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
    {
    }
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    {
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
    }
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	08024c14 	.word	0x08024c14

08002c18 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    }
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe9 	bl	8002bf8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002c26:	2104      	movs	r1, #4
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f020 f84a 	bl	8022cc2 <_ZdlPvj>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    {
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]
    }
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	08025398 	.word	0x08025398

08002c58 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
    }
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffe9 	bl	8002c38 <_ZN8touchgfx3LCDD1Ev>
 8002c66:	2108      	movs	r1, #8
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f020 f82a 	bl	8022cc2 <_ZdlPvj>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    {
    }
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002cb6:	6810      	ldr	r0, [r2, #0]
 8002cb8:	6851      	ldr	r1, [r2, #4]
 8002cba:	c303      	stmia	r3!, {r0, r1}
    }
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    {
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
    }
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	08024bfc 	.word	0x08024bfc

08002ce8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    }
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ffe9 	bl	8002cc8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f01f ffe2 	bl	8022cc2 <_ZdlPvj>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	739a      	strb	r2, [r3, #14]
        {
        }
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ffd5 	bl	8002d08 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	829a      	strh	r2, [r3, #20]
    {
    }
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002d82:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
          gestures(),
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	331c      	adds	r3, #28
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ffcc 	bl	8002d4e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3350      	adds	r3, #80	; 0x50
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fe2f 	bl	8002a64 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002e96:	8b3b      	ldrh	r3, [r7, #24]
 8002e98:	8013      	strh	r3, [r2, #0]
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002ea0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002ea4:	8bbb      	ldrh	r3, [r7, #28]
 8002ea6:	8013      	strh	r3, [r2, #0]
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002eae:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002eb6:	8b3a      	ldrh	r2, [r7, #24]
 8002eb8:	8bbb      	ldrh	r3, [r7, #28]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf34      	ite	cc
 8002ebe:	2301      	movcc	r3, #1
 8002ec0:	2300      	movcs	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	08025154 	.word	0x08025154
 8002edc:	24006a3c 	.word	0x24006a3c
 8002ee0:	24006a30 	.word	0x24006a30
 8002ee4:	24006a36 	.word	0x24006a36
 8002ee8:	24006a32 	.word	0x24006a32
 8002eec:	24006a38 	.word	0x24006a38
 8002ef0:	24006a34 	.word	0x24006a34

08002ef4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe77 	bl	8002bf8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	080253f0 	.word	0x080253f0

08002f18 <_ZN8touchgfx11ApplicationD0Ev>:
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffe7 	bl	8002ef4 <_ZN8touchgfx11ApplicationD1Ev>
 8002f26:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f01f fec9 	bl	8022cc2 <_ZdlPvj>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f804 	bl	8002f50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00f      	beq.n	8002f82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4610      	mov	r0, r2
 8002f76:	4798      	blx	r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3308      	adds	r3, #8
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff97 	bl	8002ef4 <_ZN8touchgfx11ApplicationD1Ev>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	08024ba8 	.word	0x08024ba8

08002fd4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ffe7 	bl	8002fb0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002fe2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f01f fe6b 	bl	8022cc2 <_ZdlPvj>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	4a08      	ldr	r2, [pc, #32]	; (8003024 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fb19 	bl	8003644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ffcb 	bl	8002fb0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	08024b3c 	.word	0x08024b3c

08003028 <_ZN23FrontendApplicationBaseD0Ev>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe1 	bl	8002ff8 <_ZN23FrontendApplicationBaseD1Ev>
 8003036:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f01f fe41 	bl	8022cc2 <_ZdlPvj>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f001 f8f4 	bl	8004240 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_ZN19FrontendApplicationD1Ev+0x20>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ffc1 	bl	8002ff8 <_ZN23FrontendApplicationBaseD1Ev>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	08024ae8 	.word	0x08024ae8

08003084 <_ZN19FrontendApplicationD0Ev>:
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ffe7 	bl	8003060 <_ZN19FrontendApplicationD1Ev>
 8003092:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f01f fe13 	bl	8022cc2 <_ZdlPvj>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 fbbb 	bl	8005830 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f013 feeb 	bl	8016e98 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f8b2 	bl	8004240 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	f7ff fcf9 	bl	8002af4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]
    {

    }
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08024ad4 	.word	0x08024ad4

08003118 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
 800311c:	4801      	ldr	r0, [pc, #4]	; (8003124 <__tcf_0+0xc>)
 800311e:	f000 f965 	bl	80033ec <_ZN12FrontendHeapD1Ev>
 8003122:	bd80      	pop	{r7, pc}
 8003124:	24000408 	.word	0x24000408

08003128 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3bf 8f5b 	dmb	ish
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003146:	480b      	ldr	r0, [pc, #44]	; (8003174 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003148:	f01f fdbd 	bl	8022cc6 <__cxa_guard_acquire>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800315c:	4806      	ldr	r0, [pc, #24]	; (8003178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800315e:	f000 f867 	bl	8003230 <_ZN12FrontendHeapC1Ev>
 8003162:	4806      	ldr	r0, [pc, #24]	; (800317c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003164:	f01f fdfa 	bl	8022d5c <atexit>
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800316a:	f01f fdb8 	bl	8022cde <__cxa_guard_release>
        return instance;
 800316e:	4b02      	ldr	r3, [pc, #8]	; (8003178 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	24000690 	.word	0x24000690
 8003178:	24000408 	.word	0x24000408
 800317c:	08003119 	.word	0x08003119

08003180 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fccf 	bl	8002b34 <_ZN8touchgfx7MVPHeapD1Ev>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08024ad4 	.word	0x08024ad4

080031a4 <_ZN16FrontendHeapBaseD0Ev>:
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffe7 	bl	8003180 <_ZN16FrontendHeapBaseD1Ev>
 80031b2:	2114      	movs	r1, #20
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f01f fd84 	bl	8022cc2 <_ZdlPvj>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f010 fb6e 	bl	80138b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031d4:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	08024aa0 	.word	0x08024aa0

080031e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f010 fb5c 	bl	80138b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031f8:	4a03      	ldr	r2, [pc, #12]	; (8003208 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	08024a6c 	.word	0x08024a6c

0800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	f010 fb4a 	bl	80138b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08024a38 	.word	0x08024a38

08003230 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b085      	sub	sp, #20
 8003234:	af02      	add	r7, sp, #8
 8003236:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f103 0114 	add.w	r1, r3, #20
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4623      	mov	r3, r4
 8003256:	f7ff ff45 	bl	80030e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800325a:	4a18      	ldr	r2, [pc, #96]	; (80032bc <_ZN12FrontendHeapC1Ev+0x8c>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3314      	adds	r3, #20
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ffad 	bl	80031c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	332c      	adds	r3, #44	; 0x2c
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ffba 	bl	80031e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffc6 	bl	800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fac4 	bl	8005814 <_ZN5ModelC1Ev>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4619      	mov	r1, r3
 800329c:	f002 faa4 	bl	80057e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff ff0d 	bl	80030ca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	08024a24 	.word	0x08024a24

080032c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	8bbb      	ldrh	r3, [r7, #28]
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	8b3b      	ldrh	r3, [r7, #24]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	f7ff fd49 	bl	8002d74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]
    }
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08024c60 	.word	0x08024c60

080032f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	8bbb      	ldrh	r3, [r7, #28]
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	8b3b      	ldrh	r3, [r7, #24]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	f7ff ffd3 	bl	80032c0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]
    }
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	080248d8 	.word	0x080248d8

08003330 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	080248c0 	.word	0x080248c0

08003350 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffe8 	bl	8003330 <_ZN8touchgfx15TouchControllerC1Ev>
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	080248a8 	.word	0x080248a8

08003374 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800337a:	f000 fd09 	bl	8003d90 <_ZN14BitmapDatabase11getInstanceEv>
 800337e:	4604      	mov	r4, r0
 8003380:	f000 fd10 	bl	8003da4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003384:	4603      	mov	r3, r0
 8003386:	4619      	mov	r1, r3
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	2200      	movs	r2, #0
 8003390:	4620      	mov	r0, r4
 8003392:	f016 fa77 	bl	8019884 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003396:	4809      	ldr	r0, [pc, #36]	; (80033bc <touchgfx_init+0x48>)
 8003398:	f7ff fb7c 	bl	8002a94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800339c:	2000      	movs	r0, #0
 800339e:	f002 f977 	bl	8005690 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80033a2:	4807      	ldr	r0, [pc, #28]	; (80033c0 <touchgfx_init+0x4c>)
 80033a4:	f016 f926 	bl	80195f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80033a8:	f7ff febe 	bl	8003128 <_ZN12FrontendHeap11getInstanceEv>
 80033ac:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <touchgfx_init+0x50>)
 80033b0:	f7fe fda8 	bl	8001f04 <_ZN11TouchGFXHAL10initializeEv>
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	2400149c 	.word	0x2400149c
 80033c0:	24000008 	.word	0x24000008
 80033c4:	240014a0 	.word	0x240014a0

080033c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <touchgfx_taskEntry+0x10>)
 80033de:	f7fe fd9d 	bl	8001f1c <_ZN11TouchGFXHAL9taskEntryEv>
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	240014a0 	.word	0x240014a0

080033ec <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	4a10      	ldr	r2, [pc, #64]	; (8003438 <_ZN12FrontendHeapD1Ev+0x4c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe2d 	bl	8003060 <_ZN19FrontendApplicationD1Ev>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f827 	bl	8003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	332c      	adds	r3, #44	; 0x2c
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f844 	bl	80034a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3314      	adds	r3, #20
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f861 	bl	80034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fea9 	bl	8003180 <_ZN16FrontendHeapBaseD1Ev>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08024a24 	.word	0x08024a24

0800343c <_ZN12FrontendHeapD0Ev>:
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffd1 	bl	80033ec <_ZN12FrontendHeapD1Ev>
 800344a:	f44f 7122 	mov.w	r1, #648	; 0x288
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f01f fc37 	bl	8022cc2 <_ZdlPvj>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4a05      	ldr	r2, [pc, #20]	; (8003480 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f010 fa1c 	bl	80138ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	08024a38 	.word	0x08024a38

08003484 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ffe7 	bl	8003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003492:	2114      	movs	r1, #20
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f01f fc14 	bl	8022cc2 <_ZdlPvj>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f010 f9fa 	bl	80138ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	08024a6c 	.word	0x08024a6c

080034c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ffe7 	bl	80034a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034d6:	21e8      	movs	r1, #232	; 0xe8
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f01f fbf2 	bl	8022cc2 <_ZdlPvj>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	4a05      	ldr	r2, [pc, #20]	; (8003508 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f010 f9d8 	bl	80138ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08024aa0 	.word	0x08024aa0

0800350c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ffe7 	bl	80034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800351a:	2118      	movs	r1, #24
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f01f fbd0 	bl	8022cc2 <_ZdlPvj>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fab9 	bl	8002ab4 <_ZN8touchgfx12FontProviderD1Ev>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	08024d38 	.word	0x08024d38

08003550 <_ZN23ApplicationFontProviderD0Ev>:
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe7 	bl	800352c <_ZN23ApplicationFontProviderD1Ev>
 800355e:	2104      	movs	r1, #4
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f01f fbae 	bl	8022cc2 <_ZdlPvj>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	4a05      	ldr	r2, [pc, #20]	; (8003590 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fb59 	bl	8002c38 <_ZN8touchgfx3LCDD1Ev>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	08025754 	.word	0x08025754

08003594 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ffe7 	bl	8003570 <_ZN8touchgfx8LCD24bppD1Ev>
 80035a2:	2164      	movs	r1, #100	; 0x64
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f01f fb8c 	bl	8022cc2 <_ZdlPvj>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_Z41__static_initialization_and_destruction_0ii>:
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d119      	bne.n	80035f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d114      	bne.n	80035f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80035ce:	4818      	ldr	r0, [pc, #96]	; (8003630 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80035d0:	f7ff febe 	bl	8003350 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80035d4:	4817      	ldr	r0, [pc, #92]	; (8003634 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80035d6:	f7fe ff37 	bl	8002448 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80035da:	4817      	ldr	r0, [pc, #92]	; (8003638 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80035dc:	f019 f9ac 	bl	801c938 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80035e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80035f0:	4910      	ldr	r1, [pc, #64]	; (8003634 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80035f2:	4812      	ldr	r0, [pc, #72]	; (800363c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80035f4:	f7ff fe80 	bl	80032f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003604:	4293      	cmp	r3, r2
 8003606:	d10e      	bne.n	8003626 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003608:	480c      	ldr	r0, [pc, #48]	; (800363c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800360a:	f7fe fd55 	bl	80020b8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800360e:	480c      	ldr	r0, [pc, #48]	; (8003640 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003610:	f7ff ff8c 	bl	800352c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003614:	4808      	ldr	r0, [pc, #32]	; (8003638 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003616:	f7ff ffab 	bl	8003570 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800361a:	4806      	ldr	r0, [pc, #24]	; (8003634 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800361c:	f7fe ff3e 	bl	800249c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003622:	f7fe fa05 	bl	8001a30 <_ZN20STM32TouchControllerD1Ev>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	24000694 	.word	0x24000694
 8003634:	24000698 	.word	0x24000698
 8003638:	24001438 	.word	0x24001438
 800363c:	240014a0 	.word	0x240014a0
 8003640:	24000008 	.word	0x24000008

08003644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb37 	bl	8002cc8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08024b90 	.word	0x08024b90

08003668 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ffe7 	bl	8003644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003676:	2110      	movs	r1, #16
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f01f fb22 	bl	8022cc2 <_ZdlPvj>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003690:	2301      	movs	r3, #1
    }
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80036a6:	230c      	movs	r3, #12
    }
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80036c0:	887a      	ldrh	r2, [r7, #2]
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3308      	adds	r3, #8
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
    }
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3308      	adds	r3, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
    }
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800370c:	2301      	movs	r3, #1
    }
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003722:	23e0      	movs	r3, #224	; 0xe0
    }
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	015b      	lsls	r3, r3, #5
 8003746:	3308      	adds	r3, #8
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
    }
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	015b      	lsls	r3, r3, #5
 800376e:	3308      	adds	r3, #8
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
    }
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003788:	2301      	movs	r3, #1
    }
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800379e:	2310      	movs	r3, #16
    }
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	3308      	adds	r3, #8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
    }
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	3308      	adds	r3, #8
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
    }
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68d2      	ldr	r2, [r2, #12]
 8003800:	1052      	asrs	r2, r2, #1
 8003802:	1899      	adds	r1, r3, r2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	e00a      	b.n	800382c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	1052      	asrs	r2, r2, #1
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4608      	mov	r0, r1
 800382e:	4798      	blx	r3
    }
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003860:	2300      	movs	r3, #0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800386a:	2300      	movs	r3, #0
    }
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_GLOBAL__sub_I_touchgfx_init>:
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
 800387c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003880:	2001      	movs	r0, #1
 8003882:	f7ff fe97 	bl	80035b4 <_Z41__static_initialization_and_destruction_0ii>
 8003886:	bd80      	pop	{r7, pc}

08003888 <_GLOBAL__sub_D_touchgfx_init>:
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
 800388c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff fe8f 	bl	80035b4 <_Z41__static_initialization_and_destruction_0ii>
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3320      	adds	r3, #32
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
    }
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80038c2:	3301      	adds	r3, #1
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <__NVIC_EnableIRQ>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0b      	blt.n	8003902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <__NVIC_EnableIRQ+0x38>)
 80038f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000e100 	.word	0xe000e100

08003914 <__NVIC_DisableIRQ>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db12      	blt.n	800394c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	490a      	ldr	r1, [pc, #40]	; (8003958 <__NVIC_DisableIRQ+0x44>)
 800392e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	3320      	adds	r3, #32
 800393c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003940:	f3bf 8f4f 	dsb	sy
}
 8003944:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003946:	f3bf 8f6f 	isb	sy
}
 800394a:	bf00      	nop
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f010 fa6f 	bl	8013e9e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80039c0:	687d      	ldr	r5, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3364      	adds	r3, #100	; 0x64
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	f013 f9e3 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4619      	mov	r1, r3
 80039d2:	4628      	mov	r0, r5
 80039d4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3388      	adds	r3, #136	; 0x88
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80039e2:	2300      	movs	r3, #0
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80039e6:	47a0      	blx	r4
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	2409fa00 	.word	0x2409fa00
 80039f4:	24040000 	.word	0x24040000

080039f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003a00:	2109      	movs	r1, #9
 8003a02:	205a      	movs	r0, #90	; 0x5a
 8003a04:	f7ff ffaa 	bl	800395c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003a08:	2109      	movs	r1, #9
 8003a0a:	2058      	movs	r0, #88	; 0x58
 8003a0c:	f7ff ffa6 	bl	800395c <__NVIC_SetPriority>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003a20:	205a      	movs	r0, #90	; 0x5a
 8003a22:	f7ff ff59 	bl	80038d8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8003a26:	2058      	movs	r0, #88	; 0x58
 8003a28:	f7ff ff56 	bl	80038d8 <__NVIC_EnableIRQ>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003a3c:	205a      	movs	r0, #90	; 0x5a
 8003a3e:	f7ff ff69 	bl	8003914 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8003a42:	2058      	movs	r0, #88	; 0x58
 8003a44:	f7ff ff66 	bl	8003914 <__NVIC_DisableIRQ>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003a6a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003a7e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	50001000 	.word	0x50001000
 8003aa4:	2400151c 	.word	0x2400151c
 8003aa8:	2400151e 	.word	0x2400151e

08003aac <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f010 f9d8 	bl	8013e6c <_ZN8touchgfx3HAL10beginFrameEv>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f010 f9d7 	bl	8013e84 <_ZN8touchgfx3HAL8endFrameEv>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	50001084 	.word	0x50001084

08003afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003b06:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	50001084 	.word	0x50001084
 8003b24:	50001000 	.word	0x50001000

08003b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f010 f962 	bl	8013e00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	f010 fac2 	bl	80140e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003b5e:	4603      	mov	r3, r0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d03a      	beq.n	8003bfc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b8e:	f3bf 8f4f 	dsb	sy
}
 8003b92:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ba4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bae:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003bb8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003bbe:	4912      	ldr	r1, [pc, #72]	; (8003c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	60fa      	str	r2, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ea      	bne.n	8003bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	613a      	str	r2, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1db      	bne.n	8003ba6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003bee:	f3bf 8f4f 	dsb	sy
}
 8003bf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bf4:	f3bf 8f6f 	isb	sy
}
 8003bf8:	bf00      	nop
}
 8003bfa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03a      	beq.n	8003ca0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c32:	f3bf 8f4f 	dsb	sy
}
 8003c36:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c48:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c52:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003c5c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c62:	4912      	ldr	r1, [pc, #72]	; (8003cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e5a      	subs	r2, r3, #1
 8003c6e:	60fa      	str	r2, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ea      	bne.n	8003c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	613a      	str	r2, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1db      	bne.n	8003c4a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c92:	f3bf 8f4f 	dsb	sy
}
 8003c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c98:	f3bf 8f6f 	isb	sy
}
 8003c9c:	bf00      	nop
}
 8003c9e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003cb8:	f7fe fb8c 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d132      	bne.n	8003d32 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_LTDC_LineEventCallback+0x8c>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <HAL_LTDC_LineEventCallback+0x90>)
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d017      	beq.n	8003d12 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_LTDC_LineEventCallback+0x94>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f006 fc89 	bl	800a600 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003cee:	f7fe fb71 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fddd 	bl	80038b4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003cfa:	f7fe fa65 	bl	80021c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003cfe:	f7fe fb69 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f010 fe17 	bl	8014938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fd feba 	bl	8001a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003d10:	e010      	b.n	8003d34 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_LTDC_LineEventCallback+0x90>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f006 fc71 	bl	800a600 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8003d1e:	f7fe fb59 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fdb7 	bl	8003898 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fd fee4 	bl	8001af8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8003d30:	e000      	b.n	8003d34 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8003d32:	bf00      	nop
        }
    }
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	50001000 	.word	0x50001000
 8003d40:	2400151c 	.word	0x2400151c
 8003d44:	2400151e 	.word	0x2400151e

08003d48 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d010      	beq.n	8003d7c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	dc13      	bgt.n	8003d86 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d005      	beq.n	8003d72 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003d66:	e00e      	b.n	8003d86 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d68:	f001 fd0a 	bl	8005780 <_ZN17TypedTextDatabase8getFontsEv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	e00a      	b.n	8003d88 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d72:	f001 fd05 	bl	8005780 <_ZN17TypedTextDatabase8getFontsEv>
 8003d76:	4603      	mov	r3, r0
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	e005      	b.n	8003d88 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d7c:	f001 fd00 	bl	8005780 <_ZN17TypedTextDatabase8getFontsEv>
 8003d80:	4603      	mov	r3, r0
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	e000      	b.n	8003d88 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003d86:	2300      	movs	r3, #0
    }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	08024d44 	.word	0x08024d44

08003da4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    {
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
    }
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	08024ee8 	.word	0x08024ee8

08003dd4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    }
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ffe9 	bl	8003db4 <_ZN8touchgfx4FontD1Ev>
 8003de2:	2114      	movs	r1, #20
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f01e ff6c 	bl	8022cc2 <_ZdlPvj>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e010      	b.n	8003e2c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	681c      	ldr	r4, [r3, #0]
 8003e1a:	f107 030f 	add.w	r3, r7, #15
 8003e1e:	f107 0210 	add.w	r2, r7, #16
 8003e22:	8879      	ldrh	r1, [r7, #2]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	47a0      	blx	r4
 8003e28:	6178      	str	r0, [r7, #20]
        return glyph;
 8003e2a:	697b      	ldr	r3, [r7, #20]
    }
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}

08003e34 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	89db      	ldrh	r3, [r3, #14]
    }
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8a1b      	ldrh	r3, [r3, #16]
    }
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	88db      	ldrh	r3, [r3, #6]
    }
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	889b      	ldrh	r3, [r3, #4]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7a9b      	ldrb	r3, [r3, #10]
 8003ea0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003ea4:	b2db      	uxtb	r3, r3
    }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7a9b      	ldrb	r3, [r3, #10]
 8003ebe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ec2:	b2db      	uxtb	r3, r3
    }
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff67 	bl	8003db4 <_ZN8touchgfx4FontD1Ev>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	080254ac 	.word	0x080254ac

08003ef4 <_ZN8touchgfx9ConstFontD0Ev>:
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ffe7 	bl	8003ed0 <_ZN8touchgfx9ConstFontD1Ev>
 8003f02:	211c      	movs	r1, #28
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f01e fedc 	bl	8022cc2 <_ZdlPvj>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ffd3 	bl	8003ed0 <_ZN8touchgfx9ConstFontD1Ev>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	08024db8 	.word	0x08024db8

08003f38 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ffe7 	bl	8003f14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f01e feba 	bl	8022cc2 <_ZdlPvj>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    {
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
    }
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	08024d60 	.word	0x08024d60

08003f78 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
    }
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ffe9 	bl	8003f58 <_ZN8touchgfx9TypedTextD1Ev>
 8003f86:	2108      	movs	r1, #8
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f01e fe9a 	bl	8022cc2 <_ZdlPvj>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f012 ff0e 	bl	8016dde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	e002      	b.n	8003ff4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
    }
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	24006a3c 	.word	0x24006a3c

08004004 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800400c:	4a07      	ldr	r2, [pc, #28]	; (800402c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	721a      	strb	r2, [r3, #8]
    {
    }
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	08024d94 	.word	0x08024d94

08004030 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    {
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
    }
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	08024d94 	.word	0x08024d94

08004050 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    }
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ffe9 	bl	8004030 <_ZN8touchgfx10TransitionD1Ev>
 800405e:	210c      	movs	r1, #12
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f01e fe2e 	bl	8022cc2 <_ZdlPvj>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    {
    }
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
    {
    }
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
    {
    }
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80040b4:	f012 fe6e 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 80040b8:	4603      	mov	r3, r0
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	323c      	adds	r2, #60	; 0x3c
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	4790      	blx	r2
    }
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	605a      	str	r2, [r3, #4]
    }
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f012 ff14 	bl	8016f20 <_ZN8touchgfx11ApplicationC1Ev>
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004112:	6013      	str	r3, [r2, #0]
    }
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	08024ba8 	.word	0x08024ba8
 8004124:	24006a88 	.word	0x24006a88

08004128 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]
    }
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	721a      	strb	r2, [r3, #8]
    }
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]
    }
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ffac 	bl	80040e8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f8a5 	bl	80042ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80041b2:	f7fe f90f 	bl	80023d4 <_ZN8touchgfx3HAL11getInstanceEv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	3208      	adds	r2, #8
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80041c4:	2000      	movs	r0, #0
 80041c6:	f001 fa63 	bl	8005690 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80041ca:	f7ff feff 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f019 fc96 	bl	801db02 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80041d6:	f7ff fef9 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	f019 fd07 	bl	801dbf0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	08024b3c 	.word	0x08024b3c

080041f0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ffe9 	bl	80041f0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	3208      	adds	r2, #8
 800422e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004232:	e883 0003 	stmia.w	r3, {r0, r1}
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	f107 0008 	add.w	r0, r7, #8
 800425a:	f107 0318 	add.w	r3, r7, #24
 800425e:	cb0c      	ldmia	r3, {r2, r3}
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	f000 f85f 	bl	8004324 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff ffcb 	bl	8004208 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff f9e4 	bl	8003644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004288:	bf00      	nop
 800428a:	3724      	adds	r7, #36	; 0x24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd90      	pop	{r4, r7, pc}
 8004290:	08004295 	.word	0x08004295

08004294 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80042b4:	4804      	ldr	r0, [pc, #16]	; (80042c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80042b6:	f000 f867 	bl	8004388 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	24006a7c 	.word	0x24006a7c
 80042c8:	24006a78 	.word	0x24006a78

080042cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	08024bfc 	.word	0x08024bfc

080042ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ffe8 	bl	80042cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	60da      	str	r2, [r3, #12]
    }
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	08024b90 	.word	0x08024b90

08004324 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4639      	mov	r1, r7
 8004330:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff ffc8 	bl	80042cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3308      	adds	r3, #8
 800434c:	463a      	mov	r2, r7
 800434e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004352:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08024b90 	.word	0x08024b90

08004364 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fe48 	bl	8004004 <_ZN8touchgfx10TransitionC1Ev>
 8004374:	4a03      	ldr	r2, [pc, #12]	; (8004384 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08024d70 	.word	0x08024d70

08004388 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b08f      	sub	sp, #60	; 0x3c
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3320      	adds	r3, #32
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
 80043a8:	4603      	mov	r3, r0
 80043aa:	2bdf      	cmp	r3, #223	; 0xdf
 80043ac:	d805      	bhi.n	80043ba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80043ae:	4b7d      	ldr	r3, [pc, #500]	; (80045a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 80043b0:	4a7d      	ldr	r2, [pc, #500]	; (80045a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80043b2:	21a3      	movs	r1, #163	; 0xa3
 80043b4:	487d      	ldr	r0, [pc, #500]	; (80045ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80043b6:	f01e fcb3 	bl	8022d20 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3320      	adds	r3, #32
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d805      	bhi.n	80043de <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 80043d2:	4b77      	ldr	r3, [pc, #476]	; (80045b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80043d4:	4a74      	ldr	r2, [pc, #464]	; (80045a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80043d6:	21a4      	movs	r1, #164	; 0xa4
 80043d8:	4874      	ldr	r0, [pc, #464]	; (80045ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80043da:	f01e fca1 	bl	8022d20 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3320      	adds	r3, #32
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b0b      	cmp	r3, #11
 80043f4:	d805      	bhi.n	8004402 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80043f8:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80043fa:	21a5      	movs	r1, #165	; 0xa5
 80043fc:	486b      	ldr	r0, [pc, #428]	; (80045ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80043fe:	f01e fc8f 	bl	8022d20 <__assert_func>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800440e:	f012 fcc1 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 8004412:	4603      	mov	r3, r0
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fdcb 	bl	8003fb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
    if (*currentTrans)
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
    if (*currentScreen)
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4610      	mov	r0, r2
 8004464:	4798      	blx	r3
    if (*currentPresenter)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3304      	adds	r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
    if (*currentScreen)
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4610      	mov	r0, r2
 8004496:	4798      	blx	r3
    if (*currentPresenter)
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4798      	blx	r3
}
 80044b2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f87c 	bl	80045b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4619      	mov	r1, r3
 80044c4:	200c      	movs	r0, #12
 80044c6:	f7ff fd67 	bl	8003f98 <_ZnwjPv>
 80044ca:	4604      	mov	r4, r0
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7ff ff49 	bl	8004364 <_ZN8touchgfx12NoTransitionC1Ev>
 80044d2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f87f 	bl	80045de <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4619      	mov	r1, r3
 80044e4:	20e0      	movs	r0, #224	; 0xe0
 80044e6:	f7ff fd57 	bl	8003f98 <_ZnwjPv>
 80044ea:	4604      	mov	r4, r0
 80044ec:	4620      	mov	r0, r4
 80044ee:	f001 faab 	bl	8005a48 <_ZN11Screen1ViewC1Ev>
 80044f2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f882 	bl	8004604 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004500:	4603      	mov	r3, r0
 8004502:	4619      	mov	r1, r3
 8004504:	2010      	movs	r0, #16
 8004506:	f7ff fd47 	bl	8003f98 <_ZnwjPv>
 800450a:	4604      	mov	r4, r0
 800450c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800450e:	4620      	mov	r0, r4
 8004510:	f001 fa44 	bl	800599c <_ZN16Screen1PresenterC1ER11Screen1View>
 8004514:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800451a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004520:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	3304      	adds	r3, #4
 8004532:	e000      	b.n	8004536 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8004534:	2300      	movs	r3, #0
 8004536:	4619      	mov	r1, r3
 8004538:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800453a:	f7ff fdf5 	bl	8004128 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	3304      	adds	r3, #4
 8004542:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fe0a 	bl	800415e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f86b 	bl	800462a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69f8      	ldr	r0, [r7, #28]
 800456a:	4798      	blx	r3
    newPresenter->activate();
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69b8      	ldr	r0, [r7, #24]
 8004574:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	69f8      	ldr	r0, [r7, #28]
 800457a:	f014 f8cf 	bl	801871c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3310      	adds	r3, #16
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	4798      	blx	r3
    newTransition->invalidate();
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	4798      	blx	r3
}
 8004596:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800459a:	4618      	mov	r0, r3
 800459c:	373c      	adds	r7, #60	; 0x3c
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd90      	pop	{r4, r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08024234 	.word	0x08024234
 80045a8:	080242c4 	.word	0x080242c4
 80045ac:	080243c8 	.word	0x080243c8
 80045b0:	08024410 	.word	0x08024410
 80045b4:	080244b4 	.word	0x080244b4

080045b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3324      	adds	r3, #36	; 0x24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	887a      	ldrh	r2, [r7, #2]
 80045ce:	4611      	mov	r1, r2
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	4603      	mov	r3, r0
    }
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	4611      	mov	r1, r2
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
 80045fa:	4603      	mov	r3, r0
    }
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	887a      	ldrh	r2, [r7, #2]
 800461a:	4611      	mov	r1, r2
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
 8004620:	4603      	mov	r3, r0
    }
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fce9 	bl	8004030 <_ZN8touchgfx10TransitionD1Ev>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08024d70 	.word	0x08024d70

0800466c <_ZN8touchgfx12NoTransitionD0Ev>:
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ffe7 	bl	8004648 <_ZN8touchgfx12NoTransitionD1Ev>
 800467a:	210c      	movs	r1, #12
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f01e fb20 	bl	8022cc2 <_ZdlPvj>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af0a      	add	r7, sp, #40	; 0x28
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	460b      	mov	r3, r1
 80046cc:	80fb      	strh	r3, [r7, #6]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	88b9      	ldrh	r1, [r7, #4]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046dc:	9308      	str	r3, [sp, #32]
 80046de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046e6:	9306      	str	r3, [sp, #24]
 80046e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046f8:	9303      	str	r3, [sp, #12]
 80046fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	7f3b      	ldrb	r3, [r7, #28]
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	8b3b      	ldrh	r3, [r7, #24]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	460b      	mov	r3, r1
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	f013 fc68 	bl	8017fe0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004710:	4a09      	ldr	r2, [pc, #36]	; (8004738 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004720:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004726:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08024db8 	.word	0x08024db8

0800473c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	889b      	ldrh	r3, [r3, #4]
 8004750:	0adb      	lsrs	r3, r3, #11
 8004752:	b29b      	uxth	r3, r3
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4413      	add	r3, r2
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800476e:	b480      	push	{r7}
 8004770:	b089      	sub	sp, #36	; 0x24
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	460b      	mov	r3, r1
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	7b1b      	ldrb	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800478a:	2300      	movs	r3, #0
 800478c:	e031      	b.n	80047f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	7b5b      	ldrb	r3, [r3, #13]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	b21b      	sxth	r3, r3
 800479e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a2:	b219      	sxth	r1, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	7adb      	ldrb	r3, [r3, #11]
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	430b      	orrs	r3, r1
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7b1b      	ldrb	r3, [r3, #12]
 80047ba:	837b      	strh	r3, [r7, #26]
 80047bc:	e013      	b.n	80047e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	897a      	ldrh	r2, [r7, #10]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80047ce:	e010      	b.n	80047f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	897a      	ldrh	r2, [r7, #10]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d309      	bcc.n	80047ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80047da:	8b7b      	ldrh	r3, [r7, #26]
 80047dc:	3b01      	subs	r3, #1
 80047de:	837b      	strh	r3, [r7, #26]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3304      	adds	r3, #4
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	8b7b      	ldrh	r3, [r7, #26]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e8      	bne.n	80047be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80047ec:	e000      	b.n	80047f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80047ee:	bf00      	nop
        }
    }
    return 0;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	; 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
        : color(col)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]
    }
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4603      	mov	r3, r0
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	460b      	mov	r3, r1
 8004830:	813b      	strh	r3, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	897a      	ldrh	r2, [r7, #10]
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	893a      	ldrh	r2, [r7, #8]
 8004840:	805a      	strh	r2, [r3, #2]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	809a      	strh	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8b3a      	ldrh	r2, [r7, #24]
 800484c:	80da      	strh	r2, [r3, #6]
    {
    }
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
        : rect(),
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe f8f8 	bl	8002a64 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	330c      	adds	r3, #12
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f8f3 	bl	8002a64 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08025444 	.word	0x08025444

080048bc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    {
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
    }
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	08025444 	.word	0x08025444

080048dc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    }
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ffe9 	bl	80048bc <_ZN8touchgfx8DrawableD1Ev>
 80048ea:	2128      	movs	r1, #40	; 0x28
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f01e f9e8 	bl	8022cc2 <_ZdlPvj>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3314      	adds	r3, #20
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
        }
    }
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800492a:	2300      	movs	r3, #0
    }
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004952:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004956:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f82a 	bl	80049b6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004962:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f87e 	bl	8004a6e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	809a      	strh	r2, [r3, #4]
    }
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	80da      	strh	r2, [r3, #6]
    }
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]
 80049c2:	4613      	mov	r3, r2
 80049c4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3330      	adds	r3, #48	; 0x30
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049d2:	4611      	mov	r1, r2
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
        setY(y);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3334      	adds	r3, #52	; 0x34
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80049e4:	4611      	mov	r1, r2
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
    }
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	887a      	ldrh	r2, [r7, #2]
 8004a02:	811a      	strh	r2, [r3, #8]
    }
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	815a      	strh	r2, [r3, #10]
    }
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
    {
    }
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	807b      	strh	r3, [r7, #2]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3338      	adds	r3, #56	; 0x38
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
        setHeight(height);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	333c      	adds	r3, #60	; 0x3c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
    }
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    {
    }
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3354      	adds	r3, #84	; 0x54
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	8879      	ldrh	r1, [r7, #2]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	1a8a      	subs	r2, r1, r2
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	b210      	sxth	r0, r2
 8004b30:	8839      	ldrh	r1, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	1a8a      	subs	r2, r1, r2
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	b212      	sxth	r2, r2
 8004b40:	4601      	mov	r1, r0
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
    }
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b64:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff ffe1 	bl	8004b4e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
    }
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    {
 8004bac:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fab4 	bl	8005124 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08025548 	.word	0x08025548

08004bcc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
    }
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ffe5 	bl	8004ba4 <_ZN8touchgfx6ScreenD1Ev>
 8004bda:	213c      	movs	r1, #60	; 0x3c
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f01e f870 	bl	8022cc2 <_ZdlPvj>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    {
    }
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
    {
    }
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    {
    }
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
    {
    }
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f00e fe37 	bl	80138d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	817b      	strh	r3, [r7, #10]
 8004c80:	4613      	mov	r3, r2
 8004c82:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff24 	bl	8004ad4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff2a 	bl	8004aee <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]
        }
    }
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fdca 	bl	800485c <_ZN8touchgfx8DrawableC1Ev>
 8004cc8:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08024e80 	.word	0x08024e80

08004cdc <_ZN8touchgfx6WidgetD1Ev>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fde5 	bl	80048bc <_ZN8touchgfx8DrawableD1Ev>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	08024e80 	.word	0x08024e80

08004d00 <_ZN8touchgfx6WidgetD0Ev>:
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff ffe7 	bl	8004cdc <_ZN8touchgfx6WidgetD1Ev>
 8004d0e:	2128      	movs	r1, #40	; 0x28
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f01d ffd6 	bl	8022cc2 <_ZdlPvj>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	2326      	movs	r3, #38	; 0x26
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2100      	movs	r1, #0
 8004d32:	f01e f9fa 	bl	802312a <memset>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ffbd 	bl	8004cb8 <_ZN8touchgfx6WidgetC1Ev>
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3328      	adds	r3, #40	; 0x28
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fd53 	bl	80047fe <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08025330 	.word	0x08025330

08004d68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004d90:	4a06      	ldr	r2, [pc, #24]	; (8004dac <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	809a      	strh	r2, [r3, #4]
    }
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	08024d60 	.word	0x08024d60

08004db0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	2326      	movs	r3, #38	; 0x26
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f01e f9b2 	bl	802312a <memset>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff75 	bl	8004cb8 <_ZN8touchgfx6WidgetC1Ev>
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3328      	adds	r3, #40	; 0x28
 8004dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ffd1 	bl	8004d84 <_ZN8touchgfx9TypedTextC1Et>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3330      	adds	r3, #48	; 0x30
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fd08 	bl	80047fe <_ZN8touchgfx9colortypeC1Em>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	869a      	strh	r2, [r3, #52]	; 0x34
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	22ff      	movs	r2, #255	; 0xff
 8004df8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	333c      	adds	r3, #60	; 0x3c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f807 	bl	8004e2c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	080252a0 	.word	0x080252a0

08004e2c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	2200      	movs	r2, #0
 8004e42:	2100      	movs	r1, #0
 8004e44:	f7ff fcea 	bl	800481c <_ZN8touchgfx4RectC1Essss>
              text(0)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
        {
        }
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe9b 	bl	8004ba4 <_ZN8touchgfx6ScreenD1Ev>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	08024e4c 	.word	0x08024e4c

08004e7c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ffe7 	bl	8004e58 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004e8a:	2140      	movs	r1, #64	; 0x40
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f01d ff18 	bl	8022cc2 <_ZdlPvj>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b095      	sub	sp, #84	; 0x54
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	6178      	str	r0, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f926 	bl	80050f8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8004eac:	4a73      	ldr	r2, [pc, #460]	; (800507c <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3340      	adds	r3, #64	; 0x40
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff32 	bl	8004d20 <_ZN8touchgfx3BoxC1Ev>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	336c      	adds	r3, #108	; 0x6c
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff2d 	bl	8004d20 <_ZN8touchgfx3BoxC1Ev>
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	3398      	adds	r3, #152	; 0x98
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff70 	bl	8004db0 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8004ed6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f7ff fd28 	bl	8004938 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	461a      	mov	r2, r3
 8004f08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff fc6c 	bl	80047fe <_ZN8touchgfx9colortypeC1Em>
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff ff1c 	bl	8004d68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3340      	adds	r3, #64	; 0x40
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7ff fe8b 	bl	8004c54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004f44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2100      	movs	r1, #0
 8004f52:	f7ff fcf1 	bl	8004938 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004f62:	2308      	movs	r3, #8
 8004f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f68:	235e      	movs	r3, #94	; 0x5e
 8004f6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004f6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	461a      	mov	r2, r3
 8004f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fc35 	bl	80047fe <_ZN8touchgfx9colortypeC1Em>
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff fee5 	bl	8004d68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	336c      	adds	r3, #108	; 0x6c
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f7ff fe54 	bl	8004c54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 116);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3398      	adds	r3, #152	; 0x98
 8004fb0:	2274      	movs	r2, #116	; 0x74
 8004fb2:	21b8      	movs	r1, #184	; 0xb8
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fcfe 	bl	80049b6 <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004fc0:	23fa      	movs	r3, #250	; 0xfa
 8004fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fc6:	23f7      	movs	r3, #247	; 0xf7
 8004fc8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004fcc:	23f7      	movs	r3, #247	; 0xf7
 8004fce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004fd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fc03 	bl	80047fe <_ZN8touchgfx9colortypeC1Em>
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	63fc      	str	r4, [r7, #60]	; 0x3c
 8004ffc:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005004:	bf00      	nop
    textHello.setLinespacing(0);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	3398      	adds	r3, #152	; 0x98
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	2300      	movs	r3, #0
 800500e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005018:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800501a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3384      	adds	r3, #132	; 0x84
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005024:	463a      	mov	r2, r7
 8005026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005030:	463a      	mov	r2, r7
 8005032:	ca07      	ldmia	r2, {r0, r1, r2}
 8005034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8005038:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GJT6));
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005040:	f107 031c 	add.w	r3, r7, #28
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fe9c 	bl	8004d84 <_ZN8touchgfx9TypedTextC1Et>
 800504c:	f107 031c 	add.w	r3, r7, #28
 8005050:	4619      	mov	r1, r3
 8005052:	4620      	mov	r0, r4
 8005054:	f010 f986 	bl	8015364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe ff7b 	bl	8003f58 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3398      	adds	r3, #152	; 0x98
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7ff fdf2 	bl	8004c54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4618      	mov	r0, r3
 8005074:	374c      	adds	r7, #76	; 0x4c
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	bf00      	nop
 800507c:	08024e18 	.word	0x08024e18

08005080 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3398      	adds	r3, #152	; 0x98
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f88a 	bl	80051ac <_ZN8touchgfx8TextAreaD1Ev>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	336c      	adds	r3, #108	; 0x6c
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f863 	bl	8005168 <_ZN8touchgfx3BoxD1Ev>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3340      	adds	r3, #64	; 0x40
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f85e 	bl	8005168 <_ZN8touchgfx3BoxD1Ev>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fed2 	bl	8004e58 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	08024e18 	.word	0x08024e18

080050c4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
}
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffd7 	bl	8005080 <_ZN15Screen1ViewBaseD1Ev>
 80050d2:	21e0      	movs	r1, #224	; 0xe0
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f01d fdf4 	bl	8022cc2 <_ZdlPvj>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f013 f95e 	bl	80183c4 <_ZN8touchgfx6ScreenC1Ev>
 8005108:	4a05      	ldr	r2, [pc, #20]	; (8005120 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	08024e4c 	.word	0x08024e4c

08005124 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fbc1 	bl	80048bc <_ZN8touchgfx8DrawableD1Ev>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	080250b8 	.word	0x080250b8

08005148 <_ZN8touchgfx9ContainerD0Ev>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffe7 	bl	8005124 <_ZN8touchgfx9ContainerD1Ev>
 8005156:	212c      	movs	r1, #44	; 0x2c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f01d fdb2 	bl	8022cc2 <_ZdlPvj>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fdaf 	bl	8004cdc <_ZN8touchgfx6WidgetD1Ev>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08025330 	.word	0x08025330

0800518c <_ZN8touchgfx3BoxD0Ev>:
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ffe7 	bl	8005168 <_ZN8touchgfx3BoxD1Ev>
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f01d fd90 	bl	8022cc2 <_ZdlPvj>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3328      	adds	r3, #40	; 0x28
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe feca 	bl	8003f58 <_ZN8touchgfx9TypedTextD1Ev>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fd88 	bl	8004cdc <_ZN8touchgfx6WidgetD1Ev>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	080252a0 	.word	0x080252a0

080051dc <_ZN8touchgfx8TextAreaD0Ev>:
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ffe1 	bl	80051ac <_ZN8touchgfx8TextAreaD1Ev>
 80051ea:	2148      	movs	r1, #72	; 0x48
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f01d fd68 	bl	8022cc2 <_ZdlPvj>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__tcf_0+0xc>)
 8005202:	f7fe fe87 	bl	8003f14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005206:	bd80      	pop	{r7, pc}
 8005208:	24001520 	.word	0x24001520

0800520c <_Z23getFont_verdana_10_4bppv>:
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	; 0x38
 8005210:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3bf 8f5b 	dmb	ish
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d030      	beq.n	800528e <_Z23getFont_verdana_10_4bppv+0x82>
 800522c:	481a      	ldr	r0, [pc, #104]	; (8005298 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800522e:	f01d fd4a 	bl	8022cc6 <__cxa_guard_acquire>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d025      	beq.n	800528e <_Z23getFont_verdana_10_4bppv+0x82>
 8005242:	2300      	movs	r3, #0
 8005244:	930c      	str	r3, [sp, #48]	; 0x30
 8005246:	2300      	movs	r3, #0
 8005248:	930b      	str	r3, [sp, #44]	; 0x2c
 800524a:	2300      	movs	r3, #0
 800524c:	930a      	str	r3, [sp, #40]	; 0x28
 800524e:	233f      	movs	r3, #63	; 0x3f
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <_Z23getFont_verdana_10_4bppv+0x90>)
 8005254:	9308      	str	r3, [sp, #32]
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8005258:	9307      	str	r3, [sp, #28]
 800525a:	2300      	movs	r3, #0
 800525c:	9306      	str	r3, [sp, #24]
 800525e:	2300      	movs	r3, #0
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	2301      	movs	r3, #1
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	2304      	movs	r3, #4
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	2300      	movs	r3, #0
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	2300      	movs	r3, #0
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	230a      	movs	r3, #10
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	230a      	movs	r3, #10
 8005278:	2201      	movs	r2, #1
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800527c:	480a      	ldr	r0, [pc, #40]	; (80052a8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800527e:	f7ff fa1d 	bl	80046bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005282:	480a      	ldr	r0, [pc, #40]	; (80052ac <_Z23getFont_verdana_10_4bppv+0xa0>)
 8005284:	f01d fd6a 	bl	8022d5c <atexit>
 8005288:	4803      	ldr	r0, [pc, #12]	; (8005298 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800528a:	f01d fd28 	bl	8022cde <__cxa_guard_release>
    return verdana_10_4bpp;
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2400154c 	.word	0x2400154c
 800529c:	08025818 	.word	0x08025818
 80052a0:	08025828 	.word	0x08025828
 80052a4:	90000364 	.word	0x90000364
 80052a8:	24001520 	.word	0x24001520
 80052ac:	080051fd 	.word	0x080051fd

080052b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__tcf_0+0xc>)
 80052b6:	f7fe fe2d 	bl	8003f14 <_ZN8touchgfx13GeneratedFontD1Ev>
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	24001550 	.word	0x24001550

080052c0 <_Z23getFont_verdana_20_4bppv>:
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80052c6:	4b21      	ldr	r3, [pc, #132]	; (800534c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f3bf 8f5b 	dmb	ish
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d030      	beq.n	8005342 <_Z23getFont_verdana_20_4bppv+0x82>
 80052e0:	481a      	ldr	r0, [pc, #104]	; (800534c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80052e2:	f01d fcf0 	bl	8022cc6 <__cxa_guard_acquire>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d025      	beq.n	8005342 <_Z23getFont_verdana_20_4bppv+0x82>
 80052f6:	2300      	movs	r3, #0
 80052f8:	930c      	str	r3, [sp, #48]	; 0x30
 80052fa:	2300      	movs	r3, #0
 80052fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052fe:	2300      	movs	r3, #0
 8005300:	930a      	str	r3, [sp, #40]	; 0x28
 8005302:	233f      	movs	r3, #63	; 0x3f
 8005304:	9309      	str	r3, [sp, #36]	; 0x24
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <_Z23getFont_verdana_20_4bppv+0x90>)
 8005308:	9308      	str	r3, [sp, #32]
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <_Z23getFont_verdana_20_4bppv+0x94>)
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	2300      	movs	r3, #0
 8005310:	9306      	str	r3, [sp, #24]
 8005312:	2300      	movs	r3, #0
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	2301      	movs	r3, #1
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	2304      	movs	r3, #4
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	2300      	movs	r3, #0
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	2300      	movs	r3, #0
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	2314      	movs	r3, #20
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2314      	movs	r3, #20
 800532c:	2209      	movs	r2, #9
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <_Z23getFont_verdana_20_4bppv+0x98>)
 8005330:	480a      	ldr	r0, [pc, #40]	; (800535c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8005332:	f7ff f9c3 	bl	80046bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005336:	480a      	ldr	r0, [pc, #40]	; (8005360 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8005338:	f01d fd10 	bl	8022d5c <atexit>
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800533e:	f01d fcce 	bl	8022cde <__cxa_guard_release>
    return verdana_20_4bpp;
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2400157c 	.word	0x2400157c
 8005350:	0802581c 	.word	0x0802581c
 8005354:	0802582c 	.word	0x0802582c
 8005358:	90000374 	.word	0x90000374
 800535c:	24001550 	.word	0x24001550
 8005360:	080052b1 	.word	0x080052b1

08005364 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__tcf_0+0xc>)
 800536a:	f7fe fdd3 	bl	8003f14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800536e:	bd80      	pop	{r7, pc}
 8005370:	24001580 	.word	0x24001580

08005374 <_Z23getFont_verdana_40_4bppv>:
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800537a:	4b21      	ldr	r3, [pc, #132]	; (8005400 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f3bf 8f5b 	dmb	ish
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d030      	beq.n	80053f6 <_Z23getFont_verdana_40_4bppv+0x82>
 8005394:	481a      	ldr	r0, [pc, #104]	; (8005400 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005396:	f01d fc96 	bl	8022cc6 <__cxa_guard_acquire>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d025      	beq.n	80053f6 <_Z23getFont_verdana_40_4bppv+0x82>
 80053aa:	2300      	movs	r3, #0
 80053ac:	930c      	str	r3, [sp, #48]	; 0x30
 80053ae:	2300      	movs	r3, #0
 80053b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b2:	2300      	movs	r3, #0
 80053b4:	930a      	str	r3, [sp, #40]	; 0x28
 80053b6:	233f      	movs	r3, #63	; 0x3f
 80053b8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <_Z23getFont_verdana_40_4bppv+0x90>)
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <_Z23getFont_verdana_40_4bppv+0x94>)
 80053c0:	9307      	str	r3, [sp, #28]
 80053c2:	2300      	movs	r3, #0
 80053c4:	9306      	str	r3, [sp, #24]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	2301      	movs	r3, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	2304      	movs	r3, #4
 80053d0:	9303      	str	r3, [sp, #12]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2328      	movs	r3, #40	; 0x28
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2328      	movs	r3, #40	; 0x28
 80053e0:	2201      	movs	r2, #1
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <_Z23getFont_verdana_40_4bppv+0x98>)
 80053e4:	480a      	ldr	r0, [pc, #40]	; (8005410 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80053e6:	f7ff f969 	bl	80046bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80053ea:	480a      	ldr	r0, [pc, #40]	; (8005414 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80053ec:	f01d fcb6 	bl	8022d5c <atexit>
 80053f0:	4803      	ldr	r0, [pc, #12]	; (8005400 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80053f2:	f01d fc74 	bl	8022cde <__cxa_guard_release>
    return verdana_40_4bpp;
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	240015ac 	.word	0x240015ac
 8005404:	08025824 	.word	0x08025824
 8005408:	08025830 	.word	0x08025830
 800540c:	900003f4 	.word	0x900003f4
 8005410:	24001580 	.word	0x24001580
 8005414:	08005365 	.word	0x08005365

08005418 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	460b      	mov	r3, r1
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8005426:	2300      	movs	r3, #0
    }
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800543c:	2300      	movs	r3, #0
    }
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005452:	2300      	movs	r3, #0
    }
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6013      	str	r3, [r2, #0]
        fonts = f;
 8005474:	4a06      	ldr	r2, [pc, #24]	; (8005490 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800547a:	4a06      	ldr	r2, [pc, #24]	; (8005494 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	8013      	strh	r3, [r2, #0]
    }
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	24006a8c 	.word	0x24006a8c
 8005490:	24006a94 	.word	0x24006a94
 8005494:	24006a90 	.word	0x24006a90

08005498 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005498:	b40e      	push	{r1, r2, r3}
 800549a:	b580      	push	{r7, lr}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80054a2:	f107 0320 	add.w	r3, r7, #32
 80054a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	2100      	movs	r1, #0
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f012 fbbe 	bl	8017c30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80054b4:	4603      	mov	r3, r0
 80054b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80054b8:	89fb      	ldrh	r3, [r7, #14]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c4:	b003      	add	sp, #12
 80054c6:	4770      	bx	lr

080054c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80054c8:	b40c      	push	{r2, r3}
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80054d6:	f107 031c 	add.w	r3, r7, #28
 80054da:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80054dc:	78f9      	ldrb	r1, [r7, #3]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f012 fba4 	bl	8017c30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80054e8:	4603      	mov	r3, r0
 80054ea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80054ec:	89fb      	ldrh	r3, [r7, #14]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f8:	b002      	add	sp, #8
 80054fa:	4770      	bx	lr

080054fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3322      	adds	r3, #34	; 0x22
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	8adb      	ldrh	r3, [r3, #22]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800551e:	4b43      	ldr	r3, [pc, #268]	; (800562c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005520:	4a43      	ldr	r2, [pc, #268]	; (8005630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005522:	21c5      	movs	r1, #197	; 0xc5
 8005524:	4843      	ldr	r0, [pc, #268]	; (8005634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005526:	f01d fbfb 	bl	8022d20 <__assert_func>
            return buffer[pos];
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	8a9b      	ldrh	r3, [r3, #20]
 800552e:	461a      	mov	r2, r3
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d06a      	beq.n	800561a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f013 fe19 	bl	801917c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3322      	adds	r3, #34	; 0x22
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	2301      	movs	r3, #1
 8005552:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	8adb      	ldrh	r3, [r3, #22]
 8005558:	8bfa      	ldrh	r2, [r7, #30]
 800555a:	429a      	cmp	r2, r3
 800555c:	d305      	bcc.n	800556a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8005560:	4a36      	ldr	r2, [pc, #216]	; (800563c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8005562:	21cb      	movs	r1, #203	; 0xcb
 8005564:	4833      	ldr	r0, [pc, #204]	; (8005634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005566:	f01d fbdb 	bl	8022d20 <__assert_func>
            const uint16_t index = pos + offset;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	8a9a      	ldrh	r2, [r3, #20]
 800556e:	8bfb      	ldrh	r3, [r7, #30]
 8005570:	4413      	add	r3, r2
 8005572:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8005574:	8bbb      	ldrh	r3, [r7, #28]
 8005576:	2b09      	cmp	r3, #9
 8005578:	d801      	bhi.n	800557e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800557a:	8bbb      	ldrh	r3, [r7, #28]
 800557c:	e001      	b.n	8005582 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800557e:	8bbb      	ldrh	r3, [r7, #28]
 8005580:	3b0a      	subs	r3, #10
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005588:	f640 123f 	movw	r2, #2367	; 0x93f
 800558c:	4293      	cmp	r3, r2
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03f      	beq.n	800561a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3322      	adds	r3, #34	; 0x22
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	3222      	adds	r2, #34	; 0x22
 80055a2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	8ad2      	ldrh	r2, [r2, #22]
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d105      	bne.n	80055b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80055ae:	4a20      	ldr	r2, [pc, #128]	; (8005630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80055b0:	21c5      	movs	r1, #197	; 0xc5
 80055b2:	4820      	ldr	r0, [pc, #128]	; (8005634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80055b4:	f01d fbb4 	bl	8022d20 <__assert_func>
            return buffer[pos];
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	8a92      	ldrh	r2, [r2, #20]
 80055bc:	4611      	mov	r1, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	4613      	mov	r3, r2
 80055c8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	8adb      	ldrh	r3, [r3, #22]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d806      	bhi.n	80055e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80055d4:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80055d6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80055da:	4816      	ldr	r0, [pc, #88]	; (8005634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80055dc:	f01d fba0 	bl	8022d20 <__assert_func>
            const uint16_t index = pos + 1;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	8a9b      	ldrh	r3, [r3, #20]
 80055e4:	3301      	adds	r3, #1
 80055e6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80055e8:	89bb      	ldrh	r3, [r7, #12]
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	d801      	bhi.n	80055f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80055ee:	89bb      	ldrh	r3, [r7, #12]
 80055f0:	e000      	b.n	80055f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80055f2:	2300      	movs	r3, #0
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	89f9      	ldrh	r1, [r7, #14]
 80055f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80055fc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3322      	adds	r3, #34	; 0x22
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	f640 133f 	movw	r3, #2367	; 0x93f
 8005608:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	8a9b      	ldrh	r3, [r3, #20]
 800560e:	4619      	mov	r1, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	8afa      	ldrh	r2, [r7, #22]
 8005614:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8005618:	bf00      	nop
        }
    }
    return getNextChar();
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f013 fcb0 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005620:	4603      	mov	r3, r0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3728      	adds	r7, #40	; 0x28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08024558 	.word	0x08024558
 8005630:	08024564 	.word	0x08024564
 8005634:	08024610 	.word	0x08024610
 8005638:	0802465c 	.word	0x0802465c
 800563c:	0802466c 	.word	0x0802466c
 8005640:	08024740 	.word	0x08024740
 8005644:	0802474c 	.word	0x0802474c

08005648 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f013 fc5e 	bl	8018f12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b088      	sub	sp, #32
 8005662:	af02      	add	r7, sp, #8
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	1d38      	adds	r0, r7, #4
 8005668:	e880 0006 	stmia.w	r0, {r1, r2}
 800566c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800566e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005672:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005674:	1d39      	adds	r1, r7, #4
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f010 ff2e 	bl	80164e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005688:	bf00      	nop
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d127      	bne.n	80056f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80056a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d016      	beq.n	80056de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80056b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4413      	add	r3, r2
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80056c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	4a16      	ldr	r2, [pc, #88]	; (8005728 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80056d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4413      	add	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e00a      	b.n	80056f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80056e0:	4a12      	ldr	r2, [pc, #72]	; (800572c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80056e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80056e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	4a11      	ldr	r2, [pc, #68]	; (8005734 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80056ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80056fa:	4a0f      	ldr	r2, [pc, #60]	; (8005738 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005700:	f000 f83e 	bl	8005780 <_ZN17TypedTextDatabase8getFontsEv>
 8005704:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005706:	f000 f833 	bl	8005770 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	4621      	mov	r1, r4
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fea5 	bl	8005460 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	bf00      	nop
 8005720:	240015b0 	.word	0x240015b0
 8005724:	240015b8 	.word	0x240015b8
 8005728:	240015bc 	.word	0x240015bc
 800572c:	90000408 	.word	0x90000408
 8005730:	90000404 	.word	0x90000404
 8005734:	90000424 	.word	0x90000424
 8005738:	240015b4 	.word	0x240015b4

0800573c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	240015b8 	.word	0x240015b8
 800576c:	240015bc 	.word	0x240015bc

08005770 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8005774:	2301      	movs	r3, #1
}
 8005776:	4618      	mov	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8005784:	4b02      	ldr	r3, [pc, #8]	; (8005790 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	240015c0 	.word	0x240015c0

08005794 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d113      	bne.n	80057cc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10e      	bne.n	80057cc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80057ae:	f7ff fd87 	bl	80052c0 <_Z23getFont_verdana_20_4bppv>
 80057b2:	4603      	mov	r3, r0
};
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80057b6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80057b8:	f7ff fddc 	bl	8005374 <_Z23getFont_verdana_40_4bppv>
 80057bc:	4603      	mov	r3, r0
};
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80057c0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80057c2:	f7ff fd23 	bl	800520c <_Z23getFont_verdana_10_4bppv>
 80057c6:	4603      	mov	r3, r0
};
 80057c8:	4a02      	ldr	r2, [pc, #8]	; (80057d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80057ca:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	240015c0 	.word	0x240015c0

080057d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
 80057dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057e0:	2001      	movs	r0, #1
 80057e2:	f7ff ffd7 	bl	8005794 <_Z41__static_initialization_and_destruction_0ii>
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fcbe 	bl	800417c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005800:	4a03      	ldr	r2, [pc, #12]	; (8005810 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]
{

}
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	08024ae8 	.word	0x08024ae8

08005814 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
{

}
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <_ZN5Model4tickEv>:

void Model::tick()
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
    {
    }
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    {
    }
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
    {
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
    }
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	08024f7c 	.word	0x08024f7c

0800588c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    }
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffe9 	bl	800586c <_ZN8touchgfx9PresenterD1Ev>
 800589a:	2104      	movs	r1, #4
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f01d fa10 	bl	8022cc2 <_ZdlPvj>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    {
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
    }
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	08024f7c 	.word	0x08024f7c

080058cc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <_ZN13ModelListenerC1Ev+0x24>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	08024f6c 	.word	0x08024f6c

080058f4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	4a04      	ldr	r2, [pc, #16]	; (8005910 <_ZN13ModelListenerD1Ev+0x1c>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	08024f6c 	.word	0x08024f6c

08005914 <_ZN13ModelListenerD0Ev>:
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ffe9 	bl	80058f4 <_ZN13ModelListenerD1Ev>
 8005922:	2108      	movs	r1, #8
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f01d f9cc 	bl	8022cc2 <_ZdlPvj>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	4a09      	ldr	r2, [pc, #36]	; (8005964 <_ZN16Screen1PresenterD1Ev+0x30>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	4a09      	ldr	r2, [pc, #36]	; (8005968 <_ZN16Screen1PresenterD1Ev+0x34>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ffd1 	bl	80058f4 <_ZN13ModelListenerD1Ev>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff ff89 	bl	800586c <_ZN8touchgfx9PresenterD1Ev>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	08024f44 	.word	0x08024f44
 8005968:	08024f5c 	.word	0x08024f5c

0800596c <_ZThn4_N16Screen1PresenterD1Ev>:
 800596c:	f1a0 0004 	sub.w	r0, r0, #4
 8005970:	e7e0      	b.n	8005934 <_ZN16Screen1PresenterD1Ev>
 8005972:	bf00      	nop

08005974 <_ZN16Screen1PresenterD0Ev>:
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffd9 	bl	8005934 <_ZN16Screen1PresenterD1Ev>
 8005982:	2110      	movs	r1, #16
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f01d f99c 	bl	8022cc2 <_ZdlPvj>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZThn4_N16Screen1PresenterD0Ev>:
 8005994:	f1a0 0004 	sub.w	r0, r0, #4
 8005998:	e7ec      	b.n	8005974 <_ZN16Screen1PresenterD0Ev>
	...

0800599c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
    : view(v)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff ff7f 	bl	80058ac <_ZN8touchgfx9PresenterC1Ev>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff ff8a 	bl	80058cc <_ZN13ModelListenerC1Ev>
 80059b8:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	4a06      	ldr	r2, [pc, #24]	; (80059d8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	60da      	str	r2, [r3, #12]
{

}
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08024f44 	.word	0x08024f44
 80059d8:	08024f5c 	.word	0x08024f5c

080059dc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <_ZN11Screen1ViewD1Ev+0x20>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fb33 	bl	8005080 <_ZN15Screen1ViewBaseD1Ev>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	08024f94 	.word	0x08024f94

08005a28 <_ZN11Screen1ViewD0Ev>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ffe7 	bl	8005a04 <_ZN11Screen1ViewD1Ev>
 8005a36:	21e0      	movs	r1, #224	; 0xe0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f01d f942 	bl	8022cc2 <_ZdlPvj>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fa22 	bl	8004e9c <_ZN15Screen1ViewBaseC1Ev>
 8005a58:	4a03      	ldr	r2, [pc, #12]	; (8005a68 <_ZN11Screen1ViewC1Ev+0x20>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
{

}
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08024f94 	.word	0x08024f94

08005a6c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fb34 	bl	80050e4 <_ZN15Screen1ViewBase11setupScreenEv>

}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff f8c0 	bl	8004c14 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e02c      	b.n	8005b0e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	891a      	ldrh	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <FT5336_RegisterBusIO+0x7c>)
 8005ae8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <FT5336_RegisterBusIO+0x80>)
 8005aee:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4798      	blx	r3
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	e002      	b.n	8005b0e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	08005f15 	.word	0x08005f15
 8005b1c:	08005f49 	.word	0x08005f49

08005b20 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2205      	movs	r2, #5
 8005b3a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b42:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005b4a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f987 	bl	8005e8a <FT5336_DisableIT>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d103      	bne.n	8005bc0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f103 0218 	add.w	r2, r3, #24
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 fa25 	bl	8006036 <ft5336_radian_value>
 8005bec:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f103 0218 	add.w	r2, r3, #24
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 fa2b 	bl	8006058 <ft5336_offset_left_right>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f103 0218 	add.w	r2, r3, #24
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 fa2e 	bl	800607a <ft5336_offset_up_down>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f103 0218 	add.w	r2, r3, #24
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	4619      	mov	r1, r3
 8005c34:	4610      	mov	r0, r2
 8005c36:	f000 fa31 	bl	800609c <ft5336_disatnce_left_right>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f103 0218 	add.w	r2, r3, #24
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 fa34 	bl	80060be <ft5336_distance_up_down>
 8005c56:	4602      	mov	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f103 0218 	add.w	r2, r3, #24
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 fa37 	bl	80060e0 <ft5336_distance_zoom>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fa3f 	bl	8006124 <ft5336_chip_id>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f908 	bl	8005ed4 <FT5336_DetectTouch>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 0018 	add.w	r0, r3, #24
 8005cd2:	f107 0208 	add.w	r2, r7, #8
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	2103      	movs	r1, #3
 8005cda:	f000 f94f 	bl	8005f7c <ft5336_read_reg>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8005ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e00f      	b.n	8005d0c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8005cec:	7a3b      	ldrb	r3, [r7, #8]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cf4:	7a7a      	ldrb	r2, [r7, #9]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8005cfc:	7abb      	ldrb	r3, [r7, #10]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d04:	7afa      	ldrb	r2, [r7, #11]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b08c      	sub	sp, #48	; 0x30
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8d5 	bl	8005ed4 <FT5336_DetectTouch>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f103 0018 	add.w	r0, r3, #24
 8005d38:	f107 0208 	add.w	r2, r7, #8
 8005d3c:	231e      	movs	r3, #30
 8005d3e:	2103      	movs	r1, #3
 8005d40:	f000 f91c 	bl	8005f7c <ft5336_read_reg>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d50:	e077      	b.n	8005e42 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	e071      	b.n	8005e3c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8005d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	3330      	adds	r3, #48	; 0x30
 8005d64:	443b      	add	r3, r7
 8005d66:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8005d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	3330      	adds	r3, #48	; 0x30
 8005d7e:	443b      	add	r3, r7
 8005d80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d84:	ea41 0203 	orr.w	r2, r1, r3
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8005d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d94:	4613      	mov	r3, r2
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	4413      	add	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	3330      	adds	r3, #48	; 0x30
 8005da0:	443b      	add	r3, r7
 8005da2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8005dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	3303      	adds	r3, #3
 8005db8:	3330      	adds	r3, #48	; 0x30
 8005dba:	443b      	add	r3, r7
 8005dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005dc0:	4319      	orrs	r1, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc6:	3206      	adds	r2, #6
 8005dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8005dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dce:	4613      	mov	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	3330      	adds	r3, #48	; 0x30
 8005dd8:	443b      	add	r3, r7
 8005dda:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de8:	3210      	adds	r2, #16
 8005dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8005dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	3304      	adds	r3, #4
 8005dfa:	3330      	adds	r3, #48	; 0x30
 8005dfc:	443b      	add	r3, r7
 8005dfe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e02:	4619      	mov	r1, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	330a      	adds	r3, #10
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8005e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	3305      	adds	r3, #5
 8005e1c:	3330      	adds	r3, #48	; 0x30
 8005e1e:	443b      	add	r3, r7
 8005e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	3314      	adds	r3, #20
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	3301      	adds	r3, #1
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d98a      	bls.n	8005d58 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3730      	adds	r7, #48	; 0x30
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3318      	adds	r3, #24
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f8bb 	bl	8005fd8 <ft5336_gest_id>
 8005e62:	4603      	mov	r3, r0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3318      	adds	r3, #24
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f941 	bl	8006102 <ft5336_g_mode>
 8005e80:	4603      	mov	r3, r0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3318      	adds	r3, #24
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f932 	bl	8006102 <ft5336_g_mode>
 8005e9e:	4603      	mov	r3, r0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3318      	adds	r3, #24
 8005ee0:	f107 020b 	add.w	r2, r7, #11
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f886 	bl	8005ff8 <ft5336_td_status>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e007      	b.n	8005f0a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8005efa:	7afb      	ldrb	r3, [r7, #11]
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d902      	bls.n	8005f06 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e001      	b.n	8005f0a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	460b      	mov	r3, r1
 8005f22:	72fb      	strb	r3, [r7, #11]
 8005f24:	4613      	mov	r3, r2
 8005f26:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	691c      	ldr	r4, [r3, #16]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	8918      	ldrh	r0, [r3, #8]
 8005f34:	7afb      	ldrb	r3, [r7, #11]
 8005f36:	b299      	uxth	r1, r3
 8005f38:	893b      	ldrh	r3, [r7, #8]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	47a0      	blx	r4
 8005f3e:	4603      	mov	r3, r0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd90      	pop	{r4, r7, pc}

08005f48 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	461a      	mov	r2, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	72fb      	strb	r3, [r7, #11]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	68dc      	ldr	r4, [r3, #12]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	8918      	ldrh	r0, [r3, #8]
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	893b      	ldrh	r3, [r7, #8]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	47a0      	blx	r4
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd90      	pop	{r4, r7, pc}

08005f7c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	461a      	mov	r2, r3
 8005f88:	460b      	mov	r3, r1
 8005f8a:	72fb      	strb	r3, [r7, #11]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685c      	ldr	r4, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6898      	ldr	r0, [r3, #8]
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	7af9      	ldrb	r1, [r7, #11]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	47a0      	blx	r4
 8005fa0:	4603      	mov	r3, r0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}

08005faa <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005faa:	b590      	push	{r4, r7, lr}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	72fb      	strb	r3, [r7, #11]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681c      	ldr	r4, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6898      	ldr	r0, [r3, #8]
 8005fc6:	893b      	ldrh	r3, [r7, #8]
 8005fc8:	7af9      	ldrb	r1, [r7, #11]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	47a0      	blx	r4
 8005fce:	4603      	mov	r3, r0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ffc7 	bl	8005f7c <ft5336_read_reg>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8006002:	2301      	movs	r3, #1
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	2102      	movs	r1, #2
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ffb7 	bl	8005f7c <ft5336_read_reg>
 800600e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800602c:	68fb      	ldr	r3, [r7, #12]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8006042:	1cfa      	adds	r2, r7, #3
 8006044:	2301      	movs	r3, #1
 8006046:	2191      	movs	r1, #145	; 0x91
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff ffae 	bl	8005faa <ft5336_write_reg>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8006064:	1cfa      	adds	r2, r7, #3
 8006066:	2301      	movs	r3, #1
 8006068:	2192      	movs	r1, #146	; 0x92
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ff9d 	bl	8005faa <ft5336_write_reg>
 8006070:	4603      	mov	r3, r0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8006086:	1cfa      	adds	r2, r7, #3
 8006088:	2301      	movs	r3, #1
 800608a:	2193      	movs	r1, #147	; 0x93
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff8c 	bl	8005faa <ft5336_write_reg>
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80060a8:	1cfa      	adds	r2, r7, #3
 80060aa:	2301      	movs	r3, #1
 80060ac:	2194      	movs	r1, #148	; 0x94
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff ff7b 	bl	8005faa <ft5336_write_reg>
 80060b4:	4603      	mov	r3, r0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80060ca:	1cfa      	adds	r2, r7, #3
 80060cc:	2301      	movs	r3, #1
 80060ce:	2195      	movs	r1, #149	; 0x95
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff6a 	bl	8005faa <ft5336_write_reg>
 80060d6:	4603      	mov	r3, r0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80060ec:	1cfa      	adds	r2, r7, #3
 80060ee:	2301      	movs	r3, #1
 80060f0:	2196      	movs	r1, #150	; 0x96
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff ff59 	bl	8005faa <ft5336_write_reg>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800610e:	1cfa      	adds	r2, r7, #3
 8006110:	2301      	movs	r3, #1
 8006112:	21a4      	movs	r1, #164	; 0xa4
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff48 	bl	8005faa <ft5336_write_reg>
 800611a:	4603      	mov	r3, r0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800612e:	2301      	movs	r3, #1
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	21a8      	movs	r1, #168	; 0xa8
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff21 	bl	8005f7c <ft5336_read_reg>
 800613a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800616a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006172:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800617a:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006182:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800618a:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006192:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800619a:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061a2:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061aa:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 80061ac:	2300      	movs	r3, #0
};
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b09c      	sub	sp, #112	; 0x70
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
 80061c6:	4613      	mov	r3, r2
 80061c8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 80061ca:	f107 0320 	add.w	r3, r7, #32
 80061ce:	2250      	movs	r2, #80	; 0x50
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f01c ffa9 	bl	802312a <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d105      	bne.n	80061fa <MX25LM51245G_AutoPollingMemReady+0x40>
 80061ee:	78bb      	ldrb	r3, [r7, #2]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d102      	bne.n	80061fa <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	e088      	b.n	800630c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80061fa:	2300      	movs	r3, #0
 80061fc:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <MX25LM51245G_AutoPollingMemReady+0x52>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <MX25LM51245G_AutoPollingMemReady+0x54>
 800620c:	2304      	movs	r3, #4
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006210:	78bb      	ldrb	r3, [r7, #2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <MX25LM51245G_AutoPollingMemReady+0x60>
 8006216:	2308      	movs	r3, #8
 8006218:	e000      	b.n	800621c <MX25LM51245G_AutoPollingMemReady+0x62>
 800621a:	2300      	movs	r3, #0
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <MX25LM51245G_AutoPollingMemReady+0x70>
 8006228:	2310      	movs	r3, #16
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8006232:	2305      	movs	r3, #5
 8006234:	e001      	b.n	800623a <MX25LM51245G_AutoPollingMemReady+0x80>
 8006236:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8006242:	2300      	movs	r3, #0
 8006244:	e001      	b.n	800624a <MX25LM51245G_AutoPollingMemReady+0x90>
 8006246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800624c:	78bb      	ldrb	r3, [r7, #2]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d102      	bne.n	8006258 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8006252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006256:	e000      	b.n	800625a <MX25LM51245G_AutoPollingMemReady+0xa0>
 8006258:	2300      	movs	r3, #0
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800625c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006266:	2300      	movs	r3, #0
 8006268:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8006270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006274:	e001      	b.n	800627a <MX25LM51245G_AutoPollingMemReady+0xc0>
 8006276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800627a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800627c:	78bb      	ldrb	r3, [r7, #2]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d102      	bne.n	8006288 <MX25LM51245G_AutoPollingMemReady+0xce>
 8006282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006286:	e000      	b.n	800628a <MX25LM51245G_AutoPollingMemReady+0xd0>
 8006288:	2300      	movs	r3, #0
 800628a:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <MX25LM51245G_AutoPollingMemReady+0xde>
 8006296:	2305      	movs	r3, #5
 8006298:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800629a:	78bb      	ldrb	r3, [r7, #2]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <MX25LM51245G_AutoPollingMemReady+0xea>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e000      	b.n	80062a6 <MX25LM51245G_AutoPollingMemReady+0xec>
 80062a4:	2301      	movs	r3, #1
 80062a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80062a8:	78bb      	ldrb	r3, [r7, #2]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d102      	bne.n	80062b4 <MX25LM51245G_AutoPollingMemReady+0xfa>
 80062ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80062b2:	e000      	b.n	80062b6 <MX25LM51245G_AutoPollingMemReady+0xfc>
 80062b4:	2300      	movs	r3, #0
 80062b6:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80062b8:	2300      	movs	r3, #0
 80062ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80062c0:	2301      	movs	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80062c8:	2310      	movs	r3, #16
 80062ca:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80062cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062d0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062d2:	f107 0320 	add.w	r3, r7, #32
 80062d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f004 fe09 	bl	800aef4 <HAL_OSPI_Command>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	e00e      	b.n	800630c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062ee:	f107 030c 	add.w	r3, r7, #12
 80062f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f004 ff9e 	bl	800b23a <HAL_OSPI_AutoPolling>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e000      	b.n	800630c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3770      	adds	r7, #112	; 0x70
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b098      	sub	sp, #96	; 0x60
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	4613      	mov	r3, r2
 8006322:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8006324:	f107 0310 	add.w	r3, r7, #16
 8006328:	2250      	movs	r2, #80	; 0x50
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f01c fefc 	bl	802312a <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8006342:	78bb      	ldrb	r3, [r7, #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	e088      	b.n	8006460 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800634e:	2301      	movs	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8006360:	2304      	movs	r3, #4
 8006362:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006364:	2300      	movs	r3, #0
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8006372:	2310      	movs	r3, #16
 8006374:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800637c:	78bb      	ldrb	r3, [r7, #2]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8006382:	230b      	movs	r3, #11
 8006384:	e003      	b.n	800638e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8006386:	230c      	movs	r3, #12
 8006388:	e001      	b.n	800638e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800638a:	f64e 4313 	movw	r3, #60435	; 0xec13
 800638e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8006396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800639a:	e001      	b.n	80063a0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800639c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80063a6:	78bb      	ldrb	r3, [r7, #2]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 80063ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b0:	e001      	b.n	80063b6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 80063b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 80063c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c6:	e001      	b.n	80063cc <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 80063c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063cc:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 80063d8:	2308      	movs	r3, #8
 80063da:	e000      	b.n	80063de <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 80063dc:	2306      	movs	r3, #6
 80063de:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80063e4:	2300      	movs	r3, #0
 80063e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f004 fd7e 	bl	800aef4 <HAL_OSPI_Command>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	e02d      	b.n	8006460 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006404:	2302      	movs	r3, #2
 8006406:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800640e:	78bb      	ldrb	r3, [r7, #2]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8006414:	2302      	movs	r3, #2
 8006416:	e003      	b.n	8006420 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8006418:	2312      	movs	r3, #18
 800641a:	e001      	b.n	8006420 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800641c:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006420:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006426:	f107 0310 	add.w	r3, r7, #16
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f004 fd5f 	bl	800aef4 <HAL_OSPI_Command>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	e00e      	b.n	8006460 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f004 ff7b 	bl	800b348 <HAL_OSPI_MemoryMapped>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	e000      	b.n	8006460 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3760      	adds	r7, #96	; 0x60
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b098      	sub	sp, #96	; 0x60
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8006474:	f107 0310 	add.w	r3, r7, #16
 8006478:	2250      	movs	r2, #80	; 0x50
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f01c fe54 	bl	802312a <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800648c:	2301      	movs	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006494:	2304      	movs	r3, #4
 8006496:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8006498:	2308      	movs	r3, #8
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800649c:	2310      	movs	r3, #16
 800649e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80064a0:	f64e 6311 	movw	r3, #60945	; 0xee11
 80064a4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80064a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80064ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80064b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80064bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064c0:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80064c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80064c8:	2306      	movs	r3, #6
 80064ca:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80064cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80064d0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80064d2:	2300      	movs	r3, #0
 80064d4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064d6:	f107 0310 	add.w	r3, r7, #16
 80064da:	f241 3288 	movw	r2, #5000	; 0x1388
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f004 fd07 	bl	800aef4 <HAL_OSPI_Command>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 80064ec:	f04f 33ff 	mov.w	r3, #4294967295
 80064f0:	e025      	b.n	800653e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80064f2:	2302      	movs	r3, #2
 80064f4:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80064f6:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80064fa:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8006500:	2300      	movs	r3, #0
 8006502:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006504:	f107 0310 	add.w	r3, r7, #16
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f004 fcf0 	bl	800aef4 <HAL_OSPI_Command>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	e00e      	b.n	800653e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8006524:	f107 0308 	add.w	r3, r7, #8
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f004 ff0c 	bl	800b348 <HAL_OSPI_MemoryMapped>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	e000      	b.n	800653e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3760      	adds	r7, #96	; 0x60
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b09c      	sub	sp, #112	; 0x70
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
 8006552:	4613      	mov	r3, r2
 8006554:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8006556:	f107 0320 	add.w	r3, r7, #32
 800655a:	2250      	movs	r2, #80	; 0x50
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f01c fde3 	bl	802312a <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <MX25LM51245G_WriteEnable+0x40>
 800657a:	78bb      	ldrb	r3, [r7, #2]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	e0a6      	b.n	80066d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800658a:	2300      	movs	r3, #0
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <MX25LM51245G_WriteEnable+0x52>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <MX25LM51245G_WriteEnable+0x54>
 8006598:	2304      	movs	r3, #4
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800659c:	78bb      	ldrb	r3, [r7, #2]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <MX25LM51245G_WriteEnable+0x60>
 80065a2:	2308      	movs	r3, #8
 80065a4:	e000      	b.n	80065a8 <MX25LM51245G_WriteEnable+0x62>
 80065a6:	2300      	movs	r3, #0
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <MX25LM51245G_WriteEnable+0x6e>
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <MX25LM51245G_WriteEnable+0x70>
 80065b4:	2310      	movs	r3, #16
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <MX25LM51245G_WriteEnable+0x7c>
 80065be:	2306      	movs	r3, #6
 80065c0:	e001      	b.n	80065c6 <MX25LM51245G_WriteEnable+0x80>
 80065c2:	f240 63f9 	movw	r3, #1785	; 0x6f9
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80065d8:	2300      	movs	r3, #0
 80065da:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80065dc:	2300      	movs	r3, #0
 80065de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065e0:	f107 0320 	add.w	r3, r7, #32
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f004 fc82 	bl	800aef4 <HAL_OSPI_Command>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	e06b      	b.n	80066d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <MX25LM51245G_WriteEnable+0xc0>
 8006602:	2305      	movs	r3, #5
 8006604:	e001      	b.n	800660a <MX25LM51245G_WriteEnable+0xc4>
 8006606:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <MX25LM51245G_WriteEnable+0xd0>
 8006612:	2300      	movs	r3, #0
 8006614:	e001      	b.n	800661a <MX25LM51245G_WriteEnable+0xd4>
 8006616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800661c:	78bb      	ldrb	r3, [r7, #2]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d102      	bne.n	8006628 <MX25LM51245G_WriteEnable+0xe2>
 8006622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006626:	e000      	b.n	800662a <MX25LM51245G_WriteEnable+0xe4>
 8006628:	2300      	movs	r3, #0
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800662c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <MX25LM51245G_WriteEnable+0xfc>
 800663c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006640:	e001      	b.n	8006646 <MX25LM51245G_WriteEnable+0x100>
 8006642:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006646:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006648:	78bb      	ldrb	r3, [r7, #2]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d102      	bne.n	8006654 <MX25LM51245G_WriteEnable+0x10e>
 800664e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006652:	e000      	b.n	8006656 <MX25LM51245G_WriteEnable+0x110>
 8006654:	2300      	movs	r3, #0
 8006656:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <MX25LM51245G_WriteEnable+0x11c>
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <MX25LM51245G_WriteEnable+0x11e>
 8006662:	2305      	movs	r3, #5
 8006664:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006666:	78bb      	ldrb	r3, [r7, #2]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <MX25LM51245G_WriteEnable+0x12a>
 800666c:	2302      	movs	r3, #2
 800666e:	e000      	b.n	8006672 <MX25LM51245G_WriteEnable+0x12c>
 8006670:	2301      	movs	r3, #1
 8006672:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006674:	78bb      	ldrb	r3, [r7, #2]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d102      	bne.n	8006680 <MX25LM51245G_WriteEnable+0x13a>
 800667a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800667e:	e000      	b.n	8006682 <MX25LM51245G_WriteEnable+0x13c>
 8006680:	2300      	movs	r3, #0
 8006682:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006684:	f107 0320 	add.w	r3, r7, #32
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f004 fc30 	bl	800aef4 <HAL_OSPI_Command>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	e019      	b.n	80066d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 80066a0:	2302      	movs	r3, #2
 80066a2:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 80066a4:	2302      	movs	r3, #2
 80066a6:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80066ac:	2310      	movs	r3, #16
 80066ae:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80066b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066b4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80066b6:	f107 030c 	add.w	r3, r7, #12
 80066ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f004 fdba 	bl	800b23a <HAL_OSPI_AutoPolling>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	e000      	b.n	80066d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3770      	adds	r7, #112	; 0x70
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b098      	sub	sp, #96	; 0x60
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	72fb      	strb	r3, [r7, #11]
 80066ea:	4613      	mov	r3, r2
 80066ec:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80066ee:	f107 0310 	add.w	r3, r7, #16
 80066f2:	2250      	movs	r2, #80	; 0x50
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f01c fd17 	bl	802312a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <MX25LM51245G_WriteCfg2Register+0x32>
 8006702:	7abb      	ldrb	r3, [r7, #10]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d102      	bne.n	800670e <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	e077      	b.n	80067fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006716:	7afb      	ldrb	r3, [r7, #11]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <MX25LM51245G_WriteCfg2Register+0x44>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <MX25LM51245G_WriteCfg2Register+0x46>
 8006720:	2304      	movs	r3, #4
 8006722:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006724:	7abb      	ldrb	r3, [r7, #10]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <MX25LM51245G_WriteCfg2Register+0x52>
 800672a:	2308      	movs	r3, #8
 800672c:	e000      	b.n	8006730 <MX25LM51245G_WriteCfg2Register+0x54>
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <MX25LM51245G_WriteCfg2Register+0x60>
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <MX25LM51245G_WriteCfg2Register+0x62>
 800673c:	2310      	movs	r3, #16
 800673e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <MX25LM51245G_WriteCfg2Register+0x6e>
 8006746:	2372      	movs	r3, #114	; 0x72
 8006748:	e001      	b.n	800674e <MX25LM51245G_WriteCfg2Register+0x72>
 800674a:	f247 238d 	movw	r3, #29325	; 0x728d
 800674e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <MX25LM51245G_WriteCfg2Register+0x80>
 8006756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800675a:	e001      	b.n	8006760 <MX25LM51245G_WriteCfg2Register+0x84>
 800675c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006762:	7abb      	ldrb	r3, [r7, #10]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d102      	bne.n	800676e <MX25LM51245G_WriteCfg2Register+0x92>
 8006768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800676c:	e000      	b.n	8006770 <MX25LM51245G_WriteCfg2Register+0x94>
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006772:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800677c:	2300      	movs	r3, #0
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <MX25LM51245G_WriteCfg2Register+0xb0>
 8006786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800678a:	e001      	b.n	8006790 <MX25LM51245G_WriteCfg2Register+0xb4>
 800678c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006790:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006792:	7abb      	ldrb	r3, [r7, #10]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <MX25LM51245G_WriteCfg2Register+0xc2>
 8006798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679c:	e000      	b.n	80067a0 <MX25LM51245G_WriteCfg2Register+0xc4>
 800679e:	2300      	movs	r3, #0
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <MX25LM51245G_WriteCfg2Register+0xde>
 80067ac:	7abb      	ldrb	r3, [r7, #10]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <MX25LM51245G_WriteCfg2Register+0xda>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e002      	b.n	80067bc <MX25LM51245G_WriteCfg2Register+0xe0>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <MX25LM51245G_WriteCfg2Register+0xe0>
 80067ba:	2301      	movs	r3, #1
 80067bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80067be:	2300      	movs	r3, #0
 80067c0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80067c2:	2300      	movs	r3, #0
 80067c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067c6:	f107 0310 	add.w	r3, r7, #16
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4619      	mov	r1, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f004 fb8f 	bl	800aef4 <HAL_OSPI_Command>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e00d      	b.n	80067fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f004 fc0f 	bl	800b00e <HAL_OSPI_Transmit>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	e000      	b.n	80067fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3760      	adds	r7, #96	; 0x60
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b098      	sub	sp, #96	; 0x60
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	72fb      	strb	r3, [r7, #11]
 8006814:	4613      	mov	r3, r2
 8006816:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	2250      	movs	r2, #80	; 0x50
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f01c fc82 	bl	802312a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <MX25LM51245G_ReadCfg2Register+0x32>
 800682c:	7abb      	ldrb	r3, [r7, #10]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d102      	bne.n	8006838 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8006832:	f04f 33ff 	mov.w	r3, #4294967295
 8006836:	e07c      	b.n	8006932 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <MX25LM51245G_ReadCfg2Register+0x44>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <MX25LM51245G_ReadCfg2Register+0x46>
 800684a:	2304      	movs	r3, #4
 800684c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800684e:	7abb      	ldrb	r3, [r7, #10]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <MX25LM51245G_ReadCfg2Register+0x52>
 8006854:	2308      	movs	r3, #8
 8006856:	e000      	b.n	800685a <MX25LM51245G_ReadCfg2Register+0x54>
 8006858:	2300      	movs	r3, #0
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <MX25LM51245G_ReadCfg2Register+0x60>
 8006862:	2300      	movs	r3, #0
 8006864:	e000      	b.n	8006868 <MX25LM51245G_ReadCfg2Register+0x62>
 8006866:	2310      	movs	r3, #16
 8006868:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <MX25LM51245G_ReadCfg2Register+0x6e>
 8006870:	2371      	movs	r3, #113	; 0x71
 8006872:	e001      	b.n	8006878 <MX25LM51245G_ReadCfg2Register+0x72>
 8006874:	f247 138e 	movw	r3, #29070	; 0x718e
 8006878:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <MX25LM51245G_ReadCfg2Register+0x80>
 8006880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006884:	e001      	b.n	800688a <MX25LM51245G_ReadCfg2Register+0x84>
 8006886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800688c:	7abb      	ldrb	r3, [r7, #10]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d102      	bne.n	8006898 <MX25LM51245G_ReadCfg2Register+0x92>
 8006892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006896:	e000      	b.n	800689a <MX25LM51245G_ReadCfg2Register+0x94>
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800689c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80068a0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <MX25LM51245G_ReadCfg2Register+0xb0>
 80068b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b4:	e001      	b.n	80068ba <MX25LM51245G_ReadCfg2Register+0xb4>
 80068b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068ba:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80068bc:	7abb      	ldrb	r3, [r7, #10]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d102      	bne.n	80068c8 <MX25LM51245G_ReadCfg2Register+0xc2>
 80068c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068c6:	e000      	b.n	80068ca <MX25LM51245G_ReadCfg2Register+0xc4>
 80068c8:	2300      	movs	r3, #0
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <MX25LM51245G_ReadCfg2Register+0xd0>
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <MX25LM51245G_ReadCfg2Register+0xd2>
 80068d6:	2305      	movs	r3, #5
 80068d8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80068da:	7abb      	ldrb	r3, [r7, #10]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <MX25LM51245G_ReadCfg2Register+0xde>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e000      	b.n	80068e6 <MX25LM51245G_ReadCfg2Register+0xe0>
 80068e4:	2301      	movs	r3, #1
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80068e8:	7abb      	ldrb	r3, [r7, #10]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d102      	bne.n	80068f4 <MX25LM51245G_ReadCfg2Register+0xee>
 80068ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80068f2:	e000      	b.n	80068f6 <MX25LM51245G_ReadCfg2Register+0xf0>
 80068f4:	2300      	movs	r3, #0
 80068f6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80068f8:	2300      	movs	r3, #0
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068fc:	f107 0310 	add.w	r3, r7, #16
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f004 faf4 	bl	800aef4 <HAL_OSPI_Command>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	e00c      	b.n	8006932 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f004 fbe8 	bl	800b0f4 <HAL_OSPI_Receive>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	e000      	b.n	8006932 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3760      	adds	r7, #96	; 0x60
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b096      	sub	sp, #88	; 0x58
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
 8006946:	4613      	mov	r3, r2
 8006948:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800694a:	f107 0308 	add.w	r3, r7, #8
 800694e:	2250      	movs	r2, #80	; 0x50
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f01c fbe9 	bl	802312a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <MX25LM51245G_ResetEnable+0x30>
 800695e:	78bb      	ldrb	r3, [r7, #2]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d102      	bne.n	800696a <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8006964:	f04f 33ff 	mov.w	r3, #4294967295
 8006968:	e03b      	b.n	80069e2 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <MX25LM51245G_ResetEnable+0x42>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <MX25LM51245G_ResetEnable+0x44>
 800697c:	2304      	movs	r3, #4
 800697e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006980:	78bb      	ldrb	r3, [r7, #2]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <MX25LM51245G_ResetEnable+0x50>
 8006986:	2308      	movs	r3, #8
 8006988:	e000      	b.n	800698c <MX25LM51245G_ResetEnable+0x52>
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <MX25LM51245G_ResetEnable+0x5e>
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <MX25LM51245G_ResetEnable+0x60>
 8006998:	2310      	movs	r3, #16
 800699a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <MX25LM51245G_ResetEnable+0x6c>
 80069a2:	2366      	movs	r3, #102	; 0x66
 80069a4:	e001      	b.n	80069aa <MX25LM51245G_ResetEnable+0x70>
 80069a6:	f246 6399 	movw	r3, #26265	; 0x6699
 80069aa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80069bc:	2300      	movs	r3, #0
 80069be:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80069c0:	2300      	movs	r3, #0
 80069c2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069c4:	f107 0308 	add.w	r3, r7, #8
 80069c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f004 fa90 	bl	800aef4 <HAL_OSPI_Command>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	e000      	b.n	80069e2 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3758      	adds	r7, #88	; 0x58
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b096      	sub	sp, #88	; 0x58
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
 80069f6:	4613      	mov	r3, r2
 80069f8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	2250      	movs	r2, #80	; 0x50
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f01c fb91 	bl	802312a <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <MX25LM51245G_ResetMemory+0x30>
 8006a0e:	78bb      	ldrb	r3, [r7, #2]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8006a14:	f04f 33ff 	mov.w	r3, #4294967295
 8006a18:	e03b      	b.n	8006a92 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <MX25LM51245G_ResetMemory+0x42>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <MX25LM51245G_ResetMemory+0x44>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006a30:	78bb      	ldrb	r3, [r7, #2]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <MX25LM51245G_ResetMemory+0x50>
 8006a36:	2308      	movs	r3, #8
 8006a38:	e000      	b.n	8006a3c <MX25LM51245G_ResetMemory+0x52>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <MX25LM51245G_ResetMemory+0x5e>
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <MX25LM51245G_ResetMemory+0x60>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <MX25LM51245G_ResetMemory+0x6c>
 8006a52:	2399      	movs	r3, #153	; 0x99
 8006a54:	e001      	b.n	8006a5a <MX25LM51245G_ResetMemory+0x70>
 8006a56:	f649 1366 	movw	r3, #39270	; 0x9966
 8006a5a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006a70:	2300      	movs	r3, #0
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f004 fa38 	bl	800aef4 <HAL_OSPI_Command>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	e000      	b.n	8006a92 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3758      	adds	r7, #88	; 0x58
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <BSP_I2C4_Init+0x64>)
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <BSP_I2C4_Init+0x68>)
 8006aaa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <BSP_I2C4_Init+0x6c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11f      	bne.n	8006af4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8006ab4:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <BSP_I2C4_Init+0x6c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <BSP_I2C4_Init+0x6c>)
 8006abc:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006abe:	4810      	ldr	r0, [pc, #64]	; (8006b00 <BSP_I2C4_Init+0x64>)
 8006ac0:	f003 f86e 	bl	8009ba0 <HAL_I2C_GetState>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d114      	bne.n	8006af4 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8006aca:	480d      	ldr	r0, [pc, #52]	; (8006b00 <BSP_I2C4_Init+0x64>)
 8006acc:	f000 fb60 	bl	8007190 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006ad0:	f005 ff4c 	bl	800c96c <HAL_RCC_GetPCLK2Freq>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	490d      	ldr	r1, [pc, #52]	; (8006b0c <BSP_I2C4_Init+0x70>)
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f8e3 	bl	8006ca4 <I2C_GetTiming>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4807      	ldr	r0, [pc, #28]	; (8006b00 <BSP_I2C4_Init+0x64>)
 8006ae4:	f000 f838 	bl	8006b58 <MX_I2C4_Init>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8006aee:	f06f 0307 	mvn.w	r3, #7
 8006af2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8006af4:	687b      	ldr	r3, [r7, #4]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	24001fd4 	.word	0x24001fd4
 8006b04:	58001c00 	.word	0x58001c00
 8006b08:	240015cc 	.word	0x240015cc
 8006b0c:	000186a0 	.word	0x000186a0

08006b10 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <BSP_I2C4_DeInit+0x40>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4a0b      	ldr	r2, [pc, #44]	; (8006b50 <BSP_I2C4_DeInit+0x40>)
 8006b22:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <BSP_I2C4_DeInit+0x40>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <BSP_I2C4_DeInit+0x44>)
 8006b2e:	f000 fb9b 	bl	8007268 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006b32:	4808      	ldr	r0, [pc, #32]	; (8006b54 <BSP_I2C4_DeInit+0x44>)
 8006b34:	f002 fdd6 	bl	80096e4 <HAL_I2C_DeInit>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006b3e:	f06f 0307 	mvn.w	r3, #7
 8006b42:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8006b44:	687b      	ldr	r3, [r7, #4]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	240015cc 	.word	0x240015cc
 8006b54:	24001fd4 	.word	0x24001fd4

08006b58 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f002 fd14 	bl	80095c4 <HAL_I2C_Init>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e014      	b.n	8006bd2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f003 fac8 	bl	800a144 <HAL_I2CEx_ConfigAnalogFilter>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
 8006bbe:	e008      	b.n	8006bd2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f003 fb09 	bl	800a1da <HAL_I2CEx_ConfigDigitalFilter>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60ba      	str	r2, [r7, #8]
 8006be4:	461a      	mov	r2, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	81fb      	strh	r3, [r7, #14]
 8006bea:	460b      	mov	r3, r1
 8006bec:	81bb      	strh	r3, [r7, #12]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8006bf2:	89b9      	ldrh	r1, [r7, #12]
 8006bf4:	89f8      	ldrh	r0, [r7, #14]
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f000 fb57 	bl	80072b0 <I2C4_WriteReg>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e00c      	b.n	8006c28 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006c0e:	4809      	ldr	r0, [pc, #36]	; (8006c34 <BSP_I2C4_WriteReg+0x58>)
 8006c10:	f002 ffd4 	bl	8009bbc <HAL_I2C_GetError>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d103      	bne.n	8006c22 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006c1a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e002      	b.n	8006c28 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006c22:	f06f 0303 	mvn.w	r3, #3
 8006c26:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006c28:	697b      	ldr	r3, [r7, #20]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	24001fd4 	.word	0x24001fd4

08006c38 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60ba      	str	r2, [r7, #8]
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	81fb      	strh	r3, [r7, #14]
 8006c46:	460b      	mov	r3, r1
 8006c48:	81bb      	strh	r3, [r7, #12]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8006c4e:	89b9      	ldrh	r1, [r7, #12]
 8006c50:	89f8      	ldrh	r0, [r7, #14]
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f000 fb4f 	bl	80072fc <I2C4_ReadReg>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e00c      	b.n	8006c84 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006c6a:	4809      	ldr	r0, [pc, #36]	; (8006c90 <BSP_I2C4_ReadReg+0x58>)
 8006c6c:	f002 ffa6 	bl	8009bbc <HAL_I2C_GetError>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d103      	bne.n	8006c7e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006c76:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e002      	b.n	8006c84 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006c7e:	f06f 0303 	mvn.w	r3, #3
 8006c82:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006c84:	697b      	ldr	r3, [r7, #20]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	24001fd4 	.word	0x24001fd4

08006c94 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8006c98:	f001 fcba 	bl	8008610 <HAL_GetTick>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d06b      	beq.n	8006d90 <I2C_GetTiming+0xec>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d068      	beq.n	8006d90 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e060      	b.n	8006d86 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8006cc4:	4a35      	ldr	r2, [pc, #212]	; (8006d9c <I2C_GetTiming+0xf8>)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	212c      	movs	r1, #44	; 0x2c
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d352      	bcc.n	8006d80 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8006cda:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <I2C_GetTiming+0xf8>)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	212c      	movs	r1, #44	; 0x2c
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d847      	bhi.n	8006d80 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8006cf0:	6939      	ldr	r1, [r7, #16]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f856 	bl	8006da4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8006cf8:	6939      	ldr	r1, [r7, #16]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f940 	bl	8006f80 <I2C_Compute_SCLL_SCLH>
 8006d00:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b7f      	cmp	r3, #127	; 0x7f
 8006d06:	d842      	bhi.n	8006d8e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006d08:	4925      	ldr	r1, [pc, #148]	; (8006da0 <I2C_GetTiming+0xfc>)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006d1a:	4821      	ldr	r0, [pc, #132]	; (8006da0 <I2C_GetTiming+0xfc>)
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4403      	add	r3, r0
 8006d28:	3304      	adds	r3, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	051b      	lsls	r3, r3, #20
 8006d2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006d32:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006d34:	481a      	ldr	r0, [pc, #104]	; (8006da0 <I2C_GetTiming+0xfc>)
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4403      	add	r3, r0
 8006d42:	3308      	adds	r3, #8
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006d4c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006d4e:	4814      	ldr	r0, [pc, #80]	; (8006da0 <I2C_GetTiming+0xfc>)
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4403      	add	r3, r0
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006d64:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006d66:	480e      	ldr	r0, [pc, #56]	; (8006da0 <I2C_GetTiming+0xfc>)
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4403      	add	r3, r0
 8006d74:	3310      	adds	r3, #16
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	617b      	str	r3, [r7, #20]
        }
        break;
 8006d7e:	e006      	b.n	8006d8e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3301      	adds	r3, #1
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d99b      	bls.n	8006cc4 <I2C_GetTiming+0x20>
 8006d8c:	e000      	b.n	8006d90 <I2C_GetTiming+0xec>
        break;
 8006d8e:	bf00      	nop
      }
    }
  }

  return ret;
 8006d90:	697b      	ldr	r3, [r7, #20]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08024fc0 	.word	0x08024fc0
 8006da0:	240015d0 	.word	0x240015d0

08006da4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b08f      	sub	sp, #60	; 0x3c
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006dae:	2310      	movs	r3, #16
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	085a      	lsrs	r2, r3, #1
 8006db6:	4b6e      	ldr	r3, [pc, #440]	; (8006f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8006db8:	4413      	add	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006dc2:	2332      	movs	r3, #50	; 0x32
 8006dc4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8006dc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006dca:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006dcc:	4a69      	ldr	r2, [pc, #420]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	212c      	movs	r1, #44	; 0x2c
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	4a65      	ldr	r2, [pc, #404]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	212c      	movs	r1, #44	; 0x2c
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	330c      	adds	r3, #12
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006df0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006df2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006df4:	495f      	ldr	r1, [pc, #380]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	202c      	movs	r0, #44	; 0x2c
 8006dfa:	fb00 f303 	mul.w	r3, r0, r3
 8006dfe:	440b      	add	r3, r1
 8006e00:	3328      	adds	r3, #40	; 0x28
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3303      	adds	r3, #3
 8006e06:	69f9      	ldr	r1, [r7, #28]
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006e10:	4a58      	ldr	r2, [pc, #352]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	212c      	movs	r1, #44	; 0x2c
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3310      	adds	r3, #16
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	4a54      	ldr	r2, [pc, #336]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	212c      	movs	r1, #44	; 0x2c
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3320      	adds	r3, #32
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006e34:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006e36:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006e38:	494e      	ldr	r1, [pc, #312]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	202c      	movs	r0, #44	; 0x2c
 8006e3e:	fb00 f303 	mul.w	r3, r0, r3
 8006e42:	440b      	add	r3, r1
 8006e44:	3328      	adds	r3, #40	; 0x28
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8006e54:	4a47      	ldr	r2, [pc, #284]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	212c      	movs	r1, #44	; 0x2c
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	3320      	adds	r3, #32
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	4a43      	ldr	r2, [pc, #268]	; (8006f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	212c      	movs	r1, #44	; 0x2c
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	3314      	adds	r3, #20
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4403      	add	r3, r0
 8006e78:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dc01      	bgt.n	8006e84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dc01      	bgt.n	8006e8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e92:	e062      	b.n	8006f5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006e94:	2300      	movs	r3, #0
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
 8006e98:	e059      	b.n	8006f4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea0:	3201      	adds	r2, #1
 8006ea2:	fb03 f202 	mul.w	r2, r3, r2
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d348      	bcc.n	8006f48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	e042      	b.n	8006f42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	fb03 f202 	mul.w	r2, r3, r2
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d332      	bcc.n	8006f3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d82e      	bhi.n	8006f3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d02a      	beq.n	8006f3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4924      	ldr	r1, [pc, #144]	; (8006f7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006efa:	4b1f      	ldr	r3, [pc, #124]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	491f      	ldr	r1, [pc, #124]	; (8006f7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	4919      	ldr	r1, [pc, #100]	; (8006f7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3308      	adds	r3, #8
 8006f22:	6a3a      	ldr	r2, [r7, #32]
 8006f24:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	4a11      	ldr	r2, [pc, #68]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006f32:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006f34:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	d812      	bhi.n	8006f62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	2b0f      	cmp	r3, #15
 8006f46:	d9b9      	bls.n	8006ebc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b0f      	cmp	r3, #15
 8006f52:	d9a2      	bls.n	8006e9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	3301      	adds	r3, #1
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	2b0f      	cmp	r3, #15
 8006f5e:	d999      	bls.n	8006e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8006f60:	e000      	b.n	8006f64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8006f62:	bf00      	nop
          }
        }
      }
    }
  }
}
 8006f64:	373c      	adds	r7, #60	; 0x3c
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	3b9aca00 	.word	0x3b9aca00
 8006f74:	08024fc0 	.word	0x08024fc0
 8006f78:	24001fd0 	.word	0x24001fd0
 8006f7c:	240015d0 	.word	0x240015d0

08006f80 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b093      	sub	sp, #76	; 0x4c
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	085a      	lsrs	r2, r3, #1
 8006f94:	4b7a      	ldr	r3, [pc, #488]	; (8007180 <I2C_Compute_SCLL_SCLH+0x200>)
 8006f96:	4413      	add	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8006fa0:	4a78      	ldr	r2, [pc, #480]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	212c      	movs	r1, #44	; 0x2c
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	085a      	lsrs	r2, r3, #1
 8006fb0:	4b73      	ldr	r3, [pc, #460]	; (8007180 <I2C_Compute_SCLL_SCLH+0x200>)
 8006fb2:	4413      	add	r3, r2
 8006fb4:	4973      	ldr	r1, [pc, #460]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	202c      	movs	r0, #44	; 0x2c
 8006fba:	fb00 f202 	mul.w	r2, r0, r2
 8006fbe:	440a      	add	r2, r1
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006fc8:	2332      	movs	r3, #50	; 0x32
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8006fcc:	4a6d      	ldr	r2, [pc, #436]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	212c      	movs	r1, #44	; 0x2c
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3328      	adds	r3, #40	; 0x28
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	fb02 f303 	mul.w	r3, r2, r3
 8006fe2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8006fe4:	4a67      	ldr	r2, [pc, #412]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	212c      	movs	r1, #44	; 0x2c
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a62      	ldr	r2, [pc, #392]	; (8007180 <I2C_Compute_SCLL_SCLH+0x200>)
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8006ffc:	4a61      	ldr	r2, [pc, #388]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	212c      	movs	r1, #44	; 0x2c
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3308      	adds	r3, #8
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a5c      	ldr	r2, [pc, #368]	; (8007180 <I2C_Compute_SCLL_SCLH+0x200>)
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007018:	2300      	movs	r3, #0
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
 800701c:	e0a3      	b.n	8007166 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800701e:	495a      	ldr	r1, [pc, #360]	; (8007188 <I2C_Compute_SCLL_SCLH+0x208>)
 8007020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	e08c      	b.n	8007158 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	441a      	add	r2, r3
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	3301      	adds	r3, #1
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	fb03 f101 	mul.w	r1, r3, r1
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	440b      	add	r3, r1
 8007054:	4413      	add	r3, r2
 8007056:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007058:	4a4a      	ldr	r2, [pc, #296]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	212c      	movs	r1, #44	; 0x2c
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	4413      	add	r3, r2
 8007064:	3318      	adds	r3, #24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d971      	bls.n	8007152 <I2C_Compute_SCLL_SCLH+0x1d2>
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	089b      	lsrs	r3, r3, #2
 800707a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707c:	429a      	cmp	r2, r3
 800707e:	d268      	bcs.n	8007152 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007080:	2300      	movs	r3, #0
 8007082:	63bb      	str	r3, [r7, #56]	; 0x38
 8007084:	e062      	b.n	800714c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	441a      	add	r2, r3
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	3301      	adds	r3, #1
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	fb03 f101 	mul.w	r1, r3, r1
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	440b      	add	r3, r1
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	441a      	add	r2, r3
 80070a6:	4937      	ldr	r1, [pc, #220]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	202c      	movs	r0, #44	; 0x2c
 80070ac:	fb00 f303 	mul.w	r3, r0, r3
 80070b0:	440b      	add	r3, r1
 80070b2:	3320      	adds	r3, #32
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	441a      	add	r2, r3
 80070b8:	4932      	ldr	r1, [pc, #200]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	202c      	movs	r0, #44	; 0x2c
 80070be:	fb00 f303 	mul.w	r3, r0, r3
 80070c2:	440b      	add	r3, r1
 80070c4:	3324      	adds	r3, #36	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4413      	add	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d338      	bcc.n	8007146 <I2C_Compute_SCLL_SCLH+0x1c6>
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d834      	bhi.n	8007146 <I2C_Compute_SCLL_SCLH+0x1c6>
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <I2C_Compute_SCLL_SCLH+0x204>)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	212c      	movs	r1, #44	; 0x2c
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	331c      	adds	r3, #28
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d329      	bcc.n	8007146 <I2C_Compute_SCLL_SCLH+0x1c6>
 80070f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d225      	bcs.n	8007146 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	2b00      	cmp	r3, #0
 8007106:	da02      	bge.n	800710e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	425b      	negs	r3, r3
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007112:	429a      	cmp	r2, r3
 8007114:	d917      	bls.n	8007146 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800711a:	491b      	ldr	r1, [pc, #108]	; (8007188 <I2C_Compute_SCLL_SCLH+0x208>)
 800711c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3310      	adds	r3, #16
 800712a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800712c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800712e:	4916      	ldr	r1, [pc, #88]	; (8007188 <I2C_Compute_SCLL_SCLH+0x208>)
 8007130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	330c      	adds	r3, #12
 800713e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007140:	601a      	str	r2, [r3, #0]
              ret = count;
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	3301      	adds	r3, #1
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d999      	bls.n	8007086 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	3301      	adds	r3, #1
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	f67f af6f 	bls.w	800703e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	3301      	adds	r3, #1
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <I2C_Compute_SCLL_SCLH+0x20c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800716c:	429a      	cmp	r2, r3
 800716e:	f4ff af56 	bcc.w	800701e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007174:	4618      	mov	r0, r3
 8007176:	374c      	adds	r7, #76	; 0x4c
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	3b9aca00 	.word	0x3b9aca00
 8007184:	08024fc0 	.word	0x08024fc0
 8007188:	240015d0 	.word	0x240015d0
 800718c:	24001fd0 	.word	0x24001fd0

08007190 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007198:	4b31      	ldr	r3, [pc, #196]	; (8007260 <I2C4_MspInit+0xd0>)
 800719a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800719e:	4a30      	ldr	r2, [pc, #192]	; (8007260 <I2C4_MspInit+0xd0>)
 80071a0:	f043 0308 	orr.w	r3, r3, #8
 80071a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80071a8:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <I2C4_MspInit+0xd0>)
 80071aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80071b6:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <I2C4_MspInit+0xd0>)
 80071b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80071bc:	4a28      	ldr	r2, [pc, #160]	; (8007260 <I2C4_MspInit+0xd0>)
 80071be:	f043 0308 	orr.w	r3, r3, #8
 80071c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80071c6:	4b26      	ldr	r3, [pc, #152]	; (8007260 <I2C4_MspInit+0xd0>)
 80071c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80071d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80071da:	2312      	movs	r3, #18
 80071dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80071e2:	2302      	movs	r3, #2
 80071e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80071e6:	2304      	movs	r3, #4
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80071ea:	f107 0314 	add.w	r3, r7, #20
 80071ee:	4619      	mov	r1, r3
 80071f0:	481c      	ldr	r0, [pc, #112]	; (8007264 <I2C4_MspInit+0xd4>)
 80071f2:	f001 fedf 	bl	8008fb4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80071f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80071fc:	2312      	movs	r3, #18
 80071fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8007204:	2302      	movs	r3, #2
 8007206:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8007208:	2304      	movs	r3, #4
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800720c:	f107 0314 	add.w	r3, r7, #20
 8007210:	4619      	mov	r1, r3
 8007212:	4814      	ldr	r0, [pc, #80]	; (8007264 <I2C4_MspInit+0xd4>)
 8007214:	f001 fece 	bl	8008fb4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8007218:	4b11      	ldr	r3, [pc, #68]	; (8007260 <I2C4_MspInit+0xd0>)
 800721a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800721e:	4a10      	ldr	r2, [pc, #64]	; (8007260 <I2C4_MspInit+0xd0>)
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007228:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <I2C4_MspInit+0xd0>)
 800722a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <I2C4_MspInit+0xd0>)
 8007238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <I2C4_MspInit+0xd0>)
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <I2C4_MspInit+0xd0>)
 8007248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800724c:	4a04      	ldr	r2, [pc, #16]	; (8007260 <I2C4_MspInit+0xd0>)
 800724e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007252:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8007256:	bf00      	nop
 8007258:	3728      	adds	r7, #40	; 0x28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
 8007264:	58020c00 	.word	0x58020c00

08007268 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8007270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007274:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4619      	mov	r1, r3
 800727a:	480b      	ldr	r0, [pc, #44]	; (80072a8 <I2C4_MspDeInit+0x40>)
 800727c:	f002 f84a 	bl	8009314 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8007280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007284:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4619      	mov	r1, r3
 800728a:	4807      	ldr	r0, [pc, #28]	; (80072a8 <I2C4_MspDeInit+0x40>)
 800728c:	f002 f842 	bl	8009314 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <I2C4_MspDeInit+0x44>)
 8007292:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007296:	4a05      	ldr	r2, [pc, #20]	; (80072ac <I2C4_MspDeInit+0x44>)
 8007298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80072a0:	bf00      	nop
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	58020c00 	.word	0x58020c00
 80072ac:	58024400 	.word	0x58024400

080072b0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	607b      	str	r3, [r7, #4]
 80072b8:	4603      	mov	r3, r0
 80072ba:	81fb      	strh	r3, [r7, #14]
 80072bc:	460b      	mov	r3, r1
 80072be:	81bb      	strh	r3, [r7, #12]
 80072c0:	4613      	mov	r3, r2
 80072c2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80072c4:	8978      	ldrh	r0, [r7, #10]
 80072c6:	89ba      	ldrh	r2, [r7, #12]
 80072c8:	89f9      	ldrh	r1, [r7, #14]
 80072ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ce:	9302      	str	r3, [sp, #8]
 80072d0:	8b3b      	ldrh	r3, [r7, #24]
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4603      	mov	r3, r0
 80072da:	4807      	ldr	r0, [pc, #28]	; (80072f8 <I2C4_WriteReg+0x48>)
 80072dc:	f002 fa32 	bl	8009744 <HAL_I2C_Mem_Write>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e001      	b.n	80072ee <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80072ea:	f06f 0307 	mvn.w	r3, #7
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	24001fd4 	.word	0x24001fd4

080072fc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af04      	add	r7, sp, #16
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	4603      	mov	r3, r0
 8007306:	81fb      	strh	r3, [r7, #14]
 8007308:	460b      	mov	r3, r1
 800730a:	81bb      	strh	r3, [r7, #12]
 800730c:	4613      	mov	r3, r2
 800730e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007310:	8978      	ldrh	r0, [r7, #10]
 8007312:	89ba      	ldrh	r2, [r7, #12]
 8007314:	89f9      	ldrh	r1, [r7, #14]
 8007316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	8b3b      	ldrh	r3, [r7, #24]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4603      	mov	r3, r0
 8007326:	4807      	ldr	r0, [pc, #28]	; (8007344 <I2C4_ReadReg+0x48>)
 8007328:	f002 fb20 	bl	800996c <HAL_I2C_Mem_Read>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8007332:	2300      	movs	r3, #0
 8007334:	e001      	b.n	800733a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8007336:	f06f 0307 	mvn.w	r3, #7
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	24001fd4 	.word	0x24001fd4

08007348 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b094      	sub	sp, #80	; 0x50
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007352:	2300      	movs	r3, #0
 8007354:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800735c:	f06f 0301 	mvn.w	r3, #1
 8007360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007362:	e071      	b.n	8007448 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8007364:	4a3b      	ldr	r2, [pc, #236]	; (8007454 <BSP_OSPI_NOR_Init+0x10c>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d16b      	bne.n	8007448 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	225c      	movs	r2, #92	; 0x5c
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	4a37      	ldr	r2, [pc, #220]	; (8007458 <BSP_OSPI_NOR_Init+0x110>)
 800737a:	4413      	add	r3, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fa09 	bl	8007794 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8007382:	f107 031c 	add.w	r3, r7, #28
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fee8 	bl	800615c <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800738c:	2303      	movs	r3, #3
 800738e:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800739c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800739e:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 80073a6:	2320      	movs	r3, #32
 80073a8:	e003      	b.n	80073b2 <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 80073aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ac:	fab3 f383 	clz	r3, r3
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	225c      	movs	r2, #92	; 0x5c
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <BSP_OSPI_NOR_Init+0x110>)
 80073c8:	4413      	add	r3, r2
 80073ca:	f107 020c 	add.w	r2, r7, #12
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 f895 	bl	8007500 <MX_OSPI_NOR_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80073dc:	f06f 0303 	mvn.w	r3, #3
 80073e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073e2:	e031      	b.n	8007448 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fb7f 	bl	8007ae8 <OSPI_NOR_ResetMemory>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80073f0:	f06f 0304 	mvn.w	r3, #4
 80073f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f6:	e027      	b.n	8007448 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	225c      	movs	r2, #92	; 0x5c
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	4a15      	ldr	r2, [pc, #84]	; (8007458 <BSP_OSPI_NOR_Init+0x110>)
 8007402:	1898      	adds	r0, r3, r2
 8007404:	4a13      	ldr	r2, [pc, #76]	; (8007454 <BSP_OSPI_NOR_Init+0x10c>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	4413      	add	r3, r2
 800740c:	7859      	ldrb	r1, [r3, #1]
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <BSP_OSPI_NOR_Init+0x10c>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	789b      	ldrb	r3, [r3, #2]
 8007418:	461a      	mov	r2, r3
 800741a:	f7fe fece 	bl	80061ba <MX25LM51245G_AutoPollingMemReady>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007424:	f06f 0304 	mvn.w	r3, #4
 8007428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742a:	e00d      	b.n	8007448 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	7819      	ldrb	r1, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	461a      	mov	r2, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f936 	bl	80076a8 <BSP_OSPI_NOR_ConfigFlash>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8007442:	f06f 0304 	mvn.w	r3, #4
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800744a:	4618      	mov	r0, r3
 800744c:	3750      	adds	r7, #80	; 0x50
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	24002084 	.word	0x24002084
 8007458:	24002028 	.word	0x24002028

0800745c <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800746e:	f06f 0301 	mvn.w	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e03a      	b.n	80074ec <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007476:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d108      	bne.n	8007494 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8da 	bl	800763c <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800748e:	f06f 0304 	mvn.w	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d128      	bne.n	80074ec <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800749a:	4a17      	ldr	r2, [pc, #92]	; (80074f8 <BSP_OSPI_NOR_DeInit+0x9c>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2100      	movs	r1, #0
 80074a0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 80074a4:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <BSP_OSPI_NOR_DeInit+0x9c>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	4413      	add	r3, r2
 80074ac:	2200      	movs	r2, #0
 80074ae:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 80074b0:	4a11      	ldr	r2, [pc, #68]	; (80074f8 <BSP_OSPI_NOR_DeInit+0x9c>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	2200      	movs	r2, #0
 80074ba:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	225c      	movs	r2, #92	; 0x5c
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <BSP_OSPI_NOR_DeInit+0xa0>)
 80074c6:	4413      	add	r3, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fab3 	bl	8007a34 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	225c      	movs	r2, #92	; 0x5c
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <BSP_OSPI_NOR_DeInit+0xa0>)
 80074d8:	4413      	add	r3, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f003 fba0 	bl	800ac20 <HAL_OSPI_DeInit>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80074e6:	f06f 0303 	mvn.w	r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	24002084 	.word	0x24002084
 80074fc:	24002028 	.word	0x24002028

08007500 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a20      	ldr	r2, [pc, #128]	; (8007590 <MX_OSPI_NOR_Init+0x90>)
 800750e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 32;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2208      	movs	r2, #8
 8007556:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d108      	bne.n	8007572 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007566:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007570:	e005      	b.n	800757e <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f003 fa92 	bl	800aaa8 <HAL_OSPI_Init>
 8007584:	4603      	mov	r3, r0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	52005000 	.word	0x52005000

08007594 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80075a6:	f06f 0301 	mvn.w	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e03d      	b.n	800762a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80075ae:	4a21      	ldr	r2, [pc, #132]	; (8007634 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	789b      	ldrb	r3, [r3, #2]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11b      	bne.n	80075f4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	225c      	movs	r2, #92	; 0x5c
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80075c6:	1898      	adds	r0, r3, r2
 80075c8:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4413      	add	r3, r2
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2201      	movs	r2, #1
 80075d4:	4619      	mov	r1, r3
 80075d6:	f7fe fe9d 	bl	8006314 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80075e0:	f06f 0304 	mvn.w	r3, #4
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	e020      	b.n	800762a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80075e8:	4a12      	ldr	r2, [pc, #72]	; (8007634 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2102      	movs	r1, #2
 80075ee:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80075f2:	e01a      	b.n	800762a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	225c      	movs	r2, #92	; 0x5c
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	4a0e      	ldr	r2, [pc, #56]	; (8007638 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80075fe:	441a      	add	r2, r3
 8007600:	490c      	ldr	r1, [pc, #48]	; (8007634 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	440b      	add	r3, r1
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fe ff2b 	bl	8006468 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007618:	f06f 0304 	mvn.w	r3, #4
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	e004      	b.n	800762a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8007620:	4a04      	ldr	r2, [pc, #16]	; (8007634 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2102      	movs	r1, #2
 8007626:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	24002084 	.word	0x24002084
 8007638:	24002028 	.word	0x24002028

0800763c <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800764e:	f06f 0301 	mvn.w	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e01e      	b.n	8007694 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8007656:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d003      	beq.n	800766a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8007662:	f06f 031a 	mvn.w	r3, #26
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	e014      	b.n	8007694 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	225c      	movs	r2, #92	; 0x5c
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8007674:	4413      	add	r3, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f003 ff04 	bl	800b484 <HAL_OSPI_Abort>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8007682:	f06f 0303 	mvn.w	r3, #3
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e004      	b.n	8007694 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800768a:	4a05      	ldr	r2, [pc, #20]	; (80076a0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2101      	movs	r1, #1
 8007690:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	24002084 	.word	0x24002084
 80076a4:	24002028 	.word	0x24002028

080076a8 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
 80076b4:	4613      	mov	r3, r2
 80076b6:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80076c2:	f06f 0301 	mvn.w	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	e05d      	b.n	8007786 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80076ca:	4a31      	ldr	r2, [pc, #196]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d103      	bne.n	80076de <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80076d6:	f06f 0319 	mvn.w	r3, #25
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e053      	b.n	8007786 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80076de:	4a2c      	ldr	r2, [pc, #176]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d125      	bne.n	8007738 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d107      	bne.n	8007702 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 80076f2:	4a27      	ldr	r2, [pc, #156]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	789b      	ldrb	r3, [r3, #2]
 80076fc:	78ba      	ldrb	r2, [r7, #2]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d02a      	beq.n	8007758 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fbfc 	bl	8007f00 <OSPI_NOR_ExitOPIMode>
 8007708:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d123      	bne.n	8007758 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d120      	bne.n	8007758 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4413      	add	r3, r2
 800771e:	789b      	ldrb	r3, [r3, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa6f 	bl	8007c08 <OSPI_NOR_EnterDOPIMode>
 800772a:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800772c:	e014      	b.n	8007758 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb3a 	bl	8007da8 <OSPI_NOR_EnterSOPIMode>
 8007734:	60f8      	str	r0, [r7, #12]
      break;
 8007736:	e00f      	b.n	8007758 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10e      	bne.n	800775c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800773e:	78bb      	ldrb	r3, [r7, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb2f 	bl	8007da8 <OSPI_NOR_EnterSOPIMode>
 800774a:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800774c:	e006      	b.n	800775c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa5a 	bl	8007c08 <OSPI_NOR_EnterDOPIMode>
 8007754:	60f8      	str	r0, [r7, #12]
      break;
 8007756:	e001      	b.n	800775c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800775c:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d110      	bne.n	8007786 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007764:	4a0a      	ldr	r2, [pc, #40]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2101      	movs	r1, #1
 800776a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800776e:	4a08      	ldr	r2, [pc, #32]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	4413      	add	r3, r2
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800777a:	4a05      	ldr	r2, [pc, #20]	; (8007790 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	78ba      	ldrb	r2, [r7, #2]
 8007784:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	24002084 	.word	0x24002084

08007794 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b094      	sub	sp, #80	; 0x50
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800779c:	4b9e      	ldr	r3, [pc, #632]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800779e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077a2:	4a9d      	ldr	r2, [pc, #628]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077a8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80077ac:	4b9a      	ldr	r3, [pc, #616]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 80077ba:	4b97      	ldr	r3, [pc, #604]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077be:	4a96      	ldr	r2, [pc, #600]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c4:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80077c6:	4b94      	ldr	r3, [pc, #592]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ca:	4a93      	ldr	r2, [pc, #588]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d0:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 80077d2:	4b91      	ldr	r3, [pc, #580]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80077d8:	4a8f      	ldr	r2, [pc, #572]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077da:	f043 0302 	orr.w	r3, r3, #2
 80077de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80077e2:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 80077f0:	4b89      	ldr	r3, [pc, #548]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80077f6:	4a88      	ldr	r2, [pc, #544]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80077f8:	f043 0304 	orr.w	r3, r3, #4
 80077fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007800:	4b85      	ldr	r3, [pc, #532]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800780e:	4b82      	ldr	r3, [pc, #520]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007814:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800781e:	4b7e      	ldr	r3, [pc, #504]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800782c:	4b7a      	ldr	r3, [pc, #488]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800782e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007832:	4a79      	ldr	r2, [pc, #484]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007834:	f043 0308 	orr.w	r3, r3, #8
 8007838:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800783c:	4b76      	ldr	r3, [pc, #472]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800783e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800784a:	4b73      	ldr	r3, [pc, #460]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800784c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007850:	4a71      	ldr	r2, [pc, #452]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800785a:	4b6f      	ldr	r3, [pc, #444]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800785c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 8007868:	4b6b      	ldr	r3, [pc, #428]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800786a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800786e:	4a6a      	ldr	r2, [pc, #424]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007870:	f043 0320 	orr.w	r3, r3, #32
 8007874:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007878:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800787a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 8007886:	4b64      	ldr	r3, [pc, #400]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800788c:	4a62      	ldr	r2, [pc, #392]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 800788e:	f043 0320 	orr.w	r3, r3, #32
 8007892:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007896:	4b60      	ldr	r3, [pc, #384]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 80078a4:	4b5c      	ldr	r3, [pc, #368]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078aa:	4a5b      	ldr	r2, [pc, #364]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078ac:	f043 0304 	orr.w	r3, r3, #4
 80078b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80078b4:	4b58      	ldr	r3, [pc, #352]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 80078c2:	4b55      	ldr	r3, [pc, #340]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078c8:	4a53      	ldr	r2, [pc, #332]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80078d2:	4b51      	ldr	r3, [pc, #324]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 80078e0:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078e6:	4a4c      	ldr	r2, [pc, #304]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80078f0:	4b49      	ldr	r3, [pc, #292]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 80078f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 80078fe:	4b46      	ldr	r3, [pc, #280]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007904:	4a44      	ldr	r2, [pc, #272]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800790e:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <OSPI_NOR_MspInit+0x284>)
 8007910:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007920:	2302      	movs	r3, #2
 8007922:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007924:	2301      	movs	r3, #1
 8007926:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007928:	2303      	movs	r3, #3
 800792a:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800792c:	230a      	movs	r3, #10
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8007930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007934:	4619      	mov	r1, r3
 8007936:	4839      	ldr	r0, [pc, #228]	; (8007a1c <OSPI_NOR_MspInit+0x288>)
 8007938:	f001 fb3c 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800793c:	2320      	movs	r3, #32
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8007940:	230a      	movs	r3, #10
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8007944:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007948:	4619      	mov	r1, r3
 800794a:	4835      	ldr	r0, [pc, #212]	; (8007a20 <OSPI_NOR_MspInit+0x28c>)
 800794c:	f001 fb32 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8007950:	2304      	movs	r3, #4
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007954:	2300      	movs	r3, #0
 8007956:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8007958:	2309      	movs	r3, #9
 800795a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800795c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007960:	4619      	mov	r1, r3
 8007962:	4830      	ldr	r0, [pc, #192]	; (8007a24 <OSPI_NOR_MspInit+0x290>)
 8007964:	f001 fb26 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8007968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800796e:	2309      	movs	r3, #9
 8007970:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8007972:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007976:	4619      	mov	r1, r3
 8007978:	482b      	ldr	r0, [pc, #172]	; (8007a28 <OSPI_NOR_MspInit+0x294>)
 800797a:	f001 fb1b 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800797e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8007984:	230a      	movs	r3, #10
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8007988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800798c:	4619      	mov	r1, r3
 800798e:	4827      	ldr	r0, [pc, #156]	; (8007a2c <OSPI_NOR_MspInit+0x298>)
 8007990:	f001 fb10 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8007998:	230a      	movs	r3, #10
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800799c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079a0:	4619      	mov	r1, r3
 80079a2:	4822      	ldr	r0, [pc, #136]	; (8007a2c <OSPI_NOR_MspInit+0x298>)
 80079a4:	f001 fb06 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 80079ac:	230a      	movs	r3, #10
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 80079b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079b4:	4619      	mov	r1, r3
 80079b6:	481d      	ldr	r0, [pc, #116]	; (8007a2c <OSPI_NOR_MspInit+0x298>)
 80079b8:	f001 fafc 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 80079bc:	2302      	movs	r3, #2
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 80079c0:	230a      	movs	r3, #10
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80079c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079c8:	4619      	mov	r1, r3
 80079ca:	4815      	ldr	r0, [pc, #84]	; (8007a20 <OSPI_NOR_MspInit+0x28c>)
 80079cc:	f001 faf2 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 80079d0:	2308      	movs	r3, #8
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 80079d4:	2309      	movs	r3, #9
 80079d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80079d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079dc:	4619      	mov	r1, r3
 80079de:	4814      	ldr	r0, [pc, #80]	; (8007a30 <OSPI_NOR_MspInit+0x29c>)
 80079e0:	f001 fae8 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80079e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80079ea:	2309      	movs	r3, #9
 80079ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80079ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079f2:	4619      	mov	r1, r3
 80079f4:	4809      	ldr	r0, [pc, #36]	; (8007a1c <OSPI_NOR_MspInit+0x288>)
 80079f6:	f001 fadd 	bl	8008fb4 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80079fa:	2380      	movs	r3, #128	; 0x80
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80079fe:	230a      	movs	r3, #10
 8007a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8007a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a06:	4619      	mov	r1, r3
 8007a08:	4807      	ldr	r0, [pc, #28]	; (8007a28 <OSPI_NOR_MspInit+0x294>)
 8007a0a:	f001 fad3 	bl	8008fb4 <HAL_GPIO_Init>
}
 8007a0e:	bf00      	nop
 8007a10:	3750      	adds	r7, #80	; 0x50
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	58021800 	.word	0x58021800
 8007a20:	58020800 	.word	0x58020800
 8007a24:	58020400 	.word	0x58020400
 8007a28:	58020c00 	.word	0x58020c00
 8007a2c:	58021400 	.word	0x58021400
 8007a30:	58021c00 	.word	0x58021c00

08007a34 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8007a3c:	2104      	movs	r1, #4
 8007a3e:	4823      	ldr	r0, [pc, #140]	; (8007acc <OSPI_NOR_MspDeInit+0x98>)
 8007a40:	f001 fc68 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8007a44:	2120      	movs	r1, #32
 8007a46:	4822      	ldr	r0, [pc, #136]	; (8007ad0 <OSPI_NOR_MspDeInit+0x9c>)
 8007a48:	f001 fc64 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	4821      	ldr	r0, [pc, #132]	; (8007ad4 <OSPI_NOR_MspDeInit+0xa0>)
 8007a50:	f001 fc60 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8007a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a58:	481f      	ldr	r0, [pc, #124]	; (8007ad8 <OSPI_NOR_MspDeInit+0xa4>)
 8007a5a:	f001 fc5b 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8007a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a62:	481e      	ldr	r0, [pc, #120]	; (8007adc <OSPI_NOR_MspDeInit+0xa8>)
 8007a64:	f001 fc56 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8007a68:	2180      	movs	r1, #128	; 0x80
 8007a6a:	481c      	ldr	r0, [pc, #112]	; (8007adc <OSPI_NOR_MspDeInit+0xa8>)
 8007a6c:	f001 fc52 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8007a70:	2140      	movs	r1, #64	; 0x40
 8007a72:	481a      	ldr	r0, [pc, #104]	; (8007adc <OSPI_NOR_MspDeInit+0xa8>)
 8007a74:	f001 fc4e 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8007a78:	2102      	movs	r1, #2
 8007a7a:	4815      	ldr	r0, [pc, #84]	; (8007ad0 <OSPI_NOR_MspDeInit+0x9c>)
 8007a7c:	f001 fc4a 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8007a80:	2108      	movs	r1, #8
 8007a82:	4817      	ldr	r0, [pc, #92]	; (8007ae0 <OSPI_NOR_MspDeInit+0xac>)
 8007a84:	f001 fc46 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8007a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a8c:	4811      	ldr	r0, [pc, #68]	; (8007ad4 <OSPI_NOR_MspDeInit+0xa0>)
 8007a8e:	f001 fc41 	bl	8009314 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8007a92:	2180      	movs	r1, #128	; 0x80
 8007a94:	4810      	ldr	r0, [pc, #64]	; (8007ad8 <OSPI_NOR_MspDeInit+0xa4>)
 8007a96:	f001 fc3d 	bl	8009314 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9e:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aa4:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aaa:	4a0e      	ldr	r2, [pc, #56]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab0:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007ab4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007ab8:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <OSPI_NOR_MspDeInit+0xb0>)
 8007aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007abe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	58020400 	.word	0x58020400
 8007ad0:	58020800 	.word	0x58020800
 8007ad4:	58021800 	.word	0x58021800
 8007ad8:	58020c00 	.word	0x58020c00
 8007adc:	58021400 	.word	0x58021400
 8007ae0:	58021c00 	.word	0x58021c00
 8007ae4:	58024400 	.word	0x58024400

08007ae8 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	225c      	movs	r2, #92	; 0x5c
 8007af8:	fb02 f303 	mul.w	r3, r2, r3
 8007afc:	4a40      	ldr	r2, [pc, #256]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007afe:	4413      	add	r3, r2
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe ff18 	bl	800693a <MX25LM51245G_ResetEnable>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b10:	f06f 0304 	mvn.w	r3, #4
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	e06d      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	225c      	movs	r2, #92	; 0x5c
 8007b1c:	fb02 f303 	mul.w	r3, r2, r3
 8007b20:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007b22:	4413      	add	r3, r2
 8007b24:	2200      	movs	r2, #0
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe ff5e 	bl	80069ea <MX25LM51245G_ResetMemory>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b34:	f06f 0304 	mvn.w	r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e05b      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	225c      	movs	r2, #92	; 0x5c
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
 8007b44:	4a2e      	ldr	r2, [pc, #184]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007b46:	4413      	add	r3, r2
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fef4 	bl	800693a <MX25LM51245G_ResetEnable>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b58:	f06f 0304 	mvn.w	r3, #4
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e049      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	225c      	movs	r2, #92	; 0x5c
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007b6a:	4413      	add	r3, r2
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2101      	movs	r1, #1
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe ff3a 	bl	80069ea <MX25LM51245G_ResetMemory>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b7c:	f06f 0304 	mvn.w	r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e037      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	225c      	movs	r2, #92	; 0x5c
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007b8e:	4413      	add	r3, r2
 8007b90:	2201      	movs	r2, #1
 8007b92:	2101      	movs	r1, #1
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe fed0 	bl	800693a <MX25LM51245G_ResetEnable>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ba0:	f06f 0304 	mvn.w	r3, #4
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e025      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	225c      	movs	r2, #92	; 0x5c
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
 8007bb0:	4a13      	ldr	r2, [pc, #76]	; (8007c00 <OSPI_NOR_ResetMemory+0x118>)
 8007bb2:	4413      	add	r3, r2
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe ff16 	bl	80069ea <MX25LM51245G_ResetMemory>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007bc4:	f06f 0304 	mvn.w	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e013      	b.n	8007bf4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <OSPI_NOR_ResetMemory+0x11c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8007bd6:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <OSPI_NOR_ResetMemory+0x11c>)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	4413      	add	r3, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8007be2:	4a08      	ldr	r2, [pc, #32]	; (8007c04 <OSPI_NOR_ResetMemory+0x11c>)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	2200      	movs	r2, #0
 8007bec:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8007bee:	2064      	movs	r0, #100	; 0x64
 8007bf0:	f000 fd1a 	bl	8008628 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	24002028 	.word	0x24002028
 8007c04:	24002084 	.word	0x24002084

08007c08 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	225c      	movs	r2, #92	; 0x5c
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	4a60      	ldr	r2, [pc, #384]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007c1e:	1898      	adds	r0, r3, r2
 8007c20:	4a60      	ldr	r2, [pc, #384]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	4413      	add	r3, r2
 8007c28:	7859      	ldrb	r1, [r3, #1]
 8007c2a:	4a5e      	ldr	r2, [pc, #376]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	789b      	ldrb	r3, [r3, #2]
 8007c34:	461a      	mov	r2, r3
 8007c36:	f7fe fc86 	bl	8006546 <MX25LM51245G_WriteEnable>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c40:	f06f 0304 	mvn.w	r3, #4
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e0a6      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	225c      	movs	r2, #92	; 0x5c
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007c52:	1898      	adds	r0, r3, r2
 8007c54:	4a53      	ldr	r2, [pc, #332]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	4413      	add	r3, r2
 8007c5c:	7859      	ldrb	r1, [r3, #1]
 8007c5e:	4a51      	ldr	r2, [pc, #324]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4413      	add	r3, r2
 8007c66:	789a      	ldrb	r2, [r3, #2]
 8007c68:	2307      	movs	r3, #7
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c70:	f7fe fd34 	bl	80066dc <MX25LM51245G_WriteCfg2Register>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c7a:	f06f 0304 	mvn.w	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e089      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	225c      	movs	r2, #92	; 0x5c
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	4a45      	ldr	r2, [pc, #276]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007c8c:	1898      	adds	r0, r3, r2
 8007c8e:	4a45      	ldr	r2, [pc, #276]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4413      	add	r3, r2
 8007c96:	7859      	ldrb	r1, [r3, #1]
 8007c98:	4a42      	ldr	r2, [pc, #264]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	789b      	ldrb	r3, [r3, #2]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fe fc4f 	bl	8006546 <MX25LM51245G_WriteEnable>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cae:	f06f 0304 	mvn.w	r3, #4
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e06f      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	225c      	movs	r2, #92	; 0x5c
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	4a38      	ldr	r2, [pc, #224]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007cc0:	1898      	adds	r0, r3, r2
 8007cc2:	4a38      	ldr	r2, [pc, #224]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	7859      	ldrb	r1, [r3, #1]
 8007ccc:	4a35      	ldr	r2, [pc, #212]	; (8007da4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	789a      	ldrb	r2, [r3, #2]
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f7fe fcfe 	bl	80066dc <MX25LM51245G_WriteCfg2Register>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ce6:	f06f 0304 	mvn.w	r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e053      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007cee:	2028      	movs	r0, #40	; 0x28
 8007cf0:	f000 fc9a 	bl	8008628 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007cf4:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	215c      	movs	r1, #92	; 0x5c
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	330c      	adds	r3, #12
 8007d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d06:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007d08:	4a25      	ldr	r2, [pc, #148]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	215c      	movs	r1, #92	; 0x5c
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	4413      	add	r3, r2
 8007d14:	332c      	adds	r3, #44	; 0x2c
 8007d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1a:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	225c      	movs	r2, #92	; 0x5c
 8007d20:	fb02 f303 	mul.w	r3, r2, r3
 8007d24:	4a1e      	ldr	r2, [pc, #120]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007d26:	4413      	add	r3, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 febd 	bl	800aaa8 <HAL_OSPI_Init>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007d34:	f06f 0303 	mvn.w	r3, #3
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	e02c      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	225c      	movs	r2, #92	; 0x5c
 8007d40:	fb02 f303 	mul.w	r3, r2, r3
 8007d44:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007d46:	4413      	add	r3, r2
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fa34 	bl	80061ba <MX25LM51245G_AutoPollingMemReady>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d58:	f06f 0304 	mvn.w	r3, #4
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e01a      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	225c      	movs	r2, #92	; 0x5c
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007d6a:	1898      	adds	r0, r3, r2
 8007d6c:	f107 0308 	add.w	r3, r7, #8
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	2201      	movs	r2, #1
 8007d76:	2101      	movs	r1, #1
 8007d78:	f7fe fd45 	bl	8006806 <MX25LM51245G_ReadCfg2Register>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d82:	f06f 0304 	mvn.w	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	e005      	b.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8007d8a:	7a3b      	ldrb	r3, [r7, #8]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d002      	beq.n	8007d96 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d90:	f06f 0304 	mvn.w	r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	24002028 	.word	0x24002028
 8007da4:	24002084 	.word	0x24002084

08007da8 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	225c      	movs	r2, #92	; 0x5c
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	4a4e      	ldr	r2, [pc, #312]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007dbe:	1898      	adds	r0, r3, r2
 8007dc0:	4a4e      	ldr	r2, [pc, #312]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	7859      	ldrb	r1, [r3, #1]
 8007dca:	4a4c      	ldr	r2, [pc, #304]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	789b      	ldrb	r3, [r3, #2]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f7fe fbb6 	bl	8006546 <MX25LM51245G_WriteEnable>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007de0:	f06f 0304 	mvn.w	r3, #4
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e082      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	225c      	movs	r2, #92	; 0x5c
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	4a41      	ldr	r2, [pc, #260]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007df2:	1898      	adds	r0, r3, r2
 8007df4:	4a41      	ldr	r2, [pc, #260]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	7859      	ldrb	r1, [r3, #1]
 8007dfe:	4a3f      	ldr	r2, [pc, #252]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4413      	add	r3, r2
 8007e06:	789a      	ldrb	r2, [r3, #2]
 8007e08:	2307      	movs	r3, #7
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e10:	f7fe fc64 	bl	80066dc <MX25LM51245G_WriteCfg2Register>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e1a:	f06f 0304 	mvn.w	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	e065      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	225c      	movs	r2, #92	; 0x5c
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
 8007e2a:	4a33      	ldr	r2, [pc, #204]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007e2c:	1898      	adds	r0, r3, r2
 8007e2e:	4a33      	ldr	r2, [pc, #204]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	7859      	ldrb	r1, [r3, #1]
 8007e38:	4a30      	ldr	r2, [pc, #192]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4413      	add	r3, r2
 8007e40:	789b      	ldrb	r3, [r3, #2]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7fe fb7f 	bl	8006546 <MX25LM51245G_WriteEnable>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e4e:	f06f 0304 	mvn.w	r3, #4
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e04b      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	225c      	movs	r2, #92	; 0x5c
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
 8007e5e:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007e60:	1898      	adds	r0, r3, r2
 8007e62:	4a26      	ldr	r2, [pc, #152]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	4413      	add	r3, r2
 8007e6a:	7859      	ldrb	r1, [r3, #1]
 8007e6c:	4a23      	ldr	r2, [pc, #140]	; (8007efc <OSPI_NOR_EnterSOPIMode+0x154>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	789a      	ldrb	r2, [r3, #2]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f7fe fc2e 	bl	80066dc <MX25LM51245G_WriteCfg2Register>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e86:	f06f 0304 	mvn.w	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e02f      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007e8e:	2028      	movs	r0, #40	; 0x28
 8007e90:	f000 fbca 	bl	8008628 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	225c      	movs	r2, #92	; 0x5c
 8007e98:	fb02 f303 	mul.w	r3, r2, r3
 8007e9c:	4a16      	ldr	r2, [pc, #88]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007e9e:	4413      	add	r3, r2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe f988 	bl	80061ba <MX25LM51245G_AutoPollingMemReady>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007eb0:	f06f 0304 	mvn.w	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e01a      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	225c      	movs	r2, #92	; 0x5c
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007ec2:	1898      	adds	r0, r3, r2
 8007ec4:	f107 0308 	add.w	r3, r7, #8
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2101      	movs	r1, #1
 8007ed0:	f7fe fc99 	bl	8006806 <MX25LM51245G_ReadCfg2Register>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007eda:	f06f 0304 	mvn.w	r3, #4
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e005      	b.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8007ee2:	7a3b      	ldrb	r3, [r7, #8]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d002      	beq.n	8007eee <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ee8:	f06f 0304 	mvn.w	r3, #4
 8007eec:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	24002028 	.word	0x24002028
 8007efc:	24002084 	.word	0x24002084

08007f00 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	225c      	movs	r2, #92	; 0x5c
 8007f10:	fb02 f303 	mul.w	r3, r2, r3
 8007f14:	4a49      	ldr	r2, [pc, #292]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007f16:	1898      	adds	r0, r3, r2
 8007f18:	4a49      	ldr	r2, [pc, #292]	; (8008040 <OSPI_NOR_ExitOPIMode+0x140>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	4413      	add	r3, r2
 8007f20:	7859      	ldrb	r1, [r3, #1]
 8007f22:	4a47      	ldr	r2, [pc, #284]	; (8008040 <OSPI_NOR_ExitOPIMode+0x140>)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4413      	add	r3, r2
 8007f2a:	789b      	ldrb	r3, [r3, #2]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f7fe fb0a 	bl	8006546 <MX25LM51245G_WriteEnable>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f38:	f06f 0304 	mvn.w	r3, #4
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e077      	b.n	8008030 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	225c      	movs	r2, #92	; 0x5c
 8007f4c:	fb02 f303 	mul.w	r3, r2, r3
 8007f50:	4a3a      	ldr	r2, [pc, #232]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007f52:	1898      	adds	r0, r3, r2
 8007f54:	4a3a      	ldr	r2, [pc, #232]	; (8008040 <OSPI_NOR_ExitOPIMode+0x140>)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	7859      	ldrb	r1, [r3, #1]
 8007f5e:	4a38      	ldr	r2, [pc, #224]	; (8008040 <OSPI_NOR_ExitOPIMode+0x140>)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4413      	add	r3, r2
 8007f66:	789a      	ldrb	r2, [r3, #2]
 8007f68:	7a3b      	ldrb	r3, [r7, #8]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f7fe fbb5 	bl	80066dc <MX25LM51245G_WriteCfg2Register>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f78:	f06f 0304 	mvn.w	r3, #4
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e057      	b.n	8008030 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007f80:	2028      	movs	r0, #40	; 0x28
 8007f82:	f000 fb51 	bl	8008628 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007f86:	4a2e      	ldr	r2, [pc, #184]	; (8008040 <OSPI_NOR_ExitOPIMode+0x140>)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	789b      	ldrb	r3, [r3, #2]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d120      	bne.n	8007fd6 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8007f94:	4a29      	ldr	r2, [pc, #164]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	215c      	movs	r1, #92	; 0x5c
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007fa6:	4a25      	ldr	r2, [pc, #148]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	215c      	movs	r1, #92	; 0x5c
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	332c      	adds	r3, #44	; 0x2c
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	225c      	movs	r2, #92	; 0x5c
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	4a1e      	ldr	r2, [pc, #120]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007fc2:	4413      	add	r3, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f002 fd6f 	bl	800aaa8 <HAL_OSPI_Init>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007fd0:	f06f 0303 	mvn.w	r3, #3
 8007fd4:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	225c      	movs	r2, #92	; 0x5c
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe f8e7 	bl	80061ba <MX25LM51245G_AutoPollingMemReady>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ff2:	f06f 0304 	mvn.w	r3, #4
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e01a      	b.n	8008030 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	225c      	movs	r2, #92	; 0x5c
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008004:	1898      	adds	r0, r3, r2
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	2100      	movs	r1, #0
 8008012:	f7fe fbf8 	bl	8006806 <MX25LM51245G_ReadCfg2Register>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800801c:	f06f 0304 	mvn.w	r3, #4
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e005      	b.n	8008030 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 8008024:	7a3b      	ldrb	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800802a:	f06f 0304 	mvn.w	r3, #4
 800802e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8008030:	68fb      	ldr	r3, [r7, #12]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	24002028 	.word	0x24002028
 8008040:	24002084 	.word	0x24002084

08008044 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800804e:	2300      	movs	r3, #0
 8008050:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d11c      	bne.n	8008092 <BSP_TS_Init+0x4e>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d018      	beq.n	8008092 <BSP_TS_Init+0x4e>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008068:	d813      	bhi.n	8008092 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800807a:	d80a      	bhi.n	8008092 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	428b      	cmp	r3, r1
 800808a:	bf28      	it	cs
 800808c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800808e:	429a      	cmp	r2, r3
 8008090:	d903      	bls.n	800809a <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008092:	f06f 0301 	mvn.w	r3, #1
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	e06e      	b.n	8008178 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f98c 	bl	80083b8 <FT5336_Probe>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e064      	b.n	8008178 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4934      	ldr	r1, [pc, #208]	; (8008184 <BSP_TS_Init+0x140>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	015b      	lsls	r3, r3, #5
 80080b8:	440b      	add	r3, r1
 80080ba:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	4930      	ldr	r1, [pc, #192]	; (8008184 <BSP_TS_Init+0x140>)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	015b      	lsls	r3, r3, #5
 80080c6:	440b      	add	r3, r1
 80080c8:	3304      	adds	r3, #4
 80080ca:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	492c      	ldr	r1, [pc, #176]	; (8008184 <BSP_TS_Init+0x140>)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	015b      	lsls	r3, r3, #5
 80080d6:	440b      	add	r3, r1
 80080d8:	3308      	adds	r3, #8
 80080da:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	4928      	ldr	r1, [pc, #160]	; (8008184 <BSP_TS_Init+0x140>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	015b      	lsls	r3, r3, #5
 80080e6:	440b      	add	r3, r1
 80080e8:	330c      	adds	r3, #12
 80080ea:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80080ec:	4b26      	ldr	r3, [pc, #152]	; (8008188 <BSP_TS_Init+0x144>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4926      	ldr	r1, [pc, #152]	; (800818c <BSP_TS_Init+0x148>)
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080fa:	f107 010c 	add.w	r1, r7, #12
 80080fe:	4610      	mov	r0, r2
 8008100:	4798      	blx	r3
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	da03      	bge.n	8008110 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008108:	f06f 0304 	mvn.w	r3, #4
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	e033      	b.n	8008178 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	491c      	ldr	r1, [pc, #112]	; (8008184 <BSP_TS_Init+0x140>)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	015b      	lsls	r3, r3, #5
 8008118:	440b      	add	r3, r1
 800811a:	3310      	adds	r3, #16
 800811c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4918      	ldr	r1, [pc, #96]	; (8008184 <BSP_TS_Init+0x140>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	015b      	lsls	r3, r3, #5
 8008126:	440b      	add	r3, r1
 8008128:	3314      	adds	r3, #20
 800812a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e01f      	b.n	8008172 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	4413      	add	r3, r2
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	4811      	ldr	r0, [pc, #68]	; (8008184 <BSP_TS_Init+0x140>)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	00d9      	lsls	r1, r3, #3
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	440b      	add	r3, r1
 8008148:	3306      	adds	r3, #6
 800814a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4413      	add	r3, r2
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	480a      	ldr	r0, [pc, #40]	; (8008184 <BSP_TS_Init+0x140>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	00d9      	lsls	r1, r3, #3
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	440b      	add	r3, r1
 8008164:	3306      	adds	r3, #6
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4403      	add	r3, r0
 800816a:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	3301      	adds	r3, #1
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0dc      	beq.n	8008132 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8008178:	69fb      	ldr	r3, [r7, #28]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	24002094 	.word	0x24002094
 8008188:	2400208c 	.word	0x2400208c
 800818c:	24002090 	.word	0x24002090

08008190 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80081a4:	f06f 0301 	mvn.w	r3, #1
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
 80081aa:	e0f9      	b.n	80083a0 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80081ac:	4b7f      	ldr	r3, [pc, #508]	; (80083ac <BSP_TS_GetState+0x21c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	497f      	ldr	r1, [pc, #508]	; (80083b0 <BSP_TS_GetState+0x220>)
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081ba:	f107 0108 	add.w	r1, r7, #8
 80081be:	4610      	mov	r0, r2
 80081c0:	4798      	blx	r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	da03      	bge.n	80081d0 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081c8:	f06f 0304 	mvn.w	r3, #4
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
 80081ce:	e0e7      	b.n	80083a0 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80d1 	beq.w	800837a <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80081e0:	4a74      	ldr	r2, [pc, #464]	; (80083b4 <BSP_TS_GetState+0x224>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	015b      	lsls	r3, r3, #5
 80081e6:	4413      	add	r3, r2
 80081e8:	3308      	adds	r3, #8
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80081fc:	4a6d      	ldr	r2, [pc, #436]	; (80083b4 <BSP_TS_GetState+0x224>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	015b      	lsls	r3, r3, #5
 8008202:	4413      	add	r3, r2
 8008204:	3308      	adds	r3, #8
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8008210:	4a68      	ldr	r2, [pc, #416]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	015b      	lsls	r3, r3, #5
 8008216:	4413      	add	r3, r2
 8008218:	3310      	adds	r3, #16
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8008224:	4a63      	ldr	r2, [pc, #396]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	015b      	lsls	r3, r3, #5
 800822a:	4413      	add	r3, r2
 800822c:	3308      	adds	r3, #8
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8008238:	4a5e      	ldr	r2, [pc, #376]	; (80083b4 <BSP_TS_GetState+0x224>)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	015b      	lsls	r3, r3, #5
 800823e:	4413      	add	r3, r2
 8008240:	3314      	adds	r3, #20
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800824a:	4a5a      	ldr	r2, [pc, #360]	; (80083b4 <BSP_TS_GetState+0x224>)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	015b      	lsls	r3, r3, #5
 8008250:	4413      	add	r3, r2
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a3a      	ldr	r2, [r7, #32]
 8008256:	fb03 f202 	mul.w	r2, r3, r2
 800825a:	4956      	ldr	r1, [pc, #344]	; (80083b4 <BSP_TS_GetState+0x224>)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	015b      	lsls	r3, r3, #5
 8008260:	440b      	add	r3, r1
 8008262:	3310      	adds	r3, #16
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	fbb2 f2f3 	udiv	r2, r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800826e:	4a51      	ldr	r2, [pc, #324]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	015b      	lsls	r3, r3, #5
 8008274:	4413      	add	r3, r2
 8008276:	3304      	adds	r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	fb03 f202 	mul.w	r2, r3, r2
 8008280:	494c      	ldr	r1, [pc, #304]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	015b      	lsls	r3, r3, #5
 8008286:	440b      	add	r3, r1
 8008288:	3314      	adds	r3, #20
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	4945      	ldr	r1, [pc, #276]	; (80083b4 <BSP_TS_GetState+0x224>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	015b      	lsls	r3, r3, #5
 80082a4:	440b      	add	r3, r1
 80082a6:	3318      	adds	r3, #24
 80082a8:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d909      	bls.n	80082c2 <BSP_TS_GetState+0x132>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4940      	ldr	r1, [pc, #256]	; (80083b4 <BSP_TS_GetState+0x224>)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	015b      	lsls	r3, r3, #5
 80082b8:	440b      	add	r3, r1
 80082ba:	3318      	adds	r3, #24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	e008      	b.n	80082d4 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <BSP_TS_GetState+0x224>)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	015b      	lsls	r3, r3, #5
 80082c8:	4413      	add	r3, r2
 80082ca:	3318      	adds	r3, #24
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80082d2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80082d4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	4936      	ldr	r1, [pc, #216]	; (80083b4 <BSP_TS_GetState+0x224>)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	015b      	lsls	r3, r3, #5
 80082e0:	440b      	add	r3, r1
 80082e2:	331c      	adds	r3, #28
 80082e4:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d909      	bls.n	80082fe <BSP_TS_GetState+0x16e>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	4931      	ldr	r1, [pc, #196]	; (80083b4 <BSP_TS_GetState+0x224>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	015b      	lsls	r3, r3, #5
 80082f4:	440b      	add	r3, r1
 80082f6:	331c      	adds	r3, #28
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	e008      	b.n	8008310 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80082fe:	4a2d      	ldr	r2, [pc, #180]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	015b      	lsls	r3, r3, #5
 8008304:	4413      	add	r3, r2
 8008306:	331c      	adds	r3, #28
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800830e:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008310:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008312:	4a28      	ldr	r2, [pc, #160]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	015b      	lsls	r3, r3, #5
 8008318:	4413      	add	r3, r2
 800831a:	330c      	adds	r3, #12
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	429a      	cmp	r2, r3
 8008322:	d808      	bhi.n	8008336 <BSP_TS_GetState+0x1a6>
 8008324:	4a23      	ldr	r2, [pc, #140]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	015b      	lsls	r3, r3, #5
 800832a:	4413      	add	r3, r2
 800832c:	330c      	adds	r3, #12
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	429a      	cmp	r2, r3
 8008334:	d910      	bls.n	8008358 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	491e      	ldr	r1, [pc, #120]	; (80083b4 <BSP_TS_GetState+0x224>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	015b      	lsls	r3, r3, #5
 8008340:	440b      	add	r3, r1
 8008342:	3318      	adds	r3, #24
 8008344:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	491a      	ldr	r1, [pc, #104]	; (80083b4 <BSP_TS_GetState+0x224>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	015b      	lsls	r3, r3, #5
 8008350:	440b      	add	r3, r1
 8008352:	331c      	adds	r3, #28
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e023      	b.n	80083a0 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008358:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <BSP_TS_GetState+0x224>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	015b      	lsls	r3, r3, #5
 800835e:	4413      	add	r3, r2
 8008360:	3318      	adds	r3, #24
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008368:	4a12      	ldr	r2, [pc, #72]	; (80083b4 <BSP_TS_GetState+0x224>)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	015b      	lsls	r3, r3, #5
 800836e:	4413      	add	r3, r2
 8008370:	331c      	adds	r3, #28
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	609a      	str	r2, [r3, #8]
 8008378:	e012      	b.n	80083a0 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008380:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	015b      	lsls	r3, r3, #5
 8008386:	4413      	add	r3, r2
 8008388:	3318      	adds	r3, #24
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008390:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <BSP_TS_GetState+0x224>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	015b      	lsls	r3, r3, #5
 8008396:	4413      	add	r3, r2
 8008398:	331c      	adds	r3, #28
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3728      	adds	r7, #40	; 0x28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	2400208c 	.word	0x2400208c
 80083b0:	24002090 	.word	0x24002090
 80083b4:	24002094 	.word	0x24002094

080083b8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80083c8:	2370      	movs	r3, #112	; 0x70
 80083ca:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80083cc:	4b23      	ldr	r3, [pc, #140]	; (800845c <FT5336_Probe+0xa4>)
 80083ce:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80083d0:	4b23      	ldr	r3, [pc, #140]	; (8008460 <FT5336_Probe+0xa8>)
 80083d2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <FT5336_Probe+0xac>)
 80083d6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80083d8:	4b23      	ldr	r3, [pc, #140]	; (8008468 <FT5336_Probe+0xb0>)
 80083da:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 80083dc:	4b23      	ldr	r3, [pc, #140]	; (800846c <FT5336_Probe+0xb4>)
 80083de:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	4619      	mov	r1, r3
 80083e6:	4822      	ldr	r0, [pc, #136]	; (8008470 <FT5336_Probe+0xb8>)
 80083e8:	f7fd fb58 	bl	8005a9c <FT5336_RegisterBusIO>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80083f2:	f06f 0307 	mvn.w	r3, #7
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
 80083f8:	e02a      	b.n	8008450 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	4619      	mov	r1, r3
 8008400:	481b      	ldr	r0, [pc, #108]	; (8008470 <FT5336_Probe+0xb8>)
 8008402:	f7fd fc45 	bl	8005c90 <FT5336_ReadID>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800840c:	f06f 0304 	mvn.w	r3, #4
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
 8008412:	e01d      	b.n	8008450 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b51      	cmp	r3, #81	; 0x51
 8008418:	d003      	beq.n	8008422 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800841a:	f06f 0306 	mvn.w	r3, #6
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
 8008420:	e016      	b.n	8008450 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8008422:	4a14      	ldr	r2, [pc, #80]	; (8008474 <FT5336_Probe+0xbc>)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4912      	ldr	r1, [pc, #72]	; (8008470 <FT5336_Probe+0xb8>)
 8008428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800842c:	4b12      	ldr	r3, [pc, #72]	; (8008478 <FT5336_Probe+0xc0>)
 800842e:	4a13      	ldr	r2, [pc, #76]	; (800847c <FT5336_Probe+0xc4>)
 8008430:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <FT5336_Probe+0xc0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	490e      	ldr	r1, [pc, #56]	; (8008474 <FT5336_Probe+0xbc>)
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800844a:	f06f 0304 	mvn.w	r3, #4
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008452:	4618      	mov	r0, r3
 8008454:	3728      	adds	r7, #40	; 0x28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	08006a9d 	.word	0x08006a9d
 8008460:	08006b11 	.word	0x08006b11
 8008464:	08006c39 	.word	0x08006c39
 8008468:	08006bdd 	.word	0x08006bdd
 800846c:	08006c95 	.word	0x08006c95
 8008470:	240020b4 	.word	0x240020b4
 8008474:	24002090 	.word	0x24002090
 8008478:	2400208c 	.word	0x2400208c
 800847c:	2400000c 	.word	0x2400000c

08008480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008484:	4b32      	ldr	r3, [pc, #200]	; (8008550 <SystemInit+0xd0>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	4a31      	ldr	r2, [pc, #196]	; (8008550 <SystemInit+0xd0>)
 800848c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008494:	4b2f      	ldr	r3, [pc, #188]	; (8008554 <SystemInit+0xd4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	2b02      	cmp	r3, #2
 800849e:	d807      	bhi.n	80084b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80084a0:	4b2c      	ldr	r3, [pc, #176]	; (8008554 <SystemInit+0xd4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f023 030f 	bic.w	r3, r3, #15
 80084a8:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <SystemInit+0xd4>)
 80084aa:	f043 0303 	orr.w	r3, r3, #3
 80084ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80084b0:	4b29      	ldr	r3, [pc, #164]	; (8008558 <SystemInit+0xd8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a28      	ldr	r2, [pc, #160]	; (8008558 <SystemInit+0xd8>)
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80084bc:	4b26      	ldr	r3, [pc, #152]	; (8008558 <SystemInit+0xd8>)
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80084c2:	4b25      	ldr	r3, [pc, #148]	; (8008558 <SystemInit+0xd8>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4924      	ldr	r1, [pc, #144]	; (8008558 <SystemInit+0xd8>)
 80084c8:	4b24      	ldr	r3, [pc, #144]	; (800855c <SystemInit+0xdc>)
 80084ca:	4013      	ands	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80084ce:	4b21      	ldr	r3, [pc, #132]	; (8008554 <SystemInit+0xd4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 030c 	and.w	r3, r3, #12
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80084da:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <SystemInit+0xd4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f023 030f 	bic.w	r3, r3, #15
 80084e2:	4a1c      	ldr	r2, [pc, #112]	; (8008554 <SystemInit+0xd4>)
 80084e4:	f043 0303 	orr.w	r3, r3, #3
 80084e8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80084ea:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <SystemInit+0xd8>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80084f0:	4b19      	ldr	r3, [pc, #100]	; (8008558 <SystemInit+0xd8>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <SystemInit+0xd8>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <SystemInit+0xd8>)
 80084fe:	4a18      	ldr	r2, [pc, #96]	; (8008560 <SystemInit+0xe0>)
 8008500:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <SystemInit+0xd8>)
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <SystemInit+0xe4>)
 8008506:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008508:	4b13      	ldr	r3, [pc, #76]	; (8008558 <SystemInit+0xd8>)
 800850a:	4a17      	ldr	r2, [pc, #92]	; (8008568 <SystemInit+0xe8>)
 800850c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <SystemInit+0xd8>)
 8008510:	2200      	movs	r2, #0
 8008512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008514:	4b10      	ldr	r3, [pc, #64]	; (8008558 <SystemInit+0xd8>)
 8008516:	4a14      	ldr	r2, [pc, #80]	; (8008568 <SystemInit+0xe8>)
 8008518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800851a:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <SystemInit+0xd8>)
 800851c:	2200      	movs	r2, #0
 800851e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <SystemInit+0xd8>)
 8008522:	4a11      	ldr	r2, [pc, #68]	; (8008568 <SystemInit+0xe8>)
 8008524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <SystemInit+0xd8>)
 8008528:	2200      	movs	r2, #0
 800852a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <SystemInit+0xd8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a09      	ldr	r2, [pc, #36]	; (8008558 <SystemInit+0xd8>)
 8008532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008536:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008538:	4b07      	ldr	r3, [pc, #28]	; (8008558 <SystemInit+0xd8>)
 800853a:	2200      	movs	r2, #0
 800853c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <SystemInit+0xec>)
 8008540:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008544:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	e000ed00 	.word	0xe000ed00
 8008554:	52002000 	.word	0x52002000
 8008558:	58024400 	.word	0x58024400
 800855c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008560:	02020200 	.word	0x02020200
 8008564:	01ff0000 	.word	0x01ff0000
 8008568:	01010280 	.word	0x01010280
 800856c:	52004000 	.word	0x52004000

08008570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008576:	2003      	movs	r0, #3
 8008578:	f000 f94b 	bl	8008812 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800857c:	f004 f836 	bl	800c5ec <HAL_RCC_GetSysClockFreq>
 8008580:	4602      	mov	r2, r0
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <HAL_Init+0x68>)
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	4913      	ldr	r1, [pc, #76]	; (80085dc <HAL_Init+0x6c>)
 800858e:	5ccb      	ldrb	r3, [r1, r3]
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <HAL_Init+0x68>)
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	4a0e      	ldr	r2, [pc, #56]	; (80085dc <HAL_Init+0x6c>)
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
 80085a6:	f003 031f 	and.w	r3, r3, #31
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
 80085b0:	4a0b      	ldr	r2, [pc, #44]	; (80085e0 <HAL_Init+0x70>)
 80085b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085b4:	4a0b      	ldr	r2, [pc, #44]	; (80085e4 <HAL_Init+0x74>)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085ba:	200f      	movs	r0, #15
 80085bc:	f7f9 f802 	bl	80015c4 <HAL_InitTick>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e002      	b.n	80085d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80085ca:	f7f8 fd39 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	58024400 	.word	0x58024400
 80085dc:	08025044 	.word	0x08025044
 80085e0:	24000040 	.word	0x24000040
 80085e4:	2400003c 	.word	0x2400003c

080085e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <HAL_IncTick+0x20>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_IncTick+0x24>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4413      	add	r3, r2
 80085f8:	4a04      	ldr	r2, [pc, #16]	; (800860c <HAL_IncTick+0x24>)
 80085fa:	6013      	str	r3, [r2, #0]
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	24000048 	.word	0x24000048
 800860c:	240020dc 	.word	0x240020dc

08008610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  return uwTick;
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <HAL_GetTick+0x14>)
 8008616:	681b      	ldr	r3, [r3, #0]
}
 8008618:	4618      	mov	r0, r3
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	240020dc 	.word	0x240020dc

08008628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008630:	f7ff ffee 	bl	8008610 <HAL_GetTick>
 8008634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d005      	beq.n	800864e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <HAL_Delay+0x44>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800864e:	bf00      	nop
 8008650:	f7ff ffde 	bl	8008610 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	429a      	cmp	r2, r3
 800865e:	d8f7      	bhi.n	8008650 <HAL_Delay+0x28>
  {
  }
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	24000048 	.word	0x24000048

08008670 <__NVIC_SetPriorityGrouping>:
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <__NVIC_SetPriorityGrouping+0x40>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800868c:	4013      	ands	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <__NVIC_SetPriorityGrouping+0x44>)
 800869a:	4313      	orrs	r3, r2
 800869c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800869e:	4a04      	ldr	r2, [pc, #16]	; (80086b0 <__NVIC_SetPriorityGrouping+0x40>)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	60d3      	str	r3, [r2, #12]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	05fa0000 	.word	0x05fa0000

080086b8 <__NVIC_GetPriorityGrouping>:
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086bc:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <__NVIC_GetPriorityGrouping+0x18>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	f003 0307 	and.w	r3, r3, #7
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	e000ed00 	.word	0xe000ed00

080086d4 <__NVIC_EnableIRQ>:
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80086de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db0b      	blt.n	80086fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	f003 021f 	and.w	r2, r3, #31
 80086ec:	4907      	ldr	r1, [pc, #28]	; (800870c <__NVIC_EnableIRQ+0x38>)
 80086ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	2001      	movs	r0, #1
 80086f6:	fa00 f202 	lsl.w	r2, r0, r2
 80086fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	e000e100 	.word	0xe000e100

08008710 <__NVIC_DisableIRQ>:
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800871a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	db12      	blt.n	8008748 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	f003 021f 	and.w	r2, r3, #31
 8008728:	490a      	ldr	r1, [pc, #40]	; (8008754 <__NVIC_DisableIRQ+0x44>)
 800872a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	2001      	movs	r0, #1
 8008732:	fa00 f202 	lsl.w	r2, r0, r2
 8008736:	3320      	adds	r3, #32
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800873c:	f3bf 8f4f 	dsb	sy
}
 8008740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008742:	f3bf 8f6f 	isb	sy
}
 8008746:	bf00      	nop
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	e000e100 	.word	0xe000e100

08008758 <__NVIC_SetPriority>:
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008768:	2b00      	cmp	r3, #0
 800876a:	db0a      	blt.n	8008782 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	b2da      	uxtb	r2, r3
 8008770:	490c      	ldr	r1, [pc, #48]	; (80087a4 <__NVIC_SetPriority+0x4c>)
 8008772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008776:	0112      	lsls	r2, r2, #4
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	440b      	add	r3, r1
 800877c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008780:	e00a      	b.n	8008798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	4908      	ldr	r1, [pc, #32]	; (80087a8 <__NVIC_SetPriority+0x50>)
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	3b04      	subs	r3, #4
 8008790:	0112      	lsls	r2, r2, #4
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	440b      	add	r3, r1
 8008796:	761a      	strb	r2, [r3, #24]
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	e000e100 	.word	0xe000e100
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <NVIC_EncodePriority>:
{
 80087ac:	b480      	push	{r7}
 80087ae:	b089      	sub	sp, #36	; 0x24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f1c3 0307 	rsb	r3, r3, #7
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	bf28      	it	cs
 80087ca:	2304      	movcs	r3, #4
 80087cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3304      	adds	r3, #4
 80087d2:	2b06      	cmp	r3, #6
 80087d4:	d902      	bls.n	80087dc <NVIC_EncodePriority+0x30>
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	3b03      	subs	r3, #3
 80087da:	e000      	b.n	80087de <NVIC_EncodePriority+0x32>
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ea:	43da      	mvns	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	401a      	ands	r2, r3
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087f4:	f04f 31ff 	mov.w	r1, #4294967295
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	fa01 f303 	lsl.w	r3, r1, r3
 80087fe:	43d9      	mvns	r1, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008804:	4313      	orrs	r3, r2
}
 8008806:	4618      	mov	r0, r3
 8008808:	3724      	adds	r7, #36	; 0x24
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff ff28 	bl	8008670 <__NVIC_SetPriorityGrouping>
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008836:	f7ff ff3f 	bl	80086b8 <__NVIC_GetPriorityGrouping>
 800883a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f7ff ffb3 	bl	80087ac <NVIC_EncodePriority>
 8008846:	4602      	mov	r2, r0
 8008848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff ff82 	bl	8008758 <__NVIC_SetPriority>
}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff ff32 	bl	80086d4 <__NVIC_EnableIRQ>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff ff42 	bl	8008710 <__NVIC_DisableIRQ>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008898:	f3bf 8f5f 	dmb	sy
}
 800889c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <HAL_MPU_Disable+0x28>)
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	4a06      	ldr	r2, [pc, #24]	; (80088bc <HAL_MPU_Disable+0x28>)
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_MPU_Disable+0x2c>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	605a      	str	r2, [r3, #4]
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	e000ed00 	.word	0xe000ed00
 80088c0:	e000ed90 	.word	0xe000ed90

080088c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80088cc:	4a0b      	ldr	r2, [pc, #44]	; (80088fc <HAL_MPU_Enable+0x38>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80088d6:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <HAL_MPU_Enable+0x3c>)
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	4a09      	ldr	r2, [pc, #36]	; (8008900 <HAL_MPU_Enable+0x3c>)
 80088dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80088e2:	f3bf 8f4f 	dsb	sy
}
 80088e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088e8:	f3bf 8f6f 	isb	sy
}
 80088ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	e000ed90 	.word	0xe000ed90
 8008900:	e000ed00 	.word	0xe000ed00

08008904 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	785a      	ldrb	r2, [r3, #1]
 8008910:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <HAL_MPU_ConfigRegion+0x84>)
 8008912:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d029      	beq.n	8008970 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800891c:	4a1a      	ldr	r2, [pc, #104]	; (8008988 <HAL_MPU_ConfigRegion+0x84>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7b1b      	ldrb	r3, [r3, #12]
 8008928:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7adb      	ldrb	r3, [r3, #11]
 800892e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008930:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	7a9b      	ldrb	r3, [r3, #10]
 8008936:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008938:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7b5b      	ldrb	r3, [r3, #13]
 800893e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008940:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7b9b      	ldrb	r3, [r3, #14]
 8008946:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008948:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7bdb      	ldrb	r3, [r3, #15]
 800894e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008950:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	7a5b      	ldrb	r3, [r3, #9]
 8008956:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008958:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7a1b      	ldrb	r3, [r3, #8]
 800895e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008960:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008968:	4a07      	ldr	r2, [pc, #28]	; (8008988 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800896a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800896c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800896e:	e005      	b.n	800897c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <HAL_MPU_ConfigRegion+0x84>)
 8008972:	2200      	movs	r2, #0
 8008974:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <HAL_MPU_ConfigRegion+0x84>)
 8008978:	2200      	movs	r2, #0
 800897a:	611a      	str	r2, [r3, #16]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	e000ed90 	.word	0xe000ed90

0800898c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e054      	b.n	8008a48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7f5b      	ldrb	r3, [r3, #29]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7f8 fb64 	bl	800107c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	791b      	ldrb	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a22      	ldr	r2, [pc, #136]	; (8008a50 <HAL_CRC_Init+0xc4>)
 80089c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0218 	bic.w	r2, r2, #24
 80089d8:	609a      	str	r2, [r3, #8]
 80089da:	e00c      	b.n	80089f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6899      	ldr	r1, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f834 	bl	8008a54 <HAL_CRCEx_Polynomial_Set>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e028      	b.n	8008a48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	795b      	ldrb	r3, [r3, #5]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d105      	bne.n	8008a0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f04f 32ff 	mov.w	r2, #4294967295
 8008a06:	611a      	str	r2, [r3, #16]
 8008a08:	e004      	b.n	8008a14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6912      	ldr	r2, [r2, #16]
 8008a12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695a      	ldr	r2, [r3, #20]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	04c11db7 	.word	0x04c11db7

08008a54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008a64:	231f      	movs	r3, #31
 8008a66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
 8008a76:	e063      	b.n	8008b40 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008a78:	bf00      	nop
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	613a      	str	r2, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d009      	beq.n	8008a98 <HAL_CRCEx_Polynomial_Set+0x44>
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0f0      	beq.n	8008a7a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b18      	cmp	r3, #24
 8008a9c:	d846      	bhi.n	8008b2c <HAL_CRCEx_Polynomial_Set+0xd8>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008b33 	.word	0x08008b33
 8008aa8:	08008b2d 	.word	0x08008b2d
 8008aac:	08008b2d 	.word	0x08008b2d
 8008ab0:	08008b2d 	.word	0x08008b2d
 8008ab4:	08008b2d 	.word	0x08008b2d
 8008ab8:	08008b2d 	.word	0x08008b2d
 8008abc:	08008b2d 	.word	0x08008b2d
 8008ac0:	08008b2d 	.word	0x08008b2d
 8008ac4:	08008b21 	.word	0x08008b21
 8008ac8:	08008b2d 	.word	0x08008b2d
 8008acc:	08008b2d 	.word	0x08008b2d
 8008ad0:	08008b2d 	.word	0x08008b2d
 8008ad4:	08008b2d 	.word	0x08008b2d
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008b2d 	.word	0x08008b2d
 8008ae0:	08008b2d 	.word	0x08008b2d
 8008ae4:	08008b15 	.word	0x08008b15
 8008ae8:	08008b2d 	.word	0x08008b2d
 8008aec:	08008b2d 	.word	0x08008b2d
 8008af0:	08008b2d 	.word	0x08008b2d
 8008af4:	08008b2d 	.word	0x08008b2d
 8008af8:	08008b2d 	.word	0x08008b2d
 8008afc:	08008b2d 	.word	0x08008b2d
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	08008b09 	.word	0x08008b09
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b06      	cmp	r3, #6
 8008b0c:	d913      	bls.n	8008b36 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b12:	e010      	b.n	8008b36 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b07      	cmp	r3, #7
 8008b18:	d90f      	bls.n	8008b3a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b1e:	e00c      	b.n	8008b3a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	d90b      	bls.n	8008b3e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008b2a:	e008      	b.n	8008b3e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
        break;
 8008b30:	e006      	b.n	8008b40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b32:	bf00      	nop
 8008b34:	e004      	b.n	8008b40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008b3e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f023 0118 	bic.w	r1, r3, #24
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e04f      	b.n	8008c22 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f8 fa92 	bl	80010c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <HAL_DMA2D_Init+0xbc>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6851      	ldr	r1, [r2, #4]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	69d2      	ldr	r2, [r2, #28]
 8008bb6:	4311      	orrs	r1, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc6:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <HAL_DMA2D_Init+0xc0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6891      	ldr	r1, [r2, #8]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6992      	ldr	r2, [r2, #24]
 8008bd2:	4311      	orrs	r1, r2
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be2:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <HAL_DMA2D_Init+0xc4>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68d1      	ldr	r1, [r2, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	051a      	lsls	r2, r3, #20
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	055b      	lsls	r3, r3, #21
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	fff8ffbf 	.word	0xfff8ffbf
 8008c30:	fffffef8 	.word	0xfffffef8
 8008c34:	ffff0000 	.word	0xffff0000

08008c38 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d026      	beq.n	8008ca8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d021      	beq.n	8008ca8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c72:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c78:	f043 0201 	orr.w	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2201      	movs	r2, #1
 8008c86:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d026      	beq.n	8008d00 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d021      	beq.n	8008d00 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd8:	f043 0202 	orr.w	r2, r3, #2
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d026      	beq.n	8008d58 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d021      	beq.n	8008d58 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d22:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2208      	movs	r2, #8
 8008d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d30:	f043 0204 	orr.w	r2, r3, #4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d013      	beq.n	8008d8a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00e      	beq.n	8008d8a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2204      	movs	r2, #4
 8008d82:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f853 	bl	8008e30 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d024      	beq.n	8008dde <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01f      	beq.n	8008dde <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2202      	movs	r2, #2
 8008db4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01f      	beq.n	8008e28 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01a      	beq.n	8008e28 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e00:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2210      	movs	r2, #16
 8008e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f80e 	bl	8008e44 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_DMA2D_ConfigLayer+0x24>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e092      	b.n	8008fa2 <HAL_DMA2D_ConfigLayer+0x14a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	3328      	adds	r3, #40	; 0x28
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008eb0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008ebc:	4b3c      	ldr	r3, [pc, #240]	; (8008fb0 <HAL_DMA2D_ConfigLayer+0x158>)
 8008ebe:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b0a      	cmp	r3, #10
 8008ec6:	d003      	beq.n	8008ed0 <HAL_DMA2D_ConfigLayer+0x78>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	d107      	bne.n	8008ee0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]
 8008ede:	e005      	b.n	8008eec <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d120      	bne.n	8008f34 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	43db      	mvns	r3, r3
 8008efc:	ea02 0103 	and.w	r1, r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b0a      	cmp	r3, #10
 8008f1a:	d003      	beq.n	8008f24 <HAL_DMA2D_ConfigLayer+0xcc>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d135      	bne.n	8008f90 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008f30:	629a      	str	r2, [r3, #40]	; 0x28
 8008f32:	e02d      	b.n	8008f90 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b0b      	cmp	r3, #11
 8008f3a:	d109      	bne.n	8008f50 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	049b      	lsls	r3, r3, #18
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008f4e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69da      	ldr	r2, [r3, #28]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	ea02 0103 	and.w	r1, r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	d003      	beq.n	8008f82 <HAL_DMA2D_ConfigLayer+0x12a>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b09      	cmp	r3, #9
 8008f80:	d106      	bne.n	8008f90 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008f8e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	ff33000f 	.word	0xff33000f

08008fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b089      	sub	sp, #36	; 0x24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fc2:	4b89      	ldr	r3, [pc, #548]	; (80091e8 <HAL_GPIO_Init+0x234>)
 8008fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fc6:	e194      	b.n	80092f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	2101      	movs	r1, #1
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8186 	beq.w	80092ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d005      	beq.n	8008ff8 <HAL_GPIO_Init+0x44>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d130      	bne.n	800905a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	2203      	movs	r2, #3
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	43db      	mvns	r3, r3
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	4013      	ands	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	4313      	orrs	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800902e:	2201      	movs	r2, #1
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	fa02 f303 	lsl.w	r3, r2, r3
 8009036:	43db      	mvns	r3, r3
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	4013      	ands	r3, r2
 800903c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	091b      	lsrs	r3, r3, #4
 8009044:	f003 0201 	and.w	r2, r3, #1
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	fa02 f303 	lsl.w	r3, r2, r3
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	4313      	orrs	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d017      	beq.n	8009096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	2203      	movs	r2, #3
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	43db      	mvns	r3, r3
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	4013      	ands	r3, r2
 800907c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	fa02 f303 	lsl.w	r3, r2, r3
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4313      	orrs	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d123      	bne.n	80090ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	08da      	lsrs	r2, r3, #3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3208      	adds	r2, #8
 80090aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	220f      	movs	r2, #15
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43db      	mvns	r3, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	4013      	ands	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	fa02 f303 	lsl.w	r3, r2, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	4313      	orrs	r3, r2
 80090da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	08da      	lsrs	r2, r3, #3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3208      	adds	r2, #8
 80090e4:	69b9      	ldr	r1, [r7, #24]
 80090e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	2203      	movs	r2, #3
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43db      	mvns	r3, r3
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	4013      	ands	r3, r2
 8009100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f003 0203 	and.w	r2, r3, #3
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	fa02 f303 	lsl.w	r3, r2, r3
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	4313      	orrs	r3, r2
 8009116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80e0 	beq.w	80092ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800912c:	4b2f      	ldr	r3, [pc, #188]	; (80091ec <HAL_GPIO_Init+0x238>)
 800912e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009132:	4a2e      	ldr	r2, [pc, #184]	; (80091ec <HAL_GPIO_Init+0x238>)
 8009134:	f043 0302 	orr.w	r3, r3, #2
 8009138:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800913c:	4b2b      	ldr	r3, [pc, #172]	; (80091ec <HAL_GPIO_Init+0x238>)
 800913e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800914a:	4a29      	ldr	r2, [pc, #164]	; (80091f0 <HAL_GPIO_Init+0x23c>)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	3302      	adds	r3, #2
 8009152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	220f      	movs	r2, #15
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	43db      	mvns	r3, r3
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	4013      	ands	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a20      	ldr	r2, [pc, #128]	; (80091f4 <HAL_GPIO_Init+0x240>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d052      	beq.n	800921c <HAL_GPIO_Init+0x268>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <HAL_GPIO_Init+0x244>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d031      	beq.n	80091e2 <HAL_GPIO_Init+0x22e>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <HAL_GPIO_Init+0x248>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d02b      	beq.n	80091de <HAL_GPIO_Init+0x22a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1d      	ldr	r2, [pc, #116]	; (8009200 <HAL_GPIO_Init+0x24c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d025      	beq.n	80091da <HAL_GPIO_Init+0x226>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1c      	ldr	r2, [pc, #112]	; (8009204 <HAL_GPIO_Init+0x250>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d01f      	beq.n	80091d6 <HAL_GPIO_Init+0x222>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a1b      	ldr	r2, [pc, #108]	; (8009208 <HAL_GPIO_Init+0x254>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d019      	beq.n	80091d2 <HAL_GPIO_Init+0x21e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a1a      	ldr	r2, [pc, #104]	; (800920c <HAL_GPIO_Init+0x258>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <HAL_GPIO_Init+0x21a>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a19      	ldr	r2, [pc, #100]	; (8009210 <HAL_GPIO_Init+0x25c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00d      	beq.n	80091ca <HAL_GPIO_Init+0x216>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a18      	ldr	r2, [pc, #96]	; (8009214 <HAL_GPIO_Init+0x260>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d007      	beq.n	80091c6 <HAL_GPIO_Init+0x212>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a17      	ldr	r2, [pc, #92]	; (8009218 <HAL_GPIO_Init+0x264>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d101      	bne.n	80091c2 <HAL_GPIO_Init+0x20e>
 80091be:	2309      	movs	r3, #9
 80091c0:	e02d      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091c2:	230a      	movs	r3, #10
 80091c4:	e02b      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091c6:	2308      	movs	r3, #8
 80091c8:	e029      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091ca:	2307      	movs	r3, #7
 80091cc:	e027      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091ce:	2306      	movs	r3, #6
 80091d0:	e025      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091d2:	2305      	movs	r3, #5
 80091d4:	e023      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091d6:	2304      	movs	r3, #4
 80091d8:	e021      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091da:	2303      	movs	r3, #3
 80091dc:	e01f      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091de:	2302      	movs	r3, #2
 80091e0:	e01d      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e01b      	b.n	800921e <HAL_GPIO_Init+0x26a>
 80091e6:	bf00      	nop
 80091e8:	58000080 	.word	0x58000080
 80091ec:	58024400 	.word	0x58024400
 80091f0:	58000400 	.word	0x58000400
 80091f4:	58020000 	.word	0x58020000
 80091f8:	58020400 	.word	0x58020400
 80091fc:	58020800 	.word	0x58020800
 8009200:	58020c00 	.word	0x58020c00
 8009204:	58021000 	.word	0x58021000
 8009208:	58021400 	.word	0x58021400
 800920c:	58021800 	.word	0x58021800
 8009210:	58021c00 	.word	0x58021c00
 8009214:	58022000 	.word	0x58022000
 8009218:	58022400 	.word	0x58022400
 800921c:	2300      	movs	r3, #0
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	f002 0203 	and.w	r2, r2, #3
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	4093      	lsls	r3, r2
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4313      	orrs	r3, r2
 800922c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800922e:	4938      	ldr	r1, [pc, #224]	; (8009310 <HAL_GPIO_Init+0x35c>)
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	3302      	adds	r3, #2
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800923c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	43db      	mvns	r3, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4013      	ands	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800926a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	43db      	mvns	r3, r3
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	4013      	ands	r3, r2
 800927a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	43db      	mvns	r3, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4013      	ands	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f47f ae63 	bne.w	8008fc8 <HAL_GPIO_Init+0x14>
  }
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	3724      	adds	r7, #36	; 0x24
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	58000400 	.word	0x58000400

08009314 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009322:	4b75      	ldr	r3, [pc, #468]	; (80094f8 <HAL_GPIO_DeInit+0x1e4>)
 8009324:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009326:	e0d9      	b.n	80094dc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009328:	2201      	movs	r2, #1
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	fa02 f303 	lsl.w	r3, r2, r3
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	4013      	ands	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80cc 	beq.w	80094d6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800933e:	4a6f      	ldr	r2, [pc, #444]	; (80094fc <HAL_GPIO_DeInit+0x1e8>)
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	3302      	adds	r3, #2
 8009346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	220f      	movs	r2, #15
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4013      	ands	r3, r2
 800935e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a67      	ldr	r2, [pc, #412]	; (8009500 <HAL_GPIO_DeInit+0x1ec>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d037      	beq.n	80093d8 <HAL_GPIO_DeInit+0xc4>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a66      	ldr	r2, [pc, #408]	; (8009504 <HAL_GPIO_DeInit+0x1f0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d031      	beq.n	80093d4 <HAL_GPIO_DeInit+0xc0>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a65      	ldr	r2, [pc, #404]	; (8009508 <HAL_GPIO_DeInit+0x1f4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d02b      	beq.n	80093d0 <HAL_GPIO_DeInit+0xbc>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a64      	ldr	r2, [pc, #400]	; (800950c <HAL_GPIO_DeInit+0x1f8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d025      	beq.n	80093cc <HAL_GPIO_DeInit+0xb8>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a63      	ldr	r2, [pc, #396]	; (8009510 <HAL_GPIO_DeInit+0x1fc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d01f      	beq.n	80093c8 <HAL_GPIO_DeInit+0xb4>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a62      	ldr	r2, [pc, #392]	; (8009514 <HAL_GPIO_DeInit+0x200>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d019      	beq.n	80093c4 <HAL_GPIO_DeInit+0xb0>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a61      	ldr	r2, [pc, #388]	; (8009518 <HAL_GPIO_DeInit+0x204>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <HAL_GPIO_DeInit+0xac>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a60      	ldr	r2, [pc, #384]	; (800951c <HAL_GPIO_DeInit+0x208>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d00d      	beq.n	80093bc <HAL_GPIO_DeInit+0xa8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a5f      	ldr	r2, [pc, #380]	; (8009520 <HAL_GPIO_DeInit+0x20c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d007      	beq.n	80093b8 <HAL_GPIO_DeInit+0xa4>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a5e      	ldr	r2, [pc, #376]	; (8009524 <HAL_GPIO_DeInit+0x210>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d101      	bne.n	80093b4 <HAL_GPIO_DeInit+0xa0>
 80093b0:	2309      	movs	r3, #9
 80093b2:	e012      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093b4:	230a      	movs	r3, #10
 80093b6:	e010      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093b8:	2308      	movs	r3, #8
 80093ba:	e00e      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093bc:	2307      	movs	r3, #7
 80093be:	e00c      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093c0:	2306      	movs	r3, #6
 80093c2:	e00a      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093c4:	2305      	movs	r3, #5
 80093c6:	e008      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093c8:	2304      	movs	r3, #4
 80093ca:	e006      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093cc:	2303      	movs	r3, #3
 80093ce:	e004      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e002      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <HAL_GPIO_DeInit+0xc6>
 80093d8:	2300      	movs	r3, #0
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	f002 0203 	and.w	r2, r2, #3
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	4093      	lsls	r3, r2
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d136      	bne.n	8009458 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	43db      	mvns	r3, r3
 80093f2:	401a      	ands	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	43db      	mvns	r3, r3
 8009400:	401a      	ands	r2, r3
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	43db      	mvns	r3, r3
 8009410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009414:	4013      	ands	r3, r2
 8009416:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	43db      	mvns	r3, r3
 8009422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009426:	4013      	ands	r3, r2
 8009428:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	220f      	movs	r2, #15
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800943a:	4a30      	ldr	r2, [pc, #192]	; (80094fc <HAL_GPIO_DeInit+0x1e8>)
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	089b      	lsrs	r3, r3, #2
 8009440:	3302      	adds	r3, #2
 8009442:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	43da      	mvns	r2, r3
 800944a:	482c      	ldr	r0, [pc, #176]	; (80094fc <HAL_GPIO_DeInit+0x1e8>)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	089b      	lsrs	r3, r3, #2
 8009450:	400a      	ands	r2, r1
 8009452:	3302      	adds	r3, #2
 8009454:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	2103      	movs	r1, #3
 8009462:	fa01 f303 	lsl.w	r3, r1, r3
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	08da      	lsrs	r2, r3, #3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3208      	adds	r2, #8
 8009474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f003 0307 	and.w	r3, r3, #7
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	220f      	movs	r2, #15
 8009482:	fa02 f303 	lsl.w	r3, r2, r3
 8009486:	43db      	mvns	r3, r3
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	08d2      	lsrs	r2, r2, #3
 800948c:	4019      	ands	r1, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3208      	adds	r2, #8
 8009492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	2103      	movs	r1, #3
 80094a0:	fa01 f303 	lsl.w	r3, r1, r3
 80094a4:	43db      	mvns	r3, r3
 80094a6:	401a      	ands	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	2101      	movs	r1, #1
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	fa01 f303 	lsl.w	r3, r1, r3
 80094b8:	43db      	mvns	r3, r3
 80094ba:	401a      	ands	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	2103      	movs	r1, #3
 80094ca:	fa01 f303 	lsl.w	r3, r1, r3
 80094ce:	43db      	mvns	r3, r3
 80094d0:	401a      	ands	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	3301      	adds	r3, #1
 80094da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	fa22 f303 	lsr.w	r3, r2, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f47f af1f 	bne.w	8009328 <HAL_GPIO_DeInit+0x14>
  }
}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	371c      	adds	r7, #28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	58000080 	.word	0x58000080
 80094fc:	58000400 	.word	0x58000400
 8009500:	58020000 	.word	0x58020000
 8009504:	58020400 	.word	0x58020400
 8009508:	58020800 	.word	0x58020800
 800950c:	58020c00 	.word	0x58020c00
 8009510:	58021000 	.word	0x58021000
 8009514:	58021400 	.word	0x58021400
 8009518:	58021800 	.word	0x58021800
 800951c:	58021c00 	.word	0x58021c00
 8009520:	58022000 	.word	0x58022000
 8009524:	58022400 	.word	0x58022400

08009528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	807b      	strh	r3, [r7, #2]
 8009534:	4613      	mov	r3, r2
 8009536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009538:	787b      	ldrb	r3, [r7, #1]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800953e:	887a      	ldrh	r2, [r7, #2]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009544:	e003      	b.n	800954e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009546:	887b      	ldrh	r3, [r7, #2]
 8009548:	041a      	lsls	r2, r3, #16
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	619a      	str	r2, [r3, #24]
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4013      	ands	r3, r2
 8009572:	041a      	lsls	r2, r3, #16
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	43d9      	mvns	r1, r3
 8009578:	887b      	ldrh	r3, [r7, #2]
 800957a:	400b      	ands	r3, r1
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	619a      	str	r2, [r3, #24]
}
 8009582:	bf00      	nop
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	4603      	mov	r3, r0
 8009596:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f7 fca1 	bl	8000efc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e07f      	b.n	80096d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7f7 fd90 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2224      	movs	r2, #36	; 0x24
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d107      	bne.n	800963e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800963a:	609a      	str	r2, [r3, #8]
 800963c:	e006      	b.n	800964c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689a      	ldr	r2, [r3, #8]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800964a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d104      	bne.n	800965e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800965c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <HAL_I2C_Init+0x11c>)
 800966a:	430b      	orrs	r3, r1
 800966c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800967c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	69d9      	ldr	r1, [r3, #28]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0201 	orr.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	02008000 	.word	0x02008000

080096e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e021      	b.n	800973a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2224      	movs	r2, #36	; 0x24
 80096fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f7 fd68 	bl	80011e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	4608      	mov	r0, r1
 800974e:	4611      	mov	r1, r2
 8009750:	461a      	mov	r2, r3
 8009752:	4603      	mov	r3, r0
 8009754:	817b      	strh	r3, [r7, #10]
 8009756:	460b      	mov	r3, r1
 8009758:	813b      	strh	r3, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b20      	cmp	r3, #32
 8009768:	f040 80f9 	bne.w	800995e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <HAL_I2C_Mem_Write+0x34>
 8009772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d105      	bne.n	8009784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800977e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0ed      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_I2C_Mem_Write+0x4e>
 800978e:	2302      	movs	r3, #2
 8009790:	e0e6      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800979a:	f7fe ff39 	bl	8008610 <HAL_GetTick>
 800979e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2319      	movs	r3, #25
 80097a6:	2201      	movs	r2, #1
 80097a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fadd 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0d1      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2221      	movs	r2, #33	; 0x21
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2240      	movs	r2, #64	; 0x40
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a3a      	ldr	r2, [r7, #32]
 80097d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80097e4:	88f8      	ldrh	r0, [r7, #6]
 80097e6:	893a      	ldrh	r2, [r7, #8]
 80097e8:	8979      	ldrh	r1, [r7, #10]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	4603      	mov	r3, r0
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f9ed 	bl	8009bd4 <I2C_RequestMemoryWrite>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0a9      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009810:	b29b      	uxth	r3, r3
 8009812:	2bff      	cmp	r3, #255	; 0xff
 8009814:	d90e      	bls.n	8009834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009820:	b2da      	uxtb	r2, r3
 8009822:	8979      	ldrh	r1, [r7, #10]
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fc57 	bl	800a0e0 <I2C_TransferConfig>
 8009832:	e00f      	b.n	8009854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009842:	b2da      	uxtb	r2, r3
 8009844:	8979      	ldrh	r1, [r7, #10]
 8009846:	2300      	movs	r3, #0
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fc46 	bl	800a0e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 fad6 	bl	8009e0a <I2C_WaitOnTXISFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e07b      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	781a      	ldrb	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d034      	beq.n	800990c <HAL_I2C_Mem_Write+0x1c8>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d130      	bne.n	800990c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	2200      	movs	r2, #0
 80098b2:	2180      	movs	r1, #128	; 0x80
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 fa59 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e04d      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2bff      	cmp	r3, #255	; 0xff
 80098cc:	d90e      	bls.n	80098ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	22ff      	movs	r2, #255	; 0xff
 80098d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	8979      	ldrh	r1, [r7, #10]
 80098dc:	2300      	movs	r3, #0
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fbfb 	bl	800a0e0 <I2C_TransferConfig>
 80098ea:	e00f      	b.n	800990c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	8979      	ldrh	r1, [r7, #10]
 80098fe:	2300      	movs	r3, #0
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fbea 	bl	800a0e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d19e      	bne.n	8009854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fabc 	bl	8009e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e01a      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2220      	movs	r2, #32
 8009930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6859      	ldr	r1, [r3, #4]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <HAL_I2C_Mem_Write+0x224>)
 800993e:	400b      	ands	r3, r1
 8009940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2220      	movs	r2, #32
 8009946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800995e:	2302      	movs	r3, #2
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	fe00e800 	.word	0xfe00e800

0800996c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af02      	add	r7, sp, #8
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	4608      	mov	r0, r1
 8009976:	4611      	mov	r1, r2
 8009978:	461a      	mov	r2, r3
 800997a:	4603      	mov	r3, r0
 800997c:	817b      	strh	r3, [r7, #10]
 800997e:	460b      	mov	r3, r1
 8009980:	813b      	strh	r3, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b20      	cmp	r3, #32
 8009990:	f040 80fd 	bne.w	8009b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <HAL_I2C_Mem_Read+0x34>
 800999a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e0f1      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_I2C_Mem_Read+0x4e>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e0ea      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80099c2:	f7fe fe25 	bl	8008610 <HAL_GetTick>
 80099c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2319      	movs	r3, #25
 80099ce:	2201      	movs	r2, #1
 80099d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f9c9 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e0d5      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2222      	movs	r2, #34	; 0x22
 80099e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2240      	movs	r2, #64	; 0x40
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a3a      	ldr	r2, [r7, #32]
 80099fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a0c:	88f8      	ldrh	r0, [r7, #6]
 8009a0e:	893a      	ldrh	r2, [r7, #8]
 8009a10:	8979      	ldrh	r1, [r7, #10]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 f92d 	bl	8009c7c <I2C_RequestMemoryRead>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e0ad      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2bff      	cmp	r3, #255	; 0xff
 8009a3c:	d90e      	bls.n	8009a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	8979      	ldrh	r1, [r7, #10]
 8009a4c:	4b52      	ldr	r3, [pc, #328]	; (8009b98 <HAL_I2C_Mem_Read+0x22c>)
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fb43 	bl	800a0e0 <I2C_TransferConfig>
 8009a5a:	e00f      	b.n	8009a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	8979      	ldrh	r1, [r7, #10]
 8009a6e:	4b4a      	ldr	r3, [pc, #296]	; (8009b98 <HAL_I2C_Mem_Read+0x22c>)
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fb32 	bl	800a0e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	2200      	movs	r2, #0
 8009a84:	2104      	movs	r1, #4
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 f970 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e07c      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	b2d2      	uxtb	r2, r2
 8009aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d034      	beq.n	8009b3c <HAL_I2C_Mem_Read+0x1d0>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d130      	bne.n	8009b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2180      	movs	r1, #128	; 0x80
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f941 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e04d      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2bff      	cmp	r3, #255	; 0xff
 8009afc:	d90e      	bls.n	8009b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	22ff      	movs	r2, #255	; 0xff
 8009b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	8979      	ldrh	r1, [r7, #10]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fae3 	bl	800a0e0 <I2C_TransferConfig>
 8009b1a:	e00f      	b.n	8009b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	8979      	ldrh	r1, [r7, #10]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 fad2 	bl	800a0e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d19a      	bne.n	8009a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f9a4 	bl	8009e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e01a      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6859      	ldr	r1, [r3, #4]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <HAL_I2C_Mem_Read+0x230>)
 8009b6e:	400b      	ands	r3, r1
 8009b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e000      	b.n	8009b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009b8e:	2302      	movs	r3, #2
  }
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	80002400 	.word	0x80002400
 8009b9c:	fe00e800 	.word	0xfe00e800

08009ba0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bae:	b2db      	uxtb	r3, r3
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	4608      	mov	r0, r1
 8009bde:	4611      	mov	r1, r2
 8009be0:	461a      	mov	r2, r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	817b      	strh	r3, [r7, #10]
 8009be6:	460b      	mov	r3, r1
 8009be8:	813b      	strh	r3, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	8979      	ldrh	r1, [r7, #10]
 8009bf4:	4b20      	ldr	r3, [pc, #128]	; (8009c78 <I2C_RequestMemoryWrite+0xa4>)
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fa6f 	bl	800a0e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	69b9      	ldr	r1, [r7, #24]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f8ff 	bl	8009e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e02c      	b.n	8009c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c16:	88fb      	ldrh	r3, [r7, #6]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d105      	bne.n	8009c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c1c:	893b      	ldrh	r3, [r7, #8]
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	629a      	str	r2, [r3, #40]	; 0x28
 8009c26:	e015      	b.n	8009c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c28:	893b      	ldrh	r3, [r7, #8]
 8009c2a:	0a1b      	lsrs	r3, r3, #8
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	69b9      	ldr	r1, [r7, #24]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f8e5 	bl	8009e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e012      	b.n	8009c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c4a:	893b      	ldrh	r3, [r7, #8]
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f884 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	80002000 	.word	0x80002000

08009c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	817b      	strh	r3, [r7, #10]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	813b      	strh	r3, [r7, #8]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	8979      	ldrh	r1, [r7, #10]
 8009c9c:	4b20      	ldr	r3, [pc, #128]	; (8009d20 <I2C_RequestMemoryRead+0xa4>)
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 fa1c 	bl	800a0e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	69b9      	ldr	r1, [r7, #24]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f8ac 	bl	8009e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e02c      	b.n	8009d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d105      	bne.n	8009cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cc2:	893b      	ldrh	r3, [r7, #8]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28
 8009ccc:	e015      	b.n	8009cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009cce:	893b      	ldrh	r3, [r7, #8]
 8009cd0:	0a1b      	lsrs	r3, r3, #8
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	69b9      	ldr	r1, [r7, #24]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f892 	bl	8009e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e012      	b.n	8009d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cf0:	893b      	ldrh	r3, [r7, #8]
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2200      	movs	r2, #0
 8009d02:	2140      	movs	r1, #64	; 0x40
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f831 	bl	8009d6c <I2C_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	80002000 	.word	0x80002000

08009d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d103      	bne.n	8009d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d007      	beq.n	8009d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0201 	orr.w	r2, r2, #1
 8009d5e:	619a      	str	r2, [r3, #24]
  }
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d7c:	e031      	b.n	8009de2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d02d      	beq.n	8009de2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d86:	f7fe fc43 	bl	8008610 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d302      	bcc.n	8009d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d122      	bne.n	8009de2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4013      	ands	r3, r2
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	bf0c      	ite	eq
 8009dac:	2301      	moveq	r3, #1
 8009dae:	2300      	movne	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d113      	bne.n	8009de2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dbe:	f043 0220 	orr.w	r2, r3, #32
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e00f      	b.n	8009e02 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699a      	ldr	r2, [r3, #24]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4013      	ands	r3, r2
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	bf0c      	ite	eq
 8009df2:	2301      	moveq	r3, #1
 8009df4:	2300      	movne	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d0be      	beq.n	8009d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009e16:	e033      	b.n	8009e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f87f 	bl	8009f20 <I2C_IsErrorOccurred>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e031      	b.n	8009e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e32:	d025      	beq.n	8009e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e34:	f7fe fbec 	bl	8008610 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d302      	bcc.n	8009e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11a      	bne.n	8009e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d013      	beq.n	8009e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5c:	f043 0220 	orr.w	r2, r3, #32
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e007      	b.n	8009e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d1c4      	bne.n	8009e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ea4:	e02f      	b.n	8009f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 f838 	bl	8009f20 <I2C_IsErrorOccurred>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e02d      	b.n	8009f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eba:	f7fe fba9 	bl	8008610 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d302      	bcc.n	8009ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11a      	bne.n	8009f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d013      	beq.n	8009f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	f043 0220 	orr.w	r2, r3, #32
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e007      	b.n	8009f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d1c8      	bne.n	8009ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	; 0x28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	f003 0310 	and.w	r3, r3, #16
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d068      	beq.n	800a01e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2210      	movs	r2, #16
 8009f52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f54:	e049      	b.n	8009fea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d045      	beq.n	8009fea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f5e:	f7fe fb57 	bl	8008610 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d302      	bcc.n	8009f74 <I2C_IsErrorOccurred+0x54>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d13a      	bne.n	8009fea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f96:	d121      	bne.n	8009fdc <I2C_IsErrorOccurred+0xbc>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9e:	d01d      	beq.n	8009fdc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009fa0:	7cfb      	ldrb	r3, [r7, #19]
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d01a      	beq.n	8009fdc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009fb6:	f7fe fb2b 	bl	8008610 <HAL_GetTick>
 8009fba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fbc:	e00e      	b.n	8009fdc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009fbe:	f7fe fb27 	bl	8008610 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b19      	cmp	r3, #25
 8009fca:	d907      	bls.n	8009fdc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	f043 0320 	orr.w	r3, r3, #32
 8009fd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009fda:	e006      	b.n	8009fea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d1e9      	bne.n	8009fbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d003      	beq.n	800a000 <I2C_IsErrorOccurred+0xe0>
 8009ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0aa      	beq.n	8009f56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2220      	movs	r2, #32
 800a00e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	f043 0304 	orr.w	r3, r3, #4
 800a016:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	f043 0301 	orr.w	r3, r3, #1
 800a036:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a040:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	f043 0308 	orr.w	r3, r3, #8
 800a058:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01c      	beq.n	800a0ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7ff fe45 	bl	8009d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6859      	ldr	r1, [r3, #4]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <I2C_IsErrorOccurred+0x1bc>)
 800a0a6:	400b      	ands	r3, r1
 800a0a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a0ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3728      	adds	r7, #40	; 0x28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	fe00e800 	.word	0xfe00e800

0800a0e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	607b      	str	r3, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	817b      	strh	r3, [r7, #10]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0f2:	897b      	ldrh	r3, [r7, #10]
 800a0f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0f8:	7a7b      	ldrb	r3, [r7, #9]
 800a0fa:	041b      	lsls	r3, r3, #16
 800a0fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a100:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	4313      	orrs	r3, r2
 800a10a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a10e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	0d5b      	lsrs	r3, r3, #21
 800a11a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <I2C_TransferConfig+0x60>)
 800a120:	430b      	orrs	r3, r1
 800a122:	43db      	mvns	r3, r3
 800a124:	ea02 0103 	and.w	r1, r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	430a      	orrs	r2, r1
 800a130:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a132:	bf00      	nop
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	03ff63ff 	.word	0x03ff63ff

0800a144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b20      	cmp	r3, #32
 800a158:	d138      	bne.n	800a1cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a164:	2302      	movs	r3, #2
 800a166:	e032      	b.n	800a1ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2224      	movs	r2, #36	; 0x24
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0201 	bic.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6819      	ldr	r1, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	d139      	bne.n	800a264 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e033      	b.n	800a266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2224      	movs	r2, #36	; 0x24
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a22c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	e000      	b.n	800a266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a264:	2302      	movs	r3, #2
  }
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
	...

0800a274 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e0bf      	b.n	800a406 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d106      	bne.n	800a2a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7f6 ffc8 	bl	8001230 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a2b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6999      	ldr	r1, [r3, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a2cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6899      	ldr	r1, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	4b4a      	ldr	r3, [pc, #296]	; (800a410 <HAL_LTDC_Init+0x19c>)
 800a2e8:	400b      	ands	r3, r1
 800a2ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6899      	ldr	r1, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	699a      	ldr	r2, [r3, #24]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68d9      	ldr	r1, [r3, #12]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b3e      	ldr	r3, [pc, #248]	; (800a410 <HAL_LTDC_Init+0x19c>)
 800a316:	400b      	ands	r3, r1
 800a318:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	041b      	lsls	r3, r3, #16
 800a320:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68d9      	ldr	r1, [r3, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1a      	ldr	r2, [r3, #32]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6919      	ldr	r1, [r3, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4b33      	ldr	r3, [pc, #204]	; (800a410 <HAL_LTDC_Init+0x19c>)
 800a344:	400b      	ands	r3, r1
 800a346:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	041b      	lsls	r3, r3, #16
 800a34e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6919      	ldr	r1, [r3, #16]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6959      	ldr	r1, [r3, #20]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <HAL_LTDC_Init+0x19c>)
 800a372:	400b      	ands	r3, r1
 800a374:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	041b      	lsls	r3, r3, #16
 800a37c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6959      	ldr	r1, [r3, #20]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a39a:	021b      	lsls	r3, r3, #8
 800a39c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a3b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0206 	orr.w	r2, r2, #6
 800a3e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0201 	orr.w	r2, r2, #1
 800a3f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	f000f800 	.word	0xf000f800

0800a414 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d023      	beq.n	800a47e <HAL_LTDC_IRQHandler+0x6a>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01e      	beq.n	800a47e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0204 	bic.w	r2, r2, #4
 800a44e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2204      	movs	r2, #4
 800a456:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a45e:	f043 0201 	orr.w	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2204      	movs	r2, #4
 800a46c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f86f 	bl	800a55c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d023      	beq.n	800a4d0 <HAL_LTDC_IRQHandler+0xbc>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01e      	beq.n	800a4d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0202 	bic.w	r2, r2, #2
 800a4a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4b0:	f043 0202 	orr.w	r2, r3, #2
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f846 	bl	800a55c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01b      	beq.n	800a512 <HAL_LTDC_IRQHandler+0xfe>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d016      	beq.n	800a512 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0201 	bic.w	r2, r2, #1
 800a4f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7f9 fbcf 	bl	8003cb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0308 	and.w	r3, r3, #8
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01b      	beq.n	800a554 <HAL_LTDC_IRQHandler+0x140>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d016      	beq.n	800a554 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0208 	bic.w	r2, r2, #8
 800a534:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2208      	movs	r2, #8
 800a53c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f80e 	bl	800a570 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a584:	b5b0      	push	{r4, r5, r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <HAL_LTDC_ConfigLayer+0x1a>
 800a59a:	2302      	movs	r3, #2
 800a59c:	e02c      	b.n	800a5f8 <HAL_LTDC_ConfigLayer+0x74>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2134      	movs	r1, #52	; 0x34
 800a5b4:	fb01 f303 	mul.w	r3, r1, r3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f849 	bl	800a670 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a600 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a610:	2b01      	cmp	r3, #1
 800a612:	d101      	bne.n	800a618 <HAL_LTDC_ProgramLineEvent+0x18>
 800a614:	2302      	movs	r3, #2
 800a616:	e023      	b.n	800a660 <HAL_LTDC_ProgramLineEvent+0x60>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0201 	bic.w	r2, r2, #1
 800a636:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0201 	orr.w	r2, r2, #1
 800a64c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	50001000 	.word	0x50001000

0800a670 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a670:	b480      	push	{r7}
 800a672:	b089      	sub	sp, #36	; 0x24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	0c1b      	lsrs	r3, r3, #16
 800a688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a68c:	4413      	add	r3, r2
 800a68e:	041b      	lsls	r3, r3, #16
 800a690:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	01db      	lsls	r3, r3, #7
 800a69c:	4413      	add	r3, r2
 800a69e:	3384      	adds	r3, #132	; 0x84
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	01d2      	lsls	r2, r2, #7
 800a6ac:	440a      	add	r2, r1
 800a6ae:	3284      	adds	r2, #132	; 0x84
 800a6b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	01db      	lsls	r3, r3, #7
 800a6d4:	440b      	add	r3, r1
 800a6d6:	3384      	adds	r3, #132	; 0x84
 800a6d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a6ee:	4413      	add	r3, r2
 800a6f0:	041b      	lsls	r3, r3, #16
 800a6f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	01db      	lsls	r3, r3, #7
 800a6fe:	4413      	add	r3, r2
 800a700:	3384      	adds	r3, #132	; 0x84
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	4611      	mov	r1, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	01d2      	lsls	r2, r2, #7
 800a70e:	440a      	add	r2, r1
 800a710:	3284      	adds	r2, #132	; 0x84
 800a712:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a716:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a726:	4413      	add	r3, r2
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4619      	mov	r1, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	01db      	lsls	r3, r3, #7
 800a734:	440b      	add	r3, r1
 800a736:	3384      	adds	r3, #132	; 0x84
 800a738:	4619      	mov	r1, r3
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	01db      	lsls	r3, r3, #7
 800a74a:	4413      	add	r3, r2
 800a74c:	3384      	adds	r3, #132	; 0x84
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	6812      	ldr	r2, [r2, #0]
 800a754:	4611      	mov	r1, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	01d2      	lsls	r2, r2, #7
 800a75a:	440a      	add	r2, r1
 800a75c:	3284      	adds	r2, #132	; 0x84
 800a75e:	f023 0307 	bic.w	r3, r3, #7
 800a762:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	01db      	lsls	r3, r3, #7
 800a76e:	4413      	add	r3, r2
 800a770:	3384      	adds	r3, #132	; 0x84
 800a772:	461a      	mov	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a780:	021b      	lsls	r3, r3, #8
 800a782:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	061b      	lsls	r3, r3, #24
 800a794:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	01db      	lsls	r3, r3, #7
 800a7a0:	4413      	add	r3, r2
 800a7a2:	3384      	adds	r3, #132	; 0x84
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	01db      	lsls	r3, r3, #7
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3384      	adds	r3, #132	; 0x84
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	01db      	lsls	r3, r3, #7
 800a7d4:	440b      	add	r3, r1
 800a7d6:	3384      	adds	r3, #132	; 0x84
 800a7d8:	4619      	mov	r1, r3
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	01db      	lsls	r3, r3, #7
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3384      	adds	r3, #132	; 0x84
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	6812      	ldr	r2, [r2, #0]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	01d2      	lsls	r2, r2, #7
 800a7fa:	440a      	add	r2, r1
 800a7fc:	3284      	adds	r2, #132	; 0x84
 800a7fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a802:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	01db      	lsls	r3, r3, #7
 800a80e:	4413      	add	r3, r2
 800a810:	3384      	adds	r3, #132	; 0x84
 800a812:	461a      	mov	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	01db      	lsls	r3, r3, #7
 800a824:	4413      	add	r3, r2
 800a826:	3384      	adds	r3, #132	; 0x84
 800a828:	69da      	ldr	r2, [r3, #28]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4619      	mov	r1, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	01db      	lsls	r3, r3, #7
 800a834:	440b      	add	r3, r1
 800a836:	3384      	adds	r3, #132	; 0x84
 800a838:	4619      	mov	r1, r3
 800a83a:	4b58      	ldr	r3, [pc, #352]	; (800a99c <LTDC_SetConfig+0x32c>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	69da      	ldr	r2, [r3, #28]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	6809      	ldr	r1, [r1, #0]
 800a84c:	4608      	mov	r0, r1
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	01c9      	lsls	r1, r1, #7
 800a852:	4401      	add	r1, r0
 800a854:	3184      	adds	r1, #132	; 0x84
 800a856:	4313      	orrs	r3, r2
 800a858:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	01db      	lsls	r3, r3, #7
 800a864:	4413      	add	r3, r2
 800a866:	3384      	adds	r3, #132	; 0x84
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	01db      	lsls	r3, r3, #7
 800a874:	4413      	add	r3, r2
 800a876:	3384      	adds	r3, #132	; 0x84
 800a878:	461a      	mov	r2, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	01db      	lsls	r3, r3, #7
 800a888:	4413      	add	r3, r2
 800a88a:	3384      	adds	r3, #132	; 0x84
 800a88c:	461a      	mov	r2, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a89c:	2304      	movs	r3, #4
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	e01b      	b.n	800a8da <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d102      	bne.n	800a8b0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e014      	b.n	800a8da <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d00b      	beq.n	800a8d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d007      	beq.n	800a8d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d003      	beq.n	800a8d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a8cc:	2b07      	cmp	r3, #7
 800a8ce:	d102      	bne.n	800a8d6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e001      	b.n	800a8da <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	01db      	lsls	r3, r3, #7
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3384      	adds	r3, #132	; 0x84
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	01d2      	lsls	r2, r2, #7
 800a8f4:	440a      	add	r2, r1
 800a8f6:	3284      	adds	r2, #132	; 0x84
 800a8f8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a8fc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a902:	69fa      	ldr	r2, [r7, #28]
 800a904:	fb02 f303 	mul.w	r3, r2, r3
 800a908:	041a      	lsls	r2, r3, #16
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	6859      	ldr	r1, [r3, #4]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	1acb      	subs	r3, r1, r3
 800a914:	69f9      	ldr	r1, [r7, #28]
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	3307      	adds	r3, #7
 800a91c:	68f9      	ldr	r1, [r7, #12]
 800a91e:	6809      	ldr	r1, [r1, #0]
 800a920:	4608      	mov	r0, r1
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	01c9      	lsls	r1, r1, #7
 800a926:	4401      	add	r1, r0
 800a928:	3184      	adds	r1, #132	; 0x84
 800a92a:	4313      	orrs	r3, r2
 800a92c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	01db      	lsls	r3, r3, #7
 800a938:	4413      	add	r3, r2
 800a93a:	3384      	adds	r3, #132	; 0x84
 800a93c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4619      	mov	r1, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	01db      	lsls	r3, r3, #7
 800a948:	440b      	add	r3, r1
 800a94a:	3384      	adds	r3, #132	; 0x84
 800a94c:	4619      	mov	r1, r3
 800a94e:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <LTDC_SetConfig+0x330>)
 800a950:	4013      	ands	r3, r2
 800a952:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	01db      	lsls	r3, r3, #7
 800a95e:	4413      	add	r3, r2
 800a960:	3384      	adds	r3, #132	; 0x84
 800a962:	461a      	mov	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	01db      	lsls	r3, r3, #7
 800a974:	4413      	add	r3, r2
 800a976:	3384      	adds	r3, #132	; 0x84
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	4611      	mov	r1, r2
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	01d2      	lsls	r2, r2, #7
 800a984:	440a      	add	r2, r1
 800a986:	3284      	adds	r2, #132	; 0x84
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	6013      	str	r3, [r2, #0]
}
 800a98e:	bf00      	nop
 800a990:	3724      	adds	r7, #36	; 0x24
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	fffff8f8 	.word	0xfffff8f8
 800a9a0:	fffff800 	.word	0xfffff800

0800a9a4 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800a9ac:	f7fd fe30 	bl	8008610 <HAL_GetTick>
 800a9b0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e04a      	b.n	800aa52 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d008      	beq.n	800a9da <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2280      	movs	r2, #128	; 0x80
 800a9cc:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e03b      	b.n	800aa52 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68da      	ldr	r2, [r3, #12]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800a9e8:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0201 	bic.w	r2, r2, #1
 800a9f8:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a9fa:	e016      	b.n	800aa2a <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a9fc:	f7fd fe08 	bl	8008610 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	d90f      	bls.n	800aa2a <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2203      	movs	r2, #3
 800aa22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e013      	b.n	800aa52 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e1      	bne.n	800a9fc <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	221f      	movs	r2, #31
 800aa3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e017      	b.n	800aa9c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d004      	beq.n	800aa82 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2280      	movs	r2, #128	; 0x80
 800aa7c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e00c      	b.n	800aa9c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2204      	movs	r2, #4
 800aa86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68da      	ldr	r2, [r3, #12]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0201 	bic.w	r2, r2, #1
 800aa98:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800aab4:	f7fd fdac 	bl	8008610 <HAL_GetTick>
 800aab8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]
 800aac4:	e0a5      	b.n	800ac12 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f040 809e 	bne.w	800ac12 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7f6 fc78 	bl	80013cc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800aadc:	f241 3188 	movw	r1, #5000	; 0x1388
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fd44 	bl	800b56e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	4b4b      	ldr	r3, [pc, #300]	; (800ac1c <HAL_OSPI_Init+0x174>)
 800aaee:	4013      	ands	r3, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	68d1      	ldr	r1, [r2, #12]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6912      	ldr	r2, [r2, #16]
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	0412      	lsls	r2, r2, #16
 800aafc:	4311      	orrs	r1, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	6952      	ldr	r2, [r2, #20]
 800ab02:	3a01      	subs	r2, #1
 800ab04:	0212      	lsls	r2, r2, #8
 800ab06:	4311      	orrs	r1, r2
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab0c:	4311      	orrs	r1, r2
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	69d2      	ldr	r2, [r2, #28]
 800ab12:	4311      	orrs	r1, r2
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab4c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	021a      	lsls	r2, r3, #8
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2200      	movs	r2, #0
 800ab72:	2120      	movs	r1, #32
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fd45 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d146      	bne.n	800ac12 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	1e5a      	subs	r2, r3, #1
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800abba:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc6:	431a      	orrs	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0201 	orr.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d107      	bne.n	800abfa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 0202 	orr.w	r2, r2, #2
 800abf8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac02:	d103      	bne.n	800ac0c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	651a      	str	r2, [r3, #80]	; 0x50
 800ac0a:	e002      	b.n	800ac12 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	f8e0f8f4 	.word	0xf8e0f8f4

0800ac20 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]
 800ac36:	e015      	b.n	800ac64 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0201 	bic.w	r2, r2, #1
 800ac46:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0202 	bic.w	r2, r2, #2
 800ac56:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7f6 fc25 	bl	80014a8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3350      	adds	r3, #80	; 0x50
 800ac7e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac94:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d03a      	beq.n	800ad16 <HAL_OSPI_IRQHandler+0xa6>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d035      	beq.n	800ad16 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b18      	cmp	r3, #24
 800acae:	d10f      	bne.n	800acd0 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	649a      	str	r2, [r3, #72]	; 0x48
 800acce:	e012      	b.n	800acf6 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b28      	cmp	r3, #40	; 0x28
 800acd4:	d10f      	bne.n	800acf6 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	7812      	ldrb	r2, [r2, #0]
 800acde:	b2d2      	uxtb	r2, r2
 800ace0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d107      	bne.n	800ad0e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad0c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fb7c 	bl	800b40c <HAL_OSPI_FifoThresholdCallback>
 800ad14:	e0e7      	b.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d067      	beq.n	800adf0 <HAL_OSPI_IRQHandler+0x180>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d062      	beq.n	800adf0 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b28      	cmp	r3, #40	; 0x28
 800ad2e:	d131      	bne.n	800ad94 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d015      	beq.n	800ad64 <HAL_OSPI_IRQHandler+0xf4>
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d010      	beq.n	800ad64 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	7812      	ldrb	r2, [r2, #0]
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ad62:	e0bd      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f040 80b9 	bne.w	800aee0 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2202      	movs	r2, #2
 800ad74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ad84:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fb51 	bl	800b434 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ad92:	e0a5      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800adaa:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b18      	cmp	r3, #24
 800adb6:	d103      	bne.n	800adc0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fb45 	bl	800b448 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800adbe:	e08f      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	d103      	bne.n	800adce <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fb2a 	bl	800b420 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800adcc:	e088      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add4:	f040 8084 	bne.w	800aee0 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fb09 	bl	800b3f8 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ade6:	e07b      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fafb 	bl	800b3e4 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800adee:	e077      	b.n	800aee0 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01e      	beq.n	800ae38 <HAL_OSPI_IRQHandler+0x1c8>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d019      	beq.n	800ae38 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2208      	movs	r2, #8
 800ae0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ae28:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2202      	movs	r2, #2
 800ae2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fb13 	bl	800b45c <HAL_OSPI_StatusMatchCallback>
 800ae36:	e056      	b.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d03c      	beq.n	800aebc <HAL_OSPI_IRQHandler+0x24c>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d037      	beq.n	800aebc <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2201      	movs	r2, #1
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ae62:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d01a      	beq.n	800aeae <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0204 	bic.w	r2, r2, #4
 800ae86:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8c:	4a18      	ldr	r2, [pc, #96]	; (800aef0 <HAL_OSPI_IRQHandler+0x280>)
 800ae8e:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff fde0 	bl	800aa5a <HAL_MDMA_Abort_IT>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d021      	beq.n	800aee4 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa9c 	bl	800b3e4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aeac:	e01a      	b.n	800aee4 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa95 	bl	800b3e4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aeba:	e013      	b.n	800aee4 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f003 0310 	and.w	r3, r3, #16
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00f      	beq.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2210      	movs	r2, #16
 800aed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fac9 	bl	800b470 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aede:	e002      	b.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800aee0:	bf00      	nop
 800aee2:	e000      	b.n	800aee6 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aee4:	bf00      	nop
}
 800aee6:	bf00      	nop
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	0800b58d 	.word	0x0800b58d

0800aef4 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	; 0x28
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800af00:	f7fd fb86 	bl	8008610 <HAL_GetTick>
 800af04:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af10:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b02      	cmp	r3, #2
 800af16:	d104      	bne.n	800af22 <HAL_OSPI_Command+0x2e>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af20:	d115      	bne.n	800af4e <HAL_OSPI_Command+0x5a>
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b14      	cmp	r3, #20
 800af26:	d107      	bne.n	800af38 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d00e      	beq.n	800af4e <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d00a      	beq.n	800af4e <HAL_OSPI_Command+0x5a>
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2b24      	cmp	r3, #36	; 0x24
 800af3c:	d15b      	bne.n	800aff6 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d003      	beq.n	800af4e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d153      	bne.n	800aff6 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2200      	movs	r2, #0
 800af56:	2120      	movs	r1, #32
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 fb53 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800af5e:	4603      	mov	r3, r0
 800af60:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800af62:	7ffb      	ldrb	r3, [r7, #31]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d14c      	bne.n	800b002 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 fb7f 	bl	800b674 <OSPI_ConfigCmd>
 800af76:	4603      	mov	r3, r0
 800af78:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800af7a:	7ffb      	ldrb	r3, [r7, #31]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d140      	bne.n	800b002 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10e      	bne.n	800afa6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	2201      	movs	r2, #1
 800af90:	2102      	movs	r1, #2
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fb36 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2202      	movs	r2, #2
 800afa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800afa4:	e02d      	b.n	800b002 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2204      	movs	r2, #4
 800afb2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800afb4:	e025      	b.n	800b002 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d10b      	bne.n	800afd6 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc2:	2b24      	cmp	r3, #36	; 0x24
 800afc4:	d103      	bne.n	800afce <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2204      	movs	r2, #4
 800afca:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800afcc:	e019      	b.n	800b002 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2214      	movs	r2, #20
 800afd2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800afd4:	e015      	b.n	800b002 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d111      	bne.n	800b002 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe2:	2b14      	cmp	r3, #20
 800afe4:	d103      	bne.n	800afee <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2204      	movs	r2, #4
 800afea:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800afec:	e009      	b.n	800b002 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2224      	movs	r2, #36	; 0x24
 800aff2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800aff4:	e005      	b.n	800b002 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2210      	movs	r2, #16
 800affe:	655a      	str	r2, [r3, #84]	; 0x54
 800b000:	e000      	b.n	800b004 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800b002:	bf00      	nop
  }

  /* Return function status */
  return status;
 800b004:	7ffb      	ldrb	r3, [r7, #31]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b08a      	sub	sp, #40	; 0x28
 800b012:	af02      	add	r7, sp, #8
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b01a:	f7fd faf9 	bl	8008610 <HAL_GetTick>
 800b01e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3350      	adds	r3, #80	; 0x50
 800b026:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2208      	movs	r2, #8
 800b036:	655a      	str	r2, [r3, #84]	; 0x54
 800b038:	e057      	b.n	800b0ea <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d14e      	bne.n	800b0e0 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b06a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	2201      	movs	r2, #1
 800b074:	2104      	movs	r1, #4
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 fac4 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b07c:	4603      	mov	r3, r0
 800b07e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b080:	7ffb      	ldrb	r3, [r7, #31]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d113      	bne.n	800b0ae <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	781a      	ldrb	r2, [r3, #0]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b09e:	1e5a      	subs	r2, r3, #1
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1df      	bne.n	800b06c <HAL_OSPI_Transmit+0x5e>
 800b0ac:	e000      	b.n	800b0b0 <HAL_OSPI_Transmit+0xa2>
          break;
 800b0ae:	bf00      	nop

      if (status == HAL_OK)
 800b0b0:	7ffb      	ldrb	r3, [r7, #31]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d119      	bne.n	800b0ea <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	2102      	movs	r1, #2
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fa9f 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b0ca:	7ffb      	ldrb	r3, [r7, #31]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10c      	bne.n	800b0ea <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	651a      	str	r2, [r3, #80]	; 0x50
 800b0de:	e004      	b.n	800b0ea <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2210      	movs	r2, #16
 800b0e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b0ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08c      	sub	sp, #48	; 0x30
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b100:	f7fd fa86 	bl	8008610 <HAL_GetTick>
 800b104:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3350      	adds	r3, #80	; 0x50
 800b10c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b114:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b11e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2208      	movs	r2, #8
 800b130:	655a      	str	r2, [r3, #84]	; 0x54
 800b132:	e07c      	b.n	800b22e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d172      	bne.n	800b222 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b168:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b172:	d104      	bne.n	800b17e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	649a      	str	r2, [r3, #72]	; 0x48
 800b17c:	e011      	b.n	800b1a2 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d004      	beq.n	800b198 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	649a      	str	r2, [r3, #72]	; 0x48
 800b196:	e004      	b.n	800b1a2 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	2106      	movs	r1, #6
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 fa29 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800b1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d114      	bne.n	800b1ea <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	7812      	ldrb	r2, [r2, #0]
 800b1c8:	b2d2      	uxtb	r2, r2
 800b1ca:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1da:	1e5a      	subs	r2, r3, #1
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1dc      	bne.n	800b1a2 <HAL_OSPI_Receive+0xae>
 800b1e8:	e000      	b.n	800b1ec <HAL_OSPI_Receive+0xf8>
          break;
 800b1ea:	bf00      	nop

      if (status == HAL_OK)
 800b1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d11c      	bne.n	800b22e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	2102      	movs	r1, #2
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 fa00 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800b20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10d      	bne.n	800b22e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2202      	movs	r2, #2
 800b218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2202      	movs	r2, #2
 800b21e:	651a      	str	r2, [r3, #80]	; 0x50
 800b220:	e005      	b.n	800b22e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2210      	movs	r2, #16
 800b22c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b232:	4618      	mov	r0, r3
 800b234:	3728      	adds	r7, #40	; 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b08a      	sub	sp, #40	; 0x28
 800b23e:	af02      	add	r7, sp, #8
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b246:	f7fd f9e3 	bl	8008610 <HAL_GetTick>
 800b24a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b252:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b25c:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	2b04      	cmp	r3, #4
 800b264:	d164      	bne.n	800b330 <HAL_OSPI_AutoPolling+0xf6>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b26e:	d15f      	bne.n	800b330 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	2200      	movs	r2, #0
 800b278:	2120      	movs	r1, #32
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 f9c2 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800b284:	7ffb      	ldrb	r3, [r7, #31]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d158      	bne.n	800b33c <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	6852      	ldr	r2, [r2, #4]
 800b29e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	6912      	ldr	r2, [r2, #16]
 800b2aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6899      	ldr	r1, [r3, #8]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	430b      	orrs	r3, r1
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b2cc:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2d6:	d104      	bne.n	800b2e2 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	649a      	str	r2, [r3, #72]	; 0x48
 800b2e0:	e011      	b.n	800b306 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b2ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d004      	beq.n	800b2fc <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	649a      	str	r2, [r3, #72]	; 0x48
 800b2fa:	e004      	b.n	800b306 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	2201      	movs	r2, #1
 800b30e:	2108      	movs	r1, #8
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f977 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b316:	4603      	mov	r3, r0
 800b318:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10d      	bne.n	800b33c <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2208      	movs	r2, #8
 800b326:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2202      	movs	r2, #2
 800b32c:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b32e:	e005      	b.n	800b33c <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2210      	movs	r2, #16
 800b338:	655a      	str	r2, [r3, #84]	; 0x54
 800b33a:	e000      	b.n	800b33e <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800b33c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b352:	f7fd f95d 	bl	8008610 <HAL_GetTick>
 800b356:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d134      	bne.n	800b3ca <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2200      	movs	r2, #0
 800b36a:	2120      	movs	r1, #32
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f949 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d12b      	bne.n	800b3d4 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2288      	movs	r2, #136	; 0x88
 800b380:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b08      	cmp	r3, #8
 800b388:	d111      	bne.n	800b3ae <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	6852      	ldr	r2, [r2, #4]
 800b392:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2210      	movs	r2, #16
 800b39c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b3ac:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <HAL_OSPI_MemoryMapped+0x98>)
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	6812      	ldr	r2, [r2, #0]
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	e004      	b.n	800b3d4 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2210      	movs	r2, #16
 800b3d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	cffffff7 	.word	0xcffffff7

0800b3e4 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af02      	add	r7, sp, #8
 800b48a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800b490:	f7fd f8be 	bl	8008610 <HAL_GetTick>
 800b494:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b49a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d104      	bne.n	800b4b0 <HAL_OSPI_Abort+0x2c>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d052      	beq.n	800b556 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d014      	beq.n	800b4e8 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0204 	bic.w	r2, r2, #4
 800b4cc:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fa66 	bl	800a9a4 <HAL_MDMA_Abort>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2204      	movs	r2, #4
 800b4e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	f003 0320 	and.w	r3, r3, #32
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d02b      	beq.n	800b54e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f042 0202 	orr.w	r2, r2, #2
 800b504:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2201      	movs	r2, #1
 800b510:	2102      	movs	r1, #2
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f876 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d11f      	bne.n	800b562 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2202      	movs	r2, #2
 800b528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	2200      	movs	r2, #0
 800b534:	2120      	movs	r1, #32
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f864 	bl	800b604 <OSPI_WaitFlagStateUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10d      	bne.n	800b562 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2202      	movs	r2, #2
 800b54a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b54c:	e009      	b.n	800b562 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2202      	movs	r2, #2
 800b552:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b554:	e005      	b.n	800b562 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2210      	movs	r2, #16
 800b55e:	655a      	str	r2, [r3, #84]	; 0x54
 800b560:	e000      	b.n	800b564 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b562:	bf00      	nop
  }

  /* Return function status */
  return status;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b598:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a8:	d122      	bne.n	800b5f0 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d014      	beq.n	800b5e2 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b5ce:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0202 	orr.w	r2, r2, #2
 800b5de:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800b5e0:	e00c      	b.n	800b5fc <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7ff ff05 	bl	800b3f8 <HAL_OSPI_AbortCpltCallback>
}
 800b5ee:	e005      	b.n	800b5fc <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7ff fef4 	bl	800b3e4 <HAL_OSPI_ErrorCallback>
}
 800b5fc:	bf00      	nop
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	4613      	mov	r3, r2
 800b612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b614:	e01a      	b.n	800b64c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61c:	d016      	beq.n	800b64c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b61e:	f7fc fff7 	bl	8008610 <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d302      	bcc.n	800b634 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10b      	bne.n	800b64c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b63a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b640:	f043 0201 	orr.w	r2, r3, #1
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e00e      	b.n	800b66a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a1a      	ldr	r2, [r3, #32]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	4013      	ands	r3, r2
 800b656:	2b00      	cmp	r3, #0
 800b658:	bf14      	ite	ne
 800b65a:	2301      	movne	r3, #1
 800b65c:	2300      	moveq	r3, #0
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	461a      	mov	r2, r3
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	429a      	cmp	r2, r3
 800b666:	d1d6      	bne.n	800b616 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b674:	b480      	push	{r7}
 800b676:	b089      	sub	sp, #36	; 0x24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b690:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10a      	bne.n	800b6b0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d114      	bne.n	800b6e2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b6c0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b6ca:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b6d4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e02c      	b.n	800b73c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d114      	bne.n	800b714 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b6f2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b6fc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b706:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e013      	b.n	800b73c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b71c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b726:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b730:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b73a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b744:	431a      	orrs	r2, r3
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d012      	beq.n	800b778 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76a:	4319      	orrs	r1, r3
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	430b      	orrs	r3, r1
 800b772:	431a      	orrs	r2, r3
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f023 021f 	bic.w	r2, r3, #31
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b784:	431a      	orrs	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3a01      	subs	r2, #1
 800b7a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 8095 	beq.w	800b8da <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d053      	beq.n	800b860 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01e      	beq.n	800b7fe <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	4b64      	ldr	r3, [pc, #400]	; (800b958 <OSPI_ConfigCmd+0x2e4>)
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	68d1      	ldr	r1, [r2, #12]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	6952      	ldr	r2, [r2, #20]
 800b7d0:	4311      	orrs	r1, r2
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	6912      	ldr	r2, [r2, #16]
 800b7d6:	4311      	orrs	r1, r2
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	69d2      	ldr	r2, [r2, #28]
 800b7dc:	4311      	orrs	r1, r2
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b7e2:	4311      	orrs	r1, r2
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	6a12      	ldr	r2, [r2, #32]
 800b7e8:	4311      	orrs	r1, r2
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7ee:	4311      	orrs	r1, r2
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	e026      	b.n	800b84c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	4b56      	ldr	r3, [pc, #344]	; (800b95c <OSPI_ConfigCmd+0x2e8>)
 800b804:	4013      	ands	r3, r2
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	68d1      	ldr	r1, [r2, #12]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	6952      	ldr	r2, [r2, #20]
 800b80e:	4311      	orrs	r1, r2
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	6912      	ldr	r2, [r2, #16]
 800b814:	4311      	orrs	r1, r2
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	69d2      	ldr	r2, [r2, #28]
 800b81a:	4311      	orrs	r1, r2
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b820:	4311      	orrs	r1, r2
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	6a12      	ldr	r2, [r2, #32]
 800b826:	430a      	orrs	r2, r1
 800b828:	431a      	orrs	r2, r3
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b836:	d109      	bne.n	800b84c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d105      	bne.n	800b84c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689a      	ldr	r2, [r3, #8]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	6992      	ldr	r2, [r2, #24]
 800b85c:	649a      	str	r2, [r3, #72]	; 0x48
 800b85e:	e074      	b.n	800b94a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	2b00      	cmp	r3, #0
 800b866:	d015      	beq.n	800b894 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	4b3c      	ldr	r3, [pc, #240]	; (800b960 <OSPI_ConfigCmd+0x2ec>)
 800b86e:	4013      	ands	r3, r2
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	68d1      	ldr	r1, [r2, #12]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	6952      	ldr	r2, [r2, #20]
 800b878:	4311      	orrs	r1, r2
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	6912      	ldr	r2, [r2, #16]
 800b87e:	4311      	orrs	r1, r2
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b884:	4311      	orrs	r1, r2
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b88a:	430a      	orrs	r2, r1
 800b88c:	431a      	orrs	r2, r3
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e01d      	b.n	800b8d0 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	68d9      	ldr	r1, [r3, #12]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	4319      	orrs	r1, r3
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ba:	d109      	bne.n	800b8d0 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b8c0:	2b08      	cmp	r3, #8
 800b8c2:	d105      	bne.n	800b8d0 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	e037      	b.n	800b94a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02e      	beq.n	800b940 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d015      	beq.n	800b916 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <OSPI_ConfigCmd+0x2f0>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	69d1      	ldr	r1, [r2, #28]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b8fa:	4311      	orrs	r1, r2
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	6a12      	ldr	r2, [r2, #32]
 800b900:	4311      	orrs	r1, r2
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b906:	4311      	orrs	r1, r2
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b90c:	430a      	orrs	r2, r1
 800b90e:	431a      	orrs	r2, r3
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	e00e      	b.n	800b934 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	69d9      	ldr	r1, [r3, #28]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	4319      	orrs	r1, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	430b      	orrs	r3, r1
 800b92e:	431a      	orrs	r2, r3
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	6992      	ldr	r2, [r2, #24]
 800b93c:	649a      	str	r2, [r3, #72]	; 0x48
 800b93e:	e004      	b.n	800b94a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2208      	movs	r2, #8
 800b948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b94a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3724      	adds	r7, #36	; 0x24
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	f0ffc0c0 	.word	0xf0ffc0c0
 800b95c:	ffffc0c0 	.word	0xffffc0c0
 800b960:	f0ffffc0 	.word	0xf0ffffc0
 800b964:	f0ffc0ff 	.word	0xf0ffc0ff

0800b968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b970:	4b29      	ldr	r3, [pc, #164]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f003 0307 	and.w	r3, r3, #7
 800b978:	2b06      	cmp	r3, #6
 800b97a:	d00a      	beq.n	800b992 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b97c:	4b26      	ldr	r3, [pc, #152]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	429a      	cmp	r2, r3
 800b988:	d001      	beq.n	800b98e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e040      	b.n	800ba10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	e03e      	b.n	800ba10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b992:	4b21      	ldr	r3, [pc, #132]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b99a:	491f      	ldr	r1, [pc, #124]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b9a2:	f7fc fe35 	bl	8008610 <HAL_GetTick>
 800b9a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b9a8:	e009      	b.n	800b9be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b9aa:	f7fc fe31 	bl	8008610 <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9b8:	d901      	bls.n	800b9be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e028      	b.n	800ba10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b9be:	4b16      	ldr	r3, [pc, #88]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ca:	d1ee      	bne.n	800b9aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b1e      	cmp	r3, #30
 800b9d0:	d008      	beq.n	800b9e4 <HAL_PWREx_ConfigSupply+0x7c>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d6:	d005      	beq.n	800b9e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b1d      	cmp	r3, #29
 800b9dc:	d002      	beq.n	800b9e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b2d      	cmp	r3, #45	; 0x2d
 800b9e2:	d114      	bne.n	800ba0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b9e4:	f7fc fe14 	bl	8008610 <HAL_GetTick>
 800b9e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b9ea:	e009      	b.n	800ba00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b9ec:	f7fc fe10 	bl	8008610 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9fa:	d901      	bls.n	800ba00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e007      	b.n	800ba10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba0c:	d1ee      	bne.n	800b9ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	58024800 	.word	0x58024800

0800ba1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08c      	sub	sp, #48	; 0x30
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f000 bc1f 	b.w	800c26e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 80b3 	beq.w	800bba4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba3e:	4b95      	ldr	r3, [pc, #596]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba46:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba48:	4b92      	ldr	r3, [pc, #584]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba50:	2b10      	cmp	r3, #16
 800ba52:	d007      	beq.n	800ba64 <HAL_RCC_OscConfig+0x48>
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	2b18      	cmp	r3, #24
 800ba58:	d112      	bne.n	800ba80 <HAL_RCC_OscConfig+0x64>
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	f003 0303 	and.w	r3, r3, #3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d10d      	bne.n	800ba80 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba64:	4b8b      	ldr	r3, [pc, #556]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 8098 	beq.w	800bba2 <HAL_RCC_OscConfig+0x186>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f040 8093 	bne.w	800bba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e3f6      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba88:	d106      	bne.n	800ba98 <HAL_RCC_OscConfig+0x7c>
 800ba8a:	4b82      	ldr	r3, [pc, #520]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a81      	ldr	r2, [pc, #516]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800ba90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	e058      	b.n	800bb4a <HAL_RCC_OscConfig+0x12e>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d112      	bne.n	800bac6 <HAL_RCC_OscConfig+0xaa>
 800baa0:	4b7c      	ldr	r3, [pc, #496]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a7b      	ldr	r2, [pc, #492]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	4b79      	ldr	r3, [pc, #484]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a78      	ldr	r2, [pc, #480]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bab2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	4b76      	ldr	r3, [pc, #472]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a75      	ldr	r2, [pc, #468]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800babe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	e041      	b.n	800bb4a <HAL_RCC_OscConfig+0x12e>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bace:	d112      	bne.n	800baf6 <HAL_RCC_OscConfig+0xda>
 800bad0:	4b70      	ldr	r3, [pc, #448]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a6f      	ldr	r2, [pc, #444]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4b6d      	ldr	r3, [pc, #436]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a6c      	ldr	r2, [pc, #432]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bae2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	4b6a      	ldr	r3, [pc, #424]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a69      	ldr	r2, [pc, #420]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800baee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	e029      	b.n	800bb4a <HAL_RCC_OscConfig+0x12e>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800bafe:	d112      	bne.n	800bb26 <HAL_RCC_OscConfig+0x10a>
 800bb00:	4b64      	ldr	r3, [pc, #400]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a63      	ldr	r2, [pc, #396]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	4b61      	ldr	r3, [pc, #388]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a60      	ldr	r2, [pc, #384]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	4b5e      	ldr	r3, [pc, #376]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a5d      	ldr	r2, [pc, #372]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	e011      	b.n	800bb4a <HAL_RCC_OscConfig+0x12e>
 800bb26:	4b5b      	ldr	r3, [pc, #364]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a5a      	ldr	r2, [pc, #360]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	4b58      	ldr	r3, [pc, #352]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a57      	ldr	r2, [pc, #348]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	4b55      	ldr	r3, [pc, #340]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a54      	ldr	r2, [pc, #336]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d013      	beq.n	800bb7a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb52:	f7fc fd5d 	bl	8008610 <HAL_GetTick>
 800bb56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb58:	e008      	b.n	800bb6c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb5a:	f7fc fd59 	bl	8008610 <HAL_GetTick>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	2b64      	cmp	r3, #100	; 0x64
 800bb66:	d901      	bls.n	800bb6c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e380      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb6c:	4b49      	ldr	r3, [pc, #292]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d0f0      	beq.n	800bb5a <HAL_RCC_OscConfig+0x13e>
 800bb78:	e014      	b.n	800bba4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb7a:	f7fc fd49 	bl	8008610 <HAL_GetTick>
 800bb7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bb80:	e008      	b.n	800bb94 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb82:	f7fc fd45 	bl	8008610 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b64      	cmp	r3, #100	; 0x64
 800bb8e:	d901      	bls.n	800bb94 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e36c      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bb94:	4b3f      	ldr	r3, [pc, #252]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1f0      	bne.n	800bb82 <HAL_RCC_OscConfig+0x166>
 800bba0:	e000      	b.n	800bba4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bba2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0302 	and.w	r3, r3, #2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 808c 	beq.w	800bcca <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbb2:	4b38      	ldr	r3, [pc, #224]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbbc:	4b35      	ldr	r3, [pc, #212]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d007      	beq.n	800bbd8 <HAL_RCC_OscConfig+0x1bc>
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b18      	cmp	r3, #24
 800bbcc:	d137      	bne.n	800bc3e <HAL_RCC_OscConfig+0x222>
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	f003 0303 	and.w	r3, r3, #3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d132      	bne.n	800bc3e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbd8:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0304 	and.w	r3, r3, #4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d005      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x1d4>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e33e      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bbf0:	4b28      	ldr	r3, [pc, #160]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f023 0219 	bic.w	r2, r3, #25
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	4925      	ldr	r1, [pc, #148]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc02:	f7fc fd05 	bl	8008610 <HAL_GetTick>
 800bc06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc08:	e008      	b.n	800bc1c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc0a:	f7fc fd01 	bl	8008610 <HAL_GetTick>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d901      	bls.n	800bc1c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e328      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc1c:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0f0      	beq.n	800bc0a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc28:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	061b      	lsls	r3, r3, #24
 800bc36:	4917      	ldr	r1, [pc, #92]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc3c:	e045      	b.n	800bcca <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d028      	beq.n	800bc98 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc46:	4b13      	ldr	r3, [pc, #76]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f023 0219 	bic.w	r2, r3, #25
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	4910      	ldr	r1, [pc, #64]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc58:	f7fc fcda 	bl	8008610 <HAL_GetTick>
 800bc5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc5e:	e008      	b.n	800bc72 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc60:	f7fc fcd6 	bl	8008610 <HAL_GetTick>
 800bc64:	4602      	mov	r2, r0
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d901      	bls.n	800bc72 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e2fd      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc72:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0f0      	beq.n	800bc60 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	061b      	lsls	r3, r3, #24
 800bc8c:	4901      	ldr	r1, [pc, #4]	; (800bc94 <HAL_RCC_OscConfig+0x278>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	604b      	str	r3, [r1, #4]
 800bc92:	e01a      	b.n	800bcca <HAL_RCC_OscConfig+0x2ae>
 800bc94:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc98:	4b97      	ldr	r3, [pc, #604]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a96      	ldr	r2, [pc, #600]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bc9e:	f023 0301 	bic.w	r3, r3, #1
 800bca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca4:	f7fc fcb4 	bl	8008610 <HAL_GetTick>
 800bca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bcaa:	e008      	b.n	800bcbe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcac:	f7fc fcb0 	bl	8008610 <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d901      	bls.n	800bcbe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e2d7      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bcbe:	4b8e      	ldr	r3, [pc, #568]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0304 	and.w	r3, r3, #4
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1f0      	bne.n	800bcac <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0310 	and.w	r3, r3, #16
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d06a      	beq.n	800bdac <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcd6:	4b88      	ldr	r3, [pc, #544]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bce0:	4b85      	ldr	r3, [pc, #532]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d007      	beq.n	800bcfc <HAL_RCC_OscConfig+0x2e0>
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	2b18      	cmp	r3, #24
 800bcf0:	d11b      	bne.n	800bd2a <HAL_RCC_OscConfig+0x30e>
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f003 0303 	and.w	r3, r3, #3
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d116      	bne.n	800bd2a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bcfc:	4b7e      	ldr	r3, [pc, #504]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <HAL_RCC_OscConfig+0x2f8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	2b80      	cmp	r3, #128	; 0x80
 800bd0e:	d001      	beq.n	800bd14 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e2ac      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd14:	4b78      	ldr	r3, [pc, #480]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	061b      	lsls	r3, r3, #24
 800bd22:	4975      	ldr	r1, [pc, #468]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd28:	e040      	b.n	800bdac <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d023      	beq.n	800bd7a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bd32:	4b71      	ldr	r3, [pc, #452]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a70      	ldr	r2, [pc, #448]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3e:	f7fc fc67 	bl	8008610 <HAL_GetTick>
 800bd42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd44:	e008      	b.n	800bd58 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd46:	f7fc fc63 	bl	8008610 <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d901      	bls.n	800bd58 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e28a      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd58:	4b67      	ldr	r3, [pc, #412]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0f0      	beq.n	800bd46 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd64:	4b64      	ldr	r3, [pc, #400]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	061b      	lsls	r3, r3, #24
 800bd72:	4961      	ldr	r1, [pc, #388]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60cb      	str	r3, [r1, #12]
 800bd78:	e018      	b.n	800bdac <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bd7a:	4b5f      	ldr	r3, [pc, #380]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a5e      	ldr	r2, [pc, #376]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bd80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd86:	f7fc fc43 	bl	8008610 <HAL_GetTick>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd8c:	e008      	b.n	800bda0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd8e:	f7fc fc3f 	bl	8008610 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e266      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bda0:	4b55      	ldr	r3, [pc, #340]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f0      	bne.n	800bd8e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0308 	and.w	r3, r3, #8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d036      	beq.n	800be26 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d019      	beq.n	800bdf4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdc0:	4b4d      	ldr	r3, [pc, #308]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bdc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc4:	4a4c      	ldr	r2, [pc, #304]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bdc6:	f043 0301 	orr.w	r3, r3, #1
 800bdca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdcc:	f7fc fc20 	bl	8008610 <HAL_GetTick>
 800bdd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bdd2:	e008      	b.n	800bde6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdd4:	f7fc fc1c 	bl	8008610 <HAL_GetTick>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d901      	bls.n	800bde6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e243      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bde6:	4b44      	ldr	r3, [pc, #272]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdea:	f003 0302 	and.w	r3, r3, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f0      	beq.n	800bdd4 <HAL_RCC_OscConfig+0x3b8>
 800bdf2:	e018      	b.n	800be26 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bdf4:	4b40      	ldr	r3, [pc, #256]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf8:	4a3f      	ldr	r2, [pc, #252]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be00:	f7fc fc06 	bl	8008610 <HAL_GetTick>
 800be04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be06:	e008      	b.n	800be1a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be08:	f7fc fc02 	bl	8008610 <HAL_GetTick>
 800be0c:	4602      	mov	r2, r0
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	2b02      	cmp	r3, #2
 800be14:	d901      	bls.n	800be1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e229      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800be1a:	4b37      	ldr	r3, [pc, #220]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1f0      	bne.n	800be08 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 0320 	and.w	r3, r3, #32
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d036      	beq.n	800bea0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d019      	beq.n	800be6e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800be3a:	4b2f      	ldr	r3, [pc, #188]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a2e      	ldr	r2, [pc, #184]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be46:	f7fc fbe3 	bl	8008610 <HAL_GetTick>
 800be4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be4c:	e008      	b.n	800be60 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be4e:	f7fc fbdf 	bl	8008610 <HAL_GetTick>
 800be52:	4602      	mov	r2, r0
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d901      	bls.n	800be60 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e206      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be60:	4b25      	ldr	r3, [pc, #148]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0f0      	beq.n	800be4e <HAL_RCC_OscConfig+0x432>
 800be6c:	e018      	b.n	800bea0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be6e:	4b22      	ldr	r3, [pc, #136]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a21      	ldr	r2, [pc, #132]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be7a:	f7fc fbc9 	bl	8008610 <HAL_GetTick>
 800be7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be80:	e008      	b.n	800be94 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be82:	f7fc fbc5 	bl	8008610 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d901      	bls.n	800be94 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e1ec      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be94:	4b18      	ldr	r3, [pc, #96]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f0      	bne.n	800be82 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80af 	beq.w	800c00c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <HAL_RCC_OscConfig+0x4e0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a12      	ldr	r2, [pc, #72]	; (800befc <HAL_RCC_OscConfig+0x4e0>)
 800beb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800beba:	f7fc fba9 	bl	8008610 <HAL_GetTick>
 800bebe:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bec0:	e008      	b.n	800bed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bec2:	f7fc fba5 	bl	8008610 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	2b64      	cmp	r3, #100	; 0x64
 800bece:	d901      	bls.n	800bed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e1cc      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bed4:	4b09      	ldr	r3, [pc, #36]	; (800befc <HAL_RCC_OscConfig+0x4e0>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d0f0      	beq.n	800bec2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d10b      	bne.n	800bf00 <HAL_RCC_OscConfig+0x4e4>
 800bee8:	4b03      	ldr	r3, [pc, #12]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800beea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beec:	4a02      	ldr	r2, [pc, #8]	; (800bef8 <HAL_RCC_OscConfig+0x4dc>)
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	6713      	str	r3, [r2, #112]	; 0x70
 800bef4:	e05b      	b.n	800bfae <HAL_RCC_OscConfig+0x592>
 800bef6:	bf00      	nop
 800bef8:	58024400 	.word	0x58024400
 800befc:	58024800 	.word	0x58024800
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d112      	bne.n	800bf2e <HAL_RCC_OscConfig+0x512>
 800bf08:	4b9d      	ldr	r3, [pc, #628]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0c:	4a9c      	ldr	r2, [pc, #624]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf0e:	f023 0301 	bic.w	r3, r3, #1
 800bf12:	6713      	str	r3, [r2, #112]	; 0x70
 800bf14:	4b9a      	ldr	r3, [pc, #616]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf18:	4a99      	ldr	r2, [pc, #612]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf1e:	6713      	str	r3, [r2, #112]	; 0x70
 800bf20:	4b97      	ldr	r3, [pc, #604]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf24:	4a96      	ldr	r2, [pc, #600]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf26:	f023 0304 	bic.w	r3, r3, #4
 800bf2a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf2c:	e03f      	b.n	800bfae <HAL_RCC_OscConfig+0x592>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	2b05      	cmp	r3, #5
 800bf34:	d112      	bne.n	800bf5c <HAL_RCC_OscConfig+0x540>
 800bf36:	4b92      	ldr	r3, [pc, #584]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3a:	4a91      	ldr	r2, [pc, #580]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf3c:	f043 0304 	orr.w	r3, r3, #4
 800bf40:	6713      	str	r3, [r2, #112]	; 0x70
 800bf42:	4b8f      	ldr	r3, [pc, #572]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	4a8e      	ldr	r2, [pc, #568]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf4c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf4e:	4b8c      	ldr	r3, [pc, #560]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf52:	4a8b      	ldr	r2, [pc, #556]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf54:	f043 0301 	orr.w	r3, r3, #1
 800bf58:	6713      	str	r3, [r2, #112]	; 0x70
 800bf5a:	e028      	b.n	800bfae <HAL_RCC_OscConfig+0x592>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	2b85      	cmp	r3, #133	; 0x85
 800bf62:	d112      	bne.n	800bf8a <HAL_RCC_OscConfig+0x56e>
 800bf64:	4b86      	ldr	r3, [pc, #536]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf68:	4a85      	ldr	r2, [pc, #532]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf6a:	f043 0304 	orr.w	r3, r3, #4
 800bf6e:	6713      	str	r3, [r2, #112]	; 0x70
 800bf70:	4b83      	ldr	r3, [pc, #524]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf74:	4a82      	ldr	r2, [pc, #520]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf7a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf7c:	4b80      	ldr	r3, [pc, #512]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf80:	4a7f      	ldr	r2, [pc, #508]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf82:	f043 0301 	orr.w	r3, r3, #1
 800bf86:	6713      	str	r3, [r2, #112]	; 0x70
 800bf88:	e011      	b.n	800bfae <HAL_RCC_OscConfig+0x592>
 800bf8a:	4b7d      	ldr	r3, [pc, #500]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8e:	4a7c      	ldr	r2, [pc, #496]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	6713      	str	r3, [r2, #112]	; 0x70
 800bf96:	4b7a      	ldr	r3, [pc, #488]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	4a79      	ldr	r2, [pc, #484]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bf9c:	f023 0304 	bic.w	r3, r3, #4
 800bfa0:	6713      	str	r3, [r2, #112]	; 0x70
 800bfa2:	4b77      	ldr	r3, [pc, #476]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bfa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa6:	4a76      	ldr	r2, [pc, #472]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bfa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d015      	beq.n	800bfe2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfb6:	f7fc fb2b 	bl	8008610 <HAL_GetTick>
 800bfba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfbc:	e00a      	b.n	800bfd4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfbe:	f7fc fb27 	bl	8008610 <HAL_GetTick>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d901      	bls.n	800bfd4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e14c      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfd4:	4b6a      	ldr	r3, [pc, #424]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0ee      	beq.n	800bfbe <HAL_RCC_OscConfig+0x5a2>
 800bfe0:	e014      	b.n	800c00c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe2:	f7fc fb15 	bl	8008610 <HAL_GetTick>
 800bfe6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfe8:	e00a      	b.n	800c000 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfea:	f7fc fb11 	bl	8008610 <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e136      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c000:	4b5f      	ldr	r3, [pc, #380]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c004:	f003 0302 	and.w	r3, r3, #2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1ee      	bne.n	800bfea <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 812b 	beq.w	800c26c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c016:	4b5a      	ldr	r3, [pc, #360]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c01e:	2b18      	cmp	r3, #24
 800c020:	f000 80bb 	beq.w	800c19a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	2b02      	cmp	r3, #2
 800c02a:	f040 8095 	bne.w	800c158 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c02e:	4b54      	ldr	r3, [pc, #336]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a53      	ldr	r2, [pc, #332]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c03a:	f7fc fae9 	bl	8008610 <HAL_GetTick>
 800c03e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c040:	e008      	b.n	800c054 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c042:	f7fc fae5 	bl	8008610 <HAL_GetTick>
 800c046:	4602      	mov	r2, r0
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d901      	bls.n	800c054 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e10c      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c054:	4b4a      	ldr	r3, [pc, #296]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1f0      	bne.n	800c042 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c060:	4b47      	ldr	r3, [pc, #284]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c064:	4b47      	ldr	r3, [pc, #284]	; (800c184 <HAL_RCC_OscConfig+0x768>)
 800c066:	4013      	ands	r3, r2
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c070:	0112      	lsls	r2, r2, #4
 800c072:	430a      	orrs	r2, r1
 800c074:	4942      	ldr	r1, [pc, #264]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c076:	4313      	orrs	r3, r2
 800c078:	628b      	str	r3, [r1, #40]	; 0x28
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07e:	3b01      	subs	r3, #1
 800c080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c088:	3b01      	subs	r3, #1
 800c08a:	025b      	lsls	r3, r3, #9
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	431a      	orrs	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c094:	3b01      	subs	r3, #1
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c09c:	431a      	orrs	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	061b      	lsls	r3, r3, #24
 800c0a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c0aa:	4935      	ldr	r1, [pc, #212]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c0b0:	4b33      	ldr	r3, [pc, #204]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	4a32      	ldr	r2, [pc, #200]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0b6:	f023 0301 	bic.w	r3, r3, #1
 800c0ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c0bc:	4b30      	ldr	r3, [pc, #192]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0c0:	4b31      	ldr	r3, [pc, #196]	; (800c188 <HAL_RCC_OscConfig+0x76c>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c0c8:	00d2      	lsls	r2, r2, #3
 800c0ca:	492d      	ldr	r1, [pc, #180]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c0d0:	4b2b      	ldr	r3, [pc, #172]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	f023 020c 	bic.w	r2, r3, #12
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0dc:	4928      	ldr	r1, [pc, #160]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c0e2:	4b27      	ldr	r3, [pc, #156]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	f023 0202 	bic.w	r2, r3, #2
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ee:	4924      	ldr	r1, [pc, #144]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c0f4:	4b22      	ldr	r3, [pc, #136]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	4a21      	ldr	r2, [pc, #132]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c0fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c100:	4b1f      	ldr	r3, [pc, #124]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	4a1e      	ldr	r2, [pc, #120]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c10a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c10c:	4b1c      	ldr	r3, [pc, #112]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	4a1b      	ldr	r2, [pc, #108]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c118:	4b19      	ldr	r3, [pc, #100]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	4a18      	ldr	r2, [pc, #96]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c124:	4b16      	ldr	r3, [pc, #88]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a15      	ldr	r2, [pc, #84]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c12a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c130:	f7fc fa6e 	bl	8008610 <HAL_GetTick>
 800c134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c136:	e008      	b.n	800c14a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c138:	f7fc fa6a 	bl	8008610 <HAL_GetTick>
 800c13c:	4602      	mov	r2, r0
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	2b02      	cmp	r3, #2
 800c144:	d901      	bls.n	800c14a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	e091      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c14a:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0f0      	beq.n	800c138 <HAL_RCC_OscConfig+0x71c>
 800c156:	e089      	b.n	800c26c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a08      	ldr	r2, [pc, #32]	; (800c180 <HAL_RCC_OscConfig+0x764>)
 800c15e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c164:	f7fc fa54 	bl	8008610 <HAL_GetTick>
 800c168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c16a:	e00f      	b.n	800c18c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c16c:	f7fc fa50 	bl	8008610 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d908      	bls.n	800c18c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e077      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
 800c17e:	bf00      	nop
 800c180:	58024400 	.word	0x58024400
 800c184:	fffffc0c 	.word	0xfffffc0c
 800c188:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c18c:	4b3a      	ldr	r3, [pc, #232]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e9      	bne.n	800c16c <HAL_RCC_OscConfig+0x750>
 800c198:	e068      	b.n	800c26c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c19a:	4b37      	ldr	r3, [pc, #220]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c1a0:	4b35      	ldr	r3, [pc, #212]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d031      	beq.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f003 0203 	and.w	r2, r3, #3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d12a      	bne.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	091b      	lsrs	r3, r3, #4
 800c1c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d122      	bne.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d11a      	bne.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d111      	bne.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	0c1b      	lsrs	r3, r3, #16
 800c1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d108      	bne.n	800c212 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	0e1b      	lsrs	r3, r3, #24
 800c204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c20e:	429a      	cmp	r2, r3
 800c210:	d001      	beq.n	800c216 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e02b      	b.n	800c26e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21a:	08db      	lsrs	r3, r3, #3
 800c21c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c220:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d01f      	beq.n	800c26c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c22c:	4b12      	ldr	r3, [pc, #72]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c230:	4a11      	ldr	r2, [pc, #68]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c232:	f023 0301 	bic.w	r3, r3, #1
 800c236:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c238:	f7fc f9ea 	bl	8008610 <HAL_GetTick>
 800c23c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c23e:	bf00      	nop
 800c240:	f7fc f9e6 	bl	8008610 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	4293      	cmp	r3, r2
 800c24a:	d0f9      	beq.n	800c240 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c250:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <HAL_RCC_OscConfig+0x860>)
 800c252:	4013      	ands	r3, r2
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c258:	00d2      	lsls	r2, r2, #3
 800c25a:	4907      	ldr	r1, [pc, #28]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c260:	4b05      	ldr	r3, [pc, #20]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	4a04      	ldr	r2, [pc, #16]	; (800c278 <HAL_RCC_OscConfig+0x85c>)
 800c266:	f043 0301 	orr.w	r3, r3, #1
 800c26a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3730      	adds	r7, #48	; 0x30
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	ffff0007 	.word	0xffff0007

0800c280 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e19c      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c294:	4b8a      	ldr	r3, [pc, #552]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 030f 	and.w	r3, r3, #15
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d910      	bls.n	800c2c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2a2:	4b87      	ldr	r3, [pc, #540]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f023 020f 	bic.w	r2, r3, #15
 800c2aa:	4985      	ldr	r1, [pc, #532]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2b2:	4b83      	ldr	r3, [pc, #524]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d001      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e184      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d010      	beq.n	800c2f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	691a      	ldr	r2, [r3, #16]
 800c2d4:	4b7b      	ldr	r3, [pc, #492]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d908      	bls.n	800c2f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c2e0:	4b78      	ldr	r3, [pc, #480]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	4975      	ldr	r1, [pc, #468]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0308 	and.w	r3, r3, #8
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d010      	beq.n	800c320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	695a      	ldr	r2, [r3, #20]
 800c302:	4b70      	ldr	r3, [pc, #448]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d908      	bls.n	800c320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c30e:	4b6d      	ldr	r3, [pc, #436]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	496a      	ldr	r1, [pc, #424]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 0310 	and.w	r3, r3, #16
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d010      	beq.n	800c34e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	699a      	ldr	r2, [r3, #24]
 800c330:	4b64      	ldr	r3, [pc, #400]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c338:	429a      	cmp	r2, r3
 800c33a:	d908      	bls.n	800c34e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c33c:	4b61      	ldr	r3, [pc, #388]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c33e:	69db      	ldr	r3, [r3, #28]
 800c340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	495e      	ldr	r1, [pc, #376]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	2b00      	cmp	r3, #0
 800c358:	d010      	beq.n	800c37c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	69da      	ldr	r2, [r3, #28]
 800c35e:	4b59      	ldr	r3, [pc, #356]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c366:	429a      	cmp	r2, r3
 800c368:	d908      	bls.n	800c37c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c36a:	4b56      	ldr	r3, [pc, #344]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	4953      	ldr	r1, [pc, #332]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0302 	and.w	r3, r3, #2
 800c384:	2b00      	cmp	r3, #0
 800c386:	d010      	beq.n	800c3aa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68da      	ldr	r2, [r3, #12]
 800c38c:	4b4d      	ldr	r3, [pc, #308]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	429a      	cmp	r2, r3
 800c396:	d908      	bls.n	800c3aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c398:	4b4a      	ldr	r3, [pc, #296]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	f023 020f 	bic.w	r2, r3, #15
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	4947      	ldr	r1, [pc, #284]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d055      	beq.n	800c462 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c3b6:	4b43      	ldr	r3, [pc, #268]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	4940      	ldr	r1, [pc, #256]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d107      	bne.n	800c3e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3d0:	4b3c      	ldr	r3, [pc, #240]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d121      	bne.n	800c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e0f6      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d107      	bne.n	800c3f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3e8:	4b36      	ldr	r3, [pc, #216]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d115      	bne.n	800c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e0ea      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d107      	bne.n	800c410 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c400:	4b30      	ldr	r3, [pc, #192]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d109      	bne.n	800c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e0de      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c410:	4b2c      	ldr	r3, [pc, #176]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e0d6      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c420:	4b28      	ldr	r3, [pc, #160]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	f023 0207 	bic.w	r2, r3, #7
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	4925      	ldr	r1, [pc, #148]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c432:	f7fc f8ed 	bl	8008610 <HAL_GetTick>
 800c436:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c438:	e00a      	b.n	800c450 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c43a:	f7fc f8e9 	bl	8008610 <HAL_GetTick>
 800c43e:	4602      	mov	r2, r0
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	f241 3288 	movw	r2, #5000	; 0x1388
 800c448:	4293      	cmp	r3, r2
 800c44a:	d901      	bls.n	800c450 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e0be      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c450:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	00db      	lsls	r3, r3, #3
 800c45e:	429a      	cmp	r2, r3
 800c460:	d1eb      	bne.n	800c43a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d010      	beq.n	800c490 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	4b14      	ldr	r3, [pc, #80]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	f003 030f 	and.w	r3, r3, #15
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d208      	bcs.n	800c490 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c47e:	4b11      	ldr	r3, [pc, #68]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	f023 020f 	bic.w	r2, r3, #15
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	490e      	ldr	r1, [pc, #56]	; (800c4c4 <HAL_RCC_ClockConfig+0x244>)
 800c48c:	4313      	orrs	r3, r2
 800c48e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 030f 	and.w	r3, r3, #15
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d214      	bcs.n	800c4c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c49e:	4b08      	ldr	r3, [pc, #32]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f023 020f 	bic.w	r2, r3, #15
 800c4a6:	4906      	ldr	r1, [pc, #24]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4ae:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <HAL_RCC_ClockConfig+0x240>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 030f 	and.w	r3, r3, #15
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d005      	beq.n	800c4c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e086      	b.n	800c5ce <HAL_RCC_ClockConfig+0x34e>
 800c4c0:	52002000 	.word	0x52002000
 800c4c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d010      	beq.n	800c4f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	691a      	ldr	r2, [r3, #16]
 800c4d8:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d208      	bcs.n	800c4f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c4e4:	4b3c      	ldr	r3, [pc, #240]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	4939      	ldr	r1, [pc, #228]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 0308 	and.w	r3, r3, #8
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d010      	beq.n	800c524 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	695a      	ldr	r2, [r3, #20]
 800c506:	4b34      	ldr	r3, [pc, #208]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c50e:	429a      	cmp	r2, r3
 800c510:	d208      	bcs.n	800c524 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c512:	4b31      	ldr	r3, [pc, #196]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c514:	69db      	ldr	r3, [r3, #28]
 800c516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	492e      	ldr	r1, [pc, #184]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c520:	4313      	orrs	r3, r2
 800c522:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0310 	and.w	r3, r3, #16
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d010      	beq.n	800c552 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	699a      	ldr	r2, [r3, #24]
 800c534:	4b28      	ldr	r3, [pc, #160]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c536:	69db      	ldr	r3, [r3, #28]
 800c538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d208      	bcs.n	800c552 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c540:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	4922      	ldr	r1, [pc, #136]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0320 	and.w	r3, r3, #32
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d010      	beq.n	800c580 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	69da      	ldr	r2, [r3, #28]
 800c562:	4b1d      	ldr	r3, [pc, #116]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d208      	bcs.n	800c580 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c56e:	4b1a      	ldr	r3, [pc, #104]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	4917      	ldr	r1, [pc, #92]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c57c:	4313      	orrs	r3, r2
 800c57e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c580:	f000 f834 	bl	800c5ec <HAL_RCC_GetSysClockFreq>
 800c584:	4602      	mov	r2, r0
 800c586:	4b14      	ldr	r3, [pc, #80]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	0a1b      	lsrs	r3, r3, #8
 800c58c:	f003 030f 	and.w	r3, r3, #15
 800c590:	4912      	ldr	r1, [pc, #72]	; (800c5dc <HAL_RCC_ClockConfig+0x35c>)
 800c592:	5ccb      	ldrb	r3, [r1, r3]
 800c594:	f003 031f 	and.w	r3, r3, #31
 800c598:	fa22 f303 	lsr.w	r3, r2, r3
 800c59c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <HAL_RCC_ClockConfig+0x358>)
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	f003 030f 	and.w	r3, r3, #15
 800c5a6:	4a0d      	ldr	r2, [pc, #52]	; (800c5dc <HAL_RCC_ClockConfig+0x35c>)
 800c5a8:	5cd3      	ldrb	r3, [r2, r3]
 800c5aa:	f003 031f 	and.w	r3, r3, #31
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b4:	4a0a      	ldr	r2, [pc, #40]	; (800c5e0 <HAL_RCC_ClockConfig+0x360>)
 800c5b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c5b8:	4a0a      	ldr	r2, [pc, #40]	; (800c5e4 <HAL_RCC_ClockConfig+0x364>)
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c5be:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <HAL_RCC_ClockConfig+0x368>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f4 fffe 	bl	80015c4 <HAL_InitTick>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	58024400 	.word	0x58024400
 800c5dc:	08025044 	.word	0x08025044
 800c5e0:	24000040 	.word	0x24000040
 800c5e4:	2400003c 	.word	0x2400003c
 800c5e8:	24000044 	.word	0x24000044

0800c5ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b089      	sub	sp, #36	; 0x24
 800c5f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5f2:	4bb3      	ldr	r3, [pc, #716]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5fa:	2b18      	cmp	r3, #24
 800c5fc:	f200 8155 	bhi.w	800c8aa <HAL_RCC_GetSysClockFreq+0x2be>
 800c600:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c606:	bf00      	nop
 800c608:	0800c66d 	.word	0x0800c66d
 800c60c:	0800c8ab 	.word	0x0800c8ab
 800c610:	0800c8ab 	.word	0x0800c8ab
 800c614:	0800c8ab 	.word	0x0800c8ab
 800c618:	0800c8ab 	.word	0x0800c8ab
 800c61c:	0800c8ab 	.word	0x0800c8ab
 800c620:	0800c8ab 	.word	0x0800c8ab
 800c624:	0800c8ab 	.word	0x0800c8ab
 800c628:	0800c693 	.word	0x0800c693
 800c62c:	0800c8ab 	.word	0x0800c8ab
 800c630:	0800c8ab 	.word	0x0800c8ab
 800c634:	0800c8ab 	.word	0x0800c8ab
 800c638:	0800c8ab 	.word	0x0800c8ab
 800c63c:	0800c8ab 	.word	0x0800c8ab
 800c640:	0800c8ab 	.word	0x0800c8ab
 800c644:	0800c8ab 	.word	0x0800c8ab
 800c648:	0800c699 	.word	0x0800c699
 800c64c:	0800c8ab 	.word	0x0800c8ab
 800c650:	0800c8ab 	.word	0x0800c8ab
 800c654:	0800c8ab 	.word	0x0800c8ab
 800c658:	0800c8ab 	.word	0x0800c8ab
 800c65c:	0800c8ab 	.word	0x0800c8ab
 800c660:	0800c8ab 	.word	0x0800c8ab
 800c664:	0800c8ab 	.word	0x0800c8ab
 800c668:	0800c69f 	.word	0x0800c69f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c66c:	4b94      	ldr	r3, [pc, #592]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0320 	and.w	r3, r3, #32
 800c674:	2b00      	cmp	r3, #0
 800c676:	d009      	beq.n	800c68c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c678:	4b91      	ldr	r3, [pc, #580]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	08db      	lsrs	r3, r3, #3
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	4a90      	ldr	r2, [pc, #576]	; (800c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c684:	fa22 f303 	lsr.w	r3, r2, r3
 800c688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c68a:	e111      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c68c:	4b8d      	ldr	r3, [pc, #564]	; (800c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c68e:	61bb      	str	r3, [r7, #24]
      break;
 800c690:	e10e      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c692:	4b8d      	ldr	r3, [pc, #564]	; (800c8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c694:	61bb      	str	r3, [r7, #24]
      break;
 800c696:	e10b      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c698:	4b8c      	ldr	r3, [pc, #560]	; (800c8cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c69a:	61bb      	str	r3, [r7, #24]
      break;
 800c69c:	e108      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c69e:	4b88      	ldr	r3, [pc, #544]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a2:	f003 0303 	and.w	r3, r3, #3
 800c6a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c6a8:	4b85      	ldr	r3, [pc, #532]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ac:	091b      	lsrs	r3, r3, #4
 800c6ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c6b4:	4b82      	ldr	r3, [pc, #520]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6be:	4b80      	ldr	r3, [pc, #512]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	08db      	lsrs	r3, r3, #3
 800c6c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	fb02 f303 	mul.w	r3, r2, r3
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 80e1 	beq.w	800c8a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	f000 8083 	beq.w	800c7f0 <HAL_RCC_GetSysClockFreq+0x204>
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	f200 80a1 	bhi.w	800c834 <HAL_RCC_GetSysClockFreq+0x248>
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <HAL_RCC_GetSysClockFreq+0x114>
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d056      	beq.n	800c7ac <HAL_RCC_GetSysClockFreq+0x1c0>
 800c6fe:	e099      	b.n	800c834 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c700:	4b6f      	ldr	r3, [pc, #444]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 0320 	and.w	r3, r3, #32
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d02d      	beq.n	800c768 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c70c:	4b6c      	ldr	r3, [pc, #432]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	08db      	lsrs	r3, r3, #3
 800c712:	f003 0303 	and.w	r3, r3, #3
 800c716:	4a6b      	ldr	r2, [pc, #428]	; (800c8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c718:	fa22 f303 	lsr.w	r3, r2, r3
 800c71c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	ee07 3a90 	vmov	s15, r3
 800c724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c736:	4b62      	ldr	r3, [pc, #392]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73e:	ee07 3a90 	vmov	s15, r3
 800c742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c746:	ed97 6a02 	vldr	s12, [r7, #8]
 800c74a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c762:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c766:	e087      	b.n	800c878 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c772:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c8d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c77a:	4b51      	ldr	r3, [pc, #324]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c78a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c78e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c7aa:	e065      	b.n	800c878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7be:	4b40      	ldr	r3, [pc, #256]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c6:	ee07 3a90 	vmov	s15, r3
 800c7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c7ee:	e043      	b.n	800c878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c8dc <HAL_RCC_GetSysClockFreq+0x2f0>
 800c7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c802:	4b2f      	ldr	r3, [pc, #188]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c812:	ed97 6a02 	vldr	s12, [r7, #8]
 800c816:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c832:	e021      	b.n	800c878 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c846:	4b1e      	ldr	r3, [pc, #120]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c856:	ed97 6a02 	vldr	s12, [r7, #8]
 800c85a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c876:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c878:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	0a5b      	lsrs	r3, r3, #9
 800c87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c882:	3301      	adds	r3, #1
 800c884:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	ee07 3a90 	vmov	s15, r3
 800c88c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c890:	edd7 6a07 	vldr	s13, [r7, #28]
 800c894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89c:	ee17 3a90 	vmov	r3, s15
 800c8a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c8a2:	e005      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61bb      	str	r3, [r7, #24]
      break;
 800c8a8:	e002      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c8aa:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c8ac:	61bb      	str	r3, [r7, #24]
      break;
 800c8ae:	bf00      	nop
  }

  return sysclockfreq;
 800c8b0:	69bb      	ldr	r3, [r7, #24]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3724      	adds	r7, #36	; 0x24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	58024400 	.word	0x58024400
 800c8c4:	03d09000 	.word	0x03d09000
 800c8c8:	003d0900 	.word	0x003d0900
 800c8cc:	016e3600 	.word	0x016e3600
 800c8d0:	46000000 	.word	0x46000000
 800c8d4:	4c742400 	.word	0x4c742400
 800c8d8:	4a742400 	.word	0x4a742400
 800c8dc:	4bb71b00 	.word	0x4bb71b00

0800c8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c8e6:	f7ff fe81 	bl	800c5ec <HAL_RCC_GetSysClockFreq>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	4b10      	ldr	r3, [pc, #64]	; (800c930 <HAL_RCC_GetHCLKFreq+0x50>)
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	f003 030f 	and.w	r3, r3, #15
 800c8f6:	490f      	ldr	r1, [pc, #60]	; (800c934 <HAL_RCC_GetHCLKFreq+0x54>)
 800c8f8:	5ccb      	ldrb	r3, [r1, r3]
 800c8fa:	f003 031f 	and.w	r3, r3, #31
 800c8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c902:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c904:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <HAL_RCC_GetHCLKFreq+0x50>)
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	f003 030f 	and.w	r3, r3, #15
 800c90c:	4a09      	ldr	r2, [pc, #36]	; (800c934 <HAL_RCC_GetHCLKFreq+0x54>)
 800c90e:	5cd3      	ldrb	r3, [r2, r3]
 800c910:	f003 031f 	and.w	r3, r3, #31
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	fa22 f303 	lsr.w	r3, r2, r3
 800c91a:	4a07      	ldr	r2, [pc, #28]	; (800c938 <HAL_RCC_GetHCLKFreq+0x58>)
 800c91c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c91e:	4a07      	ldr	r2, [pc, #28]	; (800c93c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c924:	4b04      	ldr	r3, [pc, #16]	; (800c938 <HAL_RCC_GetHCLKFreq+0x58>)
 800c926:	681b      	ldr	r3, [r3, #0]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	58024400 	.word	0x58024400
 800c934:	08025044 	.word	0x08025044
 800c938:	24000040 	.word	0x24000040
 800c93c:	2400003c 	.word	0x2400003c

0800c940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c944:	f7ff ffcc 	bl	800c8e0 <HAL_RCC_GetHCLKFreq>
 800c948:	4602      	mov	r2, r0
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c94c:	69db      	ldr	r3, [r3, #28]
 800c94e:	091b      	lsrs	r3, r3, #4
 800c950:	f003 0307 	and.w	r3, r3, #7
 800c954:	4904      	ldr	r1, [pc, #16]	; (800c968 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c956:	5ccb      	ldrb	r3, [r1, r3]
 800c958:	f003 031f 	and.w	r3, r3, #31
 800c95c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c960:	4618      	mov	r0, r3
 800c962:	bd80      	pop	{r7, pc}
 800c964:	58024400 	.word	0x58024400
 800c968:	08025044 	.word	0x08025044

0800c96c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800c970:	f7ff ffb6 	bl	800c8e0 <HAL_RCC_GetHCLKFreq>
 800c974:	4602      	mov	r2, r0
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	4904      	ldr	r1, [pc, #16]	; (800c994 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c982:	5ccb      	ldrb	r3, [r1, r3]
 800c984:	f003 031f 	and.w	r3, r3, #31
 800c988:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	58024400 	.word	0x58024400
 800c994:	08025044 	.word	0x08025044

0800c998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	223f      	movs	r2, #63	; 0x3f
 800c9a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	f003 0207 	and.w	r2, r3, #7
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800c9b4:	4b17      	ldr	r3, [pc, #92]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800c9c0:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	f003 020f 	and.w	r2, r3, #15
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800c9cc:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800c9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800c9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800c9f0:	4b08      	ldr	r3, [pc, #32]	; (800ca14 <HAL_RCC_GetClockConfig+0x7c>)
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <HAL_RCC_GetClockConfig+0x80>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 020f 	and.w	r2, r3, #15
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	601a      	str	r2, [r3, #0]
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	58024400 	.word	0x58024400
 800ca18:	52002000 	.word	0x52002000

0800ca1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca20:	b0c8      	sub	sp, #288	; 0x120
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ca34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ca40:	2500      	movs	r5, #0
 800ca42:	ea54 0305 	orrs.w	r3, r4, r5
 800ca46:	d049      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ca48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca52:	d02f      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ca54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca58:	d828      	bhi.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ca5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca5e:	d01a      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ca60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca64:	d822      	bhi.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ca6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca6e:	d007      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ca70:	e01c      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca72:	4ba7      	ldr	r3, [pc, #668]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4aa6      	ldr	r2, [pc, #664]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ca7e:	e01a      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca84:	3308      	adds	r3, #8
 800ca86:	2102      	movs	r1, #2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f001 fc43 	bl	800e314 <RCCEx_PLL2_Config>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ca94:	e00f      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca9a:	3328      	adds	r3, #40	; 0x28
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f001 fcea 	bl	800e478 <RCCEx_PLL3_Config>
 800caa4:	4603      	mov	r3, r0
 800caa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800caaa:	e004      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cab2:	e000      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cabe:	4b94      	ldr	r3, [pc, #592]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cacc:	4a90      	ldr	r2, [pc, #576]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cace:	430b      	orrs	r3, r1
 800cad0:	6513      	str	r3, [r2, #80]	; 0x50
 800cad2:	e003      	b.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cad8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800cae8:	f04f 0900 	mov.w	r9, #0
 800caec:	ea58 0309 	orrs.w	r3, r8, r9
 800caf0:	d047      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800caf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d82a      	bhi.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cafc:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb02:	bf00      	nop
 800cb04:	0800cb19 	.word	0x0800cb19
 800cb08:	0800cb27 	.word	0x0800cb27
 800cb0c:	0800cb3d 	.word	0x0800cb3d
 800cb10:	0800cb5b 	.word	0x0800cb5b
 800cb14:	0800cb5b 	.word	0x0800cb5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb18:	4b7d      	ldr	r3, [pc, #500]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1c:	4a7c      	ldr	r2, [pc, #496]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cb1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb24:	e01a      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f001 fbf0 	bl	800e314 <RCCEx_PLL2_Config>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb3a:	e00f      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb40:	3328      	adds	r3, #40	; 0x28
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 fc97 	bl	800e478 <RCCEx_PLL3_Config>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb50:	e004      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb58:	e000      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cb5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb64:	4b6a      	ldr	r3, [pc, #424]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb68:	f023 0107 	bic.w	r1, r3, #7
 800cb6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb72:	4a67      	ldr	r2, [pc, #412]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cb74:	430b      	orrs	r3, r1
 800cb76:	6513      	str	r3, [r2, #80]	; 0x50
 800cb78:	e003      	b.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800cb82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800cb8e:	f04f 0b00 	mov.w	fp, #0
 800cb92:	ea5a 030b 	orrs.w	r3, sl, fp
 800cb96:	d054      	beq.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800cb98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800cba2:	d036      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800cba4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800cba8:	d82f      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbae:	d032      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cbb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb4:	d829      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cbb6:	2bc0      	cmp	r3, #192	; 0xc0
 800cbb8:	d02f      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800cbba:	2bc0      	cmp	r3, #192	; 0xc0
 800cbbc:	d825      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cbbe:	2b80      	cmp	r3, #128	; 0x80
 800cbc0:	d018      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800cbc2:	2b80      	cmp	r3, #128	; 0x80
 800cbc4:	d821      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800cbca:	2b40      	cmp	r3, #64	; 0x40
 800cbcc:	d007      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800cbce:	e01c      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbd0:	4b4f      	ldr	r3, [pc, #316]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	4a4e      	ldr	r2, [pc, #312]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cbd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800cbdc:	e01e      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f001 fb94 	bl	800e314 <RCCEx_PLL2_Config>
 800cbec:	4603      	mov	r3, r0
 800cbee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800cbf2:	e013      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbf8:	3328      	adds	r3, #40	; 0x28
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f001 fc3b 	bl	800e478 <RCCEx_PLL3_Config>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800cc08:	e008      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc10:	e004      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800cc12:	bf00      	nop
 800cc14:	e002      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800cc16:	bf00      	nop
 800cc18:	e000      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800cc1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800cc24:	4b3a      	ldr	r3, [pc, #232]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800cc2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc32:	4a37      	ldr	r2, [pc, #220]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cc34:	430b      	orrs	r3, r1
 800cc36:	6513      	str	r3, [r2, #80]	; 0x50
 800cc38:	e003      	b.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800cc42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cc4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc52:	2300      	movs	r3, #0
 800cc54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cc58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	d05c      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800cc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800cc6c:	d03b      	beq.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800cc6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800cc72:	d834      	bhi.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800cc74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc78:	d037      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800cc7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc7e:	d82e      	bhi.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800cc80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cc84:	d033      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cc86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cc8a:	d828      	bhi.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800cc8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc90:	d01a      	beq.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800cc92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc96:	d822      	bhi.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d003      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800cc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cca0:	d007      	beq.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800cca2:	e01c      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cca4:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca8:	4a19      	ldr	r2, [pc, #100]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ccaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ccb0:	e01e      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccb6:	3308      	adds	r3, #8
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 fb2a 	bl	800e314 <RCCEx_PLL2_Config>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ccc6:	e013      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cccc:	3328      	adds	r3, #40	; 0x28
 800ccce:	2100      	movs	r1, #0
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f001 fbd1 	bl	800e478 <RCCEx_PLL3_Config>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ccdc:	e008      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cce4:	e004      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800cce6:	bf00      	nop
 800cce8:	e002      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ccea:	bf00      	nop
 800ccec:	e000      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ccee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10d      	bne.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ccf8:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ccfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccfc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800cd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd06:	4a02      	ldr	r2, [pc, #8]	; (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	6513      	str	r3, [r2, #80]	; 0x50
 800cd0c:	e006      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800cd0e:	bf00      	nop
 800cd10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cd1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cd28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cd32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cd36:	460b      	mov	r3, r1
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	d03a      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800cd3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd42:	2b30      	cmp	r3, #48	; 0x30
 800cd44:	d01f      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800cd46:	2b30      	cmp	r3, #48	; 0x30
 800cd48:	d819      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d00c      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cd4e:	2b20      	cmp	r3, #32
 800cd50:	d815      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d019      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800cd56:	2b10      	cmp	r3, #16
 800cd58:	d111      	bne.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd5a:	4bae      	ldr	r3, [pc, #696]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	4aad      	ldr	r2, [pc, #692]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800cd66:	e011      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	2102      	movs	r1, #2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 facf 	bl	800e314 <RCCEx_PLL2_Config>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800cd7c:	e006      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cd84:	e002      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800cd86:	bf00      	nop
 800cd88:	e000      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800cd8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800cd94:	4b9f      	ldr	r3, [pc, #636]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cd9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cda2:	4a9c      	ldr	r2, [pc, #624]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cda4:	430b      	orrs	r3, r1
 800cda6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cda8:	e003      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cdb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cdbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	d051      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cdd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cddc:	d035      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800cdde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cde2:	d82e      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cde4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cde8:	d031      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800cdea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdee:	d828      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cdf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdf4:	d01a      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800cdf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdfa:	d822      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ce00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce04:	d007      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ce06:	e01c      	b.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce08:	4b82      	ldr	r3, [pc, #520]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	4a81      	ldr	r2, [pc, #516]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ce0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce14:	e01c      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f001 fa78 	bl	800e314 <RCCEx_PLL2_Config>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce2a:	e011      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce30:	3328      	adds	r3, #40	; 0x28
 800ce32:	2100      	movs	r1, #0
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 fb1f 	bl	800e478 <RCCEx_PLL3_Config>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce40:	e006      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ce48:	e002      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800ce4a:	bf00      	nop
 800ce4c:	e000      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800ce4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce58:	4b6e      	ldr	r3, [pc, #440]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ce5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ce60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce66:	4a6b      	ldr	r2, [pc, #428]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ce68:	430b      	orrs	r3, r1
 800ce6a:	6513      	str	r3, [r2, #80]	; 0x50
 800ce6c:	e003      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ce82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce86:	2300      	movs	r3, #0
 800ce88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ce8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ce90:	460b      	mov	r3, r1
 800ce92:	4313      	orrs	r3, r2
 800ce94:	d053      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ce96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cea0:	d033      	beq.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800cea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cea6:	d82c      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceac:	d02f      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ceae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceb2:	d826      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ceb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ceb8:	d02b      	beq.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ceba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cebe:	d820      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cec4:	d012      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800cec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceca:	d81a      	bhi.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d022      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ced0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced4:	d115      	bne.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ced6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ceda:	3308      	adds	r3, #8
 800cedc:	2101      	movs	r1, #1
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 fa18 	bl	800e314 <RCCEx_PLL2_Config>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ceea:	e015      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ceec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cef0:	3328      	adds	r3, #40	; 0x28
 800cef2:	2101      	movs	r1, #1
 800cef4:	4618      	mov	r0, r3
 800cef6:	f001 fabf 	bl	800e478 <RCCEx_PLL3_Config>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cf00:	e00a      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cf08:	e006      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cf0a:	bf00      	nop
 800cf0c:	e004      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cf0e:	bf00      	nop
 800cf10:	e002      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cf12:	bf00      	nop
 800cf14:	e000      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cf16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cf20:	4b3c      	ldr	r3, [pc, #240]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cf22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf24:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cf28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf2e:	4a39      	ldr	r2, [pc, #228]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cf30:	430b      	orrs	r3, r1
 800cf32:	6513      	str	r3, [r2, #80]	; 0x50
 800cf34:	e003      	b.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cf3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cf4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	d060      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cf5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cf6a:	d039      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800cf6c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cf70:	d832      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cf72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf76:	d035      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cf78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf7c:	d82c      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf82:	d031      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf88:	d826      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cf8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf8e:	d02d      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cf90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf94:	d820      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cf96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9a:	d012      	beq.n	800cfc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa0:	d81a      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d024      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cfa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfaa:	d115      	bne.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 f9ad 	bl	800e314 <RCCEx_PLL2_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfc0:	e017      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfc6:	3328      	adds	r3, #40	; 0x28
 800cfc8:	2101      	movs	r1, #1
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f001 fa54 	bl	800e478 <RCCEx_PLL3_Config>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfd6:	e00c      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cfde:	e008      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cfe0:	bf00      	nop
 800cfe2:	e006      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cfe4:	bf00      	nop
 800cfe6:	e004      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cfe8:	bf00      	nop
 800cfea:	e002      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cfec:	bf00      	nop
 800cfee:	e000      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cff2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10e      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cffa:	4b06      	ldr	r3, [pc, #24]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cffe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d00a:	4a02      	ldr	r2, [pc, #8]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d00c:	430b      	orrs	r3, r1
 800d00e:	6593      	str	r3, [r2, #88]	; 0x58
 800d010:	e006      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d012:	bf00      	nop
 800d014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d01c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d02c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d030:	2300      	movs	r3, #0
 800d032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d03a:	460b      	mov	r3, r1
 800d03c:	4313      	orrs	r3, r2
 800d03e:	d037      	beq.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d04a:	d00e      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800d04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d050:	d816      	bhi.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d052:	2b00      	cmp	r3, #0
 800d054:	d018      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d05a:	d111      	bne.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d05c:	4bc4      	ldr	r3, [pc, #784]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	4ac3      	ldr	r2, [pc, #780]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d068:	e00f      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d06e:	3308      	adds	r3, #8
 800d070:	2101      	movs	r1, #1
 800d072:	4618      	mov	r0, r3
 800d074:	f001 f94e 	bl	800e314 <RCCEx_PLL2_Config>
 800d078:	4603      	mov	r3, r0
 800d07a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d07e:	e004      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d086:	e000      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800d088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d08a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d092:	4bb7      	ldr	r3, [pc, #732]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d096:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a0:	4ab3      	ldr	r2, [pc, #716]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d0a2:	430b      	orrs	r3, r1
 800d0a4:	6513      	str	r3, [r2, #80]	; 0x50
 800d0a6:	e003      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d0ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d0b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d0c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	d039      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d81c      	bhi.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d0da:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d11d 	.word	0x0800d11d
 800d0e4:	0800d0f1 	.word	0x0800d0f1
 800d0e8:	0800d0ff 	.word	0x0800d0ff
 800d0ec:	0800d11d 	.word	0x0800d11d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0f0:	4b9f      	ldr	r3, [pc, #636]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f4:	4a9e      	ldr	r2, [pc, #632]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d0f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d0fc:	e00f      	b.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d102:	3308      	adds	r3, #8
 800d104:	2102      	movs	r1, #2
 800d106:	4618      	mov	r0, r3
 800d108:	f001 f904 	bl	800e314 <RCCEx_PLL2_Config>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d112:	e004      	b.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d11a:	e000      	b.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800d11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d11e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10a      	bne.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d126:	4b92      	ldr	r3, [pc, #584]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d12a:	f023 0103 	bic.w	r1, r3, #3
 800d12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d134:	4a8e      	ldr	r2, [pc, #568]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d136:	430b      	orrs	r3, r1
 800d138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d13a:	e003      	b.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d13c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d140:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d154:	2300      	movs	r3, #0
 800d156:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d15a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d15e:	460b      	mov	r3, r1
 800d160:	4313      	orrs	r3, r2
 800d162:	f000 8099 	beq.w	800d298 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d166:	4b83      	ldr	r3, [pc, #524]	; (800d374 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a82      	ldr	r2, [pc, #520]	; (800d374 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d16c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d172:	f7fb fa4d 	bl	8008610 <HAL_GetTick>
 800d176:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d17a:	e00b      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d17c:	f7fb fa48 	bl	8008610 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	2b64      	cmp	r3, #100	; 0x64
 800d18a:	d903      	bls.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800d18c:	2303      	movs	r3, #3
 800d18e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d192:	e005      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d194:	4b77      	ldr	r3, [pc, #476]	; (800d374 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d0ed      	beq.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800d1a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d173      	bne.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d1a8:	4b71      	ldr	r3, [pc, #452]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d1ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1b4:	4053      	eors	r3, r2
 800d1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d015      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d1be:	4b6c      	ldr	r3, [pc, #432]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1ca:	4b69      	ldr	r3, [pc, #420]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ce:	4a68      	ldr	r2, [pc, #416]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1d6:	4b66      	ldr	r3, [pc, #408]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1da:	4a65      	ldr	r2, [pc, #404]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d1e2:	4a63      	ldr	r2, [pc, #396]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f6:	d118      	bne.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f8:	f7fb fa0a 	bl	8008610 <HAL_GetTick>
 800d1fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d200:	e00d      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d202:	f7fb fa05 	bl	8008610 <HAL_GetTick>
 800d206:	4602      	mov	r2, r0
 800d208:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d212:	429a      	cmp	r2, r3
 800d214:	d903      	bls.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800d21c:	e005      	b.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d21e:	4b54      	ldr	r3, [pc, #336]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d0eb      	beq.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800d22a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d129      	bne.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d242:	d10e      	bne.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800d244:	4b4a      	ldr	r3, [pc, #296]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d254:	091a      	lsrs	r2, r3, #4
 800d256:	4b48      	ldr	r3, [pc, #288]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d258:	4013      	ands	r3, r2
 800d25a:	4a45      	ldr	r2, [pc, #276]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d25c:	430b      	orrs	r3, r1
 800d25e:	6113      	str	r3, [r2, #16]
 800d260:	e005      	b.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800d262:	4b43      	ldr	r3, [pc, #268]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	4a42      	ldr	r2, [pc, #264]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d268:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d26c:	6113      	str	r3, [r2, #16]
 800d26e:	4b40      	ldr	r3, [pc, #256]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d270:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d27a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d27e:	4a3c      	ldr	r2, [pc, #240]	; (800d370 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d280:	430b      	orrs	r3, r1
 800d282:	6713      	str	r3, [r2, #112]	; 0x70
 800d284:	e008      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d286:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d28a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800d28e:	e003      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d294:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	f002 0301 	and.w	r3, r2, #1
 800d2a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	f000 8090 	beq.w	800d3da <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c2:	2b28      	cmp	r3, #40	; 0x28
 800d2c4:	d870      	bhi.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d2c6:	a201      	add	r2, pc, #4	; (adr r2, 800d2cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2cc:	0800d3b1 	.word	0x0800d3b1
 800d2d0:	0800d3a9 	.word	0x0800d3a9
 800d2d4:	0800d3a9 	.word	0x0800d3a9
 800d2d8:	0800d3a9 	.word	0x0800d3a9
 800d2dc:	0800d3a9 	.word	0x0800d3a9
 800d2e0:	0800d3a9 	.word	0x0800d3a9
 800d2e4:	0800d3a9 	.word	0x0800d3a9
 800d2e8:	0800d3a9 	.word	0x0800d3a9
 800d2ec:	0800d37d 	.word	0x0800d37d
 800d2f0:	0800d3a9 	.word	0x0800d3a9
 800d2f4:	0800d3a9 	.word	0x0800d3a9
 800d2f8:	0800d3a9 	.word	0x0800d3a9
 800d2fc:	0800d3a9 	.word	0x0800d3a9
 800d300:	0800d3a9 	.word	0x0800d3a9
 800d304:	0800d3a9 	.word	0x0800d3a9
 800d308:	0800d3a9 	.word	0x0800d3a9
 800d30c:	0800d393 	.word	0x0800d393
 800d310:	0800d3a9 	.word	0x0800d3a9
 800d314:	0800d3a9 	.word	0x0800d3a9
 800d318:	0800d3a9 	.word	0x0800d3a9
 800d31c:	0800d3a9 	.word	0x0800d3a9
 800d320:	0800d3a9 	.word	0x0800d3a9
 800d324:	0800d3a9 	.word	0x0800d3a9
 800d328:	0800d3a9 	.word	0x0800d3a9
 800d32c:	0800d3b1 	.word	0x0800d3b1
 800d330:	0800d3a9 	.word	0x0800d3a9
 800d334:	0800d3a9 	.word	0x0800d3a9
 800d338:	0800d3a9 	.word	0x0800d3a9
 800d33c:	0800d3a9 	.word	0x0800d3a9
 800d340:	0800d3a9 	.word	0x0800d3a9
 800d344:	0800d3a9 	.word	0x0800d3a9
 800d348:	0800d3a9 	.word	0x0800d3a9
 800d34c:	0800d3b1 	.word	0x0800d3b1
 800d350:	0800d3a9 	.word	0x0800d3a9
 800d354:	0800d3a9 	.word	0x0800d3a9
 800d358:	0800d3a9 	.word	0x0800d3a9
 800d35c:	0800d3a9 	.word	0x0800d3a9
 800d360:	0800d3a9 	.word	0x0800d3a9
 800d364:	0800d3a9 	.word	0x0800d3a9
 800d368:	0800d3a9 	.word	0x0800d3a9
 800d36c:	0800d3b1 	.word	0x0800d3b1
 800d370:	58024400 	.word	0x58024400
 800d374:	58024800 	.word	0x58024800
 800d378:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d380:	3308      	adds	r3, #8
 800d382:	2101      	movs	r1, #1
 800d384:	4618      	mov	r0, r3
 800d386:	f000 ffc5 	bl	800e314 <RCCEx_PLL2_Config>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d390:	e00f      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d396:	3328      	adds	r3, #40	; 0x28
 800d398:	2101      	movs	r1, #1
 800d39a:	4618      	mov	r0, r3
 800d39c:	f001 f86c 	bl	800e478 <RCCEx_PLL3_Config>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d3a6:	e004      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d3ae:	e000      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10b      	bne.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d3ba:	4bc0      	ldr	r3, [pc, #768]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ca:	4abc      	ldr	r2, [pc, #752]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	6553      	str	r3, [r2, #84]	; 0x54
 800d3d0:	e003      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e2:	f002 0302 	and.w	r3, r2, #2
 800d3e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d3f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	d043      	beq.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d402:	2b05      	cmp	r3, #5
 800d404:	d824      	bhi.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800d406:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800d408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40c:	0800d459 	.word	0x0800d459
 800d410:	0800d425 	.word	0x0800d425
 800d414:	0800d43b 	.word	0x0800d43b
 800d418:	0800d459 	.word	0x0800d459
 800d41c:	0800d459 	.word	0x0800d459
 800d420:	0800d459 	.word	0x0800d459
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d428:	3308      	adds	r3, #8
 800d42a:	2101      	movs	r1, #1
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 ff71 	bl	800e314 <RCCEx_PLL2_Config>
 800d432:	4603      	mov	r3, r0
 800d434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d438:	e00f      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d43e:	3328      	adds	r3, #40	; 0x28
 800d440:	2101      	movs	r1, #1
 800d442:	4618      	mov	r0, r3
 800d444:	f001 f818 	bl	800e478 <RCCEx_PLL3_Config>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d44e:	e004      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d456:	e000      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800d458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d45a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d462:	4b96      	ldr	r3, [pc, #600]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d466:	f023 0107 	bic.w	r1, r3, #7
 800d46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d472:	4a92      	ldr	r2, [pc, #584]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d474:	430b      	orrs	r3, r1
 800d476:	6553      	str	r3, [r2, #84]	; 0x54
 800d478:	e003      	b.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d47a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d47e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	f002 0304 	and.w	r3, r2, #4
 800d48e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d492:	2300      	movs	r3, #0
 800d494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d498:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	d043      	beq.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d4aa:	2b05      	cmp	r3, #5
 800d4ac:	d824      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800d4ae:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d501 	.word	0x0800d501
 800d4b8:	0800d4cd 	.word	0x0800d4cd
 800d4bc:	0800d4e3 	.word	0x0800d4e3
 800d4c0:	0800d501 	.word	0x0800d501
 800d4c4:	0800d501 	.word	0x0800d501
 800d4c8:	0800d501 	.word	0x0800d501
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 ff1d 	bl	800e314 <RCCEx_PLL2_Config>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4e0:	e00f      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4e6:	3328      	adds	r3, #40	; 0x28
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 ffc4 	bl	800e478 <RCCEx_PLL3_Config>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4f6:	e004      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d4fe:	e000      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800d500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10b      	bne.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d50a:	4b6c      	ldr	r3, [pc, #432]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d50e:	f023 0107 	bic.w	r1, r3, #7
 800d512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d51a:	4a68      	ldr	r2, [pc, #416]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d51c:	430b      	orrs	r3, r1
 800d51e:	6593      	str	r3, [r2, #88]	; 0x58
 800d520:	e003      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d526:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f002 0320 	and.w	r3, r2, #32
 800d536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d53a:	2300      	movs	r3, #0
 800d53c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d544:	460b      	mov	r3, r1
 800d546:	4313      	orrs	r3, r2
 800d548:	d055      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d54e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d556:	d033      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d55c:	d82c      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d562:	d02f      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d568:	d826      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d56a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d56e:	d02b      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d574:	d820      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d57a:	d012      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800d57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d580:	d81a      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d022      	beq.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800d586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d58a:	d115      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d590:	3308      	adds	r3, #8
 800d592:	2100      	movs	r1, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f000 febd 	bl	800e314 <RCCEx_PLL2_Config>
 800d59a:	4603      	mov	r3, r0
 800d59c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5a0:	e015      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5a6:	3328      	adds	r3, #40	; 0x28
 800d5a8:	2102      	movs	r1, #2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 ff64 	bl	800e478 <RCCEx_PLL3_Config>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5b6:	e00a      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d5be:	e006      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e004      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d5c4:	bf00      	nop
 800d5c6:	e002      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d5c8:	bf00      	nop
 800d5ca:	e000      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10b      	bne.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d5d6:	4b39      	ldr	r3, [pc, #228]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5e6:	4a35      	ldr	r2, [pc, #212]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d5e8:	430b      	orrs	r3, r1
 800d5ea:	6553      	str	r3, [r2, #84]	; 0x54
 800d5ec:	e003      	b.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d606:	2300      	movs	r3, #0
 800d608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d60c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d610:	460b      	mov	r3, r1
 800d612:	4313      	orrs	r3, r2
 800d614:	d058      	beq.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d61a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d61e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d622:	d033      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d624:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d628:	d82c      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d62e:	d02f      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d634:	d826      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d63a:	d02b      	beq.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d63c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d640:	d820      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d646:	d012      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800d648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d64c:	d81a      	bhi.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d022      	beq.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800d652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d656:	d115      	bne.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d65c:	3308      	adds	r3, #8
 800d65e:	2100      	movs	r1, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fe57 	bl	800e314 <RCCEx_PLL2_Config>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d66c:	e015      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d672:	3328      	adds	r3, #40	; 0x28
 800d674:	2102      	movs	r1, #2
 800d676:	4618      	mov	r0, r3
 800d678:	f000 fefe 	bl	800e478 <RCCEx_PLL3_Config>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d682:	e00a      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d68a:	e006      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d68c:	bf00      	nop
 800d68e:	e004      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d690:	bf00      	nop
 800d692:	e002      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d69a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10e      	bne.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d6a2:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d6b2:	4a02      	ldr	r2, [pc, #8]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d6b4:	430b      	orrs	r3, r1
 800d6b6:	6593      	str	r3, [r2, #88]	; 0x58
 800d6b8:	e006      	b.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800d6ba:	bf00      	nop
 800d6bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d6c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d055      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d6f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6f4:	d033      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d6f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d6fa:	d82c      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d700:	d02f      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d706:	d826      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d70c:	d02b      	beq.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d70e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d712:	d820      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d718:	d012      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800d71a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d71e:	d81a      	bhi.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d720:	2b00      	cmp	r3, #0
 800d722:	d022      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800d724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d728:	d115      	bne.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d72e:	3308      	adds	r3, #8
 800d730:	2100      	movs	r1, #0
 800d732:	4618      	mov	r0, r3
 800d734:	f000 fdee 	bl	800e314 <RCCEx_PLL2_Config>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d73e:	e015      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d744:	3328      	adds	r3, #40	; 0x28
 800d746:	2102      	movs	r1, #2
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 fe95 	bl	800e478 <RCCEx_PLL3_Config>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d754:	e00a      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d75c:	e006      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d75e:	bf00      	nop
 800d760:	e004      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d762:	bf00      	nop
 800d764:	e002      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d766:	bf00      	nop
 800d768:	e000      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d76c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10b      	bne.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d774:	4ba1      	ldr	r3, [pc, #644]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d778:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d780:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d784:	4a9d      	ldr	r2, [pc, #628]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d786:	430b      	orrs	r3, r1
 800d788:	6593      	str	r3, [r2, #88]	; 0x58
 800d78a:	e003      	b.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d78c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d790:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f002 0308 	and.w	r3, r2, #8
 800d7a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d7aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	d01e      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7c0:	d10c      	bne.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7c6:	3328      	adds	r3, #40	; 0x28
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 fe54 	bl	800e478 <RCCEx_PLL3_Config>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d7dc:	4b87      	ldr	r3, [pc, #540]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ec:	4a83      	ldr	r2, [pc, #524]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d7ee:	430b      	orrs	r3, r1
 800d7f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f002 0310 	and.w	r3, r2, #16
 800d7fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d802:	2300      	movs	r3, #0
 800d804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d808:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d80c:	460b      	mov	r3, r1
 800d80e:	4313      	orrs	r3, r2
 800d810:	d01e      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d81e:	d10c      	bne.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d824:	3328      	adds	r3, #40	; 0x28
 800d826:	2102      	movs	r1, #2
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 fe25 	bl	800e478 <RCCEx_PLL3_Config>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d83a:	4b70      	ldr	r3, [pc, #448]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d83e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d84a:	4a6c      	ldr	r2, [pc, #432]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d84c:	430b      	orrs	r3, r1
 800d84e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d85c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d860:	2300      	movs	r3, #0
 800d862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d866:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d86a:	460b      	mov	r3, r1
 800d86c:	4313      	orrs	r3, r2
 800d86e:	d03e      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d87c:	d022      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800d87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d882:	d81b      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800d888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d88c:	d00b      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800d88e:	e015      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d894:	3308      	adds	r3, #8
 800d896:	2100      	movs	r1, #0
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 fd3b 	bl	800e314 <RCCEx_PLL2_Config>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8a4:	e00f      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8aa:	3328      	adds	r3, #40	; 0x28
 800d8ac:	2102      	movs	r1, #2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fde2 	bl	800e478 <RCCEx_PLL3_Config>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8ba:	e004      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d8c2:	e000      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800d8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8ce:	4b4b      	ldr	r3, [pc, #300]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8de:	4a47      	ldr	r2, [pc, #284]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d8e0:	430b      	orrs	r3, r1
 800d8e2:	6593      	str	r3, [r2, #88]	; 0x58
 800d8e4:	e003      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d8fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d900:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d904:	460b      	mov	r3, r1
 800d906:	4313      	orrs	r3, r2
 800d908:	d03b      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d90a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d916:	d01f      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800d918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d91c:	d818      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d922:	d003      	beq.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800d924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d928:	d007      	beq.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800d92a:	e011      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d92c:	4b33      	ldr	r3, [pc, #204]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d930:	4a32      	ldr	r2, [pc, #200]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d938:	e00f      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d93e:	3328      	adds	r3, #40	; 0x28
 800d940:	2101      	movs	r1, #1
 800d942:	4618      	mov	r0, r3
 800d944:	f000 fd98 	bl	800e478 <RCCEx_PLL3_Config>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800d94e:	e004      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d956:	e000      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800d958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d95a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10b      	bne.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d962:	4b26      	ldr	r3, [pc, #152]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d966:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d972:	4a22      	ldr	r2, [pc, #136]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d974:	430b      	orrs	r3, r1
 800d976:	6553      	str	r3, [r2, #84]	; 0x54
 800d978:	e003      	b.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d97a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d97e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d98e:	673b      	str	r3, [r7, #112]	; 0x70
 800d990:	2300      	movs	r3, #0
 800d992:	677b      	str	r3, [r7, #116]	; 0x74
 800d994:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d998:	460b      	mov	r3, r1
 800d99a:	4313      	orrs	r3, r2
 800d99c:	d034      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d003      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800d9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ac:	d007      	beq.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800d9ae:	e011      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9b0:	4b12      	ldr	r3, [pc, #72]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	4a11      	ldr	r2, [pc, #68]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9bc:	e00e      	b.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	2102      	movs	r1, #2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 fca4 	bl	800e314 <RCCEx_PLL2_Config>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9d2:	e003      	b.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d9da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10d      	bne.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f2:	4a02      	ldr	r2, [pc, #8]	; (800d9fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9f4:	430b      	orrs	r3, r1
 800d9f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d9f8:	e006      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800d9fa:	bf00      	nop
 800d9fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800da08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800da14:	66bb      	str	r3, [r7, #104]	; 0x68
 800da16:	2300      	movs	r3, #0
 800da18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800da1e:	460b      	mov	r3, r1
 800da20:	4313      	orrs	r3, r2
 800da22:	d00c      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da28:	3328      	adds	r3, #40	; 0x28
 800da2a:	2102      	movs	r1, #2
 800da2c:	4618      	mov	r0, r3
 800da2e:	f000 fd23 	bl	800e478 <RCCEx_PLL3_Config>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800da3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800da4a:	663b      	str	r3, [r7, #96]	; 0x60
 800da4c:	2300      	movs	r3, #0
 800da4e:	667b      	str	r3, [r7, #100]	; 0x64
 800da50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800da54:	460b      	mov	r3, r1
 800da56:	4313      	orrs	r3, r2
 800da58:	d038      	beq.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800da5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da66:	d018      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800da68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da6c:	d811      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800da6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da72:	d014      	beq.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800da74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da78:	d80b      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d011      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800da7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da82:	d106      	bne.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da84:	4bc3      	ldr	r3, [pc, #780]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da88:	4ac2      	ldr	r2, [pc, #776]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800da8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800da90:	e008      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800da98:	e004      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800da9a:	bf00      	nop
 800da9c:	e002      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800da9e:	bf00      	nop
 800daa0:	e000      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800daa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800daa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10b      	bne.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800daac:	4bb9      	ldr	r3, [pc, #740]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800daae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dabc:	4ab5      	ldr	r2, [pc, #724]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800dabe:	430b      	orrs	r3, r1
 800dac0:	6553      	str	r3, [r2, #84]	; 0x54
 800dac2:	e003      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dac8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dad8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dada:	2300      	movs	r3, #0
 800dadc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dade:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dae2:	460b      	mov	r3, r1
 800dae4:	4313      	orrs	r3, r2
 800dae6:	d009      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dae8:	4baa      	ldr	r3, [pc, #680]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800daea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf6:	4aa7      	ldr	r2, [pc, #668]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800daf8:	430b      	orrs	r3, r1
 800dafa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800db08:	653b      	str	r3, [r7, #80]	; 0x50
 800db0a:	2300      	movs	r3, #0
 800db0c:	657b      	str	r3, [r7, #84]	; 0x54
 800db0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800db12:	460b      	mov	r3, r1
 800db14:	4313      	orrs	r3, r2
 800db16:	d009      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db18:	4b9e      	ldr	r3, [pc, #632]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800db20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db26:	4a9b      	ldr	r2, [pc, #620]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db28:	430b      	orrs	r3, r1
 800db2a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800db2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800db38:	64bb      	str	r3, [r7, #72]	; 0x48
 800db3a:	2300      	movs	r3, #0
 800db3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800db42:	460b      	mov	r3, r1
 800db44:	4313      	orrs	r3, r2
 800db46:	d009      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800db48:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db4c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800db50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db56:	4a8f      	ldr	r2, [pc, #572]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db58:	430b      	orrs	r3, r1
 800db5a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800db5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800db68:	643b      	str	r3, [r7, #64]	; 0x40
 800db6a:	2300      	movs	r3, #0
 800db6c:	647b      	str	r3, [r7, #68]	; 0x44
 800db6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800db72:	460b      	mov	r3, r1
 800db74:	4313      	orrs	r3, r2
 800db76:	d00e      	beq.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800db78:	4b86      	ldr	r3, [pc, #536]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	4a85      	ldr	r2, [pc, #532]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db82:	6113      	str	r3, [r2, #16]
 800db84:	4b83      	ldr	r3, [pc, #524]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db86:	6919      	ldr	r1, [r3, #16]
 800db88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800db90:	4a80      	ldr	r2, [pc, #512]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800db92:	430b      	orrs	r3, r1
 800db94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800db96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800dba2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dba4:	2300      	movs	r3, #0
 800dba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dbac:	460b      	mov	r3, r1
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	d009      	beq.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dbb2:	4b78      	ldr	r3, [pc, #480]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800dbb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dbba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc0:	4a74      	ldr	r2, [pc, #464]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800dbc2:	430b      	orrs	r3, r1
 800dbc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dbd2:	633b      	str	r3, [r7, #48]	; 0x30
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800dbdc:	460b      	mov	r3, r1
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	d00a      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dbe2:	4b6c      	ldr	r3, [pc, #432]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800dbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800dbea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbf2:	4a68      	ldr	r2, [pc, #416]	; (800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800dbf4:	430b      	orrs	r3, r1
 800dbf6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dbf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	2100      	movs	r1, #0
 800dc02:	62b9      	str	r1, [r7, #40]	; 0x28
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4313      	orrs	r3, r2
 800dc12:	d011      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc18:	3308      	adds	r3, #8
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 fb79 	bl	800e314 <RCCEx_PLL2_Config>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dc28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	2100      	movs	r1, #0
 800dc42:	6239      	str	r1, [r7, #32]
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4313      	orrs	r3, r2
 800dc52:	d011      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc58:	3308      	adds	r3, #8
 800dc5a:	2101      	movs	r1, #1
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 fb59 	bl	800e314 <RCCEx_PLL2_Config>
 800dc62:	4603      	mov	r3, r0
 800dc64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dc68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	2100      	movs	r1, #0
 800dc82:	61b9      	str	r1, [r7, #24]
 800dc84:	f003 0304 	and.w	r3, r3, #4
 800dc88:	61fb      	str	r3, [r7, #28]
 800dc8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4313      	orrs	r3, r2
 800dc92:	d011      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc98:	3308      	adds	r3, #8
 800dc9a:	2102      	movs	r1, #2
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 fb39 	bl	800e314 <RCCEx_PLL2_Config>
 800dca2:	4603      	mov	r3, r0
 800dca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dcb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	6139      	str	r1, [r7, #16]
 800dcc4:	f003 0308 	and.w	r3, r3, #8
 800dcc8:	617b      	str	r3, [r7, #20]
 800dcca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	d011      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd8:	3328      	adds	r3, #40	; 0x28
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fbcb 	bl	800e478 <RCCEx_PLL3_Config>
 800dce2:	4603      	mov	r3, r0
 800dce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800dce8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dcf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	2100      	movs	r1, #0
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	f003 0310 	and.w	r3, r3, #16
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4313      	orrs	r3, r2
 800dd12:	d011      	beq.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd18:	3328      	adds	r3, #40	; 0x28
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 fbab 	bl	800e478 <RCCEx_PLL3_Config>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dd28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d003      	beq.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	2100      	movs	r1, #0
 800dd42:	6039      	str	r1, [r7, #0]
 800dd44:	f003 0320 	and.w	r3, r3, #32
 800dd48:	607b      	str	r3, [r7, #4]
 800dd4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4313      	orrs	r3, r2
 800dd52:	d011      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd58:	3328      	adds	r3, #40	; 0x28
 800dd5a:	2102      	movs	r1, #2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 fb8b 	bl	800e478 <RCCEx_PLL3_Config>
 800dd62:	4603      	mov	r3, r0
 800dd64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dd68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d003      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800dd78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	e000      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd92:	bf00      	nop
 800dd94:	58024400 	.word	0x58024400

0800dd98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800dd9c:	f7fe fda0 	bl	800c8e0 <HAL_RCC_GetHCLKFreq>
 800dda0:	4602      	mov	r2, r0
 800dda2:	4b06      	ldr	r3, [pc, #24]	; (800ddbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dda4:	6a1b      	ldr	r3, [r3, #32]
 800dda6:	091b      	lsrs	r3, r3, #4
 800dda8:	f003 0307 	and.w	r3, r3, #7
 800ddac:	4904      	ldr	r1, [pc, #16]	; (800ddc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ddae:	5ccb      	ldrb	r3, [r1, r3]
 800ddb0:	f003 031f 	and.w	r3, r3, #31
 800ddb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	58024400 	.word	0x58024400
 800ddc0:	08025044 	.word	0x08025044

0800ddc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b089      	sub	sp, #36	; 0x24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddcc:	4ba1      	ldr	r3, [pc, #644]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	f003 0303 	and.w	r3, r3, #3
 800ddd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ddd6:	4b9f      	ldr	r3, [pc, #636]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddda:	0b1b      	lsrs	r3, r3, #12
 800dddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dde0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800dde2:	4b9c      	ldr	r3, [pc, #624]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde6:	091b      	lsrs	r3, r3, #4
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ddee:	4b99      	ldr	r3, [pc, #612]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	08db      	lsrs	r3, r3, #3
 800ddf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	fb02 f303 	mul.w	r3, r2, r3
 800ddfe:	ee07 3a90 	vmov	s15, r3
 800de02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 8111 	beq.w	800e034 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	2b02      	cmp	r3, #2
 800de16:	f000 8083 	beq.w	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	f200 80a1 	bhi.w	800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d056      	beq.n	800dedc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800de2e:	e099      	b.n	800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de30:	4b88      	ldr	r3, [pc, #544]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d02d      	beq.n	800de98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de3c:	4b85      	ldr	r3, [pc, #532]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	08db      	lsrs	r3, r3, #3
 800de42:	f003 0303 	and.w	r3, r3, #3
 800de46:	4a84      	ldr	r2, [pc, #528]	; (800e058 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800de48:	fa22 f303 	lsr.w	r3, r2, r3
 800de4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	ee07 3a90 	vmov	s15, r3
 800de54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	ee07 3a90 	vmov	s15, r3
 800de5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de66:	4b7b      	ldr	r3, [pc, #492]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de76:	ed97 6a03 	vldr	s12, [r7, #12]
 800de7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800de96:	e087      	b.n	800dfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	ee07 3a90 	vmov	s15, r3
 800de9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dea2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e060 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800dea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deaa:	4b6a      	ldr	r3, [pc, #424]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb2:	ee07 3a90 	vmov	s15, r3
 800deb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deba:	ed97 6a03 	vldr	s12, [r7, #12]
 800debe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ded2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ded6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deda:	e065      	b.n	800dfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	ee07 3a90 	vmov	s15, r3
 800dee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dee6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800deea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deee:	4b59      	ldr	r3, [pc, #356]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800defe:	ed97 6a03 	vldr	s12, [r7, #12]
 800df02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df1e:	e043      	b.n	800dfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	ee07 3a90 	vmov	s15, r3
 800df26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800df2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df32:	4b48      	ldr	r3, [pc, #288]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3a:	ee07 3a90 	vmov	s15, r3
 800df3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df42:	ed97 6a03 	vldr	s12, [r7, #12]
 800df46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df62:	e021      	b.n	800dfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	ee07 3a90 	vmov	s15, r3
 800df6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800df72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df76:	4b37      	ldr	r3, [pc, #220]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df7e:	ee07 3a90 	vmov	s15, r3
 800df82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df86:	ed97 6a03 	vldr	s12, [r7, #12]
 800df8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800dfa8:	4b2a      	ldr	r3, [pc, #168]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfac:	0a5b      	lsrs	r3, r3, #9
 800dfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb2:	ee07 3a90 	vmov	s15, r3
 800dfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfce:	ee17 2a90 	vmov	r2, s15
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dfd6:	4b1f      	ldr	r3, [pc, #124]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	0c1b      	lsrs	r3, r3, #16
 800dfdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe0:	ee07 3a90 	vmov	s15, r3
 800dfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dff0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dffc:	ee17 2a90 	vmov	r2, s15
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e004:	4b13      	ldr	r3, [pc, #76]	; (800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e008:	0e1b      	lsrs	r3, r3, #24
 800e00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e02a:	ee17 2a90 	vmov	r2, s15
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e032:	e008      	b.n	800e046 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	609a      	str	r2, [r3, #8]
}
 800e046:	bf00      	nop
 800e048:	3724      	adds	r7, #36	; 0x24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	58024400 	.word	0x58024400
 800e058:	03d09000 	.word	0x03d09000
 800e05c:	46000000 	.word	0x46000000
 800e060:	4c742400 	.word	0x4c742400
 800e064:	4a742400 	.word	0x4a742400
 800e068:	4bb71b00 	.word	0x4bb71b00

0800e06c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b089      	sub	sp, #36	; 0x24
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e074:	4ba1      	ldr	r3, [pc, #644]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e078:	f003 0303 	and.w	r3, r3, #3
 800e07c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e07e:	4b9f      	ldr	r3, [pc, #636]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e082:	0d1b      	lsrs	r3, r3, #20
 800e084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e088:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e08a:	4b9c      	ldr	r3, [pc, #624]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08e:	0a1b      	lsrs	r3, r3, #8
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e096:	4b99      	ldr	r3, [pc, #612]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e09a:	08db      	lsrs	r3, r3, #3
 800e09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	fb02 f303 	mul.w	r3, r2, r3
 800e0a6:	ee07 3a90 	vmov	s15, r3
 800e0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f000 8111 	beq.w	800e2dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	f000 8083 	beq.w	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	f200 80a1 	bhi.w	800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d056      	beq.n	800e184 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e0d6:	e099      	b.n	800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0d8:	4b88      	ldr	r3, [pc, #544]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f003 0320 	and.w	r3, r3, #32
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d02d      	beq.n	800e140 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0e4:	4b85      	ldr	r3, [pc, #532]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	08db      	lsrs	r3, r3, #3
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	4a84      	ldr	r2, [pc, #528]	; (800e300 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e0f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	ee07 3a90 	vmov	s15, r3
 800e0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	ee07 3a90 	vmov	s15, r3
 800e106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e10e:	4b7b      	ldr	r3, [pc, #492]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	ee07 3a90 	vmov	s15, r3
 800e11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e122:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e13a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e13e:	e087      	b.n	800e250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	ee07 3a90 	vmov	s15, r3
 800e146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e14a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e308 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e152:	4b6a      	ldr	r3, [pc, #424]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e162:	ed97 6a03 	vldr	s12, [r7, #12]
 800e166:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e182:	e065      	b.n	800e250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	ee07 3a90 	vmov	s15, r3
 800e18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e18e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e196:	4b59      	ldr	r3, [pc, #356]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1c6:	e043      	b.n	800e250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	ee07 3a90 	vmov	s15, r3
 800e1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1da:	4b48      	ldr	r3, [pc, #288]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e2:	ee07 3a90 	vmov	s15, r3
 800e1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e20a:	e021      	b.n	800e250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	ee07 3a90 	vmov	s15, r3
 800e212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e216:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e21e:	4b37      	ldr	r3, [pc, #220]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e226:	ee07 3a90 	vmov	s15, r3
 800e22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e232:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e24e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e250:	4b2a      	ldr	r3, [pc, #168]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e254:	0a5b      	lsrs	r3, r3, #9
 800e256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e25a:	ee07 3a90 	vmov	s15, r3
 800e25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e26a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e276:	ee17 2a90 	vmov	r2, s15
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e27e:	4b1f      	ldr	r3, [pc, #124]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e282:	0c1b      	lsrs	r3, r3, #16
 800e284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e288:	ee07 3a90 	vmov	s15, r3
 800e28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e294:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e298:	edd7 6a07 	vldr	s13, [r7, #28]
 800e29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2a4:	ee17 2a90 	vmov	r2, s15
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e2ac:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b0:	0e1b      	lsrs	r3, r3, #24
 800e2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b6:	ee07 3a90 	vmov	s15, r3
 800e2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2d2:	ee17 2a90 	vmov	r2, s15
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e2da:	e008      	b.n	800e2ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	609a      	str	r2, [r3, #8]
}
 800e2ee:	bf00      	nop
 800e2f0:	3724      	adds	r7, #36	; 0x24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	58024400 	.word	0x58024400
 800e300:	03d09000 	.word	0x03d09000
 800e304:	46000000 	.word	0x46000000
 800e308:	4c742400 	.word	0x4c742400
 800e30c:	4a742400 	.word	0x4a742400
 800e310:	4bb71b00 	.word	0x4bb71b00

0800e314 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e322:	4b53      	ldr	r3, [pc, #332]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	f003 0303 	and.w	r3, r3, #3
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d101      	bne.n	800e332 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e099      	b.n	800e466 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e332:	4b4f      	ldr	r3, [pc, #316]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a4e      	ldr	r2, [pc, #312]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e338:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e33e:	f7fa f967 	bl	8008610 <HAL_GetTick>
 800e342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e344:	e008      	b.n	800e358 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e346:	f7fa f963 	bl	8008610 <HAL_GetTick>
 800e34a:	4602      	mov	r2, r0
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	2b02      	cmp	r3, #2
 800e352:	d901      	bls.n	800e358 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e086      	b.n	800e466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e358:	4b45      	ldr	r3, [pc, #276]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f0      	bne.n	800e346 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e364:	4b42      	ldr	r3, [pc, #264]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e368:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	031b      	lsls	r3, r3, #12
 800e372:	493f      	ldr	r1, [pc, #252]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e374:	4313      	orrs	r3, r2
 800e376:	628b      	str	r3, [r1, #40]	; 0x28
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	3b01      	subs	r3, #1
 800e388:	025b      	lsls	r3, r3, #9
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	431a      	orrs	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	3b01      	subs	r3, #1
 800e394:	041b      	lsls	r3, r3, #16
 800e396:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e39a:	431a      	orrs	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	061b      	lsls	r3, r3, #24
 800e3a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e3a8:	4931      	ldr	r1, [pc, #196]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e3ae:	4b30      	ldr	r3, [pc, #192]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	492d      	ldr	r1, [pc, #180]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e3c0:	4b2b      	ldr	r3, [pc, #172]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	f023 0220 	bic.w	r2, r3, #32
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	4928      	ldr	r1, [pc, #160]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e3d2:	4b27      	ldr	r3, [pc, #156]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d6:	4a26      	ldr	r2, [pc, #152]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3d8:	f023 0310 	bic.w	r3, r3, #16
 800e3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e3de:	4b24      	ldr	r3, [pc, #144]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3e2:	4b24      	ldr	r3, [pc, #144]	; (800e474 <RCCEx_PLL2_Config+0x160>)
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	69d2      	ldr	r2, [r2, #28]
 800e3ea:	00d2      	lsls	r2, r2, #3
 800e3ec:	4920      	ldr	r1, [pc, #128]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e3f2:	4b1f      	ldr	r3, [pc, #124]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f6:	4a1e      	ldr	r2, [pc, #120]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e3f8:	f043 0310 	orr.w	r3, r3, #16
 800e3fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d106      	bne.n	800e412 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e404:	4b1a      	ldr	r3, [pc, #104]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e408:	4a19      	ldr	r2, [pc, #100]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e40a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e40e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e410:	e00f      	b.n	800e432 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d106      	bne.n	800e426 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e418:	4b15      	ldr	r3, [pc, #84]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41c:	4a14      	ldr	r2, [pc, #80]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e41e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e422:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e424:	e005      	b.n	800e432 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e426:	4b12      	ldr	r3, [pc, #72]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42a:	4a11      	ldr	r2, [pc, #68]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e42c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e430:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e432:	4b0f      	ldr	r3, [pc, #60]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a0e      	ldr	r2, [pc, #56]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e43e:	f7fa f8e7 	bl	8008610 <HAL_GetTick>
 800e442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e444:	e008      	b.n	800e458 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e446:	f7fa f8e3 	bl	8008610 <HAL_GetTick>
 800e44a:	4602      	mov	r2, r0
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	2b02      	cmp	r3, #2
 800e452:	d901      	bls.n	800e458 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e454:	2303      	movs	r3, #3
 800e456:	e006      	b.n	800e466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e458:	4b05      	ldr	r3, [pc, #20]	; (800e470 <RCCEx_PLL2_Config+0x15c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0f0      	beq.n	800e446 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	58024400 	.word	0x58024400
 800e474:	ffff0007 	.word	0xffff0007

0800e478 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e486:	4b53      	ldr	r3, [pc, #332]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48a:	f003 0303 	and.w	r3, r3, #3
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d101      	bne.n	800e496 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	e099      	b.n	800e5ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e496:	4b4f      	ldr	r3, [pc, #316]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a4e      	ldr	r2, [pc, #312]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e49c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4a2:	f7fa f8b5 	bl	8008610 <HAL_GetTick>
 800e4a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e4a8:	e008      	b.n	800e4bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e4aa:	f7fa f8b1 	bl	8008610 <HAL_GetTick>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d901      	bls.n	800e4bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e4b8:	2303      	movs	r3, #3
 800e4ba:	e086      	b.n	800e5ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e4bc:	4b45      	ldr	r3, [pc, #276]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1f0      	bne.n	800e4aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e4c8:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	051b      	lsls	r3, r3, #20
 800e4d6:	493f      	ldr	r1, [pc, #252]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	628b      	str	r3, [r1, #40]	; 0x28
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	025b      	lsls	r3, r3, #9
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	431a      	orrs	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	041b      	lsls	r3, r3, #16
 800e4fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e4fe:	431a      	orrs	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	3b01      	subs	r3, #1
 800e506:	061b      	lsls	r3, r3, #24
 800e508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e50c:	4931      	ldr	r1, [pc, #196]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e50e:	4313      	orrs	r3, r2
 800e510:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e512:	4b30      	ldr	r3, [pc, #192]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	492d      	ldr	r1, [pc, #180]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e520:	4313      	orrs	r3, r2
 800e522:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e524:	4b2b      	ldr	r3, [pc, #172]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	4928      	ldr	r1, [pc, #160]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e532:	4313      	orrs	r3, r2
 800e534:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e536:	4b27      	ldr	r3, [pc, #156]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53a:	4a26      	ldr	r2, [pc, #152]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e542:	4b24      	ldr	r3, [pc, #144]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e546:	4b24      	ldr	r3, [pc, #144]	; (800e5d8 <RCCEx_PLL3_Config+0x160>)
 800e548:	4013      	ands	r3, r2
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	69d2      	ldr	r2, [r2, #28]
 800e54e:	00d2      	lsls	r2, r2, #3
 800e550:	4920      	ldr	r1, [pc, #128]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e552:	4313      	orrs	r3, r2
 800e554:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e556:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55a:	4a1e      	ldr	r2, [pc, #120]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e55c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d106      	bne.n	800e576 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e568:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	4a19      	ldr	r2, [pc, #100]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e56e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e572:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e574:	e00f      	b.n	800e596 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d106      	bne.n	800e58a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e57c:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e580:	4a14      	ldr	r2, [pc, #80]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e586:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e588:	e005      	b.n	800e596 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e58a:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58e:	4a11      	ldr	r2, [pc, #68]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e594:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e596:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a0e      	ldr	r2, [pc, #56]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e59c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5a2:	f7fa f835 	bl	8008610 <HAL_GetTick>
 800e5a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e5a8:	e008      	b.n	800e5bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e5aa:	f7fa f831 	bl	8008610 <HAL_GetTick>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d901      	bls.n	800e5bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	e006      	b.n	800e5ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e5bc:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <RCCEx_PLL3_Config+0x15c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d0f0      	beq.n	800e5aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	58024400 	.word	0x58024400
 800e5d8:	ffff0007 	.word	0xffff0007

0800e5dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d101      	bne.n	800e5ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e049      	b.n	800e682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d106      	bne.n	800e608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f841 	bl	800e68a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2202      	movs	r2, #2
 800e60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3304      	adds	r3, #4
 800e618:	4619      	mov	r1, r3
 800e61a:	4610      	mov	r0, r2
 800e61c:	f000 fa00 	bl	800ea20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2201      	movs	r2, #1
 800e664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e680:	2300      	movs	r3, #0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e68a:	b480      	push	{r7}
 800e68c:	b083      	sub	sp, #12
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e692:	bf00      	nop
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
	...

0800e6a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d001      	beq.n	800e6b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e054      	b.n	800e762 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	68da      	ldr	r2, [r3, #12]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f042 0201 	orr.w	r2, r2, #1
 800e6ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a26      	ldr	r2, [pc, #152]	; (800e770 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d022      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e2:	d01d      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a22      	ldr	r2, [pc, #136]	; (800e774 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d018      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a21      	ldr	r2, [pc, #132]	; (800e778 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d013      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a1f      	ldr	r2, [pc, #124]	; (800e77c <HAL_TIM_Base_Start_IT+0xdc>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d00e      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a1e      	ldr	r2, [pc, #120]	; (800e780 <HAL_TIM_Base_Start_IT+0xe0>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d009      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a1c      	ldr	r2, [pc, #112]	; (800e784 <HAL_TIM_Base_Start_IT+0xe4>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d004      	beq.n	800e720 <HAL_TIM_Base_Start_IT+0x80>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a1b      	ldr	r2, [pc, #108]	; (800e788 <HAL_TIM_Base_Start_IT+0xe8>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d115      	bne.n	800e74c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	689a      	ldr	r2, [r3, #8]
 800e726:	4b19      	ldr	r3, [pc, #100]	; (800e78c <HAL_TIM_Base_Start_IT+0xec>)
 800e728:	4013      	ands	r3, r2
 800e72a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b06      	cmp	r3, #6
 800e730:	d015      	beq.n	800e75e <HAL_TIM_Base_Start_IT+0xbe>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e738:	d011      	beq.n	800e75e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f042 0201 	orr.w	r2, r2, #1
 800e748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e74a:	e008      	b.n	800e75e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0201 	orr.w	r2, r2, #1
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	e000      	b.n	800e760 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e75e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	40010000 	.word	0x40010000
 800e774:	40000400 	.word	0x40000400
 800e778:	40000800 	.word	0x40000800
 800e77c:	40000c00 	.word	0x40000c00
 800e780:	40010400 	.word	0x40010400
 800e784:	40001800 	.word	0x40001800
 800e788:	40014000 	.word	0x40014000
 800e78c:	00010007 	.word	0x00010007

0800e790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	f003 0302 	and.w	r3, r3, #2
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d122      	bne.n	800e7ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d11b      	bne.n	800e7ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f06f 0202 	mvn.w	r2, #2
 800e7bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	f003 0303 	and.w	r3, r3, #3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f905 	bl	800e9e2 <HAL_TIM_IC_CaptureCallback>
 800e7d8:	e005      	b.n	800e7e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f8f7 	bl	800e9ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f908 	bl	800e9f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	2b04      	cmp	r3, #4
 800e7f8:	d122      	bne.n	800e840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f003 0304 	and.w	r3, r3, #4
 800e804:	2b04      	cmp	r3, #4
 800e806:	d11b      	bne.n	800e840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f06f 0204 	mvn.w	r2, #4
 800e810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2202      	movs	r2, #2
 800e816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e822:	2b00      	cmp	r3, #0
 800e824:	d003      	beq.n	800e82e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f8db 	bl	800e9e2 <HAL_TIM_IC_CaptureCallback>
 800e82c:	e005      	b.n	800e83a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f8cd 	bl	800e9ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f8de 	bl	800e9f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	f003 0308 	and.w	r3, r3, #8
 800e84a:	2b08      	cmp	r3, #8
 800e84c:	d122      	bne.n	800e894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	f003 0308 	and.w	r3, r3, #8
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d11b      	bne.n	800e894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f06f 0208 	mvn.w	r2, #8
 800e864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2204      	movs	r2, #4
 800e86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f8b1 	bl	800e9e2 <HAL_TIM_IC_CaptureCallback>
 800e880:	e005      	b.n	800e88e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f8a3 	bl	800e9ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f8b4 	bl	800e9f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	f003 0310 	and.w	r3, r3, #16
 800e89e:	2b10      	cmp	r3, #16
 800e8a0:	d122      	bne.n	800e8e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	f003 0310 	and.w	r3, r3, #16
 800e8ac:	2b10      	cmp	r3, #16
 800e8ae:	d11b      	bne.n	800e8e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f06f 0210 	mvn.w	r2, #16
 800e8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2208      	movs	r2, #8
 800e8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d003      	beq.n	800e8d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 f887 	bl	800e9e2 <HAL_TIM_IC_CaptureCallback>
 800e8d4:	e005      	b.n	800e8e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f879 	bl	800e9ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f88a 	bl	800e9f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d10e      	bne.n	800e914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	2b01      	cmp	r3, #1
 800e902:	d107      	bne.n	800e914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f06f 0201 	mvn.w	r2, #1
 800e90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7f2 fb7c 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e91e:	2b80      	cmp	r3, #128	; 0x80
 800e920:	d10e      	bne.n	800e940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e92c:	2b80      	cmp	r3, #128	; 0x80
 800e92e:	d107      	bne.n	800e940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f914 	bl	800eb68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e94e:	d10e      	bne.n	800e96e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e95a:	2b80      	cmp	r3, #128	; 0x80
 800e95c:	d107      	bne.n	800e96e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 f907 	bl	800eb7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e978:	2b40      	cmp	r3, #64	; 0x40
 800e97a:	d10e      	bne.n	800e99a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e986:	2b40      	cmp	r3, #64	; 0x40
 800e988:	d107      	bne.n	800e99a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f838 	bl	800ea0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	f003 0320 	and.w	r3, r3, #32
 800e9a4:	2b20      	cmp	r3, #32
 800e9a6:	d10e      	bne.n	800e9c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	f003 0320 	and.w	r3, r3, #32
 800e9b2:	2b20      	cmp	r3, #32
 800e9b4:	d107      	bne.n	800e9c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f06f 0220 	mvn.w	r2, #32
 800e9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f8c7 	bl	800eb54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9d6:	bf00      	nop
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9e2:	b480      	push	{r7}
 800e9e4:	b083      	sub	sp, #12
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e9ea:	bf00      	nop
 800e9ec:	370c      	adds	r7, #12
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9fe:	bf00      	nop
 800ea00:	370c      	adds	r7, #12
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
	...

0800ea20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a40      	ldr	r2, [pc, #256]	; (800eb34 <TIM_Base_SetConfig+0x114>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d013      	beq.n	800ea60 <TIM_Base_SetConfig+0x40>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea3e:	d00f      	beq.n	800ea60 <TIM_Base_SetConfig+0x40>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	4a3d      	ldr	r2, [pc, #244]	; (800eb38 <TIM_Base_SetConfig+0x118>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d00b      	beq.n	800ea60 <TIM_Base_SetConfig+0x40>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4a3c      	ldr	r2, [pc, #240]	; (800eb3c <TIM_Base_SetConfig+0x11c>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d007      	beq.n	800ea60 <TIM_Base_SetConfig+0x40>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a3b      	ldr	r2, [pc, #236]	; (800eb40 <TIM_Base_SetConfig+0x120>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d003      	beq.n	800ea60 <TIM_Base_SetConfig+0x40>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a3a      	ldr	r2, [pc, #232]	; (800eb44 <TIM_Base_SetConfig+0x124>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d108      	bne.n	800ea72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a2f      	ldr	r2, [pc, #188]	; (800eb34 <TIM_Base_SetConfig+0x114>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d01f      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea80:	d01b      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4a2c      	ldr	r2, [pc, #176]	; (800eb38 <TIM_Base_SetConfig+0x118>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d017      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4a2b      	ldr	r2, [pc, #172]	; (800eb3c <TIM_Base_SetConfig+0x11c>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d013      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4a2a      	ldr	r2, [pc, #168]	; (800eb40 <TIM_Base_SetConfig+0x120>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d00f      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4a29      	ldr	r2, [pc, #164]	; (800eb44 <TIM_Base_SetConfig+0x124>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d00b      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4a28      	ldr	r2, [pc, #160]	; (800eb48 <TIM_Base_SetConfig+0x128>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d007      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4a27      	ldr	r2, [pc, #156]	; (800eb4c <TIM_Base_SetConfig+0x12c>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d003      	beq.n	800eaba <TIM_Base_SetConfig+0x9a>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4a26      	ldr	r2, [pc, #152]	; (800eb50 <TIM_Base_SetConfig+0x130>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d108      	bne.n	800eacc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	689a      	ldr	r2, [r3, #8]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a10      	ldr	r2, [pc, #64]	; (800eb34 <TIM_Base_SetConfig+0x114>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d00f      	beq.n	800eb18 <TIM_Base_SetConfig+0xf8>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4a12      	ldr	r2, [pc, #72]	; (800eb44 <TIM_Base_SetConfig+0x124>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d00b      	beq.n	800eb18 <TIM_Base_SetConfig+0xf8>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a11      	ldr	r2, [pc, #68]	; (800eb48 <TIM_Base_SetConfig+0x128>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d007      	beq.n	800eb18 <TIM_Base_SetConfig+0xf8>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a10      	ldr	r2, [pc, #64]	; (800eb4c <TIM_Base_SetConfig+0x12c>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d003      	beq.n	800eb18 <TIM_Base_SetConfig+0xf8>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a0f      	ldr	r2, [pc, #60]	; (800eb50 <TIM_Base_SetConfig+0x130>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d103      	bne.n	800eb20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	691a      	ldr	r2, [r3, #16]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	615a      	str	r2, [r3, #20]
}
 800eb26:	bf00      	nop
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	40010000 	.word	0x40010000
 800eb38:	40000400 	.word	0x40000400
 800eb3c:	40000800 	.word	0x40000800
 800eb40:	40000c00 	.word	0x40000c00
 800eb44:	40010400 	.word	0x40010400
 800eb48:	40014000 	.word	0x40014000
 800eb4c:	40014400 	.word	0x40014400
 800eb50:	40014800 	.word	0x40014800

0800eb54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb5c:	bf00      	nop
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e042      	b.n	800ec28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d106      	bne.n	800ebba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7f2 fc9b 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2224      	movs	r2, #36	; 0x24
 800ebbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f022 0201 	bic.w	r2, r2, #1
 800ebd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f8ba 	bl	800ed4c <UART_SetConfig>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d101      	bne.n	800ebe2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e022      	b.n	800ec28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d002      	beq.n	800ebf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 ff1a 	bl	800fa24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ebfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689a      	ldr	r2, [r3, #8]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f042 0201 	orr.w	r2, r2, #1
 800ec1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 ffa1 	bl	800fb68 <UART_CheckIdleState>
 800ec26:	4603      	mov	r3, r0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	d17b      	bne.n	800ed42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <HAL_UART_Transmit+0x26>
 800ec50:	88fb      	ldrh	r3, [r7, #6]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d101      	bne.n	800ec5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e074      	b.n	800ed44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2221      	movs	r2, #33	; 0x21
 800ec66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec6a:	f7f9 fcd1 	bl	8008610 <HAL_GetTick>
 800ec6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	88fa      	ldrh	r2, [r7, #6]
 800ec74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	88fa      	ldrh	r2, [r7, #6]
 800ec7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec88:	d108      	bne.n	800ec9c <HAL_UART_Transmit+0x6c>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d104      	bne.n	800ec9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	61bb      	str	r3, [r7, #24]
 800ec9a:	e003      	b.n	800eca4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eca4:	e030      	b.n	800ed08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2200      	movs	r2, #0
 800ecae:	2180      	movs	r1, #128	; 0x80
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f001 f803 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2220      	movs	r2, #32
 800ecc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e03d      	b.n	800ed44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10b      	bne.n	800ece6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	881b      	ldrh	r3, [r3, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	3302      	adds	r3, #2
 800ece2:	61bb      	str	r3, [r7, #24]
 800ece4:	e007      	b.n	800ecf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	781a      	ldrb	r2, [r3, #0]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1c8      	bne.n	800eca6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	2140      	movs	r1, #64	; 0x40
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f000 ffcc 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d005      	beq.n	800ed36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e006      	b.n	800ed44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e000      	b.n	800ed44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ed42:	2302      	movs	r3, #2
  }
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3720      	adds	r7, #32
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed50:	b092      	sub	sp, #72	; 0x48
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed56:	2300      	movs	r3, #0
 800ed58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	689a      	ldr	r2, [r3, #8]
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	431a      	orrs	r2, r3
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	431a      	orrs	r2, r3
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	69db      	ldr	r3, [r3, #28]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	4bbe      	ldr	r3, [pc, #760]	; (800f074 <UART_SetConfig+0x328>)
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	6812      	ldr	r2, [r2, #0]
 800ed82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed84:	430b      	orrs	r3, r1
 800ed86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	68da      	ldr	r2, [r3, #12]
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	430a      	orrs	r2, r1
 800ed9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	699b      	ldr	r3, [r3, #24]
 800eda2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4ab3      	ldr	r2, [pc, #716]	; (800f078 <UART_SetConfig+0x32c>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d004      	beq.n	800edb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edb4:	4313      	orrs	r3, r2
 800edb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689a      	ldr	r2, [r3, #8]
 800edbe:	4baf      	ldr	r3, [pc, #700]	; (800f07c <UART_SetConfig+0x330>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	6812      	ldr	r2, [r2, #0]
 800edc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edc8:	430b      	orrs	r3, r1
 800edca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd2:	f023 010f 	bic.w	r1, r3, #15
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	430a      	orrs	r2, r1
 800ede0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4aa6      	ldr	r2, [pc, #664]	; (800f080 <UART_SetConfig+0x334>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d177      	bne.n	800eedc <UART_SetConfig+0x190>
 800edec:	4ba5      	ldr	r3, [pc, #660]	; (800f084 <UART_SetConfig+0x338>)
 800edee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800edf4:	2b28      	cmp	r3, #40	; 0x28
 800edf6:	d86d      	bhi.n	800eed4 <UART_SetConfig+0x188>
 800edf8:	a201      	add	r2, pc, #4	; (adr r2, 800ee00 <UART_SetConfig+0xb4>)
 800edfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfe:	bf00      	nop
 800ee00:	0800eea5 	.word	0x0800eea5
 800ee04:	0800eed5 	.word	0x0800eed5
 800ee08:	0800eed5 	.word	0x0800eed5
 800ee0c:	0800eed5 	.word	0x0800eed5
 800ee10:	0800eed5 	.word	0x0800eed5
 800ee14:	0800eed5 	.word	0x0800eed5
 800ee18:	0800eed5 	.word	0x0800eed5
 800ee1c:	0800eed5 	.word	0x0800eed5
 800ee20:	0800eead 	.word	0x0800eead
 800ee24:	0800eed5 	.word	0x0800eed5
 800ee28:	0800eed5 	.word	0x0800eed5
 800ee2c:	0800eed5 	.word	0x0800eed5
 800ee30:	0800eed5 	.word	0x0800eed5
 800ee34:	0800eed5 	.word	0x0800eed5
 800ee38:	0800eed5 	.word	0x0800eed5
 800ee3c:	0800eed5 	.word	0x0800eed5
 800ee40:	0800eeb5 	.word	0x0800eeb5
 800ee44:	0800eed5 	.word	0x0800eed5
 800ee48:	0800eed5 	.word	0x0800eed5
 800ee4c:	0800eed5 	.word	0x0800eed5
 800ee50:	0800eed5 	.word	0x0800eed5
 800ee54:	0800eed5 	.word	0x0800eed5
 800ee58:	0800eed5 	.word	0x0800eed5
 800ee5c:	0800eed5 	.word	0x0800eed5
 800ee60:	0800eebd 	.word	0x0800eebd
 800ee64:	0800eed5 	.word	0x0800eed5
 800ee68:	0800eed5 	.word	0x0800eed5
 800ee6c:	0800eed5 	.word	0x0800eed5
 800ee70:	0800eed5 	.word	0x0800eed5
 800ee74:	0800eed5 	.word	0x0800eed5
 800ee78:	0800eed5 	.word	0x0800eed5
 800ee7c:	0800eed5 	.word	0x0800eed5
 800ee80:	0800eec5 	.word	0x0800eec5
 800ee84:	0800eed5 	.word	0x0800eed5
 800ee88:	0800eed5 	.word	0x0800eed5
 800ee8c:	0800eed5 	.word	0x0800eed5
 800ee90:	0800eed5 	.word	0x0800eed5
 800ee94:	0800eed5 	.word	0x0800eed5
 800ee98:	0800eed5 	.word	0x0800eed5
 800ee9c:	0800eed5 	.word	0x0800eed5
 800eea0:	0800eecd 	.word	0x0800eecd
 800eea4:	2301      	movs	r3, #1
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e326      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eeac:	2304      	movs	r3, #4
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e322      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eeb4:	2308      	movs	r3, #8
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e31e      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eebc:	2310      	movs	r3, #16
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec2:	e31a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eec4:	2320      	movs	r3, #32
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeca:	e316      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eecc:	2340      	movs	r3, #64	; 0x40
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed2:	e312      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eed4:	2380      	movs	r3, #128	; 0x80
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeda:	e30e      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a69      	ldr	r2, [pc, #420]	; (800f088 <UART_SetConfig+0x33c>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d130      	bne.n	800ef48 <UART_SetConfig+0x1fc>
 800eee6:	4b67      	ldr	r3, [pc, #412]	; (800f084 <UART_SetConfig+0x338>)
 800eee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeea:	f003 0307 	and.w	r3, r3, #7
 800eeee:	2b05      	cmp	r3, #5
 800eef0:	d826      	bhi.n	800ef40 <UART_SetConfig+0x1f4>
 800eef2:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <UART_SetConfig+0x1ac>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef11 	.word	0x0800ef11
 800eefc:	0800ef19 	.word	0x0800ef19
 800ef00:	0800ef21 	.word	0x0800ef21
 800ef04:	0800ef29 	.word	0x0800ef29
 800ef08:	0800ef31 	.word	0x0800ef31
 800ef0c:	0800ef39 	.word	0x0800ef39
 800ef10:	2300      	movs	r3, #0
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e2f0      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef18:	2304      	movs	r3, #4
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e2ec      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef20:	2308      	movs	r3, #8
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e2e8      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef28:	2310      	movs	r3, #16
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e2e4      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef30:	2320      	movs	r3, #32
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef36:	e2e0      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef38:	2340      	movs	r3, #64	; 0x40
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3e:	e2dc      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef40:	2380      	movs	r3, #128	; 0x80
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef46:	e2d8      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a4f      	ldr	r2, [pc, #316]	; (800f08c <UART_SetConfig+0x340>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d130      	bne.n	800efb4 <UART_SetConfig+0x268>
 800ef52:	4b4c      	ldr	r3, [pc, #304]	; (800f084 <UART_SetConfig+0x338>)
 800ef54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef56:	f003 0307 	and.w	r3, r3, #7
 800ef5a:	2b05      	cmp	r3, #5
 800ef5c:	d826      	bhi.n	800efac <UART_SetConfig+0x260>
 800ef5e:	a201      	add	r2, pc, #4	; (adr r2, 800ef64 <UART_SetConfig+0x218>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800ef7d 	.word	0x0800ef7d
 800ef68:	0800ef85 	.word	0x0800ef85
 800ef6c:	0800ef8d 	.word	0x0800ef8d
 800ef70:	0800ef95 	.word	0x0800ef95
 800ef74:	0800ef9d 	.word	0x0800ef9d
 800ef78:	0800efa5 	.word	0x0800efa5
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e2ba      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef84:	2304      	movs	r3, #4
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e2b6      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef8c:	2308      	movs	r3, #8
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef92:	e2b2      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef94:	2310      	movs	r3, #16
 800ef96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9a:	e2ae      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800ef9c:	2320      	movs	r3, #32
 800ef9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa2:	e2aa      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800efa4:	2340      	movs	r3, #64	; 0x40
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efaa:	e2a6      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800efac:	2380      	movs	r3, #128	; 0x80
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb2:	e2a2      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a35      	ldr	r2, [pc, #212]	; (800f090 <UART_SetConfig+0x344>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d130      	bne.n	800f020 <UART_SetConfig+0x2d4>
 800efbe:	4b31      	ldr	r3, [pc, #196]	; (800f084 <UART_SetConfig+0x338>)
 800efc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efc2:	f003 0307 	and.w	r3, r3, #7
 800efc6:	2b05      	cmp	r3, #5
 800efc8:	d826      	bhi.n	800f018 <UART_SetConfig+0x2cc>
 800efca:	a201      	add	r2, pc, #4	; (adr r2, 800efd0 <UART_SetConfig+0x284>)
 800efcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd0:	0800efe9 	.word	0x0800efe9
 800efd4:	0800eff1 	.word	0x0800eff1
 800efd8:	0800eff9 	.word	0x0800eff9
 800efdc:	0800f001 	.word	0x0800f001
 800efe0:	0800f009 	.word	0x0800f009
 800efe4:	0800f011 	.word	0x0800f011
 800efe8:	2300      	movs	r3, #0
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e284      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eff0:	2304      	movs	r3, #4
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e280      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800eff8:	2308      	movs	r3, #8
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e27c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f000:	2310      	movs	r3, #16
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e278      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f008:	2320      	movs	r3, #32
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e274      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e270      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f018:	2380      	movs	r3, #128	; 0x80
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e26c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a1b      	ldr	r2, [pc, #108]	; (800f094 <UART_SetConfig+0x348>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d142      	bne.n	800f0b0 <UART_SetConfig+0x364>
 800f02a:	4b16      	ldr	r3, [pc, #88]	; (800f084 <UART_SetConfig+0x338>)
 800f02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f02e:	f003 0307 	and.w	r3, r3, #7
 800f032:	2b05      	cmp	r3, #5
 800f034:	d838      	bhi.n	800f0a8 <UART_SetConfig+0x35c>
 800f036:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <UART_SetConfig+0x2f0>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f055 	.word	0x0800f055
 800f040:	0800f05d 	.word	0x0800f05d
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f06d 	.word	0x0800f06d
 800f04c:	0800f099 	.word	0x0800f099
 800f050:	0800f0a1 	.word	0x0800f0a1
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e24e      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f05c:	2304      	movs	r3, #4
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e24a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f064:	2308      	movs	r3, #8
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e246      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f06c:	2310      	movs	r3, #16
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e242      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f074:	cfff69f3 	.word	0xcfff69f3
 800f078:	58000c00 	.word	0x58000c00
 800f07c:	11fff4ff 	.word	0x11fff4ff
 800f080:	40011000 	.word	0x40011000
 800f084:	58024400 	.word	0x58024400
 800f088:	40004400 	.word	0x40004400
 800f08c:	40004800 	.word	0x40004800
 800f090:	40004c00 	.word	0x40004c00
 800f094:	40005000 	.word	0x40005000
 800f098:	2320      	movs	r3, #32
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e22c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f0a0:	2340      	movs	r3, #64	; 0x40
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e228      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f0a8:	2380      	movs	r3, #128	; 0x80
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ae:	e224      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4ab1      	ldr	r2, [pc, #708]	; (800f37c <UART_SetConfig+0x630>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d176      	bne.n	800f1a8 <UART_SetConfig+0x45c>
 800f0ba:	4bb1      	ldr	r3, [pc, #708]	; (800f380 <UART_SetConfig+0x634>)
 800f0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0c2:	2b28      	cmp	r3, #40	; 0x28
 800f0c4:	d86c      	bhi.n	800f1a0 <UART_SetConfig+0x454>
 800f0c6:	a201      	add	r2, pc, #4	; (adr r2, 800f0cc <UART_SetConfig+0x380>)
 800f0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0cc:	0800f171 	.word	0x0800f171
 800f0d0:	0800f1a1 	.word	0x0800f1a1
 800f0d4:	0800f1a1 	.word	0x0800f1a1
 800f0d8:	0800f1a1 	.word	0x0800f1a1
 800f0dc:	0800f1a1 	.word	0x0800f1a1
 800f0e0:	0800f1a1 	.word	0x0800f1a1
 800f0e4:	0800f1a1 	.word	0x0800f1a1
 800f0e8:	0800f1a1 	.word	0x0800f1a1
 800f0ec:	0800f179 	.word	0x0800f179
 800f0f0:	0800f1a1 	.word	0x0800f1a1
 800f0f4:	0800f1a1 	.word	0x0800f1a1
 800f0f8:	0800f1a1 	.word	0x0800f1a1
 800f0fc:	0800f1a1 	.word	0x0800f1a1
 800f100:	0800f1a1 	.word	0x0800f1a1
 800f104:	0800f1a1 	.word	0x0800f1a1
 800f108:	0800f1a1 	.word	0x0800f1a1
 800f10c:	0800f181 	.word	0x0800f181
 800f110:	0800f1a1 	.word	0x0800f1a1
 800f114:	0800f1a1 	.word	0x0800f1a1
 800f118:	0800f1a1 	.word	0x0800f1a1
 800f11c:	0800f1a1 	.word	0x0800f1a1
 800f120:	0800f1a1 	.word	0x0800f1a1
 800f124:	0800f1a1 	.word	0x0800f1a1
 800f128:	0800f1a1 	.word	0x0800f1a1
 800f12c:	0800f189 	.word	0x0800f189
 800f130:	0800f1a1 	.word	0x0800f1a1
 800f134:	0800f1a1 	.word	0x0800f1a1
 800f138:	0800f1a1 	.word	0x0800f1a1
 800f13c:	0800f1a1 	.word	0x0800f1a1
 800f140:	0800f1a1 	.word	0x0800f1a1
 800f144:	0800f1a1 	.word	0x0800f1a1
 800f148:	0800f1a1 	.word	0x0800f1a1
 800f14c:	0800f191 	.word	0x0800f191
 800f150:	0800f1a1 	.word	0x0800f1a1
 800f154:	0800f1a1 	.word	0x0800f1a1
 800f158:	0800f1a1 	.word	0x0800f1a1
 800f15c:	0800f1a1 	.word	0x0800f1a1
 800f160:	0800f1a1 	.word	0x0800f1a1
 800f164:	0800f1a1 	.word	0x0800f1a1
 800f168:	0800f1a1 	.word	0x0800f1a1
 800f16c:	0800f199 	.word	0x0800f199
 800f170:	2301      	movs	r3, #1
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f176:	e1c0      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f178:	2304      	movs	r3, #4
 800f17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17e:	e1bc      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f180:	2308      	movs	r3, #8
 800f182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f186:	e1b8      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f188:	2310      	movs	r3, #16
 800f18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18e:	e1b4      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f190:	2320      	movs	r3, #32
 800f192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f196:	e1b0      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f198:	2340      	movs	r3, #64	; 0x40
 800f19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19e:	e1ac      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1a0:	2380      	movs	r3, #128	; 0x80
 800f1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a6:	e1a8      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a75      	ldr	r2, [pc, #468]	; (800f384 <UART_SetConfig+0x638>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d130      	bne.n	800f214 <UART_SetConfig+0x4c8>
 800f1b2:	4b73      	ldr	r3, [pc, #460]	; (800f380 <UART_SetConfig+0x634>)
 800f1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b6:	f003 0307 	and.w	r3, r3, #7
 800f1ba:	2b05      	cmp	r3, #5
 800f1bc:	d826      	bhi.n	800f20c <UART_SetConfig+0x4c0>
 800f1be:	a201      	add	r2, pc, #4	; (adr r2, 800f1c4 <UART_SetConfig+0x478>)
 800f1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c4:	0800f1dd 	.word	0x0800f1dd
 800f1c8:	0800f1e5 	.word	0x0800f1e5
 800f1cc:	0800f1ed 	.word	0x0800f1ed
 800f1d0:	0800f1f5 	.word	0x0800f1f5
 800f1d4:	0800f1fd 	.word	0x0800f1fd
 800f1d8:	0800f205 	.word	0x0800f205
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e2:	e18a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1e4:	2304      	movs	r3, #4
 800f1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ea:	e186      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1ec:	2308      	movs	r3, #8
 800f1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f2:	e182      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1f4:	2310      	movs	r3, #16
 800f1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fa:	e17e      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f1fc:	2320      	movs	r3, #32
 800f1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f202:	e17a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f204:	2340      	movs	r3, #64	; 0x40
 800f206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20a:	e176      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f20c:	2380      	movs	r3, #128	; 0x80
 800f20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f212:	e172      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a5b      	ldr	r2, [pc, #364]	; (800f388 <UART_SetConfig+0x63c>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d130      	bne.n	800f280 <UART_SetConfig+0x534>
 800f21e:	4b58      	ldr	r3, [pc, #352]	; (800f380 <UART_SetConfig+0x634>)
 800f220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f222:	f003 0307 	and.w	r3, r3, #7
 800f226:	2b05      	cmp	r3, #5
 800f228:	d826      	bhi.n	800f278 <UART_SetConfig+0x52c>
 800f22a:	a201      	add	r2, pc, #4	; (adr r2, 800f230 <UART_SetConfig+0x4e4>)
 800f22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f230:	0800f249 	.word	0x0800f249
 800f234:	0800f251 	.word	0x0800f251
 800f238:	0800f259 	.word	0x0800f259
 800f23c:	0800f261 	.word	0x0800f261
 800f240:	0800f269 	.word	0x0800f269
 800f244:	0800f271 	.word	0x0800f271
 800f248:	2300      	movs	r3, #0
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24e:	e154      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f250:	2304      	movs	r3, #4
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f256:	e150      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f258:	2308      	movs	r3, #8
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25e:	e14c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f260:	2310      	movs	r3, #16
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f266:	e148      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f268:	2320      	movs	r3, #32
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26e:	e144      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f270:	2340      	movs	r3, #64	; 0x40
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f276:	e140      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f278:	2380      	movs	r3, #128	; 0x80
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27e:	e13c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a41      	ldr	r2, [pc, #260]	; (800f38c <UART_SetConfig+0x640>)
 800f286:	4293      	cmp	r3, r2
 800f288:	f040 8082 	bne.w	800f390 <UART_SetConfig+0x644>
 800f28c:	4b3c      	ldr	r3, [pc, #240]	; (800f380 <UART_SetConfig+0x634>)
 800f28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f294:	2b28      	cmp	r3, #40	; 0x28
 800f296:	d86d      	bhi.n	800f374 <UART_SetConfig+0x628>
 800f298:	a201      	add	r2, pc, #4	; (adr r2, 800f2a0 <UART_SetConfig+0x554>)
 800f29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29e:	bf00      	nop
 800f2a0:	0800f345 	.word	0x0800f345
 800f2a4:	0800f375 	.word	0x0800f375
 800f2a8:	0800f375 	.word	0x0800f375
 800f2ac:	0800f375 	.word	0x0800f375
 800f2b0:	0800f375 	.word	0x0800f375
 800f2b4:	0800f375 	.word	0x0800f375
 800f2b8:	0800f375 	.word	0x0800f375
 800f2bc:	0800f375 	.word	0x0800f375
 800f2c0:	0800f34d 	.word	0x0800f34d
 800f2c4:	0800f375 	.word	0x0800f375
 800f2c8:	0800f375 	.word	0x0800f375
 800f2cc:	0800f375 	.word	0x0800f375
 800f2d0:	0800f375 	.word	0x0800f375
 800f2d4:	0800f375 	.word	0x0800f375
 800f2d8:	0800f375 	.word	0x0800f375
 800f2dc:	0800f375 	.word	0x0800f375
 800f2e0:	0800f355 	.word	0x0800f355
 800f2e4:	0800f375 	.word	0x0800f375
 800f2e8:	0800f375 	.word	0x0800f375
 800f2ec:	0800f375 	.word	0x0800f375
 800f2f0:	0800f375 	.word	0x0800f375
 800f2f4:	0800f375 	.word	0x0800f375
 800f2f8:	0800f375 	.word	0x0800f375
 800f2fc:	0800f375 	.word	0x0800f375
 800f300:	0800f35d 	.word	0x0800f35d
 800f304:	0800f375 	.word	0x0800f375
 800f308:	0800f375 	.word	0x0800f375
 800f30c:	0800f375 	.word	0x0800f375
 800f310:	0800f375 	.word	0x0800f375
 800f314:	0800f375 	.word	0x0800f375
 800f318:	0800f375 	.word	0x0800f375
 800f31c:	0800f375 	.word	0x0800f375
 800f320:	0800f365 	.word	0x0800f365
 800f324:	0800f375 	.word	0x0800f375
 800f328:	0800f375 	.word	0x0800f375
 800f32c:	0800f375 	.word	0x0800f375
 800f330:	0800f375 	.word	0x0800f375
 800f334:	0800f375 	.word	0x0800f375
 800f338:	0800f375 	.word	0x0800f375
 800f33c:	0800f375 	.word	0x0800f375
 800f340:	0800f36d 	.word	0x0800f36d
 800f344:	2301      	movs	r3, #1
 800f346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34a:	e0d6      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f34c:	2304      	movs	r3, #4
 800f34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f352:	e0d2      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f354:	2308      	movs	r3, #8
 800f356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35a:	e0ce      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f35c:	2310      	movs	r3, #16
 800f35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f362:	e0ca      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f364:	2320      	movs	r3, #32
 800f366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36a:	e0c6      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f36c:	2340      	movs	r3, #64	; 0x40
 800f36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f372:	e0c2      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f374:	2380      	movs	r3, #128	; 0x80
 800f376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37a:	e0be      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f37c:	40011400 	.word	0x40011400
 800f380:	58024400 	.word	0x58024400
 800f384:	40007800 	.word	0x40007800
 800f388:	40007c00 	.word	0x40007c00
 800f38c:	40011800 	.word	0x40011800
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4aad      	ldr	r2, [pc, #692]	; (800f64c <UART_SetConfig+0x900>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d176      	bne.n	800f488 <UART_SetConfig+0x73c>
 800f39a:	4bad      	ldr	r3, [pc, #692]	; (800f650 <UART_SetConfig+0x904>)
 800f39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f39e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3a2:	2b28      	cmp	r3, #40	; 0x28
 800f3a4:	d86c      	bhi.n	800f480 <UART_SetConfig+0x734>
 800f3a6:	a201      	add	r2, pc, #4	; (adr r2, 800f3ac <UART_SetConfig+0x660>)
 800f3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ac:	0800f451 	.word	0x0800f451
 800f3b0:	0800f481 	.word	0x0800f481
 800f3b4:	0800f481 	.word	0x0800f481
 800f3b8:	0800f481 	.word	0x0800f481
 800f3bc:	0800f481 	.word	0x0800f481
 800f3c0:	0800f481 	.word	0x0800f481
 800f3c4:	0800f481 	.word	0x0800f481
 800f3c8:	0800f481 	.word	0x0800f481
 800f3cc:	0800f459 	.word	0x0800f459
 800f3d0:	0800f481 	.word	0x0800f481
 800f3d4:	0800f481 	.word	0x0800f481
 800f3d8:	0800f481 	.word	0x0800f481
 800f3dc:	0800f481 	.word	0x0800f481
 800f3e0:	0800f481 	.word	0x0800f481
 800f3e4:	0800f481 	.word	0x0800f481
 800f3e8:	0800f481 	.word	0x0800f481
 800f3ec:	0800f461 	.word	0x0800f461
 800f3f0:	0800f481 	.word	0x0800f481
 800f3f4:	0800f481 	.word	0x0800f481
 800f3f8:	0800f481 	.word	0x0800f481
 800f3fc:	0800f481 	.word	0x0800f481
 800f400:	0800f481 	.word	0x0800f481
 800f404:	0800f481 	.word	0x0800f481
 800f408:	0800f481 	.word	0x0800f481
 800f40c:	0800f469 	.word	0x0800f469
 800f410:	0800f481 	.word	0x0800f481
 800f414:	0800f481 	.word	0x0800f481
 800f418:	0800f481 	.word	0x0800f481
 800f41c:	0800f481 	.word	0x0800f481
 800f420:	0800f481 	.word	0x0800f481
 800f424:	0800f481 	.word	0x0800f481
 800f428:	0800f481 	.word	0x0800f481
 800f42c:	0800f471 	.word	0x0800f471
 800f430:	0800f481 	.word	0x0800f481
 800f434:	0800f481 	.word	0x0800f481
 800f438:	0800f481 	.word	0x0800f481
 800f43c:	0800f481 	.word	0x0800f481
 800f440:	0800f481 	.word	0x0800f481
 800f444:	0800f481 	.word	0x0800f481
 800f448:	0800f481 	.word	0x0800f481
 800f44c:	0800f479 	.word	0x0800f479
 800f450:	2301      	movs	r3, #1
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e050      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f458:	2304      	movs	r3, #4
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e04c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f460:	2308      	movs	r3, #8
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e048      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f468:	2310      	movs	r3, #16
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f46e:	e044      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f470:	2320      	movs	r3, #32
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f476:	e040      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f478:	2340      	movs	r3, #64	; 0x40
 800f47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47e:	e03c      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f480:	2380      	movs	r3, #128	; 0x80
 800f482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f486:	e038      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a71      	ldr	r2, [pc, #452]	; (800f654 <UART_SetConfig+0x908>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d130      	bne.n	800f4f4 <UART_SetConfig+0x7a8>
 800f492:	4b6f      	ldr	r3, [pc, #444]	; (800f650 <UART_SetConfig+0x904>)
 800f494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f496:	f003 0307 	and.w	r3, r3, #7
 800f49a:	2b05      	cmp	r3, #5
 800f49c:	d826      	bhi.n	800f4ec <UART_SetConfig+0x7a0>
 800f49e:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <UART_SetConfig+0x758>)
 800f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a4:	0800f4bd 	.word	0x0800f4bd
 800f4a8:	0800f4c5 	.word	0x0800f4c5
 800f4ac:	0800f4cd 	.word	0x0800f4cd
 800f4b0:	0800f4d5 	.word	0x0800f4d5
 800f4b4:	0800f4dd 	.word	0x0800f4dd
 800f4b8:	0800f4e5 	.word	0x0800f4e5
 800f4bc:	2302      	movs	r3, #2
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e01a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ca:	e016      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4cc:	2308      	movs	r3, #8
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d2:	e012      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4d4:	2310      	movs	r3, #16
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4da:	e00e      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4dc:	2320      	movs	r3, #32
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e2:	e00a      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4e4:	2340      	movs	r3, #64	; 0x40
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ea:	e006      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4ec:	2380      	movs	r3, #128	; 0x80
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f2:	e002      	b.n	800f4fa <UART_SetConfig+0x7ae>
 800f4f4:	2380      	movs	r3, #128	; 0x80
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4a55      	ldr	r2, [pc, #340]	; (800f654 <UART_SetConfig+0x908>)
 800f500:	4293      	cmp	r3, r2
 800f502:	f040 80f8 	bne.w	800f6f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f506:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f50a:	2b20      	cmp	r3, #32
 800f50c:	dc46      	bgt.n	800f59c <UART_SetConfig+0x850>
 800f50e:	2b02      	cmp	r3, #2
 800f510:	db75      	blt.n	800f5fe <UART_SetConfig+0x8b2>
 800f512:	3b02      	subs	r3, #2
 800f514:	2b1e      	cmp	r3, #30
 800f516:	d872      	bhi.n	800f5fe <UART_SetConfig+0x8b2>
 800f518:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <UART_SetConfig+0x7d4>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f5a3 	.word	0x0800f5a3
 800f524:	0800f5ff 	.word	0x0800f5ff
 800f528:	0800f5ab 	.word	0x0800f5ab
 800f52c:	0800f5ff 	.word	0x0800f5ff
 800f530:	0800f5ff 	.word	0x0800f5ff
 800f534:	0800f5ff 	.word	0x0800f5ff
 800f538:	0800f5bb 	.word	0x0800f5bb
 800f53c:	0800f5ff 	.word	0x0800f5ff
 800f540:	0800f5ff 	.word	0x0800f5ff
 800f544:	0800f5ff 	.word	0x0800f5ff
 800f548:	0800f5ff 	.word	0x0800f5ff
 800f54c:	0800f5ff 	.word	0x0800f5ff
 800f550:	0800f5ff 	.word	0x0800f5ff
 800f554:	0800f5ff 	.word	0x0800f5ff
 800f558:	0800f5cb 	.word	0x0800f5cb
 800f55c:	0800f5ff 	.word	0x0800f5ff
 800f560:	0800f5ff 	.word	0x0800f5ff
 800f564:	0800f5ff 	.word	0x0800f5ff
 800f568:	0800f5ff 	.word	0x0800f5ff
 800f56c:	0800f5ff 	.word	0x0800f5ff
 800f570:	0800f5ff 	.word	0x0800f5ff
 800f574:	0800f5ff 	.word	0x0800f5ff
 800f578:	0800f5ff 	.word	0x0800f5ff
 800f57c:	0800f5ff 	.word	0x0800f5ff
 800f580:	0800f5ff 	.word	0x0800f5ff
 800f584:	0800f5ff 	.word	0x0800f5ff
 800f588:	0800f5ff 	.word	0x0800f5ff
 800f58c:	0800f5ff 	.word	0x0800f5ff
 800f590:	0800f5ff 	.word	0x0800f5ff
 800f594:	0800f5ff 	.word	0x0800f5ff
 800f598:	0800f5f1 	.word	0x0800f5f1
 800f59c:	2b40      	cmp	r3, #64	; 0x40
 800f59e:	d02a      	beq.n	800f5f6 <UART_SetConfig+0x8aa>
 800f5a0:	e02d      	b.n	800f5fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f5a2:	f7fe fbf9 	bl	800dd98 <HAL_RCCEx_GetD3PCLK1Freq>
 800f5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5a8:	e02f      	b.n	800f60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe fc08 	bl	800ddc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b8:	e027      	b.n	800f60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ba:	f107 0318 	add.w	r3, r7, #24
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fe fd54 	bl	800e06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c8:	e01f      	b.n	800f60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5ca:	4b21      	ldr	r3, [pc, #132]	; (800f650 <UART_SetConfig+0x904>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 0320 	and.w	r3, r3, #32
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d009      	beq.n	800f5ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5d6:	4b1e      	ldr	r3, [pc, #120]	; (800f650 <UART_SetConfig+0x904>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	08db      	lsrs	r3, r3, #3
 800f5dc:	f003 0303 	and.w	r3, r3, #3
 800f5e0:	4a1d      	ldr	r2, [pc, #116]	; (800f658 <UART_SetConfig+0x90c>)
 800f5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5e8:	e00f      	b.n	800f60a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f5ea:	4b1b      	ldr	r3, [pc, #108]	; (800f658 <UART_SetConfig+0x90c>)
 800f5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5ee:	e00c      	b.n	800f60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5f0:	4b1a      	ldr	r3, [pc, #104]	; (800f65c <UART_SetConfig+0x910>)
 800f5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f4:	e009      	b.n	800f60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5fc:	e005      	b.n	800f60a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f5fe:	2300      	movs	r3, #0
 800f600:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 81ee 	beq.w	800f9ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f616:	4a12      	ldr	r2, [pc, #72]	; (800f660 <UART_SetConfig+0x914>)
 800f618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f61c:	461a      	mov	r2, r3
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	fbb3 f3f2 	udiv	r3, r3, r2
 800f624:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	4613      	mov	r3, r2
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	4413      	add	r3, r2
 800f630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f632:	429a      	cmp	r2, r3
 800f634:	d305      	bcc.n	800f642 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f63e:	429a      	cmp	r2, r3
 800f640:	d910      	bls.n	800f664 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f648:	e1d1      	b.n	800f9ee <UART_SetConfig+0xca2>
 800f64a:	bf00      	nop
 800f64c:	40011c00 	.word	0x40011c00
 800f650:	58024400 	.word	0x58024400
 800f654:	58000c00 	.word	0x58000c00
 800f658:	03d09000 	.word	0x03d09000
 800f65c:	003d0900 	.word	0x003d0900
 800f660:	08025054 	.word	0x08025054
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f666:	2200      	movs	r2, #0
 800f668:	60bb      	str	r3, [r7, #8]
 800f66a:	60fa      	str	r2, [r7, #12]
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f670:	4ac0      	ldr	r2, [pc, #768]	; (800f974 <UART_SetConfig+0xc28>)
 800f672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f676:	b29b      	uxth	r3, r3
 800f678:	2200      	movs	r2, #0
 800f67a:	603b      	str	r3, [r7, #0]
 800f67c:	607a      	str	r2, [r7, #4]
 800f67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f686:	f7f0 fe83 	bl	8000390 <__aeabi_uldivmod>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4610      	mov	r0, r2
 800f690:	4619      	mov	r1, r3
 800f692:	f04f 0200 	mov.w	r2, #0
 800f696:	f04f 0300 	mov.w	r3, #0
 800f69a:	020b      	lsls	r3, r1, #8
 800f69c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f6a0:	0202      	lsls	r2, r0, #8
 800f6a2:	6979      	ldr	r1, [r7, #20]
 800f6a4:	6849      	ldr	r1, [r1, #4]
 800f6a6:	0849      	lsrs	r1, r1, #1
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	4605      	mov	r5, r0
 800f6ae:	eb12 0804 	adds.w	r8, r2, r4
 800f6b2:	eb43 0905 	adc.w	r9, r3, r5
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	469a      	mov	sl, r3
 800f6be:	4693      	mov	fp, r2
 800f6c0:	4652      	mov	r2, sl
 800f6c2:	465b      	mov	r3, fp
 800f6c4:	4640      	mov	r0, r8
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	f7f0 fe62 	bl	8000390 <__aeabi_uldivmod>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6da:	d308      	bcc.n	800f6ee <UART_SetConfig+0x9a2>
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6e2:	d204      	bcs.n	800f6ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ea:	60da      	str	r2, [r3, #12]
 800f6ec:	e17f      	b.n	800f9ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f6f4:	e17b      	b.n	800f9ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6fe:	f040 80bd 	bne.w	800f87c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f702:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f706:	2b20      	cmp	r3, #32
 800f708:	dc48      	bgt.n	800f79c <UART_SetConfig+0xa50>
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	db7b      	blt.n	800f806 <UART_SetConfig+0xaba>
 800f70e:	2b20      	cmp	r3, #32
 800f710:	d879      	bhi.n	800f806 <UART_SetConfig+0xaba>
 800f712:	a201      	add	r2, pc, #4	; (adr r2, 800f718 <UART_SetConfig+0x9cc>)
 800f714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f718:	0800f7a3 	.word	0x0800f7a3
 800f71c:	0800f7ab 	.word	0x0800f7ab
 800f720:	0800f807 	.word	0x0800f807
 800f724:	0800f807 	.word	0x0800f807
 800f728:	0800f7b3 	.word	0x0800f7b3
 800f72c:	0800f807 	.word	0x0800f807
 800f730:	0800f807 	.word	0x0800f807
 800f734:	0800f807 	.word	0x0800f807
 800f738:	0800f7c3 	.word	0x0800f7c3
 800f73c:	0800f807 	.word	0x0800f807
 800f740:	0800f807 	.word	0x0800f807
 800f744:	0800f807 	.word	0x0800f807
 800f748:	0800f807 	.word	0x0800f807
 800f74c:	0800f807 	.word	0x0800f807
 800f750:	0800f807 	.word	0x0800f807
 800f754:	0800f807 	.word	0x0800f807
 800f758:	0800f7d3 	.word	0x0800f7d3
 800f75c:	0800f807 	.word	0x0800f807
 800f760:	0800f807 	.word	0x0800f807
 800f764:	0800f807 	.word	0x0800f807
 800f768:	0800f807 	.word	0x0800f807
 800f76c:	0800f807 	.word	0x0800f807
 800f770:	0800f807 	.word	0x0800f807
 800f774:	0800f807 	.word	0x0800f807
 800f778:	0800f807 	.word	0x0800f807
 800f77c:	0800f807 	.word	0x0800f807
 800f780:	0800f807 	.word	0x0800f807
 800f784:	0800f807 	.word	0x0800f807
 800f788:	0800f807 	.word	0x0800f807
 800f78c:	0800f807 	.word	0x0800f807
 800f790:	0800f807 	.word	0x0800f807
 800f794:	0800f807 	.word	0x0800f807
 800f798:	0800f7f9 	.word	0x0800f7f9
 800f79c:	2b40      	cmp	r3, #64	; 0x40
 800f79e:	d02e      	beq.n	800f7fe <UART_SetConfig+0xab2>
 800f7a0:	e031      	b.n	800f806 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7a2:	f7fd f8cd 	bl	800c940 <HAL_RCC_GetPCLK1Freq>
 800f7a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7a8:	e033      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7aa:	f7fd f8df 	bl	800c96c <HAL_RCC_GetPCLK2Freq>
 800f7ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7b0:	e02f      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe fb04 	bl	800ddc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c0:	e027      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7c2:	f107 0318 	add.w	r3, r7, #24
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fe fc50 	bl	800e06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7d0:	e01f      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7d2:	4b69      	ldr	r3, [pc, #420]	; (800f978 <UART_SetConfig+0xc2c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f003 0320 	and.w	r3, r3, #32
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d009      	beq.n	800f7f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7de:	4b66      	ldr	r3, [pc, #408]	; (800f978 <UART_SetConfig+0xc2c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	08db      	lsrs	r3, r3, #3
 800f7e4:	f003 0303 	and.w	r3, r3, #3
 800f7e8:	4a64      	ldr	r2, [pc, #400]	; (800f97c <UART_SetConfig+0xc30>)
 800f7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7f0:	e00f      	b.n	800f812 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f7f2:	4b62      	ldr	r3, [pc, #392]	; (800f97c <UART_SetConfig+0xc30>)
 800f7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7f6:	e00c      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7f8:	4b61      	ldr	r3, [pc, #388]	; (800f980 <UART_SetConfig+0xc34>)
 800f7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7fc:	e009      	b.n	800f812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f804:	e005      	b.n	800f812 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f806:	2300      	movs	r3, #0
 800f808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f80a:	2301      	movs	r3, #1
 800f80c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 80ea 	beq.w	800f9ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81e:	4a55      	ldr	r2, [pc, #340]	; (800f974 <UART_SetConfig+0xc28>)
 800f820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f824:	461a      	mov	r2, r3
 800f826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f828:	fbb3 f3f2 	udiv	r3, r3, r2
 800f82c:	005a      	lsls	r2, r3, #1
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	085b      	lsrs	r3, r3, #1
 800f834:	441a      	add	r2, r3
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f83e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	2b0f      	cmp	r3, #15
 800f844:	d916      	bls.n	800f874 <UART_SetConfig+0xb28>
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f84c:	d212      	bcs.n	800f874 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f850:	b29b      	uxth	r3, r3
 800f852:	f023 030f 	bic.w	r3, r3, #15
 800f856:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	085b      	lsrs	r3, r3, #1
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	b29a      	uxth	r2, r3
 800f864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f866:	4313      	orrs	r3, r2
 800f868:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	e0bc      	b.n	800f9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f87a:	e0b8      	b.n	800f9ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f87c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f880:	2b20      	cmp	r3, #32
 800f882:	dc4b      	bgt.n	800f91c <UART_SetConfig+0xbd0>
 800f884:	2b00      	cmp	r3, #0
 800f886:	f2c0 8087 	blt.w	800f998 <UART_SetConfig+0xc4c>
 800f88a:	2b20      	cmp	r3, #32
 800f88c:	f200 8084 	bhi.w	800f998 <UART_SetConfig+0xc4c>
 800f890:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <UART_SetConfig+0xb4c>)
 800f892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f896:	bf00      	nop
 800f898:	0800f923 	.word	0x0800f923
 800f89c:	0800f92b 	.word	0x0800f92b
 800f8a0:	0800f999 	.word	0x0800f999
 800f8a4:	0800f999 	.word	0x0800f999
 800f8a8:	0800f933 	.word	0x0800f933
 800f8ac:	0800f999 	.word	0x0800f999
 800f8b0:	0800f999 	.word	0x0800f999
 800f8b4:	0800f999 	.word	0x0800f999
 800f8b8:	0800f943 	.word	0x0800f943
 800f8bc:	0800f999 	.word	0x0800f999
 800f8c0:	0800f999 	.word	0x0800f999
 800f8c4:	0800f999 	.word	0x0800f999
 800f8c8:	0800f999 	.word	0x0800f999
 800f8cc:	0800f999 	.word	0x0800f999
 800f8d0:	0800f999 	.word	0x0800f999
 800f8d4:	0800f999 	.word	0x0800f999
 800f8d8:	0800f953 	.word	0x0800f953
 800f8dc:	0800f999 	.word	0x0800f999
 800f8e0:	0800f999 	.word	0x0800f999
 800f8e4:	0800f999 	.word	0x0800f999
 800f8e8:	0800f999 	.word	0x0800f999
 800f8ec:	0800f999 	.word	0x0800f999
 800f8f0:	0800f999 	.word	0x0800f999
 800f8f4:	0800f999 	.word	0x0800f999
 800f8f8:	0800f999 	.word	0x0800f999
 800f8fc:	0800f999 	.word	0x0800f999
 800f900:	0800f999 	.word	0x0800f999
 800f904:	0800f999 	.word	0x0800f999
 800f908:	0800f999 	.word	0x0800f999
 800f90c:	0800f999 	.word	0x0800f999
 800f910:	0800f999 	.word	0x0800f999
 800f914:	0800f999 	.word	0x0800f999
 800f918:	0800f98b 	.word	0x0800f98b
 800f91c:	2b40      	cmp	r3, #64	; 0x40
 800f91e:	d037      	beq.n	800f990 <UART_SetConfig+0xc44>
 800f920:	e03a      	b.n	800f998 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f922:	f7fd f80d 	bl	800c940 <HAL_RCC_GetPCLK1Freq>
 800f926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f928:	e03c      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f92a:	f7fd f81f 	bl	800c96c <HAL_RCC_GetPCLK2Freq>
 800f92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f930:	e038      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f936:	4618      	mov	r0, r3
 800f938:	f7fe fa44 	bl	800ddc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f940:	e030      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f942:	f107 0318 	add.w	r3, r7, #24
 800f946:	4618      	mov	r0, r3
 800f948:	f7fe fb90 	bl	800e06c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f950:	e028      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f952:	4b09      	ldr	r3, [pc, #36]	; (800f978 <UART_SetConfig+0xc2c>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f003 0320 	and.w	r3, r3, #32
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d012      	beq.n	800f984 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f95e:	4b06      	ldr	r3, [pc, #24]	; (800f978 <UART_SetConfig+0xc2c>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	08db      	lsrs	r3, r3, #3
 800f964:	f003 0303 	and.w	r3, r3, #3
 800f968:	4a04      	ldr	r2, [pc, #16]	; (800f97c <UART_SetConfig+0xc30>)
 800f96a:	fa22 f303 	lsr.w	r3, r2, r3
 800f96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f970:	e018      	b.n	800f9a4 <UART_SetConfig+0xc58>
 800f972:	bf00      	nop
 800f974:	08025054 	.word	0x08025054
 800f978:	58024400 	.word	0x58024400
 800f97c:	03d09000 	.word	0x03d09000
 800f980:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f984:	4b24      	ldr	r3, [pc, #144]	; (800fa18 <UART_SetConfig+0xccc>)
 800f986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f988:	e00c      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f98a:	4b24      	ldr	r3, [pc, #144]	; (800fa1c <UART_SetConfig+0xcd0>)
 800f98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f98e:	e009      	b.n	800f9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f996:	e005      	b.n	800f9a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f998:	2300      	movs	r3, #0
 800f99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f99c:	2301      	movs	r3, #1
 800f99e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800f9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d021      	beq.n	800f9ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ae:	4a1c      	ldr	r2, [pc, #112]	; (800fa20 <UART_SetConfig+0xcd4>)
 800f9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	085b      	lsrs	r3, r3, #1
 800f9c2:	441a      	add	r2, r3
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	2b0f      	cmp	r3, #15
 800f9d2:	d909      	bls.n	800f9e8 <UART_SetConfig+0xc9c>
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9da:	d205      	bcs.n	800f9e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	60da      	str	r2, [r3, #12]
 800f9e6:	e002      	b.n	800f9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	2200      	movs	r2, #0
 800fa02:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	2200      	movs	r2, #0
 800fa08:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fa0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3748      	adds	r7, #72	; 0x48
 800fa12:	46bd      	mov	sp, r7
 800fa14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa18:	03d09000 	.word	0x03d09000
 800fa1c:	003d0900 	.word	0x003d0900
 800fa20:	08025054 	.word	0x08025054

0800fa24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	f003 0301 	and.w	r3, r3, #1
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00a      	beq.n	800fa4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	430a      	orrs	r2, r1
 800fa4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa52:	f003 0302 	and.w	r3, r3, #2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00a      	beq.n	800fa70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00a      	beq.n	800fa92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	f003 0308 	and.w	r3, r3, #8
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00a      	beq.n	800fab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	430a      	orrs	r2, r1
 800fab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab8:	f003 0310 	and.w	r3, r3, #16
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00a      	beq.n	800fad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fada:	f003 0320 	and.w	r3, r3, #32
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00a      	beq.n	800faf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	430a      	orrs	r2, r1
 800faf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d01a      	beq.n	800fb3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	430a      	orrs	r2, r1
 800fb18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb22:	d10a      	bne.n	800fb3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	430a      	orrs	r2, r1
 800fb38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	430a      	orrs	r2, r1
 800fb5a:	605a      	str	r2, [r3, #4]
  }
}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b098      	sub	sp, #96	; 0x60
 800fb6c:	af02      	add	r7, sp, #8
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb78:	f7f8 fd4a 	bl	8008610 <HAL_GetTick>
 800fb7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0308 	and.w	r3, r3, #8
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d12f      	bne.n	800fbec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb94:	2200      	movs	r2, #0
 800fb96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f88e 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d022      	beq.n	800fbec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	e853 3f00 	ldrex	r3, [r3]
 800fbb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbba:	653b      	str	r3, [r7, #80]	; 0x50
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc4:	647b      	str	r3, [r7, #68]	; 0x44
 800fbc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbcc:	e841 2300 	strex	r3, r2, [r1]
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e6      	bne.n	800fba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2220      	movs	r2, #32
 800fbdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fbe8:	2303      	movs	r3, #3
 800fbea:	e063      	b.n	800fcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f003 0304 	and.w	r3, r3, #4
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d149      	bne.n	800fc8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc02:	2200      	movs	r2, #0
 800fc04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f857 	bl	800fcbc <UART_WaitOnFlagUntilTimeout>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d03c      	beq.n	800fc8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	e853 3f00 	ldrex	r3, [r3]
 800fc20:	623b      	str	r3, [r7, #32]
   return(result);
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc32:	633b      	str	r3, [r7, #48]	; 0x30
 800fc34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc3a:	e841 2300 	strex	r3, r2, [r1]
 800fc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1e6      	bne.n	800fc14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	e853 3f00 	ldrex	r3, [r3]
 800fc54:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f023 0301 	bic.w	r3, r3, #1
 800fc5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3308      	adds	r3, #8
 800fc64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc66:	61fa      	str	r2, [r7, #28]
 800fc68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6a:	69b9      	ldr	r1, [r7, #24]
 800fc6c:	69fa      	ldr	r2, [r7, #28]
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	617b      	str	r3, [r7, #20]
   return(result);
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e5      	bne.n	800fc46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc8a:	2303      	movs	r3, #3
 800fc8c:	e012      	b.n	800fcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2220      	movs	r2, #32
 800fc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2220      	movs	r2, #32
 800fc9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fcb2:	2300      	movs	r3, #0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3758      	adds	r7, #88	; 0x58
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	603b      	str	r3, [r7, #0]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fccc:	e049      	b.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd4:	d045      	beq.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcd6:	f7f8 fc9b 	bl	8008610 <HAL_GetTick>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	69ba      	ldr	r2, [r7, #24]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d302      	bcc.n	800fcec <UART_WaitOnFlagUntilTimeout+0x30>
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d101      	bne.n	800fcf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e048      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d031      	beq.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	f003 0308 	and.w	r3, r3, #8
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	d110      	bne.n	800fd2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2208      	movs	r2, #8
 800fd12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fd14:	68f8      	ldr	r0, [r7, #12]
 800fd16:	f000 f839 	bl	800fd8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2208      	movs	r2, #8
 800fd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e029      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	69db      	ldr	r3, [r3, #28]
 800fd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd3c:	d111      	bne.n	800fd62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 f81f 	bl	800fd8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2220      	movs	r2, #32
 800fd52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fd5e:	2303      	movs	r3, #3
 800fd60:	e00f      	b.n	800fd82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	69da      	ldr	r2, [r3, #28]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	bf0c      	ite	eq
 800fd72:	2301      	moveq	r3, #1
 800fd74:	2300      	movne	r3, #0
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	461a      	mov	r2, r3
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d0a6      	beq.n	800fcce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
	...

0800fd8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b095      	sub	sp, #84	; 0x54
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9c:	e853 3f00 	ldrex	r3, [r3]
 800fda0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fda8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	461a      	mov	r2, r3
 800fdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdb2:	643b      	str	r3, [r7, #64]	; 0x40
 800fdb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fdb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdba:	e841 2300 	strex	r3, r2, [r1]
 800fdbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1e6      	bne.n	800fd94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3308      	adds	r3, #8
 800fdcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdce:	6a3b      	ldr	r3, [r7, #32]
 800fdd0:	e853 3f00 	ldrex	r3, [r3]
 800fdd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	4b1e      	ldr	r3, [pc, #120]	; (800fe54 <UART_EndRxTransfer+0xc8>)
 800fdda:	4013      	ands	r3, r2
 800fddc:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3308      	adds	r3, #8
 800fde4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fde6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fde8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdee:	e841 2300 	strex	r3, r2, [r1]
 800fdf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1e5      	bne.n	800fdc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d118      	bne.n	800fe34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	f023 0310 	bic.w	r3, r3, #16
 800fe16:	647b      	str	r3, [r7, #68]	; 0x44
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe24:	6979      	ldr	r1, [r7, #20]
 800fe26:	69ba      	ldr	r2, [r7, #24]
 800fe28:	e841 2300 	strex	r3, r2, [r1]
 800fe2c:	613b      	str	r3, [r7, #16]
   return(result);
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1e6      	bne.n	800fe02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2220      	movs	r2, #32
 800fe38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fe48:	bf00      	nop
 800fe4a:	3754      	adds	r7, #84	; 0x54
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr
 800fe54:	effffffe 	.word	0xeffffffe

0800fe58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d101      	bne.n	800fe6e <HAL_UARTEx_DisableFifoMode+0x16>
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	e027      	b.n	800febe <HAL_UARTEx_DisableFifoMode+0x66>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2201      	movs	r2, #1
 800fe72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2224      	movs	r2, #36	; 0x24
 800fe7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f022 0201 	bic.w	r2, r2, #1
 800fe94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr

0800feca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b084      	sub	sp, #16
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
 800fed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d101      	bne.n	800fee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fede:	2302      	movs	r3, #2
 800fee0:	e02d      	b.n	800ff3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2224      	movs	r2, #36	; 0x24
 800feee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f022 0201 	bic.w	r2, r2, #1
 800ff08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	430a      	orrs	r2, r1
 800ff1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f850 	bl	800ffc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2220      	movs	r2, #32
 800ff30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b084      	sub	sp, #16
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d101      	bne.n	800ff5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	e02d      	b.n	800ffba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2224      	movs	r2, #36	; 0x24
 800ff6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f022 0201 	bic.w	r2, r2, #1
 800ff84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	430a      	orrs	r2, r1
 800ff98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 f812 	bl	800ffc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2220      	movs	r2, #32
 800ffac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d108      	bne.n	800ffe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ffe4:	e031      	b.n	801004a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ffe6:	2310      	movs	r3, #16
 800ffe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ffea:	2310      	movs	r3, #16
 800ffec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	0e5b      	lsrs	r3, r3, #25
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	f003 0307 	and.w	r3, r3, #7
 800fffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	0f5b      	lsrs	r3, r3, #29
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 0307 	and.w	r3, r3, #7
 801000c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801000e:	7bbb      	ldrb	r3, [r7, #14]
 8010010:	7b3a      	ldrb	r2, [r7, #12]
 8010012:	4911      	ldr	r1, [pc, #68]	; (8010058 <UARTEx_SetNbDataToProcess+0x94>)
 8010014:	5c8a      	ldrb	r2, [r1, r2]
 8010016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801001a:	7b3a      	ldrb	r2, [r7, #12]
 801001c:	490f      	ldr	r1, [pc, #60]	; (801005c <UARTEx_SetNbDataToProcess+0x98>)
 801001e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010020:	fb93 f3f2 	sdiv	r3, r3, r2
 8010024:	b29a      	uxth	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801002c:	7bfb      	ldrb	r3, [r7, #15]
 801002e:	7b7a      	ldrb	r2, [r7, #13]
 8010030:	4909      	ldr	r1, [pc, #36]	; (8010058 <UARTEx_SetNbDataToProcess+0x94>)
 8010032:	5c8a      	ldrb	r2, [r1, r2]
 8010034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010038:	7b7a      	ldrb	r2, [r7, #13]
 801003a:	4908      	ldr	r1, [pc, #32]	; (801005c <UARTEx_SetNbDataToProcess+0x98>)
 801003c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801003e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801004a:	bf00      	nop
 801004c:	3714      	adds	r7, #20
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	0802506c 	.word	0x0802506c
 801005c:	08025074 	.word	0x08025074

08010060 <__NVIC_SetPriority>:
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	6039      	str	r1, [r7, #0]
 801006a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801006c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010070:	2b00      	cmp	r3, #0
 8010072:	db0a      	blt.n	801008a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	b2da      	uxtb	r2, r3
 8010078:	490c      	ldr	r1, [pc, #48]	; (80100ac <__NVIC_SetPriority+0x4c>)
 801007a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801007e:	0112      	lsls	r2, r2, #4
 8010080:	b2d2      	uxtb	r2, r2
 8010082:	440b      	add	r3, r1
 8010084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010088:	e00a      	b.n	80100a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	b2da      	uxtb	r2, r3
 801008e:	4908      	ldr	r1, [pc, #32]	; (80100b0 <__NVIC_SetPriority+0x50>)
 8010090:	88fb      	ldrh	r3, [r7, #6]
 8010092:	f003 030f 	and.w	r3, r3, #15
 8010096:	3b04      	subs	r3, #4
 8010098:	0112      	lsls	r2, r2, #4
 801009a:	b2d2      	uxtb	r2, r2
 801009c:	440b      	add	r3, r1
 801009e:	761a      	strb	r2, [r3, #24]
}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	e000e100 	.word	0xe000e100
 80100b0:	e000ed00 	.word	0xe000ed00

080100b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80100b4:	b580      	push	{r7, lr}
 80100b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <SysTick_Handler+0x1c>)
 80100ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80100bc:	f002 fea8 	bl	8012e10 <xTaskGetSchedulerState>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d001      	beq.n	80100ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80100c6:	f000 ffe7 	bl	8011098 <xPortSysTickHandler>
  }
}
 80100ca:	bf00      	nop
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	e000e010 	.word	0xe000e010

080100d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80100d4:	b580      	push	{r7, lr}
 80100d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80100d8:	2100      	movs	r1, #0
 80100da:	f06f 0004 	mvn.w	r0, #4
 80100de:	f7ff ffbf 	bl	8010060 <__NVIC_SetPriority>
#endif
}
 80100e2:	bf00      	nop
 80100e4:	bd80      	pop	{r7, pc}
	...

080100e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100ee:	f3ef 8305 	mrs	r3, IPSR
 80100f2:	603b      	str	r3, [r7, #0]
  return(result);
 80100f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d003      	beq.n	8010102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80100fa:	f06f 0305 	mvn.w	r3, #5
 80100fe:	607b      	str	r3, [r7, #4]
 8010100:	e00c      	b.n	801011c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010102:	4b0a      	ldr	r3, [pc, #40]	; (801012c <osKernelInitialize+0x44>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d105      	bne.n	8010116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801010a:	4b08      	ldr	r3, [pc, #32]	; (801012c <osKernelInitialize+0x44>)
 801010c:	2201      	movs	r2, #1
 801010e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010110:	2300      	movs	r3, #0
 8010112:	607b      	str	r3, [r7, #4]
 8010114:	e002      	b.n	801011c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010116:	f04f 33ff 	mov.w	r3, #4294967295
 801011a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801011c:	687b      	ldr	r3, [r7, #4]
}
 801011e:	4618      	mov	r0, r3
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	240020e0 	.word	0x240020e0

08010130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010136:	f3ef 8305 	mrs	r3, IPSR
 801013a:	603b      	str	r3, [r7, #0]
  return(result);
 801013c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010142:	f06f 0305 	mvn.w	r3, #5
 8010146:	607b      	str	r3, [r7, #4]
 8010148:	e010      	b.n	801016c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801014a:	4b0b      	ldr	r3, [pc, #44]	; (8010178 <osKernelStart+0x48>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b01      	cmp	r3, #1
 8010150:	d109      	bne.n	8010166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010152:	f7ff ffbf 	bl	80100d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010156:	4b08      	ldr	r3, [pc, #32]	; (8010178 <osKernelStart+0x48>)
 8010158:	2202      	movs	r2, #2
 801015a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801015c:	f002 fa10 	bl	8012580 <vTaskStartScheduler>
      stat = osOK;
 8010160:	2300      	movs	r3, #0
 8010162:	607b      	str	r3, [r7, #4]
 8010164:	e002      	b.n	801016c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010166:	f04f 33ff 	mov.w	r3, #4294967295
 801016a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801016c:	687b      	ldr	r3, [r7, #4]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	240020e0 	.word	0x240020e0

0801017c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801017c:	b580      	push	{r7, lr}
 801017e:	b08e      	sub	sp, #56	; 0x38
 8010180:	af04      	add	r7, sp, #16
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010188:	2300      	movs	r3, #0
 801018a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801018c:	f3ef 8305 	mrs	r3, IPSR
 8010190:	617b      	str	r3, [r7, #20]
  return(result);
 8010192:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010194:	2b00      	cmp	r3, #0
 8010196:	d17e      	bne.n	8010296 <osThreadNew+0x11a>
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d07b      	beq.n	8010296 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801019e:	2380      	movs	r3, #128	; 0x80
 80101a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80101a2:	2318      	movs	r3, #24
 80101a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80101aa:	f04f 33ff 	mov.w	r3, #4294967295
 80101ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d045      	beq.n	8010242 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d002      	beq.n	80101c4 <osThreadNew+0x48>
        name = attr->name;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	699b      	ldr	r3, [r3, #24]
 80101d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d008      	beq.n	80101ea <osThreadNew+0x6e>
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	2b38      	cmp	r3, #56	; 0x38
 80101dc:	d805      	bhi.n	80101ea <osThreadNew+0x6e>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	f003 0301 	and.w	r3, r3, #1
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <osThreadNew+0x72>
        return (NULL);
 80101ea:	2300      	movs	r3, #0
 80101ec:	e054      	b.n	8010298 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	695b      	ldr	r3, [r3, #20]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d003      	beq.n	80101fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	695b      	ldr	r3, [r3, #20]
 80101fa:	089b      	lsrs	r3, r3, #2
 80101fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00e      	beq.n	8010224 <osThreadNew+0xa8>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	2b5b      	cmp	r3, #91	; 0x5b
 801020c:	d90a      	bls.n	8010224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010212:	2b00      	cmp	r3, #0
 8010214:	d006      	beq.n	8010224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <osThreadNew+0xa8>
        mem = 1;
 801021e:	2301      	movs	r3, #1
 8010220:	61bb      	str	r3, [r7, #24]
 8010222:	e010      	b.n	8010246 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d10c      	bne.n	8010246 <osThreadNew+0xca>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d108      	bne.n	8010246 <osThreadNew+0xca>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d104      	bne.n	8010246 <osThreadNew+0xca>
          mem = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	61bb      	str	r3, [r7, #24]
 8010240:	e001      	b.n	8010246 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d110      	bne.n	801026e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010254:	9202      	str	r2, [sp, #8]
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	6a3a      	ldr	r2, [r7, #32]
 8010260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f001 ffb6 	bl	80121d4 <xTaskCreateStatic>
 8010268:	4603      	mov	r3, r0
 801026a:	613b      	str	r3, [r7, #16]
 801026c:	e013      	b.n	8010296 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d110      	bne.n	8010296 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010274:	6a3b      	ldr	r3, [r7, #32]
 8010276:	b29a      	uxth	r2, r3
 8010278:	f107 0310 	add.w	r3, r7, #16
 801027c:	9301      	str	r3, [sp, #4]
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f002 f801 	bl	801228e <xTaskCreate>
 801028c:	4603      	mov	r3, r0
 801028e:	2b01      	cmp	r3, #1
 8010290:	d001      	beq.n	8010296 <osThreadNew+0x11a>
            hTask = NULL;
 8010292:	2300      	movs	r3, #0
 8010294:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010296:	693b      	ldr	r3, [r7, #16]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3728      	adds	r7, #40	; 0x28
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102a8:	f3ef 8305 	mrs	r3, IPSR
 80102ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80102ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d003      	beq.n	80102bc <osDelay+0x1c>
    stat = osErrorISR;
 80102b4:	f06f 0305 	mvn.w	r3, #5
 80102b8:	60fb      	str	r3, [r7, #12]
 80102ba:	e007      	b.n	80102cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80102bc:	2300      	movs	r3, #0
 80102be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d002      	beq.n	80102cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f002 f926 	bl	8012518 <vTaskDelay>
    }
  }

  return (stat);
 80102cc:	68fb      	ldr	r3, [r7, #12]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b08a      	sub	sp, #40	; 0x28
 80102da:	af02      	add	r7, sp, #8
 80102dc:	60f8      	str	r0, [r7, #12]
 80102de:	60b9      	str	r1, [r7, #8]
 80102e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102e6:	f3ef 8305 	mrs	r3, IPSR
 80102ea:	613b      	str	r3, [r7, #16]
  return(result);
 80102ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d175      	bne.n	80103de <osSemaphoreNew+0x108>
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d072      	beq.n	80103de <osSemaphoreNew+0x108>
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d86e      	bhi.n	80103de <osSemaphoreNew+0x108>
    mem = -1;
 8010300:	f04f 33ff 	mov.w	r3, #4294967295
 8010304:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d015      	beq.n	8010338 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d006      	beq.n	8010322 <osSemaphoreNew+0x4c>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	2b4f      	cmp	r3, #79	; 0x4f
 801031a:	d902      	bls.n	8010322 <osSemaphoreNew+0x4c>
        mem = 1;
 801031c:	2301      	movs	r3, #1
 801031e:	61bb      	str	r3, [r7, #24]
 8010320:	e00c      	b.n	801033c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d108      	bne.n	801033c <osSemaphoreNew+0x66>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d104      	bne.n	801033c <osSemaphoreNew+0x66>
          mem = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	61bb      	str	r3, [r7, #24]
 8010336:	e001      	b.n	801033c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d04c      	beq.n	80103de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b01      	cmp	r3, #1
 8010348:	d128      	bne.n	801039c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d10a      	bne.n	8010366 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	2203      	movs	r2, #3
 8010356:	9200      	str	r2, [sp, #0]
 8010358:	2200      	movs	r2, #0
 801035a:	2100      	movs	r1, #0
 801035c:	2001      	movs	r0, #1
 801035e:	f000 ff93 	bl	8011288 <xQueueGenericCreateStatic>
 8010362:	61f8      	str	r0, [r7, #28]
 8010364:	e005      	b.n	8010372 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010366:	2203      	movs	r2, #3
 8010368:	2100      	movs	r1, #0
 801036a:	2001      	movs	r0, #1
 801036c:	f001 f804 	bl	8011378 <xQueueGenericCreate>
 8010370:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d022      	beq.n	80103be <osSemaphoreNew+0xe8>
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d01f      	beq.n	80103be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801037e:	2300      	movs	r3, #0
 8010380:	2200      	movs	r2, #0
 8010382:	2100      	movs	r1, #0
 8010384:	69f8      	ldr	r0, [r7, #28]
 8010386:	f001 f8bf 	bl	8011508 <xQueueGenericSend>
 801038a:	4603      	mov	r3, r0
 801038c:	2b01      	cmp	r3, #1
 801038e:	d016      	beq.n	80103be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010390:	69f8      	ldr	r0, [r7, #28]
 8010392:	f001 fd4b 	bl	8011e2c <vQueueDelete>
            hSemaphore = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
 801039a:	e010      	b.n	80103be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d108      	bne.n	80103b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	461a      	mov	r2, r3
 80103a8:	68b9      	ldr	r1, [r7, #8]
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f001 f841 	bl	8011432 <xQueueCreateCountingSemaphoreStatic>
 80103b0:	61f8      	str	r0, [r7, #28]
 80103b2:	e004      	b.n	80103be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80103b4:	68b9      	ldr	r1, [r7, #8]
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f001 f872 	bl	80114a0 <xQueueCreateCountingSemaphore>
 80103bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00c      	beq.n	80103de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	e001      	b.n	80103d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80103d6:	6979      	ldr	r1, [r7, #20]
 80103d8:	69f8      	ldr	r0, [r7, #28]
 80103da:	f001 fe73 	bl	80120c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80103de:	69fb      	ldr	r3, [r7, #28]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3720      	adds	r7, #32
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80103f6:	2300      	movs	r3, #0
 80103f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d103      	bne.n	8010408 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010400:	f06f 0303 	mvn.w	r3, #3
 8010404:	617b      	str	r3, [r7, #20]
 8010406:	e039      	b.n	801047c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010408:	f3ef 8305 	mrs	r3, IPSR
 801040c:	60fb      	str	r3, [r7, #12]
  return(result);
 801040e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010410:	2b00      	cmp	r3, #0
 8010412:	d022      	beq.n	801045a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d003      	beq.n	8010422 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801041a:	f06f 0303 	mvn.w	r3, #3
 801041e:	617b      	str	r3, [r7, #20]
 8010420:	e02c      	b.n	801047c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010422:	2300      	movs	r3, #0
 8010424:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010426:	f107 0308 	add.w	r3, r7, #8
 801042a:	461a      	mov	r2, r3
 801042c:	2100      	movs	r1, #0
 801042e:	6938      	ldr	r0, [r7, #16]
 8010430:	f001 fc7c 	bl	8011d2c <xQueueReceiveFromISR>
 8010434:	4603      	mov	r3, r0
 8010436:	2b01      	cmp	r3, #1
 8010438:	d003      	beq.n	8010442 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801043a:	f06f 0302 	mvn.w	r3, #2
 801043e:	617b      	str	r3, [r7, #20]
 8010440:	e01c      	b.n	801047c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d019      	beq.n	801047c <osSemaphoreAcquire+0x94>
 8010448:	4b0f      	ldr	r3, [pc, #60]	; (8010488 <osSemaphoreAcquire+0xa0>)
 801044a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044e:	601a      	str	r2, [r3, #0]
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	e010      	b.n	801047c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801045a:	6839      	ldr	r1, [r7, #0]
 801045c:	6938      	ldr	r0, [r7, #16]
 801045e:	f001 fb59 	bl	8011b14 <xQueueSemaphoreTake>
 8010462:	4603      	mov	r3, r0
 8010464:	2b01      	cmp	r3, #1
 8010466:	d009      	beq.n	801047c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d003      	beq.n	8010476 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801046e:	f06f 0301 	mvn.w	r3, #1
 8010472:	617b      	str	r3, [r7, #20]
 8010474:	e002      	b.n	801047c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010476:	f06f 0302 	mvn.w	r3, #2
 801047a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801047c:	697b      	ldr	r3, [r7, #20]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3718      	adds	r7, #24
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	e000ed04 	.word	0xe000ed04

0801048c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010498:	2300      	movs	r3, #0
 801049a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80104a2:	f06f 0303 	mvn.w	r3, #3
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	e02c      	b.n	8010504 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104aa:	f3ef 8305 	mrs	r3, IPSR
 80104ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80104b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d01a      	beq.n	80104ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80104b6:	2300      	movs	r3, #0
 80104b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80104ba:	f107 0308 	add.w	r3, r7, #8
 80104be:	4619      	mov	r1, r3
 80104c0:	6938      	ldr	r0, [r7, #16]
 80104c2:	f001 f9ba 	bl	801183a <xQueueGiveFromISR>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d003      	beq.n	80104d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80104cc:	f06f 0302 	mvn.w	r3, #2
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	e017      	b.n	8010504 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d014      	beq.n	8010504 <osSemaphoreRelease+0x78>
 80104da:	4b0d      	ldr	r3, [pc, #52]	; (8010510 <osSemaphoreRelease+0x84>)
 80104dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	e00b      	b.n	8010504 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80104ec:	2300      	movs	r3, #0
 80104ee:	2200      	movs	r2, #0
 80104f0:	2100      	movs	r1, #0
 80104f2:	6938      	ldr	r0, [r7, #16]
 80104f4:	f001 f808 	bl	8011508 <xQueueGenericSend>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d002      	beq.n	8010504 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80104fe:	f06f 0302 	mvn.w	r3, #2
 8010502:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010504:	697b      	ldr	r3, [r7, #20]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	e000ed04 	.word	0xe000ed04

08010514 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010514:	b580      	push	{r7, lr}
 8010516:	b08a      	sub	sp, #40	; 0x28
 8010518:	af02      	add	r7, sp, #8
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010520:	2300      	movs	r3, #0
 8010522:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010524:	f3ef 8305 	mrs	r3, IPSR
 8010528:	613b      	str	r3, [r7, #16]
  return(result);
 801052a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801052c:	2b00      	cmp	r3, #0
 801052e:	d15f      	bne.n	80105f0 <osMessageQueueNew+0xdc>
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d05c      	beq.n	80105f0 <osMessageQueueNew+0xdc>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d059      	beq.n	80105f0 <osMessageQueueNew+0xdc>
    mem = -1;
 801053c:	f04f 33ff 	mov.w	r3, #4294967295
 8010540:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d029      	beq.n	801059c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d012      	beq.n	8010576 <osMessageQueueNew+0x62>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	2b4f      	cmp	r3, #79	; 0x4f
 8010556:	d90e      	bls.n	8010576 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00a      	beq.n	8010576 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	695a      	ldr	r2, [r3, #20]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	fb01 f303 	mul.w	r3, r1, r3
 801056c:	429a      	cmp	r2, r3
 801056e:	d302      	bcc.n	8010576 <osMessageQueueNew+0x62>
        mem = 1;
 8010570:	2301      	movs	r3, #1
 8010572:	61bb      	str	r3, [r7, #24]
 8010574:	e014      	b.n	80105a0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d110      	bne.n	80105a0 <osMessageQueueNew+0x8c>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10c      	bne.n	80105a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801058a:	2b00      	cmp	r3, #0
 801058c:	d108      	bne.n	80105a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d104      	bne.n	80105a0 <osMessageQueueNew+0x8c>
          mem = 0;
 8010596:	2300      	movs	r3, #0
 8010598:	61bb      	str	r3, [r7, #24]
 801059a:	e001      	b.n	80105a0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801059c:	2300      	movs	r3, #0
 801059e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d10b      	bne.n	80105be <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	691a      	ldr	r2, [r3, #16]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	2100      	movs	r1, #0
 80105b0:	9100      	str	r1, [sp, #0]
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f000 fe67 	bl	8011288 <xQueueGenericCreateStatic>
 80105ba:	61f8      	str	r0, [r7, #28]
 80105bc:	e008      	b.n	80105d0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d105      	bne.n	80105d0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80105c4:	2200      	movs	r2, #0
 80105c6:	68b9      	ldr	r1, [r7, #8]
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 fed5 	bl	8011378 <xQueueGenericCreate>
 80105ce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00c      	beq.n	80105f0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d003      	beq.n	80105e4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	617b      	str	r3, [r7, #20]
 80105e2:	e001      	b.n	80105e8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80105e4:	2300      	movs	r3, #0
 80105e6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80105e8:	6979      	ldr	r1, [r7, #20]
 80105ea:	69f8      	ldr	r0, [r7, #28]
 80105ec:	f001 fd6a 	bl	80120c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80105f0:	69fb      	ldr	r3, [r7, #28]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b088      	sub	sp, #32
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	4613      	mov	r3, r2
 801060a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010610:	2300      	movs	r3, #0
 8010612:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010614:	f3ef 8305 	mrs	r3, IPSR
 8010618:	617b      	str	r3, [r7, #20]
  return(result);
 801061a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801061c:	2b00      	cmp	r3, #0
 801061e:	d028      	beq.n	8010672 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d005      	beq.n	8010632 <osMessageQueuePut+0x36>
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <osMessageQueuePut+0x36>
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d003      	beq.n	801063a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010632:	f06f 0303 	mvn.w	r3, #3
 8010636:	61fb      	str	r3, [r7, #28]
 8010638:	e038      	b.n	80106ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801063a:	2300      	movs	r3, #0
 801063c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801063e:	f107 0210 	add.w	r2, r7, #16
 8010642:	2300      	movs	r3, #0
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	69b8      	ldr	r0, [r7, #24]
 8010648:	f001 f85c 	bl	8011704 <xQueueGenericSendFromISR>
 801064c:	4603      	mov	r3, r0
 801064e:	2b01      	cmp	r3, #1
 8010650:	d003      	beq.n	801065a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010652:	f06f 0302 	mvn.w	r3, #2
 8010656:	61fb      	str	r3, [r7, #28]
 8010658:	e028      	b.n	80106ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d025      	beq.n	80106ac <osMessageQueuePut+0xb0>
 8010660:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <osMessageQueuePut+0xbc>)
 8010662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010666:	601a      	str	r2, [r3, #0]
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	e01c      	b.n	80106ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <osMessageQueuePut+0x82>
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d103      	bne.n	8010686 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801067e:	f06f 0303 	mvn.w	r3, #3
 8010682:	61fb      	str	r3, [r7, #28]
 8010684:	e012      	b.n	80106ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010686:	2300      	movs	r3, #0
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	69b8      	ldr	r0, [r7, #24]
 801068e:	f000 ff3b 	bl	8011508 <xQueueGenericSend>
 8010692:	4603      	mov	r3, r0
 8010694:	2b01      	cmp	r3, #1
 8010696:	d009      	beq.n	80106ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d003      	beq.n	80106a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801069e:	f06f 0301 	mvn.w	r3, #1
 80106a2:	61fb      	str	r3, [r7, #28]
 80106a4:	e002      	b.n	80106ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80106a6:	f06f 0302 	mvn.w	r3, #2
 80106aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80106ac:	69fb      	ldr	r3, [r7, #28]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3720      	adds	r7, #32
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	e000ed04 	.word	0xe000ed04

080106bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
 80106c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106d2:	f3ef 8305 	mrs	r3, IPSR
 80106d6:	617b      	str	r3, [r7, #20]
  return(result);
 80106d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d028      	beq.n	8010730 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d005      	beq.n	80106f0 <osMessageQueueGet+0x34>
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d002      	beq.n	80106f0 <osMessageQueueGet+0x34>
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d003      	beq.n	80106f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80106f0:	f06f 0303 	mvn.w	r3, #3
 80106f4:	61fb      	str	r3, [r7, #28]
 80106f6:	e037      	b.n	8010768 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80106f8:	2300      	movs	r3, #0
 80106fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80106fc:	f107 0310 	add.w	r3, r7, #16
 8010700:	461a      	mov	r2, r3
 8010702:	68b9      	ldr	r1, [r7, #8]
 8010704:	69b8      	ldr	r0, [r7, #24]
 8010706:	f001 fb11 	bl	8011d2c <xQueueReceiveFromISR>
 801070a:	4603      	mov	r3, r0
 801070c:	2b01      	cmp	r3, #1
 801070e:	d003      	beq.n	8010718 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010710:	f06f 0302 	mvn.w	r3, #2
 8010714:	61fb      	str	r3, [r7, #28]
 8010716:	e027      	b.n	8010768 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d024      	beq.n	8010768 <osMessageQueueGet+0xac>
 801071e:	4b15      	ldr	r3, [pc, #84]	; (8010774 <osMessageQueueGet+0xb8>)
 8010720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	e01b      	b.n	8010768 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d002      	beq.n	801073c <osMessageQueueGet+0x80>
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d103      	bne.n	8010744 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801073c:	f06f 0303 	mvn.w	r3, #3
 8010740:	61fb      	str	r3, [r7, #28]
 8010742:	e011      	b.n	8010768 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	68b9      	ldr	r1, [r7, #8]
 8010748:	69b8      	ldr	r0, [r7, #24]
 801074a:	f001 f903 	bl	8011954 <xQueueReceive>
 801074e:	4603      	mov	r3, r0
 8010750:	2b01      	cmp	r3, #1
 8010752:	d009      	beq.n	8010768 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d003      	beq.n	8010762 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801075a:	f06f 0301 	mvn.w	r3, #1
 801075e:	61fb      	str	r3, [r7, #28]
 8010760:	e002      	b.n	8010768 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010762:	f06f 0302 	mvn.w	r3, #2
 8010766:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010768:	69fb      	ldr	r3, [r7, #28]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3720      	adds	r7, #32
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	e000ed04 	.word	0xe000ed04

08010778 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	4a07      	ldr	r2, [pc, #28]	; (80107a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	4a06      	ldr	r2, [pc, #24]	; (80107a8 <vApplicationGetIdleTaskMemory+0x30>)
 801078e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2280      	movs	r2, #128	; 0x80
 8010794:	601a      	str	r2, [r3, #0]
}
 8010796:	bf00      	nop
 8010798:	3714      	adds	r7, #20
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	240020e4 	.word	0x240020e4
 80107a8:	24002140 	.word	0x24002140

080107ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	4a07      	ldr	r2, [pc, #28]	; (80107d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80107bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	4a06      	ldr	r2, [pc, #24]	; (80107dc <vApplicationGetTimerTaskMemory+0x30>)
 80107c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80107ca:	601a      	str	r2, [r3, #0]
}
 80107cc:	bf00      	nop
 80107ce:	3714      	adds	r7, #20
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr
 80107d8:	24002340 	.word	0x24002340
 80107dc:	2400239c 	.word	0x2400239c

080107e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08a      	sub	sp, #40	; 0x28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80107e8:	2300      	movs	r3, #0
 80107ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80107ec:	f001 ff2e 	bl	801264c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80107f0:	4b5b      	ldr	r3, [pc, #364]	; (8010960 <pvPortMalloc+0x180>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80107f8:	f000 f920 	bl	8010a3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80107fc:	4b59      	ldr	r3, [pc, #356]	; (8010964 <pvPortMalloc+0x184>)
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4013      	ands	r3, r2
 8010804:	2b00      	cmp	r3, #0
 8010806:	f040 8093 	bne.w	8010930 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d01d      	beq.n	801084c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010810:	2208      	movs	r2, #8
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4413      	add	r3, r2
 8010816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f003 0307 	and.w	r3, r3, #7
 801081e:	2b00      	cmp	r3, #0
 8010820:	d014      	beq.n	801084c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f023 0307 	bic.w	r3, r3, #7
 8010828:	3308      	adds	r3, #8
 801082a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f003 0307 	and.w	r3, r3, #7
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00a      	beq.n	801084c <pvPortMalloc+0x6c>
	__asm volatile
 8010836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083a:	f383 8811 	msr	BASEPRI, r3
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	f3bf 8f4f 	dsb	sy
 8010846:	617b      	str	r3, [r7, #20]
}
 8010848:	bf00      	nop
 801084a:	e7fe      	b.n	801084a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d06e      	beq.n	8010930 <pvPortMalloc+0x150>
 8010852:	4b45      	ldr	r3, [pc, #276]	; (8010968 <pvPortMalloc+0x188>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	429a      	cmp	r2, r3
 801085a:	d869      	bhi.n	8010930 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801085c:	4b43      	ldr	r3, [pc, #268]	; (801096c <pvPortMalloc+0x18c>)
 801085e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010860:	4b42      	ldr	r3, [pc, #264]	; (801096c <pvPortMalloc+0x18c>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010866:	e004      	b.n	8010872 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	429a      	cmp	r2, r3
 801087a:	d903      	bls.n	8010884 <pvPortMalloc+0xa4>
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1f1      	bne.n	8010868 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010884:	4b36      	ldr	r3, [pc, #216]	; (8010960 <pvPortMalloc+0x180>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801088a:	429a      	cmp	r2, r3
 801088c:	d050      	beq.n	8010930 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2208      	movs	r2, #8
 8010894:	4413      	add	r3, r2
 8010896:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	6a3b      	ldr	r3, [r7, #32]
 801089e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	685a      	ldr	r2, [r3, #4]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	1ad2      	subs	r2, r2, r3
 80108a8:	2308      	movs	r3, #8
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d91f      	bls.n	80108f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4413      	add	r3, r2
 80108b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	f003 0307 	and.w	r3, r3, #7
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00a      	beq.n	80108d8 <pvPortMalloc+0xf8>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	613b      	str	r3, [r7, #16]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108da:	685a      	ldr	r2, [r3, #4]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	1ad2      	subs	r2, r2, r3
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108ea:	69b8      	ldr	r0, [r7, #24]
 80108ec:	f000 f908 	bl	8010b00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108f0:	4b1d      	ldr	r3, [pc, #116]	; (8010968 <pvPortMalloc+0x188>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	4a1b      	ldr	r2, [pc, #108]	; (8010968 <pvPortMalloc+0x188>)
 80108fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108fe:	4b1a      	ldr	r3, [pc, #104]	; (8010968 <pvPortMalloc+0x188>)
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	4b1b      	ldr	r3, [pc, #108]	; (8010970 <pvPortMalloc+0x190>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	429a      	cmp	r2, r3
 8010908:	d203      	bcs.n	8010912 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801090a:	4b17      	ldr	r3, [pc, #92]	; (8010968 <pvPortMalloc+0x188>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4a18      	ldr	r2, [pc, #96]	; (8010970 <pvPortMalloc+0x190>)
 8010910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	685a      	ldr	r2, [r3, #4]
 8010916:	4b13      	ldr	r3, [pc, #76]	; (8010964 <pvPortMalloc+0x184>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	431a      	orrs	r2, r3
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010922:	2200      	movs	r2, #0
 8010924:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010926:	4b13      	ldr	r3, [pc, #76]	; (8010974 <pvPortMalloc+0x194>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3301      	adds	r3, #1
 801092c:	4a11      	ldr	r2, [pc, #68]	; (8010974 <pvPortMalloc+0x194>)
 801092e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010930:	f001 fe9a 	bl	8012668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	f003 0307 	and.w	r3, r3, #7
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00a      	beq.n	8010954 <pvPortMalloc+0x174>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	60fb      	str	r3, [r7, #12]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <pvPortMalloc+0x172>
	return pvReturn;
 8010954:	69fb      	ldr	r3, [r7, #28]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3728      	adds	r7, #40	; 0x28
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	240063a4 	.word	0x240063a4
 8010964:	240063b8 	.word	0x240063b8
 8010968:	240063a8 	.word	0x240063a8
 801096c:	2400639c 	.word	0x2400639c
 8010970:	240063ac 	.word	0x240063ac
 8010974:	240063b0 	.word	0x240063b0

08010978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d04d      	beq.n	8010a26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801098a:	2308      	movs	r3, #8
 801098c:	425b      	negs	r3, r3
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	4413      	add	r3, r2
 8010992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	685a      	ldr	r2, [r3, #4]
 801099c:	4b24      	ldr	r3, [pc, #144]	; (8010a30 <vPortFree+0xb8>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4013      	ands	r3, r2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d10a      	bne.n	80109bc <vPortFree+0x44>
	__asm volatile
 80109a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	60fb      	str	r3, [r7, #12]
}
 80109b8:	bf00      	nop
 80109ba:	e7fe      	b.n	80109ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00a      	beq.n	80109da <vPortFree+0x62>
	__asm volatile
 80109c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c8:	f383 8811 	msr	BASEPRI, r3
 80109cc:	f3bf 8f6f 	isb	sy
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	60bb      	str	r3, [r7, #8]
}
 80109d6:	bf00      	nop
 80109d8:	e7fe      	b.n	80109d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	4b14      	ldr	r3, [pc, #80]	; (8010a30 <vPortFree+0xb8>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4013      	ands	r3, r2
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d01e      	beq.n	8010a26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d11a      	bne.n	8010a26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	685a      	ldr	r2, [r3, #4]
 80109f4:	4b0e      	ldr	r3, [pc, #56]	; (8010a30 <vPortFree+0xb8>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	43db      	mvns	r3, r3
 80109fa:	401a      	ands	r2, r3
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010a00:	f001 fe24 	bl	801264c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	685a      	ldr	r2, [r3, #4]
 8010a08:	4b0a      	ldr	r3, [pc, #40]	; (8010a34 <vPortFree+0xbc>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	4a09      	ldr	r2, [pc, #36]	; (8010a34 <vPortFree+0xbc>)
 8010a10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010a12:	6938      	ldr	r0, [r7, #16]
 8010a14:	f000 f874 	bl	8010b00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010a18:	4b07      	ldr	r3, [pc, #28]	; (8010a38 <vPortFree+0xc0>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	4a06      	ldr	r2, [pc, #24]	; (8010a38 <vPortFree+0xc0>)
 8010a20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010a22:	f001 fe21 	bl	8012668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010a26:	bf00      	nop
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	240063b8 	.word	0x240063b8
 8010a34:	240063a8 	.word	0x240063a8
 8010a38:	240063b4 	.word	0x240063b4

08010a3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010a46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010a48:	4b27      	ldr	r3, [pc, #156]	; (8010ae8 <prvHeapInit+0xac>)
 8010a4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f003 0307 	and.w	r3, r3, #7
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00c      	beq.n	8010a70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3307      	adds	r3, #7
 8010a5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f023 0307 	bic.w	r3, r3, #7
 8010a62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	4a1f      	ldr	r2, [pc, #124]	; (8010ae8 <prvHeapInit+0xac>)
 8010a6c:	4413      	add	r3, r2
 8010a6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a74:	4a1d      	ldr	r2, [pc, #116]	; (8010aec <prvHeapInit+0xb0>)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a7a:	4b1c      	ldr	r3, [pc, #112]	; (8010aec <prvHeapInit+0xb0>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	4413      	add	r3, r2
 8010a86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a88:	2208      	movs	r2, #8
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	1a9b      	subs	r3, r3, r2
 8010a8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f023 0307 	bic.w	r3, r3, #7
 8010a96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	4a15      	ldr	r2, [pc, #84]	; (8010af0 <prvHeapInit+0xb4>)
 8010a9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a9e:	4b14      	ldr	r3, [pc, #80]	; (8010af0 <prvHeapInit+0xb4>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010aa6:	4b12      	ldr	r3, [pc, #72]	; (8010af0 <prvHeapInit+0xb4>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	1ad2      	subs	r2, r2, r3
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010abc:	4b0c      	ldr	r3, [pc, #48]	; (8010af0 <prvHeapInit+0xb4>)
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	4a0a      	ldr	r2, [pc, #40]	; (8010af4 <prvHeapInit+0xb8>)
 8010aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	4a09      	ldr	r2, [pc, #36]	; (8010af8 <prvHeapInit+0xbc>)
 8010ad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ad4:	4b09      	ldr	r3, [pc, #36]	; (8010afc <prvHeapInit+0xc0>)
 8010ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ada:	601a      	str	r2, [r3, #0]
}
 8010adc:	bf00      	nop
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr
 8010ae8:	2400279c 	.word	0x2400279c
 8010aec:	2400639c 	.word	0x2400639c
 8010af0:	240063a4 	.word	0x240063a4
 8010af4:	240063ac 	.word	0x240063ac
 8010af8:	240063a8 	.word	0x240063a8
 8010afc:	240063b8 	.word	0x240063b8

08010b00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b00:	b480      	push	{r7}
 8010b02:	b085      	sub	sp, #20
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010b08:	4b28      	ldr	r3, [pc, #160]	; (8010bac <prvInsertBlockIntoFreeList+0xac>)
 8010b0a:	60fb      	str	r3, [r7, #12]
 8010b0c:	e002      	b.n	8010b14 <prvInsertBlockIntoFreeList+0x14>
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d8f7      	bhi.n	8010b0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	4413      	add	r3, r2
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d108      	bne.n	8010b42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	685a      	ldr	r2, [r3, #4]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	441a      	add	r2, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	441a      	add	r2, r3
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d118      	bne.n	8010b88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	4b15      	ldr	r3, [pc, #84]	; (8010bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d00d      	beq.n	8010b7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	685a      	ldr	r2, [r3, #4]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	441a      	add	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	e008      	b.n	8010b90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b7e:	4b0c      	ldr	r3, [pc, #48]	; (8010bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	601a      	str	r2, [r3, #0]
 8010b86:	e003      	b.n	8010b90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d002      	beq.n	8010b9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b9e:	bf00      	nop
 8010ba0:	3714      	adds	r7, #20
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	2400639c 	.word	0x2400639c
 8010bb0:	240063a4 	.word	0x240063a4

08010bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f103 0208 	add.w	r2, r3, #8
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f103 0208 	add.w	r2, r3, #8
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f103 0208 	add.w	r2, r3, #8
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr

08010c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b085      	sub	sp, #20
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
 8010c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	689a      	ldr	r2, [r3, #8]
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c6c:	d103      	bne.n	8010c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	e00c      	b.n	8010c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3308      	adds	r3, #8
 8010c7a:	60fb      	str	r3, [r7, #12]
 8010c7c:	e002      	b.n	8010c84 <vListInsert+0x2e>
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	60fb      	str	r3, [r7, #12]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d2f6      	bcs.n	8010c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	1c5a      	adds	r2, r3, #1
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	601a      	str	r2, [r3, #0]
}
 8010cbc:	bf00      	nop
 8010cbe:	3714      	adds	r7, #20
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	6892      	ldr	r2, [r2, #8]
 8010cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	6852      	ldr	r2, [r2, #4]
 8010ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d103      	bne.n	8010cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	689a      	ldr	r2, [r3, #8]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	1e5a      	subs	r2, r3, #1
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	3b04      	subs	r3, #4
 8010d2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3b04      	subs	r3, #4
 8010d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	f023 0201 	bic.w	r2, r3, #1
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	3b04      	subs	r3, #4
 8010d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d4c:	4a0c      	ldr	r2, [pc, #48]	; (8010d80 <pxPortInitialiseStack+0x64>)
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	3b14      	subs	r3, #20
 8010d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3b04      	subs	r3, #4
 8010d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f06f 0202 	mvn.w	r2, #2
 8010d6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3b20      	subs	r3, #32
 8010d70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d72:	68fb      	ldr	r3, [r7, #12]
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr
 8010d80:	08010d85 	.word	0x08010d85

08010d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d8e:	4b12      	ldr	r3, [pc, #72]	; (8010dd8 <prvTaskExitError+0x54>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d96:	d00a      	beq.n	8010dae <prvTaskExitError+0x2a>
	__asm volatile
 8010d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	60fb      	str	r3, [r7, #12]
}
 8010daa:	bf00      	nop
 8010dac:	e7fe      	b.n	8010dac <prvTaskExitError+0x28>
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	60bb      	str	r3, [r7, #8]
}
 8010dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dc2:	bf00      	nop
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d0fc      	beq.n	8010dc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010dca:	bf00      	nop
 8010dcc:	bf00      	nop
 8010dce:	3714      	adds	r7, #20
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	2400004c 	.word	0x2400004c
 8010ddc:	00000000 	.word	0x00000000

08010de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010de0:	4b07      	ldr	r3, [pc, #28]	; (8010e00 <pxCurrentTCBConst2>)
 8010de2:	6819      	ldr	r1, [r3, #0]
 8010de4:	6808      	ldr	r0, [r1, #0]
 8010de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dea:	f380 8809 	msr	PSP, r0
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f04f 0000 	mov.w	r0, #0
 8010df6:	f380 8811 	msr	BASEPRI, r0
 8010dfa:	4770      	bx	lr
 8010dfc:	f3af 8000 	nop.w

08010e00 <pxCurrentTCBConst2>:
 8010e00:	24006404 	.word	0x24006404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e04:	bf00      	nop
 8010e06:	bf00      	nop

08010e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e08:	4808      	ldr	r0, [pc, #32]	; (8010e2c <prvPortStartFirstTask+0x24>)
 8010e0a:	6800      	ldr	r0, [r0, #0]
 8010e0c:	6800      	ldr	r0, [r0, #0]
 8010e0e:	f380 8808 	msr	MSP, r0
 8010e12:	f04f 0000 	mov.w	r0, #0
 8010e16:	f380 8814 	msr	CONTROL, r0
 8010e1a:	b662      	cpsie	i
 8010e1c:	b661      	cpsie	f
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	df00      	svc	0
 8010e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e2a:	bf00      	nop
 8010e2c:	e000ed08 	.word	0xe000ed08

08010e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e36:	4b46      	ldr	r3, [pc, #280]	; (8010f50 <xPortStartScheduler+0x120>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a46      	ldr	r2, [pc, #280]	; (8010f54 <xPortStartScheduler+0x124>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d10a      	bne.n	8010e56 <xPortStartScheduler+0x26>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	613b      	str	r3, [r7, #16]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e56:	4b3e      	ldr	r3, [pc, #248]	; (8010f50 <xPortStartScheduler+0x120>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a3f      	ldr	r2, [pc, #252]	; (8010f58 <xPortStartScheduler+0x128>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d10a      	bne.n	8010e76 <xPortStartScheduler+0x46>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	60fb      	str	r3, [r7, #12]
}
 8010e72:	bf00      	nop
 8010e74:	e7fe      	b.n	8010e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e76:	4b39      	ldr	r3, [pc, #228]	; (8010f5c <xPortStartScheduler+0x12c>)
 8010e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	22ff      	movs	r2, #255	; 0xff
 8010e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e90:	78fb      	ldrb	r3, [r7, #3]
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b31      	ldr	r3, [pc, #196]	; (8010f60 <xPortStartScheduler+0x130>)
 8010e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e9e:	4b31      	ldr	r3, [pc, #196]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ea4:	e009      	b.n	8010eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ea6:	4b2f      	ldr	r3, [pc, #188]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4a2d      	ldr	r2, [pc, #180]	; (8010f64 <xPortStartScheduler+0x134>)
 8010eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010eb0:	78fb      	ldrb	r3, [r7, #3]
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ec2:	2b80      	cmp	r3, #128	; 0x80
 8010ec4:	d0ef      	beq.n	8010ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ec6:	4b27      	ldr	r3, [pc, #156]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f1c3 0307 	rsb	r3, r3, #7
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	d00a      	beq.n	8010ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	60bb      	str	r3, [r7, #8]
}
 8010ee4:	bf00      	nop
 8010ee6:	e7fe      	b.n	8010ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ee8:	4b1e      	ldr	r3, [pc, #120]	; (8010f64 <xPortStartScheduler+0x134>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	021b      	lsls	r3, r3, #8
 8010eee:	4a1d      	ldr	r2, [pc, #116]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ef2:	4b1c      	ldr	r3, [pc, #112]	; (8010f64 <xPortStartScheduler+0x134>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010efa:	4a1a      	ldr	r2, [pc, #104]	; (8010f64 <xPortStartScheduler+0x134>)
 8010efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f06:	4b18      	ldr	r3, [pc, #96]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a17      	ldr	r2, [pc, #92]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f12:	4b15      	ldr	r3, [pc, #84]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a14      	ldr	r2, [pc, #80]	; (8010f68 <xPortStartScheduler+0x138>)
 8010f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f1e:	f000 f8dd 	bl	80110dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f22:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <xPortStartScheduler+0x13c>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f28:	f000 f8fc 	bl	8011124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f2c:	4b10      	ldr	r3, [pc, #64]	; (8010f70 <xPortStartScheduler+0x140>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a0f      	ldr	r2, [pc, #60]	; (8010f70 <xPortStartScheduler+0x140>)
 8010f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f38:	f7ff ff66 	bl	8010e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f3c:	f001 fcfc 	bl	8012938 <vTaskSwitchContext>
	prvTaskExitError();
 8010f40:	f7ff ff20 	bl	8010d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	e000ed00 	.word	0xe000ed00
 8010f54:	410fc271 	.word	0x410fc271
 8010f58:	410fc270 	.word	0x410fc270
 8010f5c:	e000e400 	.word	0xe000e400
 8010f60:	240063bc 	.word	0x240063bc
 8010f64:	240063c0 	.word	0x240063c0
 8010f68:	e000ed20 	.word	0xe000ed20
 8010f6c:	2400004c 	.word	0x2400004c
 8010f70:	e000ef34 	.word	0xe000ef34

08010f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
	__asm volatile
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	607b      	str	r3, [r7, #4]
}
 8010f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3301      	adds	r3, #1
 8010f94:	4a0d      	ldr	r2, [pc, #52]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f98:	4b0c      	ldr	r3, [pc, #48]	; (8010fcc <vPortEnterCritical+0x58>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d10f      	bne.n	8010fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010fa0:	4b0b      	ldr	r3, [pc, #44]	; (8010fd0 <vPortEnterCritical+0x5c>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00a      	beq.n	8010fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	603b      	str	r3, [r7, #0]
}
 8010fbc:	bf00      	nop
 8010fbe:	e7fe      	b.n	8010fbe <vPortEnterCritical+0x4a>
	}
}
 8010fc0:	bf00      	nop
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	2400004c 	.word	0x2400004c
 8010fd0:	e000ed04 	.word	0xe000ed04

08010fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010fda:	4b12      	ldr	r3, [pc, #72]	; (8011024 <vPortExitCritical+0x50>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d10a      	bne.n	8010ff8 <vPortExitCritical+0x24>
	__asm volatile
 8010fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe6:	f383 8811 	msr	BASEPRI, r3
 8010fea:	f3bf 8f6f 	isb	sy
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	607b      	str	r3, [r7, #4]
}
 8010ff4:	bf00      	nop
 8010ff6:	e7fe      	b.n	8010ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <vPortExitCritical+0x50>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	4a09      	ldr	r2, [pc, #36]	; (8011024 <vPortExitCritical+0x50>)
 8011000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011002:	4b08      	ldr	r3, [pc, #32]	; (8011024 <vPortExitCritical+0x50>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d105      	bne.n	8011016 <vPortExitCritical+0x42>
 801100a:	2300      	movs	r3, #0
 801100c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011016:	bf00      	nop
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	2400004c 	.word	0x2400004c
	...

08011030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011030:	f3ef 8009 	mrs	r0, PSP
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	4b15      	ldr	r3, [pc, #84]	; (8011090 <pxCurrentTCBConst>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	f01e 0f10 	tst.w	lr, #16
 8011040:	bf08      	it	eq
 8011042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104a:	6010      	str	r0, [r2, #0]
 801104c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011054:	f380 8811 	msr	BASEPRI, r0
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	f001 fc6a 	bl	8012938 <vTaskSwitchContext>
 8011064:	f04f 0000 	mov.w	r0, #0
 8011068:	f380 8811 	msr	BASEPRI, r0
 801106c:	bc09      	pop	{r0, r3}
 801106e:	6819      	ldr	r1, [r3, #0]
 8011070:	6808      	ldr	r0, [r1, #0]
 8011072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011076:	f01e 0f10 	tst.w	lr, #16
 801107a:	bf08      	it	eq
 801107c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011080:	f380 8809 	msr	PSP, r0
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	4770      	bx	lr
 801108a:	bf00      	nop
 801108c:	f3af 8000 	nop.w

08011090 <pxCurrentTCBConst>:
 8011090:	24006404 	.word	0x24006404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop

08011098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
	__asm volatile
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	607b      	str	r3, [r7, #4]
}
 80110b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80110b2:	f001 fb87 	bl	80127c4 <xTaskIncrementTick>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80110bc:	4b06      	ldr	r3, [pc, #24]	; (80110d8 <xPortSysTickHandler+0x40>)
 80110be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	2300      	movs	r3, #0
 80110c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	f383 8811 	msr	BASEPRI, r3
}
 80110ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80110dc:	b480      	push	{r7}
 80110de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80110e0:	4b0b      	ldr	r3, [pc, #44]	; (8011110 <vPortSetupTimerInterrupt+0x34>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80110e6:	4b0b      	ldr	r3, [pc, #44]	; (8011114 <vPortSetupTimerInterrupt+0x38>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110ec:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <vPortSetupTimerInterrupt+0x3c>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	; (801111c <vPortSetupTimerInterrupt+0x40>)
 80110f2:	fba2 2303 	umull	r2, r3, r2, r3
 80110f6:	099b      	lsrs	r3, r3, #6
 80110f8:	4a09      	ldr	r2, [pc, #36]	; (8011120 <vPortSetupTimerInterrupt+0x44>)
 80110fa:	3b01      	subs	r3, #1
 80110fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110fe:	4b04      	ldr	r3, [pc, #16]	; (8011110 <vPortSetupTimerInterrupt+0x34>)
 8011100:	2207      	movs	r2, #7
 8011102:	601a      	str	r2, [r3, #0]
}
 8011104:	bf00      	nop
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	e000e010 	.word	0xe000e010
 8011114:	e000e018 	.word	0xe000e018
 8011118:	2400003c 	.word	0x2400003c
 801111c:	10624dd3 	.word	0x10624dd3
 8011120:	e000e014 	.word	0xe000e014

08011124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011134 <vPortEnableVFP+0x10>
 8011128:	6801      	ldr	r1, [r0, #0]
 801112a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801112e:	6001      	str	r1, [r0, #0]
 8011130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011132:	bf00      	nop
 8011134:	e000ed88 	.word	0xe000ed88

08011138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801113e:	f3ef 8305 	mrs	r3, IPSR
 8011142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b0f      	cmp	r3, #15
 8011148:	d914      	bls.n	8011174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801114a:	4a17      	ldr	r2, [pc, #92]	; (80111a8 <vPortValidateInterruptPriority+0x70>)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	4413      	add	r3, r2
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011154:	4b15      	ldr	r3, [pc, #84]	; (80111ac <vPortValidateInterruptPriority+0x74>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	7afa      	ldrb	r2, [r7, #11]
 801115a:	429a      	cmp	r2, r3
 801115c:	d20a      	bcs.n	8011174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	607b      	str	r3, [r7, #4]
}
 8011170:	bf00      	nop
 8011172:	e7fe      	b.n	8011172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011174:	4b0e      	ldr	r3, [pc, #56]	; (80111b0 <vPortValidateInterruptPriority+0x78>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801117c:	4b0d      	ldr	r3, [pc, #52]	; (80111b4 <vPortValidateInterruptPriority+0x7c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	429a      	cmp	r2, r3
 8011182:	d90a      	bls.n	801119a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	603b      	str	r3, [r7, #0]
}
 8011196:	bf00      	nop
 8011198:	e7fe      	b.n	8011198 <vPortValidateInterruptPriority+0x60>
	}
 801119a:	bf00      	nop
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	e000e3f0 	.word	0xe000e3f0
 80111ac:	240063bc 	.word	0x240063bc
 80111b0:	e000ed0c 	.word	0xe000ed0c
 80111b4:	240063c0 	.word	0x240063c0

080111b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10a      	bne.n	80111e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80111cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d0:	f383 8811 	msr	BASEPRI, r3
 80111d4:	f3bf 8f6f 	isb	sy
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	60bb      	str	r3, [r7, #8]
}
 80111de:	bf00      	nop
 80111e0:	e7fe      	b.n	80111e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80111e2:	f7ff fec7 	bl	8010f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ee:	68f9      	ldr	r1, [r7, #12]
 80111f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111f2:	fb01 f303 	mul.w	r3, r1, r3
 80111f6:	441a      	add	r2, r3
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2200      	movs	r2, #0
 8011200:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011212:	3b01      	subs	r3, #1
 8011214:	68f9      	ldr	r1, [r7, #12]
 8011216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011218:	fb01 f303 	mul.w	r3, r1, r3
 801121c:	441a      	add	r2, r3
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	22ff      	movs	r2, #255	; 0xff
 8011226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	22ff      	movs	r2, #255	; 0xff
 801122e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d114      	bne.n	8011262 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d01a      	beq.n	8011276 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	3310      	adds	r3, #16
 8011244:	4618      	mov	r0, r3
 8011246:	f001 fc25 	bl	8012a94 <xTaskRemoveFromEventList>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d012      	beq.n	8011276 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011250:	4b0c      	ldr	r3, [pc, #48]	; (8011284 <xQueueGenericReset+0xcc>)
 8011252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011256:	601a      	str	r2, [r3, #0]
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	e009      	b.n	8011276 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	3310      	adds	r3, #16
 8011266:	4618      	mov	r0, r3
 8011268:	f7ff fca4 	bl	8010bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	3324      	adds	r3, #36	; 0x24
 8011270:	4618      	mov	r0, r3
 8011272:	f7ff fc9f 	bl	8010bb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011276:	f7ff fead 	bl	8010fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801127a:	2301      	movs	r3, #1
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011288:	b580      	push	{r7, lr}
 801128a:	b08e      	sub	sp, #56	; 0x38
 801128c:	af02      	add	r7, sp, #8
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
 8011294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d10a      	bne.n	80112b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a0:	f383 8811 	msr	BASEPRI, r3
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80112ae:	bf00      	nop
 80112b0:	e7fe      	b.n	80112b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d10a      	bne.n	80112ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80112b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80112ca:	bf00      	nop
 80112cc:	e7fe      	b.n	80112cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <xQueueGenericCreateStatic+0x52>
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <xQueueGenericCreateStatic+0x56>
 80112da:	2301      	movs	r3, #1
 80112dc:	e000      	b.n	80112e0 <xQueueGenericCreateStatic+0x58>
 80112de:	2300      	movs	r3, #0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d10a      	bne.n	80112fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80112e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e8:	f383 8811 	msr	BASEPRI, r3
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f3bf 8f4f 	dsb	sy
 80112f4:	623b      	str	r3, [r7, #32]
}
 80112f6:	bf00      	nop
 80112f8:	e7fe      	b.n	80112f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d102      	bne.n	8011306 <xQueueGenericCreateStatic+0x7e>
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <xQueueGenericCreateStatic+0x82>
 8011306:	2301      	movs	r3, #1
 8011308:	e000      	b.n	801130c <xQueueGenericCreateStatic+0x84>
 801130a:	2300      	movs	r3, #0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10a      	bne.n	8011326 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	61fb      	str	r3, [r7, #28]
}
 8011322:	bf00      	nop
 8011324:	e7fe      	b.n	8011324 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011326:	2350      	movs	r3, #80	; 0x50
 8011328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	2b50      	cmp	r3, #80	; 0x50
 801132e:	d00a      	beq.n	8011346 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011334:	f383 8811 	msr	BASEPRI, r3
 8011338:	f3bf 8f6f 	isb	sy
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	61bb      	str	r3, [r7, #24]
}
 8011342:	bf00      	nop
 8011344:	e7fe      	b.n	8011344 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00d      	beq.n	801136e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	2201      	movs	r2, #1
 8011356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801135a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	4613      	mov	r3, r2
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	68b9      	ldr	r1, [r7, #8]
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f000 f83f 	bl	80113ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011370:	4618      	mov	r0, r3
 8011372:	3730      	adds	r7, #48	; 0x30
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011378:	b580      	push	{r7, lr}
 801137a:	b08a      	sub	sp, #40	; 0x28
 801137c:	af02      	add	r7, sp, #8
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	4613      	mov	r3, r2
 8011384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d10a      	bne.n	80113a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011390:	f383 8811 	msr	BASEPRI, r3
 8011394:	f3bf 8f6f 	isb	sy
 8011398:	f3bf 8f4f 	dsb	sy
 801139c:	613b      	str	r3, [r7, #16]
}
 801139e:	bf00      	nop
 80113a0:	e7fe      	b.n	80113a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	fb02 f303 	mul.w	r3, r2, r3
 80113aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	3350      	adds	r3, #80	; 0x50
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff fa15 	bl	80107e0 <pvPortMalloc>
 80113b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d011      	beq.n	80113e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	3350      	adds	r3, #80	; 0x50
 80113c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113d0:	79fa      	ldrb	r2, [r7, #7]
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	4613      	mov	r3, r2
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	68b9      	ldr	r1, [r7, #8]
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 f805 	bl	80113ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80113e2:	69bb      	ldr	r3, [r7, #24]
	}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3720      	adds	r7, #32
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
 80113f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d103      	bne.n	8011408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	69ba      	ldr	r2, [r7, #24]
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	e002      	b.n	801140e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011408:	69bb      	ldr	r3, [r7, #24]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	68fa      	ldr	r2, [r7, #12]
 8011412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801141a:	2101      	movs	r1, #1
 801141c:	69b8      	ldr	r0, [r7, #24]
 801141e:	f7ff fecb 	bl	80111b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	78fa      	ldrb	r2, [r7, #3]
 8011426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801142a:	bf00      	nop
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011432:	b580      	push	{r7, lr}
 8011434:	b08a      	sub	sp, #40	; 0x28
 8011436:	af02      	add	r7, sp, #8
 8011438:	60f8      	str	r0, [r7, #12]
 801143a:	60b9      	str	r1, [r7, #8]
 801143c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d10a      	bne.n	801145a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8011444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	61bb      	str	r3, [r7, #24]
}
 8011456:	bf00      	nop
 8011458:	e7fe      	b.n	8011458 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	429a      	cmp	r2, r3
 8011460:	d90a      	bls.n	8011478 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8011462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	617b      	str	r3, [r7, #20]
}
 8011474:	bf00      	nop
 8011476:	e7fe      	b.n	8011476 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011478:	2302      	movs	r3, #2
 801147a:	9300      	str	r3, [sp, #0]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	2100      	movs	r1, #0
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ff ff00 	bl	8011288 <xQueueGenericCreateStatic>
 8011488:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d002      	beq.n	8011496 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011496:	69fb      	ldr	r3, [r7, #28]
	}
 8011498:	4618      	mov	r0, r3
 801149a:	3720      	adds	r7, #32
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10a      	bne.n	80114c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80114b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	613b      	str	r3, [r7, #16]
}
 80114c2:	bf00      	nop
 80114c4:	e7fe      	b.n	80114c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d90a      	bls.n	80114e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d2:	f383 8811 	msr	BASEPRI, r3
 80114d6:	f3bf 8f6f 	isb	sy
 80114da:	f3bf 8f4f 	dsb	sy
 80114de:	60fb      	str	r3, [r7, #12]
}
 80114e0:	bf00      	nop
 80114e2:	e7fe      	b.n	80114e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80114e4:	2202      	movs	r2, #2
 80114e6:	2100      	movs	r1, #0
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7ff ff45 	bl	8011378 <xQueueGenericCreate>
 80114ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	683a      	ldr	r2, [r7, #0]
 80114fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80114fc:	697b      	ldr	r3, [r7, #20]
	}
 80114fe:	4618      	mov	r0, r3
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
	...

08011508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b08e      	sub	sp, #56	; 0x38
 801150c:	af00      	add	r7, sp, #0
 801150e:	60f8      	str	r0, [r7, #12]
 8011510:	60b9      	str	r1, [r7, #8]
 8011512:	607a      	str	r2, [r7, #4]
 8011514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011516:	2300      	movs	r3, #0
 8011518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801151e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10a      	bne.n	801153a <xQueueGenericSend+0x32>
	__asm volatile
 8011524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011528:	f383 8811 	msr	BASEPRI, r3
 801152c:	f3bf 8f6f 	isb	sy
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011536:	bf00      	nop
 8011538:	e7fe      	b.n	8011538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d103      	bne.n	8011548 <xQueueGenericSend+0x40>
 8011540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <xQueueGenericSend+0x44>
 8011548:	2301      	movs	r3, #1
 801154a:	e000      	b.n	801154e <xQueueGenericSend+0x46>
 801154c:	2300      	movs	r3, #0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d10a      	bne.n	8011568 <xQueueGenericSend+0x60>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011556:	f383 8811 	msr	BASEPRI, r3
 801155a:	f3bf 8f6f 	isb	sy
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011564:	bf00      	nop
 8011566:	e7fe      	b.n	8011566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2b02      	cmp	r3, #2
 801156c:	d103      	bne.n	8011576 <xQueueGenericSend+0x6e>
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011572:	2b01      	cmp	r3, #1
 8011574:	d101      	bne.n	801157a <xQueueGenericSend+0x72>
 8011576:	2301      	movs	r3, #1
 8011578:	e000      	b.n	801157c <xQueueGenericSend+0x74>
 801157a:	2300      	movs	r3, #0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10a      	bne.n	8011596 <xQueueGenericSend+0x8e>
	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	623b      	str	r3, [r7, #32]
}
 8011592:	bf00      	nop
 8011594:	e7fe      	b.n	8011594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011596:	f001 fc3b 	bl	8012e10 <xTaskGetSchedulerState>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <xQueueGenericSend+0x9e>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d101      	bne.n	80115aa <xQueueGenericSend+0xa2>
 80115a6:	2301      	movs	r3, #1
 80115a8:	e000      	b.n	80115ac <xQueueGenericSend+0xa4>
 80115aa:	2300      	movs	r3, #0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10a      	bne.n	80115c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	61fb      	str	r3, [r7, #28]
}
 80115c2:	bf00      	nop
 80115c4:	e7fe      	b.n	80115c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115c6:	f7ff fcd5 	bl	8010f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d302      	bcc.n	80115dc <xQueueGenericSend+0xd4>
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	2b02      	cmp	r3, #2
 80115da:	d129      	bne.n	8011630 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115dc:	683a      	ldr	r2, [r7, #0]
 80115de:	68b9      	ldr	r1, [r7, #8]
 80115e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115e2:	f000 fc5e 	bl	8011ea2 <prvCopyDataToQueue>
 80115e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d010      	beq.n	8011612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f2:	3324      	adds	r3, #36	; 0x24
 80115f4:	4618      	mov	r0, r3
 80115f6:	f001 fa4d 	bl	8012a94 <xTaskRemoveFromEventList>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d013      	beq.n	8011628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011600:	4b3f      	ldr	r3, [pc, #252]	; (8011700 <xQueueGenericSend+0x1f8>)
 8011602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011606:	601a      	str	r2, [r3, #0]
 8011608:	f3bf 8f4f 	dsb	sy
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	e00a      	b.n	8011628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011614:	2b00      	cmp	r3, #0
 8011616:	d007      	beq.n	8011628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011618:	4b39      	ldr	r3, [pc, #228]	; (8011700 <xQueueGenericSend+0x1f8>)
 801161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011628:	f7ff fcd4 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 801162c:	2301      	movs	r3, #1
 801162e:	e063      	b.n	80116f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d103      	bne.n	801163e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011636:	f7ff fccd 	bl	8010fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801163a:	2300      	movs	r3, #0
 801163c:	e05c      	b.n	80116f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011640:	2b00      	cmp	r3, #0
 8011642:	d106      	bne.n	8011652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011644:	f107 0314 	add.w	r3, r7, #20
 8011648:	4618      	mov	r0, r3
 801164a:	f001 fa87 	bl	8012b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801164e:	2301      	movs	r3, #1
 8011650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011652:	f7ff fcbf 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011656:	f000 fff9 	bl	801264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801165a:	f7ff fc8b 	bl	8010f74 <vPortEnterCritical>
 801165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011664:	b25b      	sxtb	r3, r3
 8011666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166a:	d103      	bne.n	8011674 <xQueueGenericSend+0x16c>
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	2200      	movs	r2, #0
 8011670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801167a:	b25b      	sxtb	r3, r3
 801167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011680:	d103      	bne.n	801168a <xQueueGenericSend+0x182>
 8011682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011684:	2200      	movs	r2, #0
 8011686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801168a:	f7ff fca3 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801168e:	1d3a      	adds	r2, r7, #4
 8011690:	f107 0314 	add.w	r3, r7, #20
 8011694:	4611      	mov	r1, r2
 8011696:	4618      	mov	r0, r3
 8011698:	f001 fa76 	bl	8012b88 <xTaskCheckForTimeOut>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d124      	bne.n	80116ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116a4:	f000 fcf5 	bl	8012092 <prvIsQueueFull>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d018      	beq.n	80116e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b0:	3310      	adds	r3, #16
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	4611      	mov	r1, r2
 80116b6:	4618      	mov	r0, r3
 80116b8:	f001 f99c 	bl	80129f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116be:	f000 fc80 	bl	8011fc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116c2:	f000 ffd1 	bl	8012668 <xTaskResumeAll>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f47f af7c 	bne.w	80115c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80116ce:	4b0c      	ldr	r3, [pc, #48]	; (8011700 <xQueueGenericSend+0x1f8>)
 80116d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	f3bf 8f6f 	isb	sy
 80116de:	e772      	b.n	80115c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80116e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116e2:	f000 fc6e 	bl	8011fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116e6:	f000 ffbf 	bl	8012668 <xTaskResumeAll>
 80116ea:	e76c      	b.n	80115c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80116ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116ee:	f000 fc68 	bl	8011fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116f2:	f000 ffb9 	bl	8012668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80116f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3738      	adds	r7, #56	; 0x38
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	e000ed04 	.word	0xe000ed04

08011704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b090      	sub	sp, #64	; 0x40
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
 8011710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	2b00      	cmp	r3, #0
 801171a:	d10a      	bne.n	8011732 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011720:	f383 8811 	msr	BASEPRI, r3
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801172e:	bf00      	nop
 8011730:	e7fe      	b.n	8011730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d103      	bne.n	8011740 <xQueueGenericSendFromISR+0x3c>
 8011738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801173c:	2b00      	cmp	r3, #0
 801173e:	d101      	bne.n	8011744 <xQueueGenericSendFromISR+0x40>
 8011740:	2301      	movs	r3, #1
 8011742:	e000      	b.n	8011746 <xQueueGenericSendFromISR+0x42>
 8011744:	2300      	movs	r3, #0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10a      	bne.n	8011760 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801175c:	bf00      	nop
 801175e:	e7fe      	b.n	801175e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	2b02      	cmp	r3, #2
 8011764:	d103      	bne.n	801176e <xQueueGenericSendFromISR+0x6a>
 8011766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801176a:	2b01      	cmp	r3, #1
 801176c:	d101      	bne.n	8011772 <xQueueGenericSendFromISR+0x6e>
 801176e:	2301      	movs	r3, #1
 8011770:	e000      	b.n	8011774 <xQueueGenericSendFromISR+0x70>
 8011772:	2300      	movs	r3, #0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10a      	bne.n	801178e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	623b      	str	r3, [r7, #32]
}
 801178a:	bf00      	nop
 801178c:	e7fe      	b.n	801178c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801178e:	f7ff fcd3 	bl	8011138 <vPortValidateInterruptPriority>
	__asm volatile
 8011792:	f3ef 8211 	mrs	r2, BASEPRI
 8011796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	61fa      	str	r2, [r7, #28]
 80117a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80117aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d302      	bcc.n	80117c0 <xQueueGenericSendFromISR+0xbc>
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d12f      	bne.n	8011820 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117d0:	683a      	ldr	r2, [r7, #0]
 80117d2:	68b9      	ldr	r1, [r7, #8]
 80117d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117d6:	f000 fb64 	bl	8011ea2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e2:	d112      	bne.n	801180a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d016      	beq.n	801181a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	3324      	adds	r3, #36	; 0x24
 80117f0:	4618      	mov	r0, r3
 80117f2:	f001 f94f 	bl	8012a94 <xTaskRemoveFromEventList>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00e      	beq.n	801181a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00b      	beq.n	801181a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	601a      	str	r2, [r3, #0]
 8011808:	e007      	b.n	801181a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801180a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801180e:	3301      	adds	r3, #1
 8011810:	b2db      	uxtb	r3, r3
 8011812:	b25a      	sxtb	r2, r3
 8011814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801181a:	2301      	movs	r3, #1
 801181c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801181e:	e001      	b.n	8011824 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011820:	2300      	movs	r3, #0
 8011822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011826:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	f383 8811 	msr	BASEPRI, r3
}
 801182e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011832:	4618      	mov	r0, r3
 8011834:	3740      	adds	r7, #64	; 0x40
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b08e      	sub	sp, #56	; 0x38
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10a      	bne.n	8011864 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011852:	f383 8811 	msr	BASEPRI, r3
 8011856:	f3bf 8f6f 	isb	sy
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	623b      	str	r3, [r7, #32]
}
 8011860:	bf00      	nop
 8011862:	e7fe      	b.n	8011862 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00a      	beq.n	8011882 <xQueueGiveFromISR+0x48>
	__asm volatile
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	f383 8811 	msr	BASEPRI, r3
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	61fb      	str	r3, [r7, #28]
}
 801187e:	bf00      	nop
 8011880:	e7fe      	b.n	8011880 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <xQueueGiveFromISR+0x58>
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d101      	bne.n	8011896 <xQueueGiveFromISR+0x5c>
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <xQueueGiveFromISR+0x5e>
 8011896:	2300      	movs	r3, #0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10a      	bne.n	80118b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	61bb      	str	r3, [r7, #24]
}
 80118ae:	bf00      	nop
 80118b0:	e7fe      	b.n	80118b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118b2:	f7ff fc41 	bl	8011138 <vPortValidateInterruptPriority>
	__asm volatile
 80118b6:	f3ef 8211 	mrs	r2, BASEPRI
 80118ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118be:	f383 8811 	msr	BASEPRI, r3
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	f3bf 8f4f 	dsb	sy
 80118ca:	617a      	str	r2, [r7, #20]
 80118cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80118ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80118d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118de:	429a      	cmp	r2, r3
 80118e0:	d22b      	bcs.n	801193a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80118ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ee:	1c5a      	adds	r2, r3, #1
 80118f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118fc:	d112      	bne.n	8011924 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011902:	2b00      	cmp	r3, #0
 8011904:	d016      	beq.n	8011934 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011908:	3324      	adds	r3, #36	; 0x24
 801190a:	4618      	mov	r0, r3
 801190c:	f001 f8c2 	bl	8012a94 <xTaskRemoveFromEventList>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00e      	beq.n	8011934 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00b      	beq.n	8011934 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	2201      	movs	r2, #1
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	e007      	b.n	8011934 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011928:	3301      	adds	r3, #1
 801192a:	b2db      	uxtb	r3, r3
 801192c:	b25a      	sxtb	r2, r3
 801192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011934:	2301      	movs	r3, #1
 8011936:	637b      	str	r3, [r7, #52]	; 0x34
 8011938:	e001      	b.n	801193e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801193a:	2300      	movs	r3, #0
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f383 8811 	msr	BASEPRI, r3
}
 8011948:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801194c:	4618      	mov	r0, r3
 801194e:	3738      	adds	r7, #56	; 0x38
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b08c      	sub	sp, #48	; 0x30
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011960:	2300      	movs	r3, #0
 8011962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10a      	bne.n	8011984 <xQueueReceive+0x30>
	__asm volatile
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	f383 8811 	msr	BASEPRI, r3
 8011976:	f3bf 8f6f 	isb	sy
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	623b      	str	r3, [r7, #32]
}
 8011980:	bf00      	nop
 8011982:	e7fe      	b.n	8011982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d103      	bne.n	8011992 <xQueueReceive+0x3e>
 801198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <xQueueReceive+0x42>
 8011992:	2301      	movs	r3, #1
 8011994:	e000      	b.n	8011998 <xQueueReceive+0x44>
 8011996:	2300      	movs	r3, #0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d10a      	bne.n	80119b2 <xQueueReceive+0x5e>
	__asm volatile
 801199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	61fb      	str	r3, [r7, #28]
}
 80119ae:	bf00      	nop
 80119b0:	e7fe      	b.n	80119b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119b2:	f001 fa2d 	bl	8012e10 <xTaskGetSchedulerState>
 80119b6:	4603      	mov	r3, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d102      	bne.n	80119c2 <xQueueReceive+0x6e>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <xQueueReceive+0x72>
 80119c2:	2301      	movs	r3, #1
 80119c4:	e000      	b.n	80119c8 <xQueueReceive+0x74>
 80119c6:	2300      	movs	r3, #0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d10a      	bne.n	80119e2 <xQueueReceive+0x8e>
	__asm volatile
 80119cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d0:	f383 8811 	msr	BASEPRI, r3
 80119d4:	f3bf 8f6f 	isb	sy
 80119d8:	f3bf 8f4f 	dsb	sy
 80119dc:	61bb      	str	r3, [r7, #24]
}
 80119de:	bf00      	nop
 80119e0:	e7fe      	b.n	80119e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119e2:	f7ff fac7 	bl	8010f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d01f      	beq.n	8011a32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119f2:	68b9      	ldr	r1, [r7, #8]
 80119f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f6:	f000 fabe 	bl	8011f76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	1e5a      	subs	r2, r3, #1
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a04:	691b      	ldr	r3, [r3, #16]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00f      	beq.n	8011a2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0c:	3310      	adds	r3, #16
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f001 f840 	bl	8012a94 <xTaskRemoveFromEventList>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d007      	beq.n	8011a2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a1a:	4b3d      	ldr	r3, [pc, #244]	; (8011b10 <xQueueReceive+0x1bc>)
 8011a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	f3bf 8f4f 	dsb	sy
 8011a26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a2a:	f7ff fad3 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e069      	b.n	8011b06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d103      	bne.n	8011a40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a38:	f7ff facc 	bl	8010fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e062      	b.n	8011b06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d106      	bne.n	8011a54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a46:	f107 0310 	add.w	r3, r7, #16
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f001 f886 	bl	8012b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a50:	2301      	movs	r3, #1
 8011a52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a54:	f7ff fabe 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a58:	f000 fdf8 	bl	801264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a5c:	f7ff fa8a 	bl	8010f74 <vPortEnterCritical>
 8011a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a66:	b25b      	sxtb	r3, r3
 8011a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6c:	d103      	bne.n	8011a76 <xQueueReceive+0x122>
 8011a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a7c:	b25b      	sxtb	r3, r3
 8011a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a82:	d103      	bne.n	8011a8c <xQueueReceive+0x138>
 8011a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a8c:	f7ff faa2 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a90:	1d3a      	adds	r2, r7, #4
 8011a92:	f107 0310 	add.w	r3, r7, #16
 8011a96:	4611      	mov	r1, r2
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f001 f875 	bl	8012b88 <xTaskCheckForTimeOut>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d123      	bne.n	8011aec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aa6:	f000 fade 	bl	8012066 <prvIsQueueEmpty>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d017      	beq.n	8011ae0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab2:	3324      	adds	r3, #36	; 0x24
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 ff9b 	bl	80129f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ac0:	f000 fa7f 	bl	8011fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ac4:	f000 fdd0 	bl	8012668 <xTaskResumeAll>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d189      	bne.n	80119e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011ace:	4b10      	ldr	r3, [pc, #64]	; (8011b10 <xQueueReceive+0x1bc>)
 8011ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ad4:	601a      	str	r2, [r3, #0]
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	e780      	b.n	80119e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ae2:	f000 fa6e 	bl	8011fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ae6:	f000 fdbf 	bl	8012668 <xTaskResumeAll>
 8011aea:	e77a      	b.n	80119e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aee:	f000 fa68 	bl	8011fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011af2:	f000 fdb9 	bl	8012668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011af8:	f000 fab5 	bl	8012066 <prvIsQueueEmpty>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f43f af6f 	beq.w	80119e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3730      	adds	r7, #48	; 0x30
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	e000ed04 	.word	0xe000ed04

08011b14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b08e      	sub	sp, #56	; 0x38
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b26:	2300      	movs	r3, #0
 8011b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d10a      	bne.n	8011b46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b34:	f383 8811 	msr	BASEPRI, r3
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	f3bf 8f4f 	dsb	sy
 8011b40:	623b      	str	r3, [r7, #32]
}
 8011b42:	bf00      	nop
 8011b44:	e7fe      	b.n	8011b44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00a      	beq.n	8011b64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	61fb      	str	r3, [r7, #28]
}
 8011b60:	bf00      	nop
 8011b62:	e7fe      	b.n	8011b62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b64:	f001 f954 	bl	8012e10 <xTaskGetSchedulerState>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d102      	bne.n	8011b74 <xQueueSemaphoreTake+0x60>
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d101      	bne.n	8011b78 <xQueueSemaphoreTake+0x64>
 8011b74:	2301      	movs	r3, #1
 8011b76:	e000      	b.n	8011b7a <xQueueSemaphoreTake+0x66>
 8011b78:	2300      	movs	r3, #0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d10a      	bne.n	8011b94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b82:	f383 8811 	msr	BASEPRI, r3
 8011b86:	f3bf 8f6f 	isb	sy
 8011b8a:	f3bf 8f4f 	dsb	sy
 8011b8e:	61bb      	str	r3, [r7, #24]
}
 8011b90:	bf00      	nop
 8011b92:	e7fe      	b.n	8011b92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b94:	f7ff f9ee 	bl	8010f74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d024      	beq.n	8011bee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba6:	1e5a      	subs	r2, r3, #1
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d104      	bne.n	8011bbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011bb4:	f001 faa2 	bl	80130fc <pvTaskIncrementMutexHeldCount>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc0:	691b      	ldr	r3, [r3, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00f      	beq.n	8011be6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	3310      	adds	r3, #16
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 ff62 	bl	8012a94 <xTaskRemoveFromEventList>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d007      	beq.n	8011be6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011bd6:	4b54      	ldr	r3, [pc, #336]	; (8011d28 <xQueueSemaphoreTake+0x214>)
 8011bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	f3bf 8f4f 	dsb	sy
 8011be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011be6:	f7ff f9f5 	bl	8010fd4 <vPortExitCritical>
				return pdPASS;
 8011bea:	2301      	movs	r3, #1
 8011bec:	e097      	b.n	8011d1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d111      	bne.n	8011c18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00a      	beq.n	8011c10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	617b      	str	r3, [r7, #20]
}
 8011c0c:	bf00      	nop
 8011c0e:	e7fe      	b.n	8011c0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c10:	f7ff f9e0 	bl	8010fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e082      	b.n	8011d1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d106      	bne.n	8011c2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c1e:	f107 030c 	add.w	r3, r7, #12
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 ff9a 	bl	8012b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c2c:	f7ff f9d2 	bl	8010fd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c30:	f000 fd0c 	bl	801264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c34:	f7ff f99e 	bl	8010f74 <vPortEnterCritical>
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c3e:	b25b      	sxtb	r3, r3
 8011c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c44:	d103      	bne.n	8011c4e <xQueueSemaphoreTake+0x13a>
 8011c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c54:	b25b      	sxtb	r3, r3
 8011c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c5a:	d103      	bne.n	8011c64 <xQueueSemaphoreTake+0x150>
 8011c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c64:	f7ff f9b6 	bl	8010fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c68:	463a      	mov	r2, r7
 8011c6a:	f107 030c 	add.w	r3, r7, #12
 8011c6e:	4611      	mov	r1, r2
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 ff89 	bl	8012b88 <xTaskCheckForTimeOut>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d132      	bne.n	8011ce2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c7e:	f000 f9f2 	bl	8012066 <prvIsQueueEmpty>
 8011c82:	4603      	mov	r3, r0
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d026      	beq.n	8011cd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d109      	bne.n	8011ca4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011c90:	f7ff f970 	bl	8010f74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f001 f8d7 	bl	8012e4c <xTaskPriorityInherit>
 8011c9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011ca0:	f7ff f998 	bl	8010fd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca6:	3324      	adds	r3, #36	; 0x24
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	4611      	mov	r1, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f000 fea1 	bl	80129f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cb4:	f000 f985 	bl	8011fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011cb8:	f000 fcd6 	bl	8012668 <xTaskResumeAll>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f47f af68 	bne.w	8011b94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011cc4:	4b18      	ldr	r3, [pc, #96]	; (8011d28 <xQueueSemaphoreTake+0x214>)
 8011cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cca:	601a      	str	r2, [r3, #0]
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	f3bf 8f6f 	isb	sy
 8011cd4:	e75e      	b.n	8011b94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd8:	f000 f973 	bl	8011fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cdc:	f000 fcc4 	bl	8012668 <xTaskResumeAll>
 8011ce0:	e758      	b.n	8011b94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ce4:	f000 f96d 	bl	8011fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ce8:	f000 fcbe 	bl	8012668 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cee:	f000 f9ba 	bl	8012066 <prvIsQueueEmpty>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f43f af4d 	beq.w	8011b94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00d      	beq.n	8011d1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011d00:	f7ff f938 	bl	8010f74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d06:	f000 f8b4 	bl	8011e72 <prvGetDisinheritPriorityAfterTimeout>
 8011d0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d12:	4618      	mov	r0, r3
 8011d14:	f001 f970 	bl	8012ff8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d18:	f7ff f95c 	bl	8010fd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3738      	adds	r7, #56	; 0x38
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	e000ed04 	.word	0xe000ed04

08011d2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08e      	sub	sp, #56	; 0x38
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10a      	bne.n	8011d58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d46:	f383 8811 	msr	BASEPRI, r3
 8011d4a:	f3bf 8f6f 	isb	sy
 8011d4e:	f3bf 8f4f 	dsb	sy
 8011d52:	623b      	str	r3, [r7, #32]
}
 8011d54:	bf00      	nop
 8011d56:	e7fe      	b.n	8011d56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d103      	bne.n	8011d66 <xQueueReceiveFromISR+0x3a>
 8011d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d101      	bne.n	8011d6a <xQueueReceiveFromISR+0x3e>
 8011d66:	2301      	movs	r3, #1
 8011d68:	e000      	b.n	8011d6c <xQueueReceiveFromISR+0x40>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10a      	bne.n	8011d86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	61fb      	str	r3, [r7, #28]
}
 8011d82:	bf00      	nop
 8011d84:	e7fe      	b.n	8011d84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d86:	f7ff f9d7 	bl	8011138 <vPortValidateInterruptPriority>
	__asm volatile
 8011d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8011d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	61ba      	str	r2, [r7, #24]
 8011da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d02f      	beq.n	8011e12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011dbc:	68b9      	ldr	r1, [r7, #8]
 8011dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc0:	f000 f8d9 	bl	8011f76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	1e5a      	subs	r2, r3, #1
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd4:	d112      	bne.n	8011dfc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d016      	beq.n	8011e0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	3310      	adds	r3, #16
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fe56 	bl	8012a94 <xTaskRemoveFromEventList>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00e      	beq.n	8011e0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00b      	beq.n	8011e0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	e007      	b.n	8011e0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e00:	3301      	adds	r3, #1
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	b25a      	sxtb	r2, r3
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e10:	e001      	b.n	8011e16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011e12:	2300      	movs	r3, #0
 8011e14:	637b      	str	r3, [r7, #52]	; 0x34
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	f383 8811 	msr	BASEPRI, r3
}
 8011e20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3738      	adds	r7, #56	; 0x38
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d10a      	bne.n	8011e54 <vQueueDelete+0x28>
	__asm volatile
 8011e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e42:	f383 8811 	msr	BASEPRI, r3
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	f3bf 8f4f 	dsb	sy
 8011e4e:	60bb      	str	r3, [r7, #8]
}
 8011e50:	bf00      	nop
 8011e52:	e7fe      	b.n	8011e52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f000 f95f 	bl	8012118 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d102      	bne.n	8011e6a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f7fe fd87 	bl	8010978 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011e6a:	bf00      	nop
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011e72:	b480      	push	{r7}
 8011e74:	b085      	sub	sp, #20
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d006      	beq.n	8011e90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011e8c:	60fb      	str	r3, [r7, #12]
 8011e8e:	e001      	b.n	8011e94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011e90:	2300      	movs	r3, #0
 8011e92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011e94:	68fb      	ldr	r3, [r7, #12]
	}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3714      	adds	r7, #20
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr

08011ea2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b086      	sub	sp, #24
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	60f8      	str	r0, [r7, #12]
 8011eaa:	60b9      	str	r1, [r7, #8]
 8011eac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d10d      	bne.n	8011edc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d14d      	bne.n	8011f64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f001 f825 	bl	8012f1c <xTaskPriorityDisinherit>
 8011ed2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	609a      	str	r2, [r3, #8]
 8011eda:	e043      	b.n	8011f64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d119      	bne.n	8011f16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6858      	ldr	r0, [r3, #4]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eea:	461a      	mov	r2, r3
 8011eec:	68b9      	ldr	r1, [r7, #8]
 8011eee:	f011 f9ec 	bl	80232ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011efa:	441a      	add	r2, r3
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	685a      	ldr	r2, [r3, #4]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d32b      	bcc.n	8011f64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	605a      	str	r2, [r3, #4]
 8011f14:	e026      	b.n	8011f64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	68d8      	ldr	r0, [r3, #12]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1e:	461a      	mov	r2, r3
 8011f20:	68b9      	ldr	r1, [r7, #8]
 8011f22:	f011 f9d2 	bl	80232ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	68da      	ldr	r2, [r3, #12]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f2e:	425b      	negs	r3, r3
 8011f30:	441a      	add	r2, r3
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	68da      	ldr	r2, [r3, #12]
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d207      	bcs.n	8011f52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	689a      	ldr	r2, [r3, #8]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f4a:	425b      	negs	r3, r3
 8011f4c:	441a      	add	r2, r3
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d105      	bne.n	8011f64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d002      	beq.n	8011f64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	3b01      	subs	r3, #1
 8011f62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	1c5a      	adds	r2, r3, #1
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011f6c:	697b      	ldr	r3, [r7, #20]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3718      	adds	r7, #24
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b082      	sub	sp, #8
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d018      	beq.n	8011fba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	68da      	ldr	r2, [r3, #12]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f90:	441a      	add	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	68da      	ldr	r2, [r3, #12]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d303      	bcc.n	8011faa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	68d9      	ldr	r1, [r3, #12]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	6838      	ldr	r0, [r7, #0]
 8011fb6:	f011 f988 	bl	80232ca <memcpy>
	}
}
 8011fba:	bf00      	nop
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b084      	sub	sp, #16
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011fca:	f7fe ffd3 	bl	8010f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fd6:	e011      	b.n	8011ffc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d012      	beq.n	8012006 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3324      	adds	r3, #36	; 0x24
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 fd55 	bl	8012a94 <xTaskRemoveFromEventList>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011ff0:	f000 fe2c 	bl	8012c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011ff4:	7bfb      	ldrb	r3, [r7, #15]
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012000:	2b00      	cmp	r3, #0
 8012002:	dce9      	bgt.n	8011fd8 <prvUnlockQueue+0x16>
 8012004:	e000      	b.n	8012008 <prvUnlockQueue+0x46>
					break;
 8012006:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	22ff      	movs	r2, #255	; 0xff
 801200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012010:	f7fe ffe0 	bl	8010fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012014:	f7fe ffae 	bl	8010f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801201e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012020:	e011      	b.n	8012046 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d012      	beq.n	8012050 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3310      	adds	r3, #16
 801202e:	4618      	mov	r0, r3
 8012030:	f000 fd30 	bl	8012a94 <xTaskRemoveFromEventList>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801203a:	f000 fe07 	bl	8012c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801203e:	7bbb      	ldrb	r3, [r7, #14]
 8012040:	3b01      	subs	r3, #1
 8012042:	b2db      	uxtb	r3, r3
 8012044:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801204a:	2b00      	cmp	r3, #0
 801204c:	dce9      	bgt.n	8012022 <prvUnlockQueue+0x60>
 801204e:	e000      	b.n	8012052 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012050:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	22ff      	movs	r2, #255	; 0xff
 8012056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801205a:	f7fe ffbb 	bl	8010fd4 <vPortExitCritical>
}
 801205e:	bf00      	nop
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b084      	sub	sp, #16
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801206e:	f7fe ff81 	bl	8010f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012076:	2b00      	cmp	r3, #0
 8012078:	d102      	bne.n	8012080 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801207a:	2301      	movs	r3, #1
 801207c:	60fb      	str	r3, [r7, #12]
 801207e:	e001      	b.n	8012084 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012080:	2300      	movs	r3, #0
 8012082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012084:	f7fe ffa6 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 8012088:	68fb      	ldr	r3, [r7, #12]
}
 801208a:	4618      	mov	r0, r3
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b084      	sub	sp, #16
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801209a:	f7fe ff6b 	bl	8010f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d102      	bne.n	80120b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80120aa:	2301      	movs	r3, #1
 80120ac:	60fb      	str	r3, [r7, #12]
 80120ae:	e001      	b.n	80120b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80120b0:	2300      	movs	r3, #0
 80120b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120b4:	f7fe ff8e 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 80120b8:	68fb      	ldr	r3, [r7, #12]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80120c4:	b480      	push	{r7}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120ce:	2300      	movs	r3, #0
 80120d0:	60fb      	str	r3, [r7, #12]
 80120d2:	e014      	b.n	80120fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80120d4:	4a0f      	ldr	r2, [pc, #60]	; (8012114 <vQueueAddToRegistry+0x50>)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10b      	bne.n	80120f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80120e0:	490c      	ldr	r1, [pc, #48]	; (8012114 <vQueueAddToRegistry+0x50>)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	683a      	ldr	r2, [r7, #0]
 80120e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80120ea:	4a0a      	ldr	r2, [pc, #40]	; (8012114 <vQueueAddToRegistry+0x50>)
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	00db      	lsls	r3, r3, #3
 80120f0:	4413      	add	r3, r2
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80120f6:	e006      	b.n	8012106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	3301      	adds	r3, #1
 80120fc:	60fb      	str	r3, [r7, #12]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2b07      	cmp	r3, #7
 8012102:	d9e7      	bls.n	80120d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012104:	bf00      	nop
 8012106:	bf00      	nop
 8012108:	3714      	adds	r7, #20
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop
 8012114:	240063c4 	.word	0x240063c4

08012118 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012120:	2300      	movs	r3, #0
 8012122:	60fb      	str	r3, [r7, #12]
 8012124:	e016      	b.n	8012154 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012126:	4a10      	ldr	r2, [pc, #64]	; (8012168 <vQueueUnregisterQueue+0x50>)
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	4413      	add	r3, r2
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	429a      	cmp	r2, r3
 8012134:	d10b      	bne.n	801214e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012136:	4a0c      	ldr	r2, [pc, #48]	; (8012168 <vQueueUnregisterQueue+0x50>)
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2100      	movs	r1, #0
 801213c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012140:	4a09      	ldr	r2, [pc, #36]	; (8012168 <vQueueUnregisterQueue+0x50>)
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	00db      	lsls	r3, r3, #3
 8012146:	4413      	add	r3, r2
 8012148:	2200      	movs	r2, #0
 801214a:	605a      	str	r2, [r3, #4]
				break;
 801214c:	e006      	b.n	801215c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	3301      	adds	r3, #1
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b07      	cmp	r3, #7
 8012158:	d9e5      	bls.n	8012126 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801215a:	bf00      	nop
 801215c:	bf00      	nop
 801215e:	3714      	adds	r7, #20
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr
 8012168:	240063c4 	.word	0x240063c4

0801216c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801217c:	f7fe fefa 	bl	8010f74 <vPortEnterCritical>
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012186:	b25b      	sxtb	r3, r3
 8012188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801218c:	d103      	bne.n	8012196 <vQueueWaitForMessageRestricted+0x2a>
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801219c:	b25b      	sxtb	r3, r3
 801219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a2:	d103      	bne.n	80121ac <vQueueWaitForMessageRestricted+0x40>
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80121ac:	f7fe ff12 	bl	8010fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d106      	bne.n	80121c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	3324      	adds	r3, #36	; 0x24
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	4618      	mov	r0, r3
 80121c2:	f000 fc3b 	bl	8012a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80121c6:	6978      	ldr	r0, [r7, #20]
 80121c8:	f7ff fefb 	bl	8011fc2 <prvUnlockQueue>
	}
 80121cc:	bf00      	nop
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08e      	sub	sp, #56	; 0x38
 80121d8:	af04      	add	r7, sp, #16
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80121e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10a      	bne.n	80121fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	623b      	str	r3, [r7, #32]
}
 80121fa:	bf00      	nop
 80121fc:	e7fe      	b.n	80121fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80121fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012200:	2b00      	cmp	r3, #0
 8012202:	d10a      	bne.n	801221a <xTaskCreateStatic+0x46>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	61fb      	str	r3, [r7, #28]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801221a:	235c      	movs	r3, #92	; 0x5c
 801221c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	2b5c      	cmp	r3, #92	; 0x5c
 8012222:	d00a      	beq.n	801223a <xTaskCreateStatic+0x66>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	61bb      	str	r3, [r7, #24]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801223a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801223c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01e      	beq.n	8012280 <xTaskCreateStatic+0xac>
 8012242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012244:	2b00      	cmp	r3, #0
 8012246:	d01b      	beq.n	8012280 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012250:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012254:	2202      	movs	r2, #2
 8012256:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801225a:	2300      	movs	r3, #0
 801225c:	9303      	str	r3, [sp, #12]
 801225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012260:	9302      	str	r3, [sp, #8]
 8012262:	f107 0314 	add.w	r3, r7, #20
 8012266:	9301      	str	r3, [sp, #4]
 8012268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	68b9      	ldr	r1, [r7, #8]
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f000 f850 	bl	8012318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801227a:	f000 f8dd 	bl	8012438 <prvAddNewTaskToReadyList>
 801227e:	e001      	b.n	8012284 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012280:	2300      	movs	r3, #0
 8012282:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012284:	697b      	ldr	r3, [r7, #20]
	}
 8012286:	4618      	mov	r0, r3
 8012288:	3728      	adds	r7, #40	; 0x28
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}

0801228e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801228e:	b580      	push	{r7, lr}
 8012290:	b08c      	sub	sp, #48	; 0x30
 8012292:	af04      	add	r7, sp, #16
 8012294:	60f8      	str	r0, [r7, #12]
 8012296:	60b9      	str	r1, [r7, #8]
 8012298:	603b      	str	r3, [r7, #0]
 801229a:	4613      	mov	r3, r2
 801229c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801229e:	88fb      	ldrh	r3, [r7, #6]
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fe fa9c 	bl	80107e0 <pvPortMalloc>
 80122a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00e      	beq.n	80122ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80122b0:	205c      	movs	r0, #92	; 0x5c
 80122b2:	f7fe fa95 	bl	80107e0 <pvPortMalloc>
 80122b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d003      	beq.n	80122c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	697a      	ldr	r2, [r7, #20]
 80122c2:	631a      	str	r2, [r3, #48]	; 0x30
 80122c4:	e005      	b.n	80122d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80122c6:	6978      	ldr	r0, [r7, #20]
 80122c8:	f7fe fb56 	bl	8010978 <vPortFree>
 80122cc:	e001      	b.n	80122d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80122ce:	2300      	movs	r3, #0
 80122d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d017      	beq.n	8012308 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	2200      	movs	r2, #0
 80122dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80122e0:	88fa      	ldrh	r2, [r7, #6]
 80122e2:	2300      	movs	r3, #0
 80122e4:	9303      	str	r3, [sp, #12]
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	9302      	str	r3, [sp, #8]
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	9301      	str	r3, [sp, #4]
 80122ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	68b9      	ldr	r1, [r7, #8]
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f000 f80e 	bl	8012318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122fc:	69f8      	ldr	r0, [r7, #28]
 80122fe:	f000 f89b 	bl	8012438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012302:	2301      	movs	r3, #1
 8012304:	61bb      	str	r3, [r7, #24]
 8012306:	e002      	b.n	801230e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012308:	f04f 33ff 	mov.w	r3, #4294967295
 801230c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801230e:	69bb      	ldr	r3, [r7, #24]
	}
 8012310:	4618      	mov	r0, r3
 8012312:	3720      	adds	r7, #32
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b088      	sub	sp, #32
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
 8012324:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	461a      	mov	r2, r3
 8012330:	21a5      	movs	r1, #165	; 0xa5
 8012332:	f010 fefa 	bl	802312a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801233a:	6879      	ldr	r1, [r7, #4]
 801233c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012340:	440b      	add	r3, r1
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	4413      	add	r3, r2
 8012346:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	f023 0307 	bic.w	r3, r3, #7
 801234e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	f003 0307 	and.w	r3, r3, #7
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00a      	beq.n	8012370 <prvInitialiseNewTask+0x58>
	__asm volatile
 801235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235e:	f383 8811 	msr	BASEPRI, r3
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	f3bf 8f4f 	dsb	sy
 801236a:	617b      	str	r3, [r7, #20]
}
 801236c:	bf00      	nop
 801236e:	e7fe      	b.n	801236e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d01f      	beq.n	80123b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012376:	2300      	movs	r3, #0
 8012378:	61fb      	str	r3, [r7, #28]
 801237a:	e012      	b.n	80123a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	4413      	add	r3, r2
 8012382:	7819      	ldrb	r1, [r3, #0]
 8012384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	4413      	add	r3, r2
 801238a:	3334      	adds	r3, #52	; 0x34
 801238c:	460a      	mov	r2, r1
 801238e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	4413      	add	r3, r2
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d006      	beq.n	80123aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	3301      	adds	r3, #1
 80123a0:	61fb      	str	r3, [r7, #28]
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b0f      	cmp	r3, #15
 80123a6:	d9e9      	bls.n	801237c <prvInitialiseNewTask+0x64>
 80123a8:	e000      	b.n	80123ac <prvInitialiseNewTask+0x94>
			{
				break;
 80123aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80123b4:	e003      	b.n	80123be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	2200      	movs	r2, #0
 80123ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80123be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c0:	2b37      	cmp	r3, #55	; 0x37
 80123c2:	d901      	bls.n	80123c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80123c4:	2337      	movs	r3, #55	; 0x37
 80123c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80123c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	2200      	movs	r2, #0
 80123d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	3304      	adds	r3, #4
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fc08 	bl	8010bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	3318      	adds	r3, #24
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fe fc03 	bl	8010bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012406:	2200      	movs	r2, #0
 8012408:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	2200      	movs	r2, #0
 801240e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	68f9      	ldr	r1, [r7, #12]
 8012416:	69b8      	ldr	r0, [r7, #24]
 8012418:	f7fe fc80 	bl	8010d1c <pxPortInitialiseStack>
 801241c:	4602      	mov	r2, r0
 801241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012420:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801242c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801242e:	bf00      	nop
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012440:	f7fe fd98 	bl	8010f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012444:	4b2d      	ldr	r3, [pc, #180]	; (80124fc <prvAddNewTaskToReadyList+0xc4>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	3301      	adds	r3, #1
 801244a:	4a2c      	ldr	r2, [pc, #176]	; (80124fc <prvAddNewTaskToReadyList+0xc4>)
 801244c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801244e:	4b2c      	ldr	r3, [pc, #176]	; (8012500 <prvAddNewTaskToReadyList+0xc8>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d109      	bne.n	801246a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012456:	4a2a      	ldr	r2, [pc, #168]	; (8012500 <prvAddNewTaskToReadyList+0xc8>)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801245c:	4b27      	ldr	r3, [pc, #156]	; (80124fc <prvAddNewTaskToReadyList+0xc4>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b01      	cmp	r3, #1
 8012462:	d110      	bne.n	8012486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012464:	f000 fc16 	bl	8012c94 <prvInitialiseTaskLists>
 8012468:	e00d      	b.n	8012486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801246a:	4b26      	ldr	r3, [pc, #152]	; (8012504 <prvAddNewTaskToReadyList+0xcc>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d109      	bne.n	8012486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012472:	4b23      	ldr	r3, [pc, #140]	; (8012500 <prvAddNewTaskToReadyList+0xc8>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247c:	429a      	cmp	r2, r3
 801247e:	d802      	bhi.n	8012486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012480:	4a1f      	ldr	r2, [pc, #124]	; (8012500 <prvAddNewTaskToReadyList+0xc8>)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012486:	4b20      	ldr	r3, [pc, #128]	; (8012508 <prvAddNewTaskToReadyList+0xd0>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	3301      	adds	r3, #1
 801248c:	4a1e      	ldr	r2, [pc, #120]	; (8012508 <prvAddNewTaskToReadyList+0xd0>)
 801248e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012490:	4b1d      	ldr	r3, [pc, #116]	; (8012508 <prvAddNewTaskToReadyList+0xd0>)
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801249c:	4b1b      	ldr	r3, [pc, #108]	; (801250c <prvAddNewTaskToReadyList+0xd4>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d903      	bls.n	80124ac <prvAddNewTaskToReadyList+0x74>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a8:	4a18      	ldr	r2, [pc, #96]	; (801250c <prvAddNewTaskToReadyList+0xd4>)
 80124aa:	6013      	str	r3, [r2, #0]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124b0:	4613      	mov	r3, r2
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	4413      	add	r3, r2
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	4a15      	ldr	r2, [pc, #84]	; (8012510 <prvAddNewTaskToReadyList+0xd8>)
 80124ba:	441a      	add	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	3304      	adds	r3, #4
 80124c0:	4619      	mov	r1, r3
 80124c2:	4610      	mov	r0, r2
 80124c4:	f7fe fba3 	bl	8010c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80124c8:	f7fe fd84 	bl	8010fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80124cc:	4b0d      	ldr	r3, [pc, #52]	; (8012504 <prvAddNewTaskToReadyList+0xcc>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00e      	beq.n	80124f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80124d4:	4b0a      	ldr	r3, [pc, #40]	; (8012500 <prvAddNewTaskToReadyList+0xc8>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124de:	429a      	cmp	r2, r3
 80124e0:	d207      	bcs.n	80124f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80124e2:	4b0c      	ldr	r3, [pc, #48]	; (8012514 <prvAddNewTaskToReadyList+0xdc>)
 80124e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124e8:	601a      	str	r2, [r3, #0]
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124f2:	bf00      	nop
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	240068d8 	.word	0x240068d8
 8012500:	24006404 	.word	0x24006404
 8012504:	240068e4 	.word	0x240068e4
 8012508:	240068f4 	.word	0x240068f4
 801250c:	240068e0 	.word	0x240068e0
 8012510:	24006408 	.word	0x24006408
 8012514:	e000ed04 	.word	0xe000ed04

08012518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012520:	2300      	movs	r3, #0
 8012522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d017      	beq.n	801255a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801252a:	4b13      	ldr	r3, [pc, #76]	; (8012578 <vTaskDelay+0x60>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d00a      	beq.n	8012548 <vTaskDelay+0x30>
	__asm volatile
 8012532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012536:	f383 8811 	msr	BASEPRI, r3
 801253a:	f3bf 8f6f 	isb	sy
 801253e:	f3bf 8f4f 	dsb	sy
 8012542:	60bb      	str	r3, [r7, #8]
}
 8012544:	bf00      	nop
 8012546:	e7fe      	b.n	8012546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012548:	f000 f880 	bl	801264c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801254c:	2100      	movs	r1, #0
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 fde8 	bl	8013124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012554:	f000 f888 	bl	8012668 <xTaskResumeAll>
 8012558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d107      	bne.n	8012570 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012560:	4b06      	ldr	r3, [pc, #24]	; (801257c <vTaskDelay+0x64>)
 8012562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012566:	601a      	str	r2, [r3, #0]
 8012568:	f3bf 8f4f 	dsb	sy
 801256c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012570:	bf00      	nop
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	24006900 	.word	0x24006900
 801257c:	e000ed04 	.word	0xe000ed04

08012580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	; 0x28
 8012584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801258a:	2300      	movs	r3, #0
 801258c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801258e:	463a      	mov	r2, r7
 8012590:	1d39      	adds	r1, r7, #4
 8012592:	f107 0308 	add.w	r3, r7, #8
 8012596:	4618      	mov	r0, r3
 8012598:	f7fe f8ee 	bl	8010778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	9202      	str	r2, [sp, #8]
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	2300      	movs	r3, #0
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	2300      	movs	r3, #0
 80125ac:	460a      	mov	r2, r1
 80125ae:	4921      	ldr	r1, [pc, #132]	; (8012634 <vTaskStartScheduler+0xb4>)
 80125b0:	4821      	ldr	r0, [pc, #132]	; (8012638 <vTaskStartScheduler+0xb8>)
 80125b2:	f7ff fe0f 	bl	80121d4 <xTaskCreateStatic>
 80125b6:	4603      	mov	r3, r0
 80125b8:	4a20      	ldr	r2, [pc, #128]	; (801263c <vTaskStartScheduler+0xbc>)
 80125ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80125bc:	4b1f      	ldr	r3, [pc, #124]	; (801263c <vTaskStartScheduler+0xbc>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80125c4:	2301      	movs	r3, #1
 80125c6:	617b      	str	r3, [r7, #20]
 80125c8:	e001      	b.n	80125ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d102      	bne.n	80125da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80125d4:	f000 fdfa 	bl	80131cc <xTimerCreateTimerTask>
 80125d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d116      	bne.n	801260e <vTaskStartScheduler+0x8e>
	__asm volatile
 80125e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e4:	f383 8811 	msr	BASEPRI, r3
 80125e8:	f3bf 8f6f 	isb	sy
 80125ec:	f3bf 8f4f 	dsb	sy
 80125f0:	613b      	str	r3, [r7, #16]
}
 80125f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80125f4:	4b12      	ldr	r3, [pc, #72]	; (8012640 <vTaskStartScheduler+0xc0>)
 80125f6:	f04f 32ff 	mov.w	r2, #4294967295
 80125fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80125fc:	4b11      	ldr	r3, [pc, #68]	; (8012644 <vTaskStartScheduler+0xc4>)
 80125fe:	2201      	movs	r2, #1
 8012600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012602:	4b11      	ldr	r3, [pc, #68]	; (8012648 <vTaskStartScheduler+0xc8>)
 8012604:	2200      	movs	r2, #0
 8012606:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012608:	f7fe fc12 	bl	8010e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801260c:	e00e      	b.n	801262c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012614:	d10a      	bne.n	801262c <vTaskStartScheduler+0xac>
	__asm volatile
 8012616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261a:	f383 8811 	msr	BASEPRI, r3
 801261e:	f3bf 8f6f 	isb	sy
 8012622:	f3bf 8f4f 	dsb	sy
 8012626:	60fb      	str	r3, [r7, #12]
}
 8012628:	bf00      	nop
 801262a:	e7fe      	b.n	801262a <vTaskStartScheduler+0xaa>
}
 801262c:	bf00      	nop
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	08024800 	.word	0x08024800
 8012638:	08012c65 	.word	0x08012c65
 801263c:	240068fc 	.word	0x240068fc
 8012640:	240068f8 	.word	0x240068f8
 8012644:	240068e4 	.word	0x240068e4
 8012648:	240068dc 	.word	0x240068dc

0801264c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801264c:	b480      	push	{r7}
 801264e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012650:	4b04      	ldr	r3, [pc, #16]	; (8012664 <vTaskSuspendAll+0x18>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	3301      	adds	r3, #1
 8012656:	4a03      	ldr	r2, [pc, #12]	; (8012664 <vTaskSuspendAll+0x18>)
 8012658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	24006900 	.word	0x24006900

08012668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012672:	2300      	movs	r3, #0
 8012674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012676:	4b42      	ldr	r3, [pc, #264]	; (8012780 <xTaskResumeAll+0x118>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10a      	bne.n	8012694 <xTaskResumeAll+0x2c>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	603b      	str	r3, [r7, #0]
}
 8012690:	bf00      	nop
 8012692:	e7fe      	b.n	8012692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012694:	f7fe fc6e 	bl	8010f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012698:	4b39      	ldr	r3, [pc, #228]	; (8012780 <xTaskResumeAll+0x118>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	3b01      	subs	r3, #1
 801269e:	4a38      	ldr	r2, [pc, #224]	; (8012780 <xTaskResumeAll+0x118>)
 80126a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126a2:	4b37      	ldr	r3, [pc, #220]	; (8012780 <xTaskResumeAll+0x118>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d162      	bne.n	8012770 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80126aa:	4b36      	ldr	r3, [pc, #216]	; (8012784 <xTaskResumeAll+0x11c>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d05e      	beq.n	8012770 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126b2:	e02f      	b.n	8012714 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126b4:	4b34      	ldr	r3, [pc, #208]	; (8012788 <xTaskResumeAll+0x120>)
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	3318      	adds	r3, #24
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7fe fb01 	bl	8010cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	3304      	adds	r3, #4
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fe fafc 	bl	8010cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126d4:	4b2d      	ldr	r3, [pc, #180]	; (801278c <xTaskResumeAll+0x124>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d903      	bls.n	80126e4 <xTaskResumeAll+0x7c>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e0:	4a2a      	ldr	r2, [pc, #168]	; (801278c <xTaskResumeAll+0x124>)
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e8:	4613      	mov	r3, r2
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4a27      	ldr	r2, [pc, #156]	; (8012790 <xTaskResumeAll+0x128>)
 80126f2:	441a      	add	r2, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	3304      	adds	r3, #4
 80126f8:	4619      	mov	r1, r3
 80126fa:	4610      	mov	r0, r2
 80126fc:	f7fe fa87 	bl	8010c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012704:	4b23      	ldr	r3, [pc, #140]	; (8012794 <xTaskResumeAll+0x12c>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270a:	429a      	cmp	r2, r3
 801270c:	d302      	bcc.n	8012714 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801270e:	4b22      	ldr	r3, [pc, #136]	; (8012798 <xTaskResumeAll+0x130>)
 8012710:	2201      	movs	r2, #1
 8012712:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012714:	4b1c      	ldr	r3, [pc, #112]	; (8012788 <xTaskResumeAll+0x120>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1cb      	bne.n	80126b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012722:	f000 fb55 	bl	8012dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012726:	4b1d      	ldr	r3, [pc, #116]	; (801279c <xTaskResumeAll+0x134>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d010      	beq.n	8012754 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012732:	f000 f847 	bl	80127c4 <xTaskIncrementTick>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d002      	beq.n	8012742 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801273c:	4b16      	ldr	r3, [pc, #88]	; (8012798 <xTaskResumeAll+0x130>)
 801273e:	2201      	movs	r2, #1
 8012740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3b01      	subs	r3, #1
 8012746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1f1      	bne.n	8012732 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801274e:	4b13      	ldr	r3, [pc, #76]	; (801279c <xTaskResumeAll+0x134>)
 8012750:	2200      	movs	r2, #0
 8012752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012754:	4b10      	ldr	r3, [pc, #64]	; (8012798 <xTaskResumeAll+0x130>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d009      	beq.n	8012770 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801275c:	2301      	movs	r3, #1
 801275e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012760:	4b0f      	ldr	r3, [pc, #60]	; (80127a0 <xTaskResumeAll+0x138>)
 8012762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012766:	601a      	str	r2, [r3, #0]
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012770:	f7fe fc30 	bl	8010fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8012774:	68bb      	ldr	r3, [r7, #8]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	24006900 	.word	0x24006900
 8012784:	240068d8 	.word	0x240068d8
 8012788:	24006898 	.word	0x24006898
 801278c:	240068e0 	.word	0x240068e0
 8012790:	24006408 	.word	0x24006408
 8012794:	24006404 	.word	0x24006404
 8012798:	240068ec 	.word	0x240068ec
 801279c:	240068e8 	.word	0x240068e8
 80127a0:	e000ed04 	.word	0xe000ed04

080127a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80127aa:	4b05      	ldr	r3, [pc, #20]	; (80127c0 <xTaskGetTickCount+0x1c>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80127b0:	687b      	ldr	r3, [r7, #4]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	240068dc 	.word	0x240068dc

080127c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80127ca:	2300      	movs	r3, #0
 80127cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127ce:	4b4f      	ldr	r3, [pc, #316]	; (801290c <xTaskIncrementTick+0x148>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f040 808f 	bne.w	80128f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80127d8:	4b4d      	ldr	r3, [pc, #308]	; (8012910 <xTaskIncrementTick+0x14c>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	3301      	adds	r3, #1
 80127de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80127e0:	4a4b      	ldr	r2, [pc, #300]	; (8012910 <xTaskIncrementTick+0x14c>)
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d120      	bne.n	801282e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80127ec:	4b49      	ldr	r3, [pc, #292]	; (8012914 <xTaskIncrementTick+0x150>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d00a      	beq.n	801280c <xTaskIncrementTick+0x48>
	__asm volatile
 80127f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fa:	f383 8811 	msr	BASEPRI, r3
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	603b      	str	r3, [r7, #0]
}
 8012808:	bf00      	nop
 801280a:	e7fe      	b.n	801280a <xTaskIncrementTick+0x46>
 801280c:	4b41      	ldr	r3, [pc, #260]	; (8012914 <xTaskIncrementTick+0x150>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	60fb      	str	r3, [r7, #12]
 8012812:	4b41      	ldr	r3, [pc, #260]	; (8012918 <xTaskIncrementTick+0x154>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4a3f      	ldr	r2, [pc, #252]	; (8012914 <xTaskIncrementTick+0x150>)
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	4a3f      	ldr	r2, [pc, #252]	; (8012918 <xTaskIncrementTick+0x154>)
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6013      	str	r3, [r2, #0]
 8012820:	4b3e      	ldr	r3, [pc, #248]	; (801291c <xTaskIncrementTick+0x158>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	3301      	adds	r3, #1
 8012826:	4a3d      	ldr	r2, [pc, #244]	; (801291c <xTaskIncrementTick+0x158>)
 8012828:	6013      	str	r3, [r2, #0]
 801282a:	f000 fad1 	bl	8012dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801282e:	4b3c      	ldr	r3, [pc, #240]	; (8012920 <xTaskIncrementTick+0x15c>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	693a      	ldr	r2, [r7, #16]
 8012834:	429a      	cmp	r2, r3
 8012836:	d349      	bcc.n	80128cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012838:	4b36      	ldr	r3, [pc, #216]	; (8012914 <xTaskIncrementTick+0x150>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d104      	bne.n	801284c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012842:	4b37      	ldr	r3, [pc, #220]	; (8012920 <xTaskIncrementTick+0x15c>)
 8012844:	f04f 32ff 	mov.w	r2, #4294967295
 8012848:	601a      	str	r2, [r3, #0]
					break;
 801284a:	e03f      	b.n	80128cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801284c:	4b31      	ldr	r3, [pc, #196]	; (8012914 <xTaskIncrementTick+0x150>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801285c:	693a      	ldr	r2, [r7, #16]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	429a      	cmp	r2, r3
 8012862:	d203      	bcs.n	801286c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012864:	4a2e      	ldr	r2, [pc, #184]	; (8012920 <xTaskIncrementTick+0x15c>)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801286a:	e02f      	b.n	80128cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	3304      	adds	r3, #4
 8012870:	4618      	mov	r0, r3
 8012872:	f7fe fa29 	bl	8010cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801287a:	2b00      	cmp	r3, #0
 801287c:	d004      	beq.n	8012888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	3318      	adds	r3, #24
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe fa20 	bl	8010cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801288c:	4b25      	ldr	r3, [pc, #148]	; (8012924 <xTaskIncrementTick+0x160>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	429a      	cmp	r2, r3
 8012892:	d903      	bls.n	801289c <xTaskIncrementTick+0xd8>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012898:	4a22      	ldr	r2, [pc, #136]	; (8012924 <xTaskIncrementTick+0x160>)
 801289a:	6013      	str	r3, [r2, #0]
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a0:	4613      	mov	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	4413      	add	r3, r2
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4a1f      	ldr	r2, [pc, #124]	; (8012928 <xTaskIncrementTick+0x164>)
 80128aa:	441a      	add	r2, r3
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	3304      	adds	r3, #4
 80128b0:	4619      	mov	r1, r3
 80128b2:	4610      	mov	r0, r2
 80128b4:	f7fe f9ab 	bl	8010c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128bc:	4b1b      	ldr	r3, [pc, #108]	; (801292c <xTaskIncrementTick+0x168>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d3b8      	bcc.n	8012838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80128c6:	2301      	movs	r3, #1
 80128c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128ca:	e7b5      	b.n	8012838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80128cc:	4b17      	ldr	r3, [pc, #92]	; (801292c <xTaskIncrementTick+0x168>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128d2:	4915      	ldr	r1, [pc, #84]	; (8012928 <xTaskIncrementTick+0x164>)
 80128d4:	4613      	mov	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	4413      	add	r3, r2
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	440b      	add	r3, r1
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d901      	bls.n	80128e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80128e4:	2301      	movs	r3, #1
 80128e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80128e8:	4b11      	ldr	r3, [pc, #68]	; (8012930 <xTaskIncrementTick+0x16c>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d007      	beq.n	8012900 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80128f0:	2301      	movs	r3, #1
 80128f2:	617b      	str	r3, [r7, #20]
 80128f4:	e004      	b.n	8012900 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80128f6:	4b0f      	ldr	r3, [pc, #60]	; (8012934 <xTaskIncrementTick+0x170>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	3301      	adds	r3, #1
 80128fc:	4a0d      	ldr	r2, [pc, #52]	; (8012934 <xTaskIncrementTick+0x170>)
 80128fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012900:	697b      	ldr	r3, [r7, #20]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	24006900 	.word	0x24006900
 8012910:	240068dc 	.word	0x240068dc
 8012914:	24006890 	.word	0x24006890
 8012918:	24006894 	.word	0x24006894
 801291c:	240068f0 	.word	0x240068f0
 8012920:	240068f8 	.word	0x240068f8
 8012924:	240068e0 	.word	0x240068e0
 8012928:	24006408 	.word	0x24006408
 801292c:	24006404 	.word	0x24006404
 8012930:	240068ec 	.word	0x240068ec
 8012934:	240068e8 	.word	0x240068e8

08012938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801293e:	4b28      	ldr	r3, [pc, #160]	; (80129e0 <vTaskSwitchContext+0xa8>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d003      	beq.n	801294e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012946:	4b27      	ldr	r3, [pc, #156]	; (80129e4 <vTaskSwitchContext+0xac>)
 8012948:	2201      	movs	r2, #1
 801294a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801294c:	e041      	b.n	80129d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801294e:	4b25      	ldr	r3, [pc, #148]	; (80129e4 <vTaskSwitchContext+0xac>)
 8012950:	2200      	movs	r2, #0
 8012952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012954:	4b24      	ldr	r3, [pc, #144]	; (80129e8 <vTaskSwitchContext+0xb0>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	60fb      	str	r3, [r7, #12]
 801295a:	e010      	b.n	801297e <vTaskSwitchContext+0x46>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10a      	bne.n	8012978 <vTaskSwitchContext+0x40>
	__asm volatile
 8012962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012966:	f383 8811 	msr	BASEPRI, r3
 801296a:	f3bf 8f6f 	isb	sy
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	607b      	str	r3, [r7, #4]
}
 8012974:	bf00      	nop
 8012976:	e7fe      	b.n	8012976 <vTaskSwitchContext+0x3e>
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	3b01      	subs	r3, #1
 801297c:	60fb      	str	r3, [r7, #12]
 801297e:	491b      	ldr	r1, [pc, #108]	; (80129ec <vTaskSwitchContext+0xb4>)
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	4613      	mov	r3, r2
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	4413      	add	r3, r2
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	440b      	add	r3, r1
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d0e4      	beq.n	801295c <vTaskSwitchContext+0x24>
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	4613      	mov	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	4413      	add	r3, r2
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4a13      	ldr	r2, [pc, #76]	; (80129ec <vTaskSwitchContext+0xb4>)
 801299e:	4413      	add	r3, r2
 80129a0:	60bb      	str	r3, [r7, #8]
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	685a      	ldr	r2, [r3, #4]
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	605a      	str	r2, [r3, #4]
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	685a      	ldr	r2, [r3, #4]
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	3308      	adds	r3, #8
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d104      	bne.n	80129c2 <vTaskSwitchContext+0x8a>
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	685a      	ldr	r2, [r3, #4]
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	605a      	str	r2, [r3, #4]
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	4a09      	ldr	r2, [pc, #36]	; (80129f0 <vTaskSwitchContext+0xb8>)
 80129ca:	6013      	str	r3, [r2, #0]
 80129cc:	4a06      	ldr	r2, [pc, #24]	; (80129e8 <vTaskSwitchContext+0xb0>)
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6013      	str	r3, [r2, #0]
}
 80129d2:	bf00      	nop
 80129d4:	3714      	adds	r7, #20
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	24006900 	.word	0x24006900
 80129e4:	240068ec 	.word	0x240068ec
 80129e8:	240068e0 	.word	0x240068e0
 80129ec:	24006408 	.word	0x24006408
 80129f0:	24006404 	.word	0x24006404

080129f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10a      	bne.n	8012a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a08:	f383 8811 	msr	BASEPRI, r3
 8012a0c:	f3bf 8f6f 	isb	sy
 8012a10:	f3bf 8f4f 	dsb	sy
 8012a14:	60fb      	str	r3, [r7, #12]
}
 8012a16:	bf00      	nop
 8012a18:	e7fe      	b.n	8012a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a1a:	4b07      	ldr	r3, [pc, #28]	; (8012a38 <vTaskPlaceOnEventList+0x44>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	3318      	adds	r3, #24
 8012a20:	4619      	mov	r1, r3
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7fe f917 	bl	8010c56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a28:	2101      	movs	r1, #1
 8012a2a:	6838      	ldr	r0, [r7, #0]
 8012a2c:	f000 fb7a 	bl	8013124 <prvAddCurrentTaskToDelayedList>
}
 8012a30:	bf00      	nop
 8012a32:	3710      	adds	r7, #16
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	24006404 	.word	0x24006404

08012a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b086      	sub	sp, #24
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10a      	bne.n	8012a64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	617b      	str	r3, [r7, #20]
}
 8012a60:	bf00      	nop
 8012a62:	e7fe      	b.n	8012a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a64:	4b0a      	ldr	r3, [pc, #40]	; (8012a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	3318      	adds	r3, #24
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	68f8      	ldr	r0, [r7, #12]
 8012a6e:	f7fe f8ce 	bl	8010c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d002      	beq.n	8012a7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012a78:	f04f 33ff 	mov.w	r3, #4294967295
 8012a7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012a7e:	6879      	ldr	r1, [r7, #4]
 8012a80:	68b8      	ldr	r0, [r7, #8]
 8012a82:	f000 fb4f 	bl	8013124 <prvAddCurrentTaskToDelayedList>
	}
 8012a86:	bf00      	nop
 8012a88:	3718      	adds	r7, #24
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	24006404 	.word	0x24006404

08012a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b086      	sub	sp, #24
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d10a      	bne.n	8012ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aae:	f383 8811 	msr	BASEPRI, r3
 8012ab2:	f3bf 8f6f 	isb	sy
 8012ab6:	f3bf 8f4f 	dsb	sy
 8012aba:	60fb      	str	r3, [r7, #12]
}
 8012abc:	bf00      	nop
 8012abe:	e7fe      	b.n	8012abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	3318      	adds	r3, #24
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fe f8ff 	bl	8010cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012aca:	4b1e      	ldr	r3, [pc, #120]	; (8012b44 <xTaskRemoveFromEventList+0xb0>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d11d      	bne.n	8012b0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	3304      	adds	r3, #4
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fe f8f6 	bl	8010cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ae0:	4b19      	ldr	r3, [pc, #100]	; (8012b48 <xTaskRemoveFromEventList+0xb4>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d903      	bls.n	8012af0 <xTaskRemoveFromEventList+0x5c>
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aec:	4a16      	ldr	r2, [pc, #88]	; (8012b48 <xTaskRemoveFromEventList+0xb4>)
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af4:	4613      	mov	r3, r2
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	4413      	add	r3, r2
 8012afa:	009b      	lsls	r3, r3, #2
 8012afc:	4a13      	ldr	r2, [pc, #76]	; (8012b4c <xTaskRemoveFromEventList+0xb8>)
 8012afe:	441a      	add	r2, r3
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	3304      	adds	r3, #4
 8012b04:	4619      	mov	r1, r3
 8012b06:	4610      	mov	r0, r2
 8012b08:	f7fe f881 	bl	8010c0e <vListInsertEnd>
 8012b0c:	e005      	b.n	8012b1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	3318      	adds	r3, #24
 8012b12:	4619      	mov	r1, r3
 8012b14:	480e      	ldr	r0, [pc, #56]	; (8012b50 <xTaskRemoveFromEventList+0xbc>)
 8012b16:	f7fe f87a 	bl	8010c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b1e:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <xTaskRemoveFromEventList+0xc0>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d905      	bls.n	8012b34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <xTaskRemoveFromEventList+0xc4>)
 8012b2e:	2201      	movs	r2, #1
 8012b30:	601a      	str	r2, [r3, #0]
 8012b32:	e001      	b.n	8012b38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012b34:	2300      	movs	r3, #0
 8012b36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012b38:	697b      	ldr	r3, [r7, #20]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3718      	adds	r7, #24
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	24006900 	.word	0x24006900
 8012b48:	240068e0 	.word	0x240068e0
 8012b4c:	24006408 	.word	0x24006408
 8012b50:	24006898 	.word	0x24006898
 8012b54:	24006404 	.word	0x24006404
 8012b58:	240068ec 	.word	0x240068ec

08012b5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012b64:	4b06      	ldr	r3, [pc, #24]	; (8012b80 <vTaskInternalSetTimeOutState+0x24>)
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012b6c:	4b05      	ldr	r3, [pc, #20]	; (8012b84 <vTaskInternalSetTimeOutState+0x28>)
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	605a      	str	r2, [r3, #4]
}
 8012b74:	bf00      	nop
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	240068f0 	.word	0x240068f0
 8012b84:	240068dc 	.word	0x240068dc

08012b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b088      	sub	sp, #32
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10a      	bne.n	8012bae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9c:	f383 8811 	msr	BASEPRI, r3
 8012ba0:	f3bf 8f6f 	isb	sy
 8012ba4:	f3bf 8f4f 	dsb	sy
 8012ba8:	613b      	str	r3, [r7, #16]
}
 8012baa:	bf00      	nop
 8012bac:	e7fe      	b.n	8012bac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10a      	bne.n	8012bca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	60fb      	str	r3, [r7, #12]
}
 8012bc6:	bf00      	nop
 8012bc8:	e7fe      	b.n	8012bc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012bca:	f7fe f9d3 	bl	8010f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012bce:	4b1d      	ldr	r3, [pc, #116]	; (8012c44 <xTaskCheckForTimeOut+0xbc>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	69ba      	ldr	r2, [r7, #24]
 8012bda:	1ad3      	subs	r3, r2, r3
 8012bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012be6:	d102      	bne.n	8012bee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012be8:	2300      	movs	r3, #0
 8012bea:	61fb      	str	r3, [r7, #28]
 8012bec:	e023      	b.n	8012c36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <xTaskCheckForTimeOut+0xc0>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d007      	beq.n	8012c0a <xTaskCheckForTimeOut+0x82>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	69ba      	ldr	r2, [r7, #24]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d302      	bcc.n	8012c0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012c04:	2301      	movs	r3, #1
 8012c06:	61fb      	str	r3, [r7, #28]
 8012c08:	e015      	b.n	8012c36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	697a      	ldr	r2, [r7, #20]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d20b      	bcs.n	8012c2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	1ad2      	subs	r2, r2, r3
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff ff9b 	bl	8012b5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012c26:	2300      	movs	r3, #0
 8012c28:	61fb      	str	r3, [r7, #28]
 8012c2a:	e004      	b.n	8012c36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c32:	2301      	movs	r3, #1
 8012c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c36:	f7fe f9cd 	bl	8010fd4 <vPortExitCritical>

	return xReturn;
 8012c3a:	69fb      	ldr	r3, [r7, #28]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3720      	adds	r7, #32
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	240068dc 	.word	0x240068dc
 8012c48:	240068f0 	.word	0x240068f0

08012c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c50:	4b03      	ldr	r3, [pc, #12]	; (8012c60 <vTaskMissedYield+0x14>)
 8012c52:	2201      	movs	r2, #1
 8012c54:	601a      	str	r2, [r3, #0]
}
 8012c56:	bf00      	nop
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr
 8012c60:	240068ec 	.word	0x240068ec

08012c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012c6c:	f000 f852 	bl	8012d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012c70:	4b06      	ldr	r3, [pc, #24]	; (8012c8c <prvIdleTask+0x28>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d9f9      	bls.n	8012c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012c78:	4b05      	ldr	r3, [pc, #20]	; (8012c90 <prvIdleTask+0x2c>)
 8012c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c7e:	601a      	str	r2, [r3, #0]
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012c88:	e7f0      	b.n	8012c6c <prvIdleTask+0x8>
 8012c8a:	bf00      	nop
 8012c8c:	24006408 	.word	0x24006408
 8012c90:	e000ed04 	.word	0xe000ed04

08012c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	607b      	str	r3, [r7, #4]
 8012c9e:	e00c      	b.n	8012cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	4413      	add	r3, r2
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	4a12      	ldr	r2, [pc, #72]	; (8012cf4 <prvInitialiseTaskLists+0x60>)
 8012cac:	4413      	add	r3, r2
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7fd ff80 	bl	8010bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	607b      	str	r3, [r7, #4]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b37      	cmp	r3, #55	; 0x37
 8012cbe:	d9ef      	bls.n	8012ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012cc0:	480d      	ldr	r0, [pc, #52]	; (8012cf8 <prvInitialiseTaskLists+0x64>)
 8012cc2:	f7fd ff77 	bl	8010bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012cc6:	480d      	ldr	r0, [pc, #52]	; (8012cfc <prvInitialiseTaskLists+0x68>)
 8012cc8:	f7fd ff74 	bl	8010bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ccc:	480c      	ldr	r0, [pc, #48]	; (8012d00 <prvInitialiseTaskLists+0x6c>)
 8012cce:	f7fd ff71 	bl	8010bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012cd2:	480c      	ldr	r0, [pc, #48]	; (8012d04 <prvInitialiseTaskLists+0x70>)
 8012cd4:	f7fd ff6e 	bl	8010bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012cd8:	480b      	ldr	r0, [pc, #44]	; (8012d08 <prvInitialiseTaskLists+0x74>)
 8012cda:	f7fd ff6b 	bl	8010bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012cde:	4b0b      	ldr	r3, [pc, #44]	; (8012d0c <prvInitialiseTaskLists+0x78>)
 8012ce0:	4a05      	ldr	r2, [pc, #20]	; (8012cf8 <prvInitialiseTaskLists+0x64>)
 8012ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ce4:	4b0a      	ldr	r3, [pc, #40]	; (8012d10 <prvInitialiseTaskLists+0x7c>)
 8012ce6:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <prvInitialiseTaskLists+0x68>)
 8012ce8:	601a      	str	r2, [r3, #0]
}
 8012cea:	bf00      	nop
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	24006408 	.word	0x24006408
 8012cf8:	24006868 	.word	0x24006868
 8012cfc:	2400687c 	.word	0x2400687c
 8012d00:	24006898 	.word	0x24006898
 8012d04:	240068ac 	.word	0x240068ac
 8012d08:	240068c4 	.word	0x240068c4
 8012d0c:	24006890 	.word	0x24006890
 8012d10:	24006894 	.word	0x24006894

08012d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d1a:	e019      	b.n	8012d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012d1c:	f7fe f92a 	bl	8010f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d20:	4b10      	ldr	r3, [pc, #64]	; (8012d64 <prvCheckTasksWaitingTermination+0x50>)
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	3304      	adds	r3, #4
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fd ffcb 	bl	8010cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012d32:	4b0d      	ldr	r3, [pc, #52]	; (8012d68 <prvCheckTasksWaitingTermination+0x54>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3b01      	subs	r3, #1
 8012d38:	4a0b      	ldr	r2, [pc, #44]	; (8012d68 <prvCheckTasksWaitingTermination+0x54>)
 8012d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012d3c:	4b0b      	ldr	r3, [pc, #44]	; (8012d6c <prvCheckTasksWaitingTermination+0x58>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	3b01      	subs	r3, #1
 8012d42:	4a0a      	ldr	r2, [pc, #40]	; (8012d6c <prvCheckTasksWaitingTermination+0x58>)
 8012d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d46:	f7fe f945 	bl	8010fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 f810 	bl	8012d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d50:	4b06      	ldr	r3, [pc, #24]	; (8012d6c <prvCheckTasksWaitingTermination+0x58>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d1e1      	bne.n	8012d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012d58:	bf00      	nop
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	240068ac 	.word	0x240068ac
 8012d68:	240068d8 	.word	0x240068d8
 8012d6c:	240068c0 	.word	0x240068c0

08012d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d108      	bne.n	8012d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fd fdf6 	bl	8010978 <vPortFree>
				vPortFree( pxTCB );
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7fd fdf3 	bl	8010978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012d92:	e018      	b.n	8012dc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d103      	bne.n	8012da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7fd fdea 	bl	8010978 <vPortFree>
	}
 8012da4:	e00f      	b.n	8012dc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012dac:	2b02      	cmp	r3, #2
 8012dae:	d00a      	beq.n	8012dc6 <prvDeleteTCB+0x56>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	60fb      	str	r3, [r7, #12]
}
 8012dc2:	bf00      	nop
 8012dc4:	e7fe      	b.n	8012dc4 <prvDeleteTCB+0x54>
	}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
	...

08012dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012dd6:	4b0c      	ldr	r3, [pc, #48]	; (8012e08 <prvResetNextTaskUnblockTime+0x38>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d104      	bne.n	8012dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012de0:	4b0a      	ldr	r3, [pc, #40]	; (8012e0c <prvResetNextTaskUnblockTime+0x3c>)
 8012de2:	f04f 32ff 	mov.w	r2, #4294967295
 8012de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012de8:	e008      	b.n	8012dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dea:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <prvResetNextTaskUnblockTime+0x38>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	4a04      	ldr	r2, [pc, #16]	; (8012e0c <prvResetNextTaskUnblockTime+0x3c>)
 8012dfa:	6013      	str	r3, [r2, #0]
}
 8012dfc:	bf00      	nop
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr
 8012e08:	24006890 	.word	0x24006890
 8012e0c:	240068f8 	.word	0x240068f8

08012e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012e16:	4b0b      	ldr	r3, [pc, #44]	; (8012e44 <xTaskGetSchedulerState+0x34>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d102      	bne.n	8012e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	607b      	str	r3, [r7, #4]
 8012e22:	e008      	b.n	8012e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e24:	4b08      	ldr	r3, [pc, #32]	; (8012e48 <xTaskGetSchedulerState+0x38>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d102      	bne.n	8012e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	607b      	str	r3, [r7, #4]
 8012e30:	e001      	b.n	8012e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012e32:	2300      	movs	r3, #0
 8012e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012e36:	687b      	ldr	r3, [r7, #4]
	}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr
 8012e44:	240068e4 	.word	0x240068e4
 8012e48:	24006900 	.word	0x24006900

08012e4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d051      	beq.n	8012f06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e66:	4b2a      	ldr	r3, [pc, #168]	; (8012f10 <xTaskPriorityInherit+0xc4>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d241      	bcs.n	8012ef4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	699b      	ldr	r3, [r3, #24]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	db06      	blt.n	8012e86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e78:	4b25      	ldr	r3, [pc, #148]	; (8012f10 <xTaskPriorityInherit+0xc4>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	6959      	ldr	r1, [r3, #20]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e8e:	4613      	mov	r3, r2
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	4413      	add	r3, r2
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	4a1f      	ldr	r2, [pc, #124]	; (8012f14 <xTaskPriorityInherit+0xc8>)
 8012e98:	4413      	add	r3, r2
 8012e9a:	4299      	cmp	r1, r3
 8012e9c:	d122      	bne.n	8012ee4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fd ff10 	bl	8010cc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ea8:	4b19      	ldr	r3, [pc, #100]	; (8012f10 <xTaskPriorityInherit+0xc4>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb6:	4b18      	ldr	r3, [pc, #96]	; (8012f18 <xTaskPriorityInherit+0xcc>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d903      	bls.n	8012ec6 <xTaskPriorityInherit+0x7a>
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec2:	4a15      	ldr	r2, [pc, #84]	; (8012f18 <xTaskPriorityInherit+0xcc>)
 8012ec4:	6013      	str	r3, [r2, #0]
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eca:	4613      	mov	r3, r2
 8012ecc:	009b      	lsls	r3, r3, #2
 8012ece:	4413      	add	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4a10      	ldr	r2, [pc, #64]	; (8012f14 <xTaskPriorityInherit+0xc8>)
 8012ed4:	441a      	add	r2, r3
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	4619      	mov	r1, r3
 8012edc:	4610      	mov	r0, r2
 8012ede:	f7fd fe96 	bl	8010c0e <vListInsertEnd>
 8012ee2:	e004      	b.n	8012eee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ee4:	4b0a      	ldr	r3, [pc, #40]	; (8012f10 <xTaskPriorityInherit+0xc4>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	60fb      	str	r3, [r7, #12]
 8012ef2:	e008      	b.n	8012f06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ef8:	4b05      	ldr	r3, [pc, #20]	; (8012f10 <xTaskPriorityInherit+0xc4>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d201      	bcs.n	8012f06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012f02:	2301      	movs	r3, #1
 8012f04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f06:	68fb      	ldr	r3, [r7, #12]
	}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3710      	adds	r7, #16
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	24006404 	.word	0x24006404
 8012f14:	24006408 	.word	0x24006408
 8012f18:	240068e0 	.word	0x240068e0

08012f1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d056      	beq.n	8012fe0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012f32:	4b2e      	ldr	r3, [pc, #184]	; (8012fec <xTaskPriorityDisinherit+0xd0>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	693a      	ldr	r2, [r7, #16]
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d00a      	beq.n	8012f52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f40:	f383 8811 	msr	BASEPRI, r3
 8012f44:	f3bf 8f6f 	isb	sy
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	60fb      	str	r3, [r7, #12]
}
 8012f4e:	bf00      	nop
 8012f50:	e7fe      	b.n	8012f50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10a      	bne.n	8012f70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5e:	f383 8811 	msr	BASEPRI, r3
 8012f62:	f3bf 8f6f 	isb	sy
 8012f66:	f3bf 8f4f 	dsb	sy
 8012f6a:	60bb      	str	r3, [r7, #8]
}
 8012f6c:	bf00      	nop
 8012f6e:	e7fe      	b.n	8012f6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f74:	1e5a      	subs	r2, r3, #1
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d02c      	beq.n	8012fe0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d128      	bne.n	8012fe0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	3304      	adds	r3, #4
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7fd fe98 	bl	8010cc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fa4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fb0:	4b0f      	ldr	r3, [pc, #60]	; (8012ff0 <xTaskPriorityDisinherit+0xd4>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d903      	bls.n	8012fc0 <xTaskPriorityDisinherit+0xa4>
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fbc:	4a0c      	ldr	r2, [pc, #48]	; (8012ff0 <xTaskPriorityDisinherit+0xd4>)
 8012fbe:	6013      	str	r3, [r2, #0]
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	4413      	add	r3, r2
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	4a09      	ldr	r2, [pc, #36]	; (8012ff4 <xTaskPriorityDisinherit+0xd8>)
 8012fce:	441a      	add	r2, r3
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	3304      	adds	r3, #4
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	f7fd fe19 	bl	8010c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012fe0:	697b      	ldr	r3, [r7, #20]
	}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3718      	adds	r7, #24
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
 8012fea:	bf00      	nop
 8012fec:	24006404 	.word	0x24006404
 8012ff0:	240068e0 	.word	0x240068e0
 8012ff4:	24006408 	.word	0x24006408

08012ff8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b088      	sub	sp, #32
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013006:	2301      	movs	r3, #1
 8013008:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d06a      	beq.n	80130e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013014:	2b00      	cmp	r3, #0
 8013016:	d10a      	bne.n	801302e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301c:	f383 8811 	msr	BASEPRI, r3
 8013020:	f3bf 8f6f 	isb	sy
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	60fb      	str	r3, [r7, #12]
}
 801302a:	bf00      	nop
 801302c:	e7fe      	b.n	801302c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801302e:	69bb      	ldr	r3, [r7, #24]
 8013030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d902      	bls.n	801303e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	61fb      	str	r3, [r7, #28]
 801303c:	e002      	b.n	8013044 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013042:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013044:	69bb      	ldr	r3, [r7, #24]
 8013046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013048:	69fa      	ldr	r2, [r7, #28]
 801304a:	429a      	cmp	r2, r3
 801304c:	d04b      	beq.n	80130e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013052:	697a      	ldr	r2, [r7, #20]
 8013054:	429a      	cmp	r2, r3
 8013056:	d146      	bne.n	80130e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013058:	4b25      	ldr	r3, [pc, #148]	; (80130f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	69ba      	ldr	r2, [r7, #24]
 801305e:	429a      	cmp	r2, r3
 8013060:	d10a      	bne.n	8013078 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013066:	f383 8811 	msr	BASEPRI, r3
 801306a:	f3bf 8f6f 	isb	sy
 801306e:	f3bf 8f4f 	dsb	sy
 8013072:	60bb      	str	r3, [r7, #8]
}
 8013074:	bf00      	nop
 8013076:	e7fe      	b.n	8013076 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	69fa      	ldr	r2, [r7, #28]
 8013082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	699b      	ldr	r3, [r3, #24]
 8013088:	2b00      	cmp	r3, #0
 801308a:	db04      	blt.n	8013096 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	6959      	ldr	r1, [r3, #20]
 801309a:	693a      	ldr	r2, [r7, #16]
 801309c:	4613      	mov	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4a13      	ldr	r2, [pc, #76]	; (80130f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80130a6:	4413      	add	r3, r2
 80130a8:	4299      	cmp	r1, r3
 80130aa:	d11c      	bne.n	80130e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	3304      	adds	r3, #4
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7fd fe09 	bl	8010cc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ba:	4b0f      	ldr	r3, [pc, #60]	; (80130f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d903      	bls.n	80130ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c6:	4a0c      	ldr	r2, [pc, #48]	; (80130f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80130c8:	6013      	str	r3, [r2, #0]
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ce:	4613      	mov	r3, r2
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	4413      	add	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	4a07      	ldr	r2, [pc, #28]	; (80130f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80130d8:	441a      	add	r2, r3
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	3304      	adds	r3, #4
 80130de:	4619      	mov	r1, r3
 80130e0:	4610      	mov	r0, r2
 80130e2:	f7fd fd94 	bl	8010c0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80130e6:	bf00      	nop
 80130e8:	3720      	adds	r7, #32
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	24006404 	.word	0x24006404
 80130f4:	24006408 	.word	0x24006408
 80130f8:	240068e0 	.word	0x240068e0

080130fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80130fc:	b480      	push	{r7}
 80130fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013100:	4b07      	ldr	r3, [pc, #28]	; (8013120 <pvTaskIncrementMutexHeldCount+0x24>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d004      	beq.n	8013112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013108:	4b05      	ldr	r3, [pc, #20]	; (8013120 <pvTaskIncrementMutexHeldCount+0x24>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801310e:	3201      	adds	r2, #1
 8013110:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013112:	4b03      	ldr	r3, [pc, #12]	; (8013120 <pvTaskIncrementMutexHeldCount+0x24>)
 8013114:	681b      	ldr	r3, [r3, #0]
	}
 8013116:	4618      	mov	r0, r3
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr
 8013120:	24006404 	.word	0x24006404

08013124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801312e:	4b21      	ldr	r3, [pc, #132]	; (80131b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013134:	4b20      	ldr	r3, [pc, #128]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3304      	adds	r3, #4
 801313a:	4618      	mov	r0, r3
 801313c:	f7fd fdc4 	bl	8010cc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013146:	d10a      	bne.n	801315e <prvAddCurrentTaskToDelayedList+0x3a>
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d007      	beq.n	801315e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801314e:	4b1a      	ldr	r3, [pc, #104]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	3304      	adds	r3, #4
 8013154:	4619      	mov	r1, r3
 8013156:	4819      	ldr	r0, [pc, #100]	; (80131bc <prvAddCurrentTaskToDelayedList+0x98>)
 8013158:	f7fd fd59 	bl	8010c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801315c:	e026      	b.n	80131ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4413      	add	r3, r2
 8013164:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013166:	4b14      	ldr	r3, [pc, #80]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	68ba      	ldr	r2, [r7, #8]
 801316c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801316e:	68ba      	ldr	r2, [r7, #8]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	429a      	cmp	r2, r3
 8013174:	d209      	bcs.n	801318a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013176:	4b12      	ldr	r3, [pc, #72]	; (80131c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	4b0f      	ldr	r3, [pc, #60]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	3304      	adds	r3, #4
 8013180:	4619      	mov	r1, r3
 8013182:	4610      	mov	r0, r2
 8013184:	f7fd fd67 	bl	8010c56 <vListInsert>
}
 8013188:	e010      	b.n	80131ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801318a:	4b0e      	ldr	r3, [pc, #56]	; (80131c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	4b0a      	ldr	r3, [pc, #40]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	3304      	adds	r3, #4
 8013194:	4619      	mov	r1, r3
 8013196:	4610      	mov	r0, r2
 8013198:	f7fd fd5d 	bl	8010c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801319c:	4b0a      	ldr	r3, [pc, #40]	; (80131c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d202      	bcs.n	80131ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80131a6:	4a08      	ldr	r2, [pc, #32]	; (80131c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	6013      	str	r3, [r2, #0]
}
 80131ac:	bf00      	nop
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	240068dc 	.word	0x240068dc
 80131b8:	24006404 	.word	0x24006404
 80131bc:	240068c4 	.word	0x240068c4
 80131c0:	24006894 	.word	0x24006894
 80131c4:	24006890 	.word	0x24006890
 80131c8:	240068f8 	.word	0x240068f8

080131cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b08a      	sub	sp, #40	; 0x28
 80131d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80131d2:	2300      	movs	r3, #0
 80131d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80131d6:	f000 fb07 	bl	80137e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80131da:	4b1c      	ldr	r3, [pc, #112]	; (801324c <xTimerCreateTimerTask+0x80>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d021      	beq.n	8013226 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80131e6:	2300      	movs	r3, #0
 80131e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80131ea:	1d3a      	adds	r2, r7, #4
 80131ec:	f107 0108 	add.w	r1, r7, #8
 80131f0:	f107 030c 	add.w	r3, r7, #12
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fd fad9 	bl	80107ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	68fa      	ldr	r2, [r7, #12]
 8013200:	9202      	str	r2, [sp, #8]
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	2302      	movs	r3, #2
 8013206:	9300      	str	r3, [sp, #0]
 8013208:	2300      	movs	r3, #0
 801320a:	460a      	mov	r2, r1
 801320c:	4910      	ldr	r1, [pc, #64]	; (8013250 <xTimerCreateTimerTask+0x84>)
 801320e:	4811      	ldr	r0, [pc, #68]	; (8013254 <xTimerCreateTimerTask+0x88>)
 8013210:	f7fe ffe0 	bl	80121d4 <xTaskCreateStatic>
 8013214:	4603      	mov	r3, r0
 8013216:	4a10      	ldr	r2, [pc, #64]	; (8013258 <xTimerCreateTimerTask+0x8c>)
 8013218:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801321a:	4b0f      	ldr	r3, [pc, #60]	; (8013258 <xTimerCreateTimerTask+0x8c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d001      	beq.n	8013226 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013222:	2301      	movs	r3, #1
 8013224:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d10a      	bne.n	8013242 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013230:	f383 8811 	msr	BASEPRI, r3
 8013234:	f3bf 8f6f 	isb	sy
 8013238:	f3bf 8f4f 	dsb	sy
 801323c:	613b      	str	r3, [r7, #16]
}
 801323e:	bf00      	nop
 8013240:	e7fe      	b.n	8013240 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013242:	697b      	ldr	r3, [r7, #20]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	24006934 	.word	0x24006934
 8013250:	08024808 	.word	0x08024808
 8013254:	08013391 	.word	0x08013391
 8013258:	24006938 	.word	0x24006938

0801325c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b08a      	sub	sp, #40	; 0x28
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
 8013268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801326a:	2300      	movs	r3, #0
 801326c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d10a      	bne.n	801328a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013278:	f383 8811 	msr	BASEPRI, r3
 801327c:	f3bf 8f6f 	isb	sy
 8013280:	f3bf 8f4f 	dsb	sy
 8013284:	623b      	str	r3, [r7, #32]
}
 8013286:	bf00      	nop
 8013288:	e7fe      	b.n	8013288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801328a:	4b1a      	ldr	r3, [pc, #104]	; (80132f4 <xTimerGenericCommand+0x98>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d02a      	beq.n	80132e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	2b05      	cmp	r3, #5
 80132a2:	dc18      	bgt.n	80132d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80132a4:	f7ff fdb4 	bl	8012e10 <xTaskGetSchedulerState>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b02      	cmp	r3, #2
 80132ac:	d109      	bne.n	80132c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80132ae:	4b11      	ldr	r3, [pc, #68]	; (80132f4 <xTimerGenericCommand+0x98>)
 80132b0:	6818      	ldr	r0, [r3, #0]
 80132b2:	f107 0110 	add.w	r1, r7, #16
 80132b6:	2300      	movs	r3, #0
 80132b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132ba:	f7fe f925 	bl	8011508 <xQueueGenericSend>
 80132be:	6278      	str	r0, [r7, #36]	; 0x24
 80132c0:	e012      	b.n	80132e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80132c2:	4b0c      	ldr	r3, [pc, #48]	; (80132f4 <xTimerGenericCommand+0x98>)
 80132c4:	6818      	ldr	r0, [r3, #0]
 80132c6:	f107 0110 	add.w	r1, r7, #16
 80132ca:	2300      	movs	r3, #0
 80132cc:	2200      	movs	r2, #0
 80132ce:	f7fe f91b 	bl	8011508 <xQueueGenericSend>
 80132d2:	6278      	str	r0, [r7, #36]	; 0x24
 80132d4:	e008      	b.n	80132e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80132d6:	4b07      	ldr	r3, [pc, #28]	; (80132f4 <xTimerGenericCommand+0x98>)
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	f107 0110 	add.w	r1, r7, #16
 80132de:	2300      	movs	r3, #0
 80132e0:	683a      	ldr	r2, [r7, #0]
 80132e2:	f7fe fa0f 	bl	8011704 <xQueueGenericSendFromISR>
 80132e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80132e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3728      	adds	r7, #40	; 0x28
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	24006934 	.word	0x24006934

080132f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b088      	sub	sp, #32
 80132fc:	af02      	add	r7, sp, #8
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013302:	4b22      	ldr	r3, [pc, #136]	; (801338c <prvProcessExpiredTimer+0x94>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	3304      	adds	r3, #4
 8013310:	4618      	mov	r0, r3
 8013312:	f7fd fcd9 	bl	8010cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801331c:	f003 0304 	and.w	r3, r3, #4
 8013320:	2b00      	cmp	r3, #0
 8013322:	d022      	beq.n	801336a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	699a      	ldr	r2, [r3, #24]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	18d1      	adds	r1, r2, r3
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	683a      	ldr	r2, [r7, #0]
 8013330:	6978      	ldr	r0, [r7, #20]
 8013332:	f000 f8d1 	bl	80134d8 <prvInsertTimerInActiveList>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d01f      	beq.n	801337c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801333c:	2300      	movs	r3, #0
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	2300      	movs	r3, #0
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	2100      	movs	r1, #0
 8013346:	6978      	ldr	r0, [r7, #20]
 8013348:	f7ff ff88 	bl	801325c <xTimerGenericCommand>
 801334c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d113      	bne.n	801337c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	60fb      	str	r3, [r7, #12]
}
 8013366:	bf00      	nop
 8013368:	e7fe      	b.n	8013368 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013370:	f023 0301 	bic.w	r3, r3, #1
 8013374:	b2da      	uxtb	r2, r3
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	6a1b      	ldr	r3, [r3, #32]
 8013380:	6978      	ldr	r0, [r7, #20]
 8013382:	4798      	blx	r3
}
 8013384:	bf00      	nop
 8013386:	3718      	adds	r7, #24
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	2400692c 	.word	0x2400692c

08013390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013398:	f107 0308 	add.w	r3, r7, #8
 801339c:	4618      	mov	r0, r3
 801339e:	f000 f857 	bl	8013450 <prvGetNextExpireTime>
 80133a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	4619      	mov	r1, r3
 80133a8:	68f8      	ldr	r0, [r7, #12]
 80133aa:	f000 f803 	bl	80133b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80133ae:	f000 f8d5 	bl	801355c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80133b2:	e7f1      	b.n	8013398 <prvTimerTask+0x8>

080133b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80133be:	f7ff f945 	bl	801264c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80133c2:	f107 0308 	add.w	r3, r7, #8
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 f866 	bl	8013498 <prvSampleTimeNow>
 80133cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d130      	bne.n	8013436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d10a      	bne.n	80133f0 <prvProcessTimerOrBlockTask+0x3c>
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d806      	bhi.n	80133f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80133e2:	f7ff f941 	bl	8012668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80133e6:	68f9      	ldr	r1, [r7, #12]
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7ff ff85 	bl	80132f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80133ee:	e024      	b.n	801343a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d008      	beq.n	8013408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80133f6:	4b13      	ldr	r3, [pc, #76]	; (8013444 <prvProcessTimerOrBlockTask+0x90>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d101      	bne.n	8013404 <prvProcessTimerOrBlockTask+0x50>
 8013400:	2301      	movs	r3, #1
 8013402:	e000      	b.n	8013406 <prvProcessTimerOrBlockTask+0x52>
 8013404:	2300      	movs	r3, #0
 8013406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013408:	4b0f      	ldr	r3, [pc, #60]	; (8013448 <prvProcessTimerOrBlockTask+0x94>)
 801340a:	6818      	ldr	r0, [r3, #0]
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	4619      	mov	r1, r3
 8013416:	f7fe fea9 	bl	801216c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801341a:	f7ff f925 	bl	8012668 <xTaskResumeAll>
 801341e:	4603      	mov	r3, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10a      	bne.n	801343a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013424:	4b09      	ldr	r3, [pc, #36]	; (801344c <prvProcessTimerOrBlockTask+0x98>)
 8013426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801342a:	601a      	str	r2, [r3, #0]
 801342c:	f3bf 8f4f 	dsb	sy
 8013430:	f3bf 8f6f 	isb	sy
}
 8013434:	e001      	b.n	801343a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013436:	f7ff f917 	bl	8012668 <xTaskResumeAll>
}
 801343a:	bf00      	nop
 801343c:	3710      	adds	r7, #16
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	24006930 	.word	0x24006930
 8013448:	24006934 	.word	0x24006934
 801344c:	e000ed04 	.word	0xe000ed04

08013450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013450:	b480      	push	{r7}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013458:	4b0e      	ldr	r3, [pc, #56]	; (8013494 <prvGetNextExpireTime+0x44>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d101      	bne.n	8013466 <prvGetNextExpireTime+0x16>
 8013462:	2201      	movs	r2, #1
 8013464:	e000      	b.n	8013468 <prvGetNextExpireTime+0x18>
 8013466:	2200      	movs	r2, #0
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d105      	bne.n	8013480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013474:	4b07      	ldr	r3, [pc, #28]	; (8013494 <prvGetNextExpireTime+0x44>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	60fb      	str	r3, [r7, #12]
 801347e:	e001      	b.n	8013484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013480:	2300      	movs	r3, #0
 8013482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013484:	68fb      	ldr	r3, [r7, #12]
}
 8013486:	4618      	mov	r0, r3
 8013488:	3714      	adds	r7, #20
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	2400692c 	.word	0x2400692c

08013498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b084      	sub	sp, #16
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80134a0:	f7ff f980 	bl	80127a4 <xTaskGetTickCount>
 80134a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80134a6:	4b0b      	ldr	r3, [pc, #44]	; (80134d4 <prvSampleTimeNow+0x3c>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d205      	bcs.n	80134bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80134b0:	f000 f936 	bl	8013720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2201      	movs	r2, #1
 80134b8:	601a      	str	r2, [r3, #0]
 80134ba:	e002      	b.n	80134c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2200      	movs	r2, #0
 80134c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80134c2:	4a04      	ldr	r2, [pc, #16]	; (80134d4 <prvSampleTimeNow+0x3c>)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80134c8:	68fb      	ldr	r3, [r7, #12]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	2400693c 	.word	0x2400693c

080134d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
 80134e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80134e6:	2300      	movs	r3, #0
 80134e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	68ba      	ldr	r2, [r7, #8]
 80134ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	68fa      	ldr	r2, [r7, #12]
 80134f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d812      	bhi.n	8013524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	1ad2      	subs	r2, r2, r3
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	699b      	ldr	r3, [r3, #24]
 8013508:	429a      	cmp	r2, r3
 801350a:	d302      	bcc.n	8013512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801350c:	2301      	movs	r3, #1
 801350e:	617b      	str	r3, [r7, #20]
 8013510:	e01b      	b.n	801354a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013512:	4b10      	ldr	r3, [pc, #64]	; (8013554 <prvInsertTimerInActiveList+0x7c>)
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	3304      	adds	r3, #4
 801351a:	4619      	mov	r1, r3
 801351c:	4610      	mov	r0, r2
 801351e:	f7fd fb9a 	bl	8010c56 <vListInsert>
 8013522:	e012      	b.n	801354a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	429a      	cmp	r2, r3
 801352a:	d206      	bcs.n	801353a <prvInsertTimerInActiveList+0x62>
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	429a      	cmp	r2, r3
 8013532:	d302      	bcc.n	801353a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013534:	2301      	movs	r3, #1
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	e007      	b.n	801354a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801353a:	4b07      	ldr	r3, [pc, #28]	; (8013558 <prvInsertTimerInActiveList+0x80>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3304      	adds	r3, #4
 8013542:	4619      	mov	r1, r3
 8013544:	4610      	mov	r0, r2
 8013546:	f7fd fb86 	bl	8010c56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801354a:	697b      	ldr	r3, [r7, #20]
}
 801354c:	4618      	mov	r0, r3
 801354e:	3718      	adds	r7, #24
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	24006930 	.word	0x24006930
 8013558:	2400692c 	.word	0x2400692c

0801355c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b08e      	sub	sp, #56	; 0x38
 8013560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013562:	e0ca      	b.n	80136fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	da18      	bge.n	801359c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801356a:	1d3b      	adds	r3, r7, #4
 801356c:	3304      	adds	r3, #4
 801356e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013572:	2b00      	cmp	r3, #0
 8013574:	d10a      	bne.n	801358c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357a:	f383 8811 	msr	BASEPRI, r3
 801357e:	f3bf 8f6f 	isb	sy
 8013582:	f3bf 8f4f 	dsb	sy
 8013586:	61fb      	str	r3, [r7, #28]
}
 8013588:	bf00      	nop
 801358a:	e7fe      	b.n	801358a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013592:	6850      	ldr	r0, [r2, #4]
 8013594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013596:	6892      	ldr	r2, [r2, #8]
 8013598:	4611      	mov	r1, r2
 801359a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f2c0 80ab 	blt.w	80136fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	695b      	ldr	r3, [r3, #20]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d004      	beq.n	80135ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b2:	3304      	adds	r3, #4
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fd fb87 	bl	8010cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80135ba:	463b      	mov	r3, r7
 80135bc:	4618      	mov	r0, r3
 80135be:	f7ff ff6b 	bl	8013498 <prvSampleTimeNow>
 80135c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b09      	cmp	r3, #9
 80135c8:	f200 8096 	bhi.w	80136f8 <prvProcessReceivedCommands+0x19c>
 80135cc:	a201      	add	r2, pc, #4	; (adr r2, 80135d4 <prvProcessReceivedCommands+0x78>)
 80135ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d2:	bf00      	nop
 80135d4:	080135fd 	.word	0x080135fd
 80135d8:	080135fd 	.word	0x080135fd
 80135dc:	080135fd 	.word	0x080135fd
 80135e0:	08013671 	.word	0x08013671
 80135e4:	08013685 	.word	0x08013685
 80135e8:	080136cf 	.word	0x080136cf
 80135ec:	080135fd 	.word	0x080135fd
 80135f0:	080135fd 	.word	0x080135fd
 80135f4:	08013671 	.word	0x08013671
 80135f8:	08013685 	.word	0x08013685
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80135fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013602:	f043 0301 	orr.w	r3, r3, #1
 8013606:	b2da      	uxtb	r2, r3
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013612:	699b      	ldr	r3, [r3, #24]
 8013614:	18d1      	adds	r1, r2, r3
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801361a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801361c:	f7ff ff5c 	bl	80134d8 <prvInsertTimerInActiveList>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d069      	beq.n	80136fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	6a1b      	ldr	r3, [r3, #32]
 801362a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801362c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013634:	f003 0304 	and.w	r3, r3, #4
 8013638:	2b00      	cmp	r3, #0
 801363a:	d05e      	beq.n	80136fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	699b      	ldr	r3, [r3, #24]
 8013642:	441a      	add	r2, r3
 8013644:	2300      	movs	r3, #0
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	2300      	movs	r3, #0
 801364a:	2100      	movs	r1, #0
 801364c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801364e:	f7ff fe05 	bl	801325c <xTimerGenericCommand>
 8013652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013654:	6a3b      	ldr	r3, [r7, #32]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d14f      	bne.n	80136fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365e:	f383 8811 	msr	BASEPRI, r3
 8013662:	f3bf 8f6f 	isb	sy
 8013666:	f3bf 8f4f 	dsb	sy
 801366a:	61bb      	str	r3, [r7, #24]
}
 801366c:	bf00      	nop
 801366e:	e7fe      	b.n	801366e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013676:	f023 0301 	bic.w	r3, r3, #1
 801367a:	b2da      	uxtb	r2, r3
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013682:	e03a      	b.n	80136fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801368a:	f043 0301 	orr.w	r3, r3, #1
 801368e:	b2da      	uxtb	r2, r3
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013696:	68ba      	ldr	r2, [r7, #8]
 8013698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369e:	699b      	ldr	r3, [r3, #24]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d10a      	bne.n	80136ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80136a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	617b      	str	r3, [r7, #20]
}
 80136b6:	bf00      	nop
 80136b8:	e7fe      	b.n	80136b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	699a      	ldr	r2, [r3, #24]
 80136be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c0:	18d1      	adds	r1, r2, r3
 80136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136c8:	f7ff ff06 	bl	80134d8 <prvInsertTimerInActiveList>
					break;
 80136cc:	e015      	b.n	80136fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80136ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136d4:	f003 0302 	and.w	r3, r3, #2
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d103      	bne.n	80136e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80136dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136de:	f7fd f94b 	bl	8010978 <vPortFree>
 80136e2:	e00a      	b.n	80136fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80136e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136ea:	f023 0301 	bic.w	r3, r3, #1
 80136ee:	b2da      	uxtb	r2, r3
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80136f6:	e000      	b.n	80136fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80136f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136fa:	4b08      	ldr	r3, [pc, #32]	; (801371c <prvProcessReceivedCommands+0x1c0>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	1d39      	adds	r1, r7, #4
 8013700:	2200      	movs	r2, #0
 8013702:	4618      	mov	r0, r3
 8013704:	f7fe f926 	bl	8011954 <xQueueReceive>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	f47f af2a 	bne.w	8013564 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	3730      	adds	r7, #48	; 0x30
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	24006934 	.word	0x24006934

08013720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b088      	sub	sp, #32
 8013724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013726:	e048      	b.n	80137ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013728:	4b2d      	ldr	r3, [pc, #180]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013732:	4b2b      	ldr	r3, [pc, #172]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	3304      	adds	r3, #4
 8013740:	4618      	mov	r0, r3
 8013742:	f7fd fac1 	bl	8010cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013754:	f003 0304 	and.w	r3, r3, #4
 8013758:	2b00      	cmp	r3, #0
 801375a:	d02e      	beq.n	80137ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	699b      	ldr	r3, [r3, #24]
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	4413      	add	r3, r2
 8013764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013766:	68ba      	ldr	r2, [r7, #8]
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	429a      	cmp	r2, r3
 801376c:	d90e      	bls.n	801378c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	68ba      	ldr	r2, [r7, #8]
 8013772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	68fa      	ldr	r2, [r7, #12]
 8013778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801377a:	4b19      	ldr	r3, [pc, #100]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	3304      	adds	r3, #4
 8013782:	4619      	mov	r1, r3
 8013784:	4610      	mov	r0, r2
 8013786:	f7fd fa66 	bl	8010c56 <vListInsert>
 801378a:	e016      	b.n	80137ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801378c:	2300      	movs	r3, #0
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	2300      	movs	r3, #0
 8013792:	693a      	ldr	r2, [r7, #16]
 8013794:	2100      	movs	r1, #0
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f7ff fd60 	bl	801325c <xTimerGenericCommand>
 801379c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10a      	bne.n	80137ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80137a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a8:	f383 8811 	msr	BASEPRI, r3
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	603b      	str	r3, [r7, #0]
}
 80137b6:	bf00      	nop
 80137b8:	e7fe      	b.n	80137b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80137ba:	4b09      	ldr	r3, [pc, #36]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1b1      	bne.n	8013728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80137c4:	4b06      	ldr	r3, [pc, #24]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80137ca:	4b06      	ldr	r3, [pc, #24]	; (80137e4 <prvSwitchTimerLists+0xc4>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	4a04      	ldr	r2, [pc, #16]	; (80137e0 <prvSwitchTimerLists+0xc0>)
 80137d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80137d2:	4a04      	ldr	r2, [pc, #16]	; (80137e4 <prvSwitchTimerLists+0xc4>)
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	6013      	str	r3, [r2, #0]
}
 80137d8:	bf00      	nop
 80137da:	3718      	adds	r7, #24
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	2400692c 	.word	0x2400692c
 80137e4:	24006930 	.word	0x24006930

080137e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80137ee:	f7fd fbc1 	bl	8010f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80137f2:	4b15      	ldr	r3, [pc, #84]	; (8013848 <prvCheckForValidListAndQueue+0x60>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d120      	bne.n	801383c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80137fa:	4814      	ldr	r0, [pc, #80]	; (801384c <prvCheckForValidListAndQueue+0x64>)
 80137fc:	f7fd f9da 	bl	8010bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013800:	4813      	ldr	r0, [pc, #76]	; (8013850 <prvCheckForValidListAndQueue+0x68>)
 8013802:	f7fd f9d7 	bl	8010bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013806:	4b13      	ldr	r3, [pc, #76]	; (8013854 <prvCheckForValidListAndQueue+0x6c>)
 8013808:	4a10      	ldr	r2, [pc, #64]	; (801384c <prvCheckForValidListAndQueue+0x64>)
 801380a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801380c:	4b12      	ldr	r3, [pc, #72]	; (8013858 <prvCheckForValidListAndQueue+0x70>)
 801380e:	4a10      	ldr	r2, [pc, #64]	; (8013850 <prvCheckForValidListAndQueue+0x68>)
 8013810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013812:	2300      	movs	r3, #0
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4b11      	ldr	r3, [pc, #68]	; (801385c <prvCheckForValidListAndQueue+0x74>)
 8013818:	4a11      	ldr	r2, [pc, #68]	; (8013860 <prvCheckForValidListAndQueue+0x78>)
 801381a:	2110      	movs	r1, #16
 801381c:	200a      	movs	r0, #10
 801381e:	f7fd fd33 	bl	8011288 <xQueueGenericCreateStatic>
 8013822:	4603      	mov	r3, r0
 8013824:	4a08      	ldr	r2, [pc, #32]	; (8013848 <prvCheckForValidListAndQueue+0x60>)
 8013826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013828:	4b07      	ldr	r3, [pc, #28]	; (8013848 <prvCheckForValidListAndQueue+0x60>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d005      	beq.n	801383c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013830:	4b05      	ldr	r3, [pc, #20]	; (8013848 <prvCheckForValidListAndQueue+0x60>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	490b      	ldr	r1, [pc, #44]	; (8013864 <prvCheckForValidListAndQueue+0x7c>)
 8013836:	4618      	mov	r0, r3
 8013838:	f7fe fc44 	bl	80120c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801383c:	f7fd fbca 	bl	8010fd4 <vPortExitCritical>
}
 8013840:	bf00      	nop
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	24006934 	.word	0x24006934
 801384c:	24006904 	.word	0x24006904
 8013850:	24006918 	.word	0x24006918
 8013854:	2400692c 	.word	0x2400692c
 8013858:	24006930 	.word	0x24006930
 801385c:	240069e0 	.word	0x240069e0
 8013860:	24006940 	.word	0x24006940
 8013864:	08024810 	.word	0x08024810

08013868 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013868:	8880      	ldrh	r0, [r0, #4]
 801386a:	4770      	bx	lr

0801386c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	6803      	ldr	r3, [r0, #0]
 8013870:	460c      	mov	r4, r1
 8013872:	2100      	movs	r1, #0
 8013874:	4605      	mov	r5, r0
 8013876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013878:	4798      	blx	r3
 801387a:	4606      	mov	r6, r0
 801387c:	682b      	ldr	r3, [r5, #0]
 801387e:	4628      	mov	r0, r5
 8013880:	1ba4      	subs	r4, r4, r6
 8013882:	6a1b      	ldr	r3, [r3, #32]
 8013884:	b2a4      	uxth	r4, r4
 8013886:	4798      	blx	r3
 8013888:	fbb4 f0f0 	udiv	r0, r4, r0
 801388c:	bd70      	pop	{r4, r5, r6, pc}

0801388e <_ZN8touchgfx17AbstractPartition5clearEv>:
 801388e:	2300      	movs	r3, #0
 8013890:	8083      	strh	r3, [r0, #4]
 8013892:	4770      	bx	lr

08013894 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013894:	b510      	push	{r4, lr}
 8013896:	6803      	ldr	r3, [r0, #0]
 8013898:	4604      	mov	r4, r0
 801389a:	8881      	ldrh	r1, [r0, #4]
 801389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801389e:	4798      	blx	r3
 80138a0:	88a3      	ldrh	r3, [r4, #4]
 80138a2:	3301      	adds	r3, #1
 80138a4:	80a3      	strh	r3, [r4, #4]
 80138a6:	bd10      	pop	{r4, pc}

080138a8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80138a8:	6803      	ldr	r3, [r0, #0]
 80138aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ac:	4718      	bx	r3

080138ae <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80138ae:	4770      	bx	lr

080138b0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80138b0:	4a02      	ldr	r2, [pc, #8]	; (80138bc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80138b2:	6002      	str	r2, [r0, #0]
 80138b4:	2200      	movs	r2, #0
 80138b6:	8082      	strh	r2, [r0, #4]
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop
 80138bc:	08025084 	.word	0x08025084

080138c0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80138c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80138c2:	4770      	bx	lr

080138c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80138c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80138c6:	2000      	movs	r0, #0
 80138c8:	b12b      	cbz	r3, 80138d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80138ca:	b920      	cbnz	r0, 80138d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80138cc:	1a5a      	subs	r2, r3, r1
 80138ce:	699b      	ldr	r3, [r3, #24]
 80138d0:	4250      	negs	r0, r2
 80138d2:	4150      	adcs	r0, r2
 80138d4:	e7f8      	b.n	80138c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80138d6:	4770      	bx	lr

080138d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80138d8:	2300      	movs	r3, #0
 80138da:	6148      	str	r0, [r1, #20]
 80138dc:	618b      	str	r3, [r1, #24]
 80138de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80138e0:	b913      	cbnz	r3, 80138e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80138e2:	6281      	str	r1, [r0, #40]	; 0x28
 80138e4:	4770      	bx	lr
 80138e6:	4613      	mov	r3, r2
 80138e8:	699a      	ldr	r2, [r3, #24]
 80138ea:	2a00      	cmp	r2, #0
 80138ec:	d1fb      	bne.n	80138e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80138ee:	6199      	str	r1, [r3, #24]
 80138f0:	4770      	bx	lr

080138f2 <_ZN8touchgfx9Container9removeAllEv>:
 80138f2:	2200      	movs	r2, #0
 80138f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80138f6:	b123      	cbz	r3, 8013902 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80138f8:	6999      	ldr	r1, [r3, #24]
 80138fa:	6281      	str	r1, [r0, #40]	; 0x28
 80138fc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013900:	e7f8      	b.n	80138f4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013902:	4770      	bx	lr

08013904 <_ZN8touchgfx9Container6unlinkEv>:
 8013904:	2300      	movs	r3, #0
 8013906:	6283      	str	r3, [r0, #40]	; 0x28
 8013908:	4770      	bx	lr

0801390a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801390a:	2200      	movs	r2, #0
 801390c:	8002      	strh	r2, [r0, #0]
 801390e:	8042      	strh	r2, [r0, #2]
 8013910:	8082      	strh	r2, [r0, #4]
 8013912:	80c2      	strh	r2, [r0, #6]
 8013914:	4770      	bx	lr

08013916 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013916:	b570      	push	{r4, r5, r6, lr}
 8013918:	460d      	mov	r5, r1
 801391a:	4616      	mov	r6, r2
 801391c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801391e:	b13c      	cbz	r4, 8013930 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013920:	6823      	ldr	r3, [r4, #0]
 8013922:	4620      	mov	r0, r4
 8013924:	4632      	mov	r2, r6
 8013926:	4629      	mov	r1, r5
 8013928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801392a:	4798      	blx	r3
 801392c:	69a4      	ldr	r4, [r4, #24]
 801392e:	e7f6      	b.n	801391e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013930:	bd70      	pop	{r4, r5, r6, pc}

08013932 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013932:	b538      	push	{r3, r4, r5, lr}
 8013934:	460d      	mov	r5, r1
 8013936:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013938:	b134      	cbz	r4, 8013948 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	4621      	mov	r1, r4
 801393e:	4628      	mov	r0, r5
 8013940:	689b      	ldr	r3, [r3, #8]
 8013942:	4798      	blx	r3
 8013944:	69a4      	ldr	r4, [r4, #24]
 8013946:	e7f7      	b.n	8013938 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013948:	bd38      	pop	{r3, r4, r5, pc}

0801394a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801394a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801394c:	b19b      	cbz	r3, 8013976 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801394e:	428b      	cmp	r3, r1
 8013950:	d109      	bne.n	8013966 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013952:	699a      	ldr	r2, [r3, #24]
 8013954:	2100      	movs	r1, #0
 8013956:	6159      	str	r1, [r3, #20]
 8013958:	6282      	str	r2, [r0, #40]	; 0x28
 801395a:	b902      	cbnz	r2, 801395e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801395c:	4770      	bx	lr
 801395e:	6199      	str	r1, [r3, #24]
 8013960:	4770      	bx	lr
 8013962:	4613      	mov	r3, r2
 8013964:	b13a      	cbz	r2, 8013976 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013966:	699a      	ldr	r2, [r3, #24]
 8013968:	428a      	cmp	r2, r1
 801396a:	d1fa      	bne.n	8013962 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801396c:	698a      	ldr	r2, [r1, #24]
 801396e:	619a      	str	r2, [r3, #24]
 8013970:	2300      	movs	r3, #0
 8013972:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013976:	4770      	bx	lr

08013978 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013978:	b410      	push	{r4}
 801397a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801397c:	4604      	mov	r4, r0
 801397e:	b92b      	cbnz	r3, 801398c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013980:	6803      	ldr	r3, [r0, #0]
 8013982:	4611      	mov	r1, r2
 8013984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801398a:	4718      	bx	r3
 801398c:	b941      	cbnz	r1, 80139a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801398e:	6193      	str	r3, [r2, #24]
 8013990:	6282      	str	r2, [r0, #40]	; 0x28
 8013992:	6154      	str	r4, [r2, #20]
 8013994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013998:	4770      	bx	lr
 801399a:	4603      	mov	r3, r0
 801399c:	2800      	cmp	r0, #0
 801399e:	d0f9      	beq.n	8013994 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80139a0:	4299      	cmp	r1, r3
 80139a2:	6998      	ldr	r0, [r3, #24]
 80139a4:	d1f9      	bne.n	801399a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80139a6:	6190      	str	r0, [r2, #24]
 80139a8:	618a      	str	r2, [r1, #24]
 80139aa:	e7f2      	b.n	8013992 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080139ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80139ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b0:	461f      	mov	r7, r3
 80139b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80139b6:	460d      	mov	r5, r1
 80139b8:	4616      	mov	r6, r2
 80139ba:	b103      	cbz	r3, 80139be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80139bc:	6038      	str	r0, [r7, #0]
 80139be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80139c0:	b314      	cbz	r4, 8013a08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80139c2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80139c6:	b1eb      	cbz	r3, 8013a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80139c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80139cc:	428d      	cmp	r5, r1
 80139ce:	db19      	blt.n	8013a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80139d0:	b289      	uxth	r1, r1
 80139d2:	8923      	ldrh	r3, [r4, #8]
 80139d4:	440b      	add	r3, r1
 80139d6:	b21b      	sxth	r3, r3
 80139d8:	429d      	cmp	r5, r3
 80139da:	da13      	bge.n	8013a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80139dc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80139e0:	4296      	cmp	r6, r2
 80139e2:	db0f      	blt.n	8013a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80139e4:	b292      	uxth	r2, r2
 80139e6:	8963      	ldrh	r3, [r4, #10]
 80139e8:	4413      	add	r3, r2
 80139ea:	b21b      	sxth	r3, r3
 80139ec:	429e      	cmp	r6, r3
 80139ee:	da09      	bge.n	8013a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	1ab2      	subs	r2, r6, r2
 80139f4:	1a69      	subs	r1, r5, r1
 80139f6:	4620      	mov	r0, r4
 80139f8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80139fc:	b212      	sxth	r2, r2
 80139fe:	463b      	mov	r3, r7
 8013a00:	b209      	sxth	r1, r1
 8013a02:	47c0      	blx	r8
 8013a04:	69a4      	ldr	r4, [r4, #24]
 8013a06:	e7db      	b.n	80139c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a10:	4c6d      	ldr	r4, [pc, #436]	; (8013bc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013a12:	b0a1      	sub	sp, #132	; 0x84
 8013a14:	4606      	mov	r6, r0
 8013a16:	6824      	ldr	r4, [r4, #0]
 8013a18:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013a1a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013a1e:	2400      	movs	r4, #0
 8013a20:	9303      	str	r3, [sp, #12]
 8013a22:	802c      	strh	r4, [r5, #0]
 8013a24:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013a26:	802c      	strh	r4, [r5, #0]
 8013a28:	601c      	str	r4, [r3, #0]
 8013a2a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013a2e:	f7ff ffbd 	bl	80139ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013a32:	f1b9 0f03 	cmp.w	r9, #3
 8013a36:	f340 80c1 	ble.w	8013bbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013a3a:	4631      	mov	r1, r6
 8013a3c:	a80c      	add	r0, sp, #48	; 0x30
 8013a3e:	f004 fabd 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a42:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013a46:	9306      	str	r3, [sp, #24]
 8013a48:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013a4c:	9307      	str	r3, [sp, #28]
 8013a4e:	9b03      	ldr	r3, [sp, #12]
 8013a50:	f8d3 a000 	ldr.w	sl, [r3]
 8013a54:	f1ba 0f00 	cmp.w	sl, #0
 8013a58:	f000 80b3 	beq.w	8013bc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8013a5c:	4651      	mov	r1, sl
 8013a5e:	a810      	add	r0, sp, #64	; 0x40
 8013a60:	f004 faac 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a64:	2002      	movs	r0, #2
 8013a66:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013a6a:	9b01      	ldr	r3, [sp, #4]
 8013a6c:	9a06      	ldr	r2, [sp, #24]
 8013a6e:	fb91 f1f0 	sdiv	r1, r1, r0
 8013a72:	189d      	adds	r5, r3, r2
 8013a74:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013a78:	9a07      	ldr	r2, [sp, #28]
 8013a7a:	4419      	add	r1, r3
 8013a7c:	9b02      	ldr	r3, [sp, #8]
 8013a7e:	4413      	add	r3, r2
 8013a80:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013a84:	1a6d      	subs	r5, r5, r1
 8013a86:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013a8a:	fb92 f2f0 	sdiv	r2, r2, r0
 8013a8e:	440a      	add	r2, r1
 8013a90:	1a9b      	subs	r3, r3, r2
 8013a92:	435b      	muls	r3, r3
 8013a94:	fb05 3505 	mla	r5, r5, r5, r3
 8013a98:	4f4c      	ldr	r7, [pc, #304]	; (8013bcc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8013a9a:	ac10      	add	r4, sp, #64	; 0x40
 8013a9c:	f1b9 0f0c 	cmp.w	r9, #12
 8013aa0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013aa4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013aa8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013aac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013ab4:	f04f 0303 	mov.w	r3, #3
 8013ab8:	bfd8      	it	le
 8013aba:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013abe:	f04f 0400 	mov.w	r4, #0
 8013ac2:	f8cd 9000 	str.w	r9, [sp]
 8013ac6:	bfcc      	ite	gt
 8013ac8:	4698      	movgt	r8, r3
 8013aca:	fb92 f8f3 	sdivle	r8, r2, r3
 8013ace:	1c63      	adds	r3, r4, #1
 8013ad0:	aa10      	add	r2, sp, #64	; 0x40
 8013ad2:	f004 0401 	and.w	r4, r4, #1
 8013ad6:	f04f 0b00 	mov.w	fp, #0
 8013ada:	9308      	str	r3, [sp, #32]
 8013adc:	9b00      	ldr	r3, [sp, #0]
 8013ade:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013ae2:	fb93 f3f8 	sdiv	r3, r3, r8
 8013ae6:	3404      	adds	r4, #4
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	9304      	str	r3, [sp, #16]
 8013aec:	9a04      	ldr	r2, [sp, #16]
 8013aee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013af2:	fb13 f302 	smulbb	r3, r3, r2
 8013af6:	9a01      	ldr	r2, [sp, #4]
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	1899      	adds	r1, r3, r2
 8013afc:	9305      	str	r3, [sp, #20]
 8013afe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013b02:	b209      	sxth	r1, r1
 8013b04:	4299      	cmp	r1, r3
 8013b06:	db4d      	blt.n	8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b08:	8932      	ldrh	r2, [r6, #8]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	b21b      	sxth	r3, r3
 8013b0e:	4299      	cmp	r1, r3
 8013b10:	da48      	bge.n	8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	6827      	ldr	r7, [r4, #0]
 8013b16:	fb17 f703 	smulbb	r7, r7, r3
 8013b1a:	9b02      	ldr	r3, [sp, #8]
 8013b1c:	b2bf      	uxth	r7, r7
 8013b1e:	18fa      	adds	r2, r7, r3
 8013b20:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013b24:	b212      	sxth	r2, r2
 8013b26:	429a      	cmp	r2, r3
 8013b28:	db3c      	blt.n	8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b2a:	8970      	ldrh	r0, [r6, #10]
 8013b2c:	4403      	add	r3, r0
 8013b2e:	b21b      	sxth	r3, r3
 8013b30:	429a      	cmp	r2, r3
 8013b32:	da37      	bge.n	8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b34:	2300      	movs	r3, #0
 8013b36:	4630      	mov	r0, r6
 8013b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b3a:	ab0b      	add	r3, sp, #44	; 0x2c
 8013b3c:	f7ff ff36 	bl	80139ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b42:	b37a      	cbz	r2, 8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b44:	4552      	cmp	r2, sl
 8013b46:	d02d      	beq.n	8013ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013b48:	4611      	mov	r1, r2
 8013b4a:	a80e      	add	r0, sp, #56	; 0x38
 8013b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8013b4e:	f004 fa35 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b52:	f04f 0e02 	mov.w	lr, #2
 8013b56:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013b5a:	9a06      	ldr	r2, [sp, #24]
 8013b5c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013b60:	9b01      	ldr	r3, [sp, #4]
 8013b62:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013b66:	4413      	add	r3, r2
 8013b68:	9a07      	ldr	r2, [sp, #28]
 8013b6a:	fb91 f1fe 	sdiv	r1, r1, lr
 8013b6e:	fb9c fcfe 	sdiv	ip, ip, lr
 8013b72:	4401      	add	r1, r0
 8013b74:	1a58      	subs	r0, r3, r1
 8013b76:	9b02      	ldr	r3, [sp, #8]
 8013b78:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013b7c:	4413      	add	r3, r2
 8013b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b80:	448c      	add	ip, r1
 8013b82:	eba3 030c 	sub.w	r3, r3, ip
 8013b86:	435b      	muls	r3, r3
 8013b88:	fb00 3300 	mla	r3, r0, r0, r3
 8013b8c:	42ab      	cmp	r3, r5
 8013b8e:	d208      	bcs.n	8013ba2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8013b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b92:	461d      	mov	r5, r3
 8013b94:	9803      	ldr	r0, [sp, #12]
 8013b96:	6001      	str	r1, [r0, #0]
 8013b98:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013b9a:	9805      	ldr	r0, [sp, #20]
 8013b9c:	8008      	strh	r0, [r1, #0]
 8013b9e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013ba0:	800f      	strh	r7, [r1, #0]
 8013ba2:	4692      	mov	sl, r2
 8013ba4:	f10b 0b01 	add.w	fp, fp, #1
 8013ba8:	3408      	adds	r4, #8
 8013baa:	f1bb 0f04 	cmp.w	fp, #4
 8013bae:	d19d      	bne.n	8013aec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8013bb0:	9b00      	ldr	r3, [sp, #0]
 8013bb2:	9c08      	ldr	r4, [sp, #32]
 8013bb4:	444b      	add	r3, r9
 8013bb6:	4544      	cmp	r4, r8
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	d188      	bne.n	8013ace <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8013bbc:	b021      	add	sp, #132	; 0x84
 8013bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc2:	f04f 35ff 	mov.w	r5, #4294967295
 8013bc6:	e767      	b.n	8013a98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013bc8:	24006a3c 	.word	0x24006a3c
 8013bcc:	08024818 	.word	0x08024818

08013bd0 <_ZN8touchgfx4RectaNERKS0_>:
 8013bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bd4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013bd8:	888c      	ldrh	r4, [r1, #4]
 8013bda:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013bde:	443c      	add	r4, r7
 8013be0:	b2a4      	uxth	r4, r4
 8013be2:	fa0f f884 	sxth.w	r8, r4
 8013be6:	45c1      	cmp	r9, r8
 8013be8:	da2f      	bge.n	8013c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013bea:	8882      	ldrh	r2, [r0, #4]
 8013bec:	444a      	add	r2, r9
 8013bee:	b292      	uxth	r2, r2
 8013bf0:	fa0f fe82 	sxth.w	lr, r2
 8013bf4:	4577      	cmp	r7, lr
 8013bf6:	da28      	bge.n	8013c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013bf8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013bfc:	88cb      	ldrh	r3, [r1, #6]
 8013bfe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013c02:	442b      	add	r3, r5
 8013c04:	b21b      	sxth	r3, r3
 8013c06:	429e      	cmp	r6, r3
 8013c08:	da1f      	bge.n	8013c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013c0a:	88c3      	ldrh	r3, [r0, #6]
 8013c0c:	4433      	add	r3, r6
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	fa0f fc83 	sxth.w	ip, r3
 8013c14:	4565      	cmp	r5, ip
 8013c16:	da18      	bge.n	8013c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013c18:	454f      	cmp	r7, r9
 8013c1a:	bfb8      	it	lt
 8013c1c:	464f      	movlt	r7, r9
 8013c1e:	42b5      	cmp	r5, r6
 8013c20:	bfb8      	it	lt
 8013c22:	4635      	movlt	r5, r6
 8013c24:	45f0      	cmp	r8, lr
 8013c26:	bfd8      	it	le
 8013c28:	4622      	movle	r2, r4
 8013c2a:	1bd2      	subs	r2, r2, r7
 8013c2c:	8082      	strh	r2, [r0, #4]
 8013c2e:	884a      	ldrh	r2, [r1, #2]
 8013c30:	88c9      	ldrh	r1, [r1, #6]
 8013c32:	8007      	strh	r7, [r0, #0]
 8013c34:	440a      	add	r2, r1
 8013c36:	8045      	strh	r5, [r0, #2]
 8013c38:	b292      	uxth	r2, r2
 8013c3a:	b211      	sxth	r1, r2
 8013c3c:	458c      	cmp	ip, r1
 8013c3e:	bfa8      	it	ge
 8013c40:	4613      	movge	r3, r2
 8013c42:	1b5b      	subs	r3, r3, r5
 8013c44:	80c3      	strh	r3, [r0, #6]
 8013c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	8003      	strh	r3, [r0, #0]
 8013c4e:	8043      	strh	r3, [r0, #2]
 8013c50:	8083      	strh	r3, [r0, #4]
 8013c52:	80c3      	strh	r3, [r0, #6]
 8013c54:	e7f7      	b.n	8013c46 <_ZN8touchgfx4RectaNERKS0_+0x76>

08013c56 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013c56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	dd06      	ble.n	8013c6c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013c5e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013c62:	2800      	cmp	r0, #0
 8013c64:	bfcc      	ite	gt
 8013c66:	2000      	movgt	r0, #0
 8013c68:	2001      	movle	r0, #1
 8013c6a:	4770      	bx	lr
 8013c6c:	2001      	movs	r0, #1
 8013c6e:	4770      	bx	lr

08013c70 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	2300      	movs	r3, #0
 8013c76:	4604      	mov	r4, r0
 8013c78:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013c7a:	8003      	strh	r3, [r0, #0]
 8013c7c:	8043      	strh	r3, [r0, #2]
 8013c7e:	8083      	strh	r3, [r0, #4]
 8013c80:	80c3      	strh	r3, [r0, #6]
 8013c82:	2d00      	cmp	r5, #0
 8013c84:	d040      	beq.n	8013d08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013c86:	1d28      	adds	r0, r5, #4
 8013c88:	f7ff ffe5 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c8c:	b988      	cbnz	r0, 8013cb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f7ff ffe1 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c94:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013c98:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013c9c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013ca0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013ca4:	b138      	cbz	r0, 8013cb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013ca6:	8022      	strh	r2, [r4, #0]
 8013ca8:	8063      	strh	r3, [r4, #2]
 8013caa:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013cae:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013cb2:	69ad      	ldr	r5, [r5, #24]
 8013cb4:	e7e5      	b.n	8013c82 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013cb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013cba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013cbe:	4290      	cmp	r0, r2
 8013cc0:	4607      	mov	r7, r0
 8013cc2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013cc6:	460e      	mov	r6, r1
 8013cc8:	bfa8      	it	ge
 8013cca:	4617      	movge	r7, r2
 8013ccc:	4299      	cmp	r1, r3
 8013cce:	4472      	add	r2, lr
 8013cd0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013cd4:	bfa8      	it	ge
 8013cd6:	461e      	movge	r6, r3
 8013cd8:	4440      	add	r0, r8
 8013cda:	4471      	add	r1, lr
 8013cdc:	4463      	add	r3, ip
 8013cde:	b200      	sxth	r0, r0
 8013ce0:	8027      	strh	r7, [r4, #0]
 8013ce2:	b212      	sxth	r2, r2
 8013ce4:	8066      	strh	r6, [r4, #2]
 8013ce6:	b209      	sxth	r1, r1
 8013ce8:	b21b      	sxth	r3, r3
 8013cea:	4290      	cmp	r0, r2
 8013cec:	bfac      	ite	ge
 8013cee:	ebc7 0200 	rsbge	r2, r7, r0
 8013cf2:	ebc7 0202 	rsblt	r2, r7, r2
 8013cf6:	4299      	cmp	r1, r3
 8013cf8:	bfac      	ite	ge
 8013cfa:	ebc6 0301 	rsbge	r3, r6, r1
 8013cfe:	ebc6 0303 	rsblt	r3, r6, r3
 8013d02:	80a2      	strh	r2, [r4, #4]
 8013d04:	80e3      	strh	r3, [r4, #6]
 8013d06:	e7d4      	b.n	8013cb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013d08:	4620      	mov	r0, r4
 8013d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013d0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013d12:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013d16:	b383      	cbz	r3, 8013d7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013d18:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d1a:	b374      	cbz	r4, 8013d7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013d1c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013d20:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013d24:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013d28:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013d2c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013d30:	b303      	cbz	r3, 8013d74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013d32:	4668      	mov	r0, sp
 8013d34:	1d21      	adds	r1, r4, #4
 8013d36:	f8ad 5000 	strh.w	r5, [sp]
 8013d3a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013d3e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013d42:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013d46:	f7ff ff43 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8013d4a:	4668      	mov	r0, sp
 8013d4c:	f7ff ff83 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d50:	b980      	cbnz	r0, 8013d74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013d52:	f8bd 3000 	ldrh.w	r3, [sp]
 8013d56:	4669      	mov	r1, sp
 8013d58:	88a2      	ldrh	r2, [r4, #4]
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	1a9b      	subs	r3, r3, r2
 8013d5e:	88e2      	ldrh	r2, [r4, #6]
 8013d60:	f8ad 3000 	strh.w	r3, [sp]
 8013d64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013d68:	1a9b      	subs	r3, r3, r2
 8013d6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013d6e:	6823      	ldr	r3, [r4, #0]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	4798      	blx	r3
 8013d74:	69a4      	ldr	r4, [r4, #24]
 8013d76:	2c00      	cmp	r4, #0
 8013d78:	d1d8      	bne.n	8013d2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013d7a:	b002      	add	sp, #8
 8013d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d82:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013d86:	460d      	mov	r5, r1
 8013d88:	4616      	mov	r6, r2
 8013d8a:	b323      	cbz	r3, 8013dd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013d8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d8e:	b314      	cbz	r4, 8013dd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013d90:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013d94:	b1eb      	cbz	r3, 8013dd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013d96:	6828      	ldr	r0, [r5, #0]
 8013d98:	466b      	mov	r3, sp
 8013d9a:	6869      	ldr	r1, [r5, #4]
 8013d9c:	c303      	stmia	r3!, {r0, r1}
 8013d9e:	4668      	mov	r0, sp
 8013da0:	1d21      	adds	r1, r4, #4
 8013da2:	f7ff ff15 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8013da6:	4668      	mov	r0, sp
 8013da8:	f7ff ff55 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013dac:	b988      	cbnz	r0, 8013dd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013dae:	f8bd 3000 	ldrh.w	r3, [sp]
 8013db2:	4669      	mov	r1, sp
 8013db4:	88a2      	ldrh	r2, [r4, #4]
 8013db6:	4620      	mov	r0, r4
 8013db8:	1a9b      	subs	r3, r3, r2
 8013dba:	88e2      	ldrh	r2, [r4, #6]
 8013dbc:	f8ad 3000 	strh.w	r3, [sp]
 8013dc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013dc4:	1a9b      	subs	r3, r3, r2
 8013dc6:	4632      	mov	r2, r6
 8013dc8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013dcc:	6823      	ldr	r3, [r4, #0]
 8013dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013dd0:	4798      	blx	r3
 8013dd2:	69a4      	ldr	r4, [r4, #24]
 8013dd4:	e7db      	b.n	8013d8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013dd6:	b002      	add	sp, #8
 8013dd8:	bd70      	pop	{r4, r5, r6, pc}

08013dda <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8013dda:	4770      	bx	lr

08013ddc <_ZN8touchgfx3HAL10FlushCacheEv>:
 8013ddc:	4770      	bx	lr

08013dde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013dde:	6803      	ldr	r3, [r0, #0]
 8013de0:	b513      	push	{r0, r1, r4, lr}
 8013de2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013de6:	2300      	movs	r3, #0
 8013de8:	e9cd 3300 	strd	r3, r3, [sp]
 8013dec:	466b      	mov	r3, sp
 8013dee:	47a0      	blx	r4
 8013df0:	b002      	add	sp, #8
 8013df2:	bd10      	pop	{r4, pc}

08013df4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013df4:	2301      	movs	r3, #1
 8013df6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013dfa:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8013dfe:	4770      	bx	lr

08013e00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013e00:	2301      	movs	r3, #1
 8013e02:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013e06:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8013e0a:	4770      	bx	lr

08013e0c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013e0c:	6843      	ldr	r3, [r0, #4]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	725a      	strb	r2, [r3, #9]
 8013e12:	6840      	ldr	r0, [r0, #4]
 8013e14:	6803      	ldr	r3, [r0, #0]
 8013e16:	691b      	ldr	r3, [r3, #16]
 8013e18:	4718      	bx	r3

08013e1a <_ZN8touchgfx3HAL8flushDMAEv>:
 8013e1a:	6840      	ldr	r0, [r0, #4]
 8013e1c:	6803      	ldr	r3, [r0, #0]
 8013e1e:	689b      	ldr	r3, [r3, #8]
 8013e20:	4718      	bx	r3

08013e22 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8013e22:	b530      	push	{r4, r5, lr}
 8013e24:	b08b      	sub	sp, #44	; 0x2c
 8013e26:	6804      	ldr	r4, [r0, #0]
 8013e28:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013e2c:	9509      	str	r5, [sp, #36]	; 0x24
 8013e2e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013e32:	9508      	str	r5, [sp, #32]
 8013e34:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013e38:	9507      	str	r5, [sp, #28]
 8013e3a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8013e3e:	9506      	str	r5, [sp, #24]
 8013e40:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013e44:	9505      	str	r5, [sp, #20]
 8013e46:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013e4a:	9504      	str	r5, [sp, #16]
 8013e4c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013e50:	9503      	str	r5, [sp, #12]
 8013e52:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013e56:	9502      	str	r5, [sp, #8]
 8013e58:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013e5c:	e9cd 3500 	strd	r3, r5, [sp]
 8013e60:	4613      	mov	r3, r2
 8013e62:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013e64:	2200      	movs	r2, #0
 8013e66:	47a0      	blx	r4
 8013e68:	b00b      	add	sp, #44	; 0x2c
 8013e6a:	bd30      	pop	{r4, r5, pc}

08013e6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8013e6c:	4b04      	ldr	r3, [pc, #16]	; (8013e80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	b123      	cbz	r3, 8013e7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013e72:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8013e76:	f080 0001 	eor.w	r0, r0, #1
 8013e7a:	4770      	bx	lr
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	4770      	bx	lr
 8013e80:	24006a3a 	.word	0x24006a3a

08013e84 <_ZN8touchgfx3HAL8endFrameEv>:
 8013e84:	b510      	push	{r4, lr}
 8013e86:	4604      	mov	r4, r0
 8013e88:	6840      	ldr	r0, [r0, #4]
 8013e8a:	6803      	ldr	r3, [r0, #0]
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	4798      	blx	r3
 8013e90:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8013e94:	b113      	cbz	r3, 8013e9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013e96:	2301      	movs	r3, #1
 8013e98:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8013e9c:	bd10      	pop	{r4, pc}

08013e9e <_ZN8touchgfx3HAL10initializeEv>:
 8013e9e:	b510      	push	{r4, lr}
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	f7ee f92b 	bl	80020fc <_ZN8touchgfx10OSWrappers10initializeEv>
 8013ea6:	f7ed fde5 	bl	8001a74 <_ZN8touchgfx4GPIO4initEv>
 8013eaa:	6860      	ldr	r0, [r4, #4]
 8013eac:	6803      	ldr	r3, [r0, #0]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	4798      	blx	r3
 8013eb2:	68e0      	ldr	r0, [r4, #12]
 8013eb4:	6803      	ldr	r3, [r0, #0]
 8013eb6:	689b      	ldr	r3, [r3, #8]
 8013eb8:	4798      	blx	r3
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ec4:	4718      	bx	r3

08013ec6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013ec6:	b508      	push	{r3, lr}
 8013ec8:	6803      	ldr	r3, [r0, #0]
 8013eca:	4604      	mov	r4, r0
 8013ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ed0:	4798      	blx	r3
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	4798      	blx	r3
 8013eda:	f7ee f985 	bl	80021e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013ede:	6823      	ldr	r3, [r4, #0]
 8013ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ee2:	e7f8      	b.n	8013ed6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013ee4 <_ZN8touchgfx3HAL4tickEv>:
 8013ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013ee6:	6803      	ldr	r3, [r0, #0]
 8013ee8:	4604      	mov	r4, r0
 8013eea:	4d5b      	ldr	r5, [pc, #364]	; (8014058 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013ef0:	4798      	blx	r3
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	f000 8095 	beq.w	8014022 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013ef8:	2001      	movs	r0, #1
 8013efa:	2600      	movs	r6, #0
 8013efc:	f7ed fdc2 	bl	8001a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013f00:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8013f04:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013f08:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013f0c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8013f10:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8013f14:	b133      	cbz	r3, 8013f24 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013f16:	6823      	ldr	r3, [r4, #0]
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013f1e:	4798      	blx	r3
 8013f20:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8013f24:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013f28:	2601      	movs	r6, #1
 8013f2a:	6862      	ldr	r2, [r4, #4]
 8013f2c:	f083 0301 	eor.w	r3, r3, #1
 8013f30:	702e      	strb	r6, [r5, #0]
 8013f32:	7253      	strb	r3, [r2, #9]
 8013f34:	f002 ff2e 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 8013f38:	6803      	ldr	r3, [r0, #0]
 8013f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f3c:	4798      	blx	r3
 8013f3e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8013f42:	b90b      	cbnz	r3, 8013f48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013f44:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8013f48:	f002 ff24 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 8013f4c:	6803      	ldr	r3, [r0, #0]
 8013f4e:	695b      	ldr	r3, [r3, #20]
 8013f50:	4798      	blx	r3
 8013f52:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8013f54:	6803      	ldr	r3, [r0, #0]
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	4798      	blx	r3
 8013f5a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8013f5e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8013f62:	3b01      	subs	r3, #1
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013f6a:	b10a      	cbz	r2, 8013f70 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d1eb      	bne.n	8013f48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013f70:	4a3a      	ldr	r2, [pc, #232]	; (801405c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013f72:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8013f76:	7813      	ldrb	r3, [r2, #0]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	b25b      	sxtb	r3, r3
 8013f7c:	4299      	cmp	r1, r3
 8013f7e:	7013      	strb	r3, [r2, #0]
 8013f80:	dc10      	bgt.n	8013fa4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013f82:	2300      	movs	r3, #0
 8013f84:	68e0      	ldr	r0, [r4, #12]
 8013f86:	a902      	add	r1, sp, #8
 8013f88:	7013      	strb	r3, [r2, #0]
 8013f8a:	aa03      	add	r2, sp, #12
 8013f8c:	6803      	ldr	r3, [r0, #0]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	4798      	blx	r3
 8013f92:	6823      	ldr	r3, [r4, #0]
 8013f94:	2800      	cmp	r0, #0
 8013f96:	d050      	beq.n	801403a <_ZN8touchgfx3HAL4tickEv+0x156>
 8013f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013fa2:	4798      	blx	r3
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	6960      	ldr	r0, [r4, #20]
 8013fa8:	f88d 3007 	strb.w	r3, [sp, #7]
 8013fac:	b158      	cbz	r0, 8013fc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013fae:	6803      	ldr	r3, [r0, #0]
 8013fb0:	f10d 0107 	add.w	r1, sp, #7
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	4798      	blx	r3
 8013fb8:	b128      	cbz	r0, 8013fc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013fba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8013fbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013fc0:	6803      	ldr	r3, [r0, #0]
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	4798      	blx	r3
 8013fc6:	f104 001c 	add.w	r0, r4, #28
 8013fca:	f00e fdc5 	bl	8022b58 <_ZN8touchgfx8Gestures4tickEv>
 8013fce:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8013fd2:	b30b      	cbz	r3, 8014018 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013fd4:	6920      	ldr	r0, [r4, #16]
 8013fd6:	6803      	ldr	r3, [r0, #0]
 8013fd8:	691b      	ldr	r3, [r3, #16]
 8013fda:	4798      	blx	r3
 8013fdc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8013fde:	4606      	mov	r6, r0
 8013fe0:	b903      	cbnz	r3, 8013fe4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8013fe2:	6760      	str	r0, [r4, #116]	; 0x74
 8013fe4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8013fe6:	4a1e      	ldr	r2, [pc, #120]	; (8014060 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013fe8:	1af3      	subs	r3, r6, r3
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d914      	bls.n	8014018 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013fee:	6920      	ldr	r0, [r4, #16]
 8013ff0:	6803      	ldr	r3, [r0, #0]
 8013ff2:	699b      	ldr	r3, [r3, #24]
 8013ff4:	4798      	blx	r3
 8013ff6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8013ff8:	2264      	movs	r2, #100	; 0x64
 8013ffa:	1af3      	subs	r3, r6, r3
 8013ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014000:	fbb0 f0f3 	udiv	r0, r0, r3
 8014004:	2800      	cmp	r0, #0
 8014006:	dc1d      	bgt.n	8014044 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014008:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 801400c:	6920      	ldr	r0, [r4, #16]
 801400e:	2100      	movs	r1, #0
 8014010:	6803      	ldr	r3, [r0, #0]
 8014012:	69db      	ldr	r3, [r3, #28]
 8014014:	4798      	blx	r3
 8014016:	6766      	str	r6, [r4, #116]	; 0x74
 8014018:	f002 febc 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 801401c:	6803      	ldr	r3, [r0, #0]
 801401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014020:	4798      	blx	r3
 8014022:	6823      	ldr	r3, [r4, #0]
 8014024:	4620      	mov	r0, r4
 8014026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801402a:	4798      	blx	r3
 801402c:	2001      	movs	r0, #1
 801402e:	f7ed fd63 	bl	8001af8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014032:	2300      	movs	r3, #0
 8014034:	702b      	strb	r3, [r5, #0]
 8014036:	b004      	add	sp, #16
 8014038:	bd70      	pop	{r4, r5, r6, pc}
 801403a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801403e:	4620      	mov	r0, r4
 8014040:	4798      	blx	r3
 8014042:	e7af      	b.n	8013fa4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014044:	2863      	cmp	r0, #99	; 0x63
 8014046:	bfcb      	itete	gt
 8014048:	2300      	movgt	r3, #0
 801404a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801404e:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8014052:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8014056:	e7d9      	b.n	801400c <_ZN8touchgfx3HAL4tickEv+0x128>
 8014058:	24006a40 	.word	0x24006a40
 801405c:	24006a41 	.word	0x24006a41
 8014060:	05f5e100 	.word	0x05f5e100

08014064 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014064:	b510      	push	{r4, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	f7ee f88a 	bl	8002180 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801406c:	2200      	movs	r2, #0
 801406e:	6863      	ldr	r3, [r4, #4]
 8014070:	729a      	strb	r2, [r3, #10]
 8014072:	bd10      	pop	{r4, pc}

08014074 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014074:	65c1      	str	r1, [r0, #92]	; 0x5c
 8014076:	301c      	adds	r0, #28
 8014078:	f00e bd6c 	b.w	8022b54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801407c <_ZN8touchgfx3HAL5touchEll>:
 801407c:	b530      	push	{r4, r5, lr}
 801407e:	b087      	sub	sp, #28
 8014080:	4604      	mov	r4, r0
 8014082:	a804      	add	r0, sp, #16
 8014084:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014088:	f002 fc76 	bl	8016978 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801408c:	9b04      	ldr	r3, [sp, #16]
 801408e:	a906      	add	r1, sp, #24
 8014090:	a803      	add	r0, sp, #12
 8014092:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014096:	9b05      	ldr	r3, [sp, #20]
 8014098:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801409c:	f002 fcbe 	bl	8016a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80140a0:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80140a4:	f104 001c 	add.w	r0, r4, #28
 80140a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80140ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80140b0:	b189      	cbz	r1, 80140d6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80140b2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80140b6:	9300      	str	r3, [sp, #0]
 80140b8:	4613      	mov	r3, r2
 80140ba:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80140be:	462a      	mov	r2, r5
 80140c0:	f00e fd58 	bl	8022b74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80140c4:	b128      	cbz	r0, 80140d2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80140c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80140ca:	6623      	str	r3, [r4, #96]	; 0x60
 80140cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80140d0:	6663      	str	r3, [r4, #100]	; 0x64
 80140d2:	b007      	add	sp, #28
 80140d4:	bd30      	pop	{r4, r5, pc}
 80140d6:	f00e fd8d 	bl	8022bf4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80140da:	2301      	movs	r3, #1
 80140dc:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80140e0:	e7f1      	b.n	80140c6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080140e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80140e2:	b510      	push	{r4, lr}
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d046      	beq.n	8014176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80140e8:	ea81 0002 	eor.w	r0, r1, r2
 80140ec:	07c4      	lsls	r4, r0, #31
 80140ee:	d508      	bpl.n	8014102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80140f0:	440b      	add	r3, r1
 80140f2:	3a01      	subs	r2, #1
 80140f4:	428b      	cmp	r3, r1
 80140f6:	d93e      	bls.n	8014176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80140f8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80140fc:	f801 0b01 	strb.w	r0, [r1], #1
 8014100:	e7f8      	b.n	80140f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014102:	07d0      	lsls	r0, r2, #31
 8014104:	bf42      	ittt	mi
 8014106:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801410a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801410e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014112:	2b01      	cmp	r3, #1
 8014114:	d911      	bls.n	801413a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014116:	ea81 0402 	eor.w	r4, r1, r2
 801411a:	4610      	mov	r0, r2
 801411c:	07a4      	lsls	r4, r4, #30
 801411e:	d022      	beq.n	8014166 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014120:	f023 0401 	bic.w	r4, r3, #1
 8014124:	440c      	add	r4, r1
 8014126:	428c      	cmp	r4, r1
 8014128:	4602      	mov	r2, r0
 801412a:	d904      	bls.n	8014136 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801412c:	8812      	ldrh	r2, [r2, #0]
 801412e:	3002      	adds	r0, #2
 8014130:	f821 2b02 	strh.w	r2, [r1], #2
 8014134:	e7f7      	b.n	8014126 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014136:	f003 0301 	and.w	r3, r3, #1
 801413a:	f023 0003 	bic.w	r0, r3, #3
 801413e:	4408      	add	r0, r1
 8014140:	4288      	cmp	r0, r1
 8014142:	4614      	mov	r4, r2
 8014144:	d904      	bls.n	8014150 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014146:	6824      	ldr	r4, [r4, #0]
 8014148:	3204      	adds	r2, #4
 801414a:	f841 4b04 	str.w	r4, [r1], #4
 801414e:	e7f7      	b.n	8014140 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014150:	f003 0303 	and.w	r3, r3, #3
 8014154:	3a01      	subs	r2, #1
 8014156:	440b      	add	r3, r1
 8014158:	428b      	cmp	r3, r1
 801415a:	d90c      	bls.n	8014176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801415c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014160:	f801 0b01 	strb.w	r0, [r1], #1
 8014164:	e7f8      	b.n	8014158 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014166:	0790      	lsls	r0, r2, #30
 8014168:	d0e7      	beq.n	801413a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801416a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801416e:	3b02      	subs	r3, #2
 8014170:	f821 0b02 	strh.w	r0, [r1], #2
 8014174:	e7e1      	b.n	801413a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014176:	2001      	movs	r0, #1
 8014178:	bd10      	pop	{r4, pc}

0801417a <_ZN8touchgfx3HAL7noTouchEv>:
 801417a:	b510      	push	{r4, lr}
 801417c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8014180:	4604      	mov	r4, r0
 8014182:	b153      	cbz	r3, 801419a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014184:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8014188:	2101      	movs	r1, #1
 801418a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801418e:	301c      	adds	r0, #28
 8014190:	f00e fd30 	bl	8022bf4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014194:	2300      	movs	r3, #0
 8014196:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801419a:	bd10      	pop	{r4, pc}

0801419c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801419c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141a0:	b085      	sub	sp, #20
 80141a2:	4604      	mov	r4, r0
 80141a4:	2000      	movs	r0, #0
 80141a6:	4699      	mov	r9, r3
 80141a8:	ad04      	add	r5, sp, #16
 80141aa:	460f      	mov	r7, r1
 80141ac:	4690      	mov	r8, r2
 80141ae:	f845 0d04 	str.w	r0, [r5, #-4]!
 80141b2:	69a0      	ldr	r0, [r4, #24]
 80141b4:	6806      	ldr	r6, [r0, #0]
 80141b6:	9501      	str	r5, [sp, #4]
 80141b8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80141bc:	9500      	str	r5, [sp, #0]
 80141be:	6835      	ldr	r5, [r6, #0]
 80141c0:	47a8      	blx	r5
 80141c2:	4d10      	ldr	r5, [pc, #64]	; (8014204 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80141c4:	4606      	mov	r6, r0
 80141c6:	f8a5 9000 	strh.w	r9, [r5]
 80141ca:	f7ef feff 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d2:	4798      	blx	r3
 80141d4:	b128      	cbz	r0, 80141e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80141d6:	2801      	cmp	r0, #1
 80141d8:	d00b      	beq.n	80141f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80141da:	4630      	mov	r0, r6
 80141dc:	b005      	add	sp, #20
 80141de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141e2:	882b      	ldrh	r3, [r5, #0]
 80141e4:	fb08 7203 	mla	r2, r8, r3, r7
 80141e8:	9b03      	ldr	r3, [sp, #12]
 80141ea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80141ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80141f0:	e7f3      	b.n	80141da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80141f2:	882a      	ldrh	r2, [r5, #0]
 80141f4:	9b03      	ldr	r3, [sp, #12]
 80141f6:	fb08 7202 	mla	r2, r8, r2, r7
 80141fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80141fe:	1a9a      	subs	r2, r3, r2
 8014200:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014202:	e7ea      	b.n	80141da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014204:	24006a36 	.word	0x24006a36

08014208 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801420a:	b08b      	sub	sp, #44	; 0x2c
 801420c:	4617      	mov	r7, r2
 801420e:	4604      	mov	r4, r0
 8014210:	460e      	mov	r6, r1
 8014212:	461d      	mov	r5, r3
 8014214:	f7ef feda 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 8014218:	6803      	ldr	r3, [r0, #0]
 801421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801421c:	4798      	blx	r3
 801421e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014222:	9007      	str	r0, [sp, #28]
 8014224:	4631      	mov	r1, r6
 8014226:	6822      	ldr	r2, [r4, #0]
 8014228:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801422c:	4b0c      	ldr	r3, [pc, #48]	; (8014260 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801422e:	4620      	mov	r0, r4
 8014230:	881b      	ldrh	r3, [r3, #0]
 8014232:	9306      	str	r3, [sp, #24]
 8014234:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014238:	9305      	str	r3, [sp, #20]
 801423a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801423e:	9304      	str	r3, [sp, #16]
 8014240:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014244:	9303      	str	r3, [sp, #12]
 8014246:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801424a:	9302      	str	r3, [sp, #8]
 801424c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014250:	e9cd 5300 	strd	r5, r3, [sp]
 8014254:	463b      	mov	r3, r7
 8014256:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014258:	2200      	movs	r2, #0
 801425a:	47a8      	blx	r5
 801425c:	b00b      	add	sp, #44	; 0x2c
 801425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014260:	24006a36 	.word	0x24006a36

08014264 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014268:	4698      	mov	r8, r3
 801426a:	6803      	ldr	r3, [r0, #0]
 801426c:	b08b      	sub	sp, #44	; 0x2c
 801426e:	4617      	mov	r7, r2
 8014270:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014272:	460e      	mov	r6, r1
 8014274:	4b13      	ldr	r3, [pc, #76]	; (80142c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014276:	4604      	mov	r4, r0
 8014278:	f8b3 9000 	ldrh.w	r9, [r3]
 801427c:	f7ef fea6 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 8014280:	6803      	ldr	r3, [r0, #0]
 8014282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014284:	4798      	blx	r3
 8014286:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801428a:	2200      	movs	r2, #0
 801428c:	4631      	mov	r1, r6
 801428e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014292:	2302      	movs	r3, #2
 8014294:	4620      	mov	r0, r4
 8014296:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801429a:	2301      	movs	r3, #1
 801429c:	9305      	str	r3, [sp, #20]
 801429e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80142a2:	9304      	str	r3, [sp, #16]
 80142a4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80142a8:	9303      	str	r3, [sp, #12]
 80142aa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80142ae:	9302      	str	r3, [sp, #8]
 80142b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80142b4:	e9cd 8300 	strd	r8, r3, [sp]
 80142b8:	463b      	mov	r3, r7
 80142ba:	47a8      	blx	r5
 80142bc:	b00b      	add	sp, #44	; 0x2c
 80142be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142c2:	bf00      	nop
 80142c4:	24006a36 	.word	0x24006a36

080142c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80142c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142cc:	4698      	mov	r8, r3
 80142ce:	6803      	ldr	r3, [r0, #0]
 80142d0:	b087      	sub	sp, #28
 80142d2:	460e      	mov	r6, r1
 80142d4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80142d6:	4617      	mov	r7, r2
 80142d8:	4b0f      	ldr	r3, [pc, #60]	; (8014318 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80142da:	4604      	mov	r4, r0
 80142dc:	f8b3 9000 	ldrh.w	r9, [r3]
 80142e0:	f7ef fe74 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80142e4:	6803      	ldr	r3, [r0, #0]
 80142e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e8:	4798      	blx	r3
 80142ea:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80142ee:	463a      	mov	r2, r7
 80142f0:	4631      	mov	r1, r6
 80142f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80142f6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80142fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80142fe:	4620      	mov	r0, r4
 8014300:	9302      	str	r3, [sp, #8]
 8014302:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014306:	9301      	str	r3, [sp, #4]
 8014308:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801430c:	9300      	str	r3, [sp, #0]
 801430e:	4643      	mov	r3, r8
 8014310:	47a8      	blx	r5
 8014312:	b007      	add	sp, #28
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014318:	24006a36 	.word	0x24006a36

0801431c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014320:	4604      	mov	r4, r0
 8014322:	b08f      	sub	sp, #60	; 0x3c
 8014324:	4610      	mov	r0, r2
 8014326:	460d      	mov	r5, r1
 8014328:	4691      	mov	r9, r2
 801432a:	461e      	mov	r6, r3
 801432c:	f005 f97a 	bl	8019624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014330:	2800      	cmp	r0, #0
 8014332:	f000 809d 	beq.w	8014470 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	4620      	mov	r0, r4
 801433a:	f8df b198 	ldr.w	fp, [pc, #408]	; 80144d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801433e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014344:	4798      	blx	r3
 8014346:	6823      	ldr	r3, [r4, #0]
 8014348:	4620      	mov	r0, r4
 801434a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80144d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014350:	4798      	blx	r3
 8014352:	f8bb 3000 	ldrh.w	r3, [fp]
 8014356:	4f5c      	ldr	r7, [pc, #368]	; (80144c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014358:	9301      	str	r3, [sp, #4]
 801435a:	f8ba 3000 	ldrh.w	r3, [sl]
 801435e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014362:	4640      	mov	r0, r8
 8014364:	9302      	str	r3, [sp, #8]
 8014366:	883b      	ldrh	r3, [r7, #0]
 8014368:	9303      	str	r3, [sp, #12]
 801436a:	4b58      	ldr	r3, [pc, #352]	; (80144cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801436c:	881a      	ldrh	r2, [r3, #0]
 801436e:	9305      	str	r3, [sp, #20]
 8014370:	9204      	str	r2, [sp, #16]
 8014372:	f005 fa9b 	bl	80198ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014376:	8038      	strh	r0, [r7, #0]
 8014378:	4640      	mov	r0, r8
 801437a:	f005 facb 	bl	8019914 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801437e:	9b05      	ldr	r3, [sp, #20]
 8014380:	b280      	uxth	r0, r0
 8014382:	8018      	strh	r0, [r3, #0]
 8014384:	4b52      	ldr	r3, [pc, #328]	; (80144d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014386:	781b      	ldrb	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d174      	bne.n	8014476 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801438c:	883b      	ldrh	r3, [r7, #0]
 801438e:	f8aa 0000 	strh.w	r0, [sl]
 8014392:	f8ab 3000 	strh.w	r3, [fp]
 8014396:	4648      	mov	r0, r9
 8014398:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801439c:	f005 f942 	bl	8019624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80143a0:	2200      	movs	r2, #0
 80143a2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80143a6:	4611      	mov	r1, r2
 80143a8:	4628      	mov	r0, r5
 80143aa:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80143ae:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80143b2:	f7f0 fb00 	bl	80049b6 <_ZN8touchgfx8Drawable5setXYEss>
 80143b6:	2301      	movs	r3, #1
 80143b8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80143bc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80143c0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	dd5c      	ble.n	8014482 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80143c8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	dd58      	ble.n	8014482 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80143d0:	462a      	mov	r2, r5
 80143d2:	ab0a      	add	r3, sp, #40	; 0x28
 80143d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80143d8:	6851      	ldr	r1, [r2, #4]
 80143da:	c303      	stmia	r3!, {r0, r1}
 80143dc:	4631      	mov	r1, r6
 80143de:	a80a      	add	r0, sp, #40	; 0x28
 80143e0:	f7ff fbf6 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 80143e4:	4b38      	ldr	r3, [pc, #224]	; (80144c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80143e6:	2100      	movs	r1, #0
 80143e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80143ec:	4b37      	ldr	r3, [pc, #220]	; (80144cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80143ee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80143f2:	aa0a      	add	r2, sp, #40	; 0x28
 80143f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143f8:	910c      	str	r1, [sp, #48]	; 0x30
 80143fa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80143fe:	ab08      	add	r3, sp, #32
 8014400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014404:	e883 0003 	stmia.w	r3, {r0, r1}
 8014408:	4618      	mov	r0, r3
 801440a:	a90c      	add	r1, sp, #48	; 0x30
 801440c:	f7ff fbe0 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8014410:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014412:	2b00      	cmp	r3, #0
 8014414:	d13c      	bne.n	8014490 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014416:	2000      	movs	r0, #0
 8014418:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801441c:	2600      	movs	r6, #0
 801441e:	696b      	ldr	r3, [r5, #20]
 8014420:	a908      	add	r1, sp, #32
 8014422:	682a      	ldr	r2, [r5, #0]
 8014424:	4628      	mov	r0, r5
 8014426:	9305      	str	r3, [sp, #20]
 8014428:	616e      	str	r6, [r5, #20]
 801442a:	6892      	ldr	r2, [r2, #8]
 801442c:	4790      	blx	r2
 801442e:	9b05      	ldr	r3, [sp, #20]
 8014430:	4652      	mov	r2, sl
 8014432:	4649      	mov	r1, r9
 8014434:	616b      	str	r3, [r5, #20]
 8014436:	4628      	mov	r0, r5
 8014438:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 801443c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014440:	f7f0 fab9 	bl	80049b6 <_ZN8touchgfx8Drawable5setXYEss>
 8014444:	9a01      	ldr	r2, [sp, #4]
 8014446:	4b23      	ldr	r3, [pc, #140]	; (80144d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014448:	4620      	mov	r0, r4
 801444a:	801a      	strh	r2, [r3, #0]
 801444c:	9a02      	ldr	r2, [sp, #8]
 801444e:	4b22      	ldr	r3, [pc, #136]	; (80144d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014450:	801a      	strh	r2, [r3, #0]
 8014452:	9a03      	ldr	r2, [sp, #12]
 8014454:	4b1c      	ldr	r3, [pc, #112]	; (80144c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014456:	801a      	strh	r2, [r3, #0]
 8014458:	4b1c      	ldr	r3, [pc, #112]	; (80144cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801445a:	9a04      	ldr	r2, [sp, #16]
 801445c:	801a      	strh	r2, [r3, #0]
 801445e:	6823      	ldr	r3, [r4, #0]
 8014460:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014466:	4798      	blx	r3
 8014468:	6823      	ldr	r3, [r4, #0]
 801446a:	4620      	mov	r0, r4
 801446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446e:	4798      	blx	r3
 8014470:	b00f      	add	sp, #60	; 0x3c
 8014472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014476:	883b      	ldrh	r3, [r7, #0]
 8014478:	f8ab 0000 	strh.w	r0, [fp]
 801447c:	f8aa 3000 	strh.w	r3, [sl]
 8014480:	e789      	b.n	8014396 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014482:	462a      	mov	r2, r5
 8014484:	ab0a      	add	r3, sp, #40	; 0x28
 8014486:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801448a:	6851      	ldr	r1, [r2, #4]
 801448c:	c303      	stmia	r3!, {r0, r1}
 801448e:	e7a9      	b.n	80143e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014490:	a807      	add	r0, sp, #28
 8014492:	f005 faf7 	bl	8019a84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014496:	4606      	mov	r6, r0
 8014498:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801449a:	6803      	ldr	r3, [r0, #0]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	4798      	blx	r3
 80144a0:	4286      	cmp	r6, r0
 80144a2:	d1b8      	bne.n	8014416 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80144a4:	f7ef fd92 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80144a8:	6803      	ldr	r3, [r0, #0]
 80144aa:	4606      	mov	r6, r0
 80144ac:	a807      	add	r0, sp, #28
 80144ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144b0:	9305      	str	r3, [sp, #20]
 80144b2:	f005 fae7 	bl	8019a84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80144b6:	9b05      	ldr	r3, [sp, #20]
 80144b8:	4601      	mov	r1, r0
 80144ba:	4630      	mov	r0, r6
 80144bc:	4798      	blx	r3
 80144be:	f080 0001 	eor.w	r0, r0, #1
 80144c2:	b2c0      	uxtb	r0, r0
 80144c4:	e7a8      	b.n	8014418 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80144c6:	bf00      	nop
 80144c8:	24006a30 	.word	0x24006a30
 80144cc:	24006a32 	.word	0x24006a32
 80144d0:	24006a34 	.word	0x24006a34
 80144d4:	24006a36 	.word	0x24006a36
 80144d8:	24006a38 	.word	0x24006a38

080144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80144dc:	4b07      	ldr	r3, [pc, #28]	; (80144fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80144de:	b510      	push	{r4, lr}
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	4604      	mov	r4, r0
 80144e4:	b13b      	cbz	r3, 80144f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80144e6:	6803      	ldr	r3, [r0, #0]
 80144e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144ea:	4798      	blx	r3
 80144ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80144ee:	4283      	cmp	r3, r0
 80144f0:	d101      	bne.n	80144f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80144f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80144f4:	bd10      	pop	{r4, pc}
 80144f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80144f8:	e7fc      	b.n	80144f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80144fa:	bf00      	nop
 80144fc:	24006a3a 	.word	0x24006a3a

08014500 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014504:	461d      	mov	r5, r3
 8014506:	b08a      	sub	sp, #40	; 0x28
 8014508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801450c:	4690      	mov	r8, r2
 801450e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014512:	2400      	movs	r4, #0
 8014514:	4607      	mov	r7, r0
 8014516:	fb06 8505 	mla	r5, r6, r5, r8
 801451a:	9404      	str	r4, [sp, #16]
 801451c:	f88d 4020 	strb.w	r4, [sp, #32]
 8014520:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014524:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014528:	f8ad 3018 	strh.w	r3, [sp, #24]
 801452c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014530:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014534:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014538:	f8ad 301c 	strh.w	r3, [sp, #28]
 801453c:	f7ff ffce 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014540:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f8ad 601e 	strh.w	r6, [sp, #30]
 801454a:	a901      	add	r1, sp, #4
 801454c:	9505      	str	r5, [sp, #20]
 801454e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014552:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014556:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801455a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801455e:	6803      	ldr	r3, [r0, #0]
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	4798      	blx	r3
 8014564:	b00a      	add	sp, #40	; 0x28
 8014566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801456a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801456a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801456e:	b08b      	sub	sp, #44	; 0x2c
 8014570:	2400      	movs	r4, #0
 8014572:	4691      	mov	r9, r2
 8014574:	461d      	mov	r5, r3
 8014576:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801457a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801457e:	4688      	mov	r8, r1
 8014580:	4607      	mov	r7, r0
 8014582:	9404      	str	r4, [sp, #16]
 8014584:	fb06 9505 	mla	r5, r6, r5, r9
 8014588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801458c:	f7ff ffa6 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014590:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014594:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801459e:	a901      	add	r1, sp, #4
 80145a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80145a4:	9505      	str	r5, [sp, #20]
 80145a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80145aa:	f8ad 401c 	strh.w	r4, [sp, #28]
 80145ae:	f8ad 601e 	strh.w	r6, [sp, #30]
 80145b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80145b6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80145ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80145be:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80145c2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80145c6:	6803      	ldr	r3, [r0, #0]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	4798      	blx	r3
 80145cc:	b00b      	add	sp, #44	; 0x2c
 80145ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080145d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80145d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d8:	b08a      	sub	sp, #40	; 0x28
 80145da:	4698      	mov	r8, r3
 80145dc:	2300      	movs	r3, #0
 80145de:	4606      	mov	r6, r0
 80145e0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80145e4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80145e8:	2d0b      	cmp	r5, #11
 80145ea:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80145ee:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80145f2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80145f6:	9304      	str	r3, [sp, #16]
 80145f8:	d137      	bne.n	801466a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80145fa:	2380      	movs	r3, #128	; 0x80
 80145fc:	f88d 0020 	strb.w	r0, [sp, #32]
 8014600:	4630      	mov	r0, r6
 8014602:	9203      	str	r2, [sp, #12]
 8014604:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014608:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801460c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014610:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014614:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014618:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801461c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014620:	f7ff ff5c 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014624:	2c0b      	cmp	r4, #11
 8014626:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801462a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801462e:	bf94      	ite	ls
 8014630:	4b19      	ldrls	r3, [pc, #100]	; (8014698 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014632:	2100      	movhi	r1, #0
 8014634:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014638:	bf98      	it	ls
 801463a:	5d19      	ldrbls	r1, [r3, r4]
 801463c:	fb02 8307 	mla	r3, r2, r7, r8
 8014640:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014644:	10c9      	asrs	r1, r1, #3
 8014646:	fb01 0003 	mla	r0, r1, r3, r0
 801464a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801464e:	a901      	add	r1, sp, #4
 8014650:	9005      	str	r0, [sp, #20]
 8014652:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014656:	2300      	movs	r3, #0
 8014658:	6870      	ldr	r0, [r6, #4]
 801465a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801465e:	6803      	ldr	r3, [r0, #0]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	4798      	blx	r3
 8014664:	b00a      	add	sp, #40	; 0x28
 8014666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801466a:	2d02      	cmp	r5, #2
 801466c:	d109      	bne.n	8014682 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801466e:	28ff      	cmp	r0, #255	; 0xff
 8014670:	d105      	bne.n	801467e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014672:	f1bc 0f00 	cmp.w	ip, #0
 8014676:	bf14      	ite	ne
 8014678:	2340      	movne	r3, #64	; 0x40
 801467a:	2320      	moveq	r3, #32
 801467c:	e7be      	b.n	80145fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801467e:	2340      	movs	r3, #64	; 0x40
 8014680:	e7bc      	b.n	80145fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014682:	28ff      	cmp	r0, #255	; 0xff
 8014684:	d105      	bne.n	8014692 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014686:	f1bc 0f00 	cmp.w	ip, #0
 801468a:	bf14      	ite	ne
 801468c:	2304      	movne	r3, #4
 801468e:	2301      	moveq	r3, #1
 8014690:	e7b4      	b.n	80145fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014692:	2304      	movs	r3, #4
 8014694:	e7b2      	b.n	80145fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014696:	bf00      	nop
 8014698:	08025140 	.word	0x08025140

0801469c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a0:	b08b      	sub	sp, #44	; 0x2c
 80146a2:	461d      	mov	r5, r3
 80146a4:	2400      	movs	r4, #0
 80146a6:	4688      	mov	r8, r1
 80146a8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80146ac:	4693      	mov	fp, r2
 80146ae:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80146b2:	4607      	mov	r7, r0
 80146b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80146b8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80146bc:	9404      	str	r4, [sp, #16]
 80146be:	bf14      	ite	ne
 80146c0:	2308      	movne	r3, #8
 80146c2:	2302      	moveq	r3, #2
 80146c4:	fb05 b50a 	mla	r5, r5, sl, fp
 80146c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146cc:	f7ff ff06 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80146d0:	2e0b      	cmp	r6, #11
 80146d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80146d6:	a901      	add	r1, sp, #4
 80146d8:	bf98      	it	ls
 80146da:	4b13      	ldrls	r3, [pc, #76]	; (8014728 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80146dc:	f8ad a01e 	strh.w	sl, [sp, #30]
 80146e0:	bf98      	it	ls
 80146e2:	5d9c      	ldrbls	r4, [r3, r6]
 80146e4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80146e8:	10e4      	asrs	r4, r4, #3
 80146ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80146ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80146f2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80146f6:	fb04 0405 	mla	r4, r4, r5, r0
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014700:	2300      	movs	r3, #0
 8014702:	9405      	str	r4, [sp, #20]
 8014704:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014708:	f88d 9020 	strb.w	r9, [sp, #32]
 801470c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014710:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014714:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014718:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801471c:	6803      	ldr	r3, [r0, #0]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4798      	blx	r3
 8014722:	b00b      	add	sp, #44	; 0x2c
 8014724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014728:	08025140 	.word	0x08025140

0801472c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014730:	461e      	mov	r6, r3
 8014732:	4b0a      	ldr	r3, [pc, #40]	; (801475c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014734:	460f      	mov	r7, r1
 8014736:	4690      	mov	r8, r2
 8014738:	881d      	ldrh	r5, [r3, #0]
 801473a:	f7ef fc47 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 801473e:	6803      	ldr	r3, [r0, #0]
 8014740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014742:	4798      	blx	r3
 8014744:	280b      	cmp	r0, #11
 8014746:	bf96      	itet	ls
 8014748:	4b05      	ldrls	r3, [pc, #20]	; (8014760 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801474a:	2400      	movhi	r4, #0
 801474c:	5c1c      	ldrbls	r4, [r3, r0]
 801474e:	fb08 7005 	mla	r0, r8, r5, r7
 8014752:	10e4      	asrs	r4, r4, #3
 8014754:	fb04 6000 	mla	r0, r4, r0, r6
 8014758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801475c:	24006a36 	.word	0x24006a36
 8014760:	08025140 	.word	0x08025140

08014764 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014766:	b08b      	sub	sp, #44	; 0x2c
 8014768:	461f      	mov	r7, r3
 801476a:	4604      	mov	r4, r0
 801476c:	4616      	mov	r6, r2
 801476e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014772:	2500      	movs	r5, #0
 8014774:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014778:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801477c:	9504      	str	r5, [sp, #16]
 801477e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014782:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014786:	f8ad 301a 	strh.w	r3, [sp, #26]
 801478a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801478e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014792:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014796:	f88d 3020 	strb.w	r3, [sp, #32]
 801479a:	f7ff fe9f 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801479e:	463a      	mov	r2, r7
 80147a0:	4631      	mov	r1, r6
 80147a2:	4603      	mov	r3, r0
 80147a4:	4620      	mov	r0, r4
 80147a6:	f7ff ffc1 	bl	801472c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80147aa:	4b0e      	ldr	r3, [pc, #56]	; (80147e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80147ac:	9005      	str	r0, [sp, #20]
 80147ae:	881b      	ldrh	r3, [r3, #0]
 80147b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80147b4:	f7ef fc0a 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80147b8:	6803      	ldr	r3, [r0, #0]
 80147ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147bc:	4798      	blx	r3
 80147be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80147c4:	a901      	add	r1, sp, #4
 80147c6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80147ca:	9304      	str	r3, [sp, #16]
 80147cc:	6860      	ldr	r0, [r4, #4]
 80147ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80147d2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80147d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80147da:	6803      	ldr	r3, [r0, #0]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	4798      	blx	r3
 80147e0:	b00b      	add	sp, #44	; 0x2c
 80147e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e4:	24006a36 	.word	0x24006a36

080147e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80147e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ea:	b08d      	sub	sp, #52	; 0x34
 80147ec:	2501      	movs	r5, #1
 80147ee:	4604      	mov	r4, r0
 80147f0:	466b      	mov	r3, sp
 80147f2:	9503      	str	r5, [sp, #12]
 80147f4:	e883 0006 	stmia.w	r3, {r1, r2}
 80147f8:	2300      	movs	r3, #0
 80147fa:	f8bd 6000 	ldrh.w	r6, [sp]
 80147fe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014802:	9306      	str	r3, [sp, #24]
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014808:	4798      	blx	r3
 801480a:	463a      	mov	r2, r7
 801480c:	4631      	mov	r1, r6
 801480e:	4603      	mov	r3, r0
 8014810:	4620      	mov	r0, r4
 8014812:	f7ff ff8b 	bl	801472c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014816:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014818:	9004      	str	r0, [sp, #16]
 801481a:	9307      	str	r3, [sp, #28]
 801481c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014820:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014824:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014828:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801482c:	4b0e      	ldr	r3, [pc, #56]	; (8014868 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014834:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014838:	f7ef fbc8 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 801483c:	6803      	ldr	r3, [r0, #0]
 801483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014840:	4798      	blx	r3
 8014842:	23ff      	movs	r3, #255	; 0xff
 8014844:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014848:	a903      	add	r1, sp, #12
 801484a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801484e:	6860      	ldr	r0, [r4, #4]
 8014850:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014854:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014858:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801485c:	6803      	ldr	r3, [r0, #0]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	4798      	blx	r3
 8014862:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014864:	b00d      	add	sp, #52	; 0x34
 8014866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014868:	24006a36 	.word	0x24006a36

0801486c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014870:	b08c      	sub	sp, #48	; 0x30
 8014872:	461e      	mov	r6, r3
 8014874:	2300      	movs	r3, #0
 8014876:	4604      	mov	r4, r0
 8014878:	466d      	mov	r5, sp
 801487a:	9306      	str	r3, [sp, #24]
 801487c:	6803      	ldr	r3, [r0, #0]
 801487e:	e885 0006 	stmia.w	r5, {r1, r2}
 8014882:	2501      	movs	r5, #1
 8014884:	f8bd 7000 	ldrh.w	r7, [sp]
 8014888:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801488c:	9503      	str	r5, [sp, #12]
 801488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014890:	4798      	blx	r3
 8014892:	4642      	mov	r2, r8
 8014894:	4639      	mov	r1, r7
 8014896:	4603      	mov	r3, r0
 8014898:	4620      	mov	r0, r4
 801489a:	f7ff ff47 	bl	801472c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801489e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80148a2:	9004      	str	r0, [sp, #16]
 80148a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80148a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148ac:	9607      	str	r6, [sp, #28]
 80148ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80148b2:	4b10      	ldr	r3, [pc, #64]	; (80148f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80148ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80148bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80148c0:	f7ef fb84 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 80148c4:	6803      	ldr	r3, [r0, #0]
 80148c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c8:	4798      	blx	r3
 80148ca:	23ff      	movs	r3, #255	; 0xff
 80148cc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80148d0:	a903      	add	r1, sp, #12
 80148d2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80148d6:	6860      	ldr	r0, [r4, #4]
 80148d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80148dc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80148e0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80148e4:	6803      	ldr	r3, [r0, #0]
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	4798      	blx	r3
 80148ea:	4630      	mov	r0, r6
 80148ec:	b00c      	add	sp, #48	; 0x30
 80148ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f2:	bf00      	nop
 80148f4:	24006a36 	.word	0x24006a36

080148f8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80148f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148fa:	b085      	sub	sp, #20
 80148fc:	4605      	mov	r5, r0
 80148fe:	ac02      	add	r4, sp, #8
 8014900:	e884 0006 	stmia.w	r4, {r1, r2}
 8014904:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014908:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801490c:	f7ff fde6 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014910:	4631      	mov	r1, r6
 8014912:	4603      	mov	r3, r0
 8014914:	463a      	mov	r2, r7
 8014916:	4628      	mov	r0, r5
 8014918:	f7ff ff08 	bl	801472c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801491c:	4a05      	ldr	r2, [pc, #20]	; (8014934 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801491e:	682b      	ldr	r3, [r5, #0]
 8014920:	8812      	ldrh	r2, [r2, #0]
 8014922:	9200      	str	r2, [sp, #0]
 8014924:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014926:	4603      	mov	r3, r0
 8014928:	4628      	mov	r0, r5
 801492a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801492e:	47b0      	blx	r6
 8014930:	b005      	add	sp, #20
 8014932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014934:	24006a36 	.word	0x24006a36

08014938 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 801493e:	4604      	mov	r4, r0
 8014940:	b19b      	cbz	r3, 801496a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014942:	2002      	movs	r0, #2
 8014944:	f7ed f912 	bl	8001b6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014948:	2300      	movs	r3, #0
 801494a:	4620      	mov	r0, r4
 801494c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8014950:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8014954:	6823      	ldr	r3, [r4, #0]
 8014956:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801495a:	f7ff fdbf 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801495e:	4601      	mov	r1, r0
 8014960:	4620      	mov	r0, r4
 8014962:	462b      	mov	r3, r5
 8014964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014968:	4718      	bx	r3
 801496a:	bd70      	pop	{r4, r5, r6, pc}

0801496c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8014972:	4604      	mov	r4, r0
 8014974:	460d      	mov	r5, r1
 8014976:	428b      	cmp	r3, r1
 8014978:	d006      	beq.n	8014988 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801497a:	6803      	ldr	r3, [r0, #0]
 801497c:	b929      	cbnz	r1, 801498a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801497e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014982:	4798      	blx	r3
 8014984:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8014988:	bd38      	pop	{r3, r4, r5, pc}
 801498a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801498e:	e7f8      	b.n	8014982 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014990 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014990:	4b0d      	ldr	r3, [pc, #52]	; (80149c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014992:	b510      	push	{r4, lr}
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	4604      	mov	r4, r0
 8014998:	b95b      	cbnz	r3, 80149b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801499a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801499e:	2b02      	cmp	r3, #2
 80149a0:	d007      	beq.n	80149b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80149a2:	6840      	ldr	r0, [r0, #4]
 80149a4:	f000 f90e 	bl	8014bc4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80149a8:	b118      	cbz	r0, 80149b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80149aa:	6862      	ldr	r2, [r4, #4]
 80149ac:	7a53      	ldrb	r3, [r2, #9]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d0fc      	beq.n	80149ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80149b2:	f7ed fbd7 	bl	8002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80149b6:	4620      	mov	r0, r4
 80149b8:	2100      	movs	r1, #0
 80149ba:	f7ff ffd7 	bl	801496c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80149be:	4620      	mov	r0, r4
 80149c0:	f7ff fd8c 	bl	80144dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80149c4:	bd10      	pop	{r4, pc}
 80149c6:	bf00      	nop
 80149c8:	24006a3a 	.word	0x24006a3a

080149cc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80149cc:	4770      	bx	lr

080149ce <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80149ce:	2000      	movs	r0, #0
 80149d0:	4770      	bx	lr

080149d2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80149d2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80149d6:	1a13      	subs	r3, r2, r0
 80149d8:	4258      	negs	r0, r3
 80149da:	4158      	adcs	r0, r3
 80149dc:	4770      	bx	lr

080149de <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80149de:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80149e2:	1a9b      	subs	r3, r3, r2
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	bfdc      	itt	le
 80149e8:	6882      	ldrle	r2, [r0, #8]
 80149ea:	189b      	addle	r3, r3, r2
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	bfcc      	ite	gt
 80149f0:	2000      	movgt	r0, #0
 80149f2:	2001      	movle	r0, #1
 80149f4:	4770      	bx	lr

080149f6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80149f6:	6902      	ldr	r2, [r0, #16]
 80149f8:	6843      	ldr	r3, [r0, #4]
 80149fa:	2024      	movs	r0, #36	; 0x24
 80149fc:	fb00 3002 	mla	r0, r0, r2, r3
 8014a00:	4770      	bx	lr

08014a02 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014a02:	6803      	ldr	r3, [r0, #0]
 8014a04:	691b      	ldr	r3, [r3, #16]
 8014a06:	4718      	bx	r3

08014a08 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014a08:	2301      	movs	r3, #1
 8014a0a:	b570      	push	{r4, r5, r6, lr}
 8014a0c:	7203      	strb	r3, [r0, #8]
 8014a0e:	4604      	mov	r4, r0
 8014a10:	6840      	ldr	r0, [r0, #4]
 8014a12:	6803      	ldr	r3, [r0, #0]
 8014a14:	699b      	ldr	r3, [r3, #24]
 8014a16:	4798      	blx	r3
 8014a18:	6803      	ldr	r3, [r0, #0]
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	2b40      	cmp	r3, #64	; 0x40
 8014a1e:	d00c      	beq.n	8014a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a20:	d810      	bhi.n	8014a44 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014a22:	2b04      	cmp	r3, #4
 8014a24:	d01d      	beq.n	8014a62 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014a26:	d804      	bhi.n	8014a32 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d006      	beq.n	8014a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	d02c      	beq.n	8014a8a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014a30:	bd70      	pop	{r4, r5, r6, pc}
 8014a32:	2b08      	cmp	r3, #8
 8014a34:	d01d      	beq.n	8014a72 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014a36:	2b20      	cmp	r3, #32
 8014a38:	d1fa      	bne.n	8014a30 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014a3a:	6823      	ldr	r3, [r4, #0]
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a40:	4798      	blx	r3
 8014a42:	e013      	b.n	8014a6c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a48:	d0f7      	beq.n	8014a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a4a:	d804      	bhi.n	8014a56 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014a4c:	2b80      	cmp	r3, #128	; 0x80
 8014a4e:	d0f4      	beq.n	8014a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a54:	e7f0      	b.n	8014a38 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a5a:	d0ee      	beq.n	8014a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a60:	e7e5      	b.n	8014a2e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	7f01      	ldrb	r1, [r0, #28]
 8014a66:	4620      	mov	r0, r4
 8014a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a6a:	4798      	blx	r3
 8014a6c:	6823      	ldr	r3, [r4, #0]
 8014a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a70:	e006      	b.n	8014a80 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014a72:	6823      	ldr	r3, [r4, #0]
 8014a74:	7f01      	ldrb	r1, [r0, #28]
 8014a76:	4620      	mov	r0, r4
 8014a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a7a:	4798      	blx	r3
 8014a7c:	6823      	ldr	r3, [r4, #0]
 8014a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a80:	4629      	mov	r1, r5
 8014a82:	4620      	mov	r0, r4
 8014a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a88:	4718      	bx	r3
 8014a8a:	6823      	ldr	r3, [r4, #0]
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a90:	4798      	blx	r3
 8014a92:	e7f3      	b.n	8014a7c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014a94 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014a94:	4770      	bx	lr

08014a96 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014a96:	4770      	bx	lr

08014a98 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014a98:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	1ad2      	subs	r2, r2, r3
 8014aa0:	2a00      	cmp	r2, #0
 8014aa2:	bfdc      	itt	le
 8014aa4:	6884      	ldrle	r4, [r0, #8]
 8014aa6:	1912      	addle	r2, r2, r4
 8014aa8:	2a01      	cmp	r2, #1
 8014aaa:	dd16      	ble.n	8014ada <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014aac:	6842      	ldr	r2, [r0, #4]
 8014aae:	2424      	movs	r4, #36	; 0x24
 8014ab0:	fb04 2303 	mla	r3, r4, r3, r2
 8014ab4:	f101 0220 	add.w	r2, r1, #32
 8014ab8:	f851 4b04 	ldr.w	r4, [r1], #4
 8014abc:	4291      	cmp	r1, r2
 8014abe:	f843 4b04 	str.w	r4, [r3], #4
 8014ac2:	d1f9      	bne.n	8014ab8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014ac4:	780a      	ldrb	r2, [r1, #0]
 8014ac6:	701a      	strb	r2, [r3, #0]
 8014ac8:	68c3      	ldr	r3, [r0, #12]
 8014aca:	6882      	ldr	r2, [r0, #8]
 8014acc:	f3bf 8f5b 	dmb	ish
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	bfd8      	it	le
 8014ad6:	1a9b      	suble	r3, r3, r2
 8014ad8:	60c3      	str	r3, [r0, #12]
 8014ada:	bd10      	pop	{r4, pc}

08014adc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014adc:	6903      	ldr	r3, [r0, #16]
 8014ade:	6882      	ldr	r2, [r0, #8]
 8014ae0:	f3bf 8f5b 	dmb	ish
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	bfd8      	it	le
 8014aea:	1a9b      	suble	r3, r3, r2
 8014aec:	6103      	str	r3, [r0, #16]
 8014aee:	4770      	bx	lr

08014af0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014af0:	b570      	push	{r4, r5, r6, lr}
 8014af2:	4604      	mov	r4, r0
 8014af4:	460e      	mov	r6, r1
 8014af6:	6860      	ldr	r0, [r4, #4]
 8014af8:	6803      	ldr	r3, [r0, #0]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	4798      	blx	r3
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d1f9      	bne.n	8014af6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014b02:	4d0d      	ldr	r5, [pc, #52]	; (8014b38 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014b04:	6828      	ldr	r0, [r5, #0]
 8014b06:	6803      	ldr	r3, [r0, #0]
 8014b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b0a:	4798      	blx	r3
 8014b0c:	f7ed fb44 	bl	8002198 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014b10:	6828      	ldr	r0, [r5, #0]
 8014b12:	2101      	movs	r1, #1
 8014b14:	f7ff ff2a 	bl	801496c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014b18:	6860      	ldr	r0, [r4, #4]
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	6803      	ldr	r3, [r0, #0]
 8014b1e:	689b      	ldr	r3, [r3, #8]
 8014b20:	4798      	blx	r3
 8014b22:	6823      	ldr	r3, [r4, #0]
 8014b24:	4620      	mov	r0, r4
 8014b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b28:	4798      	blx	r3
 8014b2a:	6828      	ldr	r0, [r5, #0]
 8014b2c:	6803      	ldr	r3, [r0, #0]
 8014b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b34:	4718      	bx	r3
 8014b36:	bf00      	nop
 8014b38:	24006a3c 	.word	0x24006a3c

08014b3c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014b3c:	b508      	push	{r3, lr}
 8014b3e:	f7ed fb11 	bl	8002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014b46:	f7ed bb1b 	b.w	8002180 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014b4a <_ZN8touchgfx13DMA_Interface5startEv>:
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	6840      	ldr	r0, [r0, #4]
 8014b50:	6803      	ldr	r3, [r0, #0]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4798      	blx	r3
 8014b56:	b948      	cbnz	r0, 8014b6c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014b58:	7a63      	ldrb	r3, [r4, #9]
 8014b5a:	b13b      	cbz	r3, 8014b6c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014b5c:	7a23      	ldrb	r3, [r4, #8]
 8014b5e:	b92b      	cbnz	r3, 8014b6c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014b60:	6823      	ldr	r3, [r4, #0]
 8014b62:	4620      	mov	r0, r4
 8014b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b6a:	4718      	bx	r3
 8014b6c:	bd10      	pop	{r4, pc}

08014b6e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014b6e:	b570      	push	{r4, r5, r6, lr}
 8014b70:	4604      	mov	r4, r0
 8014b72:	6840      	ldr	r0, [r0, #4]
 8014b74:	6803      	ldr	r3, [r0, #0]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4798      	blx	r3
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	b930      	cbnz	r0, 8014b8c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014b7e:	7a23      	ldrb	r3, [r4, #8]
 8014b80:	b123      	cbz	r3, 8014b8c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014b82:	6860      	ldr	r0, [r4, #4]
 8014b84:	6803      	ldr	r3, [r0, #0]
 8014b86:	695b      	ldr	r3, [r3, #20]
 8014b88:	4798      	blx	r3
 8014b8a:	7225      	strb	r5, [r4, #8]
 8014b8c:	6860      	ldr	r0, [r4, #4]
 8014b8e:	6803      	ldr	r3, [r0, #0]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	4798      	blx	r3
 8014b94:	b928      	cbnz	r0, 8014ba2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	4620      	mov	r0, r4
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ba0:	4718      	bx	r3
 8014ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ba6:	f7ed bb03 	b.w	80021b0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014bac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014bac:	b510      	push	{r4, lr}
 8014bae:	6082      	str	r2, [r0, #8]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	4c03      	ldr	r4, [pc, #12]	; (8014bc0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014bb4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014bb8:	e9c0 4100 	strd	r4, r1, [r0]
 8014bbc:	bd10      	pop	{r4, pc}
 8014bbe:	bf00      	nop
 8014bc0:	0802527c 	.word	0x0802527c

08014bc4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014bc4:	6840      	ldr	r0, [r0, #4]
 8014bc6:	6803      	ldr	r3, [r0, #0]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4718      	bx	r3

08014bcc <_ZN8touchgfx8TextArea8setWidthEs>:
 8014bcc:	b530      	push	{r4, r5, lr}
 8014bce:	b085      	sub	sp, #20
 8014bd0:	6803      	ldr	r3, [r0, #0]
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	8101      	strh	r1, [r0, #8]
 8014bd6:	466d      	mov	r5, sp
 8014bd8:	4601      	mov	r1, r0
 8014bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014bde:	343c      	adds	r4, #60	; 0x3c
 8014be0:	4628      	mov	r0, r5
 8014be2:	4798      	blx	r3
 8014be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014bec:	b005      	add	sp, #20
 8014bee:	bd30      	pop	{r4, r5, pc}

08014bf0 <_ZN8touchgfx8TextArea9setHeightEs>:
 8014bf0:	b530      	push	{r4, r5, lr}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	6803      	ldr	r3, [r0, #0]
 8014bf6:	4604      	mov	r4, r0
 8014bf8:	8141      	strh	r1, [r0, #10]
 8014bfa:	466d      	mov	r5, sp
 8014bfc:	4601      	mov	r1, r0
 8014bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c02:	343c      	adds	r4, #60	; 0x3c
 8014c04:	4628      	mov	r0, r5
 8014c06:	4798      	blx	r3
 8014c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014c10:	b005      	add	sp, #20
 8014c12:	bd30      	pop	{r4, r5, pc}

08014c14 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8014c14:	2200      	movs	r2, #0
 8014c16:	8002      	strh	r2, [r0, #0]
 8014c18:	8042      	strh	r2, [r0, #2]
 8014c1a:	8082      	strh	r2, [r0, #4]
 8014c1c:	80c2      	strh	r2, [r0, #6]
 8014c1e:	4770      	bx	lr

08014c20 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8014c20:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8014c24:	4770      	bx	lr
	...

08014c28 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014c30:	460d      	mov	r5, r1
 8014c32:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8014c34:	4b08      	ldr	r3, [pc, #32]	; (8014c58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8014c3c:	4b07      	ldr	r3, [pc, #28]	; (8014c5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014c44:	6803      	ldr	r3, [r0, #0]
 8014c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c48:	4798      	blx	r3
 8014c4a:	1a29      	subs	r1, r5, r0
 8014c4c:	4633      	mov	r3, r6
 8014c4e:	4620      	mov	r0, r4
 8014c50:	b209      	sxth	r1, r1
 8014c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c56:	4718      	bx	r3
 8014c58:	24006a8c 	.word	0x24006a8c
 8014c5c:	24006a94 	.word	0x24006a94

08014c60 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8014c60:	b570      	push	{r4, r5, r6, lr}
 8014c62:	6803      	ldr	r3, [r0, #0]
 8014c64:	4604      	mov	r4, r0
 8014c66:	4615      	mov	r5, r2
 8014c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c6a:	4798      	blx	r3
 8014c6c:	6823      	ldr	r3, [r4, #0]
 8014c6e:	4629      	mov	r1, r5
 8014c70:	4620      	mov	r0, r4
 8014c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c78:	4718      	bx	r3

08014c7a <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	4770      	bx	lr

08014c7e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8014c7e:	2000      	movs	r0, #0
 8014c80:	4770      	bx	lr
	...

08014c84 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014c84:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8014c86:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	bf81      	itttt	hi
 8014c8e:	4b06      	ldrhi	r3, [pc, #24]	; (8014ca8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014c90:	681b      	ldrhi	r3, [r3, #0]
 8014c92:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8014c96:	7858      	ldrbhi	r0, [r3, #1]
 8014c98:	bf8c      	ite	hi
 8014c9a:	f000 0003 	andhi.w	r0, r0, #3
 8014c9e:	2000      	movls	r0, #0
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	24006a90 	.word	0x24006a90
 8014ca8:	24006a8c 	.word	0x24006a8c

08014cac <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8014cac:	4b11      	ldr	r3, [pc, #68]	; (8014cf4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8014cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	881b      	ldrh	r3, [r3, #0]
 8014cb8:	428b      	cmp	r3, r1
 8014cba:	d918      	bls.n	8014cee <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8014cbc:	6803      	ldr	r3, [r0, #0]
 8014cbe:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8014cc0:	4b0d      	ldr	r3, [pc, #52]	; (8014cf8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8014cc2:	6818      	ldr	r0, [r3, #0]
 8014cc4:	f7f0 fd3a 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 8014cc8:	6823      	ldr	r3, [r4, #0]
 8014cca:	4606      	mov	r6, r0
 8014ccc:	4620      	mov	r0, r4
 8014cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cd0:	4798      	blx	r3
 8014cd2:	6823      	ldr	r3, [r4, #0]
 8014cd4:	4607      	mov	r7, r0
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cdc:	4798      	blx	r3
 8014cde:	463a      	mov	r2, r7
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	4631      	mov	r1, r6
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	46ac      	mov	ip, r5
 8014ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cec:	4760      	bx	ip
 8014cee:	2000      	movs	r0, #0
 8014cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf4:	24006a90 	.word	0x24006a90
 8014cf8:	24006a98 	.word	0x24006a98

08014cfc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014cfc:	4b18      	ldr	r3, [pc, #96]	; (8014d60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8014cfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d02:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014d04:	4604      	mov	r4, r0
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	428b      	cmp	r3, r1
 8014d0a:	d926      	bls.n	8014d5a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8014d0c:	4b15      	ldr	r3, [pc, #84]	; (8014d64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014d14:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014d18:	4b13      	ldr	r3, [pc, #76]	; (8014d68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8014d1a:	7855      	ldrb	r5, [r2, #1]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8014d22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014d26:	6833      	ldr	r3, [r6, #0]
 8014d28:	69df      	ldr	r7, [r3, #28]
 8014d2a:	4b10      	ldr	r3, [pc, #64]	; (8014d6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014d2c:	6818      	ldr	r0, [r3, #0]
 8014d2e:	f7f0 fd05 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 8014d32:	6823      	ldr	r3, [r4, #0]
 8014d34:	4680      	mov	r8, r0
 8014d36:	4620      	mov	r0, r4
 8014d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d3a:	4798      	blx	r3
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	4681      	mov	r9, r0
 8014d40:	4620      	mov	r0, r4
 8014d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d46:	4798      	blx	r3
 8014d48:	464b      	mov	r3, r9
 8014d4a:	9000      	str	r0, [sp, #0]
 8014d4c:	4642      	mov	r2, r8
 8014d4e:	4629      	mov	r1, r5
 8014d50:	4630      	mov	r0, r6
 8014d52:	47b8      	blx	r7
 8014d54:	b003      	add	sp, #12
 8014d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	e7fa      	b.n	8014d54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014d5e:	bf00      	nop
 8014d60:	24006a90 	.word	0x24006a90
 8014d64:	24006a8c 	.word	0x24006a8c
 8014d68:	24006a94 	.word	0x24006a94
 8014d6c:	24006a98 	.word	0x24006a98

08014d70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014d70:	b40e      	push	{r1, r2, r3}
 8014d72:	4b30      	ldr	r3, [pc, #192]	; (8014e34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8014d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d78:	881a      	ldrh	r2, [r3, #0]
 8014d7a:	b09d      	sub	sp, #116	; 0x74
 8014d7c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8014d7e:	4604      	mov	r4, r0
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d954      	bls.n	8014e2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8014d84:	aa26      	add	r2, sp, #152	; 0x98
 8014d86:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8014e38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014d8a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014e3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8014d8e:	9202      	str	r2, [sp, #8]
 8014d90:	f8d9 2000 	ldr.w	r2, [r9]
 8014d94:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014d98:	f8d8 3000 	ldr.w	r3, [r8]
 8014d9c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014da0:	682b      	ldr	r3, [r5, #0]
 8014da2:	4628      	mov	r0, r5
 8014da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da6:	4798      	blx	r3
 8014da8:	4606      	mov	r6, r0
 8014daa:	b207      	sxth	r7, r0
 8014dac:	a803      	add	r0, sp, #12
 8014dae:	f003 fcbb 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8014db2:	682b      	ldr	r3, [r5, #0]
 8014db4:	4628      	mov	r0, r5
 8014db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014db8:	4798      	blx	r3
 8014dba:	682b      	ldr	r3, [r5, #0]
 8014dbc:	4682      	mov	sl, r0
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014dc2:	4798      	blx	r3
 8014dc4:	4653      	mov	r3, sl
 8014dc6:	9000      	str	r0, [sp, #0]
 8014dc8:	a803      	add	r0, sp, #12
 8014dca:	9a02      	ldr	r2, [sp, #8]
 8014dcc:	9925      	ldr	r1, [sp, #148]	; 0x94
 8014dce:	f003 fd06 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014dd2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8014dd8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8014ddc:	8925      	ldrh	r5, [r4, #8]
 8014dde:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8014de2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8014de6:	eba5 050c 	sub.w	r5, r5, ip
 8014dea:	784a      	ldrb	r2, [r1, #1]
 8014dec:	f8d8 3000 	ldr.w	r3, [r8]
 8014df0:	b22d      	sxth	r5, r5
 8014df2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8014df6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014dfa:	9500      	str	r5, [sp, #0]
 8014dfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014e00:	a803      	add	r0, sp, #12
 8014e02:	f001 fb3f 	bl	8016484 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014e06:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014e0a:	b203      	sxth	r3, r0
 8014e0c:	18b9      	adds	r1, r7, r2
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	dd0b      	ble.n	8014e2a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8014e12:	3b01      	subs	r3, #1
 8014e14:	fb13 f302 	smulbb	r3, r3, r2
 8014e18:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014e1c:	b21f      	sxth	r7, r3
 8014e1e:	4638      	mov	r0, r7
 8014e20:	b01d      	add	sp, #116	; 0x74
 8014e22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e26:	b003      	add	sp, #12
 8014e28:	4770      	bx	lr
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	dcf7      	bgt.n	8014e1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014e2e:	2700      	movs	r7, #0
 8014e30:	e7f5      	b.n	8014e1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014e32:	bf00      	nop
 8014e34:	24006a90 	.word	0x24006a90
 8014e38:	24006a8c 	.word	0x24006a8c
 8014e3c:	24006a94 	.word	0x24006a94

08014e40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014e40:	4bbd      	ldr	r3, [pc, #756]	; (8015138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8014e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e46:	460c      	mov	r4, r1
 8014e48:	881b      	ldrh	r3, [r3, #0]
 8014e4a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8014e4c:	b0a9      	sub	sp, #164	; 0xa4
 8014e4e:	4680      	mov	r8, r0
 8014e50:	428b      	cmp	r3, r1
 8014e52:	d809      	bhi.n	8014e68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014e54:	2300      	movs	r3, #0
 8014e56:	f04f 32ff 	mov.w	r2, #4294967295
 8014e5a:	6083      	str	r3, [r0, #8]
 8014e5c:	e9c0 3200 	strd	r3, r2, [r0]
 8014e60:	4640      	mov	r0, r8
 8014e62:	b029      	add	sp, #164	; 0xa4
 8014e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e68:	4eb4      	ldr	r6, [pc, #720]	; (801513c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014e6a:	6833      	ldr	r3, [r6, #0]
 8014e6c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014e70:	4bb3      	ldr	r3, [pc, #716]	; (8015140 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014e78:	4bb2      	ldr	r3, [pc, #712]	; (8015144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014e7a:	6818      	ldr	r0, [r3, #0]
 8014e7c:	f7f0 fc5e 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 8014e80:	682b      	ldr	r3, [r5, #0]
 8014e82:	4681      	mov	r9, r0
 8014e84:	4628      	mov	r0, r5
 8014e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e88:	4798      	blx	r3
 8014e8a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8014e8c:	b203      	sxth	r3, r0
 8014e8e:	4682      	mov	sl, r0
 8014e90:	4407      	add	r7, r0
 8014e92:	a80f      	add	r0, sp, #60	; 0x3c
 8014e94:	9304      	str	r3, [sp, #16]
 8014e96:	b2bb      	uxth	r3, r7
 8014e98:	9303      	str	r3, [sp, #12]
 8014e9a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	f040 80a5 	bne.w	8014fee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8014ea4:	f003 fc40 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8014ea8:	682b      	ldr	r3, [r5, #0]
 8014eaa:	4628      	mov	r0, r5
 8014eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014eae:	4798      	blx	r3
 8014eb0:	682b      	ldr	r3, [r5, #0]
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014eb8:	4798      	blx	r3
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	4607      	mov	r7, r0
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ec2:	4798      	blx	r3
 8014ec4:	6823      	ldr	r3, [r4, #0]
 8014ec6:	4683      	mov	fp, r0
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ece:	4798      	blx	r3
 8014ed0:	463b      	mov	r3, r7
 8014ed2:	4649      	mov	r1, r9
 8014ed4:	4632      	mov	r2, r6
 8014ed6:	2600      	movs	r6, #0
 8014ed8:	e9cd b000 	strd	fp, r0, [sp]
 8014edc:	a80f      	add	r0, sp, #60	; 0x3c
 8014ede:	4637      	mov	r7, r6
 8014ee0:	f003 fc92 	bl	8018808 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014ee4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014ee8:	f8df b250 	ldr.w	fp, [pc, #592]	; 801513c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8014eec:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014ef0:	bf0c      	ite	eq
 8014ef2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8014ef6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8014efa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014efc:	4629      	mov	r1, r5
 8014efe:	f8db 3000 	ldr.w	r3, [fp]
 8014f02:	a80f      	add	r0, sp, #60	; 0x3c
 8014f04:	3701      	adds	r7, #1
 8014f06:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014f0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014f0e:	b2bf      	uxth	r7, r7
 8014f10:	785b      	ldrb	r3, [r3, #1]
 8014f12:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014f16:	f000 ffd0 	bl	8015eba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014f1a:	9b03      	ldr	r3, [sp, #12]
 8014f1c:	4286      	cmp	r6, r0
 8014f1e:	eba9 0903 	sub.w	r9, r9, r3
 8014f22:	bfb8      	it	lt
 8014f24:	4606      	movlt	r6, r0
 8014f26:	a80f      	add	r0, sp, #60	; 0x3c
 8014f28:	fa0f f989 	sxth.w	r9, r9
 8014f2c:	b236      	sxth	r6, r6
 8014f2e:	f003 fc22 	bl	8018776 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8014f32:	b918      	cbnz	r0, 8014f3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014f34:	7a2b      	ldrb	r3, [r5, #8]
 8014f36:	444b      	add	r3, r9
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	dcde      	bgt.n	8014efa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014f3c:	9b03      	ldr	r3, [sp, #12]
 8014f3e:	4620      	mov	r0, r4
 8014f40:	9a04      	ldr	r2, [sp, #16]
 8014f42:	fb13 f707 	smulbb	r7, r3, r7
 8014f46:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014f48:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014f4c:	1aff      	subs	r7, r7, r3
 8014f4e:	b2bf      	uxth	r7, r7
 8014f50:	b23b      	sxth	r3, r7
 8014f52:	429a      	cmp	r2, r3
 8014f54:	bfa8      	it	ge
 8014f56:	4657      	movge	r7, sl
 8014f58:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f5c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014f60:	6823      	ldr	r3, [r4, #0]
 8014f62:	444f      	add	r7, r9
 8014f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f66:	bf08      	it	eq
 8014f68:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014f6c:	fa1f f987 	uxth.w	r9, r7
 8014f70:	bf18      	it	ne
 8014f72:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8014f76:	4798      	blx	r3
 8014f78:	2801      	cmp	r0, #1
 8014f7a:	fa0f f789 	sxth.w	r7, r9
 8014f7e:	b2b3      	uxth	r3, r6
 8014f80:	f000 80e2 	beq.w	8015148 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8014f84:	2802      	cmp	r0, #2
 8014f86:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8014f8a:	f000 80e3 	beq.w	8015154 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014f8e:	7aea      	ldrb	r2, [r5, #11]
 8014f90:	b236      	sxth	r6, r6
 8014f92:	7b2d      	ldrb	r5, [r5, #12]
 8014f94:	1ab6      	subs	r6, r6, r2
 8014f96:	442a      	add	r2, r5
 8014f98:	fa1f fa86 	uxth.w	sl, r6
 8014f9c:	4413      	add	r3, r2
 8014f9e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014fa2:	fa0f fb8a 	sxth.w	fp, sl
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	2a02      	cmp	r2, #2
 8014faa:	b21e      	sxth	r6, r3
 8014fac:	f000 80d6 	beq.w	801515c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014fb0:	2a03      	cmp	r2, #3
 8014fb2:	f000 80de 	beq.w	8015172 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8014fb6:	2a01      	cmp	r2, #1
 8014fb8:	f040 80e6 	bne.w	8015188 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014fbc:	8925      	ldrh	r5, [r4, #8]
 8014fbe:	4633      	mov	r3, r6
 8014fc0:	463e      	mov	r6, r7
 8014fc2:	eba5 0909 	sub.w	r9, r5, r9
 8014fc6:	461f      	mov	r7, r3
 8014fc8:	465d      	mov	r5, fp
 8014fca:	fa0f fb89 	sxth.w	fp, r9
 8014fce:	4b5d      	ldr	r3, [pc, #372]	; (8015144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014fd0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014fd2:	6818      	ldr	r0, [r3, #0]
 8014fd4:	f7f0 fbb2 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 8014fd8:	f8a8 b000 	strh.w	fp, [r8]
 8014fdc:	f8a8 5002 	strh.w	r5, [r8, #2]
 8014fe0:	f8a8 6004 	strh.w	r6, [r8, #4]
 8014fe4:	f8a8 7006 	strh.w	r7, [r8, #6]
 8014fe8:	f8c8 0008 	str.w	r0, [r8, #8]
 8014fec:	e738      	b.n	8014e60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8014fee:	f003 fb9b 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8014ff2:	682b      	ldr	r3, [r5, #0]
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ff8:	4798      	blx	r3
 8014ffa:	682b      	ldr	r3, [r5, #0]
 8014ffc:	4607      	mov	r7, r0
 8014ffe:	4628      	mov	r0, r5
 8015000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015002:	4798      	blx	r3
 8015004:	6823      	ldr	r3, [r4, #0]
 8015006:	4683      	mov	fp, r0
 8015008:	4620      	mov	r0, r4
 801500a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801500c:	4798      	blx	r3
 801500e:	6822      	ldr	r2, [r4, #0]
 8015010:	9005      	str	r0, [sp, #20]
 8015012:	4620      	mov	r0, r4
 8015014:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015018:	4790      	blx	r2
 801501a:	9b05      	ldr	r3, [sp, #20]
 801501c:	463a      	mov	r2, r7
 801501e:	4649      	mov	r1, r9
 8015020:	9001      	str	r0, [sp, #4]
 8015022:	a80f      	add	r0, sp, #60	; 0x3c
 8015024:	9300      	str	r3, [sp, #0]
 8015026:	465b      	mov	r3, fp
 8015028:	f003 fbee 	bl	8018808 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801502c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015030:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8015034:	af0f      	add	r7, sp, #60	; 0x3c
 8015036:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801503a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801503e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015040:	bf0a      	itet	eq
 8015042:	464a      	moveq	r2, r9
 8015044:	461a      	movne	r2, r3
 8015046:	4699      	moveq	r9, r3
 8015048:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801504c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8015050:	1ad2      	subs	r2, r2, r3
 8015052:	6833      	ldr	r3, [r6, #0]
 8015054:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8015058:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801505c:	7859      	ldrb	r1, [r3, #1]
 801505e:	2300      	movs	r3, #0
 8015060:	9707      	str	r7, [sp, #28]
 8015062:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8015066:	f8ad 3018 	strh.w	r3, [sp, #24]
 801506a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801506e:	f88d 1020 	strb.w	r1, [sp, #32]
 8015072:	9509      	str	r5, [sp, #36]	; 0x24
 8015074:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015078:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801507c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8015080:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015084:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8015088:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801508c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8015090:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015094:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015098:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801509c:	b350      	cbz	r0, 80150f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801509e:	682b      	ldr	r3, [r5, #0]
 80150a0:	4628      	mov	r0, r5
 80150a2:	695b      	ldr	r3, [r3, #20]
 80150a4:	4798      	blx	r3
 80150a6:	4607      	mov	r7, r0
 80150a8:	b320      	cbz	r0, 80150f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80150aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150ac:	4639      	mov	r1, r7
 80150ae:	6803      	ldr	r3, [r0, #0]
 80150b0:	68db      	ldr	r3, [r3, #12]
 80150b2:	4798      	blx	r3
 80150b4:	4606      	mov	r6, r0
 80150b6:	b1e8      	cbz	r0, 80150f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80150b8:	7b43      	ldrb	r3, [r0, #13]
 80150ba:	7a82      	ldrb	r2, [r0, #10]
 80150bc:	005b      	lsls	r3, r3, #1
 80150be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150c2:	4313      	orrs	r3, r2
 80150c4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80150c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80150cc:	2b06      	cmp	r3, #6
 80150ce:	d111      	bne.n	80150f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80150d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150d2:	4632      	mov	r2, r6
 80150d4:	4639      	mov	r1, r7
 80150d6:	6803      	ldr	r3, [r0, #0]
 80150d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150da:	4798      	blx	r3
 80150dc:	7b73      	ldrb	r3, [r6, #13]
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80150e4:	7ab3      	ldrb	r3, [r6, #10]
 80150e6:	4313      	orrs	r3, r2
 80150e8:	4418      	add	r0, r3
 80150ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80150ee:	4418      	add	r0, r3
 80150f0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80150f4:	2600      	movs	r6, #0
 80150f6:	4637      	mov	r7, r6
 80150f8:	a806      	add	r0, sp, #24
 80150fa:	3701      	adds	r7, #1
 80150fc:	f001 f8bf 	bl	801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015100:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8015104:	9b03      	ldr	r3, [sp, #12]
 8015106:	b2bf      	uxth	r7, r7
 8015108:	4286      	cmp	r6, r0
 801510a:	eba9 0903 	sub.w	r9, r9, r3
 801510e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015112:	bfb8      	it	lt
 8015114:	4606      	movlt	r6, r0
 8015116:	fa0f f989 	sxth.w	r9, r9
 801511a:	b236      	sxth	r6, r6
 801511c:	2b00      	cmp	r3, #0
 801511e:	f43f af0d 	beq.w	8014f3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015122:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8015126:	2b00      	cmp	r3, #0
 8015128:	f47f af08 	bne.w	8014f3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801512c:	7a2b      	ldrb	r3, [r5, #8]
 801512e:	444b      	add	r3, r9
 8015130:	2b00      	cmp	r3, #0
 8015132:	dce1      	bgt.n	80150f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8015134:	e702      	b.n	8014f3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015136:	bf00      	nop
 8015138:	24006a90 	.word	0x24006a90
 801513c:	24006a8c 	.word	0x24006a8c
 8015140:	24006a94 	.word	0x24006a94
 8015144:	24006a98 	.word	0x24006a98
 8015148:	ebaa 0606 	sub.w	r6, sl, r6
 801514c:	2002      	movs	r0, #2
 801514e:	fb96 f6f0 	sdiv	r6, r6, r0
 8015152:	e71c      	b.n	8014f8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015154:	441e      	add	r6, r3
 8015156:	ebaa 0606 	sub.w	r6, sl, r6
 801515a:	e718      	b.n	8014f8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801515c:	8925      	ldrh	r5, [r4, #8]
 801515e:	1aed      	subs	r5, r5, r3
 8015160:	eba5 050a 	sub.w	r5, r5, sl
 8015164:	fa0f fb85 	sxth.w	fp, r5
 8015168:	8965      	ldrh	r5, [r4, #10]
 801516a:	eba5 0509 	sub.w	r5, r5, r9
 801516e:	b22d      	sxth	r5, r5
 8015170:	e72d      	b.n	8014fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015172:	8965      	ldrh	r5, [r4, #10]
 8015174:	f04f 0b00 	mov.w	fp, #0
 8015178:	1aed      	subs	r5, r5, r3
 801517a:	4633      	mov	r3, r6
 801517c:	463e      	mov	r6, r7
 801517e:	eba5 050a 	sub.w	r5, r5, sl
 8015182:	461f      	mov	r7, r3
 8015184:	b22d      	sxth	r5, r5
 8015186:	e722      	b.n	8014fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015188:	2500      	movs	r5, #0
 801518a:	e720      	b.n	8014fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801518c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801518c:	b513      	push	{r0, r1, r4, lr}
 801518e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015192:	4604      	mov	r4, r0
 8015194:	b1fb      	cbz	r3, 80151d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015196:	4b16      	ldr	r3, [pc, #88]	; (80151f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8015198:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	428b      	cmp	r3, r1
 801519e:	d91a      	bls.n	80151d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80151a0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	dd16      	ble.n	80151d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80151a8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	dd12      	ble.n	80151d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80151b0:	4b10      	ldr	r3, [pc, #64]	; (80151f4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80151b2:	6818      	ldr	r0, [r3, #0]
 80151b4:	f7f0 fac2 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 80151b8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80151bc:	6822      	ldr	r2, [r4, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	db06      	blt.n	80151d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80151c2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	db02      	blt.n	80151d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80151ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80151cc:	4298      	cmp	r0, r3
 80151ce:	d004      	beq.n	80151da <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80151d0:	6953      	ldr	r3, [r2, #20]
 80151d2:	4620      	mov	r0, r4
 80151d4:	4798      	blx	r3
 80151d6:	b002      	add	sp, #8
 80151d8:	bd10      	pop	{r4, pc}
 80151da:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80151de:	466b      	mov	r3, sp
 80151e0:	6912      	ldr	r2, [r2, #16]
 80151e2:	c903      	ldmia	r1, {r0, r1}
 80151e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80151e8:	4619      	mov	r1, r3
 80151ea:	4620      	mov	r0, r4
 80151ec:	4790      	blx	r2
 80151ee:	e7f2      	b.n	80151d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80151f0:	24006a90 	.word	0x24006a90
 80151f4:	24006a98 	.word	0x24006a98

080151f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80151f8:	4b45      	ldr	r3, [pc, #276]	; (8015310 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80151fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015200:	b08e      	sub	sp, #56	; 0x38
 8015202:	881b      	ldrh	r3, [r3, #0]
 8015204:	4604      	mov	r4, r0
 8015206:	4293      	cmp	r3, r2
 8015208:	d97e      	bls.n	8015308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801520a:	6808      	ldr	r0, [r1, #0]
 801520c:	ab05      	add	r3, sp, #20
 801520e:	6849      	ldr	r1, [r1, #4]
 8015210:	4d40      	ldr	r5, [pc, #256]	; (8015314 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015212:	c303      	stmia	r3!, {r0, r1}
 8015214:	4611      	mov	r1, r2
 8015216:	6828      	ldr	r0, [r5, #0]
 8015218:	f7f0 fa90 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 801521c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015220:	2b00      	cmp	r3, #0
 8015222:	db11      	blt.n	8015248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015224:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015228:	2b00      	cmp	r3, #0
 801522a:	db0d      	blt.n	8015248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801522c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801522e:	4298      	cmp	r0, r3
 8015230:	d10a      	bne.n	8015248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015232:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8015236:	ab09      	add	r3, sp, #36	; 0x24
 8015238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801523c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015240:	4619      	mov	r1, r3
 8015242:	a805      	add	r0, sp, #20
 8015244:	f7fe fcc4 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8015248:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801524c:	2b00      	cmp	r3, #0
 801524e:	dd5b      	ble.n	8015308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015250:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015254:	2b00      	cmp	r3, #0
 8015256:	dd57      	ble.n	8015308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015258:	4f2f      	ldr	r7, [pc, #188]	; (8015318 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801525a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015262:	4b2e      	ldr	r3, [pc, #184]	; (801531c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801526a:	2e00      	cmp	r6, #0
 801526c:	d04c      	beq.n	8015308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801526e:	6823      	ldr	r3, [r4, #0]
 8015270:	4620      	mov	r0, r4
 8015272:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8015276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015278:	4798      	blx	r3
 801527a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8015282:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015286:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801528a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801528e:	785b      	ldrb	r3, [r3, #1]
 8015290:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8015294:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015298:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801529a:	9609      	str	r6, [sp, #36]	; 0x24
 801529c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152a0:	4b1f      	ldr	r3, [pc, #124]	; (8015320 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80152a2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80152ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80152ae:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80152b2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80152b6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80152ba:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80152be:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80152c2:	b10a      	cbz	r2, 80152c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80152c4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80152c6:	b906      	cbnz	r6, 80152ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80152c8:	689e      	ldr	r6, [r3, #8]
 80152ca:	af07      	add	r7, sp, #28
 80152cc:	4621      	mov	r1, r4
 80152ce:	4638      	mov	r0, r7
 80152d0:	f002 fe74 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80152d6:	6828      	ldr	r0, [r5, #0]
 80152d8:	f7f0 fa30 	bl	800573c <_ZNK8touchgfx5Texts7getTextEt>
 80152dc:	6823      	ldr	r3, [r4, #0]
 80152de:	4605      	mov	r5, r0
 80152e0:	4620      	mov	r0, r4
 80152e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152e4:	4798      	blx	r3
 80152e6:	6823      	ldr	r3, [r4, #0]
 80152e8:	4680      	mov	r8, r0
 80152ea:	4620      	mov	r0, r4
 80152ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80152f0:	4798      	blx	r3
 80152f2:	ab09      	add	r3, sp, #36	; 0x24
 80152f4:	9501      	str	r5, [sp, #4]
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	ab05      	add	r3, sp, #20
 80152fa:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80152fe:	4630      	mov	r0, r6
 8015300:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015304:	f7f0 f9ab 	bl	800565e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015308:	b00e      	add	sp, #56	; 0x38
 801530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530e:	bf00      	nop
 8015310:	24006a90 	.word	0x24006a90
 8015314:	24006a98 	.word	0x24006a98
 8015318:	24006a8c 	.word	0x24006a8c
 801531c:	24006a94 	.word	0x24006a94
 8015320:	24006a3c 	.word	0x24006a3c

08015324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	4b0e      	ldr	r3, [pc, #56]	; (8015360 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015328:	4604      	mov	r4, r0
 801532a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	429a      	cmp	r2, r3
 8015330:	d214      	bcs.n	801535c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015332:	6803      	ldr	r3, [r0, #0]
 8015334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015336:	4798      	blx	r3
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	4605      	mov	r5, r0
 801533c:	4620      	mov	r0, r4
 801533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015340:	4798      	blx	r3
 8015342:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015346:	b22d      	sxth	r5, r5
 8015348:	4601      	mov	r1, r0
 801534a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801534e:	bf06      	itte	eq
 8015350:	4602      	moveq	r2, r0
 8015352:	4629      	moveq	r1, r5
 8015354:	462a      	movne	r2, r5
 8015356:	4620      	mov	r0, r4
 8015358:	f7ef fb89 	bl	8004a6e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801535c:	bd38      	pop	{r3, r4, r5, pc}
 801535e:	bf00      	nop
 8015360:	24006a90 	.word	0x24006a90

08015364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015364:	b530      	push	{r4, r5, lr}
 8015366:	888b      	ldrh	r3, [r1, #4]
 8015368:	b085      	sub	sp, #20
 801536a:	4604      	mov	r4, r0
 801536c:	8583      	strh	r3, [r0, #44]	; 0x2c
 801536e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015372:	b923      	cbnz	r3, 801537e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015374:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015378:	b90b      	cbnz	r3, 801537e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801537a:	f7ff ffd3 	bl	8015324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801537e:	6823      	ldr	r3, [r4, #0]
 8015380:	466d      	mov	r5, sp
 8015382:	4621      	mov	r1, r4
 8015384:	343c      	adds	r4, #60	; 0x3c
 8015386:	4628      	mov	r0, r5
 8015388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801538c:	4798      	blx	r3
 801538e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015396:	b005      	add	sp, #20
 8015398:	bd30      	pop	{r4, r5, pc}

0801539a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801539a:	2300      	movs	r3, #0
 801539c:	8083      	strh	r3, [r0, #4]
 801539e:	80c3      	strh	r3, [r0, #6]
 80153a0:	8003      	strh	r3, [r0, #0]
 80153a2:	8043      	strh	r3, [r0, #2]
 80153a4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80153a8:	2bff      	cmp	r3, #255	; 0xff
 80153aa:	bf01      	itttt	eq
 80153ac:	890b      	ldrheq	r3, [r1, #8]
 80153ae:	8083      	strheq	r3, [r0, #4]
 80153b0:	894b      	ldrheq	r3, [r1, #10]
 80153b2:	80c3      	strheq	r3, [r0, #6]
 80153b4:	4770      	bx	lr
	...

080153b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80153b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153ba:	4604      	mov	r4, r0
 80153bc:	466b      	mov	r3, sp
 80153be:	6808      	ldr	r0, [r1, #0]
 80153c0:	6849      	ldr	r1, [r1, #4]
 80153c2:	c303      	stmia	r3!, {r0, r1}
 80153c4:	6823      	ldr	r3, [r4, #0]
 80153c6:	4669      	mov	r1, sp
 80153c8:	4620      	mov	r0, r4
 80153ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153cc:	4798      	blx	r3
 80153ce:	4b08      	ldr	r3, [pc, #32]	; (80153f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80153d6:	b10a      	cbz	r2, 80153dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80153d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80153da:	b900      	cbnz	r0, 80153de <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80153dc:	6898      	ldr	r0, [r3, #8]
 80153de:	6803      	ldr	r3, [r0, #0]
 80153e0:	4669      	mov	r1, sp
 80153e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80153e4:	6a1d      	ldr	r5, [r3, #32]
 80153e6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80153ea:	47a8      	blx	r5
 80153ec:	b003      	add	sp, #12
 80153ee:	bd30      	pop	{r4, r5, pc}
 80153f0:	24006a3c 	.word	0x24006a3c

080153f4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80153f4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80153f8:	b12a      	cbz	r2, 8015406 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80153fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80153fe:	b112      	cbz	r2, 8015406 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015400:	6803      	ldr	r3, [r0, #0]
 8015402:	695b      	ldr	r3, [r3, #20]
 8015404:	4718      	bx	r3
 8015406:	4770      	bx	lr

08015408 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015408:	b510      	push	{r4, lr}
 801540a:	6803      	ldr	r3, [r0, #0]
 801540c:	460c      	mov	r4, r1
 801540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015410:	4798      	blx	r3
 8015412:	1b03      	subs	r3, r0, r4
 8015414:	4258      	negs	r0, r3
 8015416:	4158      	adcs	r0, r3
 8015418:	bd10      	pop	{r4, pc}
	...

0801541c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801541c:	4b01      	ldr	r3, [pc, #4]	; (8015424 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801541e:	6019      	str	r1, [r3, #0]
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	24006a44 	.word	0x24006a44

08015428 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	4696      	mov	lr, r2
 801542e:	b097      	sub	sp, #92	; 0x5c
 8015430:	4605      	mov	r5, r0
 8015432:	4614      	mov	r4, r2
 8015434:	460e      	mov	r6, r1
 8015436:	461f      	mov	r7, r3
 8015438:	f10d 0c1c 	add.w	ip, sp, #28
 801543c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015440:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015444:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8015448:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801544c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015450:	f8de 3000 	ldr.w	r3, [lr]
 8015454:	f104 0e14 	add.w	lr, r4, #20
 8015458:	f8cc 3000 	str.w	r3, [ip]
 801545c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015460:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015468:	f8de 3000 	ldr.w	r3, [lr]
 801546c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015470:	f8cc 3000 	str.w	r3, [ip]
 8015474:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015478:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801547c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015480:	f8de 3000 	ldr.w	r3, [lr]
 8015484:	4631      	mov	r1, r6
 8015486:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015488:	4628      	mov	r0, r5
 801548a:	f8cc 3000 	str.w	r3, [ip]
 801548e:	682b      	ldr	r3, [r5, #0]
 8015490:	9201      	str	r2, [sp, #4]
 8015492:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015494:	f8cd 8008 	str.w	r8, [sp, #8]
 8015498:	9200      	str	r2, [sp, #0]
 801549a:	aa07      	add	r2, sp, #28
 801549c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80154a0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80154a4:	463b      	mov	r3, r7
 80154a6:	47d8      	blx	fp
 80154a8:	46a6      	mov	lr, r4
 80154aa:	f10d 0c1c 	add.w	ip, sp, #28
 80154ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154b6:	f8de 3000 	ldr.w	r3, [lr]
 80154ba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80154be:	343c      	adds	r4, #60	; 0x3c
 80154c0:	f8cc 3000 	str.w	r3, [ip]
 80154c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80154c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154d0:	f8de 3000 	ldr.w	r3, [lr]
 80154d4:	f8cc 3000 	str.w	r3, [ip]
 80154d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80154dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154e2:	6823      	ldr	r3, [r4, #0]
 80154e4:	4631      	mov	r1, r6
 80154e6:	4628      	mov	r0, r5
 80154e8:	f8cc 3000 	str.w	r3, [ip]
 80154ec:	682b      	ldr	r3, [r5, #0]
 80154ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80154f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80154f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80154f8:	9201      	str	r2, [sp, #4]
 80154fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80154fc:	9200      	str	r2, [sp, #0]
 80154fe:	aa07      	add	r2, sp, #28
 8015500:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8015502:	463b      	mov	r3, r7
 8015504:	47a0      	blx	r4
 8015506:	b017      	add	sp, #92	; 0x5c
 8015508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801550c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801550c:	2000      	movs	r0, #0
 801550e:	4770      	bx	lr

08015510 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015514:	b08d      	sub	sp, #52	; 0x34
 8015516:	4688      	mov	r8, r1
 8015518:	f8d3 c000 	ldr.w	ip, [r3]
 801551c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801551e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015522:	680f      	ldr	r7, [r1, #0]
 8015524:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015528:	eba7 070c 	sub.w	r7, r7, ip
 801552c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015530:	edd3 6a07 	vldr	s13, [r3, #28]
 8015534:	42bc      	cmp	r4, r7
 8015536:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015538:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801553c:	bfa8      	it	ge
 801553e:	463c      	movge	r4, r7
 8015540:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015544:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015548:	ee07 4a90 	vmov	s15, r4
 801554c:	eb09 0e0c 	add.w	lr, r9, ip
 8015550:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015554:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015558:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801555c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8015560:	4571      	cmp	r1, lr
 8015562:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015566:	ee65 4a24 	vmul.f32	s9, s10, s9
 801556a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801556e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015572:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015576:	ee32 1a05 	vadd.f32	s2, s4, s10
 801557a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801557e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015582:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015586:	ee22 2a07 	vmul.f32	s4, s4, s14
 801558a:	f340 808c 	ble.w	80156a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801558e:	eba1 060e 	sub.w	r6, r1, lr
 8015592:	fb96 f5f4 	sdiv	r5, r6, r4
 8015596:	ee07 5a10 	vmov	s14, r5
 801559a:	2d00      	cmp	r5, #0
 801559c:	fb04 6615 	mls	r6, r4, r5, r6
 80155a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80155a4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80155a8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80155ac:	eea7 1a05 	vfma.f32	s2, s14, s10
 80155b0:	dd12      	ble.n	80155d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80155b2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80155b6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80155ba:	ee31 2a45 	vsub.f32	s4, s2, s10
 80155be:	eef5 6a40 	vcmp.f32	s13, #0.0
 80155c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c6:	bf14      	ite	ne
 80155c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80155cc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80155d0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80155d4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80155d8:	fb05 f204 	mul.w	r2, r5, r4
 80155dc:	1abf      	subs	r7, r7, r2
 80155de:	4494      	add	ip, r2
 80155e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80155e4:	4411      	add	r1, r2
 80155e6:	eb09 020c 	add.w	r2, r9, ip
 80155ea:	b209      	sxth	r1, r1
 80155ec:	443a      	add	r2, r7
 80155ee:	428a      	cmp	r2, r1
 80155f0:	bfc4      	itt	gt
 80155f2:	eba1 0209 	subgt.w	r2, r1, r9
 80155f6:	eba2 070c 	subgt.w	r7, r2, ip
 80155fa:	2f00      	cmp	r7, #0
 80155fc:	dd50      	ble.n	80156a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80155fe:	fb97 f1f4 	sdiv	r1, r7, r4
 8015602:	fb04 7211 	mls	r2, r4, r1, r7
 8015606:	b90a      	cbnz	r2, 801560c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015608:	3901      	subs	r1, #1
 801560a:	4622      	mov	r2, r4
 801560c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015610:	6840      	ldr	r0, [r0, #4]
 8015612:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015616:	44b6      	add	lr, r6
 8015618:	f8d0 a000 	ldr.w	sl, [r0]
 801561c:	2900      	cmp	r1, #0
 801561e:	bfcc      	ite	gt
 8015620:	46a1      	movgt	r9, r4
 8015622:	4691      	movle	r9, r2
 8015624:	900b      	str	r0, [sp, #44]	; 0x2c
 8015626:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015628:	fb04 e505 	mla	r5, r4, r5, lr
 801562c:	eef0 6a42 	vmov.f32	s13, s4
 8015630:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015634:	9008      	str	r0, [sp, #32]
 8015636:	eeb0 7a61 	vmov.f32	s14, s3
 801563a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801563c:	695b      	ldr	r3, [r3, #20]
 801563e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015642:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015646:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801564a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801564c:	445b      	add	r3, fp
 801564e:	9307      	str	r3, [sp, #28]
 8015650:	ee16 3a90 	vmov	r3, s13
 8015654:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015658:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801565c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015660:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015664:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015668:	ee17 7a90 	vmov	r7, s15
 801566c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015670:	fb97 f7f4 	sdiv	r7, r7, r4
 8015674:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015678:	ee17 ca90 	vmov	ip, s15
 801567c:	fb9c fcf4 	sdiv	ip, ip, r4
 8015680:	fb0c 3306 	mla	r3, ip, r6, r3
 8015684:	9302      	str	r3, [sp, #8]
 8015686:	ee17 3a10 	vmov	r3, s14
 801568a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801568e:	fb07 3706 	mla	r7, r7, r6, r3
 8015692:	eba9 0306 	sub.w	r3, r9, r6
 8015696:	e9cd 4700 	strd	r4, r7, [sp]
 801569a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801569e:	47a0      	blx	r4
 80156a0:	b00d      	add	sp, #52	; 0x34
 80156a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a6:	2500      	movs	r5, #0
 80156a8:	462e      	mov	r6, r5
 80156aa:	e799      	b.n	80155e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080156ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80156ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b0:	b0db      	sub	sp, #364	; 0x16c
 80156b2:	461d      	mov	r5, r3
 80156b4:	4614      	mov	r4, r2
 80156b6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80156ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80156bc:	4629      	mov	r1, r5
 80156be:	930a      	str	r3, [sp, #40]	; 0x28
 80156c0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80156c4:	9009      	str	r0, [sp, #36]	; 0x24
 80156c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80156c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80156cc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80156d0:	9310      	str	r3, [sp, #64]	; 0x40
 80156d2:	6803      	ldr	r3, [r0, #0]
 80156d4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80156d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156da:	47b8      	blx	r7
 80156dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156de:	6058      	str	r0, [r3, #4]
 80156e0:	2800      	cmp	r0, #0
 80156e2:	f000 83a1 	beq.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80156e6:	682b      	ldr	r3, [r5, #0]
 80156e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80156ec:	ed94 7a02 	vldr	s14, [r4, #8]
 80156f0:	9314      	str	r3, [sp, #80]	; 0x50
 80156f2:	686b      	ldr	r3, [r5, #4]
 80156f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80156f8:	9315      	str	r3, [sp, #84]	; 0x54
 80156fa:	4bc1      	ldr	r3, [pc, #772]	; (8015a00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80156fc:	7819      	ldrb	r1, [r3, #0]
 80156fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015702:	2900      	cmp	r1, #0
 8015704:	bf16      	itet	ne
 8015706:	4619      	movne	r1, r3
 8015708:	4611      	moveq	r1, r2
 801570a:	4613      	movne	r3, r2
 801570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015710:	9116      	str	r1, [sp, #88]	; 0x58
 8015712:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015716:	f240 8387 	bls.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801571a:	ed94 7a07 	vldr	s14, [r4, #28]
 801571e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015726:	f240 837f 	bls.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801572a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801572e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015736:	f240 8377 	bls.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801573a:	6822      	ldr	r2, [r4, #0]
 801573c:	4bb1      	ldr	r3, [pc, #708]	; (8015a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801573e:	429a      	cmp	r2, r3
 8015740:	f2c0 8372 	blt.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015744:	49b0      	ldr	r1, [pc, #704]	; (8015a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015746:	6963      	ldr	r3, [r4, #20]
 8015748:	428a      	cmp	r2, r1
 801574a:	f300 836d 	bgt.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801574e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015752:	48ae      	ldr	r0, [pc, #696]	; (8015a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015754:	33ff      	adds	r3, #255	; 0xff
 8015756:	4283      	cmp	r3, r0
 8015758:	f200 8366 	bhi.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801575c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801575e:	4dac      	ldr	r5, [pc, #688]	; (8015a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015760:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015764:	33ff      	adds	r3, #255	; 0xff
 8015766:	42ab      	cmp	r3, r5
 8015768:	f200 835e 	bhi.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801576c:	6862      	ldr	r2, [r4, #4]
 801576e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015772:	33ff      	adds	r3, #255	; 0xff
 8015774:	4283      	cmp	r3, r0
 8015776:	f200 8357 	bhi.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801577a:	69a1      	ldr	r1, [r4, #24]
 801577c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015780:	33ff      	adds	r3, #255	; 0xff
 8015782:	4283      	cmp	r3, r0
 8015784:	f200 8350 	bhi.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801578a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801578e:	30ff      	adds	r0, #255	; 0xff
 8015790:	42a8      	cmp	r0, r5
 8015792:	f200 8349 	bhi.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015796:	428a      	cmp	r2, r1
 8015798:	f280 8110 	bge.w	80159bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801579c:	429a      	cmp	r2, r3
 801579e:	f300 8119 	bgt.w	80159d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80157a2:	4299      	cmp	r1, r3
 80157a4:	f280 811d 	bge.w	80159e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80157a8:	2502      	movs	r5, #2
 80157aa:	2701      	movs	r7, #1
 80157ac:	46a9      	mov	r9, r5
 80157ae:	46b8      	mov	r8, r7
 80157b0:	f04f 0a00 	mov.w	sl, #0
 80157b4:	4621      	mov	r1, r4
 80157b6:	a849      	add	r0, sp, #292	; 0x124
 80157b8:	f003 fd00 	bl	80191bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80157bc:	4622      	mov	r2, r4
 80157be:	4653      	mov	r3, sl
 80157c0:	a949      	add	r1, sp, #292	; 0x124
 80157c2:	f8cd 9000 	str.w	r9, [sp]
 80157c6:	a819      	add	r0, sp, #100	; 0x64
 80157c8:	f003 fe28 	bl	801941c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157cc:	4622      	mov	r2, r4
 80157ce:	4653      	mov	r3, sl
 80157d0:	a949      	add	r1, sp, #292	; 0x124
 80157d2:	f8cd 8000 	str.w	r8, [sp]
 80157d6:	a829      	add	r0, sp, #164	; 0xa4
 80157d8:	f003 fe20 	bl	801941c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157dc:	4643      	mov	r3, r8
 80157de:	4622      	mov	r2, r4
 80157e0:	a949      	add	r1, sp, #292	; 0x124
 80157e2:	f8cd 9000 	str.w	r9, [sp]
 80157e6:	a839      	add	r0, sp, #228	; 0xe4
 80157e8:	f003 fe18 	bl	801941c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80157ec:	42af      	cmp	r7, r5
 80157ee:	af12      	add	r7, sp, #72	; 0x48
 80157f0:	bfb7      	itett	lt
 80157f2:	2300      	movlt	r3, #0
 80157f4:	2301      	movge	r3, #1
 80157f6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80157f8:	ac19      	addlt	r4, sp, #100	; 0x64
 80157fa:	bfb1      	iteee	lt
 80157fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80157fe:	ad19      	addge	r5, sp, #100	; 0x64
 8015800:	930e      	strge	r3, [sp, #56]	; 0x38
 8015802:	ac29      	addge	r4, sp, #164	; 0xa4
 8015804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015806:	e893 0003 	ldmia.w	r3, {r0, r1}
 801580a:	e887 0003 	stmia.w	r7, {r0, r1}
 801580e:	b928      	cbnz	r0, 801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015810:	4b80      	ldr	r3, [pc, #512]	; (8015a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015812:	6818      	ldr	r0, [r3, #0]
 8015814:	6803      	ldr	r3, [r0, #0]
 8015816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015818:	4798      	blx	r3
 801581a:	6038      	str	r0, [r7, #0]
 801581c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801581e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015826:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015828:	930c      	str	r3, [sp, #48]	; 0x30
 801582a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801582c:	6963      	ldr	r3, [r4, #20]
 801582e:	440b      	add	r3, r1
 8015830:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015834:	4408      	add	r0, r1
 8015836:	b200      	sxth	r0, r0
 8015838:	4283      	cmp	r3, r0
 801583a:	900d      	str	r0, [sp, #52]	; 0x34
 801583c:	f280 80dd 	bge.w	80159fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015840:	428b      	cmp	r3, r1
 8015842:	da08      	bge.n	8015856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015844:	2a00      	cmp	r2, #0
 8015846:	dd06      	ble.n	8015856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015848:	1acb      	subs	r3, r1, r3
 801584a:	429a      	cmp	r2, r3
 801584c:	f2c0 80e4 	blt.w	8015a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015850:	2b00      	cmp	r3, #0
 8015852:	f300 80e2 	bgt.w	8015a1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015856:	6967      	ldr	r7, [r4, #20]
 8015858:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801585c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801585e:	443b      	add	r3, r7
 8015860:	461f      	mov	r7, r3
 8015862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015864:	1bdf      	subs	r7, r3, r7
 8015866:	4297      	cmp	r7, r2
 8015868:	bfa8      	it	ge
 801586a:	4617      	movge	r7, r2
 801586c:	2f00      	cmp	r7, #0
 801586e:	f340 8166 	ble.w	8015b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015872:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015874:	6829      	ldr	r1, [r5, #0]
 8015876:	f9b3 2000 	ldrsh.w	r2, [r3]
 801587a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801587e:	4411      	add	r1, r2
 8015880:	6820      	ldr	r0, [r4, #0]
 8015882:	4299      	cmp	r1, r3
 8015884:	dd1a      	ble.n	80158bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015886:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801588a:	4402      	add	r2, r0
 801588c:	440b      	add	r3, r1
 801588e:	b21b      	sxth	r3, r3
 8015890:	429a      	cmp	r2, r3
 8015892:	dc13      	bgt.n	80158bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015896:	a912      	add	r1, sp, #72	; 0x48
 8015898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801589a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	9206      	str	r2, [sp, #24]
 80158a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158a2:	9500      	str	r5, [sp, #0]
 80158a4:	9205      	str	r2, [sp, #20]
 80158a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158a8:	e9cd b203 	strd	fp, r2, [sp, #12]
 80158ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80158ae:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80158b2:	aa49      	add	r2, sp, #292	; 0x124
 80158b4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80158b8:	4623      	mov	r3, r4
 80158ba:	47c8      	blx	r9
 80158bc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80158c0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80158c4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80158c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158cc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80158d0:	68a1      	ldr	r1, [r4, #8]
 80158d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80158d6:	ed94 6a08 	vldr	s12, [r4, #32]
 80158da:	edd4 6a07 	vldr	s13, [r4, #28]
 80158de:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80158e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80158e6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80158ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80158ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80158f2:	441a      	add	r2, r3
 80158f4:	6963      	ldr	r3, [r4, #20]
 80158f6:	3301      	adds	r3, #1
 80158f8:	6022      	str	r2, [r4, #0]
 80158fa:	6163      	str	r3, [r4, #20]
 80158fc:	69a3      	ldr	r3, [r4, #24]
 80158fe:	3b01      	subs	r3, #1
 8015900:	61a3      	str	r3, [r4, #24]
 8015902:	6923      	ldr	r3, [r4, #16]
 8015904:	440b      	add	r3, r1
 8015906:	68e1      	ldr	r1, [r4, #12]
 8015908:	428b      	cmp	r3, r1
 801590a:	6123      	str	r3, [r4, #16]
 801590c:	db15      	blt.n	801593a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801590e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015912:	3201      	adds	r2, #1
 8015914:	1a5b      	subs	r3, r3, r1
 8015916:	ee76 6a26 	vadd.f32	s13, s12, s13
 801591a:	6022      	str	r2, [r4, #0]
 801591c:	6123      	str	r3, [r4, #16]
 801591e:	edc4 6a07 	vstr	s13, [r4, #28]
 8015922:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015926:	ee36 7a87 	vadd.f32	s14, s13, s14
 801592a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801592e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015936:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801593a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801593e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015942:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015946:	ee37 7a27 	vadd.f32	s14, s14, s15
 801594a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801594e:	68a9      	ldr	r1, [r5, #8]
 8015950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015954:	ed95 6a08 	vldr	s12, [r5, #32]
 8015958:	edd5 6a07 	vldr	s13, [r5, #28]
 801595c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015960:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015964:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015968:	e9d5 2300 	ldrd	r2, r3, [r5]
 801596c:	edc5 6a07 	vstr	s13, [r5, #28]
 8015970:	441a      	add	r2, r3
 8015972:	696b      	ldr	r3, [r5, #20]
 8015974:	3301      	adds	r3, #1
 8015976:	602a      	str	r2, [r5, #0]
 8015978:	616b      	str	r3, [r5, #20]
 801597a:	69ab      	ldr	r3, [r5, #24]
 801597c:	3b01      	subs	r3, #1
 801597e:	61ab      	str	r3, [r5, #24]
 8015980:	692b      	ldr	r3, [r5, #16]
 8015982:	440b      	add	r3, r1
 8015984:	68e9      	ldr	r1, [r5, #12]
 8015986:	428b      	cmp	r3, r1
 8015988:	612b      	str	r3, [r5, #16]
 801598a:	db15      	blt.n	80159b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801598c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015990:	3201      	adds	r2, #1
 8015992:	1a5b      	subs	r3, r3, r1
 8015994:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015998:	602a      	str	r2, [r5, #0]
 801599a:	612b      	str	r3, [r5, #16]
 801599c:	edc5 6a07 	vstr	s13, [r5, #28]
 80159a0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80159a4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80159a8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80159ac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80159b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159b4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80159b8:	3f01      	subs	r7, #1
 80159ba:	e757      	b.n	801586c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80159bc:	4299      	cmp	r1, r3
 80159be:	dc13      	bgt.n	80159e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80159c0:	429a      	cmp	r2, r3
 80159c2:	da14      	bge.n	80159ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80159c4:	2502      	movs	r5, #2
 80159c6:	2703      	movs	r7, #3
 80159c8:	f04f 0800 	mov.w	r8, #0
 80159cc:	46a9      	mov	r9, r5
 80159ce:	f04f 0a01 	mov.w	sl, #1
 80159d2:	e6ef      	b.n	80157b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80159d4:	2501      	movs	r5, #1
 80159d6:	2700      	movs	r7, #0
 80159d8:	46a9      	mov	r9, r5
 80159da:	46b8      	mov	r8, r7
 80159dc:	f04f 0a02 	mov.w	sl, #2
 80159e0:	e6e8      	b.n	80157b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80159e2:	2501      	movs	r5, #1
 80159e4:	2702      	movs	r7, #2
 80159e6:	e6e1      	b.n	80157ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80159e8:	2500      	movs	r5, #0
 80159ea:	2701      	movs	r7, #1
 80159ec:	e7f4      	b.n	80159d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80159ee:	2702      	movs	r7, #2
 80159f0:	2503      	movs	r5, #3
 80159f2:	f04f 0900 	mov.w	r9, #0
 80159f6:	46b8      	mov	r8, r7
 80159f8:	e7e9      	b.n	80159ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80159fa:	4613      	mov	r3, r2
 80159fc:	e728      	b.n	8015850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80159fe:	bf00      	nop
 8015a00:	24006a34 	.word	0x24006a34
 8015a04:	fffd8f01 	.word	0xfffd8f01
 8015a08:	00027100 	.word	0x00027100
 8015a0c:	0004e1ff 	.word	0x0004e1ff
 8015a10:	0004e1fe 	.word	0x0004e1fe
 8015a14:	24006a3c 	.word	0x24006a3c
 8015a18:	4613      	mov	r3, r2
 8015a1a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015a1c:	469e      	mov	lr, r3
 8015a1e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015a20:	469c      	mov	ip, r3
 8015a22:	9111      	str	r1, [sp, #68]	; 0x44
 8015a24:	f04f 0900 	mov.w	r9, #0
 8015a28:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015a2c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015a30:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015a34:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015a38:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015a3c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015a40:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015a44:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015a48:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015a4c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015a50:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015a54:	f1bc 0f00 	cmp.w	ip, #0
 8015a58:	d147      	bne.n	8015aea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015a5a:	eb03 0c07 	add.w	ip, r3, r7
 8015a5e:	1ad7      	subs	r7, r2, r3
 8015a60:	f1b9 0f00 	cmp.w	r9, #0
 8015a64:	d009      	beq.n	8015a7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015a66:	9029      	str	r0, [sp, #164]	; 0xa4
 8015a68:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015a6c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015a70:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015a74:	912d      	str	r1, [sp, #180]	; 0xb4
 8015a76:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015a7a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015a7c:	f04f 0800 	mov.w	r8, #0
 8015a80:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015a84:	9111      	str	r1, [sp, #68]	; 0x44
 8015a86:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015a8a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015a8e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015a92:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015a96:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015a9a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015a9e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015aa2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015aa6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015aaa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015aae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015ab2:	f1be 0f00 	cmp.w	lr, #0
 8015ab6:	d031      	beq.n	8015b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015ab8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015aba:	4450      	add	r0, sl
 8015abc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ac0:	4431      	add	r1, r6
 8015ac2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ac6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015aca:	4549      	cmp	r1, r9
 8015acc:	db08      	blt.n	8015ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015ace:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015ad2:	3001      	adds	r0, #1
 8015ad4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015ad8:	eba1 0109 	sub.w	r1, r1, r9
 8015adc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015ae0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015ae4:	f04f 0801 	mov.w	r8, #1
 8015ae8:	e7e3      	b.n	8015ab2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015aea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015aec:	4450      	add	r0, sl
 8015aee:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015af2:	4431      	add	r1, r6
 8015af4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015af8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015afc:	4541      	cmp	r1, r8
 8015afe:	db08      	blt.n	8015b12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015b00:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015b04:	3001      	adds	r0, #1
 8015b06:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015b0a:	eba1 0108 	sub.w	r1, r1, r8
 8015b0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015b12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015b16:	f04f 0901 	mov.w	r9, #1
 8015b1a:	e79b      	b.n	8015a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015b1c:	449c      	add	ip, r3
 8015b1e:	1aff      	subs	r7, r7, r3
 8015b20:	f1b8 0f00 	cmp.w	r8, #0
 8015b24:	d009      	beq.n	8015b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015b26:	9019      	str	r0, [sp, #100]	; 0x64
 8015b28:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015b2c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015b30:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015b34:	911d      	str	r1, [sp, #116]	; 0x74
 8015b36:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015b3a:	1ad2      	subs	r2, r2, r3
 8015b3c:	e68b      	b.n	8015856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b40:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f000 80d1 	beq.w	8015cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015b48:	ad19      	add	r5, sp, #100	; 0x64
 8015b4a:	ac39      	add	r4, sp, #228	; 0xe4
 8015b4c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015b4e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b56:	930c      	str	r3, [sp, #48]	; 0x30
 8015b58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b5a:	6963      	ldr	r3, [r4, #20]
 8015b5c:	440b      	add	r3, r1
 8015b5e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015b62:	4408      	add	r0, r1
 8015b64:	b200      	sxth	r0, r0
 8015b66:	4283      	cmp	r3, r0
 8015b68:	900d      	str	r0, [sp, #52]	; 0x34
 8015b6a:	f280 80c1 	bge.w	8015cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015b6e:	428b      	cmp	r3, r1
 8015b70:	da08      	bge.n	8015b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b72:	2a00      	cmp	r2, #0
 8015b74:	dd06      	ble.n	8015b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b76:	1acb      	subs	r3, r1, r3
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	f2c0 80bb 	blt.w	8015cf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f300 80b9 	bgt.w	8015cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015b84:	6967      	ldr	r7, [r4, #20]
 8015b86:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b8c:	443b      	add	r3, r7
 8015b8e:	461f      	mov	r7, r3
 8015b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b92:	1bdf      	subs	r7, r3, r7
 8015b94:	4297      	cmp	r7, r2
 8015b96:	bfa8      	it	ge
 8015b98:	4617      	movge	r7, r2
 8015b9a:	2f00      	cmp	r7, #0
 8015b9c:	f340 813c 	ble.w	8015e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015ba0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015ba2:	6829      	ldr	r1, [r5, #0]
 8015ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ba8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015bac:	4411      	add	r1, r2
 8015bae:	6820      	ldr	r0, [r4, #0]
 8015bb0:	4299      	cmp	r1, r3
 8015bb2:	dd1a      	ble.n	8015bea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015bb4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015bb8:	4402      	add	r2, r0
 8015bba:	440b      	add	r3, r1
 8015bbc:	b21b      	sxth	r3, r3
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	dc13      	bgt.n	8015bea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015bc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015bc4:	a912      	add	r1, sp, #72	; 0x48
 8015bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	9206      	str	r2, [sp, #24]
 8015bce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015bd0:	9500      	str	r5, [sp, #0]
 8015bd2:	9205      	str	r2, [sp, #20]
 8015bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bd6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015bda:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015bdc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015be0:	aa49      	add	r2, sp, #292	; 0x124
 8015be2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015be6:	4623      	mov	r3, r4
 8015be8:	47c8      	blx	r9
 8015bea:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015bee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015bf2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bfa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015bfe:	68a1      	ldr	r1, [r4, #8]
 8015c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c04:	ed94 6a08 	vldr	s12, [r4, #32]
 8015c08:	edd4 6a07 	vldr	s13, [r4, #28]
 8015c0c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015c10:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015c14:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015c18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015c1c:	edc4 6a07 	vstr	s13, [r4, #28]
 8015c20:	441a      	add	r2, r3
 8015c22:	6963      	ldr	r3, [r4, #20]
 8015c24:	3301      	adds	r3, #1
 8015c26:	6022      	str	r2, [r4, #0]
 8015c28:	6163      	str	r3, [r4, #20]
 8015c2a:	69a3      	ldr	r3, [r4, #24]
 8015c2c:	3b01      	subs	r3, #1
 8015c2e:	61a3      	str	r3, [r4, #24]
 8015c30:	6923      	ldr	r3, [r4, #16]
 8015c32:	440b      	add	r3, r1
 8015c34:	68e1      	ldr	r1, [r4, #12]
 8015c36:	428b      	cmp	r3, r1
 8015c38:	6123      	str	r3, [r4, #16]
 8015c3a:	db15      	blt.n	8015c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015c3c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015c40:	3201      	adds	r2, #1
 8015c42:	1a5b      	subs	r3, r3, r1
 8015c44:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015c48:	6022      	str	r2, [r4, #0]
 8015c4a:	6123      	str	r3, [r4, #16]
 8015c4c:	edc4 6a07 	vstr	s13, [r4, #28]
 8015c50:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015c54:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015c58:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015c5c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c64:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015c68:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015c6c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015c70:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c78:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015c7c:	68a9      	ldr	r1, [r5, #8]
 8015c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c82:	ed95 6a08 	vldr	s12, [r5, #32]
 8015c86:	edd5 6a07 	vldr	s13, [r5, #28]
 8015c8a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015c8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015c92:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015c96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c9a:	edc5 6a07 	vstr	s13, [r5, #28]
 8015c9e:	441a      	add	r2, r3
 8015ca0:	696b      	ldr	r3, [r5, #20]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	602a      	str	r2, [r5, #0]
 8015ca6:	616b      	str	r3, [r5, #20]
 8015ca8:	69ab      	ldr	r3, [r5, #24]
 8015caa:	3b01      	subs	r3, #1
 8015cac:	61ab      	str	r3, [r5, #24]
 8015cae:	692b      	ldr	r3, [r5, #16]
 8015cb0:	440b      	add	r3, r1
 8015cb2:	68e9      	ldr	r1, [r5, #12]
 8015cb4:	428b      	cmp	r3, r1
 8015cb6:	612b      	str	r3, [r5, #16]
 8015cb8:	db15      	blt.n	8015ce6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015cba:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015cbe:	3201      	adds	r2, #1
 8015cc0:	1a5b      	subs	r3, r3, r1
 8015cc2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015cc6:	602a      	str	r2, [r5, #0]
 8015cc8:	612b      	str	r3, [r5, #16]
 8015cca:	edc5 6a07 	vstr	s13, [r5, #28]
 8015cce:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015cd2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015cd6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015cda:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ce2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015ce6:	3f01      	subs	r7, #1
 8015ce8:	e757      	b.n	8015b9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015cea:	ad39      	add	r5, sp, #228	; 0xe4
 8015cec:	ac19      	add	r4, sp, #100	; 0x64
 8015cee:	e72d      	b.n	8015b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	e744      	b.n	8015b7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015cf8:	469e      	mov	lr, r3
 8015cfa:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015cfe:	461f      	mov	r7, r3
 8015d00:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015d04:	f04f 0900 	mov.w	r9, #0
 8015d08:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015d0c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015d10:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015d14:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015d18:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015d1c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015d1e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015d22:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015d26:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015d2a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015d2e:	960e      	str	r6, [sp, #56]	; 0x38
 8015d30:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015d34:	2f00      	cmp	r7, #0
 8015d36:	d146      	bne.n	8015dc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015d38:	449c      	add	ip, r3
 8015d3a:	1ad7      	subs	r7, r2, r3
 8015d3c:	f1b9 0f00 	cmp.w	r9, #0
 8015d40:	d009      	beq.n	8015d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015d42:	9039      	str	r0, [sp, #228]	; 0xe4
 8015d44:	913d      	str	r1, [sp, #244]	; 0xf4
 8015d46:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015d4a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015d4e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8015d52:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8015d56:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015d58:	f04f 0800 	mov.w	r8, #0
 8015d5c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015d60:	910e      	str	r1, [sp, #56]	; 0x38
 8015d62:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015d66:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015d6a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015d6e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015d72:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015d76:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015d7a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015d7e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015d82:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015d86:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015d8a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015d8e:	f1be 0f00 	cmp.w	lr, #0
 8015d92:	d030      	beq.n	8015df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015d94:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015d96:	4450      	add	r0, sl
 8015d98:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015d9c:	4431      	add	r1, r6
 8015d9e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015da2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015da6:	4549      	cmp	r1, r9
 8015da8:	db08      	blt.n	8015dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015daa:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015dae:	3001      	adds	r0, #1
 8015db0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015db4:	eba1 0109 	sub.w	r1, r1, r9
 8015db8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015dbc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015dc0:	f04f 0801 	mov.w	r8, #1
 8015dc4:	e7e3      	b.n	8015d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015dc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015dc8:	4450      	add	r0, sl
 8015dca:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015dce:	4431      	add	r1, r6
 8015dd0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015dd4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015dd8:	4541      	cmp	r1, r8
 8015dda:	db08      	blt.n	8015dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015ddc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015de0:	3001      	adds	r0, #1
 8015de2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015de6:	eba1 0108 	sub.w	r1, r1, r8
 8015dea:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015dee:	3f01      	subs	r7, #1
 8015df0:	f04f 0901 	mov.w	r9, #1
 8015df4:	e79e      	b.n	8015d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015df6:	449c      	add	ip, r3
 8015df8:	1aff      	subs	r7, r7, r3
 8015dfa:	f1b8 0f00 	cmp.w	r8, #0
 8015dfe:	d009      	beq.n	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015e00:	9019      	str	r0, [sp, #100]	; 0x64
 8015e02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015e06:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015e0a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015e0e:	911d      	str	r1, [sp, #116]	; 0x74
 8015e10:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015e14:	1ad2      	subs	r2, r2, r3
 8015e16:	e6b5      	b.n	8015b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015e18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	b923      	cbnz	r3, 8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015e1e:	4b04      	ldr	r3, [pc, #16]	; (8015e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015e20:	6818      	ldr	r0, [r3, #0]
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e26:	4798      	blx	r3
 8015e28:	b05b      	add	sp, #364	; 0x16c
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	bf00      	nop
 8015e30:	24006a3c 	.word	0x24006a3c

08015e34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015e34:	b570      	push	{r4, r5, r6, lr}
 8015e36:	4604      	mov	r4, r0
 8015e38:	2500      	movs	r5, #0
 8015e3a:	9805      	ldr	r0, [sp, #20]
 8015e3c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015e40:	6061      	str	r1, [r4, #4]
 8015e42:	8263      	strh	r3, [r4, #18]
 8015e44:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015e48:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015e4c:	8025      	strh	r5, [r4, #0]
 8015e4e:	7221      	strb	r1, [r4, #8]
 8015e50:	7266      	strb	r6, [r4, #9]
 8015e52:	60e0      	str	r0, [r4, #12]
 8015e54:	8222      	strh	r2, [r4, #16]
 8015e56:	82a3      	strh	r3, [r4, #20]
 8015e58:	82e5      	strh	r5, [r4, #22]
 8015e5a:	8325      	strh	r5, [r4, #24]
 8015e5c:	8365      	strh	r5, [r4, #26]
 8015e5e:	83a5      	strh	r5, [r4, #28]
 8015e60:	83e5      	strh	r5, [r4, #30]
 8015e62:	8425      	strh	r5, [r4, #32]
 8015e64:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8015e68:	b32e      	cbz	r6, 8015eb6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e6a:	6803      	ldr	r3, [r0, #0]
 8015e6c:	695b      	ldr	r3, [r3, #20]
 8015e6e:	4798      	blx	r3
 8015e70:	4606      	mov	r6, r0
 8015e72:	b300      	cbz	r0, 8015eb6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e74:	68e0      	ldr	r0, [r4, #12]
 8015e76:	4631      	mov	r1, r6
 8015e78:	6803      	ldr	r3, [r0, #0]
 8015e7a:	68db      	ldr	r3, [r3, #12]
 8015e7c:	4798      	blx	r3
 8015e7e:	4605      	mov	r5, r0
 8015e80:	b1c8      	cbz	r0, 8015eb6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e82:	7b43      	ldrb	r3, [r0, #13]
 8015e84:	7a82      	ldrb	r2, [r0, #10]
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e8c:	4313      	orrs	r3, r2
 8015e8e:	8423      	strh	r3, [r4, #32]
 8015e90:	7a63      	ldrb	r3, [r4, #9]
 8015e92:	2b06      	cmp	r3, #6
 8015e94:	d10f      	bne.n	8015eb6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015e96:	68e0      	ldr	r0, [r4, #12]
 8015e98:	462a      	mov	r2, r5
 8015e9a:	4631      	mov	r1, r6
 8015e9c:	6803      	ldr	r3, [r0, #0]
 8015e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ea0:	4798      	blx	r3
 8015ea2:	7b6b      	ldrb	r3, [r5, #13]
 8015ea4:	005b      	lsls	r3, r3, #1
 8015ea6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015eaa:	7aab      	ldrb	r3, [r5, #10]
 8015eac:	4313      	orrs	r3, r2
 8015eae:	4418      	add	r0, r3
 8015eb0:	8c23      	ldrh	r3, [r4, #32]
 8015eb2:	4418      	add	r0, r3
 8015eb4:	8420      	strh	r0, [r4, #32]
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	bd70      	pop	{r4, r5, r6, pc}

08015eba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ebe:	2400      	movs	r4, #0
 8015ec0:	b085      	sub	sp, #20
 8015ec2:	4681      	mov	r9, r0
 8015ec4:	4688      	mov	r8, r1
 8015ec6:	4692      	mov	sl, r2
 8015ec8:	469b      	mov	fp, r3
 8015eca:	4627      	mov	r7, r4
 8015ecc:	4625      	mov	r5, r4
 8015ece:	4626      	mov	r6, r4
 8015ed0:	4554      	cmp	r4, sl
 8015ed2:	da2a      	bge.n	8015f2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	9303      	str	r3, [sp, #12]
 8015ed8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015edc:	429d      	cmp	r5, r3
 8015ede:	d004      	beq.n	8015eea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015ee0:	f242 030b 	movw	r3, #8203	; 0x200b
 8015ee4:	429d      	cmp	r5, r3
 8015ee6:	bf18      	it	ne
 8015ee8:	462f      	movne	r7, r5
 8015eea:	ab03      	add	r3, sp, #12
 8015eec:	4642      	mov	r2, r8
 8015eee:	4659      	mov	r1, fp
 8015ef0:	4648      	mov	r0, r9
 8015ef2:	f002 ff79 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	b1b8      	cbz	r0, 8015f2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015efa:	280a      	cmp	r0, #10
 8015efc:	d015      	beq.n	8015f2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015efe:	9a03      	ldr	r2, [sp, #12]
 8015f00:	b18a      	cbz	r2, 8015f26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015f02:	7b50      	ldrb	r0, [r2, #13]
 8015f04:	4639      	mov	r1, r7
 8015f06:	7a93      	ldrb	r3, [r2, #10]
 8015f08:	0040      	lsls	r0, r0, #1
 8015f0a:	8895      	ldrh	r5, [r2, #4]
 8015f0c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015f10:	4303      	orrs	r3, r0
 8015f12:	4640      	mov	r0, r8
 8015f14:	9301      	str	r3, [sp, #4]
 8015f16:	f8d8 3000 	ldr.w	r3, [r8]
 8015f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f1c:	4798      	blx	r3
 8015f1e:	9b01      	ldr	r3, [sp, #4]
 8015f20:	4418      	add	r0, r3
 8015f22:	4406      	add	r6, r0
 8015f24:	b2b6      	uxth	r6, r6
 8015f26:	3401      	adds	r4, #1
 8015f28:	e7d2      	b.n	8015ed0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015f2a:	4630      	mov	r0, r6
 8015f2c:	b005      	add	sp, #20
 8015f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015f32:	2a02      	cmp	r2, #2
 8015f34:	b530      	push	{r4, r5, lr}
 8015f36:	d011      	beq.n	8015f5c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015f38:	2a03      	cmp	r2, #3
 8015f3a:	d01c      	beq.n	8015f76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015f3c:	2a01      	cmp	r2, #1
 8015f3e:	d10c      	bne.n	8015f5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015f40:	888b      	ldrh	r3, [r1, #4]
 8015f42:	8801      	ldrh	r1, [r0, #0]
 8015f44:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015f48:	1a5b      	subs	r3, r3, r1
 8015f4a:	8844      	ldrh	r4, [r0, #2]
 8015f4c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015f50:	1a9b      	subs	r3, r3, r2
 8015f52:	8004      	strh	r4, [r0, #0]
 8015f54:	8081      	strh	r1, [r0, #4]
 8015f56:	8043      	strh	r3, [r0, #2]
 8015f58:	80c2      	strh	r2, [r0, #6]
 8015f5a:	bd30      	pop	{r4, r5, pc}
 8015f5c:	88cb      	ldrh	r3, [r1, #6]
 8015f5e:	8842      	ldrh	r2, [r0, #2]
 8015f60:	1a9b      	subs	r3, r3, r2
 8015f62:	88c2      	ldrh	r2, [r0, #6]
 8015f64:	1a9b      	subs	r3, r3, r2
 8015f66:	888a      	ldrh	r2, [r1, #4]
 8015f68:	8801      	ldrh	r1, [r0, #0]
 8015f6a:	8043      	strh	r3, [r0, #2]
 8015f6c:	1a52      	subs	r2, r2, r1
 8015f6e:	8881      	ldrh	r1, [r0, #4]
 8015f70:	1a52      	subs	r2, r2, r1
 8015f72:	8002      	strh	r2, [r0, #0]
 8015f74:	e7f1      	b.n	8015f5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015f76:	88cb      	ldrh	r3, [r1, #6]
 8015f78:	8841      	ldrh	r1, [r0, #2]
 8015f7a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015f7e:	1a5b      	subs	r3, r3, r1
 8015f80:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015f84:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015f88:	1a9b      	subs	r3, r3, r2
 8015f8a:	8045      	strh	r5, [r0, #2]
 8015f8c:	8082      	strh	r2, [r0, #4]
 8015f8e:	8003      	strh	r3, [r0, #0]
 8015f90:	80c4      	strh	r4, [r0, #6]
 8015f92:	e7e2      	b.n	8015f5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f98:	b09f      	sub	sp, #124	; 0x7c
 8015f9a:	9116      	str	r1, [sp, #88]	; 0x58
 8015f9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015fa0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015fa2:	8809      	ldrh	r1, [r1, #0]
 8015fa4:	889b      	ldrh	r3, [r3, #4]
 8015fa6:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8015faa:	440b      	add	r3, r1
 8015fac:	9212      	str	r2, [sp, #72]	; 0x48
 8015fae:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8015fb2:	b21b      	sxth	r3, r3
 8015fb4:	9011      	str	r0, [sp, #68]	; 0x44
 8015fb6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015fba:	9310      	str	r3, [sp, #64]	; 0x40
 8015fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8015fc0:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8015fc4:	7b19      	ldrb	r1, [r3, #12]
 8015fc6:	7adb      	ldrb	r3, [r3, #11]
 8015fc8:	9114      	str	r1, [sp, #80]	; 0x50
 8015fca:	9315      	str	r3, [sp, #84]	; 0x54
 8015fcc:	2a00      	cmp	r2, #0
 8015fce:	d06a      	beq.n	80160a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015fd0:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015fd4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015fd6:	2b06      	cmp	r3, #6
 8015fd8:	bf14      	ite	ne
 8015fda:	2301      	movne	r3, #1
 8015fdc:	2302      	moveq	r3, #2
 8015fde:	4413      	add	r3, r2
 8015fe0:	f04f 0900 	mov.w	r9, #0
 8015fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fe6:	464c      	mov	r4, r9
 8015fe8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015fec:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015ff0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	f280 808f 	bge.w	8016118 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8016000:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8016004:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016008:	429c      	cmp	r4, r3
 801600a:	d006      	beq.n	801601a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801600c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801600e:	f242 020b 	movw	r2, #8203	; 0x200b
 8016012:	4294      	cmp	r4, r2
 8016014:	bf18      	it	ne
 8016016:	4623      	movne	r3, r4
 8016018:	930d      	str	r3, [sp, #52]	; 0x34
 801601a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801601c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801601e:	f8d8 2000 	ldr.w	r2, [r8]
 8016022:	428b      	cmp	r3, r1
 8016024:	db41      	blt.n	80160aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8016026:	6813      	ldr	r3, [r2, #0]
 8016028:	4610      	mov	r0, r2
 801602a:	695b      	ldr	r3, [r3, #20]
 801602c:	4798      	blx	r3
 801602e:	4604      	mov	r4, r0
 8016030:	f8d8 0000 	ldr.w	r0, [r8]
 8016034:	aa1d      	add	r2, sp, #116	; 0x74
 8016036:	4621      	mov	r1, r4
 8016038:	6803      	ldr	r3, [r0, #0]
 801603a:	689d      	ldr	r5, [r3, #8]
 801603c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016040:	47a8      	blx	r5
 8016042:	901c      	str	r0, [sp, #112]	; 0x70
 8016044:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016048:	429c      	cmp	r4, r3
 801604a:	f000 80ec 	beq.w	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801604e:	f242 030b 	movw	r3, #8203	; 0x200b
 8016052:	429c      	cmp	r4, r3
 8016054:	f000 80e7 	beq.w	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8016058:	2c00      	cmp	r4, #0
 801605a:	f000 80f9 	beq.w	8016250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801605e:	2c0a      	cmp	r4, #10
 8016060:	d060      	beq.n	8016124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8016062:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016064:	b36a      	cbz	r2, 80160c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8016066:	8894      	ldrh	r4, [r2, #4]
 8016068:	f1bb 0f00 	cmp.w	fp, #0
 801606c:	d03b      	beq.n	80160e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801606e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8016072:	f1bb 0f01 	cmp.w	fp, #1
 8016076:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801607a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801607e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8016082:	ea49 0903 	orr.w	r9, r9, r3
 8016086:	d134      	bne.n	80160f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8016088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801608a:	eba6 0609 	sub.w	r6, r6, r9
 801608e:	2b00      	cmp	r3, #0
 8016090:	d14f      	bne.n	8016132 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8016092:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016094:	eb09 0306 	add.w	r3, r9, r6
 8016098:	4413      	add	r3, r2
 801609a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801609c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160a0:	4293      	cmp	r3, r2
 80160a2:	da51      	bge.n	8016148 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80160a4:	e038      	b.n	8016118 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80160a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160a8:	e79a      	b.n	8015fe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80160aa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80160ae:	4659      	mov	r1, fp
 80160b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	ab1d      	add	r3, sp, #116	; 0x74
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	ab1c      	add	r3, sp, #112	; 0x70
 80160ba:	f002 fede 	bl	8018e7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80160be:	4604      	mov	r4, r0
 80160c0:	e7c0      	b.n	8016044 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80160c2:	f8d8 0000 	ldr.w	r0, [r8]
 80160c6:	6803      	ldr	r3, [r0, #0]
 80160c8:	691b      	ldr	r3, [r3, #16]
 80160ca:	4798      	blx	r3
 80160cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80160d0:	4298      	cmp	r0, r3
 80160d2:	f000 80a8 	beq.w	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80160d6:	f242 030b 	movw	r3, #8203	; 0x200b
 80160da:	4298      	cmp	r0, r3
 80160dc:	f000 80a3 	beq.w	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80160e0:	f1bb 0f00 	cmp.w	fp, #0
 80160e4:	d100      	bne.n	80160e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80160e6:	444e      	add	r6, r9
 80160e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80160ea:	2a00      	cmp	r2, #0
 80160ec:	d1bf      	bne.n	801606e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80160ee:	4691      	mov	r9, r2
 80160f0:	e099      	b.n	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80160f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f000 80ad 	beq.w	8016254 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80160fa:	f1bb 0f00 	cmp.w	fp, #0
 80160fe:	d118      	bne.n	8016132 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8016100:	f8d8 0000 	ldr.w	r0, [r8]
 8016104:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016106:	6803      	ldr	r3, [r0, #0]
 8016108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801610a:	4798      	blx	r3
 801610c:	4406      	add	r6, r0
 801610e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016110:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016112:	1af3      	subs	r3, r6, r3
 8016114:	4293      	cmp	r3, r2
 8016116:	dd17      	ble.n	8016148 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016118:	2c00      	cmp	r4, #0
 801611a:	f000 8099 	beq.w	8016250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801611e:	2c0a      	cmp	r4, #10
 8016120:	f040 8087 	bne.w	8016232 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8016124:	240a      	movs	r4, #10
 8016126:	fab4 f084 	clz	r0, r4
 801612a:	0940      	lsrs	r0, r0, #5
 801612c:	b01f      	add	sp, #124	; 0x7c
 801612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016132:	f8d8 0000 	ldr.w	r0, [r8]
 8016136:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016138:	6803      	ldr	r3, [r0, #0]
 801613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801613c:	4798      	blx	r3
 801613e:	f1bb 0f01 	cmp.w	fp, #1
 8016142:	eba6 0600 	sub.w	r6, r6, r0
 8016146:	d0a4      	beq.n	8016092 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016148:	981c      	ldr	r0, [sp, #112]	; 0x70
 801614a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801614c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8016150:	f9b3 7000 	ldrsh.w	r7, [r3]
 8016154:	7b43      	ldrb	r3, [r0, #13]
 8016156:	4431      	add	r1, r6
 8016158:	015b      	lsls	r3, r3, #5
 801615a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801615e:	7983      	ldrb	r3, [r0, #6]
 8016160:	4313      	orrs	r3, r2
 8016162:	440b      	add	r3, r1
 8016164:	42bb      	cmp	r3, r7
 8016166:	db5e      	blt.n	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8016168:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801616a:	4299      	cmp	r1, r3
 801616c:	da5b      	bge.n	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801616e:	f8d8 0000 	ldr.w	r0, [r8]
 8016172:	42b7      	cmp	r7, r6
 8016174:	6803      	ldr	r3, [r0, #0]
 8016176:	bfcc      	ite	gt
 8016178:	1bbf      	subgt	r7, r7, r6
 801617a:	2700      	movle	r7, #0
 801617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801617e:	bfc8      	it	gt
 8016180:	b2bf      	uxthgt	r7, r7
 8016182:	4798      	blx	r3
 8016184:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016186:	7b5a      	ldrb	r2, [r3, #13]
 8016188:	00d1      	lsls	r1, r2, #3
 801618a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801618e:	7a19      	ldrb	r1, [r3, #8]
 8016190:	4329      	orrs	r1, r5
 8016192:	0655      	lsls	r5, r2, #25
 8016194:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8016196:	bf48      	it	mi
 8016198:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801619c:	4405      	add	r5, r0
 801619e:	bf48      	it	mi
 80161a0:	b209      	sxthmi	r1, r1
 80161a2:	1a6d      	subs	r5, r5, r1
 80161a4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80161a6:	b2ad      	uxth	r5, r5
 80161a8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80161ac:	fa0f fa85 	sxth.w	sl, r5
 80161b0:	4551      	cmp	r1, sl
 80161b2:	dd3c      	ble.n	801622e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80161b4:	0112      	lsls	r2, r2, #4
 80161b6:	79d8      	ldrb	r0, [r3, #7]
 80161b8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80161bc:	4302      	orrs	r2, r0
 80161be:	4492      	add	sl, r2
 80161c0:	4551      	cmp	r1, sl
 80161c2:	dc30      	bgt.n	8016226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80161c4:	1b4d      	subs	r5, r1, r5
 80161c6:	468a      	mov	sl, r1
 80161c8:	b22d      	sxth	r5, r5
 80161ca:	9319      	str	r3, [sp, #100]	; 0x64
 80161cc:	b2ad      	uxth	r5, r5
 80161ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161d0:	f8d8 0000 	ldr.w	r0, [r8]
 80161d4:	681a      	ldr	r2, [r3, #0]
 80161d6:	6801      	ldr	r1, [r0, #0]
 80161d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80161da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80161dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80161de:	9218      	str	r2, [sp, #96]	; 0x60
 80161e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80161e2:	4788      	blx	r1
 80161e4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80161e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80161ec:	f898 100e 	ldrb.w	r1, [r8, #14]
 80161f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161f2:	910a      	str	r1, [sp, #40]	; 0x28
 80161f4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80161f8:	9109      	str	r1, [sp, #36]	; 0x24
 80161fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80161fe:	9305      	str	r3, [sp, #20]
 8016200:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016202:	9206      	str	r2, [sp, #24]
 8016204:	9304      	str	r3, [sp, #16]
 8016206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016208:	f8cd a004 	str.w	sl, [sp, #4]
 801620c:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8016210:	4437      	add	r7, r6
 8016212:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016214:	b23f      	sxth	r7, r7
 8016216:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801621a:	9700      	str	r7, [sp, #0]
 801621c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	47a8      	blx	r5
 8016226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016228:	3301      	adds	r3, #1
 801622a:	930e      	str	r3, [sp, #56]	; 0x38
 801622c:	e6e0      	b.n	8015ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801622e:	2500      	movs	r5, #0
 8016230:	e7cb      	b.n	80161ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8016232:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016234:	3501      	adds	r5, #1
 8016236:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016238:	429d      	cmp	r5, r3
 801623a:	f6bf af74 	bge.w	8016126 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801623e:	4659      	mov	r1, fp
 8016240:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016242:	f7ef f95b 	bl	80054fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016246:	4604      	mov	r4, r0
 8016248:	b110      	cbz	r0, 8016250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801624a:	280a      	cmp	r0, #10
 801624c:	d1f2      	bne.n	8016234 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801624e:	e769      	b.n	8016124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8016250:	2400      	movs	r4, #0
 8016252:	e768      	b.n	8016126 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8016254:	f1bb 0f00 	cmp.w	fp, #0
 8016258:	f43f af59 	beq.w	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801625c:	e774      	b.n	8016148 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801625e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801625e:	b530      	push	{r4, r5, lr}
 8016260:	8ac4      	ldrh	r4, [r0, #22]
 8016262:	8b45      	ldrh	r5, [r0, #26]
 8016264:	8343      	strh	r3, [r0, #26]
 8016266:	442c      	add	r4, r5
 8016268:	1ae4      	subs	r4, r4, r3
 801626a:	8b83      	ldrh	r3, [r0, #28]
 801626c:	82c4      	strh	r4, [r0, #22]
 801626e:	8b04      	ldrh	r4, [r0, #24]
 8016270:	4422      	add	r2, r4
 8016272:	440c      	add	r4, r1
 8016274:	1a59      	subs	r1, r3, r1
 8016276:	83c2      	strh	r2, [r0, #30]
 8016278:	8304      	strh	r4, [r0, #24]
 801627a:	8381      	strh	r1, [r0, #28]
 801627c:	bd30      	pop	{r4, r5, pc}

0801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801627e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016282:	4604      	mov	r4, r0
 8016284:	8a47      	ldrh	r7, [r0, #18]
 8016286:	68c0      	ldr	r0, [r0, #12]
 8016288:	b085      	sub	sp, #20
 801628a:	6803      	ldr	r3, [r0, #0]
 801628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801628e:	4798      	blx	r3
 8016290:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016294:	7a63      	ldrb	r3, [r4, #9]
 8016296:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801629a:	3b01      	subs	r3, #1
 801629c:	42b7      	cmp	r7, r6
 801629e:	bfac      	ite	ge
 80162a0:	f04f 0900 	movge.w	r9, #0
 80162a4:	f04f 0901 	movlt.w	r9, #1
 80162a8:	2b05      	cmp	r3, #5
 80162aa:	d804      	bhi.n	80162b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80162ac:	e8df f003 	tbb	[pc, r3]
 80162b0:	470f0854 	.word	0x470f0854
 80162b4:	4c4c      	.short	0x4c4c
 80162b6:	2500      	movs	r5, #0
 80162b8:	46a9      	mov	r9, r5
 80162ba:	462e      	mov	r6, r5
 80162bc:	462f      	mov	r7, r5
 80162be:	e00e      	b.n	80162de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80162c0:	42b7      	cmp	r7, r6
 80162c2:	f04f 0500 	mov.w	r5, #0
 80162c6:	bfb4      	ite	lt
 80162c8:	2600      	movlt	r6, #0
 80162ca:	2601      	movge	r6, #1
 80162cc:	e7f6      	b.n	80162bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80162ce:	42b7      	cmp	r7, r6
 80162d0:	464d      	mov	r5, r9
 80162d2:	f04f 0900 	mov.w	r9, #0
 80162d6:	bfb4      	ite	lt
 80162d8:	2600      	movlt	r6, #0
 80162da:	2601      	movge	r6, #1
 80162dc:	464f      	mov	r7, r9
 80162de:	f04f 0800 	mov.w	r8, #0
 80162e2:	f8a4 8016 	strh.w	r8, [r4, #22]
 80162e6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80162ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80162ee:	2300      	movs	r3, #0
 80162f0:	9303      	str	r3, [sp, #12]
 80162f2:	8823      	ldrh	r3, [r4, #0]
 80162f4:	2b20      	cmp	r3, #32
 80162f6:	d033      	beq.n	8016360 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80162f8:	f242 010b 	movw	r1, #8203	; 0x200b
 80162fc:	1a5a      	subs	r2, r3, r1
 80162fe:	f1d2 0a00 	rsbs	sl, r2, #0
 8016302:	eb4a 0a02 	adc.w	sl, sl, r2
 8016306:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801630a:	4293      	cmp	r3, r2
 801630c:	d008      	beq.n	8016320 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801630e:	428b      	cmp	r3, r1
 8016310:	9a01      	ldr	r2, [sp, #4]
 8016312:	bf0e      	itee	eq
 8016314:	f04f 0a01 	moveq.w	sl, #1
 8016318:	461a      	movne	r2, r3
 801631a:	f04f 0a00 	movne.w	sl, #0
 801631e:	9201      	str	r2, [sp, #4]
 8016320:	ab03      	add	r3, sp, #12
 8016322:	68e2      	ldr	r2, [r4, #12]
 8016324:	7a21      	ldrb	r1, [r4, #8]
 8016326:	6860      	ldr	r0, [r4, #4]
 8016328:	f002 fd5e 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801632c:	8020      	strh	r0, [r4, #0]
 801632e:	b9d8      	cbnz	r0, 8016368 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8016330:	8ba2      	ldrh	r2, [r4, #28]
 8016332:	2300      	movs	r3, #0
 8016334:	4611      	mov	r1, r2
 8016336:	4620      	mov	r0, r4
 8016338:	f7ff ff91 	bl	801625e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801633c:	e06e      	b.n	801641c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801633e:	2500      	movs	r5, #0
 8016340:	2701      	movs	r7, #1
 8016342:	46a9      	mov	r9, r5
 8016344:	462e      	mov	r6, r5
 8016346:	e7ca      	b.n	80162de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016348:	42b7      	cmp	r7, r6
 801634a:	f04f 0500 	mov.w	r5, #0
 801634e:	bfb4      	ite	lt
 8016350:	2700      	movlt	r7, #0
 8016352:	2701      	movge	r7, #1
 8016354:	462e      	mov	r6, r5
 8016356:	e7c2      	b.n	80162de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016358:	2500      	movs	r5, #0
 801635a:	2601      	movs	r6, #1
 801635c:	46a9      	mov	r9, r5
 801635e:	e7ad      	b.n	80162bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8016360:	9301      	str	r3, [sp, #4]
 8016362:	f04f 0a01 	mov.w	sl, #1
 8016366:	e7db      	b.n	8016320 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016368:	8b63      	ldrh	r3, [r4, #26]
 801636a:	280a      	cmp	r0, #10
 801636c:	f103 0301 	add.w	r3, r3, #1
 8016370:	8363      	strh	r3, [r4, #26]
 8016372:	d0dd      	beq.n	8016330 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8016374:	9a03      	ldr	r2, [sp, #12]
 8016376:	bb62      	cbnz	r2, 80163d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8016378:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801637c:	4298      	cmp	r0, r3
 801637e:	d003      	beq.n	8016388 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016380:	f242 030b 	movw	r3, #8203	; 0x200b
 8016384:	4298      	cmp	r0, r3
 8016386:	d1b2      	bne.n	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016388:	8823      	ldrh	r3, [r4, #0]
 801638a:	8ba1      	ldrh	r1, [r4, #28]
 801638c:	2b20      	cmp	r3, #32
 801638e:	d003      	beq.n	8016398 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8016390:	f242 000b 	movw	r0, #8203	; 0x200b
 8016394:	4283      	cmp	r3, r0
 8016396:	d131      	bne.n	80163fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016398:	f1ba 0f00 	cmp.w	sl, #0
 801639c:	bf0a      	itet	eq
 801639e:	4688      	moveq	r8, r1
 80163a0:	4650      	movne	r0, sl
 80163a2:	2001      	moveq	r0, #1
 80163a4:	440a      	add	r2, r1
 80163a6:	8b23      	ldrh	r3, [r4, #24]
 80163a8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80163ac:	b292      	uxth	r2, r2
 80163ae:	83a2      	strh	r2, [r4, #28]
 80163b0:	4413      	add	r3, r2
 80163b2:	f1b9 0f00 	cmp.w	r9, #0
 80163b6:	d102      	bne.n	80163be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80163b8:	2d00      	cmp	r5, #0
 80163ba:	d042      	beq.n	8016442 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80163bc:	b300      	cbz	r0, 8016400 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80163be:	8c21      	ldrh	r1, [r4, #32]
 80163c0:	4419      	add	r1, r3
 80163c2:	458c      	cmp	ip, r1
 80163c4:	da37      	bge.n	8016436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80163c6:	8ae1      	ldrh	r1, [r4, #22]
 80163c8:	2900      	cmp	r1, #0
 80163ca:	d034      	beq.n	8016436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80163cc:	4563      	cmp	r3, ip
 80163ce:	dd8e      	ble.n	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80163d0:	e01d      	b.n	801640e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80163d2:	8893      	ldrh	r3, [r2, #4]
 80163d4:	9901      	ldr	r1, [sp, #4]
 80163d6:	8023      	strh	r3, [r4, #0]
 80163d8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80163dc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80163e0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 80163e4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80163e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80163ec:	68e0      	ldr	r0, [r4, #12]
 80163ee:	6803      	ldr	r3, [r0, #0]
 80163f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163f2:	4798      	blx	r3
 80163f4:	eb0b 0200 	add.w	r2, fp, r0
 80163f8:	b292      	uxth	r2, r2
 80163fa:	e7c5      	b.n	8016388 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80163fc:	2000      	movs	r0, #0
 80163fe:	e7d1      	b.n	80163a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8016400:	4563      	cmp	r3, ip
 8016402:	f77f af74 	ble.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016406:	8ae3      	ldrh	r3, [r4, #22]
 8016408:	2b00      	cmp	r3, #0
 801640a:	f43f af70 	beq.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801640e:	2301      	movs	r3, #1
 8016410:	8c22      	ldrh	r2, [r4, #32]
 8016412:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8016416:	8be3      	ldrh	r3, [r4, #30]
 8016418:	4413      	add	r3, r2
 801641a:	83e3      	strh	r3, [r4, #30]
 801641c:	68e0      	ldr	r0, [r4, #12]
 801641e:	6803      	ldr	r3, [r0, #0]
 8016420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016422:	4798      	blx	r3
 8016424:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016428:	4418      	add	r0, r3
 801642a:	8a63      	ldrh	r3, [r4, #18]
 801642c:	1a18      	subs	r0, r3, r0
 801642e:	8260      	strh	r0, [r4, #18]
 8016430:	b005      	add	sp, #20
 8016432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016436:	2300      	movs	r3, #0
 8016438:	4611      	mov	r1, r2
 801643a:	4620      	mov	r0, r4
 801643c:	f7ff ff0f 	bl	801625e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016440:	e755      	b.n	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016442:	4563      	cmp	r3, ip
 8016444:	dd14      	ble.n	8016470 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8016446:	b117      	cbz	r7, 801644e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8016448:	2301      	movs	r3, #1
 801644a:	460a      	mov	r2, r1
 801644c:	e772      	b.n	8016334 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801644e:	2e00      	cmp	r6, #0
 8016450:	f43f af4d 	beq.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016454:	2800      	cmp	r0, #0
 8016456:	f47f af4a 	bne.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801645a:	f1ba 0f00 	cmp.w	sl, #0
 801645e:	d002      	beq.n	8016466 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8016460:	2301      	movs	r3, #1
 8016462:	4642      	mov	r2, r8
 8016464:	e767      	b.n	8016336 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8016466:	8ae3      	ldrh	r3, [r4, #22]
 8016468:	2b00      	cmp	r3, #0
 801646a:	f43f af40 	beq.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801646e:	e7d5      	b.n	801641c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8016470:	2800      	cmp	r0, #0
 8016472:	f47f af3c 	bne.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016476:	f1ba 0f00 	cmp.w	sl, #0
 801647a:	f43f af38 	beq.w	80162ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801647e:	2301      	movs	r3, #1
 8016480:	4642      	mov	r2, r8
 8016482:	e7da      	b.n	801643a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08016484 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016486:	4605      	mov	r5, r0
 8016488:	b08f      	sub	sp, #60	; 0x3c
 801648a:	4617      	mov	r7, r2
 801648c:	461c      	mov	r4, r3
 801648e:	460e      	mov	r6, r1
 8016490:	b1d1      	cbz	r1, 80164c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	4620      	mov	r0, r4
 8016496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016498:	4798      	blx	r3
 801649a:	4240      	negs	r0, r0
 801649c:	9603      	str	r6, [sp, #12]
 801649e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164a2:	b200      	sxth	r0, r0
 80164a4:	9700      	str	r7, [sp, #0]
 80164a6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80164aa:	4629      	mov	r1, r5
 80164ac:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80164b0:	2401      	movs	r4, #1
 80164b2:	a805      	add	r0, sp, #20
 80164b4:	f7ff fcbe 	bl	8015e34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80164b8:	a805      	add	r0, sp, #20
 80164ba:	f7ff fee0 	bl	801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80164be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80164c2:	b163      	cbz	r3, 80164de <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80164c4:	3401      	adds	r4, #1
 80164c6:	e7f7      	b.n	80164b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80164c8:	2401      	movs	r4, #1
 80164ca:	f002 fd59 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80164ce:	280a      	cmp	r0, #10
 80164d0:	4628      	mov	r0, r5
 80164d2:	bf08      	it	eq
 80164d4:	3401      	addeq	r4, #1
 80164d6:	f002 fd53 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d1f7      	bne.n	80164ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80164de:	b2a0      	uxth	r0, r4
 80164e0:	b00f      	add	sp, #60	; 0x3c
 80164e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80164e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e8:	b0e3      	sub	sp, #396	; 0x18c
 80164ea:	461c      	mov	r4, r3
 80164ec:	4683      	mov	fp, r0
 80164ee:	4688      	mov	r8, r1
 80164f0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	f000 8112 	beq.w	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80164f8:	6823      	ldr	r3, [r4, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	f000 810e 	beq.w	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016500:	7ba3      	ldrb	r3, [r4, #14]
 8016502:	2b00      	cmp	r3, #0
 8016504:	f000 810a 	beq.w	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016508:	ad0a      	add	r5, sp, #40	; 0x28
 801650a:	6810      	ldr	r0, [r2, #0]
 801650c:	6851      	ldr	r1, [r2, #4]
 801650e:	462b      	mov	r3, r5
 8016510:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016514:	c303      	stmia	r3!, {r0, r1}
 8016516:	2100      	movs	r1, #0
 8016518:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801651c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016520:	4628      	mov	r0, r5
 8016522:	910c      	str	r1, [sp, #48]	; 0x30
 8016524:	a90c      	add	r1, sp, #48	; 0x30
 8016526:	79a2      	ldrb	r2, [r4, #6]
 8016528:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801652c:	f7ff fd01 	bl	8015f32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016530:	a90c      	add	r1, sp, #48	; 0x30
 8016532:	79a2      	ldrb	r2, [r4, #6]
 8016534:	4608      	mov	r0, r1
 8016536:	f7ff fcfc 	bl	8015f32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801653a:	a817      	add	r0, sp, #92	; 0x5c
 801653c:	f002 f8f4 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8016540:	6820      	ldr	r0, [r4, #0]
 8016542:	6803      	ldr	r3, [r0, #0]
 8016544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016546:	4798      	blx	r3
 8016548:	4606      	mov	r6, r0
 801654a:	6820      	ldr	r0, [r4, #0]
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016550:	4798      	blx	r3
 8016552:	4633      	mov	r3, r6
 8016554:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8016556:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8016558:	9000      	str	r0, [sp, #0]
 801655a:	a817      	add	r0, sp, #92	; 0x5c
 801655c:	f002 f93f 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	f894 a004 	ldrb.w	sl, [r4, #4]
 8016566:	6803      	ldr	r3, [r0, #0]
 8016568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801656a:	4798      	blx	r3
 801656c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	4607      	mov	r7, r0
 8016574:	4406      	add	r6, r0
 8016576:	a830      	add	r0, sp, #192	; 0xc0
 8016578:	f893 9009 	ldrb.w	r9, [r3, #9]
 801657c:	f002 f8d4 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8016580:	7c23      	ldrb	r3, [r4, #16]
 8016582:	b17b      	cbz	r3, 80165a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8016584:	6820      	ldr	r0, [r4, #0]
 8016586:	6803      	ldr	r3, [r0, #0]
 8016588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801658a:	4798      	blx	r3
 801658c:	9009      	str	r0, [sp, #36]	; 0x24
 801658e:	6820      	ldr	r0, [r4, #0]
 8016590:	6802      	ldr	r2, [r0, #0]
 8016592:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8016594:	4790      	blx	r2
 8016596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016598:	9000      	str	r0, [sp, #0]
 801659a:	a830      	add	r0, sp, #192	; 0xc0
 801659c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801659e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80165a0:	f002 f91d 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80165a4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80165a8:	a80e      	add	r0, sp, #56	; 0x38
 80165aa:	7be2      	ldrb	r2, [r4, #15]
 80165ac:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80165b0:	1a8a      	subs	r2, r1, r2
 80165b2:	7c21      	ldrb	r1, [r4, #16]
 80165b4:	9103      	str	r1, [sp, #12]
 80165b6:	b292      	uxth	r2, r2
 80165b8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80165bc:	9102      	str	r1, [sp, #8]
 80165be:	6821      	ldr	r1, [r4, #0]
 80165c0:	9101      	str	r1, [sp, #4]
 80165c2:	7961      	ldrb	r1, [r4, #5]
 80165c4:	9100      	str	r1, [sp, #0]
 80165c6:	a930      	add	r1, sp, #192	; 0xc0
 80165c8:	f7ff fc34 	bl	8015e34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80165cc:	2e00      	cmp	r6, #0
 80165ce:	dc5b      	bgt.n	8016688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80165d0:	af17      	add	r7, sp, #92	; 0x5c
 80165d2:	f04f 0900 	mov.w	r9, #0
 80165d6:	7c23      	ldrb	r3, [r4, #16]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f000 80b1 	beq.w	8016740 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80165de:	a80e      	add	r0, sp, #56	; 0x38
 80165e0:	f7ff fe4d 	bl	801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80165e4:	f1ba 0f00 	cmp.w	sl, #0
 80165e8:	f000 80a5 	beq.w	8016736 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80165ec:	7c23      	ldrb	r3, [r4, #16]
 80165ee:	2264      	movs	r2, #100	; 0x64
 80165f0:	4639      	mov	r1, r7
 80165f2:	a849      	add	r0, sp, #292	; 0x124
 80165f4:	9309      	str	r3, [sp, #36]	; 0x24
 80165f6:	f00c fe68 	bl	80232ca <memcpy>
 80165fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	f000 80a7 	beq.w	8016750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016602:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016606:	7922      	ldrb	r2, [r4, #4]
 8016608:	2a01      	cmp	r2, #1
 801660a:	f040 808a 	bne.w	8016722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801660e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8016612:	1ac0      	subs	r0, r0, r3
 8016614:	2302      	movs	r3, #2
 8016616:	fb90 f0f3 	sdiv	r0, r0, r3
 801661a:	b200      	sxth	r0, r0
 801661c:	7c23      	ldrb	r3, [r4, #16]
 801661e:	2b00      	cmp	r3, #0
 8016620:	f000 808b 	beq.w	801673a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016624:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8016628:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801662c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016630:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016634:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8016638:	2100      	movs	r1, #0
 801663a:	4410      	add	r0, r2
 801663c:	4642      	mov	r2, r8
 801663e:	b200      	sxth	r0, r0
 8016640:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016644:	9000      	str	r0, [sp, #0]
 8016646:	4658      	mov	r0, fp
 8016648:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801664c:	f7ff fca2 	bl	8015f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016650:	2800      	cmp	r0, #0
 8016652:	d163      	bne.n	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016654:	b2b2      	uxth	r2, r6
 8016656:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801665a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801665e:	4413      	add	r3, r2
 8016660:	1a8a      	subs	r2, r1, r2
 8016662:	b21b      	sxth	r3, r3
 8016664:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8016668:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801666c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016670:	2a00      	cmp	r2, #0
 8016672:	d153      	bne.n	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016674:	6822      	ldr	r2, [r4, #0]
 8016676:	8869      	ldrh	r1, [r5, #2]
 8016678:	7a12      	ldrb	r2, [r2, #8]
 801667a:	1a9b      	subs	r3, r3, r2
 801667c:	88ea      	ldrh	r2, [r5, #6]
 801667e:	440a      	add	r2, r1
 8016680:	b212      	sxth	r2, r2
 8016682:	4293      	cmp	r3, r2
 8016684:	dda7      	ble.n	80165d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016686:	e049      	b.n	801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016688:	7c23      	ldrb	r3, [r4, #16]
 801668a:	444f      	add	r7, r9
 801668c:	b1c3      	cbz	r3, 80166c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801668e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8016692:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016696:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801669a:	443b      	add	r3, r7
 801669c:	4293      	cmp	r3, r2
 801669e:	da97      	bge.n	80165d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80166a0:	a80e      	add	r0, sp, #56	; 0x38
 80166a2:	f7ff fdec 	bl	801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80166a6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80166aa:	3b01      	subs	r3, #1
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	454b      	cmp	r3, r9
 80166b0:	9309      	str	r3, [sp, #36]	; 0x24
 80166b2:	d021      	beq.n	80166f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80166b4:	7961      	ldrb	r1, [r4, #5]
 80166b6:	a817      	add	r0, sp, #92	; 0x5c
 80166b8:	f7ee ff20 	bl	80054fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80166bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166be:	e7f4      	b.n	80166aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80166c0:	fa1f f986 	uxth.w	r9, r6
 80166c4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80166c8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80166cc:	443b      	add	r3, r7
 80166ce:	4293      	cmp	r3, r2
 80166d0:	f6bf af7e 	bge.w	80165d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80166d4:	a817      	add	r0, sp, #92	; 0x5c
 80166d6:	f002 fc53 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80166da:	b1f8      	cbz	r0, 801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80166dc:	280a      	cmp	r0, #10
 80166de:	d1f1      	bne.n	80166c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80166e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80166e4:	444b      	add	r3, r9
 80166e6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80166ea:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80166ee:	eba3 0309 	sub.w	r3, r3, r9
 80166f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80166f6:	e7e5      	b.n	80166c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80166f8:	b2b3      	uxth	r3, r6
 80166fa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80166fe:	441a      	add	r2, r3
 8016700:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016704:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8016708:	1ad3      	subs	r3, r2, r3
 801670a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801670e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016712:	b11b      	cbz	r3, 801671c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016714:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8016718:	2b00      	cmp	r3, #0
 801671a:	d0ba      	beq.n	8016692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801671c:	b063      	add	sp, #396	; 0x18c
 801671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016722:	2a02      	cmp	r2, #2
 8016724:	d105      	bne.n	8016732 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016726:	7be2      	ldrb	r2, [r4, #15]
 8016728:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801672c:	1a80      	subs	r0, r0, r2
 801672e:	1ac0      	subs	r0, r0, r3
 8016730:	e773      	b.n	801661a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016732:	2000      	movs	r0, #0
 8016734:	e772      	b.n	801661c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016736:	7be0      	ldrb	r0, [r4, #15]
 8016738:	e770      	b.n	801661c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801673a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801673e:	e773      	b.n	8016628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016740:	f1ba 0f00 	cmp.w	sl, #0
 8016744:	d0f7      	beq.n	8016736 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016746:	2264      	movs	r2, #100	; 0x64
 8016748:	4639      	mov	r1, r7
 801674a:	a849      	add	r0, sp, #292	; 0x124
 801674c:	f00c fdbd 	bl	80232ca <memcpy>
 8016750:	2300      	movs	r3, #0
 8016752:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016756:	6821      	ldr	r1, [r4, #0]
 8016758:	a849      	add	r0, sp, #292	; 0x124
 801675a:	f7ff fbae 	bl	8015eba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801675e:	b203      	sxth	r3, r0
 8016760:	e751      	b.n	8016606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016762 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016762:	2b03      	cmp	r3, #3
 8016764:	d818      	bhi.n	8016798 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016766:	e8df f003 	tbb	[pc, r3]
 801676a:	0602      	.short	0x0602
 801676c:	130d      	.short	0x130d
 801676e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016772:	1850      	adds	r0, r2, r1
 8016774:	4770      	bx	lr
 8016776:	8803      	ldrh	r3, [r0, #0]
 8016778:	8880      	ldrh	r0, [r0, #4]
 801677a:	4418      	add	r0, r3
 801677c:	b200      	sxth	r0, r0
 801677e:	1a80      	subs	r0, r0, r2
 8016780:	3801      	subs	r0, #1
 8016782:	4770      	bx	lr
 8016784:	8803      	ldrh	r3, [r0, #0]
 8016786:	8880      	ldrh	r0, [r0, #4]
 8016788:	4418      	add	r0, r3
 801678a:	b200      	sxth	r0, r0
 801678c:	1a40      	subs	r0, r0, r1
 801678e:	e7f7      	b.n	8016780 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016790:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016794:	4410      	add	r0, r2
 8016796:	4770      	bx	lr
 8016798:	2000      	movs	r0, #0
 801679a:	4770      	bx	lr

0801679c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801679c:	2b03      	cmp	r3, #3
 801679e:	d817      	bhi.n	80167d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80167a0:	e8df f003 	tbb	[pc, r3]
 80167a4:	10090602 	.word	0x10090602
 80167a8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80167ac:	1850      	adds	r0, r2, r1
 80167ae:	4770      	bx	lr
 80167b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80167b4:	e7fa      	b.n	80167ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80167b6:	8843      	ldrh	r3, [r0, #2]
 80167b8:	88c0      	ldrh	r0, [r0, #6]
 80167ba:	4418      	add	r0, r3
 80167bc:	b200      	sxth	r0, r0
 80167be:	1a80      	subs	r0, r0, r2
 80167c0:	3801      	subs	r0, #1
 80167c2:	4770      	bx	lr
 80167c4:	8843      	ldrh	r3, [r0, #2]
 80167c6:	88c0      	ldrh	r0, [r0, #6]
 80167c8:	4418      	add	r0, r3
 80167ca:	b200      	sxth	r0, r0
 80167cc:	1a40      	subs	r0, r0, r1
 80167ce:	e7f7      	b.n	80167c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80167d0:	2000      	movs	r0, #0
 80167d2:	4770      	bx	lr

080167d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80167d4:	4b01      	ldr	r3, [pc, #4]	; (80167dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80167d6:	2200      	movs	r2, #0
 80167d8:	601a      	str	r2, [r3, #0]
 80167da:	4770      	bx	lr
 80167dc:	24006a44 	.word	0x24006a44

080167e0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80167e0:	4603      	mov	r3, r0
 80167e2:	b1c8      	cbz	r0, 8016818 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80167e4:	0c02      	lsrs	r2, r0, #16
 80167e6:	0412      	lsls	r2, r2, #16
 80167e8:	b9a2      	cbnz	r2, 8016814 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80167ea:	0403      	lsls	r3, r0, #16
 80167ec:	2010      	movs	r0, #16
 80167ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80167f2:	bf04      	itt	eq
 80167f4:	021b      	lsleq	r3, r3, #8
 80167f6:	3008      	addeq	r0, #8
 80167f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80167fc:	bf04      	itt	eq
 80167fe:	011b      	lsleq	r3, r3, #4
 8016800:	3004      	addeq	r0, #4
 8016802:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016806:	bf04      	itt	eq
 8016808:	009b      	lsleq	r3, r3, #2
 801680a:	3002      	addeq	r0, #2
 801680c:	2b00      	cmp	r3, #0
 801680e:	db04      	blt.n	801681a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016810:	3001      	adds	r0, #1
 8016812:	4770      	bx	lr
 8016814:	2000      	movs	r0, #0
 8016816:	e7ea      	b.n	80167ee <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016818:	2020      	movs	r0, #32
 801681a:	4770      	bx	lr

0801681c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016820:	b087      	sub	sp, #28
 8016822:	460d      	mov	r5, r1
 8016824:	4616      	mov	r6, r2
 8016826:	4698      	mov	r8, r3
 8016828:	4601      	mov	r1, r0
 801682a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801682e:	b120      	cbz	r0, 801683a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016830:	b11a      	cbz	r2, 801683a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016832:	2d1f      	cmp	r5, #31
 8016834:	d801      	bhi.n	801683a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016836:	2b1f      	cmp	r3, #31
 8016838:	d904      	bls.n	8016844 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801683a:	2000      	movs	r0, #0
 801683c:	6038      	str	r0, [r7, #0]
 801683e:	b007      	add	sp, #28
 8016840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016844:	b97d      	cbnz	r5, 8016866 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016846:	b143      	cbz	r3, 801685a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016848:	4602      	mov	r2, r0
 801684a:	462b      	mov	r3, r5
 801684c:	4641      	mov	r1, r8
 801684e:	4630      	mov	r0, r6
 8016850:	e9cd 4700 	strd	r4, r7, [sp]
 8016854:	f7ff ffe2 	bl	801681c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016858:	e7f1      	b.n	801683e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801685a:	f04f 33ff 	mov.w	r3, #4294967295
 801685e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016862:	603b      	str	r3, [r7, #0]
 8016864:	e7eb      	b.n	801683e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016866:	fa32 fa05 	lsrs.w	sl, r2, r5
 801686a:	d106      	bne.n	801687a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801686c:	4346      	muls	r6, r0
 801686e:	fbb6 f0f4 	udiv	r0, r6, r4
 8016872:	fb04 6610 	mls	r6, r4, r0, r6
 8016876:	603e      	str	r6, [r7, #0]
 8016878:	e7e1      	b.n	801683e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801687a:	2201      	movs	r2, #1
 801687c:	fa00 fb05 	lsl.w	fp, r0, r5
 8016880:	40aa      	lsls	r2, r5
 8016882:	fbbb f9f4 	udiv	r9, fp, r4
 8016886:	3a01      	subs	r2, #1
 8016888:	fb0a f309 	mul.w	r3, sl, r9
 801688c:	fb04 b919 	mls	r9, r4, r9, fp
 8016890:	4016      	ands	r6, r2
 8016892:	9303      	str	r3, [sp, #12]
 8016894:	4630      	mov	r0, r6
 8016896:	f7ff ffa3 	bl	80167e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801689a:	462b      	mov	r3, r5
 801689c:	460a      	mov	r2, r1
 801689e:	4601      	mov	r1, r0
 80168a0:	4630      	mov	r0, r6
 80168a2:	e9cd 4700 	strd	r4, r7, [sp]
 80168a6:	f7ff ffb9 	bl	801681c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80168aa:	4606      	mov	r6, r0
 80168ac:	4648      	mov	r0, r9
 80168ae:	eb05 0108 	add.w	r1, r5, r8
 80168b2:	f7ff ff95 	bl	80167e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80168b6:	ab05      	add	r3, sp, #20
 80168b8:	464a      	mov	r2, r9
 80168ba:	e9cd 4300 	strd	r4, r3, [sp]
 80168be:	4603      	mov	r3, r0
 80168c0:	4650      	mov	r0, sl
 80168c2:	f7ff ffab 	bl	801681c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80168c6:	6839      	ldr	r1, [r7, #0]
 80168c8:	9a05      	ldr	r2, [sp, #20]
 80168ca:	9b03      	ldr	r3, [sp, #12]
 80168cc:	4411      	add	r1, r2
 80168ce:	fbb1 f2f4 	udiv	r2, r1, r4
 80168d2:	18d3      	adds	r3, r2, r3
 80168d4:	fb04 1412 	mls	r4, r4, r2, r1
 80168d8:	441e      	add	r6, r3
 80168da:	603c      	str	r4, [r7, #0]
 80168dc:	4430      	add	r0, r6
 80168de:	e7ae      	b.n	801683e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080168e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80168e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168e4:	b085      	sub	sp, #20
 80168e6:	f1b0 0900 	subs.w	r9, r0, #0
 80168ea:	461d      	mov	r5, r3
 80168ec:	4617      	mov	r7, r2
 80168ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80168f0:	bfbb      	ittet	lt
 80168f2:	f1c9 0900 	rsblt	r9, r9, #0
 80168f6:	f04f 36ff 	movlt.w	r6, #4294967295
 80168fa:	2601      	movge	r6, #1
 80168fc:	6823      	ldrlt	r3, [r4, #0]
 80168fe:	bfbc      	itt	lt
 8016900:	425b      	neglt	r3, r3
 8016902:	6023      	strlt	r3, [r4, #0]
 8016904:	2a00      	cmp	r2, #0
 8016906:	da04      	bge.n	8016912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016908:	6823      	ldr	r3, [r4, #0]
 801690a:	4257      	negs	r7, r2
 801690c:	4276      	negs	r6, r6
 801690e:	425b      	negs	r3, r3
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	2d00      	cmp	r5, #0
 8016914:	4638      	mov	r0, r7
 8016916:	bfba      	itte	lt
 8016918:	426d      	neglt	r5, r5
 801691a:	f04f 38ff 	movlt.w	r8, #4294967295
 801691e:	f04f 0801 	movge.w	r8, #1
 8016922:	f7ff ff5d 	bl	80167e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016926:	ab03      	add	r3, sp, #12
 8016928:	463a      	mov	r2, r7
 801692a:	e9cd 5300 	strd	r5, r3, [sp]
 801692e:	4603      	mov	r3, r0
 8016930:	4648      	mov	r0, r9
 8016932:	f7ff ff73 	bl	801681c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016936:	6823      	ldr	r3, [r4, #0]
 8016938:	9a03      	ldr	r2, [sp, #12]
 801693a:	4546      	cmp	r6, r8
 801693c:	441a      	add	r2, r3
 801693e:	fb92 f3f5 	sdiv	r3, r2, r5
 8016942:	4418      	add	r0, r3
 8016944:	fb05 2313 	mls	r3, r5, r3, r2
 8016948:	bf18      	it	ne
 801694a:	4240      	negne	r0, r0
 801694c:	1c72      	adds	r2, r6, #1
 801694e:	6023      	str	r3, [r4, #0]
 8016950:	d105      	bne.n	801695e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016952:	2b00      	cmp	r3, #0
 8016954:	f1c3 0200 	rsb	r2, r3, #0
 8016958:	db0b      	blt.n	8016972 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801695a:	6022      	str	r2, [r4, #0]
 801695c:	e006      	b.n	801696c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801695e:	2e01      	cmp	r6, #1
 8016960:	d104      	bne.n	801696c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016962:	2b00      	cmp	r3, #0
 8016964:	da02      	bge.n	801696c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016966:	442b      	add	r3, r5
 8016968:	3801      	subs	r0, #1
 801696a:	6023      	str	r3, [r4, #0]
 801696c:	b005      	add	sp, #20
 801696e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016972:	3801      	subs	r0, #1
 8016974:	1b52      	subs	r2, r2, r5
 8016976:	e7f0      	b.n	801695a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016978 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016978:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801697c:	4c1c      	ldr	r4, [pc, #112]	; (80169f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801697e:	4605      	mov	r5, r0
 8016980:	6807      	ldr	r7, [r0, #0]
 8016982:	69a3      	ldr	r3, [r4, #24]
 8016984:	b92b      	cbnz	r3, 8016992 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016986:	6840      	ldr	r0, [r0, #4]
 8016988:	e9c5 7000 	strd	r7, r0, [r5]
 801698c:	b004      	add	sp, #16
 801698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016992:	f04f 0802 	mov.w	r8, #2
 8016996:	68a2      	ldr	r2, [r4, #8]
 8016998:	ae04      	add	r6, sp, #16
 801699a:	6820      	ldr	r0, [r4, #0]
 801699c:	fb93 f1f8 	sdiv	r1, r3, r8
 80169a0:	440a      	add	r2, r1
 80169a2:	69e1      	ldr	r1, [r4, #28]
 80169a4:	f846 2d04 	str.w	r2, [r6, #-4]!
 80169a8:	463a      	mov	r2, r7
 80169aa:	9600      	str	r6, [sp, #0]
 80169ac:	f7ff ff98 	bl	80168e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80169b0:	69a3      	ldr	r3, [r4, #24]
 80169b2:	4607      	mov	r7, r0
 80169b4:	686a      	ldr	r2, [r5, #4]
 80169b6:	6a21      	ldr	r1, [r4, #32]
 80169b8:	9600      	str	r6, [sp, #0]
 80169ba:	6860      	ldr	r0, [r4, #4]
 80169bc:	f7ff ff90 	bl	80168e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80169c0:	69a3      	ldr	r3, [r4, #24]
 80169c2:	6962      	ldr	r2, [r4, #20]
 80169c4:	4407      	add	r7, r0
 80169c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80169c8:	9600      	str	r6, [sp, #0]
 80169ca:	68e0      	ldr	r0, [r4, #12]
 80169cc:	fb93 f8f8 	sdiv	r8, r3, r8
 80169d0:	4442      	add	r2, r8
 80169d2:	9203      	str	r2, [sp, #12]
 80169d4:	682a      	ldr	r2, [r5, #0]
 80169d6:	f7ff ff83 	bl	80168e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80169da:	4680      	mov	r8, r0
 80169dc:	9600      	str	r6, [sp, #0]
 80169de:	69a3      	ldr	r3, [r4, #24]
 80169e0:	686a      	ldr	r2, [r5, #4]
 80169e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80169e4:	6920      	ldr	r0, [r4, #16]
 80169e6:	f7ff ff7b 	bl	80168e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80169ea:	4440      	add	r0, r8
 80169ec:	e7cc      	b.n	8016988 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80169ee:	bf00      	nop
 80169f0:	24006a48 	.word	0x24006a48

080169f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80169f4:	4b07      	ldr	r3, [pc, #28]	; (8016a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d109      	bne.n	8016a10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80169fc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016a00:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016a04:	8003      	strh	r3, [r0, #0]
 8016a06:	4b04      	ldr	r3, [pc, #16]	; (8016a18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016a08:	881b      	ldrh	r3, [r3, #0]
 8016a0a:	3b01      	subs	r3, #1
 8016a0c:	1a9b      	subs	r3, r3, r2
 8016a0e:	800b      	strh	r3, [r1, #0]
 8016a10:	4770      	bx	lr
 8016a12:	bf00      	nop
 8016a14:	24006a34 	.word	0x24006a34
 8016a18:	24006a30 	.word	0x24006a30

08016a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016a1c:	4b07      	ldr	r3, [pc, #28]	; (8016a3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016a1e:	b510      	push	{r4, lr}
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d108      	bne.n	8016a38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016a26:	4b06      	ldr	r3, [pc, #24]	; (8016a40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016a28:	880c      	ldrh	r4, [r1, #0]
 8016a2a:	881b      	ldrh	r3, [r3, #0]
 8016a2c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016a30:	3b01      	subs	r3, #1
 8016a32:	1b1b      	subs	r3, r3, r4
 8016a34:	8003      	strh	r3, [r0, #0]
 8016a36:	800a      	strh	r2, [r1, #0]
 8016a38:	bd10      	pop	{r4, pc}
 8016a3a:	bf00      	nop
 8016a3c:	24006a34 	.word	0x24006a34
 8016a40:	24006a30 	.word	0x24006a30

08016a44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016a44:	4b0a      	ldr	r3, [pc, #40]	; (8016a70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016a46:	b510      	push	{r4, lr}
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d10e      	bne.n	8016a6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016a4e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016a52:	8843      	ldrh	r3, [r0, #2]
 8016a54:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016a58:	18ca      	adds	r2, r1, r3
 8016a5a:	4b06      	ldr	r3, [pc, #24]	; (8016a74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016a5c:	8044      	strh	r4, [r0, #2]
 8016a5e:	881b      	ldrh	r3, [r3, #0]
 8016a60:	1a9b      	subs	r3, r3, r2
 8016a62:	8003      	strh	r3, [r0, #0]
 8016a64:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016a68:	8081      	strh	r1, [r0, #4]
 8016a6a:	80c3      	strh	r3, [r0, #6]
 8016a6c:	bd10      	pop	{r4, pc}
 8016a6e:	bf00      	nop
 8016a70:	24006a34 	.word	0x24006a34
 8016a74:	24006a30 	.word	0x24006a30

08016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016a78:	4b08      	ldr	r3, [pc, #32]	; (8016a9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d10c      	bne.n	8016a9a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016a80:	8803      	ldrh	r3, [r0, #0]
 8016a82:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016a86:	8842      	ldrh	r2, [r0, #2]
 8016a88:	8002      	strh	r2, [r0, #0]
 8016a8a:	185a      	adds	r2, r3, r1
 8016a8c:	4b04      	ldr	r3, [pc, #16]	; (8016aa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	1a9b      	subs	r3, r3, r2
 8016a92:	8043      	strh	r3, [r0, #2]
 8016a94:	88c3      	ldrh	r3, [r0, #6]
 8016a96:	80c1      	strh	r1, [r0, #6]
 8016a98:	8083      	strh	r3, [r0, #4]
 8016a9a:	4770      	bx	lr
 8016a9c:	24006a34 	.word	0x24006a34
 8016aa0:	24006a30 	.word	0x24006a30

08016aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016aa4:	4b07      	ldr	r3, [pc, #28]	; (8016ac4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016aa6:	b510      	push	{r4, lr}
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	d108      	bne.n	8016ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016aae:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016ab2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016ab6:	8003      	strh	r3, [r0, #0]
 8016ab8:	8893      	ldrh	r3, [r2, #4]
 8016aba:	3b01      	subs	r3, #1
 8016abc:	1b1b      	subs	r3, r3, r4
 8016abe:	800b      	strh	r3, [r1, #0]
 8016ac0:	bd10      	pop	{r4, pc}
 8016ac2:	bf00      	nop
 8016ac4:	24006a34 	.word	0x24006a34

08016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016ac8:	4b0a      	ldr	r3, [pc, #40]	; (8016af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016aca:	460a      	mov	r2, r1
 8016acc:	b510      	push	{r4, lr}
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	2b01      	cmp	r3, #1
 8016ad2:	d10d      	bne.n	8016af0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016ad4:	8881      	ldrh	r1, [r0, #4]
 8016ad6:	8803      	ldrh	r3, [r0, #0]
 8016ad8:	440b      	add	r3, r1
 8016ada:	4601      	mov	r1, r0
 8016adc:	3b01      	subs	r3, #1
 8016ade:	f821 3b02 	strh.w	r3, [r1], #2
 8016ae2:	f7ff ffdf 	bl	8016aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016ae6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016aea:	88c2      	ldrh	r2, [r0, #6]
 8016aec:	80c3      	strh	r3, [r0, #6]
 8016aee:	8082      	strh	r2, [r0, #4]
 8016af0:	bd10      	pop	{r4, pc}
 8016af2:	bf00      	nop
 8016af4:	24006a34 	.word	0x24006a34

08016af8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016af8:	4b06      	ldr	r3, [pc, #24]	; (8016b14 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016afa:	2100      	movs	r1, #0
 8016afc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b00:	4b05      	ldr	r3, [pc, #20]	; (8016b18 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016b02:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8016b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b0a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8016b0e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8016b12:	4770      	bx	lr
 8016b14:	24006a30 	.word	0x24006a30
 8016b18:	24006a32 	.word	0x24006a32

08016b1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016b1c:	4b03      	ldr	r3, [pc, #12]	; (8016b2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016b1e:	6818      	ldr	r0, [r3, #0]
 8016b20:	b110      	cbz	r0, 8016b28 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016b22:	6803      	ldr	r3, [r0, #0]
 8016b24:	699b      	ldr	r3, [r3, #24]
 8016b26:	4718      	bx	r3
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop
 8016b2c:	24006a78 	.word	0x24006a78

08016b30 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016b30:	4770      	bx	lr
	...

08016b34 <_ZN8touchgfx11Application4drawEv>:
 8016b34:	4b09      	ldr	r3, [pc, #36]	; (8016b5c <_ZN8touchgfx11Application4drawEv+0x28>)
 8016b36:	b507      	push	{r0, r1, r2, lr}
 8016b38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b3c:	2100      	movs	r1, #0
 8016b3e:	4b08      	ldr	r3, [pc, #32]	; (8016b60 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016b40:	9100      	str	r1, [sp, #0]
 8016b42:	4669      	mov	r1, sp
 8016b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b48:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b50:	6803      	ldr	r3, [r0, #0]
 8016b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b54:	4798      	blx	r3
 8016b56:	b003      	add	sp, #12
 8016b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b5c:	24006a30 	.word	0x24006a30
 8016b60:	24006a32 	.word	0x24006a32

08016b64 <_ZN8touchgfx11Application10invalidateEv>:
 8016b64:	4b09      	ldr	r3, [pc, #36]	; (8016b8c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016b66:	b082      	sub	sp, #8
 8016b68:	2100      	movs	r1, #0
 8016b6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b6e:	4b08      	ldr	r3, [pc, #32]	; (8016b90 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016b70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b74:	aa02      	add	r2, sp, #8
 8016b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b7a:	9100      	str	r1, [sp, #0]
 8016b7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b80:	6803      	ldr	r3, [r0, #0]
 8016b82:	e912 0006 	ldmdb	r2, {r1, r2}
 8016b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b88:	b002      	add	sp, #8
 8016b8a:	4718      	bx	r3
 8016b8c:	24006a30 	.word	0x24006a30
 8016b90:	24006a32 	.word	0x24006a32

08016b94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016b94:	4b03      	ldr	r3, [pc, #12]	; (8016ba4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016b96:	6818      	ldr	r0, [r3, #0]
 8016b98:	b110      	cbz	r0, 8016ba0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016b9a:	6803      	ldr	r3, [r0, #0]
 8016b9c:	69db      	ldr	r3, [r3, #28]
 8016b9e:	4718      	bx	r3
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	24006a78 	.word	0x24006a78

08016ba8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016ba8:	4b03      	ldr	r3, [pc, #12]	; (8016bb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016baa:	6818      	ldr	r0, [r3, #0]
 8016bac:	b110      	cbz	r0, 8016bb4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016bae:	6803      	ldr	r3, [r0, #0]
 8016bb0:	6a1b      	ldr	r3, [r3, #32]
 8016bb2:	4718      	bx	r3
 8016bb4:	4770      	bx	lr
 8016bb6:	bf00      	nop
 8016bb8:	24006a78 	.word	0x24006a78

08016bbc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8016bc2:	4770      	bx	lr

08016bc4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016bc4:	4b03      	ldr	r3, [pc, #12]	; (8016bd4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016bc6:	6818      	ldr	r0, [r3, #0]
 8016bc8:	b110      	cbz	r0, 8016bd0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016bca:	6803      	ldr	r3, [r0, #0]
 8016bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bce:	4718      	bx	r3
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop
 8016bd4:	24006a78 	.word	0x24006a78

08016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016bd8:	b510      	push	{r4, lr}
 8016bda:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016bde:	888a      	ldrh	r2, [r1, #4]
 8016be0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016be4:	4422      	add	r2, r4
 8016be6:	b212      	sxth	r2, r2
 8016be8:	4293      	cmp	r3, r2
 8016bea:	da15      	bge.n	8016c18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016bec:	8882      	ldrh	r2, [r0, #4]
 8016bee:	4413      	add	r3, r2
 8016bf0:	b21b      	sxth	r3, r3
 8016bf2:	429c      	cmp	r4, r3
 8016bf4:	da10      	bge.n	8016c18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016bf6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016bfa:	88c9      	ldrh	r1, [r1, #6]
 8016bfc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016c00:	4419      	add	r1, r3
 8016c02:	b209      	sxth	r1, r1
 8016c04:	428a      	cmp	r2, r1
 8016c06:	da07      	bge.n	8016c18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016c08:	88c0      	ldrh	r0, [r0, #6]
 8016c0a:	4410      	add	r0, r2
 8016c0c:	b200      	sxth	r0, r0
 8016c0e:	4283      	cmp	r3, r0
 8016c10:	bfac      	ite	ge
 8016c12:	2000      	movge	r0, #0
 8016c14:	2001      	movlt	r0, #1
 8016c16:	bd10      	pop	{r4, pc}
 8016c18:	2000      	movs	r0, #0
 8016c1a:	e7fc      	b.n	8016c16 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016c1c <_ZN8touchgfx4Rect10restrictToEss>:
 8016c1c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	b510      	push	{r4, lr}
 8016c24:	da04      	bge.n	8016c30 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016c26:	8884      	ldrh	r4, [r0, #4]
 8016c28:	4423      	add	r3, r4
 8016c2a:	8083      	strh	r3, [r0, #4]
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	8003      	strh	r3, [r0, #0]
 8016c30:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016c34:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016c38:	1b09      	subs	r1, r1, r4
 8016c3a:	428b      	cmp	r3, r1
 8016c3c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016c40:	bfc8      	it	gt
 8016c42:	8081      	strhgt	r1, [r0, #4]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	da04      	bge.n	8016c52 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016c48:	88c1      	ldrh	r1, [r0, #6]
 8016c4a:	440b      	add	r3, r1
 8016c4c:	80c3      	strh	r3, [r0, #6]
 8016c4e:	2300      	movs	r3, #0
 8016c50:	8043      	strh	r3, [r0, #2]
 8016c52:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016c56:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016c5a:	1a52      	subs	r2, r2, r1
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	bfc8      	it	gt
 8016c60:	80c2      	strhgt	r2, [r0, #6]
 8016c62:	bd10      	pop	{r4, pc}

08016c64 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016c64:	4b10      	ldr	r3, [pc, #64]	; (8016ca8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016c66:	b510      	push	{r4, lr}
 8016c68:	460c      	mov	r4, r1
 8016c6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016c70:	4620      	mov	r0, r4
 8016c72:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016c76:	f7ff ffd1 	bl	8016c1c <_ZN8touchgfx4Rect10restrictToEss>
 8016c7a:	4b0d      	ldr	r3, [pc, #52]	; (8016cb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016c7c:	6818      	ldr	r0, [r3, #0]
 8016c7e:	b190      	cbz	r0, 8016ca6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016c80:	6803      	ldr	r3, [r0, #0]
 8016c82:	4621      	mov	r1, r4
 8016c84:	689b      	ldr	r3, [r3, #8]
 8016c86:	4798      	blx	r3
 8016c88:	4b0a      	ldr	r3, [pc, #40]	; (8016cb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016c8a:	6818      	ldr	r0, [r3, #0]
 8016c8c:	b118      	cbz	r0, 8016c96 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	4621      	mov	r1, r4
 8016c92:	689b      	ldr	r3, [r3, #8]
 8016c94:	4798      	blx	r3
 8016c96:	4b08      	ldr	r3, [pc, #32]	; (8016cb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016c98:	4621      	mov	r1, r4
 8016c9a:	6818      	ldr	r0, [r3, #0]
 8016c9c:	6803      	ldr	r3, [r0, #0]
 8016c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca2:	69db      	ldr	r3, [r3, #28]
 8016ca4:	4718      	bx	r3
 8016ca6:	bd10      	pop	{r4, pc}
 8016ca8:	24006a32 	.word	0x24006a32
 8016cac:	24006a30 	.word	0x24006a30
 8016cb0:	24006a78 	.word	0x24006a78
 8016cb4:	24006a74 	.word	0x24006a74
 8016cb8:	24006a3c 	.word	0x24006a3c

08016cbc <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cbe:	4606      	mov	r6, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	460f      	mov	r7, r1
 8016cc4:	f7fc ffc7 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cc8:	b9e8      	cbnz	r0, 8016d06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cca:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016cce:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016cd2:	42a5      	cmp	r5, r4
 8016cd4:	db17      	blt.n	8016d06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cd6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016cda:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	db11      	blt.n	8016d06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016ce2:	88b9      	ldrh	r1, [r7, #4]
 8016ce4:	440d      	add	r5, r1
 8016ce6:	88b1      	ldrh	r1, [r6, #4]
 8016ce8:	440c      	add	r4, r1
 8016cea:	b22d      	sxth	r5, r5
 8016cec:	b224      	sxth	r4, r4
 8016cee:	42a5      	cmp	r5, r4
 8016cf0:	dc09      	bgt.n	8016d06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016cf2:	88f8      	ldrh	r0, [r7, #6]
 8016cf4:	4410      	add	r0, r2
 8016cf6:	88f2      	ldrh	r2, [r6, #6]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	b200      	sxth	r0, r0
 8016cfc:	b21b      	sxth	r3, r3
 8016cfe:	4298      	cmp	r0, r3
 8016d00:	bfcc      	ite	gt
 8016d02:	2000      	movgt	r0, #0
 8016d04:	2001      	movle	r0, #1
 8016d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	4608      	mov	r0, r1
 8016d0e:	460d      	mov	r5, r1
 8016d10:	f7fc ffa1 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d14:	b978      	cbnz	r0, 8016d36 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016d16:	4620      	mov	r0, r4
 8016d18:	f7fc ff9d 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d1c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016d20:	b150      	cbz	r0, 8016d38 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016d22:	8026      	strh	r6, [r4, #0]
 8016d24:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016d28:	8063      	strh	r3, [r4, #2]
 8016d2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016d2e:	80a3      	strh	r3, [r4, #4]
 8016d30:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016d34:	80e3      	strh	r3, [r4, #6]
 8016d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d38:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016d3c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016d40:	42b1      	cmp	r1, r6
 8016d42:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016d46:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016d4a:	460f      	mov	r7, r1
 8016d4c:	88ed      	ldrh	r5, [r5, #6]
 8016d4e:	bfa8      	it	ge
 8016d50:	4637      	movge	r7, r6
 8016d52:	4293      	cmp	r3, r2
 8016d54:	4618      	mov	r0, r3
 8016d56:	4466      	add	r6, ip
 8016d58:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016d5c:	bfa8      	it	ge
 8016d5e:	4610      	movge	r0, r2
 8016d60:	442a      	add	r2, r5
 8016d62:	88e5      	ldrh	r5, [r4, #6]
 8016d64:	4461      	add	r1, ip
 8016d66:	b236      	sxth	r6, r6
 8016d68:	8027      	strh	r7, [r4, #0]
 8016d6a:	442b      	add	r3, r5
 8016d6c:	b209      	sxth	r1, r1
 8016d6e:	b212      	sxth	r2, r2
 8016d70:	8060      	strh	r0, [r4, #2]
 8016d72:	b21b      	sxth	r3, r3
 8016d74:	428e      	cmp	r6, r1
 8016d76:	bfac      	ite	ge
 8016d78:	ebc7 0106 	rsbge	r1, r7, r6
 8016d7c:	ebc7 0101 	rsblt	r1, r7, r1
 8016d80:	429a      	cmp	r2, r3
 8016d82:	bfac      	ite	ge
 8016d84:	ebc0 0202 	rsbge	r2, r0, r2
 8016d88:	ebc0 0203 	rsblt	r2, r0, r3
 8016d8c:	80a1      	strh	r1, [r4, #4]
 8016d8e:	80e2      	strh	r2, [r4, #6]
 8016d90:	e7d1      	b.n	8016d36 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016d94 <_ZN8touchgfx11Application11getInstanceEv>:
 8016d94:	4b01      	ldr	r3, [pc, #4]	; (8016d9c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016d96:	6818      	ldr	r0, [r3, #0]
 8016d98:	4770      	bx	lr
 8016d9a:	bf00      	nop
 8016d9c:	24006a88 	.word	0x24006a88

08016da0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016da0:	2300      	movs	r3, #0
 8016da2:	b510      	push	{r4, lr}
 8016da4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8016da8:	4604      	mov	r4, r0
 8016daa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8016dae:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016db2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016db6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d90e      	bls.n	8016ddc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016dbe:	18e2      	adds	r2, r4, r3
 8016dc0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8016dc4:	b122      	cbz	r2, 8016dd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016dc6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016dca:	6803      	ldr	r3, [r0, #0]
 8016dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016dce:	4798      	blx	r3
 8016dd0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016dda:	e7ea      	b.n	8016db2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016ddc:	bd10      	pop	{r4, pc}

08016dde <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016dde:	2300      	movs	r3, #0
 8016de0:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8016de4:	30a4      	adds	r0, #164	; 0xa4
 8016de6:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016dea:	f802 3b01 	strb.w	r3, [r2], #1
 8016dee:	4282      	cmp	r2, r0
 8016df0:	d1fb      	bne.n	8016dea <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016df2:	4770      	bx	lr

08016df4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4c0b      	ldr	r4, [pc, #44]	; (8016e24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016df8:	4605      	mov	r5, r0
 8016dfa:	460e      	mov	r6, r1
 8016dfc:	6820      	ldr	r0, [r4, #0]
 8016dfe:	b110      	cbz	r0, 8016e06 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016e00:	6803      	ldr	r3, [r0, #0]
 8016e02:	695b      	ldr	r3, [r3, #20]
 8016e04:	4798      	blx	r3
 8016e06:	1d28      	adds	r0, r5, #4
 8016e08:	f7ff ffe9 	bl	8016dde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016e0c:	6026      	str	r6, [r4, #0]
 8016e0e:	6833      	ldr	r3, [r6, #0]
 8016e10:	4630      	mov	r0, r6
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	4798      	blx	r3
 8016e16:	682b      	ldr	r3, [r5, #0]
 8016e18:	4628      	mov	r0, r5
 8016e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e20:	4718      	bx	r3
 8016e22:	bf00      	nop
 8016e24:	24006a78 	.word	0x24006a78

08016e28 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016e28:	2300      	movs	r3, #0
 8016e2a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8016e2e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8016e32:	461a      	mov	r2, r3
 8016e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e36:	461c      	mov	r4, r3
 8016e38:	461d      	mov	r5, r3
 8016e3a:	459c      	cmp	ip, r3
 8016e3c:	dd1a      	ble.n	8016e74 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016e3e:	18c6      	adds	r6, r0, r3
 8016e40:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8016e44:	b16e      	cbz	r6, 8016e62 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d008      	beq.n	8016e5c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016e4a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016e4e:	fa1f fe82 	uxth.w	lr, r2
 8016e52:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016e56:	1887      	adds	r7, r0, r2
 8016e58:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8016e5c:	3201      	adds	r2, #1
 8016e5e:	3301      	adds	r3, #1
 8016e60:	e7eb      	b.n	8016e3a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016e62:	4299      	cmp	r1, r3
 8016e64:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8016e68:	bfa8      	it	ge
 8016e6a:	3501      	addge	r5, #1
 8016e6c:	429e      	cmp	r6, r3
 8016e6e:	bfc8      	it	gt
 8016e70:	3401      	addgt	r4, #1
 8016e72:	e7f4      	b.n	8016e5e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016e74:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8016e78:	1b49      	subs	r1, r1, r5
 8016e7a:	1b1b      	subs	r3, r3, r4
 8016e7c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8016e80:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016e84:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	dd03      	ble.n	8016e94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8016e92:	e7f7      	b.n	8016e84 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016e98 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016e98:	b570      	push	{r4, r5, r6, lr}
 8016e9a:	4d16      	ldr	r5, [pc, #88]	; (8016ef4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	6828      	ldr	r0, [r5, #0]
 8016ea0:	b140      	cbz	r0, 8016eb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016ea2:	7a03      	ldrb	r3, [r0, #8]
 8016ea4:	b933      	cbnz	r3, 8016eb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016ea6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016eaa:	6803      	ldr	r3, [r0, #0]
 8016eac:	689b      	ldr	r3, [r3, #8]
 8016eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eb2:	4718      	bx	r3
 8016eb4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8016eb8:	4e0f      	ldr	r6, [pc, #60]	; (8016ef8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016eba:	b973      	cbnz	r3, 8016eda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ebc:	b168      	cbz	r0, 8016eda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ebe:	7a03      	ldrb	r3, [r0, #8]
 8016ec0:	b15b      	cbz	r3, 8016eda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016ec2:	6830      	ldr	r0, [r6, #0]
 8016ec4:	b110      	cbz	r0, 8016ecc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016ec6:	6803      	ldr	r3, [r0, #0]
 8016ec8:	691b      	ldr	r3, [r3, #16]
 8016eca:	4798      	blx	r3
 8016ecc:	6828      	ldr	r0, [r5, #0]
 8016ece:	6803      	ldr	r3, [r0, #0]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	4798      	blx	r3
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016eda:	3404      	adds	r4, #4
 8016edc:	4620      	mov	r0, r4
 8016ede:	f7ff ff5f 	bl	8016da0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7ff ffa0 	bl	8016e28 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016ee8:	6830      	ldr	r0, [r6, #0]
 8016eea:	b110      	cbz	r0, 8016ef2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016eec:	6803      	ldr	r3, [r0, #0]
 8016eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ef0:	e7dd      	b.n	8016eae <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016ef2:	bd70      	pop	{r4, r5, r6, pc}
 8016ef4:	24006a7c 	.word	0x24006a7c
 8016ef8:	24006a78 	.word	0x24006a78

08016efc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016efc:	4603      	mov	r3, r0
 8016efe:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016f02:	2200      	movs	r2, #0
 8016f04:	801a      	strh	r2, [r3, #0]
 8016f06:	3308      	adds	r3, #8
 8016f08:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016f0c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016f10:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016f14:	428b      	cmp	r3, r1
 8016f16:	d1f5      	bne.n	8016f04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016f18:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016f1c:	4770      	bx	lr
	...

08016f20 <_ZN8touchgfx11ApplicationC1Ev>:
 8016f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f22:	4b1d      	ldr	r3, [pc, #116]	; (8016f98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016f24:	4606      	mov	r6, r0
 8016f26:	4604      	mov	r4, r0
 8016f28:	2500      	movs	r5, #0
 8016f2a:	f846 3b04 	str.w	r3, [r6], #4
 8016f2e:	22a8      	movs	r2, #168	; 0xa8
 8016f30:	2100      	movs	r1, #0
 8016f32:	4630      	mov	r0, r6
 8016f34:	f00c f8f9 	bl	802312a <memset>
 8016f38:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8016f3c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016f40:	4f16      	ldr	r7, [pc, #88]	; (8016f9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016f42:	f7ff ffdb 	bl	8016efc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016f46:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016f4a:	f7ff ffd7 	bl	8016efc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016f4e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8016f52:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016f56:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8016f5a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8016f5e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8016f62:	490f      	ldr	r1, [pc, #60]	; (8016fa0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016f64:	480f      	ldr	r0, [pc, #60]	; (8016fa4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016f66:	f00b fda3 	bl	8022ab0 <CRC_Lock>
 8016f6a:	4b0f      	ldr	r3, [pc, #60]	; (8016fa8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016f6c:	b158      	cbz	r0, 8016f86 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016f6e:	801d      	strh	r5, [r3, #0]
 8016f70:	2300      	movs	r3, #0
 8016f72:	4a0e      	ldr	r2, [pc, #56]	; (8016fac <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016f74:	4630      	mov	r0, r6
 8016f76:	6013      	str	r3, [r2, #0]
 8016f78:	4a0d      	ldr	r2, [pc, #52]	; (8016fb0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016f7a:	603b      	str	r3, [r7, #0]
 8016f7c:	6013      	str	r3, [r2, #0]
 8016f7e:	f7ff ff2e 	bl	8016dde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016f82:	4620      	mov	r0, r4
 8016f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016f8a:	2002      	movs	r0, #2
 8016f8c:	801a      	strh	r2, [r3, #0]
 8016f8e:	6038      	str	r0, [r7, #0]
 8016f90:	f001 fa50 	bl	8018434 <_ZN8touchgfx6Screen4drawEv>
 8016f94:	e7ec      	b.n	8016f70 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016f96:	bf00      	nop
 8016f98:	080253f0 	.word	0x080253f0
 8016f9c:	24006a78 	.word	0x24006a78
 8016fa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8016fa4:	f407a5c2 	.word	0xf407a5c2
 8016fa8:	24000050 	.word	0x24000050
 8016fac:	24006a88 	.word	0x24006a88
 8016fb0:	24006a7c 	.word	0x24006a7c

08016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016fb4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	428b      	cmp	r3, r1
 8016fbe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016fc2:	b510      	push	{r4, lr}
 8016fc4:	d908      	bls.n	8016fd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016fc6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016fca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	6062      	str	r2, [r4, #4]
 8016fd8:	bd10      	pop	{r4, pc}
	...

08016fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe0:	b08f      	sub	sp, #60	; 0x3c
 8016fe2:	4b8f      	ldr	r3, [pc, #572]	; (8017220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016fe4:	4683      	mov	fp, r0
 8016fe6:	ac0a      	add	r4, sp, #40	; 0x28
 8016fe8:	e884 0006 	stmia.w	r4, {r1, r2}
 8016fec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	4b8c      	ldr	r3, [pc, #560]	; (8017224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016ff4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016ff8:	f7ff fe10 	bl	8016c1c <_ZN8touchgfx4Rect10restrictToEss>
 8016ffc:	4620      	mov	r0, r4
 8016ffe:	f7fc fe2a 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017002:	2800      	cmp	r0, #0
 8017004:	d16a      	bne.n	80170dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017006:	9403      	str	r4, [sp, #12]
 8017008:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801700c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8017010:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017014:	9301      	str	r3, [sp, #4]
 8017016:	35a4      	adds	r5, #164	; 0xa4
 8017018:	b15c      	cbz	r4, 8017032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801701a:	4629      	mov	r1, r5
 801701c:	9803      	ldr	r0, [sp, #12]
 801701e:	f7ff fe4d 	bl	8016cbc <_ZNK8touchgfx4Rect8includesERKS0_>
 8017022:	3c01      	subs	r4, #1
 8017024:	b118      	cbz	r0, 801702e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8017026:	b2a1      	uxth	r1, r4
 8017028:	9801      	ldr	r0, [sp, #4]
 801702a:	f7ff ffc3 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801702e:	3d08      	subs	r5, #8
 8017030:	e7f2      	b.n	8017018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8017032:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8017036:	f10a 33ff 	add.w	r3, sl, #4294967295
 801703a:	f8cd a010 	str.w	sl, [sp, #16]
 801703e:	9302      	str	r3, [sp, #8]
 8017040:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017044:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8017048:	9306      	str	r3, [sp, #24]
 801704a:	445c      	add	r4, fp
 801704c:	2500      	movs	r5, #0
 801704e:	4626      	mov	r6, r4
 8017050:	f8cd a014 	str.w	sl, [sp, #20]
 8017054:	462f      	mov	r7, r5
 8017056:	9b05      	ldr	r3, [sp, #20]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d073      	beq.n	8017144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801705c:	9903      	ldr	r1, [sp, #12]
 801705e:	4630      	mov	r0, r6
 8017060:	f7ff fdba 	bl	8016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017064:	b350      	cbz	r0, 80170bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017066:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801706a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801706e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8017072:	45e6      	cmp	lr, ip
 8017074:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017078:	db33      	blt.n	80170e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801707a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801707e:	88b3      	ldrh	r3, [r6, #4]
 8017080:	4472      	add	r2, lr
 8017082:	4463      	add	r3, ip
 8017084:	b212      	sxth	r2, r2
 8017086:	b21b      	sxth	r3, r3
 8017088:	429a      	cmp	r2, r3
 801708a:	dc2a      	bgt.n	80170e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801708c:	fa1f f289 	uxth.w	r2, r9
 8017090:	88f3      	ldrh	r3, [r6, #6]
 8017092:	45c8      	cmp	r8, r9
 8017094:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017098:	4413      	add	r3, r2
 801709a:	fa1f fc88 	uxth.w	ip, r8
 801709e:	b29b      	uxth	r3, r3
 80170a0:	fa0f fe83 	sxth.w	lr, r3
 80170a4:	db0f      	blt.n	80170c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80170a6:	eba3 030c 	sub.w	r3, r3, ip
 80170aa:	1ac9      	subs	r1, r1, r3
 80170ac:	b209      	sxth	r1, r1
 80170ae:	2900      	cmp	r1, #0
 80170b0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80170b4:	dd12      	ble.n	80170dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80170b6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80170ba:	4605      	mov	r5, r0
 80170bc:	9b05      	ldr	r3, [sp, #20]
 80170be:	3e08      	subs	r6, #8
 80170c0:	3b01      	subs	r3, #1
 80170c2:	9305      	str	r3, [sp, #20]
 80170c4:	e7c7      	b.n	8017056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80170c6:	4461      	add	r1, ip
 80170c8:	b209      	sxth	r1, r1
 80170ca:	4571      	cmp	r1, lr
 80170cc:	dc38      	bgt.n	8017140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80170ce:	eba2 020c 	sub.w	r2, r2, ip
 80170d2:	b212      	sxth	r2, r2
 80170d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80170d8:	2a00      	cmp	r2, #0
 80170da:	dcee      	bgt.n	80170ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80170dc:	b00f      	add	sp, #60	; 0x3c
 80170de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e2:	45c8      	cmp	r8, r9
 80170e4:	db2c      	blt.n	8017140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80170e6:	88f3      	ldrh	r3, [r6, #6]
 80170e8:	4499      	add	r9, r3
 80170ea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80170ee:	4498      	add	r8, r3
 80170f0:	fa0f f989 	sxth.w	r9, r9
 80170f4:	fa0f f888 	sxth.w	r8, r8
 80170f8:	45c1      	cmp	r9, r8
 80170fa:	db21      	blt.n	8017140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80170fc:	fa1f f28c 	uxth.w	r2, ip
 8017100:	88b3      	ldrh	r3, [r6, #4]
 8017102:	45e6      	cmp	lr, ip
 8017104:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017108:	4413      	add	r3, r2
 801710a:	fa1f f88e 	uxth.w	r8, lr
 801710e:	b29b      	uxth	r3, r3
 8017110:	fa0f f983 	sxth.w	r9, r3
 8017114:	db0a      	blt.n	801712c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8017116:	eba3 0308 	sub.w	r3, r3, r8
 801711a:	1ac9      	subs	r1, r1, r3
 801711c:	b209      	sxth	r1, r1
 801711e:	2900      	cmp	r1, #0
 8017120:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017124:	ddda      	ble.n	80170dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017126:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801712a:	e7c6      	b.n	80170ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801712c:	4441      	add	r1, r8
 801712e:	b209      	sxth	r1, r1
 8017130:	4549      	cmp	r1, r9
 8017132:	dc05      	bgt.n	8017140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017134:	eba2 0208 	sub.w	r2, r2, r8
 8017138:	b212      	sxth	r2, r2
 801713a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801713e:	e7cb      	b.n	80170d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017140:	4607      	mov	r7, r0
 8017142:	e7bb      	b.n	80170bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017144:	2d00      	cmp	r5, #0
 8017146:	d181      	bne.n	801704c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8017148:	2f00      	cmp	r7, #0
 801714a:	f000 81dd 	beq.w	8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801714e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017152:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017156:	b2b3      	uxth	r3, r6
 8017158:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801715c:	9305      	str	r3, [sp, #20]
 801715e:	9a05      	ldr	r2, [sp, #20]
 8017160:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017164:	4413      	add	r3, r2
 8017166:	b2ba      	uxth	r2, r7
 8017168:	4492      	add	sl, r2
 801716a:	b29b      	uxth	r3, r3
 801716c:	fa1f fa8a 	uxth.w	sl, sl
 8017170:	fa0f f883 	sxth.w	r8, r3
 8017174:	fa0f f98a 	sxth.w	r9, sl
 8017178:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801717c:	9b04      	ldr	r3, [sp, #16]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d052      	beq.n	8017228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017182:	9903      	ldr	r1, [sp, #12]
 8017184:	4620      	mov	r0, r4
 8017186:	f7ff fd27 	bl	8016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801718a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801718e:	b1c0      	cbz	r0, 80171c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017190:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017194:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017198:	4576      	cmp	r6, lr
 801719a:	dc22      	bgt.n	80171e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801719c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80171a0:	44f4      	add	ip, lr
 80171a2:	fa0f fc8c 	sxth.w	ip, ip
 80171a6:	45e0      	cmp	r8, ip
 80171a8:	db1b      	blt.n	80171e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80171aa:	428f      	cmp	r7, r1
 80171ac:	fa1f fc81 	uxth.w	ip, r1
 80171b0:	88e1      	ldrh	r1, [r4, #6]
 80171b2:	dc0d      	bgt.n	80171d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80171b4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80171b8:	f8a4 9002 	strh.w	r9, [r4, #2]
 80171bc:	eba1 010c 	sub.w	r1, r1, ip
 80171c0:	80e1      	strh	r1, [r4, #6]
 80171c2:	4628      	mov	r0, r5
 80171c4:	9904      	ldr	r1, [sp, #16]
 80171c6:	3c08      	subs	r4, #8
 80171c8:	4605      	mov	r5, r0
 80171ca:	3901      	subs	r1, #1
 80171cc:	9104      	str	r1, [sp, #16]
 80171ce:	e7d3      	b.n	8017178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 80171d0:	4461      	add	r1, ip
 80171d2:	b209      	sxth	r1, r1
 80171d4:	4549      	cmp	r1, r9
 80171d6:	dcf5      	bgt.n	80171c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80171d8:	eba2 0c0c 	sub.w	ip, r2, ip
 80171dc:	f8a4 c006 	strh.w	ip, [r4, #6]
 80171e0:	e7ef      	b.n	80171c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80171e2:	428f      	cmp	r7, r1
 80171e4:	dcee      	bgt.n	80171c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80171e6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80171ea:	4461      	add	r1, ip
 80171ec:	b209      	sxth	r1, r1
 80171ee:	4589      	cmp	r9, r1
 80171f0:	dbe8      	blt.n	80171c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80171f2:	4576      	cmp	r6, lr
 80171f4:	fa1f fc8e 	uxth.w	ip, lr
 80171f8:	88a1      	ldrh	r1, [r4, #4]
 80171fa:	dc07      	bgt.n	801720c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80171fc:	eba3 0c0c 	sub.w	ip, r3, ip
 8017200:	f8a4 8000 	strh.w	r8, [r4]
 8017204:	eba1 010c 	sub.w	r1, r1, ip
 8017208:	80a1      	strh	r1, [r4, #4]
 801720a:	e7da      	b.n	80171c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801720c:	4461      	add	r1, ip
 801720e:	b209      	sxth	r1, r1
 8017210:	4588      	cmp	r8, r1
 8017212:	dbd7      	blt.n	80171c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017214:	9905      	ldr	r1, [sp, #20]
 8017216:	eba1 0c0c 	sub.w	ip, r1, ip
 801721a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801721e:	e7d0      	b.n	80171c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017220:	24006a32 	.word	0x24006a32
 8017224:	24006a30 	.word	0x24006a30
 8017228:	2d00      	cmp	r5, #0
 801722a:	f000 816d 	beq.w	8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801722e:	9b06      	ldr	r3, [sp, #24]
 8017230:	445b      	add	r3, fp
 8017232:	461c      	mov	r4, r3
 8017234:	9b02      	ldr	r3, [sp, #8]
 8017236:	3301      	adds	r3, #1
 8017238:	f000 8166 	beq.w	8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801723c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8017240:	9803      	ldr	r0, [sp, #12]
 8017242:	4629      	mov	r1, r5
 8017244:	f7ff fd3a 	bl	8016cbc <_ZNK8touchgfx4Rect8includesERKS0_>
 8017248:	b120      	cbz	r0, 8017254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801724a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801724e:	9801      	ldr	r0, [sp, #4]
 8017250:	f7ff feb0 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017254:	9903      	ldr	r1, [sp, #12]
 8017256:	4628      	mov	r0, r5
 8017258:	f7ff fcbe 	bl	8016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801725c:	2800      	cmp	r0, #0
 801725e:	f000 809c 	beq.w	801739a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017262:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8017266:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801726a:	fa1f f189 	uxth.w	r1, r9
 801726e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017272:	9309      	str	r3, [sp, #36]	; 0x24
 8017274:	eb01 0c03 	add.w	ip, r1, r3
 8017278:	b283      	uxth	r3, r0
 801727a:	4548      	cmp	r0, r9
 801727c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017280:	fa1f fa8c 	uxth.w	sl, ip
 8017284:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017288:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801728c:	eb03 050c 	add.w	r5, r3, ip
 8017290:	b2ad      	uxth	r5, r5
 8017292:	9505      	str	r5, [sp, #20]
 8017294:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017298:	9504      	str	r5, [sp, #16]
 801729a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801729e:	f340 8099 	ble.w	80173d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80172a2:	1a5b      	subs	r3, r3, r1
 80172a4:	4596      	cmp	lr, r2
 80172a6:	fa0f f08a 	sxth.w	r0, sl
 80172aa:	b29b      	uxth	r3, r3
 80172ac:	b21e      	sxth	r6, r3
 80172ae:	dd2e      	ble.n	801730e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80172b0:	9f02      	ldr	r7, [sp, #8]
 80172b2:	fa1f fe8e 	uxth.w	lr, lr
 80172b6:	b292      	uxth	r2, r2
 80172b8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80172bc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80172c0:	9f04      	ldr	r7, [sp, #16]
 80172c2:	ebae 0102 	sub.w	r1, lr, r2
 80172c6:	44a6      	add	lr, r4
 80172c8:	1a3f      	subs	r7, r7, r0
 80172ca:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80172ce:	b289      	uxth	r1, r1
 80172d0:	4402      	add	r2, r0
 80172d2:	fa0f fe8e 	sxth.w	lr, lr
 80172d6:	b20d      	sxth	r5, r1
 80172d8:	b212      	sxth	r2, r2
 80172da:	436f      	muls	r7, r5
 80172dc:	ebae 0202 	sub.w	r2, lr, r2
 80172e0:	4372      	muls	r2, r6
 80172e2:	4297      	cmp	r7, r2
 80172e4:	db09      	blt.n	80172fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80172e6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80172ea:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80172ee:	449c      	add	ip, r3
 80172f0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80172f4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80172f8:	e686      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80172fa:	4421      	add	r1, r4
 80172fc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8017300:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8017304:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017308:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801730c:	e67c      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801730e:	9f04      	ldr	r7, [sp, #16]
 8017310:	42b8      	cmp	r0, r7
 8017312:	da27      	bge.n	8017364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017314:	9902      	ldr	r1, [sp, #8]
 8017316:	1a3f      	subs	r7, r7, r0
 8017318:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801731c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017320:	eb05 010e 	add.w	r1, r5, lr
 8017324:	fa1f f881 	uxth.w	r8, r1
 8017328:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801732c:	4411      	add	r1, r2
 801732e:	fa0f f988 	sxth.w	r9, r8
 8017332:	eba2 020e 	sub.w	r2, r2, lr
 8017336:	eba1 0108 	sub.w	r1, r1, r8
 801733a:	4372      	muls	r2, r6
 801733c:	b289      	uxth	r1, r1
 801733e:	fa0f f881 	sxth.w	r8, r1
 8017342:	fb08 f707 	mul.w	r7, r8, r7
 8017346:	42ba      	cmp	r2, r7
 8017348:	dc06      	bgt.n	8017358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801734a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801734e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8017352:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8017356:	e7ca      	b.n	80172ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8017358:	4429      	add	r1, r5
 801735a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801735e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017362:	e651      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017364:	9805      	ldr	r0, [sp, #20]
 8017366:	2d06      	cmp	r5, #6
 8017368:	ebaa 0000 	sub.w	r0, sl, r0
 801736c:	b280      	uxth	r0, r0
 801736e:	fa0f fe80 	sxth.w	lr, r0
 8017372:	d817      	bhi.n	80173a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017374:	9b04      	ldr	r3, [sp, #16]
 8017376:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801737a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801737e:	1c6b      	adds	r3, r5, #1
 8017380:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8017384:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8017388:	9b01      	ldr	r3, [sp, #4]
 801738a:	9801      	ldr	r0, [sp, #4]
 801738c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017390:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017394:	805a      	strh	r2, [r3, #2]
 8017396:	809e      	strh	r6, [r3, #4]
 8017398:	80d9      	strh	r1, [r3, #6]
 801739a:	9b02      	ldr	r3, [sp, #8]
 801739c:	3c08      	subs	r4, #8
 801739e:	3b01      	subs	r3, #1
 80173a0:	9302      	str	r3, [sp, #8]
 80173a2:	e747      	b.n	8017234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80173a4:	9a02      	ldr	r2, [sp, #8]
 80173a6:	45b6      	cmp	lr, r6
 80173a8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80173ac:	db0d      	blt.n	80173ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80173ae:	449c      	add	ip, r3
 80173b0:	445a      	add	r2, fp
 80173b2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80173b6:	fa1f fc8c 	uxth.w	ip, ip
 80173ba:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80173be:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80173c2:	448c      	add	ip, r1
 80173c4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80173c8:	e61e      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80173ca:	445a      	add	r2, fp
 80173cc:	4484      	add	ip, r0
 80173ce:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80173d2:	e78f      	b.n	80172f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80173d4:	fa1f f18e 	uxth.w	r1, lr
 80173d8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80173dc:	b293      	uxth	r3, r2
 80173de:	4596      	cmp	lr, r2
 80173e0:	eb01 0806 	add.w	r8, r1, r6
 80173e4:	9306      	str	r3, [sp, #24]
 80173e6:	fa1f f888 	uxth.w	r8, r8
 80173ea:	9f06      	ldr	r7, [sp, #24]
 80173ec:	fa0f f388 	sxth.w	r3, r8
 80173f0:	9307      	str	r3, [sp, #28]
 80173f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80173f6:	443b      	add	r3, r7
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	9308      	str	r3, [sp, #32]
 80173fc:	da24      	bge.n	8017448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80173fe:	9905      	ldr	r1, [sp, #20]
 8017400:	eba3 0308 	sub.w	r3, r3, r8
 8017404:	eba2 020e 	sub.w	r2, r2, lr
 8017408:	eba9 0000 	sub.w	r0, r9, r0
 801740c:	ebaa 0401 	sub.w	r4, sl, r1
 8017410:	b29b      	uxth	r3, r3
 8017412:	b2a4      	uxth	r4, r4
 8017414:	b219      	sxth	r1, r3
 8017416:	b225      	sxth	r5, r4
 8017418:	4348      	muls	r0, r1
 801741a:	436a      	muls	r2, r5
 801741c:	4282      	cmp	r2, r0
 801741e:	9a02      	ldr	r2, [sp, #8]
 8017420:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017424:	445a      	add	r2, fp
 8017426:	dc06      	bgt.n	8017436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8017428:	9b07      	ldr	r3, [sp, #28]
 801742a:	44a4      	add	ip, r4
 801742c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8017430:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8017434:	e75e      	b.n	80172f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017436:	9904      	ldr	r1, [sp, #16]
 8017438:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801743c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8017440:	4433      	add	r3, r6
 8017442:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017446:	e5df      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017448:	9f06      	ldr	r7, [sp, #24]
 801744a:	9b04      	ldr	r3, [sp, #16]
 801744c:	1bc9      	subs	r1, r1, r7
 801744e:	fa0f f78a 	sxth.w	r7, sl
 8017452:	b289      	uxth	r1, r1
 8017454:	429f      	cmp	r7, r3
 8017456:	fa0f fe81 	sxth.w	lr, r1
 801745a:	dd23      	ble.n	80174a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801745c:	9a05      	ldr	r2, [sp, #20]
 801745e:	eba9 0000 	sub.w	r0, r9, r0
 8017462:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017466:	ebaa 0202 	sub.w	r2, sl, r2
 801746a:	9d07      	ldr	r5, [sp, #28]
 801746c:	fb0e f000 	mul.w	r0, lr, r0
 8017470:	b292      	uxth	r2, r2
 8017472:	eba5 0a03 	sub.w	sl, r5, r3
 8017476:	9b02      	ldr	r3, [sp, #8]
 8017478:	b214      	sxth	r4, r2
 801747a:	00db      	lsls	r3, r3, #3
 801747c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017480:	445b      	add	r3, fp
 8017482:	4550      	cmp	r0, sl
 8017484:	db03      	blt.n	801748e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8017486:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801748a:	4494      	add	ip, r2
 801748c:	e732      	b.n	80172f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801748e:	9a04      	ldr	r2, [sp, #16]
 8017490:	4431      	add	r1, r6
 8017492:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8017496:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801749a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801749e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80174a2:	e75c      	b.n	801735e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80174a4:	9b08      	ldr	r3, [sp, #32]
 80174a6:	2d06      	cmp	r5, #6
 80174a8:	eba3 0308 	sub.w	r3, r3, r8
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	b218      	sxth	r0, r3
 80174b0:	d813      	bhi.n	80174da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80174b2:	9b07      	ldr	r3, [sp, #28]
 80174b4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80174b8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80174bc:	1c6b      	adds	r3, r5, #1
 80174be:	9901      	ldr	r1, [sp, #4]
 80174c0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80174c4:	9b01      	ldr	r3, [sp, #4]
 80174c6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80174ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80174ce:	805a      	strh	r2, [r3, #2]
 80174d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174d2:	f8a3 e006 	strh.w	lr, [r3, #6]
 80174d6:	809a      	strh	r2, [r3, #4]
 80174d8:	e75f      	b.n	801739a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80174da:	9c02      	ldr	r4, [sp, #8]
 80174dc:	4570      	cmp	r0, lr
 80174de:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80174e2:	db0d      	blt.n	8017500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80174e4:	4431      	add	r1, r6
 80174e6:	9b06      	ldr	r3, [sp, #24]
 80174e8:	445c      	add	r4, fp
 80174ea:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80174ee:	b289      	uxth	r1, r1
 80174f0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80174f4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80174f8:	4419      	add	r1, r3
 80174fa:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80174fe:	e583      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017500:	445c      	add	r4, fp
 8017502:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8017506:	e79b      	b.n	8017440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8017508:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801750c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017510:	1e65      	subs	r5, r4, #1
 8017512:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8017516:	b2ad      	uxth	r5, r5
 8017518:	42b5      	cmp	r5, r6
 801751a:	d044      	beq.n	80175a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801751c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8017520:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8017524:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8017528:	4282      	cmp	r2, r0
 801752a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801752e:	d11f      	bne.n	8017570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017530:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8017534:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8017538:	459c      	cmp	ip, r3
 801753a:	d119      	bne.n	8017570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801753c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8017540:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017544:	19d8      	adds	r0, r3, r7
 8017546:	b200      	sxth	r0, r0
 8017548:	4288      	cmp	r0, r1
 801754a:	d109      	bne.n	8017560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801754c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8017550:	4413      	add	r3, r2
 8017552:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8017556:	4629      	mov	r1, r5
 8017558:	9801      	ldr	r0, [sp, #4]
 801755a:	f7ff fd2b 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801755e:	e003      	b.n	8017568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017560:	4411      	add	r1, r2
 8017562:	b209      	sxth	r1, r1
 8017564:	42b9      	cmp	r1, r7
 8017566:	d0f3      	beq.n	8017550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8017568:	3d01      	subs	r5, #1
 801756a:	3c08      	subs	r4, #8
 801756c:	b2ad      	uxth	r5, r5
 801756e:	e7d3      	b.n	8017518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017570:	42b9      	cmp	r1, r7
 8017572:	d1f9      	bne.n	8017568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017574:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8017578:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801757c:	4299      	cmp	r1, r3
 801757e:	d1f3      	bne.n	8017568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017580:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8017584:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017588:	181f      	adds	r7, r3, r0
 801758a:	b23f      	sxth	r7, r7
 801758c:	42ba      	cmp	r2, r7
 801758e:	d105      	bne.n	801759c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8017590:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8017594:	440b      	add	r3, r1
 8017596:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801759a:	e7dc      	b.n	8017556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801759c:	440a      	add	r2, r1
 801759e:	b212      	sxth	r2, r2
 80175a0:	4290      	cmp	r0, r2
 80175a2:	d1e1      	bne.n	8017568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80175a4:	e7f6      	b.n	8017594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80175a6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80175aa:	2e07      	cmp	r6, #7
 80175ac:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80175b0:	d812      	bhi.n	80175d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80175b2:	1c75      	adds	r5, r6, #1
 80175b4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80175b8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80175bc:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80175c0:	9d01      	ldr	r5, [sp, #4]
 80175c2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80175c6:	442c      	add	r4, r5
 80175c8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80175cc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80175d0:	8061      	strh	r1, [r4, #2]
 80175d2:	80a2      	strh	r2, [r4, #4]
 80175d4:	80e3      	strh	r3, [r4, #6]
 80175d6:	e581      	b.n	80170dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80175d8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80175dc:	3e01      	subs	r6, #1
 80175de:	445c      	add	r4, fp
 80175e0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80175e4:	f04f 37ff 	mov.w	r7, #4294967295
 80175e8:	2500      	movs	r5, #0
 80175ea:	9305      	str	r3, [sp, #20]
 80175ec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80175f0:	1e72      	subs	r2, r6, #1
 80175f2:	9302      	str	r3, [sp, #8]
 80175f4:	4691      	mov	r9, r2
 80175f6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80175fa:	9304      	str	r3, [sp, #16]
 80175fc:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8017600:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801760a:	9207      	str	r2, [sp, #28]
 801760c:	bf16      	itet	ne
 801760e:	9905      	ldrne	r1, [sp, #20]
 8017610:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017614:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017618:	9306      	str	r3, [sp, #24]
 801761a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801761e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017622:	fb18 f801 	smulbb	r8, r8, r1
 8017626:	6859      	ldr	r1, [r3, #4]
 8017628:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801762c:	4671      	mov	r1, lr
 801762e:	a80c      	add	r0, sp, #48	; 0x30
 8017630:	f7ff fb6a 	bl	8016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017634:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8017638:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801763c:	f04f 0c08 	mov.w	ip, #8
 8017640:	9b04      	ldr	r3, [sp, #16]
 8017642:	9a02      	ldr	r2, [sp, #8]
 8017644:	fb10 f001 	smulbb	r0, r0, r1
 8017648:	fb02 8803 	mla	r8, r2, r3, r8
 801764c:	eba0 0108 	sub.w	r1, r0, r8
 8017650:	fb90 f0fc 	sdiv	r0, r0, ip
 8017654:	4288      	cmp	r0, r1
 8017656:	dc20      	bgt.n	801769a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8017658:	4551      	cmp	r1, sl
 801765a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801765e:	da03      	bge.n	8017668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8017660:	b1d9      	cbz	r1, 801769a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8017662:	468a      	mov	sl, r1
 8017664:	464f      	mov	r7, r9
 8017666:	4635      	mov	r5, r6
 8017668:	f109 39ff 	add.w	r9, r9, #4294967295
 801766c:	f119 0f02 	cmn.w	r9, #2
 8017670:	d1c6      	bne.n	8017600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8017672:	4616      	mov	r6, r2
 8017674:	3201      	adds	r2, #1
 8017676:	f1a4 0408 	sub.w	r4, r4, #8
 801767a:	d1b7      	bne.n	80175ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801767c:	9b01      	ldr	r3, [sp, #4]
 801767e:	b2ac      	uxth	r4, r5
 8017680:	00ed      	lsls	r5, r5, #3
 8017682:	1958      	adds	r0, r3, r5
 8017684:	1c7b      	adds	r3, r7, #1
 8017686:	d10b      	bne.n	80176a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8017688:	4601      	mov	r1, r0
 801768a:	9803      	ldr	r0, [sp, #12]
 801768c:	f7ff fb3c 	bl	8016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017690:	4621      	mov	r1, r4
 8017692:	9801      	ldr	r0, [sp, #4]
 8017694:	f7ff fc8e 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017698:	e4b6      	b.n	8017008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801769a:	464f      	mov	r7, r9
 801769c:	4635      	mov	r5, r6
 801769e:	e7ed      	b.n	801767c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80176a0:	9b01      	ldr	r3, [sp, #4]
 80176a2:	00ff      	lsls	r7, r7, #3
 80176a4:	445d      	add	r5, fp
 80176a6:	19d9      	adds	r1, r3, r7
 80176a8:	445f      	add	r7, fp
 80176aa:	f7ff fb2d 	bl	8016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80176ae:	9b03      	ldr	r3, [sp, #12]
 80176b0:	cb03      	ldmia	r3!, {r0, r1}
 80176b2:	9b03      	ldr	r3, [sp, #12]
 80176b4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80176b8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80176bc:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80176c0:	6869      	ldr	r1, [r5, #4]
 80176c2:	c303      	stmia	r3!, {r0, r1}
 80176c4:	e7e4      	b.n	8017690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80176c6:	bf00      	nop

080176c8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80176c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176cc:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80176d0:	b09b      	sub	sp, #108	; 0x6c
 80176d2:	4604      	mov	r4, r0
 80176d4:	4630      	mov	r0, r6
 80176d6:	f7fc fabe 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 80176da:	4605      	mov	r5, r0
 80176dc:	b948      	cbnz	r0, 80176f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	4620      	mov	r0, r4
 80176e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80176e8:	4798      	blx	r3
 80176ea:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80176ee:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80176f2:	4bc5      	ldr	r3, [pc, #788]	; (8017a08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d03f      	beq.n	801777a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80176fa:	4dc4      	ldr	r5, [pc, #784]	; (8017a0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80176fc:	4628      	mov	r0, r5
 80176fe:	f7fc faaa 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017702:	4606      	mov	r6, r0
 8017704:	2800      	cmp	r0, #0
 8017706:	d138      	bne.n	801777a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017708:	4628      	mov	r0, r5
 801770a:	f7ff f99b 	bl	8016a44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	6829      	ldr	r1, [r5, #0]
 8017712:	4620      	mov	r0, r4
 8017714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017716:	686a      	ldr	r2, [r5, #4]
 8017718:	4798      	blx	r3
 801771a:	802e      	strh	r6, [r5, #0]
 801771c:	806e      	strh	r6, [r5, #2]
 801771e:	80ae      	strh	r6, [r5, #4]
 8017720:	80ee      	strh	r6, [r5, #6]
 8017722:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8017726:	4dba      	ldr	r5, [pc, #744]	; (8017a10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8017728:	4640      	mov	r0, r8
 801772a:	f7ff fbe7 	bl	8016efc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801772e:	882e      	ldrh	r6, [r5, #0]
 8017730:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8017734:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017738:	4633      	mov	r3, r6
 801773a:	42bb      	cmp	r3, r7
 801773c:	d224      	bcs.n	8017788 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801773e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8017742:	2907      	cmp	r1, #7
 8017744:	d816      	bhi.n	8017774 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8017746:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801774a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801774e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017752:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8017756:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801775a:	1c4a      	adds	r2, r1, #1
 801775c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8017760:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8017764:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8017768:	f8a2 a002 	strh.w	sl, [r2, #2]
 801776c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017770:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017774:	3301      	adds	r3, #1
 8017776:	b29b      	uxth	r3, r3
 8017778:	e7df      	b.n	801773a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801777a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801777e:	2b00      	cmp	r3, #0
 8017780:	d1cf      	bne.n	8017722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8017782:	b01b      	add	sp, #108	; 0x6c
 8017784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017788:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801778c:	42b3      	cmp	r3, r6
 801778e:	d90c      	bls.n	80177aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8017790:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017794:	6822      	ldr	r2, [r4, #0]
 8017796:	3601      	adds	r6, #1
 8017798:	4620      	mov	r0, r4
 801779a:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801779c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80177a0:	b2b6      	uxth	r6, r6
 80177a2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80177a6:	47b8      	blx	r7
 80177a8:	e7ee      	b.n	8017788 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80177aa:	4a9a      	ldr	r2, [pc, #616]	; (8017a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80177ac:	6813      	ldr	r3, [r2, #0]
 80177ae:	4691      	mov	r9, r2
 80177b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80177b4:	2b01      	cmp	r3, #1
 80177b6:	f040 80e0 	bne.w	801797a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80177ba:	8829      	ldrh	r1, [r5, #0]
 80177bc:	2600      	movs	r6, #0
 80177be:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80177c2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80177c6:	33ae      	adds	r3, #174	; 0xae
 80177c8:	428f      	cmp	r7, r1
 80177ca:	f103 0308 	add.w	r3, r3, #8
 80177ce:	dd0a      	ble.n	80177e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80177d0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80177d4:	3101      	adds	r1, #1
 80177d6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80177da:	4402      	add	r2, r0
 80177dc:	b212      	sxth	r2, r2
 80177de:	4296      	cmp	r6, r2
 80177e0:	bfb8      	it	lt
 80177e2:	4616      	movlt	r6, r2
 80177e4:	e7f0      	b.n	80177c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80177e6:	4b8c      	ldr	r3, [pc, #560]	; (8017a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80177e8:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8017a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80177ec:	881b      	ldrh	r3, [r3, #0]
 80177ee:	2b0f      	cmp	r3, #15
 80177f0:	bf8c      	ite	hi
 80177f2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80177f6:	f04f 0b01 	movls.w	fp, #1
 80177fa:	2300      	movs	r3, #0
 80177fc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017800:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017804:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8017808:	4b82      	ldr	r3, [pc, #520]	; (8017a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801780a:	4438      	add	r0, r7
 801780c:	b207      	sxth	r7, r0
 801780e:	6818      	ldr	r0, [r3, #0]
 8017810:	42b7      	cmp	r7, r6
 8017812:	6803      	ldr	r3, [r0, #0]
 8017814:	f280 8083 	bge.w	801791e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8017818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801781c:	4798      	blx	r3
 801781e:	eb07 030b 	add.w	r3, r7, fp
 8017822:	4298      	cmp	r0, r3
 8017824:	da07      	bge.n	8017836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8017826:	42b0      	cmp	r0, r6
 8017828:	da05      	bge.n	8017836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801782a:	4287      	cmp	r7, r0
 801782c:	dd6c      	ble.n	8017908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801782e:	2f00      	cmp	r7, #0
 8017830:	dd6a      	ble.n	8017908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017832:	4630      	mov	r0, r6
 8017834:	e004      	b.n	8017840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8017836:	4287      	cmp	r7, r0
 8017838:	dcfb      	bgt.n	8017832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801783a:	42b0      	cmp	r0, r6
 801783c:	bfa8      	it	ge
 801783e:	4630      	movge	r0, r6
 8017840:	4b76      	ldr	r3, [pc, #472]	; (8017a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017842:	1bc0      	subs	r0, r0, r7
 8017844:	2200      	movs	r2, #0
 8017846:	f8ad 7016 	strh.w	r7, [sp, #22]
 801784a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801784e:	882f      	ldrh	r7, [r5, #0]
 8017850:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017854:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017858:	f8ad 001a 	strh.w	r0, [sp, #26]
 801785c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017860:	42bb      	cmp	r3, r7
 8017862:	d9cd      	bls.n	8017800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017864:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017868:	ab07      	add	r3, sp, #28
 801786a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801786e:	6851      	ldr	r1, [r2, #4]
 8017870:	c303      	stmia	r3!, {r0, r1}
 8017872:	a905      	add	r1, sp, #20
 8017874:	a807      	add	r0, sp, #28
 8017876:	f7ff f9af 	bl	8016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801787a:	2800      	cmp	r0, #0
 801787c:	d04c      	beq.n	8017918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801787e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017882:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8017886:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801788a:	4686      	mov	lr, r0
 801788c:	4290      	cmp	r0, r2
 801788e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017892:	4450      	add	r0, sl
 8017894:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8017898:	bfb8      	it	lt
 801789a:	4696      	movlt	lr, r2
 801789c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80178a0:	4452      	add	r2, sl
 80178a2:	b280      	uxth	r0, r0
 80178a4:	4299      	cmp	r1, r3
 80178a6:	468c      	mov	ip, r1
 80178a8:	b292      	uxth	r2, r2
 80178aa:	9302      	str	r3, [sp, #8]
 80178ac:	bfb8      	it	lt
 80178ae:	469c      	movlt	ip, r3
 80178b0:	b203      	sxth	r3, r0
 80178b2:	fa0f fa82 	sxth.w	sl, r2
 80178b6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80178ba:	f8ad c01e 	strh.w	ip, [sp, #30]
 80178be:	4553      	cmp	r3, sl
 80178c0:	bfb8      	it	lt
 80178c2:	4602      	movlt	r2, r0
 80178c4:	9b02      	ldr	r3, [sp, #8]
 80178c6:	eba2 020e 	sub.w	r2, r2, lr
 80178ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80178ce:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80178d2:	4411      	add	r1, r2
 80178d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80178d8:	4413      	add	r3, r2
 80178da:	b289      	uxth	r1, r1
 80178dc:	b29b      	uxth	r3, r3
 80178de:	b208      	sxth	r0, r1
 80178e0:	b21a      	sxth	r2, r3
 80178e2:	4290      	cmp	r0, r2
 80178e4:	bfb8      	it	lt
 80178e6:	460b      	movlt	r3, r1
 80178e8:	eba3 030c 	sub.w	r3, r3, ip
 80178ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80178f0:	a807      	add	r0, sp, #28
 80178f2:	f7fc f9b0 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 80178f6:	b920      	cbnz	r0, 8017902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80178f8:	6823      	ldr	r3, [r4, #0]
 80178fa:	a907      	add	r1, sp, #28
 80178fc:	4620      	mov	r0, r4
 80178fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017900:	4798      	blx	r3
 8017902:	3701      	adds	r7, #1
 8017904:	b2bf      	uxth	r7, r7
 8017906:	e7a9      	b.n	801785c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8017908:	f8d9 0000 	ldr.w	r0, [r9]
 801790c:	2101      	movs	r1, #1
 801790e:	6803      	ldr	r3, [r0, #0]
 8017910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017914:	4798      	blx	r3
 8017916:	e773      	b.n	8017800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017918:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801791c:	e7e8      	b.n	80178f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017920:	4798      	blx	r3
 8017922:	4b3f      	ldr	r3, [pc, #252]	; (8017a20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	f43f af2b 	beq.w	8017782 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801792c:	2300      	movs	r3, #0
 801792e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017932:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8017936:	882b      	ldrh	r3, [r5, #0]
 8017938:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801793c:	42ab      	cmp	r3, r5
 801793e:	f4bf af20 	bcs.w	8017782 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017942:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8017946:	2907      	cmp	r1, #7
 8017948:	d814      	bhi.n	8017974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801794a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801794e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017952:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8017956:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801795a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801795e:	1c4a      	adds	r2, r1, #1
 8017960:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8017964:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017968:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801796c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8017970:	8097      	strh	r7, [r2, #4]
 8017972:	80d6      	strh	r6, [r2, #6]
 8017974:	3301      	adds	r3, #1
 8017976:	b29b      	uxth	r3, r3
 8017978:	e7e0      	b.n	801793c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801797a:	2b02      	cmp	r3, #2
 801797c:	f040 8133 	bne.w	8017be6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8017980:	4b28      	ldr	r3, [pc, #160]	; (8017a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017982:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 8017986:	781b      	ldrb	r3, [r3, #0]
 8017988:	2b01      	cmp	r3, #1
 801798a:	f000 8098 	beq.w	8017abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801798e:	882a      	ldrh	r2, [r5, #0]
 8017990:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8017994:	3201      	adds	r2, #1
 8017996:	b292      	uxth	r2, r2
 8017998:	2900      	cmp	r1, #0
 801799a:	d0c2      	beq.n	8017922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801799c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 80179a0:	4694      	mov	ip, r2
 80179a2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80179a6:	f04f 0900 	mov.w	r9, #0
 80179aa:	441e      	add	r6, r3
 80179ac:	b236      	sxth	r6, r6
 80179ae:	fa1f f38c 	uxth.w	r3, ip
 80179b2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80179b6:	4299      	cmp	r1, r3
 80179b8:	f240 80be 	bls.w	8017b38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80179bc:	4427      	add	r7, r4
 80179be:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80179c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80179c6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 80179ca:	4283      	cmp	r3, r0
 80179cc:	f340 80a0 	ble.w	8017b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80179d0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 80179d4:	46e1      	mov	r9, ip
 80179d6:	4406      	add	r6, r0
 80179d8:	b236      	sxth	r6, r6
 80179da:	429e      	cmp	r6, r3
 80179dc:	bfa8      	it	ge
 80179de:	461e      	movge	r6, r3
 80179e0:	f10c 0c01 	add.w	ip, ip, #1
 80179e4:	e7e3      	b.n	80179ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80179e6:	d10a      	bne.n	80179fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80179e8:	4562      	cmp	r2, ip
 80179ea:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 80179ee:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 80179f2:	bfb8      	it	lt
 80179f4:	4662      	movlt	r2, ip
 80179f6:	4288      	cmp	r0, r1
 80179f8:	bfb8      	it	lt
 80179fa:	461f      	movlt	r7, r3
 80179fc:	e086      	b.n	8017b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80179fe:	428a      	cmp	r2, r1
 8017a00:	bfb8      	it	lt
 8017a02:	460a      	movlt	r2, r1
 8017a04:	e082      	b.n	8017b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017a06:	bf00      	nop
 8017a08:	24006a74 	.word	0x24006a74
 8017a0c:	24006a80 	.word	0x24006a80
 8017a10:	24000050 	.word	0x24000050
 8017a14:	24006a3c 	.word	0x24006a3c
 8017a18:	24006a32 	.word	0x24006a32
 8017a1c:	24006a30 	.word	0x24006a30
 8017a20:	24006a3a 	.word	0x24006a3a
 8017a24:	24006a34 	.word	0x24006a34
 8017a28:	19a1      	adds	r1, r4, r6
 8017a2a:	ab07      	add	r3, sp, #28
 8017a2c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017a30:	6849      	ldr	r1, [r1, #4]
 8017a32:	c303      	stmia	r3!, {r0, r1}
 8017a34:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017a38:	a807      	add	r0, sp, #28
 8017a3a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017a3e:	2b13      	cmp	r3, #19
 8017a40:	440b      	add	r3, r1
 8017a42:	bfd8      	it	le
 8017a44:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017a48:	1a9b      	subs	r3, r3, r2
 8017a4a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017a4e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017a52:	f7ff f811 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a56:	a807      	add	r0, sp, #28
 8017a58:	f7fc f8fd 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a5c:	bb78      	cbnz	r0, 8017abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017a5e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017a62:	4426      	add	r6, r4
 8017a64:	f8d9 0000 	ldr.w	r0, [r9]
 8017a68:	f1bc 0f14 	cmp.w	ip, #20
 8017a6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017a70:	f8d0 e000 	ldr.w	lr, [r0]
 8017a74:	bfa8      	it	ge
 8017a76:	f04f 0c14 	movge.w	ip, #20
 8017a7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017a7e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017a82:	fa1f fc8c 	uxth.w	ip, ip
 8017a86:	f8cd c000 	str.w	ip, [sp]
 8017a8a:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8017a8e:	47d8      	blx	fp
 8017a90:	4683      	mov	fp, r0
 8017a92:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017a96:	a807      	add	r0, sp, #28
 8017a98:	f7fe ffd4 	bl	8016a44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017a9c:	6823      	ldr	r3, [r4, #0]
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	a907      	add	r1, sp, #28
 8017aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017aa4:	4798      	blx	r3
 8017aa6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8017aaa:	eba0 000b 	sub.w	r0, r0, fp
 8017aae:	b200      	sxth	r0, r0
 8017ab0:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8017ab4:	b918      	cbnz	r0, 8017abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017ab6:	b2b9      	uxth	r1, r7
 8017ab8:	4650      	mov	r0, sl
 8017aba:	f7ff fa7b 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017abe:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8017ac2:	f1bb 0f00 	cmp.w	fp, #0
 8017ac6:	f43f af2c 	beq.w	8017922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017aca:	882b      	ldrh	r3, [r5, #0]
 8017acc:	2700      	movs	r7, #0
 8017ace:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8017ad2:	3301      	adds	r3, #1
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	b299      	uxth	r1, r3
 8017ad8:	00fe      	lsls	r6, r7, #3
 8017ada:	458b      	cmp	fp, r1
 8017adc:	d9a4      	bls.n	8017a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017ade:	4426      	add	r6, r4
 8017ae0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017ae4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8017ae8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8017aec:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8017af0:	4408      	add	r0, r1
 8017af2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8017af6:	4461      	add	r1, ip
 8017af8:	b200      	sxth	r0, r0
 8017afa:	b209      	sxth	r1, r1
 8017afc:	4288      	cmp	r0, r1
 8017afe:	f6bf af72 	bge.w	80179e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017b02:	4584      	cmp	ip, r0
 8017b04:	4662      	mov	r2, ip
 8017b06:	461f      	mov	r7, r3
 8017b08:	bfb8      	it	lt
 8017b0a:	4602      	movlt	r2, r0
 8017b0c:	3301      	adds	r3, #1
 8017b0e:	e7e2      	b.n	8017ad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017b10:	d10e      	bne.n	8017b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017b12:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8017b16:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8017b1a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8017b1e:	4473      	add	r3, lr
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	429e      	cmp	r6, r3
 8017b24:	bfa8      	it	ge
 8017b26:	461e      	movge	r6, r3
 8017b28:	4287      	cmp	r7, r0
 8017b2a:	bfb8      	it	lt
 8017b2c:	46e1      	movlt	r9, ip
 8017b2e:	e757      	b.n	80179e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017b30:	4286      	cmp	r6, r0
 8017b32:	bfa8      	it	ge
 8017b34:	4606      	movge	r6, r0
 8017b36:	e753      	b.n	80179e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017b38:	eb0a 0007 	add.w	r0, sl, r7
 8017b3c:	4427      	add	r7, r4
 8017b3e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8017b42:	f1bb 0f13 	cmp.w	fp, #19
 8017b46:	bfdc      	itt	le
 8017b48:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8017b4c:	445e      	addle	r6, fp
 8017b4e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017b52:	bfd8      	it	le
 8017b54:	b236      	sxthle	r6, r6
 8017b56:	f7fc f87e 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b5a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	f47f af1a 	bne.w	8017998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8017b64:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8017b68:	fa1f fb8b 	uxth.w	fp, fp
 8017b6c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017b70:	1ab6      	subs	r6, r6, r2
 8017b72:	4829      	ldr	r0, [pc, #164]	; (8017c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8017b74:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8017b78:	2e14      	cmp	r6, #20
 8017b7a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017b7e:	6800      	ldr	r0, [r0, #0]
 8017b80:	bfa8      	it	ge
 8017b82:	2614      	movge	r6, #20
 8017b84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017b88:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017b8c:	b289      	uxth	r1, r1
 8017b8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017b92:	b2b6      	uxth	r6, r6
 8017b94:	f8d0 c000 	ldr.w	ip, [r0]
 8017b98:	b292      	uxth	r2, r2
 8017b9a:	455e      	cmp	r6, fp
 8017b9c:	bf94      	ite	ls
 8017b9e:	9600      	strls	r6, [sp, #0]
 8017ba0:	f8cd b000 	strhi.w	fp, [sp]
 8017ba4:	b29b      	uxth	r3, r3
 8017ba6:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8017baa:	47b0      	blx	r6
 8017bac:	6823      	ldr	r3, [r4, #0]
 8017bae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017bb2:	a907      	add	r1, sp, #28
 8017bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	4798      	blx	r3
 8017bba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017bbe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017bc2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8017bc6:	1a5b      	subs	r3, r3, r1
 8017bc8:	440a      	add	r2, r1
 8017bca:	b21b      	sxth	r3, r3
 8017bcc:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8017bd0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	f47f aeda 	bne.w	801798e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017bda:	fa1f f189 	uxth.w	r1, r9
 8017bde:	4650      	mov	r0, sl
 8017be0:	f7ff f9e8 	bl	8016fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017be4:	e6d3      	b.n	801798e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017be6:	882e      	ldrh	r6, [r5, #0]
 8017be8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017bec:	42b3      	cmp	r3, r6
 8017bee:	f67f ae98 	bls.w	8017922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017bf2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8017bf6:	ab07      	add	r3, sp, #28
 8017bf8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017bfc:	6851      	ldr	r1, [r2, #4]
 8017bfe:	c303      	stmia	r3!, {r0, r1}
 8017c00:	a807      	add	r0, sp, #28
 8017c02:	f7fc f828 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c06:	b920      	cbnz	r0, 8017c12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8017c08:	6823      	ldr	r3, [r4, #0]
 8017c0a:	a907      	add	r1, sp, #28
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c10:	4798      	blx	r3
 8017c12:	3601      	adds	r6, #1
 8017c14:	b2b6      	uxth	r6, r6
 8017c16:	e7e7      	b.n	8017be8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017c18:	24006a3c 	.word	0x24006a3c

08017c1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017c1c:	4b03      	ldr	r3, [pc, #12]	; (8017c2c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017c1e:	2200      	movs	r2, #0
 8017c20:	801a      	strh	r2, [r3, #0]
 8017c22:	805a      	strh	r2, [r3, #2]
 8017c24:	809a      	strh	r2, [r3, #4]
 8017c26:	80da      	strh	r2, [r3, #6]
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	24006a80 	.word	0x24006a80

08017c30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c34:	b09d      	sub	sp, #116	; 0x74
 8017c36:	4606      	mov	r6, r0
 8017c38:	4614      	mov	r4, r2
 8017c3a:	468a      	mov	sl, r1
 8017c3c:	a803      	add	r0, sp, #12
 8017c3e:	461d      	mov	r5, r3
 8017c40:	f000 fd72 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8017c44:	6833      	ldr	r3, [r6, #0]
 8017c46:	4630      	mov	r0, r6
 8017c48:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c4e:	4798      	blx	r3
 8017c50:	6833      	ldr	r3, [r6, #0]
 8017c52:	4607      	mov	r7, r0
 8017c54:	4630      	mov	r0, r6
 8017c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c58:	4798      	blx	r3
 8017c5a:	462a      	mov	r2, r5
 8017c5c:	2500      	movs	r5, #0
 8017c5e:	4621      	mov	r1, r4
 8017c60:	9000      	str	r0, [sp, #0]
 8017c62:	463b      	mov	r3, r7
 8017c64:	462c      	mov	r4, r5
 8017c66:	46a9      	mov	r9, r5
 8017c68:	46a8      	mov	r8, r5
 8017c6a:	a803      	add	r0, sp, #12
 8017c6c:	f000 fdb7 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c70:	2300      	movs	r3, #0
 8017c72:	9302      	str	r3, [sp, #8]
 8017c74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017c78:	429c      	cmp	r4, r3
 8017c7a:	d002      	beq.n	8017c82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017c7c:	455c      	cmp	r4, fp
 8017c7e:	bf18      	it	ne
 8017c80:	4625      	movne	r5, r4
 8017c82:	ab02      	add	r3, sp, #8
 8017c84:	4632      	mov	r2, r6
 8017c86:	4651      	mov	r1, sl
 8017c88:	a803      	add	r0, sp, #12
 8017c8a:	f001 f8ad 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c8e:	4604      	mov	r4, r0
 8017c90:	b108      	cbz	r0, 8017c96 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017c92:	280a      	cmp	r0, #10
 8017c94:	d10a      	bne.n	8017cac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017c96:	45c1      	cmp	r9, r8
 8017c98:	bf38      	it	cc
 8017c9a:	46c1      	movcc	r9, r8
 8017c9c:	f04f 0800 	mov.w	r8, #0
 8017ca0:	2c00      	cmp	r4, #0
 8017ca2:	d1e5      	bne.n	8017c70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017ca4:	4648      	mov	r0, r9
 8017ca6:	b01d      	add	sp, #116	; 0x74
 8017ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cac:	9a02      	ldr	r2, [sp, #8]
 8017cae:	2a00      	cmp	r2, #0
 8017cb0:	d0de      	beq.n	8017c70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017cb2:	7b57      	ldrb	r7, [r2, #13]
 8017cb4:	4629      	mov	r1, r5
 8017cb6:	6833      	ldr	r3, [r6, #0]
 8017cb8:	007f      	lsls	r7, r7, #1
 8017cba:	8894      	ldrh	r4, [r2, #4]
 8017cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cbe:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017cc2:	7a97      	ldrb	r7, [r2, #10]
 8017cc4:	4307      	orrs	r7, r0
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	4798      	blx	r3
 8017cca:	4438      	add	r0, r7
 8017ccc:	4480      	add	r8, r0
 8017cce:	fa1f f888 	uxth.w	r8, r8
 8017cd2:	e7e5      	b.n	8017ca0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017cd4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017cd4:	b508      	push	{r3, lr}
 8017cd6:	6803      	ldr	r3, [r0, #0]
 8017cd8:	68db      	ldr	r3, [r3, #12]
 8017cda:	4798      	blx	r3
 8017cdc:	b128      	cbz	r0, 8017cea <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017cde:	7b43      	ldrb	r3, [r0, #13]
 8017ce0:	7a80      	ldrb	r0, [r0, #10]
 8017ce2:	005b      	lsls	r3, r3, #1
 8017ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ce8:	4318      	orrs	r0, r3
 8017cea:	bd08      	pop	{r3, pc}

08017cec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017cec:	b40e      	push	{r1, r2, r3}
 8017cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cf0:	b09e      	sub	sp, #120	; 0x78
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	ab23      	add	r3, sp, #140	; 0x8c
 8017cf6:	a805      	add	r0, sp, #20
 8017cf8:	f853 4b04 	ldr.w	r4, [r3], #4
 8017cfc:	9303      	str	r3, [sp, #12]
 8017cfe:	f000 fd13 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8017d02:	682b      	ldr	r3, [r5, #0]
 8017d04:	4628      	mov	r0, r5
 8017d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d08:	4798      	blx	r3
 8017d0a:	682b      	ldr	r3, [r5, #0]
 8017d0c:	4606      	mov	r6, r0
 8017d0e:	4628      	mov	r0, r5
 8017d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d12:	4798      	blx	r3
 8017d14:	4633      	mov	r3, r6
 8017d16:	4621      	mov	r1, r4
 8017d18:	ae1e      	add	r6, sp, #120	; 0x78
 8017d1a:	2400      	movs	r4, #0
 8017d1c:	9000      	str	r0, [sp, #0]
 8017d1e:	9a03      	ldr	r2, [sp, #12]
 8017d20:	a805      	add	r0, sp, #20
 8017d22:	f000 fd5c 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017d26:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017d2a:	462a      	mov	r2, r5
 8017d2c:	4633      	mov	r3, r6
 8017d2e:	4621      	mov	r1, r4
 8017d30:	a805      	add	r0, sp, #20
 8017d32:	f001 f859 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d36:	b300      	cbz	r0, 8017d7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017d38:	280a      	cmp	r0, #10
 8017d3a:	d01a      	beq.n	8017d72 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017d3c:	9f04      	ldr	r7, [sp, #16]
 8017d3e:	b1c7      	cbz	r7, 8017d72 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017d40:	7b78      	ldrb	r0, [r7, #13]
 8017d42:	7a3b      	ldrb	r3, [r7, #8]
 8017d44:	00c1      	lsls	r1, r0, #3
 8017d46:	88ea      	ldrh	r2, [r5, #6]
 8017d48:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017d4c:	4319      	orrs	r1, r3
 8017d4e:	0643      	lsls	r3, r0, #25
 8017d50:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017d54:	bf48      	it	mi
 8017d56:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017d5a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d5e:	bf48      	it	mi
 8017d60:	b219      	sxthmi	r1, r3
 8017d62:	79fb      	ldrb	r3, [r7, #7]
 8017d64:	4303      	orrs	r3, r0
 8017d66:	4413      	add	r3, r2
 8017d68:	1a5b      	subs	r3, r3, r1
 8017d6a:	b21b      	sxth	r3, r3
 8017d6c:	429c      	cmp	r4, r3
 8017d6e:	bfb8      	it	lt
 8017d70:	461c      	movlt	r4, r3
 8017d72:	4633      	mov	r3, r6
 8017d74:	462a      	mov	r2, r5
 8017d76:	2100      	movs	r1, #0
 8017d78:	e7da      	b.n	8017d30 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017d7a:	b2a0      	uxth	r0, r4
 8017d7c:	b01e      	add	sp, #120	; 0x78
 8017d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d82:	b003      	add	sp, #12
 8017d84:	4770      	bx	lr

08017d86 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017d86:	7a43      	ldrb	r3, [r0, #9]
 8017d88:	8880      	ldrh	r0, [r0, #4]
 8017d8a:	4418      	add	r0, r3
 8017d8c:	b280      	uxth	r0, r0
 8017d8e:	4770      	bx	lr

08017d90 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017d90:	6803      	ldr	r3, [r0, #0]
 8017d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d94:	4718      	bx	r3

08017d96 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017d96:	b40e      	push	{r1, r2, r3}
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	b09d      	sub	sp, #116	; 0x74
 8017d9c:	4604      	mov	r4, r0
 8017d9e:	ab21      	add	r3, sp, #132	; 0x84
 8017da0:	a803      	add	r0, sp, #12
 8017da2:	f853 5b04 	ldr.w	r5, [r3], #4
 8017da6:	9302      	str	r3, [sp, #8]
 8017da8:	f000 fcbe 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8017dac:	6823      	ldr	r3, [r4, #0]
 8017dae:	4620      	mov	r0, r4
 8017db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017db2:	4798      	blx	r3
 8017db4:	6823      	ldr	r3, [r4, #0]
 8017db6:	4606      	mov	r6, r0
 8017db8:	4620      	mov	r0, r4
 8017dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017dbc:	2401      	movs	r4, #1
 8017dbe:	4798      	blx	r3
 8017dc0:	4633      	mov	r3, r6
 8017dc2:	9000      	str	r0, [sp, #0]
 8017dc4:	4629      	mov	r1, r5
 8017dc6:	9a02      	ldr	r2, [sp, #8]
 8017dc8:	a803      	add	r0, sp, #12
 8017dca:	f000 fd08 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017dce:	a803      	add	r0, sp, #12
 8017dd0:	f001 f8d6 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017dd4:	b2a3      	uxth	r3, r4
 8017dd6:	b138      	cbz	r0, 8017de8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017dd8:	280a      	cmp	r0, #10
 8017dda:	a803      	add	r0, sp, #12
 8017ddc:	bf04      	itt	eq
 8017dde:	3301      	addeq	r3, #1
 8017de0:	b21c      	sxtheq	r4, r3
 8017de2:	f001 f8cd 	bl	8018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017de6:	e7f5      	b.n	8017dd4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017de8:	4618      	mov	r0, r3
 8017dea:	b01d      	add	sp, #116	; 0x74
 8017dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017df0:	b003      	add	sp, #12
 8017df2:	4770      	bx	lr

08017df4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017df4:	b40e      	push	{r1, r2, r3}
 8017df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017df8:	b09e      	sub	sp, #120	; 0x78
 8017dfa:	4604      	mov	r4, r0
 8017dfc:	ab23      	add	r3, sp, #140	; 0x8c
 8017dfe:	a805      	add	r0, sp, #20
 8017e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8017e04:	9303      	str	r3, [sp, #12]
 8017e06:	f000 fc8f 	bl	8018728 <_ZN8touchgfx12TextProviderC1Ev>
 8017e0a:	6823      	ldr	r3, [r4, #0]
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e10:	4798      	blx	r3
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	4606      	mov	r6, r0
 8017e16:	4620      	mov	r0, r4
 8017e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e1a:	4798      	blx	r3
 8017e1c:	4633      	mov	r3, r6
 8017e1e:	4629      	mov	r1, r5
 8017e20:	9000      	str	r0, [sp, #0]
 8017e22:	9a03      	ldr	r2, [sp, #12]
 8017e24:	a805      	add	r0, sp, #20
 8017e26:	f000 fcda 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017e2a:	ad1e      	add	r5, sp, #120	; 0x78
 8017e2c:	2100      	movs	r1, #0
 8017e2e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017e32:	4622      	mov	r2, r4
 8017e34:	a805      	add	r0, sp, #20
 8017e36:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017e3a:	462b      	mov	r3, r5
 8017e3c:	f000 ffd4 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e40:	b1d8      	cbz	r0, 8017e7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017e42:	280a      	cmp	r0, #10
 8017e44:	d012      	beq.n	8017e6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017e46:	9804      	ldr	r0, [sp, #16]
 8017e48:	b180      	cbz	r0, 8017e6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017e4a:	7b47      	ldrb	r7, [r0, #13]
 8017e4c:	88e2      	ldrh	r2, [r4, #6]
 8017e4e:	00fb      	lsls	r3, r7, #3
 8017e50:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017e54:	7a03      	ldrb	r3, [r0, #8]
 8017e56:	430b      	orrs	r3, r1
 8017e58:	0679      	lsls	r1, r7, #25
 8017e5a:	bf44      	itt	mi
 8017e5c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e60:	b21b      	sxthmi	r3, r3
 8017e62:	1ad3      	subs	r3, r2, r3
 8017e64:	b21b      	sxth	r3, r3
 8017e66:	429e      	cmp	r6, r3
 8017e68:	bfa8      	it	ge
 8017e6a:	461e      	movge	r6, r3
 8017e6c:	462b      	mov	r3, r5
 8017e6e:	4622      	mov	r2, r4
 8017e70:	2100      	movs	r1, #0
 8017e72:	a805      	add	r0, sp, #20
 8017e74:	f000 ffb8 	bl	8018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e78:	e7e2      	b.n	8017e40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017e7a:	4630      	mov	r0, r6
 8017e7c:	b01e      	add	sp, #120	; 0x78
 8017e7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e82:	b003      	add	sp, #12
 8017e84:	4770      	bx	lr

08017e86 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017e86:	b513      	push	{r0, r1, r4, lr}
 8017e88:	6803      	ldr	r3, [r0, #0]
 8017e8a:	2400      	movs	r4, #0
 8017e8c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017e90:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e94:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e98:	4669      	mov	r1, sp
 8017e9a:	691b      	ldr	r3, [r3, #16]
 8017e9c:	9400      	str	r4, [sp, #0]
 8017e9e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017ea2:	4798      	blx	r3
 8017ea4:	b002      	add	sp, #8
 8017ea6:	bd10      	pop	{r4, pc}

08017ea8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	680b      	ldr	r3, [r1, #0]
 8017eac:	460c      	mov	r4, r1
 8017eae:	4605      	mov	r5, r0
 8017eb0:	68db      	ldr	r3, [r3, #12]
 8017eb2:	4798      	blx	r3
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	4629      	mov	r1, r5
 8017eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ebc:	4798      	blx	r3
 8017ebe:	4628      	mov	r0, r5
 8017ec0:	bd38      	pop	{r3, r4, r5, pc}

08017ec2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017ec2:	b410      	push	{r4}
 8017ec4:	880a      	ldrh	r2, [r1, #0]
 8017ec6:	8884      	ldrh	r4, [r0, #4]
 8017ec8:	4422      	add	r2, r4
 8017eca:	800a      	strh	r2, [r1, #0]
 8017ecc:	884a      	ldrh	r2, [r1, #2]
 8017ece:	88c4      	ldrh	r4, [r0, #6]
 8017ed0:	4422      	add	r2, r4
 8017ed2:	804a      	strh	r2, [r1, #2]
 8017ed4:	6940      	ldr	r0, [r0, #20]
 8017ed6:	b120      	cbz	r0, 8017ee2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017ed8:	6803      	ldr	r3, [r0, #0]
 8017eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ee0:	4718      	bx	r3
 8017ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ee6:	4770      	bx	lr

08017ee8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	8882      	ldrh	r2, [r0, #4]
 8017eec:	460c      	mov	r4, r1
 8017eee:	880b      	ldrh	r3, [r1, #0]
 8017ef0:	4605      	mov	r5, r0
 8017ef2:	4413      	add	r3, r2
 8017ef4:	800b      	strh	r3, [r1, #0]
 8017ef6:	884b      	ldrh	r3, [r1, #2]
 8017ef8:	88c2      	ldrh	r2, [r0, #6]
 8017efa:	4413      	add	r3, r2
 8017efc:	804b      	strh	r3, [r1, #2]
 8017efe:	1d01      	adds	r1, r0, #4
 8017f00:	4620      	mov	r0, r4
 8017f02:	f7fb fe65 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017f06:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	dd0b      	ble.n	8017f26 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f0e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	dd07      	ble.n	8017f26 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f16:	6968      	ldr	r0, [r5, #20]
 8017f18:	b128      	cbz	r0, 8017f26 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f1a:	6803      	ldr	r3, [r0, #0]
 8017f1c:	4621      	mov	r1, r4
 8017f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f24:	4718      	bx	r3
 8017f26:	bd70      	pop	{r4, r5, r6, pc}

08017f28 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017f28:	b570      	push	{r4, r5, r6, lr}
 8017f2a:	8882      	ldrh	r2, [r0, #4]
 8017f2c:	460c      	mov	r4, r1
 8017f2e:	880b      	ldrh	r3, [r1, #0]
 8017f30:	4605      	mov	r5, r0
 8017f32:	4413      	add	r3, r2
 8017f34:	800b      	strh	r3, [r1, #0]
 8017f36:	884b      	ldrh	r3, [r1, #2]
 8017f38:	88c2      	ldrh	r2, [r0, #6]
 8017f3a:	4413      	add	r3, r2
 8017f3c:	804b      	strh	r3, [r1, #2]
 8017f3e:	1d01      	adds	r1, r0, #4
 8017f40:	4620      	mov	r0, r4
 8017f42:	f7fb fe45 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017f46:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	dd19      	ble.n	8017f82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017f4e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	dd15      	ble.n	8017f82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017f56:	6968      	ldr	r0, [r5, #20]
 8017f58:	b128      	cbz	r0, 8017f66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017f5a:	6803      	ldr	r3, [r0, #0]
 8017f5c:	4621      	mov	r1, r4
 8017f5e:	691b      	ldr	r3, [r3, #16]
 8017f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f64:	4718      	bx	r3
 8017f66:	4b07      	ldr	r3, [pc, #28]	; (8017f84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	429d      	cmp	r5, r3
 8017f6e:	d108      	bne.n	8017f82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017f70:	f7fe ff10 	bl	8016d94 <_ZN8touchgfx11Application11getInstanceEv>
 8017f74:	6803      	ldr	r3, [r0, #0]
 8017f76:	6821      	ldr	r1, [r4, #0]
 8017f78:	6862      	ldr	r2, [r4, #4]
 8017f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f80:	4718      	bx	r3
 8017f82:	bd70      	pop	{r4, r5, r6, pc}
 8017f84:	24006a78 	.word	0x24006a78

08017f88 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	4616      	mov	r6, r2
 8017f8e:	460d      	mov	r5, r1
 8017f90:	b901      	cbnz	r1, 8017f94 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017f92:	b192      	cbz	r2, 8017fba <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017f94:	6823      	ldr	r3, [r4, #0]
 8017f96:	4620      	mov	r0, r4
 8017f98:	699b      	ldr	r3, [r3, #24]
 8017f9a:	4798      	blx	r3
 8017f9c:	88e2      	ldrh	r2, [r4, #6]
 8017f9e:	88a1      	ldrh	r1, [r4, #4]
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	4432      	add	r2, r6
 8017fa4:	4429      	add	r1, r5
 8017fa6:	b212      	sxth	r2, r2
 8017fa8:	b209      	sxth	r1, r1
 8017faa:	f7ec fd04 	bl	80049b6 <_ZN8touchgfx8Drawable5setXYEss>
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	699b      	ldr	r3, [r3, #24]
 8017fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fb8:	4718      	bx	r3
 8017fba:	bd70      	pop	{r4, r5, r6, pc}

08017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017fbc:	b510      	push	{r4, lr}
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	4608      	mov	r0, r1
 8017fc4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017fc8:	8023      	strh	r3, [r4, #0]
 8017fca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017fce:	8063      	strh	r3, [r4, #2]
 8017fd0:	6803      	ldr	r3, [r0, #0]
 8017fd2:	80a1      	strh	r1, [r4, #4]
 8017fd4:	4621      	mov	r1, r4
 8017fd6:	80e2      	strh	r2, [r4, #6]
 8017fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fda:	4798      	blx	r3
 8017fdc:	4620      	mov	r0, r4
 8017fde:	bd10      	pop	{r4, pc}

08017fe0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017fe0:	b530      	push	{r4, r5, lr}
 8017fe2:	8083      	strh	r3, [r0, #4]
 8017fe4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017fe8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017fec:	80c3      	strh	r3, [r0, #6]
 8017fee:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017ff2:	6141      	str	r1, [r0, #20]
 8017ff4:	7203      	strb	r3, [r0, #8]
 8017ff6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017ffa:	8302      	strh	r2, [r0, #24]
 8017ffc:	7243      	strb	r3, [r0, #9]
 8017ffe:	7a83      	ldrb	r3, [r0, #10]
 8018000:	f365 0306 	bfi	r3, r5, #0, #7
 8018004:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018008:	f365 13c7 	bfi	r3, r5, #7, #1
 801800c:	7283      	strb	r3, [r0, #10]
 801800e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018012:	72c3      	strb	r3, [r0, #11]
 8018014:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018018:	7303      	strb	r3, [r0, #12]
 801801a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801801e:	81c3      	strh	r3, [r0, #14]
 8018020:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018024:	8203      	strh	r3, [r0, #16]
 8018026:	4b01      	ldr	r3, [pc, #4]	; (801802c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018028:	6003      	str	r3, [r0, #0]
 801802a:	bd30      	pop	{r4, r5, pc}
 801802c:	080254ac 	.word	0x080254ac

08018030 <_ZNK8touchgfx9ConstFont4findEt>:
 8018030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018032:	6944      	ldr	r4, [r0, #20]
 8018034:	b3bc      	cbz	r4, 80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018036:	88a3      	ldrh	r3, [r4, #4]
 8018038:	8b02      	ldrh	r2, [r0, #24]
 801803a:	1acb      	subs	r3, r1, r3
 801803c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018040:	d431      	bmi.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018042:	4293      	cmp	r3, r2
 8018044:	dd0c      	ble.n	8018060 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018046:	230e      	movs	r3, #14
 8018048:	fb03 4302 	mla	r3, r3, r2, r4
 801804c:	889b      	ldrh	r3, [r3, #4]
 801804e:	1a5b      	subs	r3, r3, r1
 8018050:	1ad3      	subs	r3, r2, r3
 8018052:	429a      	cmp	r2, r3
 8018054:	db27      	blt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018056:	2b00      	cmp	r3, #0
 8018058:	bfbc      	itt	lt
 801805a:	2302      	movlt	r3, #2
 801805c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018060:	2500      	movs	r5, #0
 8018062:	260e      	movs	r6, #14
 8018064:	4295      	cmp	r5, r2
 8018066:	dc1e      	bgt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018068:	fb06 4003 	mla	r0, r6, r3, r4
 801806c:	8887      	ldrh	r7, [r0, #4]
 801806e:	42b9      	cmp	r1, r7
 8018070:	d01a      	beq.n	80180a8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018072:	d20d      	bcs.n	8018090 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018074:	1e5a      	subs	r2, r3, #1
 8018076:	4295      	cmp	r5, r2
 8018078:	dc15      	bgt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801807a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801807e:	1a5b      	subs	r3, r3, r1
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	429a      	cmp	r2, r3
 8018084:	db0f      	blt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018086:	429d      	cmp	r5, r3
 8018088:	ddec      	ble.n	8018064 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801808a:	1953      	adds	r3, r2, r5
 801808c:	105b      	asrs	r3, r3, #1
 801808e:	e7e9      	b.n	8018064 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018090:	1c5d      	adds	r5, r3, #1
 8018092:	42aa      	cmp	r2, r5
 8018094:	db07      	blt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018096:	8a43      	ldrh	r3, [r0, #18]
 8018098:	1acb      	subs	r3, r1, r3
 801809a:	442b      	add	r3, r5
 801809c:	429d      	cmp	r5, r3
 801809e:	dc02      	bgt.n	80180a6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80180a0:	429a      	cmp	r2, r3
 80180a2:	dadf      	bge.n	8018064 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80180a4:	e7f1      	b.n	801808a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80180a6:	2000      	movs	r0, #0
 80180a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080180aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80180aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ac:	4604      	mov	r4, r0
 80180ae:	4617      	mov	r7, r2
 80180b0:	461e      	mov	r6, r3
 80180b2:	b911      	cbnz	r1, 80180ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80180b4:	2500      	movs	r5, #0
 80180b6:	4628      	mov	r0, r5
 80180b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180ba:	290a      	cmp	r1, #10
 80180bc:	d0fa      	beq.n	80180b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180be:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80180c2:	4291      	cmp	r1, r2
 80180c4:	d0f6      	beq.n	80180b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180c6:	f242 020b 	movw	r2, #8203	; 0x200b
 80180ca:	4291      	cmp	r1, r2
 80180cc:	d0f2      	beq.n	80180b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180ce:	f7ff ffaf 	bl	8018030 <_ZNK8touchgfx9ConstFont4findEt>
 80180d2:	4605      	mov	r5, r0
 80180d4:	b950      	cbnz	r0, 80180ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80180d6:	6823      	ldr	r3, [r4, #0]
 80180d8:	4620      	mov	r0, r4
 80180da:	691b      	ldr	r3, [r3, #16]
 80180dc:	4798      	blx	r3
 80180de:	4601      	mov	r1, r0
 80180e0:	4620      	mov	r0, r4
 80180e2:	f7ff ffa5 	bl	8018030 <_ZNK8touchgfx9ConstFont4findEt>
 80180e6:	4605      	mov	r5, r0
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d0e3      	beq.n	80180b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180ec:	6823      	ldr	r3, [r4, #0]
 80180ee:	4629      	mov	r1, r5
 80180f0:	4620      	mov	r0, r4
 80180f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80180f4:	4798      	blx	r3
 80180f6:	6038      	str	r0, [r7, #0]
 80180f8:	6823      	ldr	r3, [r4, #0]
 80180fa:	4620      	mov	r0, r4
 80180fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180fe:	4798      	blx	r3
 8018100:	7030      	strb	r0, [r6, #0]
 8018102:	e7d8      	b.n	80180b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018104 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018104:	2000      	movs	r0, #0
 8018106:	4770      	bx	lr

08018108 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018108:	2001      	movs	r0, #1
 801810a:	4770      	bx	lr

0801810c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801810c:	2002      	movs	r0, #2
 801810e:	4770      	bx	lr

08018110 <_ZN8touchgfx12GestureEventD1Ev>:
 8018110:	4770      	bx	lr

08018112 <_ZN8touchgfx9DragEventD1Ev>:
 8018112:	4770      	bx	lr

08018114 <_ZN8touchgfx10ClickEventD1Ev>:
 8018114:	4770      	bx	lr

08018116 <_ZN8touchgfx10ClickEventD0Ev>:
 8018116:	b510      	push	{r4, lr}
 8018118:	4604      	mov	r4, r0
 801811a:	210c      	movs	r1, #12
 801811c:	f00a fdd1 	bl	8022cc2 <_ZdlPvj>
 8018120:	4620      	mov	r0, r4
 8018122:	bd10      	pop	{r4, pc}

08018124 <_ZN8touchgfx9DragEventD0Ev>:
 8018124:	b510      	push	{r4, lr}
 8018126:	4604      	mov	r4, r0
 8018128:	2110      	movs	r1, #16
 801812a:	f00a fdca 	bl	8022cc2 <_ZdlPvj>
 801812e:	4620      	mov	r0, r4
 8018130:	bd10      	pop	{r4, pc}

08018132 <_ZN8touchgfx12GestureEventD0Ev>:
 8018132:	b510      	push	{r4, lr}
 8018134:	4604      	mov	r4, r0
 8018136:	210c      	movs	r1, #12
 8018138:	f00a fdc3 	bl	8022cc2 <_ZdlPvj>
 801813c:	4620      	mov	r0, r4
 801813e:	bd10      	pop	{r4, pc}

08018140 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018140:	b530      	push	{r4, r5, lr}
 8018142:	460d      	mov	r5, r1
 8018144:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018146:	b087      	sub	sp, #28
 8018148:	4604      	mov	r4, r0
 801814a:	b301      	cbz	r1, 801818e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801814c:	a801      	add	r0, sp, #4
 801814e:	f7ff ff35 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018152:	892a      	ldrh	r2, [r5, #8]
 8018154:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018158:	7928      	ldrb	r0, [r5, #4]
 801815a:	1ad2      	subs	r2, r2, r3
 801815c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801815e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018162:	441a      	add	r2, r3
 8018164:	896b      	ldrh	r3, [r5, #10]
 8018166:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801816a:	f88d 0010 	strb.w	r0, [sp, #16]
 801816e:	1b5b      	subs	r3, r3, r5
 8018170:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018172:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018174:	442b      	add	r3, r5
 8018176:	4d07      	ldr	r5, [pc, #28]	; (8018194 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018178:	f8ad 1012 	strh.w	r1, [sp, #18]
 801817c:	a903      	add	r1, sp, #12
 801817e:	9503      	str	r5, [sp, #12]
 8018180:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018184:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018188:	6803      	ldr	r3, [r0, #0]
 801818a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801818c:	4798      	blx	r3
 801818e:	b007      	add	sp, #28
 8018190:	bd30      	pop	{r4, r5, pc}
 8018192:	bf00      	nop
 8018194:	08025534 	.word	0x08025534

08018198 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801819c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801819e:	b08a      	sub	sp, #40	; 0x28
 80181a0:	4604      	mov	r4, r0
 80181a2:	460d      	mov	r5, r1
 80181a4:	b113      	cbz	r3, 80181ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80181a6:	790b      	ldrb	r3, [r1, #4]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d044      	beq.n	8018236 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181ac:	f104 0804 	add.w	r8, r4, #4
 80181b0:	a803      	add	r0, sp, #12
 80181b2:	4641      	mov	r1, r8
 80181b4:	f7ff ff02 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181b8:	792b      	ldrb	r3, [r5, #4]
 80181ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80181be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80181c2:	b983      	cbnz	r3, 80181e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80181c4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80181c8:	892a      	ldrh	r2, [r5, #8]
 80181ca:	88e9      	ldrh	r1, [r5, #6]
 80181cc:	4640      	mov	r0, r8
 80181ce:	1b92      	subs	r2, r2, r6
 80181d0:	9301      	str	r3, [sp, #4]
 80181d2:	1bc9      	subs	r1, r1, r7
 80181d4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80181d8:	b212      	sxth	r2, r2
 80181da:	9300      	str	r3, [sp, #0]
 80181dc:	b209      	sxth	r1, r1
 80181de:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80181e2:	f7fb fc13 	bl	8013a0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80181e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80181e8:	b329      	cbz	r1, 8018236 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80181ea:	a805      	add	r0, sp, #20
 80181ec:	f7ff fee6 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80181f4:	792b      	ldrb	r3, [r5, #4]
 80181f6:	a907      	add	r1, sp, #28
 80181f8:	1abf      	subs	r7, r7, r2
 80181fa:	88ea      	ldrh	r2, [r5, #6]
 80181fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80181fe:	4417      	add	r7, r2
 8018200:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018202:	f88d 3020 	strb.w	r3, [sp, #32]
 8018206:	4417      	add	r7, r2
 8018208:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801820c:	1ab6      	subs	r6, r6, r2
 801820e:	892a      	ldrh	r2, [r5, #8]
 8018210:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018214:	4416      	add	r6, r2
 8018216:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018218:	4416      	add	r6, r2
 801821a:	4a08      	ldr	r2, [pc, #32]	; (801823c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801821c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018220:	2600      	movs	r6, #0
 8018222:	9207      	str	r2, [sp, #28]
 8018224:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018228:	6803      	ldr	r3, [r0, #0]
 801822a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801822c:	4798      	blx	r3
 801822e:	792b      	ldrb	r3, [r5, #4]
 8018230:	b10b      	cbz	r3, 8018236 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018232:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018236:	b00a      	add	sp, #40	; 0x28
 8018238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801823c:	0802550c 	.word	0x0802550c

08018240 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018244:	460c      	mov	r4, r1
 8018246:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018248:	b088      	sub	sp, #32
 801824a:	4605      	mov	r5, r0
 801824c:	2900      	cmp	r1, #0
 801824e:	d06d      	beq.n	801832c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018250:	4668      	mov	r0, sp
 8018252:	f7ff feb3 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018256:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018258:	88e3      	ldrh	r3, [r4, #6]
 801825a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801825e:	440b      	add	r3, r1
 8018260:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018264:	b21b      	sxth	r3, r3
 8018266:	4543      	cmp	r3, r8
 8018268:	db31      	blt.n	80182ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801826a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801826e:	44c4      	add	ip, r8
 8018270:	fa0f fc8c 	sxth.w	ip, ip
 8018274:	4563      	cmp	r3, ip
 8018276:	da2a      	bge.n	80182ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018278:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801827a:	8926      	ldrh	r6, [r4, #8]
 801827c:	4416      	add	r6, r2
 801827e:	b236      	sxth	r6, r6
 8018280:	42be      	cmp	r6, r7
 8018282:	db24      	blt.n	80182ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018284:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018288:	4438      	add	r0, r7
 801828a:	b200      	sxth	r0, r0
 801828c:	4286      	cmp	r6, r0
 801828e:	da1e      	bge.n	80182ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018290:	8963      	ldrh	r3, [r4, #10]
 8018292:	4419      	add	r1, r3
 8018294:	b209      	sxth	r1, r1
 8018296:	4541      	cmp	r1, r8
 8018298:	db08      	blt.n	80182ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801829a:	4561      	cmp	r1, ip
 801829c:	da06      	bge.n	80182ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801829e:	89a3      	ldrh	r3, [r4, #12]
 80182a0:	441a      	add	r2, r3
 80182a2:	b212      	sxth	r2, r2
 80182a4:	42ba      	cmp	r2, r7
 80182a6:	db01      	blt.n	80182ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80182a8:	4282      	cmp	r2, r0
 80182aa:	db10      	blt.n	80182ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80182ac:	4b21      	ldr	r3, [pc, #132]	; (8018334 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80182ae:	a904      	add	r1, sp, #16
 80182b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80182b2:	9304      	str	r3, [sp, #16]
 80182b4:	2302      	movs	r3, #2
 80182b6:	f88d 3014 	strb.w	r3, [sp, #20]
 80182ba:	2300      	movs	r3, #0
 80182bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80182c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80182c8:	6803      	ldr	r3, [r0, #0]
 80182ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182cc:	4798      	blx	r3
 80182ce:	1d29      	adds	r1, r5, #4
 80182d0:	a802      	add	r0, sp, #8
 80182d2:	f7ff fe73 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80182d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80182da:	88e0      	ldrh	r0, [r4, #6]
 80182dc:	eba3 0808 	sub.w	r8, r3, r8
 80182e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80182e4:	7921      	ldrb	r1, [r4, #4]
 80182e6:	fa1f f888 	uxth.w	r8, r8
 80182ea:	1bdf      	subs	r7, r3, r7
 80182ec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80182f0:	b2bb      	uxth	r3, r7
 80182f2:	4440      	add	r0, r8
 80182f4:	8922      	ldrh	r2, [r4, #8]
 80182f6:	8967      	ldrh	r7, [r4, #10]
 80182f8:	4460      	add	r0, ip
 80182fa:	89a4      	ldrh	r4, [r4, #12]
 80182fc:	441a      	add	r2, r3
 80182fe:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018300:	44b8      	add	r8, r7
 8018302:	4423      	add	r3, r4
 8018304:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018308:	4432      	add	r2, r6
 801830a:	44e0      	add	r8, ip
 801830c:	4433      	add	r3, r6
 801830e:	4c0a      	ldr	r4, [pc, #40]	; (8018338 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018310:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018312:	f88d 1014 	strb.w	r1, [sp, #20]
 8018316:	a904      	add	r1, sp, #16
 8018318:	9404      	str	r4, [sp, #16]
 801831a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801831e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018322:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018326:	6803      	ldr	r3, [r0, #0]
 8018328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801832a:	4798      	blx	r3
 801832c:	b008      	add	sp, #32
 801832e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018332:	bf00      	nop
 8018334:	0802550c 	.word	0x0802550c
 8018338:	08025520 	.word	0x08025520

0801833c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801833c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801833e:	4604      	mov	r4, r0
 8018340:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018344:	3201      	adds	r2, #1
 8018346:	d112      	bne.n	801836e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018348:	2500      	movs	r5, #0
 801834a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801834e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018352:	6803      	ldr	r3, [r0, #0]
 8018354:	9500      	str	r5, [sp, #0]
 8018356:	466d      	mov	r5, sp
 8018358:	f8ad 1004 	strh.w	r1, [sp, #4]
 801835c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018360:	4629      	mov	r1, r5
 8018362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018364:	4798      	blx	r3
 8018366:	e895 0003 	ldmia.w	r5, {r0, r1}
 801836a:	e884 0003 	stmia.w	r4, {r0, r1}
 801836e:	4620      	mov	r0, r4
 8018370:	b003      	add	sp, #12
 8018372:	bd30      	pop	{r4, r5, pc}

08018374 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018374:	b513      	push	{r0, r1, r4, lr}
 8018376:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801837a:	4604      	mov	r4, r0
 801837c:	3301      	adds	r3, #1
 801837e:	d109      	bne.n	8018394 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018380:	4601      	mov	r1, r0
 8018382:	4668      	mov	r0, sp
 8018384:	f7ff fe1a 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018388:	f8bd 3000 	ldrh.w	r3, [sp]
 801838c:	8423      	strh	r3, [r4, #32]
 801838e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018392:	8463      	strh	r3, [r4, #34]	; 0x22
 8018394:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018398:	b002      	add	sp, #8
 801839a:	bd10      	pop	{r4, pc}

0801839c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801839c:	b513      	push	{r0, r1, r4, lr}
 801839e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80183a2:	4604      	mov	r4, r0
 80183a4:	3301      	adds	r3, #1
 80183a6:	d109      	bne.n	80183bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80183a8:	4601      	mov	r1, r0
 80183aa:	4668      	mov	r0, sp
 80183ac:	f7ff fe06 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80183b4:	8423      	strh	r3, [r4, #32]
 80183b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80183ba:	8463      	strh	r3, [r4, #34]	; 0x22
 80183bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80183c0:	b002      	add	sp, #8
 80183c2:	bd10      	pop	{r4, pc}

080183c4 <_ZN8touchgfx6ScreenC1Ev>:
 80183c4:	b570      	push	{r4, r5, r6, lr}
 80183c6:	4b17      	ldr	r3, [pc, #92]	; (8018424 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80183c8:	4605      	mov	r5, r0
 80183ca:	4a17      	ldr	r2, [pc, #92]	; (8018428 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80183cc:	2101      	movs	r1, #1
 80183ce:	f845 3b04 	str.w	r3, [r5], #4
 80183d2:	2300      	movs	r3, #0
 80183d4:	6042      	str	r2, [r0, #4]
 80183d6:	4604      	mov	r4, r0
 80183d8:	8103      	strh	r3, [r0, #8]
 80183da:	8143      	strh	r3, [r0, #10]
 80183dc:	8183      	strh	r3, [r0, #12]
 80183de:	81c3      	strh	r3, [r0, #14]
 80183e0:	8203      	strh	r3, [r0, #16]
 80183e2:	8243      	strh	r3, [r0, #18]
 80183e4:	8283      	strh	r3, [r0, #20]
 80183e6:	82c3      	strh	r3, [r0, #22]
 80183e8:	6203      	str	r3, [r0, #32]
 80183ea:	8483      	strh	r3, [r0, #36]	; 0x24
 80183ec:	84c3      	strh	r3, [r0, #38]	; 0x26
 80183ee:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80183f2:	6343      	str	r3, [r0, #52]	; 0x34
 80183f4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80183f8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80183fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018400:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018404:	4b09      	ldr	r3, [pc, #36]	; (801842c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018406:	4628      	mov	r0, r5
 8018408:	f9b3 6000 	ldrsh.w	r6, [r3]
 801840c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801840e:	4a08      	ldr	r2, [pc, #32]	; (8018430 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018410:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018414:	4798      	blx	r3
 8018416:	6863      	ldr	r3, [r4, #4]
 8018418:	4628      	mov	r0, r5
 801841a:	4631      	mov	r1, r6
 801841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801841e:	4798      	blx	r3
 8018420:	4620      	mov	r0, r4
 8018422:	bd70      	pop	{r4, r5, r6, pc}
 8018424:	08025548 	.word	0x08025548
 8018428:	080250b8 	.word	0x080250b8
 801842c:	24006a32 	.word	0x24006a32
 8018430:	24006a30 	.word	0x24006a30

08018434 <_ZN8touchgfx6Screen4drawEv>:
 8018434:	4b09      	ldr	r3, [pc, #36]	; (801845c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018436:	b507      	push	{r0, r1, r2, lr}
 8018438:	f9b3 2000 	ldrsh.w	r2, [r3]
 801843c:	2100      	movs	r1, #0
 801843e:	4b08      	ldr	r3, [pc, #32]	; (8018460 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018440:	9100      	str	r1, [sp, #0]
 8018442:	4669      	mov	r1, sp
 8018444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018448:	f8ad 2004 	strh.w	r2, [sp, #4]
 801844c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018450:	6803      	ldr	r3, [r0, #0]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	4798      	blx	r3
 8018456:	b003      	add	sp, #12
 8018458:	f85d fb04 	ldr.w	pc, [sp], #4
 801845c:	24006a30 	.word	0x24006a30
 8018460:	24006a32 	.word	0x24006a32

08018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801846c:	b089      	sub	sp, #36	; 0x24
 801846e:	4680      	mov	r8, r0
 8018470:	460c      	mov	r4, r1
 8018472:	2b00      	cmp	r3, #0
 8018474:	4615      	mov	r5, r2
 8018476:	dd0e      	ble.n	8018496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018478:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801847c:	2b00      	cmp	r3, #0
 801847e:	dd0a      	ble.n	8018496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018480:	4628      	mov	r0, r5
 8018482:	f7ff ff5b 	bl	801833c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018486:	4621      	mov	r1, r4
 8018488:	f7fe fba6 	bl	8016bd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801848c:	69eb      	ldr	r3, [r5, #28]
 801848e:	b928      	cbnz	r0, 801849c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018490:	461d      	mov	r5, r3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d1f4      	bne.n	8018480 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018496:	b009      	add	sp, #36	; 0x24
 8018498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801849c:	ae04      	add	r6, sp, #16
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f000 80b5 	beq.w	801860e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80184a4:	682b      	ldr	r3, [r5, #0]
 80184a6:	4629      	mov	r1, r5
 80184a8:	a802      	add	r0, sp, #8
 80184aa:	68db      	ldr	r3, [r3, #12]
 80184ac:	4798      	blx	r3
 80184ae:	4628      	mov	r0, r5
 80184b0:	f7ff ff60 	bl	8018374 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80184b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80184b8:	4407      	add	r7, r0
 80184ba:	4628      	mov	r0, r5
 80184bc:	f7ff ff6e 	bl	801839c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80184c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80184c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80184c8:	b23f      	sxth	r7, r7
 80184ca:	4418      	add	r0, r3
 80184cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80184d0:	4621      	mov	r1, r4
 80184d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80184d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80184da:	4630      	mov	r0, r6
 80184dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80184e4:	f7fb fb74 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 80184e8:	4628      	mov	r0, r5
 80184ea:	f7ff ff27 	bl	801833c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80184ee:	ab06      	add	r3, sp, #24
 80184f0:	4602      	mov	r2, r0
 80184f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80184f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80184fa:	4611      	mov	r1, r2
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7fb fb67 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8018502:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018506:	f9b4 1000 	ldrsh.w	r1, [r4]
 801850a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801850e:	4299      	cmp	r1, r3
 8018510:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018514:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018518:	d10b      	bne.n	8018532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801851a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801851e:	4552      	cmp	r2, sl
 8018520:	d107      	bne.n	8018532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018522:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018526:	455a      	cmp	r2, fp
 8018528:	d103      	bne.n	8018532 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801852a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801852e:	454a      	cmp	r2, r9
 8018530:	d06d      	beq.n	801860e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018532:	f1bb 0f00 	cmp.w	fp, #0
 8018536:	dd65      	ble.n	8018604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018538:	f1b9 0f00 	cmp.w	r9, #0
 801853c:	dd62      	ble.n	8018604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801853e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018542:	fa1f f08a 	uxth.w	r0, sl
 8018546:	4552      	cmp	r2, sl
 8018548:	9000      	str	r0, [sp, #0]
 801854a:	da12      	bge.n	8018572 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801854c:	9301      	str	r3, [sp, #4]
 801854e:	9b00      	ldr	r3, [sp, #0]
 8018550:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018554:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018558:	1a9a      	subs	r2, r3, r2
 801855a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801855e:	4631      	mov	r1, r6
 8018560:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018564:	4640      	mov	r0, r8
 8018566:	f8ad 2016 	strh.w	r2, [sp, #22]
 801856a:	69ea      	ldr	r2, [r5, #28]
 801856c:	f7ff ff7a 	bl	8018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018570:	9b01      	ldr	r3, [sp, #4]
 8018572:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018576:	b29f      	uxth	r7, r3
 8018578:	429a      	cmp	r2, r3
 801857a:	da0d      	bge.n	8018598 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801857c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018580:	1aba      	subs	r2, r7, r2
 8018582:	f8ad a012 	strh.w	sl, [sp, #18]
 8018586:	4631      	mov	r1, r6
 8018588:	f8ad 2014 	strh.w	r2, [sp, #20]
 801858c:	4640      	mov	r0, r8
 801858e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018592:	69ea      	ldr	r2, [r5, #28]
 8018594:	f7ff ff66 	bl	8018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018598:	8822      	ldrh	r2, [r4, #0]
 801859a:	445f      	add	r7, fp
 801859c:	88a3      	ldrh	r3, [r4, #4]
 801859e:	b2bf      	uxth	r7, r7
 80185a0:	4413      	add	r3, r2
 80185a2:	b23a      	sxth	r2, r7
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	b219      	sxth	r1, r3
 80185a8:	4291      	cmp	r1, r2
 80185aa:	dd0d      	ble.n	80185c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80185ac:	1bdb      	subs	r3, r3, r7
 80185ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 80185b2:	f8ad a012 	strh.w	sl, [sp, #18]
 80185b6:	4631      	mov	r1, r6
 80185b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80185bc:	4640      	mov	r0, r8
 80185be:	f8ad 9016 	strh.w	r9, [sp, #22]
 80185c2:	69ea      	ldr	r2, [r5, #28]
 80185c4:	f7ff ff4e 	bl	8018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80185c8:	88e2      	ldrh	r2, [r4, #6]
 80185ca:	8863      	ldrh	r3, [r4, #2]
 80185cc:	4413      	add	r3, r2
 80185ce:	9a00      	ldr	r2, [sp, #0]
 80185d0:	444a      	add	r2, r9
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	fa1f f982 	uxth.w	r9, r2
 80185d8:	b219      	sxth	r1, r3
 80185da:	fa0f f289 	sxth.w	r2, r9
 80185de:	428a      	cmp	r2, r1
 80185e0:	da15      	bge.n	801860e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80185e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80185e6:	eba3 0309 	sub.w	r3, r3, r9
 80185ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 80185ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 80185f2:	4631      	mov	r1, r6
 80185f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80185f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80185fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018600:	69ea      	ldr	r2, [r5, #28]
 8018602:	e001      	b.n	8018608 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018604:	69ea      	ldr	r2, [r5, #28]
 8018606:	4621      	mov	r1, r4
 8018608:	4640      	mov	r0, r8
 801860a:	f7ff ff2b 	bl	8018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801860e:	4628      	mov	r0, r5
 8018610:	f7ff fe94 	bl	801833c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018614:	6861      	ldr	r1, [r4, #4]
 8018616:	4602      	mov	r2, r0
 8018618:	4633      	mov	r3, r6
 801861a:	6820      	ldr	r0, [r4, #0]
 801861c:	c303      	stmia	r3!, {r0, r1}
 801861e:	4611      	mov	r1, r2
 8018620:	4630      	mov	r0, r6
 8018622:	f7fb fad5 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 8018626:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801862a:	2b00      	cmp	r3, #0
 801862c:	f77f af33 	ble.w	8018496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018630:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018634:	2b00      	cmp	r3, #0
 8018636:	f77f af2e 	ble.w	8018496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801863a:	4628      	mov	r0, r5
 801863c:	f7ff fe9a 	bl	8018374 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018640:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018644:	1a18      	subs	r0, r3, r0
 8018646:	f8ad 0010 	strh.w	r0, [sp, #16]
 801864a:	4628      	mov	r0, r5
 801864c:	f7ff fea6 	bl	801839c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018650:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018654:	4631      	mov	r1, r6
 8018656:	1a18      	subs	r0, r3, r0
 8018658:	f8ad 0012 	strh.w	r0, [sp, #18]
 801865c:	4628      	mov	r0, r5
 801865e:	682b      	ldr	r3, [r5, #0]
 8018660:	689b      	ldr	r3, [r3, #8]
 8018662:	4798      	blx	r3
 8018664:	e717      	b.n	8018496 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018666 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018666:	b570      	push	{r4, r5, r6, lr}
 8018668:	1d06      	adds	r6, r0, #4
 801866a:	b086      	sub	sp, #24
 801866c:	460c      	mov	r4, r1
 801866e:	2300      	movs	r3, #0
 8018670:	4631      	mov	r1, r6
 8018672:	4605      	mov	r5, r0
 8018674:	a802      	add	r0, sp, #8
 8018676:	9301      	str	r3, [sp, #4]
 8018678:	f7ff fca0 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801867c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018680:	8822      	ldrh	r2, [r4, #0]
 8018682:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018686:	1ad2      	subs	r2, r2, r3
 8018688:	8863      	ldrh	r3, [r4, #2]
 801868a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801868e:	1a5b      	subs	r3, r3, r1
 8018690:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018694:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018698:	aa01      	add	r2, sp, #4
 801869a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801869e:	4630      	mov	r0, r6
 80186a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80186a4:	a904      	add	r1, sp, #16
 80186a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80186aa:	f7fb fb69 	bl	8013d80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80186ae:	9a01      	ldr	r2, [sp, #4]
 80186b0:	b11a      	cbz	r2, 80186ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80186b2:	4621      	mov	r1, r4
 80186b4:	4628      	mov	r0, r5
 80186b6:	f7ff fed5 	bl	8018464 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186ba:	b006      	add	sp, #24
 80186bc:	bd70      	pop	{r4, r5, r6, pc}

080186be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80186be:	4602      	mov	r2, r0
 80186c0:	b530      	push	{r4, r5, lr}
 80186c2:	4604      	mov	r4, r0
 80186c4:	b085      	sub	sp, #20
 80186c6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80186ca:	460d      	mov	r5, r1
 80186cc:	466b      	mov	r3, sp
 80186ce:	6851      	ldr	r1, [r2, #4]
 80186d0:	c303      	stmia	r3!, {r0, r1}
 80186d2:	4629      	mov	r1, r5
 80186d4:	4668      	mov	r0, sp
 80186d6:	f7fb fa7b 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 80186da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80186de:	b12b      	cbz	r3, 80186ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80186e0:	4669      	mov	r1, sp
 80186e2:	4620      	mov	r0, r4
 80186e4:	f7ff ffbf 	bl	8018666 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80186e8:	b005      	add	sp, #20
 80186ea:	bd30      	pop	{r4, r5, pc}
 80186ec:	3404      	adds	r4, #4
 80186ee:	a802      	add	r0, sp, #8
 80186f0:	4621      	mov	r1, r4
 80186f2:	f7ff fc63 	bl	8017fbc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80186fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80186fe:	4669      	mov	r1, sp
 8018700:	4620      	mov	r0, r4
 8018702:	1a9b      	subs	r3, r3, r2
 8018704:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018708:	f8ad 3000 	strh.w	r3, [sp]
 801870c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018710:	1a9b      	subs	r3, r3, r2
 8018712:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018716:	f7fb fafa 	bl	8013d0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801871a:	e7e5      	b.n	80186e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801871c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801871c:	460b      	mov	r3, r1
 801871e:	680a      	ldr	r2, [r1, #0]
 8018720:	1d01      	adds	r1, r0, #4
 8018722:	6992      	ldr	r2, [r2, #24]
 8018724:	4618      	mov	r0, r3
 8018726:	4710      	bx	r2

08018728 <_ZN8touchgfx12TextProviderC1Ev>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	2500      	movs	r5, #0
 801872c:	2302      	movs	r3, #2
 801872e:	4604      	mov	r4, r0
 8018730:	220e      	movs	r2, #14
 8018732:	7403      	strb	r3, [r0, #16]
 8018734:	4629      	mov	r1, r5
 8018736:	6145      	str	r5, [r0, #20]
 8018738:	7605      	strb	r5, [r0, #24]
 801873a:	83c5      	strh	r5, [r0, #30]
 801873c:	8405      	strh	r5, [r0, #32]
 801873e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018740:	8705      	strh	r5, [r0, #56]	; 0x38
 8018742:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018744:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018748:	e9c0 5500 	strd	r5, r5, [r0]
 801874c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8018750:	304c      	adds	r0, #76	; 0x4c
 8018752:	f00a fcea 	bl	802312a <memset>
 8018756:	2301      	movs	r3, #1
 8018758:	4620      	mov	r0, r4
 801875a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801875e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018762:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018766:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801876a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801876e:	f7ec ff6b 	bl	8005648 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018772:	4620      	mov	r0, r4
 8018774:	bd38      	pop	{r3, r4, r5, pc}

08018776 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018776:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018778:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801877c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801877e:	fab0 f080 	clz	r0, r0
 8018782:	0940      	lsrs	r0, r0, #5
 8018784:	4770      	bx	lr

08018786 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018786:	b530      	push	{r4, r5, lr}
 8018788:	2500      	movs	r5, #0
 801878a:	2401      	movs	r4, #1
 801878c:	6843      	ldr	r3, [r0, #4]
 801878e:	b913      	cbnz	r3, 8018796 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018790:	6803      	ldr	r3, [r0, #0]
 8018792:	b313      	cbz	r3, 80187da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018794:	6043      	str	r3, [r0, #4]
 8018796:	7e03      	ldrb	r3, [r0, #24]
 8018798:	b143      	cbz	r3, 80187ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801879a:	6943      	ldr	r3, [r0, #20]
 801879c:	b12b      	cbz	r3, 80187aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801879e:	881a      	ldrh	r2, [r3, #0]
 80187a0:	b11a      	cbz	r2, 80187aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80187a2:	1c9a      	adds	r2, r3, #2
 80187a4:	6142      	str	r2, [r0, #20]
 80187a6:	8818      	ldrh	r0, [r3, #0]
 80187a8:	bd30      	pop	{r4, r5, pc}
 80187aa:	7605      	strb	r5, [r0, #24]
 80187ac:	6843      	ldr	r3, [r0, #4]
 80187ae:	8819      	ldrh	r1, [r3, #0]
 80187b0:	b199      	cbz	r1, 80187da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80187b2:	1c9a      	adds	r2, r3, #2
 80187b4:	2902      	cmp	r1, #2
 80187b6:	6042      	str	r2, [r0, #4]
 80187b8:	d1f5      	bne.n	80187a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80187ba:	7c03      	ldrb	r3, [r0, #16]
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d8e5      	bhi.n	801878c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187c0:	1c5a      	adds	r2, r3, #1
 80187c2:	3302      	adds	r3, #2
 80187c4:	7402      	strb	r2, [r0, #16]
 80187c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80187ca:	6143      	str	r3, [r0, #20]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d0dd      	beq.n	801878c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d0da      	beq.n	801878c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187d6:	7604      	strb	r4, [r0, #24]
 80187d8:	e7d8      	b.n	801878c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80187da:	2000      	movs	r0, #0
 80187dc:	e7e4      	b.n	80187a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80187de:	6001      	str	r1, [r0, #0]
 80187e0:	2100      	movs	r1, #0
 80187e2:	b430      	push	{r4, r5}
 80187e4:	6041      	str	r1, [r0, #4]
 80187e6:	6815      	ldr	r5, [r2, #0]
 80187e8:	6085      	str	r5, [r0, #8]
 80187ea:	6852      	ldr	r2, [r2, #4]
 80187ec:	6443      	str	r3, [r0, #68]	; 0x44
 80187ee:	9b02      	ldr	r3, [sp, #8]
 80187f0:	60c2      	str	r2, [r0, #12]
 80187f2:	7401      	strb	r1, [r0, #16]
 80187f4:	6141      	str	r1, [r0, #20]
 80187f6:	7601      	strb	r1, [r0, #24]
 80187f8:	8701      	strh	r1, [r0, #56]	; 0x38
 80187fa:	8401      	strh	r1, [r0, #32]
 80187fc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018800:	6483      	str	r3, [r0, #72]	; 0x48
 8018802:	bc30      	pop	{r4, r5}
 8018804:	f7ec bf20 	b.w	8005648 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018808 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018808:	b408      	push	{r3}
 801880a:	b510      	push	{r4, lr}
 801880c:	b085      	sub	sp, #20
 801880e:	ac07      	add	r4, sp, #28
 8018810:	f854 3b04 	ldr.w	r3, [r4], #4
 8018814:	9300      	str	r3, [sp, #0]
 8018816:	4613      	mov	r3, r2
 8018818:	4622      	mov	r2, r4
 801881a:	9403      	str	r4, [sp, #12]
 801881c:	f7ff ffdf 	bl	80187de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018820:	b005      	add	sp, #20
 8018822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018826:	b001      	add	sp, #4
 8018828:	4770      	bx	lr

0801882a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801882a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801882c:	4605      	mov	r5, r0
 801882e:	4608      	mov	r0, r1
 8018830:	b1f1      	cbz	r1, 8018870 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018832:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018836:	460b      	mov	r3, r1
 8018838:	f101 0708 	add.w	r7, r1, #8
 801883c:	4622      	mov	r2, r4
 801883e:	6818      	ldr	r0, [r3, #0]
 8018840:	3308      	adds	r3, #8
 8018842:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018846:	4626      	mov	r6, r4
 8018848:	42bb      	cmp	r3, r7
 801884a:	c603      	stmia	r6!, {r0, r1}
 801884c:	4634      	mov	r4, r6
 801884e:	d1f6      	bne.n	801883e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018850:	6818      	ldr	r0, [r3, #0]
 8018852:	6030      	str	r0, [r6, #0]
 8018854:	4610      	mov	r0, r2
 8018856:	889b      	ldrh	r3, [r3, #4]
 8018858:	80b3      	strh	r3, [r6, #4]
 801885a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801885e:	015b      	lsls	r3, r3, #5
 8018860:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018864:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018868:	430b      	orrs	r3, r1
 801886a:	425b      	negs	r3, r3
 801886c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018872 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018872:	b538      	push	{r3, r4, r5, lr}
 8018874:	460c      	mov	r4, r1
 8018876:	6811      	ldr	r1, [r2, #0]
 8018878:	4610      	mov	r0, r2
 801887a:	68cd      	ldr	r5, [r1, #12]
 801887c:	4619      	mov	r1, r3
 801887e:	47a8      	blx	r5
 8018880:	2800      	cmp	r0, #0
 8018882:	bf08      	it	eq
 8018884:	4620      	moveq	r0, r4
 8018886:	bd38      	pop	{r3, r4, r5, pc}

08018888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801888a:	4604      	mov	r4, r0
 801888c:	4615      	mov	r5, r2
 801888e:	4608      	mov	r0, r1
 8018890:	b93a      	cbnz	r2, 80188a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018892:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018896:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801889a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801889e:	4628      	mov	r0, r5
 80188a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80188a6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80188aa:	8893      	ldrh	r3, [r2, #4]
 80188ac:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80188b0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80188b4:	79ee      	ldrb	r6, [r5, #7]
 80188b6:	4316      	orrs	r6, r2
 80188b8:	19da      	adds	r2, r3, r7
 80188ba:	b291      	uxth	r1, r2
 80188bc:	b2b7      	uxth	r7, r6
 80188be:	291d      	cmp	r1, #29
 80188c0:	d87b      	bhi.n	80189ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80188c2:	2201      	movs	r2, #1
 80188c4:	10f6      	asrs	r6, r6, #3
 80188c6:	408a      	lsls	r2, r1
 80188c8:	4974      	ldr	r1, [pc, #464]	; (8018a9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80188ca:	420a      	tst	r2, r1
 80188cc:	d12e      	bne.n	801892c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80188ce:	f412 7f60 	tst.w	r2, #896	; 0x380
 80188d2:	d072      	beq.n	80189ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80188d4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80188d8:	462b      	mov	r3, r5
 80188da:	f105 0e08 	add.w	lr, r5, #8
 80188de:	4615      	mov	r5, r2
 80188e0:	6818      	ldr	r0, [r3, #0]
 80188e2:	3308      	adds	r3, #8
 80188e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80188e8:	4694      	mov	ip, r2
 80188ea:	4573      	cmp	r3, lr
 80188ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80188f0:	4662      	mov	r2, ip
 80188f2:	d1f5      	bne.n	80188e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80188f4:	6818      	ldr	r0, [r3, #0]
 80188f6:	f8cc 0000 	str.w	r0, [ip]
 80188fa:	889b      	ldrh	r3, [r3, #4]
 80188fc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018900:	b2b3      	uxth	r3, r6
 8018902:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018906:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801890a:	1aca      	subs	r2, r1, r3
 801890c:	1bcf      	subs	r7, r1, r7
 801890e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018912:	b292      	uxth	r2, r2
 8018914:	1afb      	subs	r3, r7, r3
 8018916:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801891a:	10d2      	asrs	r2, r2, #3
 801891c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018920:	4302      	orrs	r2, r0
 8018922:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018926:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801892a:	e7b8      	b.n	801889e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801892c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801892e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018932:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018934:	f640 6333 	movw	r3, #3635	; 0xe33
 8018938:	4299      	cmp	r1, r3
 801893a:	d110      	bne.n	801895e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801893c:	6803      	ldr	r3, [r0, #0]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	4798      	blx	r3
 8018942:	7b41      	ldrb	r1, [r0, #13]
 8018944:	00cb      	lsls	r3, r1, #3
 8018946:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801894a:	7a03      	ldrb	r3, [r0, #8]
 801894c:	0648      	lsls	r0, r1, #25
 801894e:	ea43 0302 	orr.w	r3, r3, r2
 8018952:	bf44      	itt	mi
 8018954:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018958:	b21b      	sxthmi	r3, r3
 801895a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801895e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018962:	462a      	mov	r2, r5
 8018964:	f105 0c08 	add.w	ip, r5, #8
 8018968:	443b      	add	r3, r7
 801896a:	4433      	add	r3, r6
 801896c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8018970:	b29b      	uxth	r3, r3
 8018972:	4635      	mov	r5, r6
 8018974:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018978:	6810      	ldr	r0, [r2, #0]
 801897a:	3208      	adds	r2, #8
 801897c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018980:	4637      	mov	r7, r6
 8018982:	4562      	cmp	r2, ip
 8018984:	c703      	stmia	r7!, {r0, r1}
 8018986:	463e      	mov	r6, r7
 8018988:	d1f6      	bne.n	8018978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801898a:	6810      	ldr	r0, [r2, #0]
 801898c:	6038      	str	r0, [r7, #0]
 801898e:	8892      	ldrh	r2, [r2, #4]
 8018990:	80ba      	strh	r2, [r7, #4]
 8018992:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018996:	10db      	asrs	r3, r3, #3
 8018998:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801899c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80189a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80189a4:	4313      	orrs	r3, r2
 80189a6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80189aa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80189ae:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80189b2:	1a9b      	subs	r3, r3, r2
 80189b4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80189b8:	e771      	b.n	801889e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80189ba:	f023 0204 	bic.w	r2, r3, #4
 80189be:	f640 611b 	movw	r1, #3611	; 0xe1b
 80189c2:	428a      	cmp	r2, r1
 80189c4:	d003      	beq.n	80189ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80189c6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d120      	bne.n	8018a10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80189ce:	3b01      	subs	r3, #1
 80189d0:	4602      	mov	r2, r0
 80189d2:	4629      	mov	r1, r5
 80189d4:	4620      	mov	r0, r4
 80189d6:	b29b      	uxth	r3, r3
 80189d8:	f7ff ff4b 	bl	8018872 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80189dc:	7b41      	ldrb	r1, [r0, #13]
 80189de:	00cb      	lsls	r3, r1, #3
 80189e0:	0649      	lsls	r1, r1, #25
 80189e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189e6:	7a03      	ldrb	r3, [r0, #8]
 80189e8:	ea43 0302 	orr.w	r3, r3, r2
 80189ec:	bf44      	itt	mi
 80189ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189f2:	b21b      	sxthmi	r3, r3
 80189f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80189f8:	7b6b      	ldrb	r3, [r5, #13]
 80189fa:	7aaa      	ldrb	r2, [r5, #10]
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a02:	4313      	orrs	r3, r2
 8018a04:	115a      	asrs	r2, r3, #5
 8018a06:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018a0a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018a0e:	e035      	b.n	8018a7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8018a10:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018a14:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018a18:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018a1c:	7a2a      	ldrb	r2, [r5, #8]
 8018a1e:	ea42 0201 	orr.w	r2, r2, r1
 8018a22:	f640 6109 	movw	r1, #3593	; 0xe09
 8018a26:	bf1c      	itt	ne
 8018a28:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018a2c:	b212      	sxthne	r2, r2
 8018a2e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018a32:	f023 0210 	bic.w	r2, r3, #16
 8018a36:	428a      	cmp	r2, r1
 8018a38:	d003      	beq.n	8018a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018a3a:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d129      	bne.n	8018a96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8018a42:	7b6e      	ldrb	r6, [r5, #13]
 8018a44:	4629      	mov	r1, r5
 8018a46:	0076      	lsls	r6, r6, #1
 8018a48:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018a4c:	7aae      	ldrb	r6, [r5, #10]
 8018a4e:	4316      	orrs	r6, r2
 8018a50:	f640 6213 	movw	r2, #3603	; 0xe13
 8018a54:	4293      	cmp	r3, r2
 8018a56:	4602      	mov	r2, r0
 8018a58:	4620      	mov	r0, r4
 8018a5a:	bf16      	itet	ne
 8018a5c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018a60:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018a64:	b29b      	uxthne	r3, r3
 8018a66:	f7ff ff04 	bl	8018872 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018a6a:	7b43      	ldrb	r3, [r0, #13]
 8018a6c:	7a82      	ldrb	r2, [r0, #10]
 8018a6e:	005b      	lsls	r3, r3, #1
 8018a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a74:	4313      	orrs	r3, r2
 8018a76:	1af6      	subs	r6, r6, r3
 8018a78:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018a7c:	7b69      	ldrb	r1, [r5, #13]
 8018a7e:	00cb      	lsls	r3, r1, #3
 8018a80:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a84:	7a2b      	ldrb	r3, [r5, #8]
 8018a86:	4313      	orrs	r3, r2
 8018a88:	064a      	lsls	r2, r1, #25
 8018a8a:	bf44      	itt	mi
 8018a8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a90:	b21b      	sxthmi	r3, r3
 8018a92:	1bdb      	subs	r3, r3, r7
 8018a94:	e747      	b.n	8018926 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018a96:	2300      	movs	r3, #0
 8018a98:	e7b7      	b.n	8018a0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8018a9a:	bf00      	nop
 8018a9c:	3fc00079 	.word	0x3fc00079

08018aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018aa4:	4604      	mov	r4, r0
 8018aa6:	b942      	cbnz	r2, 8018aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018aac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018ab0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018ab4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018ab8:	e047      	b.n	8018b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018aba:	7b51      	ldrb	r1, [r2, #13]
 8018abc:	8893      	ldrh	r3, [r2, #4]
 8018abe:	010d      	lsls	r5, r1, #4
 8018ac0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018ac4:	79d5      	ldrb	r5, [r2, #7]
 8018ac6:	4305      	orrs	r5, r0
 8018ac8:	2d04      	cmp	r5, #4
 8018aca:	bfcc      	ite	gt
 8018acc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018ad0:	f04f 0e01 	movle.w	lr, #1
 8018ad4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018ad8:	f200 80ab 	bhi.w	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018adc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018ae0:	4283      	cmp	r3, r0
 8018ae2:	d216      	bcs.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ae4:	f240 605b 	movw	r0, #1627	; 0x65b
 8018ae8:	4283      	cmp	r3, r0
 8018aea:	d859      	bhi.n	8018ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018aec:	f240 6057 	movw	r0, #1623	; 0x657
 8018af0:	4283      	cmp	r3, r0
 8018af2:	d20e      	bcs.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018af4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018af8:	d24a      	bcs.n	8018b90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018afa:	f240 604e 	movw	r0, #1614	; 0x64e
 8018afe:	4283      	cmp	r3, r0
 8018b00:	d207      	bcs.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b02:	f240 601a 	movw	r0, #1562	; 0x61a
 8018b06:	4283      	cmp	r3, r0
 8018b08:	d02a      	beq.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b0a:	d821      	bhi.n	8018b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018b0c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018b10:	d35b      	bcc.n	8018bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018b12:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018b16:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b1a:	f040 80d0 	bne.w	8018cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018b1e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018b22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b26:	f040 80ca 	bne.w	8018cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018b2a:	00cb      	lsls	r3, r1, #3
 8018b2c:	0649      	lsls	r1, r1, #25
 8018b2e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b32:	7a13      	ldrb	r3, [r2, #8]
 8018b34:	ea43 0300 	orr.w	r3, r3, r0
 8018b38:	bf44      	itt	mi
 8018b3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b3e:	b21b      	sxthmi	r3, r3
 8018b40:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018b44:	1b5d      	subs	r5, r3, r5
 8018b46:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018b4a:	4610      	mov	r0, r2
 8018b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b50:	f240 604b 	movw	r0, #1611	; 0x64b
 8018b54:	4283      	cmp	r3, r0
 8018b56:	d338      	bcc.n	8018bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018b58:	f240 604c 	movw	r0, #1612	; 0x64c
 8018b5c:	4283      	cmp	r3, r0
 8018b5e:	d9d8      	bls.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b60:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018b64:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018b68:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b6c:	f040 80f3 	bne.w	8018d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018b70:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b74:	f040 80ef 	bne.w	8018d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018b78:	00cb      	lsls	r3, r1, #3
 8018b7a:	064e      	lsls	r6, r1, #25
 8018b7c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018b80:	7a13      	ldrb	r3, [r2, #8]
 8018b82:	ea43 0300 	orr.w	r3, r3, r0
 8018b86:	bf44      	itt	mi
 8018b88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b8c:	b21b      	sxthmi	r3, r3
 8018b8e:	e7d9      	b.n	8018b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018b90:	f240 6054 	movw	r0, #1620	; 0x654
 8018b94:	4283      	cmp	r3, r0
 8018b96:	d8e3      	bhi.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b98:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018b9c:	d9e0      	bls.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b9e:	e7b8      	b.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ba0:	f240 6074 	movw	r0, #1652	; 0x674
 8018ba4:	4283      	cmp	r3, r0
 8018ba6:	d0b4      	beq.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ba8:	d82d      	bhi.n	8018c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018baa:	f240 605e 	movw	r0, #1630	; 0x65e
 8018bae:	4283      	cmp	r3, r0
 8018bb0:	d804      	bhi.n	8018bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018bb2:	f240 605d 	movw	r0, #1629	; 0x65d
 8018bb6:	4283      	cmp	r3, r0
 8018bb8:	d3d2      	bcc.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bba:	e7aa      	b.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bbc:	f240 605f 	movw	r0, #1631	; 0x65f
 8018bc0:	4283      	cmp	r3, r0
 8018bc2:	d0cd      	beq.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018bc4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018bc8:	d0a3      	beq.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018bca:	00cb      	lsls	r3, r1, #3
 8018bcc:	0649      	lsls	r1, r1, #25
 8018bce:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018bd2:	7a13      	ldrb	r3, [r2, #8]
 8018bd4:	ea43 0300 	orr.w	r3, r3, r0
 8018bd8:	bf44      	itt	mi
 8018bda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018bde:	b21b      	sxthmi	r3, r3
 8018be0:	1b5d      	subs	r5, r3, r5
 8018be2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018be6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018bea:	7b53      	ldrb	r3, [r2, #13]
 8018bec:	015b      	lsls	r3, r3, #5
 8018bee:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018bf2:	7993      	ldrb	r3, [r2, #6]
 8018bf4:	430b      	orrs	r3, r1
 8018bf6:	2105      	movs	r1, #5
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	fb93 f3f1 	sdiv	r3, r3, r1
 8018bfe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018c02:	440b      	add	r3, r1
 8018c04:	e756      	b.n	8018ab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018c06:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018c0a:	4283      	cmp	r3, r0
 8018c0c:	d809      	bhi.n	8018c22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018c0e:	f240 60df 	movw	r0, #1759	; 0x6df
 8018c12:	4283      	cmp	r3, r0
 8018c14:	f4bf af7d 	bcs.w	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c18:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018c1c:	2b05      	cmp	r3, #5
 8018c1e:	d8d4      	bhi.n	8018bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018c20:	e777      	b.n	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c22:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018c26:	4283      	cmp	r3, r0
 8018c28:	d09a      	beq.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c2a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018c2e:	4283      	cmp	r3, r0
 8018c30:	e7ca      	b.n	8018bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018c32:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018c36:	d22b      	bcs.n	8018c90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018c38:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018c3c:	4283      	cmp	r3, r0
 8018c3e:	d28f      	bcs.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c40:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018c44:	4283      	cmp	r3, r0
 8018c46:	d816      	bhi.n	8018c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018c48:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018c4c:	4283      	cmp	r3, r0
 8018c4e:	f4bf af60 	bcs.w	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c52:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018c56:	4283      	cmp	r3, r0
 8018c58:	d80a      	bhi.n	8018c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018c5a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018c5e:	4283      	cmp	r3, r0
 8018c60:	f4bf af57 	bcs.w	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c64:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018c68:	4283      	cmp	r3, r0
 8018c6a:	f43f af79 	beq.w	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c6e:	e7ac      	b.n	8018bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018c70:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018c74:	e7f8      	b.n	8018c68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018c76:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018c7a:	4283      	cmp	r3, r0
 8018c7c:	d802      	bhi.n	8018c84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018c7e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c82:	e798      	b.n	8018bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018c84:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018c88:	4283      	cmp	r3, r0
 8018c8a:	f47f af42 	bne.w	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018c8e:	e767      	b.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c90:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018c94:	4283      	cmp	r3, r0
 8018c96:	f43f af63 	beq.w	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018c9a:	d802      	bhi.n	8018ca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018c9c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018ca0:	e7f2      	b.n	8018c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018ca2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018ca6:	4283      	cmp	r3, r0
 8018ca8:	d805      	bhi.n	8018cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018caa:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018cae:	4283      	cmp	r3, r0
 8018cb0:	f4ff af2f 	bcc.w	8018b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018cb4:	e754      	b.n	8018b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018cb6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018cba:	4283      	cmp	r3, r0
 8018cbc:	e7af      	b.n	8018c1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018cbe:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018cc2:	4617      	mov	r7, r2
 8018cc4:	f102 0808 	add.w	r8, r2, #8
 8018cc8:	4666      	mov	r6, ip
 8018cca:	6838      	ldr	r0, [r7, #0]
 8018ccc:	3708      	adds	r7, #8
 8018cce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018cd2:	46e6      	mov	lr, ip
 8018cd4:	4547      	cmp	r7, r8
 8018cd6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018cda:	46f4      	mov	ip, lr
 8018cdc:	d1f5      	bne.n	8018cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018cde:	6838      	ldr	r0, [r7, #0]
 8018ce0:	f8ce 0000 	str.w	r0, [lr]
 8018ce4:	88b9      	ldrh	r1, [r7, #4]
 8018ce6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018cea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018cee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018cf2:	d009      	beq.n	8018d08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8018cf4:	7b51      	ldrb	r1, [r2, #13]
 8018cf6:	7992      	ldrb	r2, [r2, #6]
 8018cf8:	0149      	lsls	r1, r1, #5
 8018cfa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018cfe:	4311      	orrs	r1, r2
 8018d00:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018d04:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018d08:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018d0c:	b2ad      	uxth	r5, r5
 8018d0e:	d00d      	beq.n	8018d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018d10:	442b      	add	r3, r5
 8018d12:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018d1c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018d20:	10db      	asrs	r3, r3, #3
 8018d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d26:	4313      	orrs	r3, r2
 8018d28:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018d2c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018d30:	00cb      	lsls	r3, r1, #3
 8018d32:	064f      	lsls	r7, r1, #25
 8018d34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018d38:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018d3c:	ea43 0302 	orr.w	r3, r3, r2
 8018d40:	bf44      	itt	mi
 8018d42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d46:	b21b      	sxthmi	r3, r3
 8018d48:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018d4c:	1b5b      	subs	r3, r3, r5
 8018d4e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018d52:	4632      	mov	r2, r6
 8018d54:	e6f9      	b.n	8018b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018d56:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018d5a:	4617      	mov	r7, r2
 8018d5c:	f102 0908 	add.w	r9, r2, #8
 8018d60:	4666      	mov	r6, ip
 8018d62:	6838      	ldr	r0, [r7, #0]
 8018d64:	3708      	adds	r7, #8
 8018d66:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018d6a:	46e0      	mov	r8, ip
 8018d6c:	454f      	cmp	r7, r9
 8018d6e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018d72:	46c4      	mov	ip, r8
 8018d74:	d1f5      	bne.n	8018d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018d76:	6838      	ldr	r0, [r7, #0]
 8018d78:	f8c8 0000 	str.w	r0, [r8]
 8018d7c:	88b9      	ldrh	r1, [r7, #4]
 8018d7e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018d82:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018d86:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018d8a:	d009      	beq.n	8018da0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018d8c:	7b51      	ldrb	r1, [r2, #13]
 8018d8e:	7992      	ldrb	r2, [r2, #6]
 8018d90:	0149      	lsls	r1, r1, #5
 8018d92:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018d96:	4311      	orrs	r1, r2
 8018d98:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018d9c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018da0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018da4:	d00e      	beq.n	8018dc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018da6:	eba3 030e 	sub.w	r3, r3, lr
 8018daa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018db4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018db8:	10db      	asrs	r3, r3, #3
 8018dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018dc4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018dc8:	00cb      	lsls	r3, r1, #3
 8018dca:	0648      	lsls	r0, r1, #25
 8018dcc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018dd0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018dd4:	ea43 0302 	orr.w	r3, r3, r2
 8018dd8:	bf44      	itt	mi
 8018dda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018dde:	b21b      	sxthmi	r3, r3
 8018de0:	1b5d      	subs	r5, r3, r5
 8018de2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018de6:	e7b4      	b.n	8018d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dec:	461e      	mov	r6, r3
 8018dee:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018df0:	4604      	mov	r4, r0
 8018df2:	4617      	mov	r7, r2
 8018df4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018df8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018dfc:	f7ec fb7e 	bl	80054fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e00:	4605      	mov	r5, r0
 8018e02:	b918      	cbnz	r0, 8018e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018e04:	6030      	str	r0, [r6, #0]
 8018e06:	4628      	mov	r0, r5
 8018e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	4601      	mov	r1, r0
 8018e10:	4638      	mov	r0, r7
 8018e12:	68db      	ldr	r3, [r3, #12]
 8018e14:	4798      	blx	r3
 8018e16:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	6030      	str	r0, [r6, #0]
 8018e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018e22:	d213      	bcs.n	8018e4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018e24:	4643      	mov	r3, r8
 8018e26:	4639      	mov	r1, r7
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f7ff fe39 	bl	8018aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018e2e:	6030      	str	r0, [r6, #0]
 8018e30:	6833      	ldr	r3, [r6, #0]
 8018e32:	b143      	cbz	r3, 8018e46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018e34:	7b5a      	ldrb	r2, [r3, #13]
 8018e36:	7a9b      	ldrb	r3, [r3, #10]
 8018e38:	0052      	lsls	r2, r2, #1
 8018e3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e3e:	4313      	orrs	r3, r2
 8018e40:	bf0c      	ite	eq
 8018e42:	2301      	moveq	r3, #1
 8018e44:	2300      	movne	r3, #0
 8018e46:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018e4a:	e7dc      	b.n	8018e06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018e4c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	2b7f      	cmp	r3, #127	; 0x7f
 8018e54:	d804      	bhi.n	8018e60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018e56:	4639      	mov	r1, r7
 8018e58:	4620      	mov	r0, r4
 8018e5a:	f7ff fd15 	bl	8018888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e5e:	e7e6      	b.n	8018e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018e60:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d0e3      	beq.n	8018e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e68:	f640 1302 	movw	r3, #2306	; 0x902
 8018e6c:	429d      	cmp	r5, r3
 8018e6e:	d1df      	bne.n	8018e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018e70:	4601      	mov	r1, r0
 8018e72:	4620      	mov	r0, r4
 8018e74:	f7ff fcd9 	bl	801882a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018e78:	e7d9      	b.n	8018e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018e7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018e7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e7e:	461e      	mov	r6, r3
 8018e80:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018e82:	4604      	mov	r4, r0
 8018e84:	4617      	mov	r7, r2
 8018e86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018e8a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018e8e:	f7ec fb35 	bl	80054fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e92:	4605      	mov	r5, r0
 8018e94:	b918      	cbnz	r0, 8018e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018e96:	6030      	str	r0, [r6, #0]
 8018e98:	4628      	mov	r0, r5
 8018e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	4601      	mov	r1, r0
 8018ea2:	4638      	mov	r0, r7
 8018ea4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018ea8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018eac:	47c8      	blx	r9
 8018eae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018eb2:	4602      	mov	r2, r0
 8018eb4:	6030      	str	r0, [r6, #0]
 8018eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018eba:	d213      	bcs.n	8018ee4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018ebc:	4643      	mov	r3, r8
 8018ebe:	4639      	mov	r1, r7
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f7ff fded 	bl	8018aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018ec6:	6030      	str	r0, [r6, #0]
 8018ec8:	6833      	ldr	r3, [r6, #0]
 8018eca:	b143      	cbz	r3, 8018ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018ecc:	7b5a      	ldrb	r2, [r3, #13]
 8018ece:	7a9b      	ldrb	r3, [r3, #10]
 8018ed0:	0052      	lsls	r2, r2, #1
 8018ed2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018ed6:	4313      	orrs	r3, r2
 8018ed8:	bf0c      	ite	eq
 8018eda:	2301      	moveq	r3, #1
 8018edc:	2300      	movne	r3, #0
 8018ede:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018ee2:	e7d9      	b.n	8018e98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8018ee4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	2b7f      	cmp	r3, #127	; 0x7f
 8018eec:	d804      	bhi.n	8018ef8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018eee:	4639      	mov	r1, r7
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f7ff fcc9 	bl	8018888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018ef6:	e7e6      	b.n	8018ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018ef8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d0e3      	beq.n	8018ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018f00:	f640 1302 	movw	r3, #2306	; 0x902
 8018f04:	429d      	cmp	r5, r3
 8018f06:	d1df      	bne.n	8018ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018f08:	4601      	mov	r1, r0
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f7ff fc8d 	bl	801882a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018f10:	e7d9      	b.n	8018ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08018f12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018f12:	b510      	push	{r4, lr}
 8018f14:	4604      	mov	r4, r0
 8018f16:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018f1a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018f1c:	b1e1      	cbz	r1, 8018f58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018f1e:	2b0a      	cmp	r3, #10
 8018f20:	d02d      	beq.n	8018f7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018f22:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018f24:	3901      	subs	r1, #1
 8018f26:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018f2a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018f2c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018f30:	1c51      	adds	r1, r2, #1
 8018f32:	b289      	uxth	r1, r1
 8018f34:	2901      	cmp	r1, #1
 8018f36:	bf8a      	itet	hi
 8018f38:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018f3c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018f3e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018f40:	1c5a      	adds	r2, r3, #1
 8018f42:	8722      	strh	r2, [r4, #56]	; 0x38
 8018f44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018f46:	4413      	add	r3, r2
 8018f48:	b29b      	uxth	r3, r3
 8018f4a:	2b09      	cmp	r3, #9
 8018f4c:	bf88      	it	hi
 8018f4e:	3b0a      	subhi	r3, #10
 8018f50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018f54:	8458      	strh	r0, [r3, #34]	; 0x22
 8018f56:	e7de      	b.n	8018f16 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018f58:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018f5a:	2b0a      	cmp	r3, #10
 8018f5c:	d00f      	beq.n	8018f7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f7ff fc11 	bl	8018786 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018f64:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018f66:	1c5a      	adds	r2, r3, #1
 8018f68:	8722      	strh	r2, [r4, #56]	; 0x38
 8018f6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018f6c:	4413      	add	r3, r2
 8018f6e:	b29b      	uxth	r3, r3
 8018f70:	2b09      	cmp	r3, #9
 8018f72:	bf88      	it	hi
 8018f74:	3b0a      	subhi	r3, #10
 8018f76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018f7a:	8458      	strh	r0, [r3, #34]	; 0x22
 8018f7c:	e7ec      	b.n	8018f58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018f7e:	bd10      	pop	{r4, pc}

08018f80 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018f80:	b538      	push	{r3, r4, r5, lr}
 8018f82:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018f84:	4604      	mov	r4, r0
 8018f86:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018f8a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018f8c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018f8e:	3a01      	subs	r2, #1
 8018f90:	8702      	strh	r2, [r0, #56]	; 0x38
 8018f92:	1c5a      	adds	r2, r3, #1
 8018f94:	b292      	uxth	r2, r2
 8018f96:	2a09      	cmp	r2, #9
 8018f98:	bf8a      	itet	hi
 8018f9a:	3b09      	subhi	r3, #9
 8018f9c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018f9e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018fa0:	f7ff ffb7 	bl	8018f12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018fa4:	8c23      	ldrh	r3, [r4, #32]
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	bf9c      	itt	ls
 8018faa:	3301      	addls	r3, #1
 8018fac:	8423      	strhls	r3, [r4, #32]
 8018fae:	8be3      	ldrh	r3, [r4, #30]
 8018fb0:	b90b      	cbnz	r3, 8018fb6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018fb2:	2302      	movs	r3, #2
 8018fb4:	83e3      	strh	r3, [r4, #30]
 8018fb6:	8be3      	ldrh	r3, [r4, #30]
 8018fb8:	4628      	mov	r0, r5
 8018fba:	3b01      	subs	r3, #1
 8018fbc:	b29b      	uxth	r3, r3
 8018fbe:	83e3      	strh	r3, [r4, #30]
 8018fc0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018fc4:	8365      	strh	r5, [r4, #26]
 8018fc6:	bd38      	pop	{r3, r4, r5, pc}

08018fc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018fc8:	428a      	cmp	r2, r1
 8018fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fce:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018fd0:	d932      	bls.n	8019038 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8018fd2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018fd4:	1a54      	subs	r4, r2, r1
 8018fd6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018fda:	19ee      	adds	r6, r5, r7
 8018fdc:	fa1f fe84 	uxth.w	lr, r4
 8018fe0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018fe4:	3e01      	subs	r6, #1
 8018fe6:	b2b4      	uxth	r4, r6
 8018fe8:	eba4 090e 	sub.w	r9, r4, lr
 8018fec:	fa1f f989 	uxth.w	r9, r9
 8018ff0:	2c09      	cmp	r4, #9
 8018ff2:	4626      	mov	r6, r4
 8018ff4:	bf88      	it	hi
 8018ff6:	f1a4 060a 	subhi.w	r6, r4, #10
 8018ffa:	f1bc 0f00 	cmp.w	ip, #0
 8018ffe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019002:	bf08      	it	eq
 8019004:	f04f 0c02 	moveq.w	ip, #2
 8019008:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801900c:	b2a4      	uxth	r4, r4
 801900e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019012:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019016:	454c      	cmp	r4, r9
 8019018:	fa1f fc8c 	uxth.w	ip, ip
 801901c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019020:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019024:	d1e4      	bne.n	8018ff0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019026:	eba5 050e 	sub.w	r5, r5, lr
 801902a:	eb0e 0408 	add.w	r4, lr, r8
 801902e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019032:	8705      	strh	r5, [r0, #56]	; 0x38
 8019034:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019038:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801903a:	250a      	movs	r5, #10
 801903c:	1a64      	subs	r4, r4, r1
 801903e:	4439      	add	r1, r7
 8019040:	b289      	uxth	r1, r1
 8019042:	8704      	strh	r4, [r0, #56]	; 0x38
 8019044:	2909      	cmp	r1, #9
 8019046:	bf88      	it	hi
 8019048:	390a      	subhi	r1, #10
 801904a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801904c:	b18a      	cbz	r2, 8019072 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801904e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019050:	3a01      	subs	r2, #1
 8019052:	3101      	adds	r1, #1
 8019054:	b292      	uxth	r2, r2
 8019056:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801905a:	8701      	strh	r1, [r0, #56]	; 0x38
 801905c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801905e:	b901      	cbnz	r1, 8019062 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019060:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019062:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019064:	3901      	subs	r1, #1
 8019066:	b289      	uxth	r1, r1
 8019068:	86c1      	strh	r1, [r0, #54]	; 0x36
 801906a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801906e:	844c      	strh	r4, [r1, #34]	; 0x22
 8019070:	e7ec      	b.n	801904c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019072:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019076:	f7ff bf4c 	b.w	8018f12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801907a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801907a:	b570      	push	{r4, r5, r6, lr}
 801907c:	2500      	movs	r5, #0
 801907e:	4295      	cmp	r5, r2
 8019080:	d011      	beq.n	80190a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019082:	8bc4      	ldrh	r4, [r0, #30]
 8019084:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019088:	4414      	add	r4, r2
 801908a:	3c01      	subs	r4, #1
 801908c:	1b64      	subs	r4, r4, r5
 801908e:	b2a4      	uxth	r4, r4
 8019090:	2c01      	cmp	r4, #1
 8019092:	bf88      	it	hi
 8019094:	3c02      	subhi	r4, #2
 8019096:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801909a:	8b64      	ldrh	r4, [r4, #26]
 801909c:	42b4      	cmp	r4, r6
 801909e:	d117      	bne.n	80190d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80190a0:	3501      	adds	r5, #1
 80190a2:	b2ad      	uxth	r5, r5
 80190a4:	e7eb      	b.n	801907e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80190a6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80190aa:	2400      	movs	r4, #0
 80190ac:	4413      	add	r3, r2
 80190ae:	b2a2      	uxth	r2, r4
 80190b0:	429a      	cmp	r2, r3
 80190b2:	da0f      	bge.n	80190d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80190b4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80190b6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80190ba:	3401      	adds	r4, #1
 80190bc:	4432      	add	r2, r6
 80190be:	b292      	uxth	r2, r2
 80190c0:	2a09      	cmp	r2, #9
 80190c2:	bf88      	it	hi
 80190c4:	3a0a      	subhi	r2, #10
 80190c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80190ca:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80190cc:	42aa      	cmp	r2, r5
 80190ce:	d0ee      	beq.n	80190ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80190d0:	2000      	movs	r0, #0
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	2001      	movs	r0, #1
 80190d6:	e7fc      	b.n	80190d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080190d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80190d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190dc:	4605      	mov	r5, r0
 80190de:	4616      	mov	r6, r2
 80190e0:	1c8c      	adds	r4, r1, #2
 80190e2:	8809      	ldrh	r1, [r1, #0]
 80190e4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80190e8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80190ec:	42b3      	cmp	r3, r6
 80190ee:	d124      	bne.n	801913a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80190f0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80190f4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80190f8:	f001 070f 	and.w	r7, r1, #15
 80190fc:	4652      	mov	r2, sl
 80190fe:	f8cd 8000 	str.w	r8, [sp]
 8019102:	464b      	mov	r3, r9
 8019104:	4621      	mov	r1, r4
 8019106:	4628      	mov	r0, r5
 8019108:	f7ff ffb7 	bl	801907a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801910c:	4683      	mov	fp, r0
 801910e:	b168      	cbz	r0, 801912c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019110:	eb0a 0109 	add.w	r1, sl, r9
 8019114:	463a      	mov	r2, r7
 8019116:	4628      	mov	r0, r5
 8019118:	4441      	add	r1, r8
 801911a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801911e:	4649      	mov	r1, r9
 8019120:	f7ff ff52 	bl	8018fc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019124:	4658      	mov	r0, fp
 8019126:	b003      	add	sp, #12
 8019128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912c:	eb07 010a 	add.w	r1, r7, sl
 8019130:	4449      	add	r1, r9
 8019132:	4441      	add	r1, r8
 8019134:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019138:	e7d2      	b.n	80190e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801913a:	f04f 0b00 	mov.w	fp, #0
 801913e:	e7f1      	b.n	8019124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019140 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019140:	b570      	push	{r4, r5, r6, lr}
 8019142:	8810      	ldrh	r0, [r2, #0]
 8019144:	4298      	cmp	r0, r3
 8019146:	d817      	bhi.n	8019178 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019148:	1e48      	subs	r0, r1, #1
 801914a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801914e:	4298      	cmp	r0, r3
 8019150:	d312      	bcc.n	8019178 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019152:	2400      	movs	r4, #0
 8019154:	428c      	cmp	r4, r1
 8019156:	d20f      	bcs.n	8019178 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019158:	1860      	adds	r0, r4, r1
 801915a:	1040      	asrs	r0, r0, #1
 801915c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019160:	0085      	lsls	r5, r0, #2
 8019162:	42b3      	cmp	r3, r6
 8019164:	d902      	bls.n	801916c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019166:	3001      	adds	r0, #1
 8019168:	b284      	uxth	r4, r0
 801916a:	e7f3      	b.n	8019154 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801916c:	d201      	bcs.n	8019172 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801916e:	b281      	uxth	r1, r0
 8019170:	e7f0      	b.n	8019154 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019172:	442a      	add	r2, r5
 8019174:	8850      	ldrh	r0, [r2, #2]
 8019176:	bd70      	pop	{r4, r5, r6, pc}
 8019178:	2000      	movs	r0, #0
 801917a:	e7fc      	b.n	8019176 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801917c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019180:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019182:	4604      	mov	r4, r0
 8019184:	260b      	movs	r6, #11
 8019186:	886f      	ldrh	r7, [r5, #2]
 8019188:	087f      	lsrs	r7, r7, #1
 801918a:	3e01      	subs	r6, #1
 801918c:	d013      	beq.n	80191b6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801918e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019190:	462a      	mov	r2, r5
 8019192:	4639      	mov	r1, r7
 8019194:	4620      	mov	r0, r4
 8019196:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801919a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801919e:	4643      	mov	r3, r8
 80191a0:	f7ff ffce 	bl	8019140 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80191a4:	b138      	cbz	r0, 80191b6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80191a6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80191aa:	4642      	mov	r2, r8
 80191ac:	4620      	mov	r0, r4
 80191ae:	f7ff ff93 	bl	80190d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d1e9      	bne.n	801918a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80191b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080191bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80191bc:	b570      	push	{r4, r5, r6, lr}
 80191be:	694a      	ldr	r2, [r1, #20]
 80191c0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80191c2:	684b      	ldr	r3, [r1, #4]
 80191c4:	1b54      	subs	r4, r2, r5
 80191c6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80191c8:	f000 8106 	beq.w	80193d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80191cc:	1b9b      	subs	r3, r3, r6
 80191ce:	d003      	beq.n	80191d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80191d0:	4363      	muls	r3, r4
 80191d2:	2210      	movs	r2, #16
 80191d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80191d8:	680c      	ldr	r4, [r1, #0]
 80191da:	698a      	ldr	r2, [r1, #24]
 80191dc:	1b65      	subs	r5, r4, r5
 80191de:	f000 80fd 	beq.w	80193dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80191e2:	1b92      	subs	r2, r2, r6
 80191e4:	d003      	beq.n	80191ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80191e6:	436a      	muls	r2, r5
 80191e8:	2410      	movs	r4, #16
 80191ea:	fb92 f2f4 	sdiv	r2, r2, r4
 80191ee:	1a9b      	subs	r3, r3, r2
 80191f0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019418 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80191f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80191f8:	460a      	mov	r2, r1
 80191fa:	ee07 3a90 	vmov	s15, r3
 80191fe:	f100 040c 	add.w	r4, r0, #12
 8019202:	4603      	mov	r3, r0
 8019204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019208:	ee67 7a84 	vmul.f32	s15, s15, s8
 801920c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019210:	eeb1 6a43 	vneg.f32	s12, s6
 8019214:	edd2 7a02 	vldr	s15, [r2, #8]
 8019218:	3214      	adds	r2, #20
 801921a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801921e:	ece3 6a01 	vstmia	r3!, {s13}
 8019222:	429c      	cmp	r4, r3
 8019224:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801922c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019230:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019234:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019238:	edc3 7a05 	vstr	s15, [r3, #20]
 801923c:	d1ea      	bne.n	8019214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801923e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019240:	698b      	ldr	r3, [r1, #24]
 8019242:	edd0 4a02 	vldr	s9, [r0, #8]
 8019246:	1a9b      	subs	r3, r3, r2
 8019248:	edd0 3a00 	vldr	s7, [r0]
 801924c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019250:	ee07 3a90 	vmov	s15, r3
 8019254:	684b      	ldr	r3, [r1, #4]
 8019256:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801925a:	ed90 5a05 	vldr	s10, [r0, #20]
 801925e:	1a9b      	subs	r3, r3, r2
 8019260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019264:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019268:	ed90 2a03 	vldr	s4, [r0, #12]
 801926c:	ee07 3a10 	vmov	s14, r3
 8019270:	edd0 5a04 	vldr	s11, [r0, #16]
 8019274:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019278:	ed90 1a07 	vldr	s2, [r0, #28]
 801927c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019280:	edd0 2a06 	vldr	s5, [r0, #24]
 8019284:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019288:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801928c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019290:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019294:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019298:	ee67 7a83 	vmul.f32	s15, s15, s6
 801929c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80192a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192a2:	694a      	ldr	r2, [r1, #20]
 80192a4:	1b13      	subs	r3, r2, r4
 80192a6:	ee07 3a10 	vmov	s14, r3
 80192aa:	680b      	ldr	r3, [r1, #0]
 80192ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80192b0:	1b1b      	subs	r3, r3, r4
 80192b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192b6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80192ba:	ee07 3a10 	vmov	s14, r3
 80192be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80192c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192c6:	eee6 4a87 	vfma.f32	s9, s13, s14
 80192ca:	ee64 4a86 	vmul.f32	s9, s9, s12
 80192ce:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80192d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80192d4:	698b      	ldr	r3, [r1, #24]
 80192d6:	1a9b      	subs	r3, r3, r2
 80192d8:	ee06 3a90 	vmov	s13, r3
 80192dc:	684b      	ldr	r3, [r1, #4]
 80192de:	1a9b      	subs	r3, r3, r2
 80192e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80192e4:	ee07 3a10 	vmov	s14, r3
 80192e8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80192ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80192f0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80192f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192f8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80192fc:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019300:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019304:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019306:	694a      	ldr	r2, [r1, #20]
 8019308:	1b13      	subs	r3, r2, r4
 801930a:	ee07 3a10 	vmov	s14, r3
 801930e:	680b      	ldr	r3, [r1, #0]
 8019310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019314:	1b1b      	subs	r3, r3, r4
 8019316:	ee27 7a04 	vmul.f32	s14, s14, s8
 801931a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801931e:	ee07 3a10 	vmov	s14, r3
 8019322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019326:	ee27 7a04 	vmul.f32	s14, s14, s8
 801932a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801932e:	edd0 5a08 	vldr	s11, [r0, #32]
 8019332:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019336:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801933a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801933e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019342:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019344:	698b      	ldr	r3, [r1, #24]
 8019346:	1a9b      	subs	r3, r3, r2
 8019348:	ee07 3a10 	vmov	s14, r3
 801934c:	684b      	ldr	r3, [r1, #4]
 801934e:	1a9b      	subs	r3, r3, r2
 8019350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019354:	ee01 3a90 	vmov	s3, r3
 8019358:	ee27 7a04 	vmul.f32	s14, s14, s8
 801935c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019360:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019364:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019368:	eea1 7a21 	vfma.f32	s14, s2, s3
 801936c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019370:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019374:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019376:	694a      	ldr	r2, [r1, #20]
 8019378:	1b13      	subs	r3, r2, r4
 801937a:	ee03 3a10 	vmov	s6, r3
 801937e:	680b      	ldr	r3, [r1, #0]
 8019380:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019384:	1b1b      	subs	r3, r3, r4
 8019386:	ee23 3a04 	vmul.f32	s6, s6, s8
 801938a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801938e:	ee03 3a10 	vmov	s6, r3
 8019392:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019396:	ee23 4a04 	vmul.f32	s8, s6, s8
 801939a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801939e:	ee25 6a86 	vmul.f32	s12, s11, s12
 80193a2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80193a6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80193aa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80193ae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80193b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193b6:	dd13      	ble.n	80193e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80193b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80193bc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80193c0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80193c2:	eee3 7a87 	vfma.f32	s15, s7, s14
 80193c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80193ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ce:	dd15      	ble.n	80193fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80193d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80193d4:	6403      	str	r3, [r0, #64]	; 0x40
 80193d6:	bd70      	pop	{r4, r5, r6, pc}
 80193d8:	4623      	mov	r3, r4
 80193da:	e6fd      	b.n	80191d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80193dc:	462a      	mov	r2, r5
 80193de:	e706      	b.n	80191ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80193e0:	d502      	bpl.n	80193e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80193e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80193e6:	e7e9      	b.n	80193bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80193e8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80193ec:	eea3 2a85 	vfma.f32	s4, s7, s10
 80193f0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80193f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f8:	dade      	bge.n	80193b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80193fa:	e7f2      	b.n	80193e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80193fc:	d502      	bpl.n	8019404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80193fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019402:	e7e7      	b.n	80193d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019404:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019408:	eee3 4a86 	vfma.f32	s9, s7, s12
 801940c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019414:	dadc      	bge.n	80193d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019416:	e7f2      	b.n	80193fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019418:	3d800000 	.word	0x3d800000

0801941c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019420:	2714      	movs	r7, #20
 8019422:	435f      	muls	r7, r3
 8019424:	eb02 0c07 	add.w	ip, r2, r7
 8019428:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801942c:	f115 0e0f 	adds.w	lr, r5, #15
 8019430:	f100 80a2 	bmi.w	8019578 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019434:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019438:	9c08      	ldr	r4, [sp, #32]
 801943a:	2614      	movs	r6, #20
 801943c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019440:	4366      	muls	r6, r4
 8019442:	eb02 0806 	add.w	r8, r2, r6
 8019446:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801944a:	f115 040f 	adds.w	r4, r5, #15
 801944e:	f100 809f 	bmi.w	8019590 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019452:	1124      	asrs	r4, r4, #4
 8019454:	eba4 040e 	sub.w	r4, r4, lr
 8019458:	6184      	str	r4, [r0, #24]
 801945a:	2c00      	cmp	r4, #0
 801945c:	f000 808a 	beq.w	8019574 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019460:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019464:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019468:	5995      	ldr	r5, [r2, r6]
 801946a:	eba4 0809 	sub.w	r8, r4, r9
 801946e:	59d4      	ldr	r4, [r2, r7]
 8019470:	eba5 0a04 	sub.w	sl, r5, r4
 8019474:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019478:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801947c:	fb0e fe05 	mul.w	lr, lr, r5
 8019480:	fb0a ee19 	mls	lr, sl, r9, lr
 8019484:	fb08 e404 	mla	r4, r8, r4, lr
 8019488:	3c01      	subs	r4, #1
 801948a:	19a4      	adds	r4, r4, r6
 801948c:	f100 808c 	bmi.w	80195a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019490:	fb94 fef6 	sdiv	lr, r4, r6
 8019494:	fb06 441e 	mls	r4, r6, lr, r4
 8019498:	f8c0 e000 	str.w	lr, [r0]
 801949c:	6104      	str	r4, [r0, #16]
 801949e:	2d00      	cmp	r5, #0
 80194a0:	f2c0 8095 	blt.w	80195ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80194a4:	fb95 f4f6 	sdiv	r4, r5, r6
 80194a8:	fb06 5514 	mls	r5, r6, r4, r5
 80194ac:	6044      	str	r4, [r0, #4]
 80194ae:	6085      	str	r5, [r0, #8]
 80194b0:	60c6      	str	r6, [r0, #12]
 80194b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80194b6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80194ba:	6945      	ldr	r5, [r0, #20]
 80194bc:	59d2      	ldr	r2, [r2, r7]
 80194be:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80194c2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80195f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80194c6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80194ca:	ee07 4a10 	vmov	s14, r4
 80194ce:	6804      	ldr	r4, [r0, #0]
 80194d0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80194d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194d8:	ee07 2a90 	vmov	s15, r2
 80194dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80194e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80194e8:	edd3 6a00 	vldr	s13, [r3]
 80194ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80194f0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80194f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80194f8:	edc0 6a07 	vstr	s13, [r0, #28]
 80194fc:	edd0 6a01 	vldr	s13, [r0, #4]
 8019500:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019504:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019508:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801950c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019510:	ed80 6a08 	vstr	s12, [r0, #32]
 8019514:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019516:	6242      	str	r2, [r0, #36]	; 0x24
 8019518:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801951c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019520:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019524:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019528:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801952c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019530:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019534:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019538:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801953c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019540:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019542:	6302      	str	r2, [r0, #48]	; 0x30
 8019544:	ed93 6a06 	vldr	s12, [r3, #24]
 8019548:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801954c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019550:	eeb0 7a46 	vmov.f32	s14, s12
 8019554:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8019558:	eea6 7a27 	vfma.f32	s14, s12, s15
 801955c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019560:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8019564:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8019568:	eee6 7a87 	vfma.f32	s15, s13, s14
 801956c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8019570:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8019572:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019578:	2410      	movs	r4, #16
 801957a:	f1c5 0501 	rsb	r5, r5, #1
 801957e:	fb9e fef4 	sdiv	lr, lr, r4
 8019582:	f015 050f 	ands.w	r5, r5, #15
 8019586:	bf18      	it	ne
 8019588:	2501      	movne	r5, #1
 801958a:	ebae 0e05 	sub.w	lr, lr, r5
 801958e:	e753      	b.n	8019438 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019590:	f04f 0910 	mov.w	r9, #16
 8019594:	f1c5 0501 	rsb	r5, r5, #1
 8019598:	fb94 f4f9 	sdiv	r4, r4, r9
 801959c:	f015 050f 	ands.w	r5, r5, #15
 80195a0:	bf18      	it	ne
 80195a2:	2501      	movne	r5, #1
 80195a4:	1b64      	subs	r4, r4, r5
 80195a6:	e755      	b.n	8019454 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80195a8:	4264      	negs	r4, r4
 80195aa:	fb94 fef6 	sdiv	lr, r4, r6
 80195ae:	f1ce 0800 	rsb	r8, lr, #0
 80195b2:	fb06 441e 	mls	r4, r6, lr, r4
 80195b6:	f8c0 8000 	str.w	r8, [r0]
 80195ba:	6104      	str	r4, [r0, #16]
 80195bc:	2c00      	cmp	r4, #0
 80195be:	f43f af6e 	beq.w	801949e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80195c2:	ea6f 0e0e 	mvn.w	lr, lr
 80195c6:	1b34      	subs	r4, r6, r4
 80195c8:	f8c0 e000 	str.w	lr, [r0]
 80195cc:	e766      	b.n	801949c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80195ce:	426d      	negs	r5, r5
 80195d0:	fb95 f4f6 	sdiv	r4, r5, r6
 80195d4:	f1c4 0e00 	rsb	lr, r4, #0
 80195d8:	fb06 5514 	mls	r5, r6, r4, r5
 80195dc:	f8c0 e004 	str.w	lr, [r0, #4]
 80195e0:	6085      	str	r5, [r0, #8]
 80195e2:	2d00      	cmp	r5, #0
 80195e4:	f43f af64 	beq.w	80194b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80195e8:	43e4      	mvns	r4, r4
 80195ea:	1b75      	subs	r5, r6, r5
 80195ec:	6044      	str	r4, [r0, #4]
 80195ee:	e75e      	b.n	80194ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80195f0:	3d800000 	.word	0x3d800000

080195f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80195f4:	4b01      	ldr	r3, [pc, #4]	; (80195fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80195f6:	6018      	str	r0, [r3, #0]
 80195f8:	4770      	bx	lr
 80195fa:	bf00      	nop
 80195fc:	24006a9c 	.word	0x24006a9c

08019600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019600:	4b06      	ldr	r3, [pc, #24]	; (801961c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019602:	881a      	ldrh	r2, [r3, #0]
 8019604:	4282      	cmp	r2, r0
 8019606:	d807      	bhi.n	8019618 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019608:	4b05      	ldr	r3, [pc, #20]	; (8019620 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801960a:	881b      	ldrh	r3, [r3, #0]
 801960c:	4413      	add	r3, r2
 801960e:	4298      	cmp	r0, r3
 8019610:	bfac      	ite	ge
 8019612:	2000      	movge	r0, #0
 8019614:	2001      	movlt	r0, #1
 8019616:	4770      	bx	lr
 8019618:	2000      	movs	r0, #0
 801961a:	4770      	bx	lr
 801961c:	24006abc 	.word	0x24006abc
 8019620:	24006ac0 	.word	0x24006ac0

08019624 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019624:	b508      	push	{r3, lr}
 8019626:	4601      	mov	r1, r0
 8019628:	f7ff ffea 	bl	8019600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801962c:	b118      	cbz	r0, 8019636 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801962e:	4b02      	ldr	r3, [pc, #8]	; (8019638 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019636:	bd08      	pop	{r3, pc}
 8019638:	24006aa0 	.word	0x24006aa0

0801963c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801963c:	b538      	push	{r3, r4, r5, lr}
 801963e:	4604      	mov	r4, r0
 8019640:	f7ff ffde 	bl	8019600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019644:	b188      	cbz	r0, 801966a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8019646:	4b09      	ldr	r3, [pc, #36]	; (801966c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8019648:	881a      	ldrh	r2, [r3, #0]
 801964a:	4b09      	ldr	r3, [pc, #36]	; (8019670 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801964c:	1aa4      	subs	r4, r4, r2
 801964e:	220e      	movs	r2, #14
 8019650:	681d      	ldr	r5, [r3, #0]
 8019652:	4362      	muls	r2, r4
 8019654:	18ac      	adds	r4, r5, r2
 8019656:	7b23      	ldrb	r3, [r4, #12]
 8019658:	f013 0320 	ands.w	r3, r3, #32
 801965c:	bf17      	itett	ne
 801965e:	680b      	ldrne	r3, [r1, #0]
 8019660:	4618      	moveq	r0, r3
 8019662:	50ab      	strne	r3, [r5, r2]
 8019664:	684b      	ldrne	r3, [r1, #4]
 8019666:	bf18      	it	ne
 8019668:	6063      	strne	r3, [r4, #4]
 801966a:	bd38      	pop	{r3, r4, r5, pc}
 801966c:	24006abc 	.word	0x24006abc
 8019670:	24006aa4 	.word	0x24006aa4

08019674 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8019674:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019678:	4606      	mov	r6, r0
 801967a:	460c      	mov	r4, r1
 801967c:	f7ff ffc0 	bl	8019600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019680:	b918      	cbnz	r0, 801968a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8019682:	2000      	movs	r0, #0
 8019684:	b002      	add	sp, #8
 8019686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801968a:	4608      	mov	r0, r1
 801968c:	f7fa fae3 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019690:	2800      	cmp	r0, #0
 8019692:	d1f6      	bne.n	8019682 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019694:	4b3f      	ldr	r3, [pc, #252]	; (8019794 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8019696:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8019798 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801969a:	881d      	ldrh	r5, [r3, #0]
 801969c:	f8d9 a000 	ldr.w	sl, [r9]
 80196a0:	46c8      	mov	r8, r9
 80196a2:	1b73      	subs	r3, r6, r5
 80196a4:	250e      	movs	r5, #14
 80196a6:	435d      	muls	r5, r3
 80196a8:	eb0a 0705 	add.w	r7, sl, r5
 80196ac:	7b3b      	ldrb	r3, [r7, #12]
 80196ae:	f013 0f20 	tst.w	r3, #32
 80196b2:	d0e6      	beq.n	8019682 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80196b4:	4621      	mov	r1, r4
 80196b6:	4638      	mov	r0, r7
 80196b8:	f7fd fb00 	bl	8016cbc <_ZNK8touchgfx4Rect8includesERKS0_>
 80196bc:	2800      	cmp	r0, #0
 80196be:	d1e1      	bne.n	8019684 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80196c0:	4639      	mov	r1, r7
 80196c2:	4620      	mov	r0, r4
 80196c4:	f7fd fafa 	bl	8016cbc <_ZNK8touchgfx4Rect8includesERKS0_>
 80196c8:	b108      	cbz	r0, 80196ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80196ca:	4621      	mov	r1, r4
 80196cc:	e020      	b.n	8019710 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80196ce:	f9b4 2000 	ldrsh.w	r2, [r4]
 80196d2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d11e      	bne.n	8019718 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80196da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80196de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80196e2:	429a      	cmp	r2, r3
 80196e4:	d118      	bne.n	8019718 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80196e6:	6820      	ldr	r0, [r4, #0]
 80196e8:	466b      	mov	r3, sp
 80196ea:	6861      	ldr	r1, [r4, #4]
 80196ec:	c303      	stmia	r3!, {r0, r1}
 80196ee:	4639      	mov	r1, r7
 80196f0:	4668      	mov	r0, sp
 80196f2:	f7fd fb09 	bl	8016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80196f6:	f8d9 3000 	ldr.w	r3, [r9]
 80196fa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80196fe:	442b      	add	r3, r5
 8019700:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019704:	4413      	add	r3, r2
 8019706:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801970a:	4293      	cmp	r3, r2
 801970c:	dc04      	bgt.n	8019718 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801970e:	4669      	mov	r1, sp
 8019710:	4630      	mov	r0, r6
 8019712:	f7ff ff93 	bl	801963c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8019716:	e7b5      	b.n	8019684 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019718:	f8d8 3000 	ldr.w	r3, [r8]
 801971c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019720:	442b      	add	r3, r5
 8019722:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019726:	4291      	cmp	r1, r2
 8019728:	d119      	bne.n	801975e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801972a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801972e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019732:	4291      	cmp	r1, r2
 8019734:	d113      	bne.n	801975e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019736:	6820      	ldr	r0, [r4, #0]
 8019738:	466a      	mov	r2, sp
 801973a:	6861      	ldr	r1, [r4, #4]
 801973c:	c203      	stmia	r2!, {r0, r1}
 801973e:	4619      	mov	r1, r3
 8019740:	4668      	mov	r0, sp
 8019742:	f7fd fae1 	bl	8016d08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019746:	f8d8 3000 	ldr.w	r3, [r8]
 801974a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801974e:	442b      	add	r3, r5
 8019750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019754:	4413      	add	r3, r2
 8019756:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801975a:	4293      	cmp	r3, r2
 801975c:	ddd7      	ble.n	801970e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801975e:	4620      	mov	r0, r4
 8019760:	f7fa fa79 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019764:	b990      	cbnz	r0, 801978c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8019766:	88a7      	ldrh	r7, [r4, #4]
 8019768:	88e3      	ldrh	r3, [r4, #6]
 801976a:	fb17 f703 	smulbb	r7, r7, r3
 801976e:	f8d8 3000 	ldr.w	r3, [r8]
 8019772:	441d      	add	r5, r3
 8019774:	4628      	mov	r0, r5
 8019776:	f7fa fa6e 	bl	8013c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801977a:	b948      	cbnz	r0, 8019790 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801977c:	88ab      	ldrh	r3, [r5, #4]
 801977e:	88ea      	ldrh	r2, [r5, #6]
 8019780:	fb13 f302 	smulbb	r3, r3, r2
 8019784:	42bb      	cmp	r3, r7
 8019786:	f6bf af7c 	bge.w	8019682 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801978a:	e79e      	b.n	80196ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801978c:	2700      	movs	r7, #0
 801978e:	e7ee      	b.n	801976e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8019790:	2300      	movs	r3, #0
 8019792:	e7f7      	b.n	8019784 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8019794:	24006abc 	.word	0x24006abc
 8019798:	24006aa4 	.word	0x24006aa4

0801979c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801979c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801979e:	4c24      	ldr	r4, [pc, #144]	; (8019830 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80197a0:	6823      	ldr	r3, [r4, #0]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d042      	beq.n	801982c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80197a6:	4a23      	ldr	r2, [pc, #140]	; (8019834 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80197a8:	4d23      	ldr	r5, [pc, #140]	; (8019838 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80197aa:	8811      	ldrh	r1, [r2, #0]
 80197ac:	f8b5 c000 	ldrh.w	ip, [r5]
 80197b0:	4822      	ldr	r0, [pc, #136]	; (801983c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80197b2:	4461      	add	r1, ip
 80197b4:	1c4a      	adds	r2, r1, #1
 80197b6:	008f      	lsls	r7, r1, #2
 80197b8:	f022 0201 	bic.w	r2, r2, #1
 80197bc:	19de      	adds	r6, r3, r7
 80197be:	0412      	lsls	r2, r2, #16
 80197c0:	6006      	str	r6, [r0, #0]
 80197c2:	4e1f      	ldr	r6, [pc, #124]	; (8019840 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80197c4:	0c12      	lsrs	r2, r2, #16
 80197c6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80197ca:	19da      	adds	r2, r3, r7
 80197cc:	6032      	str	r2, [r6, #0]
 80197ce:	220e      	movs	r2, #14
 80197d0:	fb02 f20c 	mul.w	r2, r2, ip
 80197d4:	3203      	adds	r2, #3
 80197d6:	f022 0203 	bic.w	r2, r2, #3
 80197da:	443a      	add	r2, r7
 80197dc:	4f19      	ldr	r7, [pc, #100]	; (8019844 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80197de:	4413      	add	r3, r2
 80197e0:	603b      	str	r3, [r7, #0]
 80197e2:	2300      	movs	r3, #0
 80197e4:	4f18      	ldr	r7, [pc, #96]	; (8019848 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80197e6:	469c      	mov	ip, r3
 80197e8:	803b      	strh	r3, [r7, #0]
 80197ea:	4f18      	ldr	r7, [pc, #96]	; (801984c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80197ec:	683f      	ldr	r7, [r7, #0]
 80197ee:	1aba      	subs	r2, r7, r2
 80197f0:	4f17      	ldr	r7, [pc, #92]	; (8019850 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80197f2:	603a      	str	r2, [r7, #0]
 80197f4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80197f8:	4a16      	ldr	r2, [pc, #88]	; (8019854 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80197fa:	8013      	strh	r3, [r2, #0]
 80197fc:	428b      	cmp	r3, r1
 80197fe:	d10d      	bne.n	801981c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019800:	882d      	ldrh	r5, [r5, #0]
 8019802:	2300      	movs	r3, #0
 8019804:	6830      	ldr	r0, [r6, #0]
 8019806:	240e      	movs	r4, #14
 8019808:	429d      	cmp	r5, r3
 801980a:	d90f      	bls.n	801982c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801980c:	fb04 0203 	mla	r2, r4, r3, r0
 8019810:	3301      	adds	r3, #1
 8019812:	7b11      	ldrb	r1, [r2, #12]
 8019814:	f36f 1145 	bfc	r1, #5, #1
 8019818:	7311      	strb	r1, [r2, #12]
 801981a:	e7f5      	b.n	8019808 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801981c:	6822      	ldr	r2, [r4, #0]
 801981e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019822:	6802      	ldr	r2, [r0, #0]
 8019824:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019828:	3301      	adds	r3, #1
 801982a:	e7e7      	b.n	80197fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801982c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801982e:	bf00      	nop
 8019830:	24006aa0 	.word	0x24006aa0
 8019834:	24006abc 	.word	0x24006abc
 8019838:	24006ac0 	.word	0x24006ac0
 801983c:	24006ab4 	.word	0x24006ab4
 8019840:	24006aa4 	.word	0x24006aa4
 8019844:	24006aac 	.word	0x24006aac
 8019848:	24006abe 	.word	0x24006abe
 801984c:	24006aa8 	.word	0x24006aa8
 8019850:	24006ab8 	.word	0x24006ab8
 8019854:	24006ab0 	.word	0x24006ab0

08019858 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019858:	4b06      	ldr	r3, [pc, #24]	; (8019874 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	b943      	cbnz	r3, 8019870 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801985e:	b139      	cbz	r1, 8019870 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019860:	4b05      	ldr	r3, [pc, #20]	; (8019878 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019862:	801a      	strh	r2, [r3, #0]
 8019864:	4b05      	ldr	r3, [pc, #20]	; (801987c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019866:	6019      	str	r1, [r3, #0]
 8019868:	4b05      	ldr	r3, [pc, #20]	; (8019880 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801986a:	6018      	str	r0, [r3, #0]
 801986c:	f7ff bf96 	b.w	801979c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019870:	4770      	bx	lr
 8019872:	bf00      	nop
 8019874:	24006aac 	.word	0x24006aac
 8019878:	24006ac0 	.word	0x24006ac0
 801987c:	24006aa8 	.word	0x24006aa8
 8019880:	24006aa0 	.word	0x24006aa0

08019884 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019884:	b470      	push	{r4, r5, r6}
 8019886:	4c07      	ldr	r4, [pc, #28]	; (80198a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019888:	4605      	mov	r5, r0
 801988a:	4610      	mov	r0, r2
 801988c:	9a03      	ldr	r2, [sp, #12]
 801988e:	6826      	ldr	r6, [r4, #0]
 8019890:	b936      	cbnz	r6, 80198a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019892:	6025      	str	r5, [r4, #0]
 8019894:	4c04      	ldr	r4, [pc, #16]	; (80198a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019896:	8021      	strh	r1, [r4, #0]
 8019898:	4619      	mov	r1, r3
 801989a:	bc70      	pop	{r4, r5, r6}
 801989c:	f7ff bfdc 	b.w	8019858 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80198a0:	bc70      	pop	{r4, r5, r6}
 80198a2:	4770      	bx	lr
 80198a4:	24006ac4 	.word	0x24006ac4
 80198a8:	24006abc 	.word	0x24006abc

080198ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80198ac:	4a12      	ldr	r2, [pc, #72]	; (80198f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80198ae:	8803      	ldrh	r3, [r0, #0]
 80198b0:	8812      	ldrh	r2, [r2, #0]
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d207      	bcs.n	80198c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80198b6:	4a11      	ldr	r2, [pc, #68]	; (80198fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80198b8:	2114      	movs	r1, #20
 80198ba:	6812      	ldr	r2, [r2, #0]
 80198bc:	fb01 2303 	mla	r3, r1, r3, r2
 80198c0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80198c4:	4770      	bx	lr
 80198c6:	490e      	ldr	r1, [pc, #56]	; (8019900 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80198c8:	8809      	ldrh	r1, [r1, #0]
 80198ca:	4411      	add	r1, r2
 80198cc:	428b      	cmp	r3, r1
 80198ce:	da04      	bge.n	80198da <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80198d0:	1a9b      	subs	r3, r3, r2
 80198d2:	4a0c      	ldr	r2, [pc, #48]	; (8019904 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80198d4:	210e      	movs	r1, #14
 80198d6:	6812      	ldr	r2, [r2, #0]
 80198d8:	e7f0      	b.n	80198bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80198da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80198de:	4293      	cmp	r3, r2
 80198e0:	d108      	bne.n	80198f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80198e2:	4b09      	ldr	r3, [pc, #36]	; (8019908 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	b91b      	cbnz	r3, 80198f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80198e8:	4b08      	ldr	r3, [pc, #32]	; (801990c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80198ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80198ee:	4770      	bx	lr
 80198f0:	4b07      	ldr	r3, [pc, #28]	; (8019910 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80198f2:	e7fa      	b.n	80198ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80198f4:	2000      	movs	r0, #0
 80198f6:	4770      	bx	lr
 80198f8:	24006abc 	.word	0x24006abc
 80198fc:	24006ac4 	.word	0x24006ac4
 8019900:	24006ac0 	.word	0x24006ac0
 8019904:	24006aa4 	.word	0x24006aa4
 8019908:	24006a34 	.word	0x24006a34
 801990c:	24006a36 	.word	0x24006a36
 8019910:	24006a38 	.word	0x24006a38

08019914 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019914:	4a12      	ldr	r2, [pc, #72]	; (8019960 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019916:	8803      	ldrh	r3, [r0, #0]
 8019918:	8812      	ldrh	r2, [r2, #0]
 801991a:	4293      	cmp	r3, r2
 801991c:	d207      	bcs.n	801992e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801991e:	4a11      	ldr	r2, [pc, #68]	; (8019964 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019920:	2114      	movs	r1, #20
 8019922:	6812      	ldr	r2, [r2, #0]
 8019924:	fb01 2303 	mla	r3, r1, r3, r2
 8019928:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801992c:	4770      	bx	lr
 801992e:	490e      	ldr	r1, [pc, #56]	; (8019968 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019930:	8809      	ldrh	r1, [r1, #0]
 8019932:	4411      	add	r1, r2
 8019934:	428b      	cmp	r3, r1
 8019936:	da04      	bge.n	8019942 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019938:	1a9b      	subs	r3, r3, r2
 801993a:	4a0c      	ldr	r2, [pc, #48]	; (801996c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801993c:	210e      	movs	r1, #14
 801993e:	6812      	ldr	r2, [r2, #0]
 8019940:	e7f0      	b.n	8019924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019942:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019946:	4293      	cmp	r3, r2
 8019948:	d108      	bne.n	801995c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801994a:	4b09      	ldr	r3, [pc, #36]	; (8019970 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	b91b      	cbnz	r3, 8019958 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019950:	4b08      	ldr	r3, [pc, #32]	; (8019974 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019952:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019956:	4770      	bx	lr
 8019958:	4b07      	ldr	r3, [pc, #28]	; (8019978 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801995a:	e7fa      	b.n	8019952 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801995c:	2000      	movs	r0, #0
 801995e:	4770      	bx	lr
 8019960:	24006abc 	.word	0x24006abc
 8019964:	24006ac4 	.word	0x24006ac4
 8019968:	24006ac0 	.word	0x24006ac0
 801996c:	24006aa4 	.word	0x24006aa4
 8019970:	24006a34 	.word	0x24006a34
 8019974:	24006a38 	.word	0x24006a38
 8019978:	24006a36 	.word	0x24006a36

0801997c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801997c:	4a12      	ldr	r2, [pc, #72]	; (80199c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801997e:	8803      	ldrh	r3, [r0, #0]
 8019980:	8811      	ldrh	r1, [r2, #0]
 8019982:	428b      	cmp	r3, r1
 8019984:	d20b      	bcs.n	801999e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019986:	4a11      	ldr	r2, [pc, #68]	; (80199cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019988:	6812      	ldr	r2, [r2, #0]
 801998a:	b112      	cbz	r2, 8019992 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801998c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019990:	b9c0      	cbnz	r0, 80199c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019992:	4a0f      	ldr	r2, [pc, #60]	; (80199d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019994:	6811      	ldr	r1, [r2, #0]
 8019996:	2214      	movs	r2, #20
 8019998:	4353      	muls	r3, r2
 801999a:	58c8      	ldr	r0, [r1, r3]
 801999c:	4770      	bx	lr
 801999e:	4a0d      	ldr	r2, [pc, #52]	; (80199d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80199a0:	8812      	ldrh	r2, [r2, #0]
 80199a2:	440a      	add	r2, r1
 80199a4:	4293      	cmp	r3, r2
 80199a6:	da04      	bge.n	80199b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80199a8:	4a08      	ldr	r2, [pc, #32]	; (80199cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80199aa:	6812      	ldr	r2, [r2, #0]
 80199ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80199b0:	4770      	bx	lr
 80199b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d103      	bne.n	80199c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80199ba:	4b07      	ldr	r3, [pc, #28]	; (80199d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80199c0:	4770      	bx	lr
 80199c2:	2000      	movs	r0, #0
 80199c4:	4770      	bx	lr
 80199c6:	bf00      	nop
 80199c8:	24006abc 	.word	0x24006abc
 80199cc:	24006aa0 	.word	0x24006aa0
 80199d0:	24006ac4 	.word	0x24006ac4
 80199d4:	24006ac0 	.word	0x24006ac0
 80199d8:	24006a3c 	.word	0x24006a3c

080199dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80199dc:	4b24      	ldr	r3, [pc, #144]	; (8019a70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80199de:	8802      	ldrh	r2, [r0, #0]
 80199e0:	8818      	ldrh	r0, [r3, #0]
 80199e2:	4282      	cmp	r2, r0
 80199e4:	d221      	bcs.n	8019a2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80199e6:	4b23      	ldr	r3, [pc, #140]	; (8019a74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80199e8:	6819      	ldr	r1, [r3, #0]
 80199ea:	2314      	movs	r3, #20
 80199ec:	fb03 1302 	mla	r3, r3, r2, r1
 80199f0:	6858      	ldr	r0, [r3, #4]
 80199f2:	2800      	cmp	r0, #0
 80199f4:	d03a      	beq.n	8019a6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80199f6:	4920      	ldr	r1, [pc, #128]	; (8019a78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80199f8:	6809      	ldr	r1, [r1, #0]
 80199fa:	2900      	cmp	r1, #0
 80199fc:	d036      	beq.n	8019a6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80199fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019a02:	2900      	cmp	r1, #0
 8019a04:	d032      	beq.n	8019a6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a06:	891a      	ldrh	r2, [r3, #8]
 8019a08:	8958      	ldrh	r0, [r3, #10]
 8019a0a:	4350      	muls	r0, r2
 8019a0c:	7c5a      	ldrb	r2, [r3, #17]
 8019a0e:	7cdb      	ldrb	r3, [r3, #19]
 8019a10:	0952      	lsrs	r2, r2, #5
 8019a12:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019a16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019a1a:	2b0b      	cmp	r3, #11
 8019a1c:	bf18      	it	ne
 8019a1e:	0040      	lslne	r0, r0, #1
 8019a20:	3003      	adds	r0, #3
 8019a22:	f020 0003 	bic.w	r0, r0, #3
 8019a26:	4408      	add	r0, r1
 8019a28:	4770      	bx	lr
 8019a2a:	4b14      	ldr	r3, [pc, #80]	; (8019a7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019a2c:	881b      	ldrh	r3, [r3, #0]
 8019a2e:	4403      	add	r3, r0
 8019a30:	429a      	cmp	r2, r3
 8019a32:	da1a      	bge.n	8019a6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019a34:	4b12      	ldr	r3, [pc, #72]	; (8019a80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019a36:	1a10      	subs	r0, r2, r0
 8019a38:	210e      	movs	r1, #14
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	fb01 3000 	mla	r0, r1, r0, r3
 8019a40:	7b03      	ldrb	r3, [r0, #12]
 8019a42:	f003 031f 	and.w	r3, r3, #31
 8019a46:	2b0b      	cmp	r3, #11
 8019a48:	d10b      	bne.n	8019a62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019a4a:	8903      	ldrh	r3, [r0, #8]
 8019a4c:	8940      	ldrh	r0, [r0, #10]
 8019a4e:	4358      	muls	r0, r3
 8019a50:	4b09      	ldr	r3, [pc, #36]	; (8019a78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019a52:	3003      	adds	r0, #3
 8019a54:	6819      	ldr	r1, [r3, #0]
 8019a56:	f020 0303 	bic.w	r3, r0, #3
 8019a5a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019a5e:	4418      	add	r0, r3
 8019a60:	4770      	bx	lr
 8019a62:	2b0d      	cmp	r3, #13
 8019a64:	d101      	bne.n	8019a6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019a66:	300d      	adds	r0, #13
 8019a68:	4770      	bx	lr
 8019a6a:	2000      	movs	r0, #0
 8019a6c:	4770      	bx	lr
 8019a6e:	bf00      	nop
 8019a70:	24006abc 	.word	0x24006abc
 8019a74:	24006ac4 	.word	0x24006ac4
 8019a78:	24006aa0 	.word	0x24006aa0
 8019a7c:	24006ac0 	.word	0x24006ac0
 8019a80:	24006aa4 	.word	0x24006aa4

08019a84 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019a84:	4a17      	ldr	r2, [pc, #92]	; (8019ae4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019a86:	b510      	push	{r4, lr}
 8019a88:	8803      	ldrh	r3, [r0, #0]
 8019a8a:	8812      	ldrh	r2, [r2, #0]
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	d20c      	bcs.n	8019aaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019a90:	4a15      	ldr	r2, [pc, #84]	; (8019ae8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019a92:	2114      	movs	r1, #20
 8019a94:	6812      	ldr	r2, [r2, #0]
 8019a96:	fb01 2303 	mla	r3, r1, r3, r2
 8019a9a:	7c58      	ldrb	r0, [r3, #17]
 8019a9c:	0942      	lsrs	r2, r0, #5
 8019a9e:	7cd8      	ldrb	r0, [r3, #19]
 8019aa0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019aa4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019aa8:	bd10      	pop	{r4, pc}
 8019aaa:	4910      	ldr	r1, [pc, #64]	; (8019aec <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019aac:	8809      	ldrh	r1, [r1, #0]
 8019aae:	4411      	add	r1, r2
 8019ab0:	428b      	cmp	r3, r1
 8019ab2:	da09      	bge.n	8019ac8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019ab4:	1a9b      	subs	r3, r3, r2
 8019ab6:	4a0e      	ldr	r2, [pc, #56]	; (8019af0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019ab8:	210e      	movs	r1, #14
 8019aba:	6812      	ldr	r2, [r2, #0]
 8019abc:	fb01 2303 	mla	r3, r1, r3, r2
 8019ac0:	7b18      	ldrb	r0, [r3, #12]
 8019ac2:	f000 001f 	and.w	r0, r0, #31
 8019ac6:	e7ef      	b.n	8019aa8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019ac8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019acc:	4293      	cmp	r3, r2
 8019ace:	d106      	bne.n	8019ade <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019ad0:	f7ea fa7c 	bl	8003fcc <_ZN8touchgfx3HAL3lcdEv>
 8019ad4:	6803      	ldr	r3, [r0, #0]
 8019ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019adc:	4718      	bx	r3
 8019ade:	2000      	movs	r0, #0
 8019ae0:	e7e2      	b.n	8019aa8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019ae2:	bf00      	nop
 8019ae4:	24006abc 	.word	0x24006abc
 8019ae8:	24006ac4 	.word	0x24006ac4
 8019aec:	24006ac0 	.word	0x24006ac0
 8019af0:	24006aa4 	.word	0x24006aa4

08019af4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019af4:	2018      	movs	r0, #24
 8019af6:	4770      	bx	lr

08019af8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019af8:	2001      	movs	r0, #1
 8019afa:	4770      	bx	lr

08019afc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8019afc:	4b02      	ldr	r3, [pc, #8]	; (8019b08 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8019afe:	8818      	ldrh	r0, [r3, #0]
 8019b00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b04:	b280      	uxth	r0, r0
 8019b06:	4770      	bx	lr
 8019b08:	24006a36 	.word	0x24006a36

08019b0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019b0c:	2bff      	cmp	r3, #255	; 0xff
 8019b0e:	d040      	beq.n	8019b92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8019b10:	2a2c      	cmp	r2, #44	; 0x2c
 8019b12:	d02a      	beq.n	8019b6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8019b14:	d80f      	bhi.n	8019b36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8019b16:	2a08      	cmp	r2, #8
 8019b18:	d037      	beq.n	8019b8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019b1a:	d805      	bhi.n	8019b28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8019b1c:	2a04      	cmp	r2, #4
 8019b1e:	d032      	beq.n	8019b86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8019b20:	2a05      	cmp	r2, #5
 8019b22:	d02e      	beq.n	8019b82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019b24:	2000      	movs	r0, #0
 8019b26:	4770      	bx	lr
 8019b28:	2a0a      	cmp	r2, #10
 8019b2a:	d02e      	beq.n	8019b8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019b2c:	d301      	bcc.n	8019b32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8019b2e:	2a0b      	cmp	r2, #11
 8019b30:	d1f8      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b32:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019b34:	4770      	bx	lr
 8019b36:	2a30      	cmp	r2, #48	; 0x30
 8019b38:	d029      	beq.n	8019b8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019b3a:	d808      	bhi.n	8019b4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8019b3c:	2a2e      	cmp	r2, #46	; 0x2e
 8019b3e:	684b      	ldr	r3, [r1, #4]
 8019b40:	d01a      	beq.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8019b42:	d90b      	bls.n	8019b5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d1ec      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b4a:	6a00      	ldr	r0, [r0, #32]
 8019b4c:	4770      	bx	lr
 8019b4e:	2a32      	cmp	r2, #50	; 0x32
 8019b50:	d01d      	beq.n	8019b8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019b52:	d301      	bcc.n	8019b58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8019b54:	2a33      	cmp	r2, #51	; 0x33
 8019b56:	d1e5      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b58:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019b5a:	4770      	bx	lr
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d0f3      	beq.n	8019b4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8019b62:	2b01      	cmp	r3, #1
 8019b64:	d1de      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b66:	6900      	ldr	r0, [r0, #16]
 8019b68:	4770      	bx	lr
 8019b6a:	684b      	ldr	r3, [r1, #4]
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	b133      	cbz	r3, 8019b7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019b70:	2b01      	cmp	r3, #1
 8019b72:	d1d7      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b74:	6880      	ldr	r0, [r0, #8]
 8019b76:	4770      	bx	lr
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d1d2      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b7e:	6980      	ldr	r0, [r0, #24]
 8019b80:	4770      	bx	lr
 8019b82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019b84:	4770      	bx	lr
 8019b86:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019b88:	4770      	bx	lr
 8019b8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019b8c:	4770      	bx	lr
 8019b8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019b90:	4770      	bx	lr
 8019b92:	2a2c      	cmp	r2, #44	; 0x2c
 8019b94:	d02a      	beq.n	8019bec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8019b96:	d80f      	bhi.n	8019bb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8019b98:	2a08      	cmp	r2, #8
 8019b9a:	d035      	beq.n	8019c08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8019b9c:	d805      	bhi.n	8019baa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019b9e:	2a04      	cmp	r2, #4
 8019ba0:	d030      	beq.n	8019c04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8019ba2:	2a05      	cmp	r2, #5
 8019ba4:	d1be      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019ba6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019ba8:	4770      	bx	lr
 8019baa:	2a0a      	cmp	r2, #10
 8019bac:	d02c      	beq.n	8019c08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8019bae:	d301      	bcc.n	8019bb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8019bb0:	2a0b      	cmp	r2, #11
 8019bb2:	d1b7      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bb4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019bb6:	4770      	bx	lr
 8019bb8:	2a30      	cmp	r2, #48	; 0x30
 8019bba:	d027      	beq.n	8019c0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8019bbc:	d808      	bhi.n	8019bd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8019bbe:	2a2e      	cmp	r2, #46	; 0x2e
 8019bc0:	684b      	ldr	r3, [r1, #4]
 8019bc2:	d01a      	beq.n	8019bfa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8019bc4:	d90b      	bls.n	8019bde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8019bc6:	781b      	ldrb	r3, [r3, #0]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d1ab      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019bce:	4770      	bx	lr
 8019bd0:	2a32      	cmp	r2, #50	; 0x32
 8019bd2:	d01b      	beq.n	8019c0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8019bd4:	d301      	bcc.n	8019bda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8019bd6:	2a33      	cmp	r2, #51	; 0x33
 8019bd8:	d1a4      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bda:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019bdc:	4770      	bx	lr
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d0f3      	beq.n	8019bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8019be4:	2b01      	cmp	r3, #1
 8019be6:	d19d      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019be8:	6940      	ldr	r0, [r0, #20]
 8019bea:	4770      	bx	lr
 8019bec:	684b      	ldr	r3, [r1, #4]
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	b133      	cbz	r3, 8019c00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8019bf2:	2b01      	cmp	r3, #1
 8019bf4:	d196      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bf6:	68c0      	ldr	r0, [r0, #12]
 8019bf8:	4770      	bx	lr
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d191      	bne.n	8019b24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c00:	69c0      	ldr	r0, [r0, #28]
 8019c02:	4770      	bx	lr
 8019c04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019c06:	4770      	bx	lr
 8019c08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019c0a:	4770      	bx	lr
 8019c0c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019c0e:	4770      	bx	lr

08019c10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	b085      	sub	sp, #20
 8019c16:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019c18:	9203      	str	r2, [sp, #12]
 8019c1a:	6870      	ldr	r0, [r6, #4]
 8019c1c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019c20:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019c24:	9101      	str	r1, [sp, #4]
 8019c26:	fa1f f885 	uxth.w	r8, r5
 8019c2a:	43ed      	mvns	r5, r5
 8019c2c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019c30:	b2ed      	uxtb	r5, r5
 8019c32:	fb00 2404 	mla	r4, r0, r4, r2
 8019c36:	6832      	ldr	r2, [r6, #0]
 8019c38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c3c:	4414      	add	r4, r2
 8019c3e:	f8dc 2000 	ldr.w	r2, [ip]
 8019c42:	9202      	str	r2, [sp, #8]
 8019c44:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019c48:	f102 0e04 	add.w	lr, r2, #4
 8019c4c:	9a01      	ldr	r2, [sp, #4]
 8019c4e:	2a00      	cmp	r2, #0
 8019c50:	dc03      	bgt.n	8019c5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019c52:	9a03      	ldr	r2, [sp, #12]
 8019c54:	2a00      	cmp	r2, #0
 8019c56:	f340 8116 	ble.w	8019e86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019c5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c5c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019c60:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c66:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019c6a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	dd0e      	ble.n	8019c90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019c72:	1406      	asrs	r6, r0, #16
 8019c74:	d405      	bmi.n	8019c82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c76:	4556      	cmp	r6, sl
 8019c78:	da03      	bge.n	8019c82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c7a:	1416      	asrs	r6, r2, #16
 8019c7c:	d401      	bmi.n	8019c82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c7e:	454e      	cmp	r6, r9
 8019c80:	db07      	blt.n	8019c92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019c82:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019c84:	3b01      	subs	r3, #1
 8019c86:	3403      	adds	r4, #3
 8019c88:	4430      	add	r0, r6
 8019c8a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019c8c:	4432      	add	r2, r6
 8019c8e:	e7ee      	b.n	8019c6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019c90:	d063      	beq.n	8019d5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019c92:	1e5e      	subs	r6, r3, #1
 8019c94:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8019c96:	fb07 0706 	mla	r7, r7, r6, r0
 8019c9a:	143f      	asrs	r7, r7, #16
 8019c9c:	d454      	bmi.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019c9e:	4557      	cmp	r7, sl
 8019ca0:	da52      	bge.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019ca2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8019ca4:	fb07 2606 	mla	r6, r7, r6, r2
 8019ca8:	1436      	asrs	r6, r6, #16
 8019caa:	d44d      	bmi.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019cac:	454e      	cmp	r6, r9
 8019cae:	da4b      	bge.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019cb0:	1ce6      	adds	r6, r4, #3
 8019cb2:	4699      	mov	r9, r3
 8019cb4:	f1b9 0f00 	cmp.w	r9, #0
 8019cb8:	f106 0603 	add.w	r6, r6, #3
 8019cbc:	dd48      	ble.n	8019d50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019cbe:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019cc2:	1417      	asrs	r7, r2, #16
 8019cc4:	9902      	ldr	r1, [sp, #8]
 8019cc6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019cca:	f109 39ff 	add.w	r9, r9, #4294967295
 8019cce:	fb0b 1707 	mla	r7, fp, r7, r1
 8019cd2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019cd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019cd8:	f817 700a 	ldrb.w	r7, [r7, sl]
 8019cdc:	fb1b fb05 	smulbb	fp, fp, r5
 8019ce0:	4408      	add	r0, r1
 8019ce2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019ce4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019ce8:	440a      	add	r2, r1
 8019cea:	eb0e 0a07 	add.w	sl, lr, r7
 8019cee:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8019cf2:	fb07 b708 	mla	r7, r7, r8, fp
 8019cf6:	b2bf      	uxth	r7, r7
 8019cf8:	f107 0b01 	add.w	fp, r7, #1
 8019cfc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019d00:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019d04:	fb1b fb05 	smulbb	fp, fp, r5
 8019d08:	123f      	asrs	r7, r7, #8
 8019d0a:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019d0e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019d12:	fb07 b708 	mla	r7, r7, r8, fp
 8019d16:	b2bf      	uxth	r7, r7
 8019d18:	f107 0b01 	add.w	fp, r7, #1
 8019d1c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019d20:	123f      	asrs	r7, r7, #8
 8019d22:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019d26:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019d2a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019d2e:	fb1a fa05 	smulbb	sl, sl, r5
 8019d32:	fb07 a708 	mla	r7, r7, r8, sl
 8019d36:	b2bf      	uxth	r7, r7
 8019d38:	f107 0a01 	add.w	sl, r7, #1
 8019d3c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019d40:	123f      	asrs	r7, r7, #8
 8019d42:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019d46:	e7b5      	b.n	8019cb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019d48:	2700      	movs	r7, #0
 8019d4a:	1bde      	subs	r6, r3, r7
 8019d4c:	2e00      	cmp	r6, #0
 8019d4e:	dc42      	bgt.n	8019dd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019d50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d58:	441c      	add	r4, r3
 8019d5a:	9b01      	ldr	r3, [sp, #4]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	f340 8092 	ble.w	8019e86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d68:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d70:	eef0 6a62 	vmov.f32	s13, s5
 8019d74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d80:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019d84:	eef0 6a43 	vmov.f32	s13, s6
 8019d88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d8c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019d90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019da0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019da4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019da8:	ee12 2a90 	vmov	r2, s5
 8019dac:	eef0 2a47 	vmov.f32	s5, s14
 8019db0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019db4:	ee13 2a10 	vmov	r2, s6
 8019db8:	9311      	str	r3, [sp, #68]	; 0x44
 8019dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dbc:	eeb0 3a67 	vmov.f32	s6, s15
 8019dc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019dc4:	9312      	str	r3, [sp, #72]	; 0x48
 8019dc6:	9b01      	ldr	r3, [sp, #4]
 8019dc8:	9a03      	ldr	r2, [sp, #12]
 8019dca:	3b01      	subs	r3, #1
 8019dcc:	9301      	str	r3, [sp, #4]
 8019dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dd0:	bf08      	it	eq
 8019dd2:	4613      	moveq	r3, r2
 8019dd4:	e73a      	b.n	8019c4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019dd6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019dda:	d44e      	bmi.n	8019e7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019ddc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019de0:	4556      	cmp	r6, sl
 8019de2:	dd4a      	ble.n	8019e7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019de4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019de8:	d447      	bmi.n	8019e7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019dea:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8019dee:	4559      	cmp	r1, fp
 8019df0:	dd43      	ble.n	8019e7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019df2:	fa0f f986 	sxth.w	r9, r6
 8019df6:	9902      	ldr	r1, [sp, #8]
 8019df8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019dfc:	fb0b 1909 	mla	r9, fp, r9, r1
 8019e00:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019e04:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019e08:	fb1b fb05 	smulbb	fp, fp, r5
 8019e0c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019e10:	eb0e 0a09 	add.w	sl, lr, r9
 8019e14:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8019e18:	fb09 b908 	mla	r9, r9, r8, fp
 8019e1c:	fa1f f989 	uxth.w	r9, r9
 8019e20:	f109 0b01 	add.w	fp, r9, #1
 8019e24:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e2c:	f804 9006 	strb.w	r9, [r4, r6]
 8019e30:	4426      	add	r6, r4
 8019e32:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019e36:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019e3a:	fb1b fb05 	smulbb	fp, fp, r5
 8019e3e:	fb09 b908 	mla	r9, r9, r8, fp
 8019e42:	fa1f f989 	uxth.w	r9, r9
 8019e46:	f109 0b01 	add.w	fp, r9, #1
 8019e4a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e52:	f886 9001 	strb.w	r9, [r6, #1]
 8019e56:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019e5a:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019e5e:	fb1a fa05 	smulbb	sl, sl, r5
 8019e62:	fb09 a908 	mla	r9, r9, r8, sl
 8019e66:	fa1f f989 	uxth.w	r9, r9
 8019e6a:	f109 0a01 	add.w	sl, r9, #1
 8019e6e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019e72:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e76:	f886 9002 	strb.w	r9, [r6, #2]
 8019e7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019e7c:	3701      	adds	r7, #1
 8019e7e:	4408      	add	r0, r1
 8019e80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019e82:	440a      	add	r2, r1
 8019e84:	e761      	b.n	8019d4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019e86:	b005      	add	sp, #20
 8019e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019e92:	4693      	mov	fp, r2
 8019e94:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e9a:	6868      	ldr	r0, [r5, #4]
 8019e9c:	6877      	ldr	r7, [r6, #4]
 8019e9e:	9100      	str	r1, [sp, #0]
 8019ea0:	3704      	adds	r7, #4
 8019ea2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019ea6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8019eaa:	fb00 2404 	mla	r4, r0, r4, r2
 8019eae:	682a      	ldr	r2, [r5, #0]
 8019eb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019eb4:	4414      	add	r4, r2
 8019eb6:	6832      	ldr	r2, [r6, #0]
 8019eb8:	9201      	str	r2, [sp, #4]
 8019eba:	9a00      	ldr	r2, [sp, #0]
 8019ebc:	2a00      	cmp	r2, #0
 8019ebe:	dc03      	bgt.n	8019ec8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019ec0:	f1bb 0f00 	cmp.w	fp, #0
 8019ec4:	f340 80bc 	ble.w	801a040 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019eca:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8019ece:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ed4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8019ed8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	dd0c      	ble.n	8019efa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019ee0:	1405      	asrs	r5, r0, #16
 8019ee2:	d405      	bmi.n	8019ef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ee4:	4555      	cmp	r5, sl
 8019ee6:	da03      	bge.n	8019ef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ee8:	1415      	asrs	r5, r2, #16
 8019eea:	d401      	bmi.n	8019ef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019eec:	454d      	cmp	r5, r9
 8019eee:	db05      	blt.n	8019efc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019ef0:	4440      	add	r0, r8
 8019ef2:	4472      	add	r2, lr
 8019ef4:	3b01      	subs	r3, #1
 8019ef6:	3403      	adds	r4, #3
 8019ef8:	e7f0      	b.n	8019edc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019efa:	d03f      	beq.n	8019f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8019efc:	1e5d      	subs	r5, r3, #1
 8019efe:	fb08 0c05 	mla	ip, r8, r5, r0
 8019f02:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8019f06:	d42e      	bmi.n	8019f66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f08:	45d4      	cmp	ip, sl
 8019f0a:	da2c      	bge.n	8019f66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f0c:	fb0e 2505 	mla	r5, lr, r5, r2
 8019f10:	142d      	asrs	r5, r5, #16
 8019f12:	d428      	bmi.n	8019f66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f14:	454d      	cmp	r5, r9
 8019f16:	da26      	bge.n	8019f66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f18:	1ce5      	adds	r5, r4, #3
 8019f1a:	469c      	mov	ip, r3
 8019f1c:	f1bc 0f00 	cmp.w	ip, #0
 8019f20:	f105 0503 	add.w	r5, r5, #3
 8019f24:	dd25      	ble.n	8019f72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8019f26:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019f2a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019f2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f32:	4472      	add	r2, lr
 8019f34:	468a      	mov	sl, r1
 8019f36:	9901      	ldr	r1, [sp, #4]
 8019f38:	fb0a 1909 	mla	r9, sl, r9, r1
 8019f3c:	1401      	asrs	r1, r0, #16
 8019f3e:	4440      	add	r0, r8
 8019f40:	f819 9001 	ldrb.w	r9, [r9, r1]
 8019f44:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019f48:	eb07 0a09 	add.w	sl, r7, r9
 8019f4c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8019f50:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019f54:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019f58:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019f5c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019f60:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019f64:	e7da      	b.n	8019f1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019f66:	2500      	movs	r5, #0
 8019f68:	eba3 0c05 	sub.w	ip, r3, r5
 8019f6c:	f1bc 0f00 	cmp.w	ip, #0
 8019f70:	dc3b      	bgt.n	8019fea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f7a:	441c      	add	r4, r3
 8019f7c:	9b00      	ldr	r3, [sp, #0]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	dd5e      	ble.n	801a040 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019f82:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f8c:	eeb0 6a62 	vmov.f32	s12, s5
 8019f90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f9c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019fa0:	eeb0 6a43 	vmov.f32	s12, s6
 8019fa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019fa8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019fac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019fb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019fb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019fb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019fbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019fc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019fc4:	ee12 2a90 	vmov	r2, s5
 8019fc8:	eef0 2a47 	vmov.f32	s5, s14
 8019fcc:	fb92 f8f3 	sdiv	r8, r2, r3
 8019fd0:	ee13 2a10 	vmov	r2, s6
 8019fd4:	eeb0 3a67 	vmov.f32	s6, s15
 8019fd8:	fb92 fef3 	sdiv	lr, r2, r3
 8019fdc:	9b00      	ldr	r3, [sp, #0]
 8019fde:	3b01      	subs	r3, #1
 8019fe0:	9300      	str	r3, [sp, #0]
 8019fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fe4:	bf08      	it	eq
 8019fe6:	465b      	moveq	r3, fp
 8019fe8:	e767      	b.n	8019eba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019fea:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019fee:	d423      	bmi.n	801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ff0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8019ff4:	45cc      	cmp	ip, r9
 8019ff6:	dd1f      	ble.n	801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ff8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019ffc:	d41c      	bmi.n	801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ffe:	68f1      	ldr	r1, [r6, #12]
 801a000:	4551      	cmp	r1, sl
 801a002:	dd19      	ble.n	801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a004:	fa0f fc8c 	sxth.w	ip, ip
 801a008:	9901      	ldr	r1, [sp, #4]
 801a00a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801a00e:	f81c c009 	ldrb.w	ip, [ip, r9]
 801a012:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a016:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801a01a:	eb07 090c 	add.w	r9, r7, ip
 801a01e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801a022:	f804 a00c 	strb.w	sl, [r4, ip]
 801a026:	44a4      	add	ip, r4
 801a028:	f899 a001 	ldrb.w	sl, [r9, #1]
 801a02c:	f88c a001 	strb.w	sl, [ip, #1]
 801a030:	f899 9002 	ldrb.w	r9, [r9, #2]
 801a034:	f88c 9002 	strb.w	r9, [ip, #2]
 801a038:	4440      	add	r0, r8
 801a03a:	4472      	add	r2, lr
 801a03c:	3501      	adds	r5, #1
 801a03e:	e793      	b.n	8019f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801a040:	b003      	add	sp, #12
 801a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a046 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a04a:	b085      	sub	sp, #20
 801a04c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a050:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a052:	9202      	str	r2, [sp, #8]
 801a054:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a058:	6860      	ldr	r0, [r4, #4]
 801a05a:	9203      	str	r2, [sp, #12]
 801a05c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a060:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a064:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a068:	fb00 2505 	mla	r5, r0, r5, r2
 801a06c:	6822      	ldr	r2, [r4, #0]
 801a06e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a072:	4415      	add	r5, r2
 801a074:	f8dc 2000 	ldr.w	r2, [ip]
 801a078:	9200      	str	r2, [sp, #0]
 801a07a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a07e:	3204      	adds	r2, #4
 801a080:	9201      	str	r2, [sp, #4]
 801a082:	2900      	cmp	r1, #0
 801a084:	dc03      	bgt.n	801a08e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a086:	9a02      	ldr	r2, [sp, #8]
 801a088:	2a00      	cmp	r2, #0
 801a08a:	f340 8127 	ble.w	801a2dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a08e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a090:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a094:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a098:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a09a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a09e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	dd0d      	ble.n	801a0c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a0a6:	1422      	asrs	r2, r4, #16
 801a0a8:	d405      	bmi.n	801a0b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0aa:	4542      	cmp	r2, r8
 801a0ac:	da03      	bge.n	801a0b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0ae:	1402      	asrs	r2, r0, #16
 801a0b0:	d401      	bmi.n	801a0b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0b2:	42ba      	cmp	r2, r7
 801a0b4:	db06      	blt.n	801a0c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0b8:	4474      	add	r4, lr
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	3503      	adds	r5, #3
 801a0be:	4410      	add	r0, r2
 801a0c0:	e7ef      	b.n	801a0a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a0c2:	d075      	beq.n	801a1b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a0c4:	1e5a      	subs	r2, r3, #1
 801a0c6:	fb0e 4602 	mla	r6, lr, r2, r4
 801a0ca:	1436      	asrs	r6, r6, #16
 801a0cc:	d465      	bmi.n	801a19a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a0ce:	4546      	cmp	r6, r8
 801a0d0:	da63      	bge.n	801a19a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a0d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a0d4:	fb06 0202 	mla	r2, r6, r2, r0
 801a0d8:	1412      	asrs	r2, r2, #16
 801a0da:	d45e      	bmi.n	801a19a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a0dc:	42ba      	cmp	r2, r7
 801a0de:	da5c      	bge.n	801a19a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a0e0:	1cef      	adds	r7, r5, #3
 801a0e2:	4699      	mov	r9, r3
 801a0e4:	f1b9 0f00 	cmp.w	r9, #0
 801a0e8:	dd5d      	ble.n	801a1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801a0ea:	1402      	asrs	r2, r0, #16
 801a0ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a0f0:	1426      	asrs	r6, r4, #16
 801a0f2:	4692      	mov	sl, r2
 801a0f4:	9a00      	ldr	r2, [sp, #0]
 801a0f6:	fb08 220a 	mla	r2, r8, sl, r2
 801a0fa:	5d92      	ldrb	r2, [r2, r6]
 801a0fc:	9e01      	ldr	r6, [sp, #4]
 801a0fe:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a102:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a106:	d041      	beq.n	801a18c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a108:	9a03      	ldr	r2, [sp, #12]
 801a10a:	fa5f fb86 	uxtb.w	fp, r6
 801a10e:	fb02 f808 	mul.w	r8, r2, r8
 801a112:	f108 0201 	add.w	r2, r8, #1
 801a116:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a11a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a11e:	1212      	asrs	r2, r2, #8
 801a120:	fa1f fa82 	uxth.w	sl, r2
 801a124:	43d2      	mvns	r2, r2
 801a126:	fb1b fb0a 	smulbb	fp, fp, sl
 801a12a:	b2d2      	uxtb	r2, r2
 801a12c:	fb08 b802 	mla	r8, r8, r2, fp
 801a130:	fa1f f888 	uxth.w	r8, r8
 801a134:	f108 0b01 	add.w	fp, r8, #1
 801a138:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a13c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a140:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a144:	fb1b fb0a 	smulbb	fp, fp, sl
 801a148:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a14c:	fb16 fa0a 	smulbb	sl, r6, sl
 801a150:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a154:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a158:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a15c:	fb06 aa02 	mla	sl, r6, r2, sl
 801a160:	fb08 b802 	mla	r8, r8, r2, fp
 801a164:	fa1f fa8a 	uxth.w	sl, sl
 801a168:	fa1f f888 	uxth.w	r8, r8
 801a16c:	f10a 0601 	add.w	r6, sl, #1
 801a170:	f108 0b01 	add.w	fp, r8, #1
 801a174:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a178:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a17c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a180:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a184:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a188:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a18c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a18e:	4474      	add	r4, lr
 801a190:	3703      	adds	r7, #3
 801a192:	f109 39ff 	add.w	r9, r9, #4294967295
 801a196:	4410      	add	r0, r2
 801a198:	e7a4      	b.n	801a0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a19a:	f04f 0800 	mov.w	r8, #0
 801a19e:	eba3 0208 	sub.w	r2, r3, r8
 801a1a2:	2a00      	cmp	r2, #0
 801a1a4:	dc3b      	bgt.n	801a21e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801a1a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1ae:	441d      	add	r5, r3
 801a1b0:	2900      	cmp	r1, #0
 801a1b2:	f340 8093 	ble.w	801a2dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a1b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1c0:	3901      	subs	r1, #1
 801a1c2:	eeb0 6a62 	vmov.f32	s12, s5
 801a1c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a1d6:	eeb0 6a43 	vmov.f32	s12, s6
 801a1da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a1e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1fa:	ee12 2a90 	vmov	r2, s5
 801a1fe:	eef0 2a47 	vmov.f32	s5, s14
 801a202:	fb92 fef3 	sdiv	lr, r2, r3
 801a206:	ee13 2a10 	vmov	r2, s6
 801a20a:	eeb0 3a67 	vmov.f32	s6, s15
 801a20e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a212:	9a02      	ldr	r2, [sp, #8]
 801a214:	9312      	str	r3, [sp, #72]	; 0x48
 801a216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a218:	bf08      	it	eq
 801a21a:	4613      	moveq	r3, r2
 801a21c:	e731      	b.n	801a082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a21e:	1427      	asrs	r7, r4, #16
 801a220:	d456      	bmi.n	801a2d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a222:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a226:	42be      	cmp	r6, r7
 801a228:	dd52      	ble.n	801a2d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a22a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a22e:	d44f      	bmi.n	801a2d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a230:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a234:	454a      	cmp	r2, r9
 801a236:	dd4b      	ble.n	801a2d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a238:	9a00      	ldr	r2, [sp, #0]
 801a23a:	b236      	sxth	r6, r6
 801a23c:	fb09 2606 	mla	r6, r9, r6, r2
 801a240:	5df2      	ldrb	r2, [r6, r7]
 801a242:	9e01      	ldr	r6, [sp, #4]
 801a244:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a248:	0e3a      	lsrs	r2, r7, #24
 801a24a:	d041      	beq.n	801a2d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a24c:	9e03      	ldr	r6, [sp, #12]
 801a24e:	fa5f fb87 	uxtb.w	fp, r7
 801a252:	4372      	muls	r2, r6
 801a254:	1c56      	adds	r6, r2, #1
 801a256:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a25a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a25e:	1212      	asrs	r2, r2, #8
 801a260:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a264:	fa1f fa82 	uxth.w	sl, r2
 801a268:	43d2      	mvns	r2, r2
 801a26a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a26e:	b2d2      	uxtb	r2, r2
 801a270:	fb09 b902 	mla	r9, r9, r2, fp
 801a274:	fa1f f989 	uxth.w	r9, r9
 801a278:	f109 0b01 	add.w	fp, r9, #1
 801a27c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a280:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a284:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a288:	fb1b fb0a 	smulbb	fp, fp, sl
 801a28c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a290:	fb17 fa0a 	smulbb	sl, r7, sl
 801a294:	f805 9006 	strb.w	r9, [r5, r6]
 801a298:	442e      	add	r6, r5
 801a29a:	78b7      	ldrb	r7, [r6, #2]
 801a29c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a2a0:	fb07 aa02 	mla	sl, r7, r2, sl
 801a2a4:	fb09 b902 	mla	r9, r9, r2, fp
 801a2a8:	fa1f fa8a 	uxth.w	sl, sl
 801a2ac:	fa1f f989 	uxth.w	r9, r9
 801a2b0:	f10a 0701 	add.w	r7, sl, #1
 801a2b4:	f109 0b01 	add.w	fp, r9, #1
 801a2b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a2bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a2c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2c8:	f886 a002 	strb.w	sl, [r6, #2]
 801a2cc:	f886 9001 	strb.w	r9, [r6, #1]
 801a2d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2d2:	4474      	add	r4, lr
 801a2d4:	f108 0801 	add.w	r8, r8, #1
 801a2d8:	4410      	add	r0, r2
 801a2da:	e760      	b.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801a2dc:	b005      	add	sp, #20
 801a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2e6:	b085      	sub	sp, #20
 801a2e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a2ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a2ee:	9203      	str	r2, [sp, #12]
 801a2f0:	6868      	ldr	r0, [r5, #4]
 801a2f2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a2f6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a2fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a2fe:	fb00 2404 	mla	r4, r0, r4, r2
 801a302:	682a      	ldr	r2, [r5, #0]
 801a304:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a308:	4414      	add	r4, r2
 801a30a:	f8dc 2000 	ldr.w	r2, [ip]
 801a30e:	9201      	str	r2, [sp, #4]
 801a310:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a314:	3204      	adds	r2, #4
 801a316:	9202      	str	r2, [sp, #8]
 801a318:	2900      	cmp	r1, #0
 801a31a:	dc03      	bgt.n	801a324 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a31c:	9a03      	ldr	r2, [sp, #12]
 801a31e:	2a00      	cmp	r2, #0
 801a320:	f340 8137 	ble.w	801a592 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a326:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a32a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a32e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a330:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a334:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a338:	2b00      	cmp	r3, #0
 801a33a:	dd0d      	ble.n	801a358 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a33c:	1405      	asrs	r5, r0, #16
 801a33e:	d405      	bmi.n	801a34c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a340:	4545      	cmp	r5, r8
 801a342:	da03      	bge.n	801a34c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a344:	1415      	asrs	r5, r2, #16
 801a346:	d401      	bmi.n	801a34c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a348:	42bd      	cmp	r5, r7
 801a34a:	db06      	blt.n	801a35a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a34c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a34e:	4470      	add	r0, lr
 801a350:	3b01      	subs	r3, #1
 801a352:	3403      	adds	r4, #3
 801a354:	442a      	add	r2, r5
 801a356:	e7ef      	b.n	801a338 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a358:	d070      	beq.n	801a43c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801a35a:	1e5d      	subs	r5, r3, #1
 801a35c:	fb0e 0605 	mla	r6, lr, r5, r0
 801a360:	1436      	asrs	r6, r6, #16
 801a362:	d462      	bmi.n	801a42a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a364:	4546      	cmp	r6, r8
 801a366:	da60      	bge.n	801a42a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a368:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a36a:	fb06 2505 	mla	r5, r6, r5, r2
 801a36e:	142d      	asrs	r5, r5, #16
 801a370:	d45b      	bmi.n	801a42a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a372:	42bd      	cmp	r5, r7
 801a374:	da59      	bge.n	801a42a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a376:	1ce5      	adds	r5, r4, #3
 801a378:	469a      	mov	sl, r3
 801a37a:	f1ba 0f00 	cmp.w	sl, #0
 801a37e:	dd58      	ble.n	801a432 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801a380:	1416      	asrs	r6, r2, #16
 801a382:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a386:	1407      	asrs	r7, r0, #16
 801a388:	46b1      	mov	r9, r6
 801a38a:	9e01      	ldr	r6, [sp, #4]
 801a38c:	fb08 6609 	mla	r6, r8, r9, r6
 801a390:	5df6      	ldrb	r6, [r6, r7]
 801a392:	9f02      	ldr	r7, [sp, #8]
 801a394:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801a398:	0e37      	lsrs	r7, r6, #24
 801a39a:	2fff      	cmp	r7, #255	; 0xff
 801a39c:	f000 80f0 	beq.w	801a580 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a3a0:	fa5f f887 	uxtb.w	r8, r7
 801a3a4:	b3d7      	cbz	r7, 801a41c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a3a6:	fa1f f788 	uxth.w	r7, r8
 801a3aa:	ea6f 0808 	mvn.w	r8, r8
 801a3ae:	fa5f fb86 	uxtb.w	fp, r6
 801a3b2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a3b6:	fa5f f888 	uxtb.w	r8, r8
 801a3ba:	fb1b fb07 	smulbb	fp, fp, r7
 801a3be:	fb09 b908 	mla	r9, r9, r8, fp
 801a3c2:	fa1f f989 	uxth.w	r9, r9
 801a3c6:	f109 0b01 	add.w	fp, r9, #1
 801a3ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a3ce:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a3d2:	fb1b fb08 	smulbb	fp, fp, r8
 801a3d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a3da:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a3de:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a3e2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a3e6:	fb09 b907 	mla	r9, r9, r7, fp
 801a3ea:	fa1f f989 	uxth.w	r9, r9
 801a3ee:	f109 0b01 	add.w	fp, r9, #1
 801a3f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a3f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a3fa:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a3fe:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a402:	fb19 f808 	smulbb	r8, r9, r8
 801a406:	fb06 8607 	mla	r6, r6, r7, r8
 801a40a:	b2b6      	uxth	r6, r6
 801a40c:	f106 0801 	add.w	r8, r6, #1
 801a410:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801a414:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a418:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a41c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a41e:	4470      	add	r0, lr
 801a420:	3503      	adds	r5, #3
 801a422:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a426:	4432      	add	r2, r6
 801a428:	e7a7      	b.n	801a37a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a42a:	2600      	movs	r6, #0
 801a42c:	1b9d      	subs	r5, r3, r6
 801a42e:	2d00      	cmp	r5, #0
 801a430:	dc3b      	bgt.n	801a4aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a432:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a43a:	441c      	add	r4, r3
 801a43c:	2900      	cmp	r1, #0
 801a43e:	f340 80a8 	ble.w	801a592 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a442:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a448:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a44c:	3901      	subs	r1, #1
 801a44e:	eeb0 6a62 	vmov.f32	s12, s5
 801a452:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a456:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a45a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a45e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a462:	eeb0 6a43 	vmov.f32	s12, s6
 801a466:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a46a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a46e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a472:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a476:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a47a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a47e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a482:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a486:	ee12 2a90 	vmov	r2, s5
 801a48a:	eef0 2a47 	vmov.f32	s5, s14
 801a48e:	fb92 fef3 	sdiv	lr, r2, r3
 801a492:	ee13 2a10 	vmov	r2, s6
 801a496:	eeb0 3a67 	vmov.f32	s6, s15
 801a49a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a49e:	9a03      	ldr	r2, [sp, #12]
 801a4a0:	9312      	str	r3, [sp, #72]	; 0x48
 801a4a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a4a4:	bf08      	it	eq
 801a4a6:	4613      	moveq	r3, r2
 801a4a8:	e736      	b.n	801a318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a4aa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a4ae:	d457      	bmi.n	801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a4b0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801a4b4:	4547      	cmp	r7, r8
 801a4b6:	dd53      	ble.n	801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a4b8:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a4bc:	d450      	bmi.n	801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a4be:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801a4c2:	454d      	cmp	r5, r9
 801a4c4:	dd4c      	ble.n	801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a4c6:	9d01      	ldr	r5, [sp, #4]
 801a4c8:	b23f      	sxth	r7, r7
 801a4ca:	fb09 5707 	mla	r7, r9, r7, r5
 801a4ce:	f817 5008 	ldrb.w	r5, [r7, r8]
 801a4d2:	9f02      	ldr	r7, [sp, #8]
 801a4d4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801a4d8:	0e2f      	lsrs	r7, r5, #24
 801a4da:	2fff      	cmp	r7, #255	; 0xff
 801a4dc:	d045      	beq.n	801a56a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a4de:	fa5f f987 	uxtb.w	r9, r7
 801a4e2:	b3ef      	cbz	r7, 801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a4e4:	fa1f f889 	uxth.w	r8, r9
 801a4e8:	ea6f 0909 	mvn.w	r9, r9
 801a4ec:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a4f0:	fa5f fb85 	uxtb.w	fp, r5
 801a4f4:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a4f8:	fa5f f989 	uxtb.w	r9, r9
 801a4fc:	fb1b fb08 	smulbb	fp, fp, r8
 801a500:	fb0a ba09 	mla	sl, sl, r9, fp
 801a504:	fa1f fa8a 	uxth.w	sl, sl
 801a508:	f10a 0b01 	add.w	fp, sl, #1
 801a50c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a510:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a514:	f804 a007 	strb.w	sl, [r4, r7]
 801a518:	4427      	add	r7, r4
 801a51a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a51e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a522:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a526:	fb1b fb09 	smulbb	fp, fp, r9
 801a52a:	fb0a ba08 	mla	sl, sl, r8, fp
 801a52e:	fa1f fa8a 	uxth.w	sl, sl
 801a532:	f10a 0b01 	add.w	fp, sl, #1
 801a536:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a53a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a53e:	f887 a001 	strb.w	sl, [r7, #1]
 801a542:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a546:	fb1a f909 	smulbb	r9, sl, r9
 801a54a:	fb05 9508 	mla	r5, r5, r8, r9
 801a54e:	b2ad      	uxth	r5, r5
 801a550:	f105 0901 	add.w	r9, r5, #1
 801a554:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a558:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a55c:	f887 9002 	strb.w	r9, [r7, #2]
 801a560:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a562:	4470      	add	r0, lr
 801a564:	3601      	adds	r6, #1
 801a566:	442a      	add	r2, r5
 801a568:	e760      	b.n	801a42c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a56a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a56e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801a572:	55e5      	strb	r5, [r4, r7]
 801a574:	4427      	add	r7, r4
 801a576:	0c2d      	lsrs	r5, r5, #16
 801a578:	f887 8001 	strb.w	r8, [r7, #1]
 801a57c:	70bd      	strb	r5, [r7, #2]
 801a57e:	e7ef      	b.n	801a560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a580:	0a37      	lsrs	r7, r6, #8
 801a582:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a586:	0c36      	lsrs	r6, r6, #16
 801a588:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a58c:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a590:	e744      	b.n	801a41c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a592:	b005      	add	sp, #20
 801a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a598 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a59c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a59e:	9201      	str	r2, [sp, #4]
 801a5a0:	6870      	ldr	r0, [r6, #4]
 801a5a2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a5a6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a5aa:	fa1f fe85 	uxth.w	lr, r5
 801a5ae:	43ed      	mvns	r5, r5
 801a5b0:	f8dc 8000 	ldr.w	r8, [ip]
 801a5b4:	b2ed      	uxtb	r5, r5
 801a5b6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a5ba:	fb00 2404 	mla	r4, r0, r4, r2
 801a5be:	6832      	ldr	r2, [r6, #0]
 801a5c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a5c4:	4414      	add	r4, r2
 801a5c6:	2900      	cmp	r1, #0
 801a5c8:	dc03      	bgt.n	801a5d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a5ca:	9a01      	ldr	r2, [sp, #4]
 801a5cc:	2a00      	cmp	r2, #0
 801a5ce:	f340 810d 	ble.w	801a7ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a5d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5d4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a5d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a5dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5de:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a5e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	dd0e      	ble.n	801a608 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a5ea:	1406      	asrs	r6, r0, #16
 801a5ec:	d405      	bmi.n	801a5fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a5ee:	4556      	cmp	r6, sl
 801a5f0:	da03      	bge.n	801a5fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a5f2:	1416      	asrs	r6, r2, #16
 801a5f4:	d401      	bmi.n	801a5fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a5f6:	454e      	cmp	r6, r9
 801a5f8:	db07      	blt.n	801a60a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a5fc:	3b01      	subs	r3, #1
 801a5fe:	3403      	adds	r4, #3
 801a600:	4430      	add	r0, r6
 801a602:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a604:	4432      	add	r2, r6
 801a606:	e7ee      	b.n	801a5e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801a608:	d060      	beq.n	801a6cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801a60a:	1e5e      	subs	r6, r3, #1
 801a60c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a60e:	fb07 0706 	mla	r7, r7, r6, r0
 801a612:	143f      	asrs	r7, r7, #16
 801a614:	d451      	bmi.n	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a616:	4557      	cmp	r7, sl
 801a618:	da4f      	bge.n	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a61a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a61c:	fb07 2606 	mla	r6, r7, r6, r2
 801a620:	1436      	asrs	r6, r6, #16
 801a622:	d44a      	bmi.n	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a624:	454e      	cmp	r6, r9
 801a626:	da48      	bge.n	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a628:	1ce6      	adds	r6, r4, #3
 801a62a:	4699      	mov	r9, r3
 801a62c:	f1b9 0f00 	cmp.w	r9, #0
 801a630:	f106 0603 	add.w	r6, r6, #3
 801a634:	dd45      	ble.n	801a6c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801a636:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a63a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a63e:	1417      	asrs	r7, r2, #16
 801a640:	f109 39ff 	add.w	r9, r9, #4294967295
 801a644:	fb0b a707 	mla	r7, fp, r7, sl
 801a648:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a64c:	fb1b fb05 	smulbb	fp, fp, r5
 801a650:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a654:	eb08 0a07 	add.w	sl, r8, r7
 801a658:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a65c:	fb07 b70e 	mla	r7, r7, lr, fp
 801a660:	b2bf      	uxth	r7, r7
 801a662:	f107 0b01 	add.w	fp, r7, #1
 801a666:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a66a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a66e:	fb1b fb05 	smulbb	fp, fp, r5
 801a672:	123f      	asrs	r7, r7, #8
 801a674:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a678:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a67c:	fb07 b70e 	mla	r7, r7, lr, fp
 801a680:	b2bf      	uxth	r7, r7
 801a682:	f107 0b01 	add.w	fp, r7, #1
 801a686:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a68a:	123f      	asrs	r7, r7, #8
 801a68c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a690:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a694:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a698:	fb1a fa05 	smulbb	sl, sl, r5
 801a69c:	fb07 a70e 	mla	r7, r7, lr, sl
 801a6a0:	b2bf      	uxth	r7, r7
 801a6a2:	f107 0a01 	add.w	sl, r7, #1
 801a6a6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a6aa:	123f      	asrs	r7, r7, #8
 801a6ac:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a6b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a6b2:	4438      	add	r0, r7
 801a6b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a6b6:	443a      	add	r2, r7
 801a6b8:	e7b8      	b.n	801a62c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a6ba:	2700      	movs	r7, #0
 801a6bc:	1bde      	subs	r6, r3, r7
 801a6be:	2e00      	cmp	r6, #0
 801a6c0:	dc3f      	bgt.n	801a742 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801a6c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6ca:	441c      	add	r4, r3
 801a6cc:	2900      	cmp	r1, #0
 801a6ce:	f340 808d 	ble.w	801a7ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a6d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6dc:	3901      	subs	r1, #1
 801a6de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6e2:	eef0 6a62 	vmov.f32	s13, s5
 801a6e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a6ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6f2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801a6f6:	eef0 6a43 	vmov.f32	s13, s6
 801a6fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6fe:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801a702:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a706:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a70a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a70e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a712:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a716:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a71a:	ee12 2a90 	vmov	r2, s5
 801a71e:	eef0 2a47 	vmov.f32	s5, s14
 801a722:	fb92 f3f3 	sdiv	r3, r2, r3
 801a726:	ee13 2a10 	vmov	r2, s6
 801a72a:	930f      	str	r3, [sp, #60]	; 0x3c
 801a72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a72e:	eeb0 3a67 	vmov.f32	s6, s15
 801a732:	fb92 f3f3 	sdiv	r3, r2, r3
 801a736:	9a01      	ldr	r2, [sp, #4]
 801a738:	9310      	str	r3, [sp, #64]	; 0x40
 801a73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a73c:	bf08      	it	eq
 801a73e:	4613      	moveq	r3, r2
 801a740:	e741      	b.n	801a5c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a742:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a746:	d44b      	bmi.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a748:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a74c:	45cb      	cmp	fp, r9
 801a74e:	dd47      	ble.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a750:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a754:	d444      	bmi.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a756:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a75a:	4556      	cmp	r6, sl
 801a75c:	dd40      	ble.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a75e:	fa0f f68b 	sxth.w	r6, fp
 801a762:	fb0a 9906 	mla	r9, sl, r6, r9
 801a766:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a76a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a76e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a772:	fb1b fb05 	smulbb	fp, fp, r5
 801a776:	eb08 0a09 	add.w	sl, r8, r9
 801a77a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a77e:	fb09 b90e 	mla	r9, r9, lr, fp
 801a782:	fa1f f989 	uxth.w	r9, r9
 801a786:	f109 0b01 	add.w	fp, r9, #1
 801a78a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a78e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a792:	f804 9006 	strb.w	r9, [r4, r6]
 801a796:	4426      	add	r6, r4
 801a798:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a79c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a7a0:	fb1b fb05 	smulbb	fp, fp, r5
 801a7a4:	fb09 b90e 	mla	r9, r9, lr, fp
 801a7a8:	fa1f f989 	uxth.w	r9, r9
 801a7ac:	f109 0b01 	add.w	fp, r9, #1
 801a7b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a7b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7b8:	f886 9001 	strb.w	r9, [r6, #1]
 801a7bc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a7c0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a7c4:	fb1a fa05 	smulbb	sl, sl, r5
 801a7c8:	fb09 a90e 	mla	r9, r9, lr, sl
 801a7cc:	fa1f f989 	uxth.w	r9, r9
 801a7d0:	f109 0a01 	add.w	sl, r9, #1
 801a7d4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a7d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7dc:	f886 9002 	strb.w	r9, [r6, #2]
 801a7e0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a7e2:	3701      	adds	r7, #1
 801a7e4:	4430      	add	r0, r6
 801a7e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a7e8:	4432      	add	r2, r6
 801a7ea:	e767      	b.n	801a6bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a7ec:	b003      	add	sp, #12
 801a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a7f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a7f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a7fc:	9201      	str	r2, [sp, #4]
 801a7fe:	6868      	ldr	r0, [r5, #4]
 801a800:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a802:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a806:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801a80a:	fb00 2404 	mla	r4, r0, r4, r2
 801a80e:	682a      	ldr	r2, [r5, #0]
 801a810:	f8d7 8000 	ldr.w	r8, [r7]
 801a814:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a818:	4414      	add	r4, r2
 801a81a:	2900      	cmp	r1, #0
 801a81c:	dc03      	bgt.n	801a826 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a81e:	9a01      	ldr	r2, [sp, #4]
 801a820:	2a00      	cmp	r2, #0
 801a822:	f340 80af 	ble.w	801a984 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a828:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801a82c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a832:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801a836:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	dd0c      	ble.n	801a858 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a83e:	1405      	asrs	r5, r0, #16
 801a840:	d405      	bmi.n	801a84e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a842:	4555      	cmp	r5, sl
 801a844:	da03      	bge.n	801a84e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a846:	1415      	asrs	r5, r2, #16
 801a848:	d401      	bmi.n	801a84e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a84a:	454d      	cmp	r5, r9
 801a84c:	db05      	blt.n	801a85a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a84e:	4470      	add	r0, lr
 801a850:	4462      	add	r2, ip
 801a852:	3b01      	subs	r3, #1
 801a854:	3403      	adds	r4, #3
 801a856:	e7f0      	b.n	801a83a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a858:	d038      	beq.n	801a8cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a85a:	1e5d      	subs	r5, r3, #1
 801a85c:	fb0e 0605 	mla	r6, lr, r5, r0
 801a860:	1436      	asrs	r6, r6, #16
 801a862:	d42a      	bmi.n	801a8ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a864:	4556      	cmp	r6, sl
 801a866:	da28      	bge.n	801a8ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a868:	fb0c 2505 	mla	r5, ip, r5, r2
 801a86c:	142d      	asrs	r5, r5, #16
 801a86e:	d424      	bmi.n	801a8ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a870:	454d      	cmp	r5, r9
 801a872:	da22      	bge.n	801a8ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a874:	1ce6      	adds	r6, r4, #3
 801a876:	4699      	mov	r9, r3
 801a878:	f1b9 0f00 	cmp.w	r9, #0
 801a87c:	f106 0603 	add.w	r6, r6, #3
 801a880:	dd1f      	ble.n	801a8c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801a882:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801a886:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a88a:	1415      	asrs	r5, r2, #16
 801a88c:	4470      	add	r0, lr
 801a88e:	4462      	add	r2, ip
 801a890:	f109 39ff 	add.w	r9, r9, #4294967295
 801a894:	fb0b a505 	mla	r5, fp, r5, sl
 801a898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a89c:	eb08 0a05 	add.w	sl, r8, r5
 801a8a0:	f818 5005 	ldrb.w	r5, [r8, r5]
 801a8a4:	f806 5c06 	strb.w	r5, [r6, #-6]
 801a8a8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a8ac:	f806 5c05 	strb.w	r5, [r6, #-5]
 801a8b0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801a8b4:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a8b8:	e7de      	b.n	801a878 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a8ba:	2600      	movs	r6, #0
 801a8bc:	1b9d      	subs	r5, r3, r6
 801a8be:	2d00      	cmp	r5, #0
 801a8c0:	dc38      	bgt.n	801a934 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a8c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8ca:	441c      	add	r4, r3
 801a8cc:	2900      	cmp	r1, #0
 801a8ce:	dd59      	ble.n	801a984 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a8d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a8da:	3901      	subs	r1, #1
 801a8dc:	eeb0 6a62 	vmov.f32	s12, s5
 801a8e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8ec:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a8f0:	eeb0 6a43 	vmov.f32	s12, s6
 801a8f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8f8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a8fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a900:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a904:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a908:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a90c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a910:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a914:	ee12 2a90 	vmov	r2, s5
 801a918:	eef0 2a47 	vmov.f32	s5, s14
 801a91c:	fb92 fef3 	sdiv	lr, r2, r3
 801a920:	ee13 2a10 	vmov	r2, s6
 801a924:	eeb0 3a67 	vmov.f32	s6, s15
 801a928:	fb92 fcf3 	sdiv	ip, r2, r3
 801a92c:	9a01      	ldr	r2, [sp, #4]
 801a92e:	bf08      	it	eq
 801a930:	4613      	moveq	r3, r2
 801a932:	e772      	b.n	801a81a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a934:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a938:	d420      	bmi.n	801a97c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a93a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a93e:	45cb      	cmp	fp, r9
 801a940:	dd1c      	ble.n	801a97c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a942:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a946:	d419      	bmi.n	801a97c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a948:	68fd      	ldr	r5, [r7, #12]
 801a94a:	4555      	cmp	r5, sl
 801a94c:	dd16      	ble.n	801a97c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a94e:	fa0f f58b 	sxth.w	r5, fp
 801a952:	fb0a 9505 	mla	r5, sl, r5, r9
 801a956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a95a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801a95e:	eb08 0b05 	add.w	fp, r8, r5
 801a962:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801a966:	f804 9005 	strb.w	r9, [r4, r5]
 801a96a:	4425      	add	r5, r4
 801a96c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a970:	f885 9001 	strb.w	r9, [r5, #1]
 801a974:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a978:	f885 9002 	strb.w	r9, [r5, #2]
 801a97c:	4470      	add	r0, lr
 801a97e:	4462      	add	r2, ip
 801a980:	3601      	adds	r6, #1
 801a982:	e79b      	b.n	801a8bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801a984:	b003      	add	sp, #12
 801a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a98a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a98a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98e:	b085      	sub	sp, #20
 801a990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a994:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a996:	9202      	str	r2, [sp, #8]
 801a998:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a99c:	6860      	ldr	r0, [r4, #4]
 801a99e:	9203      	str	r2, [sp, #12]
 801a9a0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a9a4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a9a8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a9ac:	fb00 2505 	mla	r5, r0, r5, r2
 801a9b0:	6822      	ldr	r2, [r4, #0]
 801a9b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a9b6:	4415      	add	r5, r2
 801a9b8:	f8dc 2000 	ldr.w	r2, [ip]
 801a9bc:	9201      	str	r2, [sp, #4]
 801a9be:	2900      	cmp	r1, #0
 801a9c0:	dc03      	bgt.n	801a9ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a9c2:	9a02      	ldr	r2, [sp, #8]
 801a9c4:	2a00      	cmp	r2, #0
 801a9c6:	f340 8122 	ble.w	801ac0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a9ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9cc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a9d0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a9d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9d6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a9da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	dd0d      	ble.n	801a9fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a9e2:	1422      	asrs	r2, r4, #16
 801a9e4:	d405      	bmi.n	801a9f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a9e6:	4542      	cmp	r2, r8
 801a9e8:	da03      	bge.n	801a9f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a9ea:	1402      	asrs	r2, r0, #16
 801a9ec:	d401      	bmi.n	801a9f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a9ee:	42ba      	cmp	r2, r7
 801a9f0:	db06      	blt.n	801aa00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a9f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9f4:	4474      	add	r4, lr
 801a9f6:	3b01      	subs	r3, #1
 801a9f8:	3503      	adds	r5, #3
 801a9fa:	4410      	add	r0, r2
 801a9fc:	e7ef      	b.n	801a9de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a9fe:	d072      	beq.n	801aae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801aa00:	1e5a      	subs	r2, r3, #1
 801aa02:	fb0e 4602 	mla	r6, lr, r2, r4
 801aa06:	1436      	asrs	r6, r6, #16
 801aa08:	d462      	bmi.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa0a:	4546      	cmp	r6, r8
 801aa0c:	da60      	bge.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801aa10:	fb06 0202 	mla	r2, r6, r2, r0
 801aa14:	1412      	asrs	r2, r2, #16
 801aa16:	d45b      	bmi.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa18:	42ba      	cmp	r2, r7
 801aa1a:	da59      	bge.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa1c:	1cef      	adds	r7, r5, #3
 801aa1e:	4699      	mov	r9, r3
 801aa20:	f1b9 0f00 	cmp.w	r9, #0
 801aa24:	dd5a      	ble.n	801aadc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa26:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aa2a:	1426      	asrs	r6, r4, #16
 801aa2c:	1402      	asrs	r2, r0, #16
 801aa2e:	fb08 6202 	mla	r2, r8, r2, r6
 801aa32:	9e01      	ldr	r6, [sp, #4]
 801aa34:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801aa38:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801aa3c:	d041      	beq.n	801aac2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aa3e:	9a03      	ldr	r2, [sp, #12]
 801aa40:	fa5f fb86 	uxtb.w	fp, r6
 801aa44:	fb02 f808 	mul.w	r8, r2, r8
 801aa48:	f108 0201 	add.w	r2, r8, #1
 801aa4c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801aa50:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801aa54:	1212      	asrs	r2, r2, #8
 801aa56:	fa1f fa82 	uxth.w	sl, r2
 801aa5a:	43d2      	mvns	r2, r2
 801aa5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa60:	b2d2      	uxtb	r2, r2
 801aa62:	fb08 b802 	mla	r8, r8, r2, fp
 801aa66:	fa1f f888 	uxth.w	r8, r8
 801aa6a:	f108 0b01 	add.w	fp, r8, #1
 801aa6e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aa72:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801aa76:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801aa7a:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aa82:	fb16 fa0a 	smulbb	sl, r6, sl
 801aa86:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801aa8a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801aa8e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801aa92:	fb06 aa02 	mla	sl, r6, r2, sl
 801aa96:	fb08 b802 	mla	r8, r8, r2, fp
 801aa9a:	fa1f fa8a 	uxth.w	sl, sl
 801aa9e:	fa1f f888 	uxth.w	r8, r8
 801aaa2:	f10a 0601 	add.w	r6, sl, #1
 801aaa6:	f108 0b01 	add.w	fp, r8, #1
 801aaaa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801aaae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aab2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aab6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aaba:	f807 ac01 	strb.w	sl, [r7, #-1]
 801aabe:	f807 8c02 	strb.w	r8, [r7, #-2]
 801aac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aac4:	4474      	add	r4, lr
 801aac6:	3703      	adds	r7, #3
 801aac8:	f109 39ff 	add.w	r9, r9, #4294967295
 801aacc:	4410      	add	r0, r2
 801aace:	e7a7      	b.n	801aa20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801aad0:	f04f 0800 	mov.w	r8, #0
 801aad4:	eba3 0208 	sub.w	r2, r3, r8
 801aad8:	2a00      	cmp	r2, #0
 801aada:	dc3b      	bgt.n	801ab54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801aadc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aae4:	441d      	add	r5, r3
 801aae6:	2900      	cmp	r1, #0
 801aae8:	f340 8091 	ble.w	801ac0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801aaec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aaf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aaf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aaf6:	3901      	subs	r1, #1
 801aaf8:	eeb0 6a62 	vmov.f32	s12, s5
 801aafc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab08:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ab0c:	eeb0 6a43 	vmov.f32	s12, s6
 801ab10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab14:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ab18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab30:	ee12 2a90 	vmov	r2, s5
 801ab34:	eef0 2a47 	vmov.f32	s5, s14
 801ab38:	fb92 fef3 	sdiv	lr, r2, r3
 801ab3c:	ee13 2a10 	vmov	r2, s6
 801ab40:	eeb0 3a67 	vmov.f32	s6, s15
 801ab44:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab48:	9a02      	ldr	r2, [sp, #8]
 801ab4a:	9312      	str	r3, [sp, #72]	; 0x48
 801ab4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab4e:	bf08      	it	eq
 801ab50:	4613      	moveq	r3, r2
 801ab52:	e734      	b.n	801a9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ab54:	1427      	asrs	r7, r4, #16
 801ab56:	d454      	bmi.n	801ac02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ab58:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ab5c:	42be      	cmp	r6, r7
 801ab5e:	dd50      	ble.n	801ac02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ab60:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ab64:	d44d      	bmi.n	801ac02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ab66:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ab6a:	454a      	cmp	r2, r9
 801ab6c:	dd49      	ble.n	801ac02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ab6e:	b236      	sxth	r6, r6
 801ab70:	9a01      	ldr	r2, [sp, #4]
 801ab72:	fb09 7606 	mla	r6, r9, r6, r7
 801ab76:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ab7a:	0e3a      	lsrs	r2, r7, #24
 801ab7c:	d041      	beq.n	801ac02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ab7e:	9e03      	ldr	r6, [sp, #12]
 801ab80:	fa5f fb87 	uxtb.w	fp, r7
 801ab84:	4372      	muls	r2, r6
 801ab86:	1c56      	adds	r6, r2, #1
 801ab88:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ab8c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ab90:	1212      	asrs	r2, r2, #8
 801ab92:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ab96:	fa1f fa82 	uxth.w	sl, r2
 801ab9a:	43d2      	mvns	r2, r2
 801ab9c:	fb1b fb0a 	smulbb	fp, fp, sl
 801aba0:	b2d2      	uxtb	r2, r2
 801aba2:	fb09 b902 	mla	r9, r9, r2, fp
 801aba6:	fa1f f989 	uxth.w	r9, r9
 801abaa:	f109 0b01 	add.w	fp, r9, #1
 801abae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801abb2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801abb6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801abba:	fb1b fb0a 	smulbb	fp, fp, sl
 801abbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abc2:	fb17 fa0a 	smulbb	sl, r7, sl
 801abc6:	f805 9006 	strb.w	r9, [r5, r6]
 801abca:	442e      	add	r6, r5
 801abcc:	78b7      	ldrb	r7, [r6, #2]
 801abce:	f896 9001 	ldrb.w	r9, [r6, #1]
 801abd2:	fb07 aa02 	mla	sl, r7, r2, sl
 801abd6:	fb09 b902 	mla	r9, r9, r2, fp
 801abda:	fa1f fa8a 	uxth.w	sl, sl
 801abde:	fa1f f989 	uxth.w	r9, r9
 801abe2:	f10a 0701 	add.w	r7, sl, #1
 801abe6:	f109 0b01 	add.w	fp, r9, #1
 801abea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801abee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801abf2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801abf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abfa:	f886 a002 	strb.w	sl, [r6, #2]
 801abfe:	f886 9001 	strb.w	r9, [r6, #1]
 801ac02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac04:	4474      	add	r4, lr
 801ac06:	f108 0801 	add.w	r8, r8, #1
 801ac0a:	4410      	add	r0, r2
 801ac0c:	e762      	b.n	801aad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ac0e:	b005      	add	sp, #20
 801ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac18:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ac1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac1e:	9201      	str	r2, [sp, #4]
 801ac20:	6860      	ldr	r0, [r4, #4]
 801ac22:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801ac26:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801ac2a:	fb00 2505 	mla	r5, r0, r5, r2
 801ac2e:	6822      	ldr	r2, [r4, #0]
 801ac30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac34:	4415      	add	r5, r2
 801ac36:	f8dc 2000 	ldr.w	r2, [ip]
 801ac3a:	9200      	str	r2, [sp, #0]
 801ac3c:	2900      	cmp	r1, #0
 801ac3e:	dc03      	bgt.n	801ac48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ac40:	9a01      	ldr	r2, [sp, #4]
 801ac42:	2a00      	cmp	r2, #0
 801ac44:	f340 812b 	ble.w	801ae9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ac48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac4a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ac4e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ac52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac54:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ac58:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	dd0e      	ble.n	801ac7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ac60:	1422      	asrs	r2, r4, #16
 801ac62:	d405      	bmi.n	801ac70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ac64:	4572      	cmp	r2, lr
 801ac66:	da03      	bge.n	801ac70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ac68:	1402      	asrs	r2, r0, #16
 801ac6a:	d401      	bmi.n	801ac70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ac6c:	42ba      	cmp	r2, r7
 801ac6e:	db07      	blt.n	801ac80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ac70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac72:	3b01      	subs	r3, #1
 801ac74:	3503      	adds	r5, #3
 801ac76:	4414      	add	r4, r2
 801ac78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac7a:	4410      	add	r0, r2
 801ac7c:	e7ee      	b.n	801ac5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ac7e:	d06f      	beq.n	801ad60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ac80:	1e5a      	subs	r2, r3, #1
 801ac82:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ac84:	fb06 4602 	mla	r6, r6, r2, r4
 801ac88:	1436      	asrs	r6, r6, #16
 801ac8a:	d45e      	bmi.n	801ad4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ac8c:	4576      	cmp	r6, lr
 801ac8e:	da5c      	bge.n	801ad4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ac90:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ac92:	fb06 0202 	mla	r2, r6, r2, r0
 801ac96:	1412      	asrs	r2, r2, #16
 801ac98:	d457      	bmi.n	801ad4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ac9a:	42ba      	cmp	r2, r7
 801ac9c:	da55      	bge.n	801ad4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ac9e:	1cee      	adds	r6, r5, #3
 801aca0:	469a      	mov	sl, r3
 801aca2:	f1ba 0f00 	cmp.w	sl, #0
 801aca6:	dd56      	ble.n	801ad56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801aca8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801acac:	1427      	asrs	r7, r4, #16
 801acae:	1402      	asrs	r2, r0, #16
 801acb0:	fb0e 7202 	mla	r2, lr, r2, r7
 801acb4:	9f00      	ldr	r7, [sp, #0]
 801acb6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801acba:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801acbe:	d03c      	beq.n	801ad3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801acc0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801acc4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801acc8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801accc:	fa5f f28e 	uxtb.w	r2, lr
 801acd0:	b2ff      	uxtb	r7, r7
 801acd2:	f000 80dd 	beq.w	801ae90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801acd6:	fa1f f882 	uxth.w	r8, r2
 801acda:	43d2      	mvns	r2, r2
 801acdc:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801ace0:	fb17 f708 	smulbb	r7, r7, r8
 801ace4:	b2d2      	uxtb	r2, r2
 801ace6:	fb19 f908 	smulbb	r9, r9, r8
 801acea:	fb0e 7702 	mla	r7, lr, r2, r7
 801acee:	fb1b f808 	smulbb	r8, fp, r8
 801acf2:	b2bf      	uxth	r7, r7
 801acf4:	f107 0e01 	add.w	lr, r7, #1
 801acf8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801acfc:	123f      	asrs	r7, r7, #8
 801acfe:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ad02:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ad06:	fb07 9902 	mla	r9, r7, r2, r9
 801ad0a:	fa1f f989 	uxth.w	r9, r9
 801ad0e:	f109 0701 	add.w	r7, r9, #1
 801ad12:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ad16:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ad1a:	fb07 8802 	mla	r8, r7, r2, r8
 801ad1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad22:	fa1f f888 	uxth.w	r8, r8
 801ad26:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ad2a:	f108 0201 	add.w	r2, r8, #1
 801ad2e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ad32:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad36:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ad3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad3c:	3603      	adds	r6, #3
 801ad3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad42:	4414      	add	r4, r2
 801ad44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad46:	4410      	add	r0, r2
 801ad48:	e7ab      	b.n	801aca2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ad4a:	f04f 0e00 	mov.w	lr, #0
 801ad4e:	eba3 020e 	sub.w	r2, r3, lr
 801ad52:	2a00      	cmp	r2, #0
 801ad54:	dc3d      	bgt.n	801add2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ad56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad5e:	441d      	add	r5, r3
 801ad60:	2900      	cmp	r1, #0
 801ad62:	f340 809c 	ble.w	801ae9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ad66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad70:	3901      	subs	r1, #1
 801ad72:	eeb0 6a62 	vmov.f32	s12, s5
 801ad76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad82:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ad86:	eeb0 6a43 	vmov.f32	s12, s6
 801ad8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad8e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ad92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad96:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ada2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ada6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801adaa:	ee12 2a90 	vmov	r2, s5
 801adae:	eef0 2a47 	vmov.f32	s5, s14
 801adb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801adb6:	ee13 2a10 	vmov	r2, s6
 801adba:	930f      	str	r3, [sp, #60]	; 0x3c
 801adbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adbe:	eeb0 3a67 	vmov.f32	s6, s15
 801adc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801adc6:	9a01      	ldr	r2, [sp, #4]
 801adc8:	9310      	str	r3, [sp, #64]	; 0x40
 801adca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adcc:	bf08      	it	eq
 801adce:	4613      	moveq	r3, r2
 801add0:	e734      	b.n	801ac3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801add2:	1427      	asrs	r7, r4, #16
 801add4:	d44d      	bmi.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801add6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801adda:	42be      	cmp	r6, r7
 801addc:	dd49      	ble.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801adde:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ade2:	d446      	bmi.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ade4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ade8:	4542      	cmp	r2, r8
 801adea:	dd42      	ble.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801adec:	b236      	sxth	r6, r6
 801adee:	9a00      	ldr	r2, [sp, #0]
 801adf0:	fb08 7606 	mla	r6, r8, r6, r7
 801adf4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801adf8:	0e3a      	lsrs	r2, r7, #24
 801adfa:	d03a      	beq.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801adfc:	2aff      	cmp	r2, #255	; 0xff
 801adfe:	b2d6      	uxtb	r6, r2
 801ae00:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ae04:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ae08:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801ae0c:	b2ff      	uxtb	r7, r7
 801ae0e:	d037      	beq.n	801ae80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ae10:	fa1f f986 	uxth.w	r9, r6
 801ae14:	4472      	add	r2, lr
 801ae16:	43f6      	mvns	r6, r6
 801ae18:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ae1c:	fb17 f709 	smulbb	r7, r7, r9
 801ae20:	fb1a fa09 	smulbb	sl, sl, r9
 801ae24:	b2f6      	uxtb	r6, r6
 801ae26:	fb1b f909 	smulbb	r9, fp, r9
 801ae2a:	fb08 7706 	mla	r7, r8, r6, r7
 801ae2e:	b2bf      	uxth	r7, r7
 801ae30:	f107 0801 	add.w	r8, r7, #1
 801ae34:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ae38:	123f      	asrs	r7, r7, #8
 801ae3a:	54af      	strb	r7, [r5, r2]
 801ae3c:	442a      	add	r2, r5
 801ae3e:	7857      	ldrb	r7, [r2, #1]
 801ae40:	fb07 aa06 	mla	sl, r7, r6, sl
 801ae44:	fa1f fa8a 	uxth.w	sl, sl
 801ae48:	f10a 0701 	add.w	r7, sl, #1
 801ae4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ae50:	7897      	ldrb	r7, [r2, #2]
 801ae52:	fb07 9906 	mla	r9, r7, r6, r9
 801ae56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ae5a:	fa1f f989 	uxth.w	r9, r9
 801ae5e:	f882 a001 	strb.w	sl, [r2, #1]
 801ae62:	f109 0601 	add.w	r6, r9, #1
 801ae66:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ae6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae6e:	f882 9002 	strb.w	r9, [r2, #2]
 801ae72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae74:	f10e 0e01 	add.w	lr, lr, #1
 801ae78:	4414      	add	r4, r2
 801ae7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae7c:	4410      	add	r0, r2
 801ae7e:	e766      	b.n	801ad4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ae80:	4472      	add	r2, lr
 801ae82:	54af      	strb	r7, [r5, r2]
 801ae84:	442a      	add	r2, r5
 801ae86:	f882 a001 	strb.w	sl, [r2, #1]
 801ae8a:	f882 b002 	strb.w	fp, [r2, #2]
 801ae8e:	e7f0      	b.n	801ae72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae90:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ae94:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ae98:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ae9c:	e74d      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ae9e:	b003      	add	sp, #12
 801aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aea4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea8:	b087      	sub	sp, #28
 801aeaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aeae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aeb0:	9204      	str	r2, [sp, #16]
 801aeb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aeb6:	6860      	ldr	r0, [r4, #4]
 801aeb8:	9205      	str	r2, [sp, #20]
 801aeba:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801aebe:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801aec2:	9101      	str	r1, [sp, #4]
 801aec4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801aec8:	fb00 2505 	mla	r5, r0, r5, r2
 801aecc:	6822      	ldr	r2, [r4, #0]
 801aece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aed2:	4415      	add	r5, r2
 801aed4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801aed8:	3201      	adds	r2, #1
 801aeda:	f022 0201 	bic.w	r2, r2, #1
 801aede:	9202      	str	r2, [sp, #8]
 801aee0:	f8dc 2000 	ldr.w	r2, [ip]
 801aee4:	9203      	str	r2, [sp, #12]
 801aee6:	9a01      	ldr	r2, [sp, #4]
 801aee8:	2a00      	cmp	r2, #0
 801aeea:	dc03      	bgt.n	801aef4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801aeec:	9a04      	ldr	r2, [sp, #16]
 801aeee:	2a00      	cmp	r2, #0
 801aef0:	f340 8135 	ble.w	801b15e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801aef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aef6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aefa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aefe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af00:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801af04:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801af08:	2b00      	cmp	r3, #0
 801af0a:	dd0d      	ble.n	801af28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af0c:	1422      	asrs	r2, r4, #16
 801af0e:	d405      	bmi.n	801af1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af10:	4542      	cmp	r2, r8
 801af12:	da03      	bge.n	801af1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af14:	1402      	asrs	r2, r0, #16
 801af16:	d401      	bmi.n	801af1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af18:	42ba      	cmp	r2, r7
 801af1a:	db06      	blt.n	801af2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801af1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af1e:	4474      	add	r4, lr
 801af20:	3b01      	subs	r3, #1
 801af22:	3503      	adds	r5, #3
 801af24:	4410      	add	r0, r2
 801af26:	e7ef      	b.n	801af08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801af28:	d077      	beq.n	801b01a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801af2a:	1e5a      	subs	r2, r3, #1
 801af2c:	fb0e 4602 	mla	r6, lr, r2, r4
 801af30:	1436      	asrs	r6, r6, #16
 801af32:	d469      	bmi.n	801b008 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af34:	4546      	cmp	r6, r8
 801af36:	da67      	bge.n	801b008 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af38:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801af3a:	fb06 0202 	mla	r2, r6, r2, r0
 801af3e:	1412      	asrs	r2, r2, #16
 801af40:	d462      	bmi.n	801b008 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af42:	42ba      	cmp	r2, r7
 801af44:	da60      	bge.n	801b008 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af46:	1cee      	adds	r6, r5, #3
 801af48:	4699      	mov	r9, r3
 801af4a:	f1b9 0f00 	cmp.w	r9, #0
 801af4e:	dd5f      	ble.n	801b010 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801af50:	1422      	asrs	r2, r4, #16
 801af52:	9902      	ldr	r1, [sp, #8]
 801af54:	1407      	asrs	r7, r0, #16
 801af56:	fb01 2707 	mla	r7, r1, r7, r2
 801af5a:	9903      	ldr	r1, [sp, #12]
 801af5c:	087a      	lsrs	r2, r7, #1
 801af5e:	5c8a      	ldrb	r2, [r1, r2]
 801af60:	07f9      	lsls	r1, r7, #31
 801af62:	bf54      	ite	pl
 801af64:	f002 020f 	andpl.w	r2, r2, #15
 801af68:	1112      	asrmi	r2, r2, #4
 801af6a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af6e:	b2d2      	uxtb	r2, r2
 801af70:	2a00      	cmp	r2, #0
 801af72:	d042      	beq.n	801affa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801af74:	497b      	ldr	r1, [pc, #492]	; (801b164 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801af76:	680f      	ldr	r7, [r1, #0]
 801af78:	9905      	ldr	r1, [sp, #20]
 801af7a:	fa5f fb87 	uxtb.w	fp, r7
 801af7e:	434a      	muls	r2, r1
 801af80:	f102 0801 	add.w	r8, r2, #1
 801af84:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801af88:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801af8c:	1212      	asrs	r2, r2, #8
 801af8e:	fa1f fa82 	uxth.w	sl, r2
 801af92:	43d2      	mvns	r2, r2
 801af94:	fb1b fb0a 	smulbb	fp, fp, sl
 801af98:	b2d2      	uxtb	r2, r2
 801af9a:	fb08 b802 	mla	r8, r8, r2, fp
 801af9e:	fa1f f888 	uxth.w	r8, r8
 801afa2:	f108 0b01 	add.w	fp, r8, #1
 801afa6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801afaa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801afae:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801afb2:	fb1b fb0a 	smulbb	fp, fp, sl
 801afb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801afba:	fb17 fa0a 	smulbb	sl, r7, sl
 801afbe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801afc2:	f806 8c03 	strb.w	r8, [r6, #-3]
 801afc6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801afca:	fb07 aa02 	mla	sl, r7, r2, sl
 801afce:	fb08 b802 	mla	r8, r8, r2, fp
 801afd2:	fa1f fa8a 	uxth.w	sl, sl
 801afd6:	fa1f f888 	uxth.w	r8, r8
 801afda:	f10a 0701 	add.w	r7, sl, #1
 801afde:	f108 0b01 	add.w	fp, r8, #1
 801afe2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801afe6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801afea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801afee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aff2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801aff6:	f806 8c02 	strb.w	r8, [r6, #-2]
 801affa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801affc:	4474      	add	r4, lr
 801affe:	3603      	adds	r6, #3
 801b000:	f109 39ff 	add.w	r9, r9, #4294967295
 801b004:	4410      	add	r0, r2
 801b006:	e7a0      	b.n	801af4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b008:	2700      	movs	r7, #0
 801b00a:	1bda      	subs	r2, r3, r7
 801b00c:	2a00      	cmp	r2, #0
 801b00e:	dc3e      	bgt.n	801b08e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b018:	441d      	add	r5, r3
 801b01a:	9b01      	ldr	r3, [sp, #4]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	f340 809e 	ble.w	801b15e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b022:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b028:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b02c:	eeb0 6a62 	vmov.f32	s12, s5
 801b030:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b034:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b038:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b03c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b040:	eeb0 6a43 	vmov.f32	s12, s6
 801b044:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b048:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b04c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b050:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b054:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b058:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b05c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b060:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b064:	ee12 2a90 	vmov	r2, s5
 801b068:	eef0 2a47 	vmov.f32	s5, s14
 801b06c:	fb92 fef3 	sdiv	lr, r2, r3
 801b070:	ee13 2a10 	vmov	r2, s6
 801b074:	eeb0 3a67 	vmov.f32	s6, s15
 801b078:	fb92 f3f3 	sdiv	r3, r2, r3
 801b07c:	9314      	str	r3, [sp, #80]	; 0x50
 801b07e:	9b01      	ldr	r3, [sp, #4]
 801b080:	9a04      	ldr	r2, [sp, #16]
 801b082:	3b01      	subs	r3, #1
 801b084:	9301      	str	r3, [sp, #4]
 801b086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b088:	bf08      	it	eq
 801b08a:	4613      	moveq	r3, r2
 801b08c:	e72b      	b.n	801aee6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b08e:	1426      	asrs	r6, r4, #16
 801b090:	d460      	bmi.n	801b154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b092:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b096:	42b2      	cmp	r2, r6
 801b098:	dd5c      	ble.n	801b154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b09a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b09e:	d459      	bmi.n	801b154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b0a4:	4542      	cmp	r2, r8
 801b0a6:	dd55      	ble.n	801b154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0a8:	9a02      	ldr	r2, [sp, #8]
 801b0aa:	9903      	ldr	r1, [sp, #12]
 801b0ac:	fb08 6602 	mla	r6, r8, r2, r6
 801b0b0:	0872      	lsrs	r2, r6, #1
 801b0b2:	07f6      	lsls	r6, r6, #31
 801b0b4:	5c8a      	ldrb	r2, [r1, r2]
 801b0b6:	bf54      	ite	pl
 801b0b8:	f002 020f 	andpl.w	r2, r2, #15
 801b0bc:	1112      	asrmi	r2, r2, #4
 801b0be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b0c2:	b2d2      	uxtb	r2, r2
 801b0c4:	2a00      	cmp	r2, #0
 801b0c6:	d045      	beq.n	801b154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0c8:	4926      	ldr	r1, [pc, #152]	; (801b164 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b0ca:	f8d1 8000 	ldr.w	r8, [r1]
 801b0ce:	9905      	ldr	r1, [sp, #20]
 801b0d0:	fa5f fb88 	uxtb.w	fp, r8
 801b0d4:	434a      	muls	r2, r1
 801b0d6:	1c56      	adds	r6, r2, #1
 801b0d8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b0dc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b0e0:	1212      	asrs	r2, r2, #8
 801b0e2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b0e6:	fa1f fa82 	uxth.w	sl, r2
 801b0ea:	43d2      	mvns	r2, r2
 801b0ec:	fb1b fb0a 	smulbb	fp, fp, sl
 801b0f0:	b2d2      	uxtb	r2, r2
 801b0f2:	fb09 b902 	mla	r9, r9, r2, fp
 801b0f6:	fa1f f989 	uxth.w	r9, r9
 801b0fa:	f109 0b01 	add.w	fp, r9, #1
 801b0fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b102:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801b106:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801b10a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b10e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b112:	fb18 fa0a 	smulbb	sl, r8, sl
 801b116:	f805 9006 	strb.w	r9, [r5, r6]
 801b11a:	442e      	add	r6, r5
 801b11c:	f896 8002 	ldrb.w	r8, [r6, #2]
 801b120:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b124:	fb08 aa02 	mla	sl, r8, r2, sl
 801b128:	fb09 b902 	mla	r9, r9, r2, fp
 801b12c:	fa1f fa8a 	uxth.w	sl, sl
 801b130:	fa1f f989 	uxth.w	r9, r9
 801b134:	f10a 0801 	add.w	r8, sl, #1
 801b138:	f109 0b01 	add.w	fp, r9, #1
 801b13c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801b140:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b144:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b148:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b14c:	f886 a002 	strb.w	sl, [r6, #2]
 801b150:	f886 9001 	strb.w	r9, [r6, #1]
 801b154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b156:	4474      	add	r4, lr
 801b158:	3701      	adds	r7, #1
 801b15a:	4410      	add	r0, r2
 801b15c:	e755      	b.n	801b00a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801b15e:	b007      	add	sp, #28
 801b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b164:	24006a44 	.word	0x24006a44

0801b168 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b16c:	b085      	sub	sp, #20
 801b16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b172:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b174:	9203      	str	r2, [sp, #12]
 801b176:	6860      	ldr	r0, [r4, #4]
 801b178:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b17c:	9100      	str	r1, [sp, #0]
 801b17e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801b182:	fb00 2606 	mla	r6, r0, r6, r2
 801b186:	6822      	ldr	r2, [r4, #0]
 801b188:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b18c:	4416      	add	r6, r2
 801b18e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b192:	3201      	adds	r2, #1
 801b194:	f022 0201 	bic.w	r2, r2, #1
 801b198:	9201      	str	r2, [sp, #4]
 801b19a:	f8dc 2000 	ldr.w	r2, [ip]
 801b19e:	9202      	str	r2, [sp, #8]
 801b1a0:	9a00      	ldr	r2, [sp, #0]
 801b1a2:	2a00      	cmp	r2, #0
 801b1a4:	dc03      	bgt.n	801b1ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b1a6:	9a03      	ldr	r2, [sp, #12]
 801b1a8:	2a00      	cmp	r2, #0
 801b1aa:	f340 8140 	ble.w	801b42e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b1ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1b0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b1b4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801b1b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1ba:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b1be:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	dd0e      	ble.n	801b1e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b1c6:	142a      	asrs	r2, r5, #16
 801b1c8:	d405      	bmi.n	801b1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b1ca:	4572      	cmp	r2, lr
 801b1cc:	da03      	bge.n	801b1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b1ce:	1422      	asrs	r2, r4, #16
 801b1d0:	d401      	bmi.n	801b1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b1d2:	42ba      	cmp	r2, r7
 801b1d4:	db07      	blt.n	801b1e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b1d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b1d8:	3b01      	subs	r3, #1
 801b1da:	3603      	adds	r6, #3
 801b1dc:	4415      	add	r5, r2
 801b1de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b1e0:	4414      	add	r4, r2
 801b1e2:	e7ee      	b.n	801b1c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b1e4:	d072      	beq.n	801b2cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b1e6:	1e5a      	subs	r2, r3, #1
 801b1e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b1ea:	fb00 5002 	mla	r0, r0, r2, r5
 801b1ee:	1400      	asrs	r0, r0, #16
 801b1f0:	d463      	bmi.n	801b2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1f2:	4570      	cmp	r0, lr
 801b1f4:	da61      	bge.n	801b2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b1f8:	fb00 4202 	mla	r2, r0, r2, r4
 801b1fc:	1412      	asrs	r2, r2, #16
 801b1fe:	d45c      	bmi.n	801b2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b200:	42ba      	cmp	r2, r7
 801b202:	da5a      	bge.n	801b2ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b204:	1cf0      	adds	r0, r6, #3
 801b206:	469a      	mov	sl, r3
 801b208:	f1ba 0f00 	cmp.w	sl, #0
 801b20c:	dd59      	ble.n	801b2c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b20e:	142a      	asrs	r2, r5, #16
 801b210:	9901      	ldr	r1, [sp, #4]
 801b212:	1427      	asrs	r7, r4, #16
 801b214:	fb01 2707 	mla	r7, r1, r7, r2
 801b218:	9902      	ldr	r1, [sp, #8]
 801b21a:	087a      	lsrs	r2, r7, #1
 801b21c:	5c8a      	ldrb	r2, [r1, r2]
 801b21e:	07f9      	lsls	r1, r7, #31
 801b220:	bf54      	ite	pl
 801b222:	f002 020f 	andpl.w	r2, r2, #15
 801b226:	1112      	asrmi	r2, r2, #4
 801b228:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b22c:	b2d2      	uxtb	r2, r2
 801b22e:	2a00      	cmp	r2, #0
 801b230:	d03b      	beq.n	801b2aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b232:	4980      	ldr	r1, [pc, #512]	; (801b434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b234:	2aff      	cmp	r2, #255	; 0xff
 801b236:	680f      	ldr	r7, [r1, #0]
 801b238:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b23c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b240:	b2ff      	uxtb	r7, r7
 801b242:	f000 80ed 	beq.w	801b420 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b246:	fa1f f882 	uxth.w	r8, r2
 801b24a:	43d2      	mvns	r2, r2
 801b24c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801b250:	fb17 f708 	smulbb	r7, r7, r8
 801b254:	b2d2      	uxtb	r2, r2
 801b256:	fb19 f908 	smulbb	r9, r9, r8
 801b25a:	fb0e 7702 	mla	r7, lr, r2, r7
 801b25e:	fb1b f808 	smulbb	r8, fp, r8
 801b262:	b2bf      	uxth	r7, r7
 801b264:	f107 0e01 	add.w	lr, r7, #1
 801b268:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b26c:	123f      	asrs	r7, r7, #8
 801b26e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b272:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801b276:	fb07 9902 	mla	r9, r7, r2, r9
 801b27a:	fa1f f989 	uxth.w	r9, r9
 801b27e:	f109 0701 	add.w	r7, r9, #1
 801b282:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b286:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801b28a:	fb07 8802 	mla	r8, r7, r2, r8
 801b28e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b292:	fa1f f888 	uxth.w	r8, r8
 801b296:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b29a:	f108 0201 	add.w	r2, r8, #1
 801b29e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b2a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b2a6:	f800 8c01 	strb.w	r8, [r0, #-1]
 801b2aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b2ac:	3003      	adds	r0, #3
 801b2ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b2b2:	4415      	add	r5, r2
 801b2b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2b6:	4414      	add	r4, r2
 801b2b8:	e7a6      	b.n	801b208 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b2ba:	2700      	movs	r7, #0
 801b2bc:	1bda      	subs	r2, r3, r7
 801b2be:	2a00      	cmp	r2, #0
 801b2c0:	dc40      	bgt.n	801b344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b2c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2ca:	441e      	add	r6, r3
 801b2cc:	9b00      	ldr	r3, [sp, #0]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	f340 80ad 	ble.w	801b42e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b2d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b2de:	eeb0 6a62 	vmov.f32	s12, s5
 801b2e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b2e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b2ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b2f2:	eeb0 6a43 	vmov.f32	s12, s6
 801b2f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b302:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b306:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b30a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b30e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b312:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b316:	ee12 2a90 	vmov	r2, s5
 801b31a:	eef0 2a47 	vmov.f32	s5, s14
 801b31e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b322:	ee13 2a10 	vmov	r2, s6
 801b326:	9311      	str	r3, [sp, #68]	; 0x44
 801b328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b32a:	eeb0 3a67 	vmov.f32	s6, s15
 801b32e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b332:	9312      	str	r3, [sp, #72]	; 0x48
 801b334:	9b00      	ldr	r3, [sp, #0]
 801b336:	9a03      	ldr	r2, [sp, #12]
 801b338:	3b01      	subs	r3, #1
 801b33a:	9300      	str	r3, [sp, #0]
 801b33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b33e:	bf08      	it	eq
 801b340:	4613      	moveq	r3, r2
 801b342:	e72d      	b.n	801b1a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b344:	1428      	asrs	r0, r5, #16
 801b346:	d45c      	bmi.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b348:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b34c:	4282      	cmp	r2, r0
 801b34e:	dd58      	ble.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b350:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b354:	d455      	bmi.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b356:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b35a:	4572      	cmp	r2, lr
 801b35c:	dd51      	ble.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b35e:	9a01      	ldr	r2, [sp, #4]
 801b360:	9902      	ldr	r1, [sp, #8]
 801b362:	fb0e 0002 	mla	r0, lr, r2, r0
 801b366:	0842      	lsrs	r2, r0, #1
 801b368:	07c0      	lsls	r0, r0, #31
 801b36a:	5c8a      	ldrb	r2, [r1, r2]
 801b36c:	bf54      	ite	pl
 801b36e:	f002 020f 	andpl.w	r2, r2, #15
 801b372:	1112      	asrmi	r2, r2, #4
 801b374:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b378:	b2d2      	uxtb	r2, r2
 801b37a:	2a00      	cmp	r2, #0
 801b37c:	d041      	beq.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b37e:	492d      	ldr	r1, [pc, #180]	; (801b434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b380:	2aff      	cmp	r2, #255	; 0xff
 801b382:	6808      	ldr	r0, [r1, #0]
 801b384:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b388:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b38c:	fa5f fe80 	uxtb.w	lr, r0
 801b390:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b394:	d03b      	beq.n	801b40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801b396:	fa1f f982 	uxth.w	r9, r2
 801b39a:	4438      	add	r0, r7
 801b39c:	43d2      	mvns	r2, r2
 801b39e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b3a2:	fb1e fe09 	smulbb	lr, lr, r9
 801b3a6:	fb1a fa09 	smulbb	sl, sl, r9
 801b3aa:	b2d2      	uxtb	r2, r2
 801b3ac:	fb1b f909 	smulbb	r9, fp, r9
 801b3b0:	fb08 ee02 	mla	lr, r8, r2, lr
 801b3b4:	fa1f fe8e 	uxth.w	lr, lr
 801b3b8:	f10e 0801 	add.w	r8, lr, #1
 801b3bc:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801b3c0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b3c4:	f806 e000 	strb.w	lr, [r6, r0]
 801b3c8:	4430      	add	r0, r6
 801b3ca:	f890 e001 	ldrb.w	lr, [r0, #1]
 801b3ce:	fb0e aa02 	mla	sl, lr, r2, sl
 801b3d2:	fa1f fa8a 	uxth.w	sl, sl
 801b3d6:	f10a 0e01 	add.w	lr, sl, #1
 801b3da:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801b3de:	f890 e002 	ldrb.w	lr, [r0, #2]
 801b3e2:	fb0e 9902 	mla	r9, lr, r2, r9
 801b3e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b3ea:	fa1f f989 	uxth.w	r9, r9
 801b3ee:	f880 a001 	strb.w	sl, [r0, #1]
 801b3f2:	f109 0201 	add.w	r2, r9, #1
 801b3f6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b3fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b3fe:	f880 9002 	strb.w	r9, [r0, #2]
 801b402:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b404:	3701      	adds	r7, #1
 801b406:	4415      	add	r5, r2
 801b408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b40a:	4414      	add	r4, r2
 801b40c:	e756      	b.n	801b2bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b40e:	4438      	add	r0, r7
 801b410:	f806 e000 	strb.w	lr, [r6, r0]
 801b414:	4430      	add	r0, r6
 801b416:	f880 a001 	strb.w	sl, [r0, #1]
 801b41a:	f880 b002 	strb.w	fp, [r0, #2]
 801b41e:	e7f0      	b.n	801b402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b420:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b424:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b428:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b42c:	e73d      	b.n	801b2aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b42e:	b005      	add	sp, #20
 801b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b434:	24006a44 	.word	0x24006a44

0801b438 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801b438:	4770      	bx	lr

0801b43a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801b43a:	4770      	bx	lr

0801b43c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801b43c:	4770      	bx	lr

0801b43e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b43e:	4770      	bx	lr

0801b440 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b440:	4770      	bx	lr

0801b442 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b442:	4770      	bx	lr

0801b444 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b444:	4770      	bx	lr

0801b446 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b446:	4770      	bx	lr

0801b448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b448:	4770      	bx	lr

0801b44a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b44a:	4770      	bx	lr

0801b44c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b44c:	4770      	bx	lr

0801b44e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b44e:	4770      	bx	lr

0801b450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b450:	4770      	bx	lr

0801b452 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b452:	4770      	bx	lr

0801b454 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b454:	4770      	bx	lr

0801b456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b456:	4770      	bx	lr

0801b458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b458:	4770      	bx	lr

0801b45a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b45a:	4770      	bx	lr

0801b45c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b45c:	4770      	bx	lr

0801b45e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b45e:	4770      	bx	lr

0801b460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b460:	4770      	bx	lr

0801b462 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b462:	4770      	bx	lr

0801b464 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b464:	4770      	bx	lr
	...

0801b468 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b46a:	4606      	mov	r6, r0
 801b46c:	b087      	sub	sp, #28
 801b46e:	4615      	mov	r5, r2
 801b470:	461f      	mov	r7, r3
 801b472:	b353      	cbz	r3, 801b4ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b474:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	dd26      	ble.n	801b4ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b47c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b480:	2b00      	cmp	r3, #0
 801b482:	dd22      	ble.n	801b4ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b484:	6808      	ldr	r0, [r1, #0]
 801b486:	aa04      	add	r2, sp, #16
 801b488:	6849      	ldr	r1, [r1, #4]
 801b48a:	4c1b      	ldr	r4, [pc, #108]	; (801b4f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b48c:	c203      	stmia	r2!, {r0, r1}
 801b48e:	a804      	add	r0, sp, #16
 801b490:	f7fb faf2 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b494:	6820      	ldr	r0, [r4, #0]
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b49a:	4798      	blx	r3
 801b49c:	2fff      	cmp	r7, #255	; 0xff
 801b49e:	d016      	beq.n	801b4ce <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801b4a0:	f010 0f08 	tst.w	r0, #8
 801b4a4:	6820      	ldr	r0, [r4, #0]
 801b4a6:	d015      	beq.n	801b4d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801b4a8:	2400      	movs	r4, #0
 801b4aa:	6801      	ldr	r1, [r0, #0]
 801b4ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b4b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b4b4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801b4b8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b4bc:	9401      	str	r4, [sp, #4]
 801b4be:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b4c2:	9400      	str	r4, [sp, #0]
 801b4c4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801b4c6:	4629      	mov	r1, r5
 801b4c8:	47a0      	blx	r4
 801b4ca:	b007      	add	sp, #28
 801b4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4ce:	f010 0f02 	tst.w	r0, #2
 801b4d2:	e7e7      	b.n	801b4a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801b4d4:	6803      	ldr	r3, [r0, #0]
 801b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4d8:	4798      	blx	r3
 801b4da:	4b08      	ldr	r3, [pc, #32]	; (801b4fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801b4dc:	4601      	mov	r1, r0
 801b4de:	4630      	mov	r0, r6
 801b4e0:	881a      	ldrh	r2, [r3, #0]
 801b4e2:	6833      	ldr	r3, [r6, #0]
 801b4e4:	e9cd 5700 	strd	r5, r7, [sp]
 801b4e8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b4ea:	ab04      	add	r3, sp, #16
 801b4ec:	47a8      	blx	r5
 801b4ee:	6820      	ldr	r0, [r4, #0]
 801b4f0:	6803      	ldr	r3, [r0, #0]
 801b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4f4:	4798      	blx	r3
 801b4f6:	e7e8      	b.n	801b4ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b4f8:	24006a3c 	.word	0x24006a3c
 801b4fc:	24006a36 	.word	0x24006a36

0801b500 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b504:	b08b      	sub	sp, #44	; 0x2c
 801b506:	460d      	mov	r5, r1
 801b508:	4616      	mov	r6, r2
 801b50a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801b50e:	f1b8 0f00 	cmp.w	r8, #0
 801b512:	d047      	beq.n	801b5a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b514:	6810      	ldr	r0, [r2, #0]
 801b516:	ac06      	add	r4, sp, #24
 801b518:	6851      	ldr	r1, [r2, #4]
 801b51a:	4f51      	ldr	r7, [pc, #324]	; (801b660 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b51c:	c403      	stmia	r4!, {r0, r1}
 801b51e:	6818      	ldr	r0, [r3, #0]
 801b520:	ac08      	add	r4, sp, #32
 801b522:	6859      	ldr	r1, [r3, #4]
 801b524:	c403      	stmia	r4!, {r0, r1}
 801b526:	a806      	add	r0, sp, #24
 801b528:	f7fb faa6 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b52c:	4631      	mov	r1, r6
 801b52e:	a808      	add	r0, sp, #32
 801b530:	f7fb faca 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b534:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b538:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b53c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b540:	6838      	ldr	r0, [r7, #0]
 801b542:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b546:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801b54a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801b54e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b552:	440d      	add	r5, r1
 801b554:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b558:	440a      	add	r2, r1
 801b55a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b55e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b562:	4413      	add	r3, r2
 801b564:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b568:	6803      	ldr	r3, [r0, #0]
 801b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b56c:	4798      	blx	r3
 801b56e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b572:	d01a      	beq.n	801b5aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801b574:	f010 0f04 	tst.w	r0, #4
 801b578:	6838      	ldr	r0, [r7, #0]
 801b57a:	d019      	beq.n	801b5b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801b57c:	2100      	movs	r1, #0
 801b57e:	6807      	ldr	r7, [r0, #0]
 801b580:	b2a4      	uxth	r4, r4
 801b582:	f8cd 800c 	str.w	r8, [sp, #12]
 801b586:	b2b6      	uxth	r6, r6
 801b588:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b58c:	9401      	str	r4, [sp, #4]
 801b58e:	9600      	str	r6, [sp, #0]
 801b590:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b594:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801b598:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b59c:	9102      	str	r1, [sp, #8]
 801b59e:	4629      	mov	r1, r5
 801b5a0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801b5a2:	47a0      	blx	r4
 801b5a4:	b00b      	add	sp, #44	; 0x2c
 801b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5aa:	f010 0f01 	tst.w	r0, #1
 801b5ae:	e7e3      	b.n	801b578 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b5b0:	6803      	ldr	r3, [r0, #0]
 801b5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5b4:	4798      	blx	r3
 801b5b6:	4a2b      	ldr	r2, [pc, #172]	; (801b664 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801b5b8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b5bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b5c0:	8813      	ldrh	r3, [r2, #0]
 801b5c2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b5c6:	fb03 f404 	mul.w	r4, r3, r4
 801b5ca:	fb03 c101 	mla	r1, r3, r1, ip
 801b5ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b5d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b5d6:	4408      	add	r0, r1
 801b5d8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b5dc:	4404      	add	r4, r0
 801b5de:	d02e      	beq.n	801b63e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b5e0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b5e4:	1b9b      	subs	r3, r3, r6
 801b5e6:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801b5ea:	1b96      	subs	r6, r2, r6
 801b5ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b5f4:	42a0      	cmp	r0, r4
 801b5f6:	d22d      	bcs.n	801b654 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b5f8:	eb00 0e01 	add.w	lr, r0, r1
 801b5fc:	4570      	cmp	r0, lr
 801b5fe:	d210      	bcs.n	801b622 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801b600:	f890 9000 	ldrb.w	r9, [r0]
 801b604:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b608:	fb19 f90c 	smulbb	r9, r9, ip
 801b60c:	fb02 9208 	mla	r2, r2, r8, r9
 801b610:	b292      	uxth	r2, r2
 801b612:	f102 0901 	add.w	r9, r2, #1
 801b616:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b61a:	1212      	asrs	r2, r2, #8
 801b61c:	f800 2b01 	strb.w	r2, [r0], #1
 801b620:	e7ec      	b.n	801b5fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801b622:	4418      	add	r0, r3
 801b624:	4435      	add	r5, r6
 801b626:	e7e5      	b.n	801b5f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801b628:	8813      	ldrh	r3, [r2, #0]
 801b62a:	1b9b      	subs	r3, r3, r6
 801b62c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b630:	4418      	add	r0, r3
 801b632:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b636:	1b9b      	subs	r3, r3, r6
 801b638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b63c:	441d      	add	r5, r3
 801b63e:	42a0      	cmp	r0, r4
 801b640:	d208      	bcs.n	801b654 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b642:	eb00 0c01 	add.w	ip, r0, r1
 801b646:	4560      	cmp	r0, ip
 801b648:	d2ee      	bcs.n	801b628 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801b64a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b64e:	f800 3b01 	strb.w	r3, [r0], #1
 801b652:	e7f8      	b.n	801b646 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801b654:	6838      	ldr	r0, [r7, #0]
 801b656:	6803      	ldr	r3, [r0, #0]
 801b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b65a:	4798      	blx	r3
 801b65c:	e7a2      	b.n	801b5a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b65e:	bf00      	nop
 801b660:	24006a3c 	.word	0x24006a3c
 801b664:	24006a36 	.word	0x24006a36

0801b668 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b66a:	2300      	movs	r3, #0
 801b66c:	b085      	sub	sp, #20
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	4b41      	ldr	r3, [pc, #260]	; (801b778 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801b672:	781b      	ldrb	r3, [r3, #0]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d136      	bne.n	801b6e6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801b678:	4a40      	ldr	r2, [pc, #256]	; (801b77c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b67a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b67e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d131      	bne.n	801b6ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801b686:	4b3e      	ldr	r3, [pc, #248]	; (801b780 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b688:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b68c:	ac02      	add	r4, sp, #8
 801b68e:	6808      	ldr	r0, [r1, #0]
 801b690:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b694:	ab02      	add	r3, sp, #8
 801b696:	6849      	ldr	r1, [r1, #4]
 801b698:	4d3a      	ldr	r5, [pc, #232]	; (801b784 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801b69a:	c303      	stmia	r3!, {r0, r1}
 801b69c:	4669      	mov	r1, sp
 801b69e:	4620      	mov	r0, r4
 801b6a0:	f7fb fa12 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b6a4:	4668      	mov	r0, sp
 801b6a6:	f7fb f9e7 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b6ae:	f8bd 2000 	ldrh.w	r2, [sp]
 801b6b2:	462e      	mov	r6, r5
 801b6b4:	6828      	ldr	r0, [r5, #0]
 801b6b6:	4413      	add	r3, r2
 801b6b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b6bc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b6c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b6c4:	4413      	add	r3, r2
 801b6c6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b6ca:	6803      	ldr	r3, [r0, #0]
 801b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6ce:	4798      	blx	r3
 801b6d0:	f010 0f01 	tst.w	r0, #1
 801b6d4:	d00b      	beq.n	801b6ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801b6d6:	6828      	ldr	r0, [r5, #0]
 801b6d8:	6803      	ldr	r3, [r0, #0]
 801b6da:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b6de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6e0:	4798      	blx	r3
 801b6e2:	b005      	add	sp, #20
 801b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e6:	4a26      	ldr	r2, [pc, #152]	; (801b780 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b6e8:	e7c7      	b.n	801b67a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b6ea:	4b24      	ldr	r3, [pc, #144]	; (801b77c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b6ec:	e7cc      	b.n	801b688 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b6ee:	6830      	ldr	r0, [r6, #0]
 801b6f0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801b6f4:	6803      	ldr	r3, [r0, #0]
 801b6f6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6fc:	4798      	blx	r3
 801b6fe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b702:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b706:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801b70a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801b70e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b712:	4404      	add	r4, r0
 801b714:	6830      	ldr	r0, [r6, #0]
 801b716:	6803      	ldr	r3, [r0, #0]
 801b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b71a:	4798      	blx	r3
 801b71c:	4917      	ldr	r1, [pc, #92]	; (801b77c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b71e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b722:	880b      	ldrh	r3, [r1, #0]
 801b724:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801b728:	fb03 c202 	mla	r2, r3, r2, ip
 801b72c:	437b      	muls	r3, r7
 801b72e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801b732:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b73a:	4410      	add	r0, r2
 801b73c:	18c2      	adds	r2, r0, r3
 801b73e:	4290      	cmp	r0, r2
 801b740:	d214      	bcs.n	801b76c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801b742:	eb00 0c07 	add.w	ip, r0, r7
 801b746:	4560      	cmp	r0, ip
 801b748:	d204      	bcs.n	801b754 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801b74a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b74e:	f800 3b01 	strb.w	r3, [r0], #1
 801b752:	e7f8      	b.n	801b746 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801b754:	880b      	ldrh	r3, [r1, #0]
 801b756:	1b5b      	subs	r3, r3, r5
 801b758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b75c:	4418      	add	r0, r3
 801b75e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b762:	1b5b      	subs	r3, r3, r5
 801b764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b768:	441c      	add	r4, r3
 801b76a:	e7e8      	b.n	801b73e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801b76c:	6830      	ldr	r0, [r6, #0]
 801b76e:	6803      	ldr	r3, [r0, #0]
 801b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b772:	4798      	blx	r3
 801b774:	e7b5      	b.n	801b6e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b776:	bf00      	nop
 801b778:	24006a34 	.word	0x24006a34
 801b77c:	24006a36 	.word	0x24006a36
 801b780:	24006a38 	.word	0x24006a38
 801b784:	24006a3c 	.word	0x24006a3c

0801b788 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b78c:	b08f      	sub	sp, #60	; 0x3c
 801b78e:	461c      	mov	r4, r3
 801b790:	9203      	str	r2, [sp, #12]
 801b792:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b796:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b798:	6820      	ldr	r0, [r4, #0]
 801b79a:	9100      	str	r1, [sp, #0]
 801b79c:	9204      	str	r2, [sp, #16]
 801b79e:	aa0a      	add	r2, sp, #40	; 0x28
 801b7a0:	6861      	ldr	r1, [r4, #4]
 801b7a2:	c203      	stmia	r2!, {r0, r1}
 801b7a4:	6818      	ldr	r0, [r3, #0]
 801b7a6:	aa0c      	add	r2, sp, #48	; 0x30
 801b7a8:	6859      	ldr	r1, [r3, #4]
 801b7aa:	c203      	stmia	r2!, {r0, r1}
 801b7ac:	a80a      	add	r0, sp, #40	; 0x28
 801b7ae:	f7fb f963 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b7b2:	4621      	mov	r1, r4
 801b7b4:	a80c      	add	r0, sp, #48	; 0x30
 801b7b6:	f7fb f987 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b7ba:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801b7be:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801b7c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b7c6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801b7ca:	bfdb      	ittet	le
 801b7cc:	b2b3      	uxthle	r3, r6
 801b7ce:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801b7d2:	2301      	movgt	r3, #1
 801b7d4:	fb92 f3f3 	sdivle	r3, r2, r3
 801b7d8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b7dc:	441d      	add	r5, r3
 801b7de:	fb92 f1f3 	sdiv	r1, r2, r3
 801b7e2:	fa1f fc81 	uxth.w	ip, r1
 801b7e6:	3d01      	subs	r5, #1
 801b7e8:	fb0c 2413 	mls	r4, ip, r3, r2
 801b7ec:	4661      	mov	r1, ip
 801b7ee:	fb14 f406 	smulbb	r4, r4, r6
 801b7f2:	4404      	add	r4, r0
 801b7f4:	fb95 f5f3 	sdiv	r5, r5, r3
 801b7f8:	b2a4      	uxth	r4, r4
 801b7fa:	b131      	cbz	r1, 801b80a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801b7fc:	9b03      	ldr	r3, [sp, #12]
 801b7fe:	9900      	ldr	r1, [sp, #0]
 801b800:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b804:	ba1b      	rev	r3, r3
 801b806:	4419      	add	r1, r3
 801b808:	9100      	str	r1, [sp, #0]
 801b80a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b80e:	b2ad      	uxth	r5, r5
 801b810:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801b814:	4418      	add	r0, r3
 801b816:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b81a:	00ad      	lsls	r5, r5, #2
 801b81c:	441a      	add	r2, r3
 801b81e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b822:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801b826:	9301      	str	r3, [sp, #4]
 801b828:	4b79      	ldr	r3, [pc, #484]	; (801ba10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801b82a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b82e:	6818      	ldr	r0, [r3, #0]
 801b830:	6803      	ldr	r3, [r0, #0]
 801b832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b834:	4798      	blx	r3
 801b836:	4a77      	ldr	r2, [pc, #476]	; (801ba14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801b838:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801b83c:	2c00      	cmp	r4, #0
 801b83e:	8813      	ldrh	r3, [r2, #0]
 801b840:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801b844:	9209      	str	r2, [sp, #36]	; 0x24
 801b846:	fb03 c101 	mla	r1, r3, r1, ip
 801b84a:	fb06 f303 	mul.w	r3, r6, r3
 801b84e:	bf18      	it	ne
 801b850:	2600      	movne	r6, #0
 801b852:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b85a:	4408      	add	r0, r1
 801b85c:	4403      	add	r3, r0
 801b85e:	9306      	str	r3, [sp, #24]
 801b860:	f105 0304 	add.w	r3, r5, #4
 801b864:	9305      	str	r3, [sp, #20]
 801b866:	9b01      	ldr	r3, [sp, #4]
 801b868:	bf08      	it	eq
 801b86a:	461e      	moveq	r6, r3
 801b86c:	2300      	movs	r3, #0
 801b86e:	b2b6      	uxth	r6, r6
 801b870:	9302      	str	r3, [sp, #8]
 801b872:	9a06      	ldr	r2, [sp, #24]
 801b874:	4290      	cmp	r0, r2
 801b876:	f080 80c2 	bcs.w	801b9fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801b87a:	b963      	cbnz	r3, 801b896 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801b87c:	9b00      	ldr	r3, [sp, #0]
 801b87e:	781a      	ldrb	r2, [r3, #0]
 801b880:	0993      	lsrs	r3, r2, #6
 801b882:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801b886:	9202      	str	r2, [sp, #8]
 801b888:	1e5a      	subs	r2, r3, #1
 801b88a:	2a02      	cmp	r2, #2
 801b88c:	d815      	bhi.n	801b8ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801b88e:	9a00      	ldr	r2, [sp, #0]
 801b890:	b29b      	uxth	r3, r3
 801b892:	3201      	adds	r2, #1
 801b894:	9200      	str	r2, [sp, #0]
 801b896:	b1b4      	cbz	r4, 801b8c6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801b898:	429c      	cmp	r4, r3
 801b89a:	bf91      	iteee	ls
 801b89c:	1b1c      	subls	r4, r3, r4
 801b89e:	1ae4      	subhi	r4, r4, r3
 801b8a0:	4635      	movhi	r5, r6
 801b8a2:	f04f 0e00 	movhi.w	lr, #0
 801b8a6:	bf9b      	ittet	ls
 801b8a8:	fa1f fe84 	uxthls.w	lr, r4
 801b8ac:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801b8b0:	b2a4      	uxthhi	r4, r4
 801b8b2:	2400      	movls	r4, #0
 801b8b4:	4673      	mov	r3, lr
 801b8b6:	462e      	mov	r6, r5
 801b8b8:	e7db      	b.n	801b872 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801b8ba:	9a00      	ldr	r2, [sp, #0]
 801b8bc:	9b00      	ldr	r3, [sp, #0]
 801b8be:	3202      	adds	r2, #2
 801b8c0:	785b      	ldrb	r3, [r3, #1]
 801b8c2:	9200      	str	r2, [sp, #0]
 801b8c4:	e7e7      	b.n	801b896 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801b8c6:	2204      	movs	r2, #4
 801b8c8:	9905      	ldr	r1, [sp, #20]
 801b8ca:	429e      	cmp	r6, r3
 801b8cc:	4615      	mov	r5, r2
 801b8ce:	9a02      	ldr	r2, [sp, #8]
 801b8d0:	bf94      	ite	ls
 801b8d2:	eba3 0e06 	subls.w	lr, r3, r6
 801b8d6:	46a6      	movhi	lr, r4
 801b8d8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801b8dc:	9903      	ldr	r1, [sp, #12]
 801b8de:	bf8c      	ite	hi
 801b8e0:	1af5      	subhi	r5, r6, r3
 801b8e2:	fa1f fe8e 	uxthls.w	lr, lr
 801b8e6:	f851 c002 	ldr.w	ip, [r1, r2]
 801b8ea:	bf9a      	itte	ls
 801b8ec:	4625      	movls	r5, r4
 801b8ee:	4632      	movls	r2, r6
 801b8f0:	b2ad      	uxthhi	r5, r5
 801b8f2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801b8f6:	bf88      	it	hi
 801b8f8:	461a      	movhi	r2, r3
 801b8fa:	b179      	cbz	r1, 801b91c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801b8fc:	29ff      	cmp	r1, #255	; 0xff
 801b8fe:	fa5f f98c 	uxtb.w	r9, ip
 801b902:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801b906:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801b90a:	d126      	bne.n	801b95a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801b90c:	9f04      	ldr	r7, [sp, #16]
 801b90e:	2fff      	cmp	r7, #255	; 0xff
 801b910:	d123      	bne.n	801b95a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801b912:	4682      	mov	sl, r0
 801b914:	4611      	mov	r1, r2
 801b916:	f10a 0a03 	add.w	sl, sl, #3
 801b91a:	b9a9      	cbnz	r1, 801b948 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801b91c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b920:	429e      	cmp	r6, r3
 801b922:	4410      	add	r0, r2
 801b924:	d8c6      	bhi.n	801b8b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801b926:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801b92a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801b92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b930:	1b64      	subs	r4, r4, r5
 801b932:	9a01      	ldr	r2, [sp, #4]
 801b934:	881b      	ldrh	r3, [r3, #0]
 801b936:	b2a4      	uxth	r4, r4
 801b938:	1a9b      	subs	r3, r3, r2
 801b93a:	2c00      	cmp	r4, #0
 801b93c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b940:	bf18      	it	ne
 801b942:	2500      	movne	r5, #0
 801b944:	4418      	add	r0, r3
 801b946:	e7b5      	b.n	801b8b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801b948:	3901      	subs	r1, #1
 801b94a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801b94e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801b952:	f80a cc01 	strb.w	ip, [sl, #-1]
 801b956:	b289      	uxth	r1, r1
 801b958:	e7dd      	b.n	801b916 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801b95a:	9f04      	ldr	r7, [sp, #16]
 801b95c:	fb07 fa01 	mul.w	sl, r7, r1
 801b960:	f10a 0101 	add.w	r1, sl, #1
 801b964:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801b968:	1209      	asrs	r1, r1, #8
 801b96a:	ea6f 0a01 	mvn.w	sl, r1
 801b96e:	b289      	uxth	r1, r1
 801b970:	fb19 f901 	smulbb	r9, r9, r1
 801b974:	fa5f fa8a 	uxtb.w	sl, sl
 801b978:	fb18 f801 	smulbb	r8, r8, r1
 801b97c:	fb1c f101 	smulbb	r1, ip, r1
 801b980:	fa1f f789 	uxth.w	r7, r9
 801b984:	4684      	mov	ip, r0
 801b986:	4691      	mov	r9, r2
 801b988:	9707      	str	r7, [sp, #28]
 801b98a:	b289      	uxth	r1, r1
 801b98c:	fa1f f788 	uxth.w	r7, r8
 801b990:	9708      	str	r7, [sp, #32]
 801b992:	f10c 0c03 	add.w	ip, ip, #3
 801b996:	f1b9 0f00 	cmp.w	r9, #0
 801b99a:	d0bf      	beq.n	801b91c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801b99c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801b9a0:	f109 39ff 	add.w	r9, r9, #4294967295
 801b9a4:	9f07      	ldr	r7, [sp, #28]
 801b9a6:	fa1f f989 	uxth.w	r9, r9
 801b9aa:	fb08 780a 	mla	r8, r8, sl, r7
 801b9ae:	9f08      	ldr	r7, [sp, #32]
 801b9b0:	fa1f f888 	uxth.w	r8, r8
 801b9b4:	f108 0b01 	add.w	fp, r8, #1
 801b9b8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b9bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9c0:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801b9c4:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801b9c8:	fb08 780a 	mla	r8, r8, sl, r7
 801b9cc:	fa1f f888 	uxth.w	r8, r8
 801b9d0:	f108 0b01 	add.w	fp, r8, #1
 801b9d4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b9d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9dc:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801b9e0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801b9e4:	fb08 180a 	mla	r8, r8, sl, r1
 801b9e8:	fa1f f888 	uxth.w	r8, r8
 801b9ec:	f108 0b01 	add.w	fp, r8, #1
 801b9f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b9f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9f8:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801b9fc:	e7c9      	b.n	801b992 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801b9fe:	4b04      	ldr	r3, [pc, #16]	; (801ba10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801ba00:	6818      	ldr	r0, [r3, #0]
 801ba02:	6803      	ldr	r3, [r0, #0]
 801ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba06:	4798      	blx	r3
 801ba08:	b00f      	add	sp, #60	; 0x3c
 801ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0e:	bf00      	nop
 801ba10:	24006a3c 	.word	0x24006a3c
 801ba14:	24006a36 	.word	0x24006a36

0801ba18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba1c:	b089      	sub	sp, #36	; 0x24
 801ba1e:	4607      	mov	r7, r0
 801ba20:	4689      	mov	r9, r1
 801ba22:	4692      	mov	sl, r2
 801ba24:	ac08      	add	r4, sp, #32
 801ba26:	461e      	mov	r6, r3
 801ba28:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	f7fd ffa5 	bl	801997c <_ZNK8touchgfx6Bitmap7getDataEv>
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	4605      	mov	r5, r0
 801ba36:	4620      	mov	r0, r4
 801ba38:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801ba3c:	f7fd ff36 	bl	80198ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ba40:	4683      	mov	fp, r0
 801ba42:	4620      	mov	r0, r4
 801ba44:	f7fd ff66 	bl	8019914 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ba48:	4653      	mov	r3, sl
 801ba4a:	464a      	mov	r2, r9
 801ba4c:	4639      	mov	r1, r7
 801ba4e:	9500      	str	r5, [sp, #0]
 801ba50:	e9cd b001 	strd	fp, r0, [sp, #4]
 801ba54:	a806      	add	r0, sp, #24
 801ba56:	47c0      	blx	r8
 801ba58:	a906      	add	r1, sp, #24
 801ba5a:	4630      	mov	r0, r6
 801ba5c:	f7fd fe0a 	bl	8019674 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801ba60:	4628      	mov	r0, r5
 801ba62:	b009      	add	sp, #36	; 0x24
 801ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba68 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801ba68:	b510      	push	{r4, lr}
 801ba6a:	4604      	mov	r4, r0
 801ba6c:	2104      	movs	r1, #4
 801ba6e:	f007 f928 	bl	8022cc2 <_ZdlPvj>
 801ba72:	4620      	mov	r0, r4
 801ba74:	bd10      	pop	{r4, pc}

0801ba76 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801ba76:	b510      	push	{r4, lr}
 801ba78:	4604      	mov	r4, r0
 801ba7a:	2104      	movs	r1, #4
 801ba7c:	f007 f921 	bl	8022cc2 <_ZdlPvj>
 801ba80:	4620      	mov	r0, r4
 801ba82:	bd10      	pop	{r4, pc}

0801ba84 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801ba84:	b510      	push	{r4, lr}
 801ba86:	4604      	mov	r4, r0
 801ba88:	f640 0144 	movw	r1, #2116	; 0x844
 801ba8c:	f007 f919 	bl	8022cc2 <_ZdlPvj>
 801ba90:	4620      	mov	r0, r4
 801ba92:	bd10      	pop	{r4, pc}

0801ba94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ba94:	b510      	push	{r4, lr}
 801ba96:	4604      	mov	r4, r0
 801ba98:	2104      	movs	r1, #4
 801ba9a:	f007 f912 	bl	8022cc2 <_ZdlPvj>
 801ba9e:	4620      	mov	r0, r4
 801baa0:	bd10      	pop	{r4, pc}

0801baa2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801baa2:	b510      	push	{r4, lr}
 801baa4:	4604      	mov	r4, r0
 801baa6:	2104      	movs	r1, #4
 801baa8:	f007 f90b 	bl	8022cc2 <_ZdlPvj>
 801baac:	4620      	mov	r0, r4
 801baae:	bd10      	pop	{r4, pc}

0801bab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bab0:	b510      	push	{r4, lr}
 801bab2:	4604      	mov	r4, r0
 801bab4:	2104      	movs	r1, #4
 801bab6:	f007 f904 	bl	8022cc2 <_ZdlPvj>
 801baba:	4620      	mov	r0, r4
 801babc:	bd10      	pop	{r4, pc}

0801babe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801babe:	b510      	push	{r4, lr}
 801bac0:	4604      	mov	r4, r0
 801bac2:	2104      	movs	r1, #4
 801bac4:	f007 f8fd 	bl	8022cc2 <_ZdlPvj>
 801bac8:	4620      	mov	r0, r4
 801baca:	bd10      	pop	{r4, pc}

0801bacc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bacc:	b510      	push	{r4, lr}
 801bace:	4604      	mov	r4, r0
 801bad0:	2104      	movs	r1, #4
 801bad2:	f007 f8f6 	bl	8022cc2 <_ZdlPvj>
 801bad6:	4620      	mov	r0, r4
 801bad8:	bd10      	pop	{r4, pc}

0801bada <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bada:	b510      	push	{r4, lr}
 801badc:	4604      	mov	r4, r0
 801bade:	2104      	movs	r1, #4
 801bae0:	f007 f8ef 	bl	8022cc2 <_ZdlPvj>
 801bae4:	4620      	mov	r0, r4
 801bae6:	bd10      	pop	{r4, pc}

0801bae8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bae8:	b510      	push	{r4, lr}
 801baea:	4604      	mov	r4, r0
 801baec:	2104      	movs	r1, #4
 801baee:	f007 f8e8 	bl	8022cc2 <_ZdlPvj>
 801baf2:	4620      	mov	r0, r4
 801baf4:	bd10      	pop	{r4, pc}

0801baf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801baf6:	b510      	push	{r4, lr}
 801baf8:	4604      	mov	r4, r0
 801bafa:	2104      	movs	r1, #4
 801bafc:	f007 f8e1 	bl	8022cc2 <_ZdlPvj>
 801bb00:	4620      	mov	r0, r4
 801bb02:	bd10      	pop	{r4, pc}

0801bb04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bb04:	b510      	push	{r4, lr}
 801bb06:	4604      	mov	r4, r0
 801bb08:	2104      	movs	r1, #4
 801bb0a:	f007 f8da 	bl	8022cc2 <_ZdlPvj>
 801bb0e:	4620      	mov	r0, r4
 801bb10:	bd10      	pop	{r4, pc}

0801bb12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801bb12:	b510      	push	{r4, lr}
 801bb14:	4604      	mov	r4, r0
 801bb16:	2104      	movs	r1, #4
 801bb18:	f007 f8d3 	bl	8022cc2 <_ZdlPvj>
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	bd10      	pop	{r4, pc}

0801bb20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bb20:	b510      	push	{r4, lr}
 801bb22:	4604      	mov	r4, r0
 801bb24:	2104      	movs	r1, #4
 801bb26:	f007 f8cc 	bl	8022cc2 <_ZdlPvj>
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	bd10      	pop	{r4, pc}

0801bb2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bb2e:	b510      	push	{r4, lr}
 801bb30:	4604      	mov	r4, r0
 801bb32:	2104      	movs	r1, #4
 801bb34:	f007 f8c5 	bl	8022cc2 <_ZdlPvj>
 801bb38:	4620      	mov	r0, r4
 801bb3a:	bd10      	pop	{r4, pc}

0801bb3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bb3c:	b510      	push	{r4, lr}
 801bb3e:	4604      	mov	r4, r0
 801bb40:	2104      	movs	r1, #4
 801bb42:	f007 f8be 	bl	8022cc2 <_ZdlPvj>
 801bb46:	4620      	mov	r0, r4
 801bb48:	bd10      	pop	{r4, pc}

0801bb4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bb4a:	b510      	push	{r4, lr}
 801bb4c:	4604      	mov	r4, r0
 801bb4e:	2104      	movs	r1, #4
 801bb50:	f007 f8b7 	bl	8022cc2 <_ZdlPvj>
 801bb54:	4620      	mov	r0, r4
 801bb56:	bd10      	pop	{r4, pc}

0801bb58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bb58:	b510      	push	{r4, lr}
 801bb5a:	4604      	mov	r4, r0
 801bb5c:	2104      	movs	r1, #4
 801bb5e:	f007 f8b0 	bl	8022cc2 <_ZdlPvj>
 801bb62:	4620      	mov	r0, r4
 801bb64:	bd10      	pop	{r4, pc}

0801bb66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bb66:	b510      	push	{r4, lr}
 801bb68:	4604      	mov	r4, r0
 801bb6a:	2104      	movs	r1, #4
 801bb6c:	f007 f8a9 	bl	8022cc2 <_ZdlPvj>
 801bb70:	4620      	mov	r0, r4
 801bb72:	bd10      	pop	{r4, pc}

0801bb74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801bb74:	b510      	push	{r4, lr}
 801bb76:	4604      	mov	r4, r0
 801bb78:	2104      	movs	r1, #4
 801bb7a:	f007 f8a2 	bl	8022cc2 <_ZdlPvj>
 801bb7e:	4620      	mov	r0, r4
 801bb80:	bd10      	pop	{r4, pc}

0801bb82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801bb82:	b510      	push	{r4, lr}
 801bb84:	4604      	mov	r4, r0
 801bb86:	2104      	movs	r1, #4
 801bb88:	f007 f89b 	bl	8022cc2 <_ZdlPvj>
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	bd10      	pop	{r4, pc}

0801bb90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801bb90:	b510      	push	{r4, lr}
 801bb92:	4604      	mov	r4, r0
 801bb94:	2104      	movs	r1, #4
 801bb96:	f007 f894 	bl	8022cc2 <_ZdlPvj>
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	bd10      	pop	{r4, pc}

0801bb9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801bb9e:	b510      	push	{r4, lr}
 801bba0:	4604      	mov	r4, r0
 801bba2:	2104      	movs	r1, #4
 801bba4:	f007 f88d 	bl	8022cc2 <_ZdlPvj>
 801bba8:	4620      	mov	r0, r4
 801bbaa:	bd10      	pop	{r4, pc}

0801bbac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb0:	b08f      	sub	sp, #60	; 0x3c
 801bbb2:	461c      	mov	r4, r3
 801bbb4:	460e      	mov	r6, r1
 801bbb6:	9206      	str	r2, [sp, #24]
 801bbb8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bbbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bbbe:	9202      	str	r2, [sp, #8]
 801bbc0:	2a00      	cmp	r2, #0
 801bbc2:	f000 8128 	beq.w	801be16 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801bbc6:	6820      	ldr	r0, [r4, #0]
 801bbc8:	aa0a      	add	r2, sp, #40	; 0x28
 801bbca:	6861      	ldr	r1, [r4, #4]
 801bbcc:	c203      	stmia	r2!, {r0, r1}
 801bbce:	6818      	ldr	r0, [r3, #0]
 801bbd0:	aa0c      	add	r2, sp, #48	; 0x30
 801bbd2:	6859      	ldr	r1, [r3, #4]
 801bbd4:	c203      	stmia	r2!, {r0, r1}
 801bbd6:	a80a      	add	r0, sp, #40	; 0x28
 801bbd8:	f7fa ff4e 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	a80c      	add	r0, sp, #48	; 0x30
 801bbe0:	f7fa ff72 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbe4:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801bbe8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801bbec:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801bbf0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bbf4:	bfdb      	ittet	le
 801bbf6:	b2bb      	uxthle	r3, r7
 801bbf8:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801bbfc:	2301      	movgt	r3, #1
 801bbfe:	fb92 f3f3 	sdivle	r3, r2, r3
 801bc02:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bc06:	441d      	add	r5, r3
 801bc08:	fb92 f1f3 	sdiv	r1, r2, r3
 801bc0c:	fa1f fc81 	uxth.w	ip, r1
 801bc10:	3d01      	subs	r5, #1
 801bc12:	fb0c 2413 	mls	r4, ip, r3, r2
 801bc16:	4661      	mov	r1, ip
 801bc18:	fb14 f407 	smulbb	r4, r4, r7
 801bc1c:	4404      	add	r4, r0
 801bc1e:	fb95 f5f3 	sdiv	r5, r5, r3
 801bc22:	b2a4      	uxth	r4, r4
 801bc24:	b121      	cbz	r1, 801bc30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801bc26:	9b06      	ldr	r3, [sp, #24]
 801bc28:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bc2c:	ba1b      	rev	r3, r3
 801bc2e:	441e      	add	r6, r3
 801bc30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bc34:	b2ad      	uxth	r5, r5
 801bc36:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801bc3a:	4418      	add	r0, r3
 801bc3c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bc40:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 801bc44:	00ad      	lsls	r5, r5, #2
 801bc46:	441a      	add	r2, r3
 801bc48:	4b74      	ldr	r3, [pc, #464]	; (801be1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801bc4a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801bc4e:	6818      	ldr	r0, [r3, #0]
 801bc50:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801bc54:	6803      	ldr	r3, [r0, #0]
 801bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc58:	4798      	blx	r3
 801bc5a:	4a71      	ldr	r2, [pc, #452]	; (801be20 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801bc5c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801bc60:	2c00      	cmp	r4, #0
 801bc62:	8813      	ldrh	r3, [r2, #0]
 801bc64:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801bc68:	9209      	str	r2, [sp, #36]	; 0x24
 801bc6a:	fb03 c101 	mla	r1, r3, r1, ip
 801bc6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bc72:	fb03 f307 	mul.w	r3, r3, r7
 801bc76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bc7a:	9204      	str	r2, [sp, #16]
 801bc7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc80:	9a02      	ldr	r2, [sp, #8]
 801bc82:	4408      	add	r0, r1
 801bc84:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bc88:	4403      	add	r3, r0
 801bc8a:	b292      	uxth	r2, r2
 801bc8c:	9307      	str	r3, [sp, #28]
 801bc8e:	f105 0304 	add.w	r3, r5, #4
 801bc92:	bf0c      	ite	eq
 801bc94:	4645      	moveq	r5, r8
 801bc96:	2500      	movne	r5, #0
 801bc98:	9308      	str	r3, [sp, #32]
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	b2ad      	uxth	r5, r5
 801bc9e:	9205      	str	r2, [sp, #20]
 801bca0:	9303      	str	r3, [sp, #12]
 801bca2:	9a07      	ldr	r2, [sp, #28]
 801bca4:	4282      	cmp	r2, r0
 801bca6:	f240 80b1 	bls.w	801be0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801bcaa:	b95b      	cbnz	r3, 801bcc4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801bcac:	7832      	ldrb	r2, [r6, #0]
 801bcae:	0993      	lsrs	r3, r2, #6
 801bcb0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801bcb4:	9203      	str	r2, [sp, #12]
 801bcb6:	1e5a      	subs	r2, r3, #1
 801bcb8:	2a02      	cmp	r2, #2
 801bcba:	bf8d      	iteet	hi
 801bcbc:	7873      	ldrbhi	r3, [r6, #1]
 801bcbe:	3601      	addls	r6, #1
 801bcc0:	b29b      	uxthls	r3, r3
 801bcc2:	3602      	addhi	r6, #2
 801bcc4:	b184      	cbz	r4, 801bce8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801bcc6:	429c      	cmp	r4, r3
 801bcc8:	bf91      	iteee	ls
 801bcca:	1b1c      	subls	r4, r3, r4
 801bccc:	1ae4      	subhi	r4, r4, r3
 801bcce:	4629      	movhi	r1, r5
 801bcd0:	f04f 0e00 	movhi.w	lr, #0
 801bcd4:	bf9b      	ittet	ls
 801bcd6:	fa1f fe84 	uxthls.w	lr, r4
 801bcda:	2400      	movls	r4, #0
 801bcdc:	b2a4      	uxthhi	r4, r4
 801bcde:	fa1f f188 	uxthls.w	r1, r8
 801bce2:	4673      	mov	r3, lr
 801bce4:	460d      	mov	r5, r1
 801bce6:	e7dc      	b.n	801bca2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801bce8:	2203      	movs	r2, #3
 801bcea:	9908      	ldr	r1, [sp, #32]
 801bcec:	42ab      	cmp	r3, r5
 801bcee:	4617      	mov	r7, r2
 801bcf0:	9a03      	ldr	r2, [sp, #12]
 801bcf2:	bf24      	itt	cs
 801bcf4:	eba3 0e05 	subcs.w	lr, r3, r5
 801bcf8:	9501      	strcs	r5, [sp, #4]
 801bcfa:	fb17 1702 	smlabb	r7, r7, r2, r1
 801bcfe:	9a06      	ldr	r2, [sp, #24]
 801bd00:	bf34      	ite	cc
 801bd02:	1ae9      	subcc	r1, r5, r3
 801bd04:	fa1f fe8e 	uxthcs.w	lr, lr
 801bd08:	4417      	add	r7, r2
 801bd0a:	9a02      	ldr	r2, [sp, #8]
 801bd0c:	bf2f      	iteee	cs
 801bd0e:	4621      	movcs	r1, r4
 801bd10:	b289      	uxthcc	r1, r1
 801bd12:	9301      	strcc	r3, [sp, #4]
 801bd14:	46a6      	movcc	lr, r4
 801bd16:	2aff      	cmp	r2, #255	; 0xff
 801bd18:	d11e      	bne.n	801bd58 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801bd1a:	4681      	mov	r9, r0
 801bd1c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bd20:	f109 0903 	add.w	r9, r9, #3
 801bd24:	f1bc 0f00 	cmp.w	ip, #0
 801bd28:	d15f      	bne.n	801bdea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801bd2a:	9a01      	ldr	r2, [sp, #4]
 801bd2c:	42ab      	cmp	r3, r5
 801bd2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd32:	4410      	add	r0, r2
 801bd34:	d3d5      	bcc.n	801bce2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801bd36:	fa1f f188 	uxth.w	r1, r8
 801bd3a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd40:	1a64      	subs	r4, r4, r1
 801bd42:	881b      	ldrh	r3, [r3, #0]
 801bd44:	b2a4      	uxth	r4, r4
 801bd46:	eba3 0308 	sub.w	r3, r3, r8
 801bd4a:	2c00      	cmp	r4, #0
 801bd4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd50:	bf18      	it	ne
 801bd52:	2100      	movne	r1, #0
 801bd54:	4418      	add	r0, r3
 801bd56:	e7c4      	b.n	801bce2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801bd58:	4684      	mov	ip, r0
 801bd5a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801bd5e:	f10c 0c03 	add.w	ip, ip, #3
 801bd62:	f1ba 0f00 	cmp.w	sl, #0
 801bd66:	d0e0      	beq.n	801bd2a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801bd68:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801bd6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd70:	9a05      	ldr	r2, [sp, #20]
 801bd72:	f897 9000 	ldrb.w	r9, [r7]
 801bd76:	fa1f fa8a 	uxth.w	sl, sl
 801bd7a:	fb1b fb02 	smulbb	fp, fp, r2
 801bd7e:	9a04      	ldr	r2, [sp, #16]
 801bd80:	fb09 b902 	mla	r9, r9, r2, fp
 801bd84:	9a05      	ldr	r2, [sp, #20]
 801bd86:	fa1f f989 	uxth.w	r9, r9
 801bd8a:	f109 0b01 	add.w	fp, r9, #1
 801bd8e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd92:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801bd96:	fb1b fb02 	smulbb	fp, fp, r2
 801bd9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd9e:	9a04      	ldr	r2, [sp, #16]
 801bda0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801bda4:	f897 9001 	ldrb.w	r9, [r7, #1]
 801bda8:	fb09 b902 	mla	r9, r9, r2, fp
 801bdac:	9a05      	ldr	r2, [sp, #20]
 801bdae:	fa1f f989 	uxth.w	r9, r9
 801bdb2:	f109 0b01 	add.w	fp, r9, #1
 801bdb6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdba:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801bdbe:	fb1b fb02 	smulbb	fp, fp, r2
 801bdc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdc6:	9a04      	ldr	r2, [sp, #16]
 801bdc8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801bdcc:	f897 9002 	ldrb.w	r9, [r7, #2]
 801bdd0:	fb09 b902 	mla	r9, r9, r2, fp
 801bdd4:	fa1f f989 	uxth.w	r9, r9
 801bdd8:	f109 0b01 	add.w	fp, r9, #1
 801bddc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bde0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bde4:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801bde8:	e7b9      	b.n	801bd5e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801bdea:	f897 a000 	ldrb.w	sl, [r7]
 801bdee:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bdf2:	f809 ac03 	strb.w	sl, [r9, #-3]
 801bdf6:	fa1f fc8c 	uxth.w	ip, ip
 801bdfa:	f897 a001 	ldrb.w	sl, [r7, #1]
 801bdfe:	f809 ac02 	strb.w	sl, [r9, #-2]
 801be02:	f897 a002 	ldrb.w	sl, [r7, #2]
 801be06:	f809 ac01 	strb.w	sl, [r9, #-1]
 801be0a:	e789      	b.n	801bd20 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801be0c:	4b03      	ldr	r3, [pc, #12]	; (801be1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801be0e:	6818      	ldr	r0, [r3, #0]
 801be10:	6803      	ldr	r3, [r0, #0]
 801be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be14:	4798      	blx	r3
 801be16:	b00f      	add	sp, #60	; 0x3c
 801be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be1c:	24006a3c 	.word	0x24006a3c
 801be20:	24006a36 	.word	0x24006a36

0801be24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be28:	b09b      	sub	sp, #108	; 0x6c
 801be2a:	461d      	mov	r5, r3
 801be2c:	4604      	mov	r4, r0
 801be2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be30:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 801be34:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801be38:	9208      	str	r2, [sp, #32]
 801be3a:	2a00      	cmp	r2, #0
 801be3c:	f000 81f3 	beq.w	801c226 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801be40:	6828      	ldr	r0, [r5, #0]
 801be42:	aa16      	add	r2, sp, #88	; 0x58
 801be44:	6869      	ldr	r1, [r5, #4]
 801be46:	c203      	stmia	r2!, {r0, r1}
 801be48:	6818      	ldr	r0, [r3, #0]
 801be4a:	aa18      	add	r2, sp, #96	; 0x60
 801be4c:	6859      	ldr	r1, [r3, #4]
 801be4e:	c203      	stmia	r2!, {r0, r1}
 801be50:	a816      	add	r0, sp, #88	; 0x58
 801be52:	f7fa fe11 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be56:	4629      	mov	r1, r5
 801be58:	a818      	add	r0, sp, #96	; 0x60
 801be5a:	f7fa fe35 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be5e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801be62:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 801be66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be6a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 801be6e:	bfdb      	ittet	le
 801be70:	b29a      	uxthle	r2, r3
 801be72:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801be76:	f04f 0a01 	movgt.w	sl, #1
 801be7a:	fb91 faf2 	sdivle	sl, r1, r2
 801be7e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 801be82:	4456      	add	r6, sl
 801be84:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801be88:	3e01      	subs	r6, #1
 801be8a:	fb92 f0fa 	sdiv	r0, r2, sl
 801be8e:	b280      	uxth	r0, r0
 801be90:	fb00 281a 	mls	r8, r0, sl, r2
 801be94:	900e      	str	r0, [sp, #56]	; 0x38
 801be96:	fb18 f803 	smulbb	r8, r8, r3
 801be9a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801be9e:	4488      	add	r8, r1
 801bea0:	4419      	add	r1, r3
 801bea2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801bea6:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 801beaa:	fa1f f888 	uxth.w	r8, r8
 801beae:	441a      	add	r2, r3
 801beb0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801beb4:	9303      	str	r3, [sp, #12]
 801beb6:	4b9c      	ldr	r3, [pc, #624]	; (801c128 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801beb8:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 801bebc:	6818      	ldr	r0, [r3, #0]
 801bebe:	6803      	ldr	r3, [r0, #0]
 801bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bec2:	4798      	blx	r3
 801bec4:	4b99      	ldr	r3, [pc, #612]	; (801c12c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801bec6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 801beca:	f1b8 0f00 	cmp.w	r8, #0
 801bece:	881a      	ldrh	r2, [r3, #0]
 801bed0:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 801bed4:	fb02 f505 	mul.w	r5, r2, r5
 801bed8:	fb02 7101 	mla	r1, r2, r1, r7
 801bedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bee0:	9314      	str	r3, [sp, #80]	; 0x50
 801bee2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bee6:	9b08      	ldr	r3, [sp, #32]
 801bee8:	fb96 f6fa 	sdiv	r6, r6, sl
 801beec:	4408      	add	r0, r1
 801beee:	f106 0601 	add.w	r6, r6, #1
 801bef2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801bef6:	f04f 0100 	mov.w	r1, #0
 801befa:	eb00 0205 	add.w	r2, r0, r5
 801befe:	b2b6      	uxth	r6, r6
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	910b      	str	r1, [sp, #44]	; 0x2c
 801bf04:	9209      	str	r2, [sp, #36]	; 0x24
 801bf06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf08:	930d      	str	r3, [sp, #52]	; 0x34
 801bf0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bf0e:	4b88      	ldr	r3, [pc, #544]	; (801c130 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801bf10:	f106 0204 	add.w	r2, r6, #4
 801bf14:	eba3 0304 	sub.w	r3, r3, r4
 801bf18:	9205      	str	r2, [sp, #20]
 801bf1a:	9a03      	ldr	r2, [sp, #12]
 801bf1c:	bf18      	it	ne
 801bf1e:	2200      	movne	r2, #0
 801bf20:	9315      	str	r3, [sp, #84]	; 0x54
 801bf22:	b292      	uxth	r2, r2
 801bf24:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bf26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf28:	fa11 f383 	uxtah	r3, r1, r3
 801bf2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bf32:	3304      	adds	r3, #4
 801bf34:	9306      	str	r3, [sp, #24]
 801bf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf38:	4283      	cmp	r3, r0
 801bf3a:	f240 816f 	bls.w	801c21c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801bf3e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801bf42:	f04f 0900 	mov.w	r9, #0
 801bf46:	9d06      	ldr	r5, [sp, #24]
 801bf48:	fbb8 f3f3 	udiv	r3, r8, r3
 801bf4c:	ebaa 0303 	sub.w	r3, sl, r3
 801bf50:	782d      	ldrb	r5, [r5, #0]
 801bf52:	b29b      	uxth	r3, r3
 801bf54:	950f      	str	r5, [sp, #60]	; 0x3c
 801bf56:	3501      	adds	r5, #1
 801bf58:	9312      	str	r3, [sp, #72]	; 0x48
 801bf5a:	9b06      	ldr	r3, [sp, #24]
 801bf5c:	9504      	str	r5, [sp, #16]
 801bf5e:	7859      	ldrb	r1, [r3, #1]
 801bf60:	789b      	ldrb	r3, [r3, #2]
 801bf62:	021b      	lsls	r3, r3, #8
 801bf64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801bf68:	9906      	ldr	r1, [sp, #24]
 801bf6a:	78c9      	ldrb	r1, [r1, #3]
 801bf6c:	430b      	orrs	r3, r1
 801bf6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801bf70:	4419      	add	r1, r3
 801bf72:	1c4d      	adds	r5, r1, #1
 801bf74:	7849      	ldrb	r1, [r1, #1]
 801bf76:	9502      	str	r5, [sp, #8]
 801bf78:	0209      	lsls	r1, r1, #8
 801bf7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bf7c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801bf80:	5ceb      	ldrb	r3, [r5, r3]
 801bf82:	4319      	orrs	r1, r3
 801bf84:	b28b      	uxth	r3, r1
 801bf86:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801bf8a:	930a      	str	r3, [sp, #40]	; 0x28
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	9307      	str	r3, [sp, #28]
 801bf90:	2301      	movs	r3, #1
 801bf92:	e9cd 3300 	strd	r3, r3, [sp]
 801bf96:	469c      	mov	ip, r3
 801bf98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bf9c:	930c      	str	r3, [sp, #48]	; 0x30
 801bf9e:	f1b8 0f00 	cmp.w	r8, #0
 801bfa2:	f000 8082 	beq.w	801c0aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801bfa6:	45c4      	cmp	ip, r8
 801bfa8:	d270      	bcs.n	801c08c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801bfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfac:	eba8 080c 	sub.w	r8, r8, ip
 801bfb0:	4611      	mov	r1, r2
 801bfb2:	4283      	cmp	r3, r0
 801bfb4:	fa1f f888 	uxth.w	r8, r8
 801bfb8:	d802      	bhi.n	801bfc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801bfba:	e074      	b.n	801c0a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d15f      	bne.n	801c080 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801bfc0:	9b02      	ldr	r3, [sp, #8]
 801bfc2:	9a01      	ldr	r2, [sp, #4]
 801bfc4:	785b      	ldrb	r3, [r3, #1]
 801bfc6:	f1c2 0207 	rsb	r2, r2, #7
 801bfca:	9d01      	ldr	r5, [sp, #4]
 801bfcc:	4093      	lsls	r3, r2
 801bfce:	005b      	lsls	r3, r3, #1
 801bfd0:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801bfd4:	9b02      	ldr	r3, [sp, #8]
 801bfd6:	781b      	ldrb	r3, [r3, #0]
 801bfd8:	412b      	asrs	r3, r5
 801bfda:	b2db      	uxtb	r3, r3
 801bfdc:	4313      	orrs	r3, r2
 801bfde:	462a      	mov	r2, r5
 801bfe0:	3201      	adds	r2, #1
 801bfe2:	b29e      	uxth	r6, r3
 801bfe4:	b2d2      	uxtb	r2, r2
 801bfe6:	2a08      	cmp	r2, #8
 801bfe8:	9201      	str	r2, [sp, #4]
 801bfea:	9a02      	ldr	r2, [sp, #8]
 801bfec:	bf09      	itett	eq
 801bfee:	3202      	addeq	r2, #2
 801bff0:	3201      	addne	r2, #1
 801bff2:	9202      	streq	r2, [sp, #8]
 801bff4:	2200      	moveq	r2, #0
 801bff6:	bf14      	ite	ne
 801bff8:	9202      	strne	r2, [sp, #8]
 801bffa:	9201      	streq	r2, [sp, #4]
 801bffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bffe:	42b2      	cmp	r2, r6
 801c000:	d309      	bcc.n	801c016 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801c002:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801c006:	2301      	movs	r3, #1
 801c008:	9a04      	ldr	r2, [sp, #16]
 801c00a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801c00e:	d30e      	bcc.n	801c02e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c010:	9300      	str	r3, [sp, #0]
 801c012:	2500      	movs	r5, #0
 801c014:	e035      	b.n	801c082 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c016:	9b04      	ldr	r3, [sp, #16]
 801c018:	429e      	cmp	r6, r3
 801c01a:	d318      	bcc.n	801c04e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801c01c:	9b00      	ldr	r3, [sp, #0]
 801c01e:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801c022:	18e3      	adds	r3, r4, r3
 801c024:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801c028:	9b00      	ldr	r3, [sp, #0]
 801c02a:	3301      	adds	r3, #1
 801c02c:	b29b      	uxth	r3, r3
 801c02e:	9a04      	ldr	r2, [sp, #16]
 801c030:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 801c034:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c038:	9f00      	ldr	r7, [sp, #0]
 801c03a:	7115      	strb	r5, [r2, #4]
 801c03c:	3701      	adds	r7, #1
 801c03e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c040:	7157      	strb	r7, [r2, #5]
 801c042:	80d5      	strh	r5, [r2, #6]
 801c044:	9a04      	ldr	r2, [sp, #16]
 801c046:	3201      	adds	r2, #1
 801c048:	b292      	uxth	r2, r2
 801c04a:	9204      	str	r2, [sp, #16]
 801c04c:	e7e0      	b.n	801c010 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801c04e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c052:	4632      	mov	r2, r6
 801c054:	795b      	ldrb	r3, [r3, #5]
 801c056:	f603 0504 	addw	r5, r3, #2052	; 0x804
 801c05a:	4425      	add	r5, r4
 801c05c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801c05e:	eb07 0c05 	add.w	ip, r7, r5
 801c062:	f1bc 0f00 	cmp.w	ip, #0
 801c066:	dd07      	ble.n	801c078 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801c068:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c06c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801c070:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801c074:	88d2      	ldrh	r2, [r2, #6]
 801c076:	e7f1      	b.n	801c05c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801c078:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c07c:	b29b      	uxth	r3, r3
 801c07e:	e7c3      	b.n	801c008 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801c080:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801c082:	460a      	mov	r2, r1
 801c084:	960a      	str	r6, [sp, #40]	; 0x28
 801c086:	46a9      	mov	r9, r5
 801c088:	469c      	mov	ip, r3
 801c08a:	e788      	b.n	801bf9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801c08c:	ebac 0308 	sub.w	r3, ip, r8
 801c090:	eb09 0508 	add.w	r5, r9, r8
 801c094:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c098:	b29b      	uxth	r3, r3
 801c09a:	b2ad      	uxth	r5, r5
 801c09c:	f04f 0800 	mov.w	r8, #0
 801c0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0a2:	4282      	cmp	r2, r0
 801c0a4:	d88a      	bhi.n	801bfbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c0a6:	460a      	mov	r2, r1
 801c0a8:	e745      	b.n	801bf36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801c0aa:	4594      	cmp	ip, r2
 801c0ac:	9d08      	ldr	r5, [sp, #32]
 801c0ae:	4686      	mov	lr, r0
 801c0b0:	bf27      	ittee	cs
 801c0b2:	ebac 0302 	subcs.w	r3, ip, r2
 801c0b6:	4616      	movcs	r6, r2
 801c0b8:	eba2 010c 	subcc.w	r1, r2, ip
 801c0bc:	4666      	movcc	r6, ip
 801c0be:	bf27      	ittee	cs
 801c0c0:	b29b      	uxthcs	r3, r3
 801c0c2:	4641      	movcs	r1, r8
 801c0c4:	b289      	uxthcc	r1, r1
 801c0c6:	4643      	movcc	r3, r8
 801c0c8:	2dff      	cmp	r5, #255	; 0xff
 801c0ca:	eb09 0506 	add.w	r5, r9, r6
 801c0ce:	b2ad      	uxth	r5, r5
 801c0d0:	d130      	bne.n	801c134 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c0d2:	45a9      	cmp	r9, r5
 801c0d4:	f10e 0e03 	add.w	lr, lr, #3
 801c0d8:	d17a      	bne.n	801c1d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801c0da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c0de:	4594      	cmp	ip, r2
 801c0e0:	4430      	add	r0, r6
 801c0e2:	d3db      	bcc.n	801c09c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801c0e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0e6:	9903      	ldr	r1, [sp, #12]
 801c0e8:	8812      	ldrh	r2, [r2, #0]
 801c0ea:	1a52      	subs	r2, r2, r1
 801c0ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c0ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c0f2:	4410      	add	r0, r2
 801c0f4:	9a07      	ldr	r2, [sp, #28]
 801c0f6:	3201      	adds	r2, #1
 801c0f8:	428a      	cmp	r2, r1
 801c0fa:	9207      	str	r2, [sp, #28]
 801c0fc:	f040 8081 	bne.w	801c202 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801c100:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 801c104:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 801c108:	9b03      	ldr	r3, [sp, #12]
 801c10a:	eba8 080c 	sub.w	r8, r8, ip
 801c10e:	fa1f f888 	uxth.w	r8, r8
 801c112:	f1b8 0f00 	cmp.w	r8, #0
 801c116:	bf08      	it	eq
 801c118:	461a      	moveq	r2, r3
 801c11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c11c:	bf18      	it	ne
 801c11e:	2200      	movne	r2, #0
 801c120:	3301      	adds	r3, #1
 801c122:	b292      	uxth	r2, r2
 801c124:	930b      	str	r3, [sp, #44]	; 0x2c
 801c126:	e6fd      	b.n	801bf24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801c128:	24006a3c 	.word	0x24006a3c
 801c12c:	24006a36 	.word	0x24006a36
 801c130:	fffff7fb 	.word	0xfffff7fb
 801c134:	45a9      	cmp	r9, r5
 801c136:	f10e 0e03 	add.w	lr, lr, #3
 801c13a:	d0ce      	beq.n	801c0da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801c13c:	f109 0701 	add.w	r7, r9, #1
 801c140:	44a1      	add	r9, r4
 801c142:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801c146:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801c14a:	9713      	str	r7, [sp, #76]	; 0x4c
 801c14c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c150:	9f05      	ldr	r7, [sp, #20]
 801c152:	eb07 0908 	add.w	r9, r7, r8
 801c156:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c15a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c15c:	fb1b fb07 	smulbb	fp, fp, r7
 801c160:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c162:	fb08 b807 	mla	r8, r8, r7, fp
 801c166:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c168:	fa1f f888 	uxth.w	r8, r8
 801c16c:	f108 0b01 	add.w	fp, r8, #1
 801c170:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c174:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801c178:	fb1b fb07 	smulbb	fp, fp, r7
 801c17c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c180:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c182:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c186:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c18a:	fb08 b807 	mla	r8, r8, r7, fp
 801c18e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c190:	fa1f f888 	uxth.w	r8, r8
 801c194:	f108 0b01 	add.w	fp, r8, #1
 801c198:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c19c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c1a0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c1a4:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c1a8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801c1ac:	fb19 f907 	smulbb	r9, r9, r7
 801c1b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c1b2:	fb08 9807 	mla	r8, r8, r7, r9
 801c1b6:	fa1f f888 	uxth.w	r8, r8
 801c1ba:	f108 0901 	add.w	r9, r8, #1
 801c1be:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801c1c2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801c1c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c1ca:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c1ce:	e7b1      	b.n	801c134 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c1d0:	f109 0b01 	add.w	fp, r9, #1
 801c1d4:	44a1      	add	r9, r4
 801c1d6:	9f05      	ldr	r7, [sp, #20]
 801c1d8:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801c1dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c1e0:	eb07 0908 	add.w	r9, r7, r8
 801c1e4:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c1e8:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c1ec:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c1f0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c1f4:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c1f8:	fa1f f98b 	uxth.w	r9, fp
 801c1fc:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c200:	e767      	b.n	801c0d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801c202:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c206:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801c20a:	eba8 0801 	sub.w	r8, r8, r1
 801c20e:	fa1f f888 	uxth.w	r8, r8
 801c212:	f1b8 0f00 	cmp.w	r8, #0
 801c216:	bf18      	it	ne
 801c218:	2100      	movne	r1, #0
 801c21a:	e741      	b.n	801c0a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801c21c:	4b03      	ldr	r3, [pc, #12]	; (801c22c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801c21e:	6818      	ldr	r0, [r3, #0]
 801c220:	6803      	ldr	r3, [r0, #0]
 801c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c224:	4798      	blx	r3
 801c226:	b01b      	add	sp, #108	; 0x6c
 801c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c22c:	24006a3c 	.word	0x24006a3c

0801c230 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c234:	b09d      	sub	sp, #116	; 0x74
 801c236:	461d      	mov	r5, r3
 801c238:	4604      	mov	r4, r0
 801c23a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c23c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 801c240:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801c244:	920c      	str	r2, [sp, #48]	; 0x30
 801c246:	2a00      	cmp	r2, #0
 801c248:	f000 81de 	beq.w	801c608 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801c24c:	6828      	ldr	r0, [r5, #0]
 801c24e:	aa18      	add	r2, sp, #96	; 0x60
 801c250:	6869      	ldr	r1, [r5, #4]
 801c252:	c203      	stmia	r2!, {r0, r1}
 801c254:	6818      	ldr	r0, [r3, #0]
 801c256:	aa1a      	add	r2, sp, #104	; 0x68
 801c258:	6859      	ldr	r1, [r3, #4]
 801c25a:	c203      	stmia	r2!, {r0, r1}
 801c25c:	a818      	add	r0, sp, #96	; 0x60
 801c25e:	f7fa fc0b 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c262:	4629      	mov	r1, r5
 801c264:	a81a      	add	r0, sp, #104	; 0x68
 801c266:	f7fa fc2f 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c26a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c26e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 801c272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c276:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c27a:	bfdb      	ittet	le
 801c27c:	b29a      	uxthle	r2, r3
 801c27e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c282:	2201      	movgt	r2, #1
 801c284:	fb91 f2f2 	sdivle	r2, r1, r2
 801c288:	9201      	str	r2, [sp, #4]
 801c28a:	9801      	ldr	r0, [sp, #4]
 801c28c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801c290:	9901      	ldr	r1, [sp, #4]
 801c292:	fb92 f0f0 	sdiv	r0, r2, r0
 801c296:	b280      	uxth	r0, r0
 801c298:	440f      	add	r7, r1
 801c29a:	900d      	str	r0, [sp, #52]	; 0x34
 801c29c:	3f01      	subs	r7, #1
 801c29e:	9801      	ldr	r0, [sp, #4]
 801c2a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c2a2:	fb05 2510 	mls	r5, r5, r0, r2
 801c2a6:	fb97 f7f1 	sdiv	r7, r7, r1
 801c2aa:	fb15 f503 	smulbb	r5, r5, r3
 801c2ae:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801c2b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801c2b6:	3701      	adds	r7, #1
 801c2b8:	440d      	add	r5, r1
 801c2ba:	4419      	add	r1, r3
 801c2bc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801c2c0:	b2bf      	uxth	r7, r7
 801c2c2:	441a      	add	r2, r3
 801c2c4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c2c8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801c2cc:	00bf      	lsls	r7, r7, #2
 801c2ce:	9304      	str	r3, [sp, #16]
 801c2d0:	b2ad      	uxth	r5, r5
 801c2d2:	4bb0      	ldr	r3, [pc, #704]	; (801c594 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801c2d4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801c2d8:	6818      	ldr	r0, [r3, #0]
 801c2da:	6803      	ldr	r3, [r0, #0]
 801c2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2de:	4798      	blx	r3
 801c2e0:	4bad      	ldr	r3, [pc, #692]	; (801c598 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c2e2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801c2e6:	2d00      	cmp	r5, #0
 801c2e8:	881a      	ldrh	r2, [r3, #0]
 801c2ea:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 801c2ee:	fb02 f606 	mul.w	r6, r2, r6
 801c2f2:	fb02 c101 	mla	r1, r2, r1, ip
 801c2f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c2fa:	9316      	str	r3, [sp, #88]	; 0x58
 801c2fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c300:	4ba6      	ldr	r3, [pc, #664]	; (801c59c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c302:	eb00 0801 	add.w	r8, r0, r1
 801c306:	bf18      	it	ne
 801c308:	2100      	movne	r1, #0
 801c30a:	eba3 0304 	sub.w	r3, r3, r4
 801c30e:	eb08 0206 	add.w	r2, r8, r6
 801c312:	9317      	str	r3, [sp, #92]	; 0x5c
 801c314:	9208      	str	r2, [sp, #32]
 801c316:	f107 0204 	add.w	r2, r7, #4
 801c31a:	9211      	str	r2, [sp, #68]	; 0x44
 801c31c:	9a04      	ldr	r2, [sp, #16]
 801c31e:	bf08      	it	eq
 801c320:	4611      	moveq	r1, r2
 801c322:	2200      	movs	r2, #0
 801c324:	b289      	uxth	r1, r1
 801c326:	920b      	str	r2, [sp, #44]	; 0x2c
 801c328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c32c:	fa12 f383 	uxtah	r3, r2, r3
 801c330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c336:	3304      	adds	r3, #4
 801c338:	9306      	str	r3, [sp, #24]
 801c33a:	9b08      	ldr	r3, [sp, #32]
 801c33c:	4543      	cmp	r3, r8
 801c33e:	f240 815e 	bls.w	801c5fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801c342:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c346:	f04f 0b01 	mov.w	fp, #1
 801c34a:	9a01      	ldr	r2, [sp, #4]
 801c34c:	9806      	ldr	r0, [sp, #24]
 801c34e:	465e      	mov	r6, fp
 801c350:	f8cd b008 	str.w	fp, [sp, #8]
 801c354:	7800      	ldrb	r0, [r0, #0]
 801c356:	fbb5 f3f3 	udiv	r3, r5, r3
 801c35a:	1ad3      	subs	r3, r2, r3
 801c35c:	900e      	str	r0, [sp, #56]	; 0x38
 801c35e:	3001      	adds	r0, #1
 801c360:	b29b      	uxth	r3, r3
 801c362:	9005      	str	r0, [sp, #20]
 801c364:	9312      	str	r3, [sp, #72]	; 0x48
 801c366:	9b06      	ldr	r3, [sp, #24]
 801c368:	785a      	ldrb	r2, [r3, #1]
 801c36a:	789b      	ldrb	r3, [r3, #2]
 801c36c:	021b      	lsls	r3, r3, #8
 801c36e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c372:	9a06      	ldr	r2, [sp, #24]
 801c374:	78d2      	ldrb	r2, [r2, #3]
 801c376:	4313      	orrs	r3, r2
 801c378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c37a:	441a      	add	r2, r3
 801c37c:	1c50      	adds	r0, r2, #1
 801c37e:	7852      	ldrb	r2, [r2, #1]
 801c380:	9003      	str	r0, [sp, #12]
 801c382:	0212      	lsls	r2, r2, #8
 801c384:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c386:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c38a:	5cc3      	ldrb	r3, [r0, r3]
 801c38c:	431a      	orrs	r2, r3
 801c38e:	b293      	uxth	r3, r2
 801c390:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c394:	930a      	str	r3, [sp, #40]	; 0x28
 801c396:	2300      	movs	r3, #0
 801c398:	461a      	mov	r2, r3
 801c39a:	9307      	str	r3, [sp, #28]
 801c39c:	2d00      	cmp	r5, #0
 801c39e:	d07c      	beq.n	801c49a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c3a0:	42ae      	cmp	r6, r5
 801c3a2:	d26c      	bcs.n	801c47e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801c3a4:	9b08      	ldr	r3, [sp, #32]
 801c3a6:	1bad      	subs	r5, r5, r6
 801c3a8:	4608      	mov	r0, r1
 801c3aa:	4543      	cmp	r3, r8
 801c3ac:	b2ad      	uxth	r5, r5
 801c3ae:	d802      	bhi.n	801c3b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801c3b0:	e071      	b.n	801c496 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d15d      	bne.n	801c472 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801c3b6:	9b03      	ldr	r3, [sp, #12]
 801c3b8:	9a02      	ldr	r2, [sp, #8]
 801c3ba:	785b      	ldrb	r3, [r3, #1]
 801c3bc:	f1c2 0207 	rsb	r2, r2, #7
 801c3c0:	9902      	ldr	r1, [sp, #8]
 801c3c2:	4093      	lsls	r3, r2
 801c3c4:	005b      	lsls	r3, r3, #1
 801c3c6:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c3ca:	9b03      	ldr	r3, [sp, #12]
 801c3cc:	781b      	ldrb	r3, [r3, #0]
 801c3ce:	410b      	asrs	r3, r1
 801c3d0:	3101      	adds	r1, #1
 801c3d2:	b2c9      	uxtb	r1, r1
 801c3d4:	b2db      	uxtb	r3, r3
 801c3d6:	2908      	cmp	r1, #8
 801c3d8:	9102      	str	r1, [sp, #8]
 801c3da:	9903      	ldr	r1, [sp, #12]
 801c3dc:	ea43 0302 	orr.w	r3, r3, r2
 801c3e0:	bf0c      	ite	eq
 801c3e2:	3102      	addeq	r1, #2
 801c3e4:	3101      	addne	r1, #1
 801c3e6:	b29a      	uxth	r2, r3
 801c3e8:	bf05      	ittet	eq
 801c3ea:	9103      	streq	r1, [sp, #12]
 801c3ec:	2100      	moveq	r1, #0
 801c3ee:	9103      	strne	r1, [sp, #12]
 801c3f0:	9102      	streq	r1, [sp, #8]
 801c3f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c3f4:	4291      	cmp	r1, r2
 801c3f6:	d30a      	bcc.n	801c40e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801c3f8:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	9905      	ldr	r1, [sp, #20]
 801c400:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c404:	d30f      	bcc.n	801c426 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801c406:	469b      	mov	fp, r3
 801c408:	f04f 0c00 	mov.w	ip, #0
 801c40c:	e032      	b.n	801c474 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801c40e:	9b05      	ldr	r3, [sp, #20]
 801c410:	429a      	cmp	r2, r3
 801c412:	d318      	bcc.n	801c446 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801c414:	eb04 030b 	add.w	r3, r4, fp
 801c418:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801c41c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801c420:	f10b 0301 	add.w	r3, fp, #1
 801c424:	b29b      	uxth	r3, r3
 801c426:	9905      	ldr	r1, [sp, #20]
 801c428:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801c42c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c430:	710e      	strb	r6, [r1, #4]
 801c432:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801c434:	80ce      	strh	r6, [r1, #6]
 801c436:	f10b 0601 	add.w	r6, fp, #1
 801c43a:	714e      	strb	r6, [r1, #5]
 801c43c:	9905      	ldr	r1, [sp, #20]
 801c43e:	3101      	adds	r1, #1
 801c440:	b289      	uxth	r1, r1
 801c442:	9105      	str	r1, [sp, #20]
 801c444:	e7df      	b.n	801c406 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801c446:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c44a:	4611      	mov	r1, r2
 801c44c:	795b      	ldrb	r3, [r3, #5]
 801c44e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801c452:	4426      	add	r6, r4
 801c454:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801c456:	4437      	add	r7, r6
 801c458:	2f00      	cmp	r7, #0
 801c45a:	dd06      	ble.n	801c46a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801c45c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c460:	790f      	ldrb	r7, [r1, #4]
 801c462:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c466:	88c9      	ldrh	r1, [r1, #6]
 801c468:	e7f4      	b.n	801c454 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801c46a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801c46e:	b29b      	uxth	r3, r3
 801c470:	e7c5      	b.n	801c3fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801c472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c474:	920a      	str	r2, [sp, #40]	; 0x28
 801c476:	4601      	mov	r1, r0
 801c478:	4662      	mov	r2, ip
 801c47a:	461e      	mov	r6, r3
 801c47c:	e78e      	b.n	801c39c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801c47e:	1b73      	subs	r3, r6, r5
 801c480:	eb02 0c05 	add.w	ip, r2, r5
 801c484:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c488:	b29b      	uxth	r3, r3
 801c48a:	fa1f fc8c 	uxth.w	ip, ip
 801c48e:	2500      	movs	r5, #0
 801c490:	9a08      	ldr	r2, [sp, #32]
 801c492:	4542      	cmp	r2, r8
 801c494:	d88d      	bhi.n	801c3b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801c496:	4601      	mov	r1, r0
 801c498:	e74f      	b.n	801c33a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801c49a:	428e      	cmp	r6, r1
 801c49c:	bf2b      	itete	cs
 801c49e:	468e      	movcs	lr, r1
 801c4a0:	46b6      	movcc	lr, r6
 801c4a2:	1a73      	subcs	r3, r6, r1
 801c4a4:	1b88      	subcc	r0, r1, r6
 801c4a6:	eb02 0c0e 	add.w	ip, r2, lr
 801c4aa:	bf2b      	itete	cs
 801c4ac:	4628      	movcs	r0, r5
 801c4ae:	462b      	movcc	r3, r5
 801c4b0:	b29b      	uxthcs	r3, r3
 801c4b2:	b280      	uxthcc	r0, r0
 801c4b4:	f108 0503 	add.w	r5, r8, #3
 801c4b8:	fa1f fc8c 	uxth.w	ip, ip
 801c4bc:	4562      	cmp	r2, ip
 801c4be:	d06f      	beq.n	801c5a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801c4c0:	1c57      	adds	r7, r2, #1
 801c4c2:	4422      	add	r2, r4
 801c4c4:	b2bf      	uxth	r7, r7
 801c4c6:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801c4ca:	9713      	str	r7, [sp, #76]	; 0x4c
 801c4cc:	2704      	movs	r7, #4
 801c4ce:	46b9      	mov	r9, r7
 801c4d0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c4d2:	fb19 7202 	smlabb	r2, r9, r2, r7
 801c4d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c4d8:	58bf      	ldr	r7, [r7, r2]
 801c4da:	0e3a      	lsrs	r2, r7, #24
 801c4dc:	9209      	str	r2, [sp, #36]	; 0x24
 801c4de:	d016      	beq.n	801c50e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c4e0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c4e4:	fa5f fa87 	uxtb.w	sl, r7
 801c4e8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c4ec:	fa5f f289 	uxtb.w	r2, r9
 801c4f0:	9214      	str	r2, [sp, #80]	; 0x50
 801c4f2:	b2fa      	uxtb	r2, r7
 801c4f4:	9215      	str	r2, [sp, #84]	; 0x54
 801c4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4f8:	2aff      	cmp	r2, #255	; 0xff
 801c4fa:	d10b      	bne.n	801c514 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c4fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c4fe:	2aff      	cmp	r2, #255	; 0xff
 801c500:	d108      	bne.n	801c514 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c502:	f805 ac03 	strb.w	sl, [r5, #-3]
 801c506:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c50a:	f805 7c01 	strb.w	r7, [r5, #-1]
 801c50e:	3503      	adds	r5, #3
 801c510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c512:	e7d3      	b.n	801c4bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801c514:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c518:	437a      	muls	r2, r7
 801c51a:	1c57      	adds	r7, r2, #1
 801c51c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801c520:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801c524:	1212      	asrs	r2, r2, #8
 801c526:	fa1f f982 	uxth.w	r9, r2
 801c52a:	43d2      	mvns	r2, r2
 801c52c:	fb1a fa09 	smulbb	sl, sl, r9
 801c530:	b2d2      	uxtb	r2, r2
 801c532:	fb07 a702 	mla	r7, r7, r2, sl
 801c536:	9209      	str	r2, [sp, #36]	; 0x24
 801c538:	b2bf      	uxth	r7, r7
 801c53a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c53c:	f107 0a01 	add.w	sl, r7, #1
 801c540:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c544:	fb12 fa09 	smulbb	sl, r2, r9
 801c548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c54a:	123f      	asrs	r7, r7, #8
 801c54c:	f805 7c03 	strb.w	r7, [r5, #-3]
 801c550:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801c554:	fb07 aa02 	mla	sl, r7, r2, sl
 801c558:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c55a:	fb12 f909 	smulbb	r9, r2, r9
 801c55e:	fa1f fa8a 	uxth.w	sl, sl
 801c562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c564:	f10a 0701 	add.w	r7, sl, #1
 801c568:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c56c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801c570:	fb07 9902 	mla	r9, r7, r2, r9
 801c574:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c578:	fa1f f989 	uxth.w	r9, r9
 801c57c:	f805 ac02 	strb.w	sl, [r5, #-2]
 801c580:	f109 0201 	add.w	r2, r9, #1
 801c584:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c588:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c58c:	f805 9c01 	strb.w	r9, [r5, #-1]
 801c590:	e7bd      	b.n	801c50e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c592:	bf00      	nop
 801c594:	24006a3c 	.word	0x24006a3c
 801c598:	24006a36 	.word	0x24006a36
 801c59c:	fffff7fb 	.word	0xfffff7fb
 801c5a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c5a4:	428e      	cmp	r6, r1
 801c5a6:	44f0      	add	r8, lr
 801c5a8:	f4ff af71 	bcc.w	801c48e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c5ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c5ae:	9904      	ldr	r1, [sp, #16]
 801c5b0:	8812      	ldrh	r2, [r2, #0]
 801c5b2:	1a52      	subs	r2, r2, r1
 801c5b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c5b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c5ba:	4490      	add	r8, r2
 801c5bc:	9a07      	ldr	r2, [sp, #28]
 801c5be:	3201      	adds	r2, #1
 801c5c0:	428a      	cmp	r2, r1
 801c5c2:	9207      	str	r2, [sp, #28]
 801c5c4:	d111      	bne.n	801c5ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801c5c6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801c5ca:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 801c5ce:	9b04      	ldr	r3, [sp, #16]
 801c5d0:	eba5 050c 	sub.w	r5, r5, ip
 801c5d4:	b2ad      	uxth	r5, r5
 801c5d6:	2d00      	cmp	r5, #0
 801c5d8:	bf08      	it	eq
 801c5da:	4619      	moveq	r1, r3
 801c5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c5de:	bf18      	it	ne
 801c5e0:	2100      	movne	r1, #0
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	b289      	uxth	r1, r1
 801c5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5e8:	e69e      	b.n	801c328 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801c5ea:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c5ee:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c5f2:	1a2d      	subs	r5, r5, r0
 801c5f4:	b2ad      	uxth	r5, r5
 801c5f6:	2d00      	cmp	r5, #0
 801c5f8:	bf18      	it	ne
 801c5fa:	2000      	movne	r0, #0
 801c5fc:	e748      	b.n	801c490 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c5fe:	4b04      	ldr	r3, [pc, #16]	; (801c610 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801c600:	6818      	ldr	r0, [r3, #0]
 801c602:	6803      	ldr	r3, [r0, #0]
 801c604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c606:	4798      	blx	r3
 801c608:	b01d      	add	sp, #116	; 0x74
 801c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c60e:	bf00      	nop
 801c610:	24006a3c 	.word	0x24006a3c

0801c614 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c618:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801c61c:	9c06      	ldr	r4, [sp, #24]
 801c61e:	2800      	cmp	r0, #0
 801c620:	d06e      	beq.n	801c700 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c622:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801c626:	2d00      	cmp	r5, #0
 801c628:	dd6a      	ble.n	801c700 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c62a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801c62e:	f1bc 0f00 	cmp.w	ip, #0
 801c632:	dd65      	ble.n	801c700 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c634:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801c638:	28ff      	cmp	r0, #255	; 0xff
 801c63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c63e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801c642:	fb02 3306 	mla	r3, r2, r6, r3
 801c646:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801c64a:	b2e4      	uxtb	r4, r4
 801c64c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c650:	4419      	add	r1, r3
 801c652:	fb02 f30c 	mul.w	r3, r2, ip
 801c656:	eba2 0205 	sub.w	r2, r2, r5
 801c65a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c65e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c662:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c666:	440b      	add	r3, r1
 801c668:	d03e      	beq.n	801c6e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801c66a:	fa1f fc80 	uxth.w	ip, r0
 801c66e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801c672:	fb06 f60c 	mul.w	r6, r6, ip
 801c676:	b280      	uxth	r0, r0
 801c678:	fb07 f70c 	mul.w	r7, r7, ip
 801c67c:	fb04 f40c 	mul.w	r4, r4, ip
 801c680:	4299      	cmp	r1, r3
 801c682:	d23d      	bcs.n	801c700 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c684:	eb01 0c05 	add.w	ip, r1, r5
 801c688:	458c      	cmp	ip, r1
 801c68a:	f101 0e03 	add.w	lr, r1, #3
 801c68e:	d928      	bls.n	801c6e2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801c690:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801c694:	fb11 f100 	smulbb	r1, r1, r0
 801c698:	4421      	add	r1, r4
 801c69a:	b289      	uxth	r1, r1
 801c69c:	f101 0801 	add.w	r8, r1, #1
 801c6a0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c6a4:	1209      	asrs	r1, r1, #8
 801c6a6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801c6aa:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801c6ae:	fb11 f100 	smulbb	r1, r1, r0
 801c6b2:	4439      	add	r1, r7
 801c6b4:	b289      	uxth	r1, r1
 801c6b6:	f101 0801 	add.w	r8, r1, #1
 801c6ba:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c6be:	1209      	asrs	r1, r1, #8
 801c6c0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801c6c4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801c6c8:	fb11 f100 	smulbb	r1, r1, r0
 801c6cc:	4431      	add	r1, r6
 801c6ce:	b289      	uxth	r1, r1
 801c6d0:	f101 0801 	add.w	r8, r1, #1
 801c6d4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c6d8:	1209      	asrs	r1, r1, #8
 801c6da:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801c6de:	4671      	mov	r1, lr
 801c6e0:	e7d2      	b.n	801c688 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801c6e2:	4411      	add	r1, r2
 801c6e4:	e7cc      	b.n	801c680 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801c6e6:	4411      	add	r1, r2
 801c6e8:	4299      	cmp	r1, r3
 801c6ea:	d209      	bcs.n	801c700 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c6ec:	1948      	adds	r0, r1, r5
 801c6ee:	4281      	cmp	r1, r0
 801c6f0:	d2f9      	bcs.n	801c6e6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801c6f2:	700c      	strb	r4, [r1, #0]
 801c6f4:	3103      	adds	r1, #3
 801c6f6:	f801 7c02 	strb.w	r7, [r1, #-2]
 801c6fa:	f801 6c01 	strb.w	r6, [r1, #-1]
 801c6fe:	e7f6      	b.n	801c6ee <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801c700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c704 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c708:	b093      	sub	sp, #76	; 0x4c
 801c70a:	4699      	mov	r9, r3
 801c70c:	4617      	mov	r7, r2
 801c70e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c712:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801c716:	4604      	mov	r4, r0
 801c718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c71c:	a80c      	add	r0, sp, #48	; 0x30
 801c71e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801c722:	460d      	mov	r5, r1
 801c724:	4649      	mov	r1, r9
 801c726:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c72a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c72e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801c732:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801c736:	f7f7 fa4b 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 801c73a:	4639      	mov	r1, r7
 801c73c:	a80c      	add	r0, sp, #48	; 0x30
 801c73e:	f7f7 fa47 	bl	8013bd0 <_ZN8touchgfx4RectaNERKS0_>
 801c742:	4b78      	ldr	r3, [pc, #480]	; (801c924 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c744:	8818      	ldrh	r0, [r3, #0]
 801c746:	4b78      	ldr	r3, [pc, #480]	; (801c928 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801c748:	b202      	sxth	r2, r0
 801c74a:	8819      	ldrh	r1, [r3, #0]
 801c74c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c750:	b20f      	sxth	r7, r1
 801c752:	2b00      	cmp	r3, #0
 801c754:	da07      	bge.n	801c766 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801c756:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801c75a:	4463      	add	r3, ip
 801c75c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c760:	2300      	movs	r3, #0
 801c762:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c766:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c76a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801c76e:	1ad2      	subs	r2, r2, r3
 801c770:	4594      	cmp	ip, r2
 801c772:	bfc4      	itt	gt
 801c774:	1ac2      	subgt	r2, r0, r3
 801c776:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801c77a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c77e:	2a00      	cmp	r2, #0
 801c780:	da07      	bge.n	801c792 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801c782:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801c786:	4462      	add	r2, ip
 801c788:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801c78c:	2200      	movs	r2, #0
 801c78e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c792:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c796:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801c79a:	1abf      	subs	r7, r7, r2
 801c79c:	45bc      	cmp	ip, r7
 801c79e:	f8df c190 	ldr.w	ip, [pc, #400]	; 801c930 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801c7a2:	bfc8      	it	gt
 801c7a4:	1a8f      	subgt	r7, r1, r2
 801c7a6:	f89c c000 	ldrb.w	ip, [ip]
 801c7aa:	bfc8      	it	gt
 801c7ac:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801c7b0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801c7b4:	f1bc 0f00 	cmp.w	ip, #0
 801c7b8:	d176      	bne.n	801c8a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801c7ba:	4287      	cmp	r7, r0
 801c7bc:	bf14      	ite	ne
 801c7be:	2100      	movne	r1, #0
 801c7c0:	2101      	moveq	r1, #1
 801c7c2:	2f00      	cmp	r7, #0
 801c7c4:	9107      	str	r1, [sp, #28]
 801c7c6:	dd73      	ble.n	801c8b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801c7c8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801c7cc:	2900      	cmp	r1, #0
 801c7ce:	9104      	str	r1, [sp, #16]
 801c7d0:	dd6e      	ble.n	801c8b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801c7d2:	f8b9 1000 	ldrh.w	r1, [r9]
 801c7d6:	a80e      	add	r0, sp, #56	; 0x38
 801c7d8:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801c7dc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801c7e0:	1a5b      	subs	r3, r3, r1
 801c7e2:	a910      	add	r1, sp, #64	; 0x40
 801c7e4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c7e8:	b21b      	sxth	r3, r3
 801c7ea:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801c7ee:	f8df a144 	ldr.w	sl, [pc, #324]	; 801c934 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801c7f2:	9305      	str	r3, [sp, #20]
 801c7f4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801c7f8:	1ad2      	subs	r2, r2, r3
 801c7fa:	b213      	sxth	r3, r2
 801c7fc:	9306      	str	r3, [sp, #24]
 801c7fe:	9b05      	ldr	r3, [sp, #20]
 801c800:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801c804:	9b06      	ldr	r3, [sp, #24]
 801c806:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c80a:	9b04      	ldr	r3, [sp, #16]
 801c80c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c810:	2300      	movs	r3, #0
 801c812:	9310      	str	r3, [sp, #64]	; 0x40
 801c814:	f7fa f958 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c818:	4640      	mov	r0, r8
 801c81a:	f7fa f92d 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c81e:	a810      	add	r0, sp, #64	; 0x40
 801c820:	f7fa f92a 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c824:	4b41      	ldr	r3, [pc, #260]	; (801c92c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801c826:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c82a:	4628      	mov	r0, r5
 801c82c:	881b      	ldrh	r3, [r3, #0]
 801c82e:	9308      	str	r3, [sp, #32]
 801c830:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801c834:	b21b      	sxth	r3, r3
 801c836:	9303      	str	r3, [sp, #12]
 801c838:	682b      	ldr	r3, [r5, #0]
 801c83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c83c:	4798      	blx	r3
 801c83e:	9a03      	ldr	r2, [sp, #12]
 801c840:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c844:	4681      	mov	r9, r0
 801c846:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801c84a:	fb13 f302 	smulbb	r3, r3, r2
 801c84e:	2203      	movs	r2, #3
 801c850:	f8da 0000 	ldr.w	r0, [sl]
 801c854:	fb15 3302 	smlabb	r3, r5, r2, r3
 801c858:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c85a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c85c:	441d      	add	r5, r3
 801c85e:	6803      	ldr	r3, [r0, #0]
 801c860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c862:	4798      	blx	r3
 801c864:	9009      	str	r0, [sp, #36]	; 0x24
 801c866:	f8da 0000 	ldr.w	r0, [sl]
 801c86a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c86e:	6803      	ldr	r3, [r0, #0]
 801c870:	910a      	str	r1, [sp, #40]	; 0x28
 801c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c874:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801c878:	4798      	blx	r3
 801c87a:	f010 0f01 	tst.w	r0, #1
 801c87e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c882:	d01e      	beq.n	801c8c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801c884:	f8da 0000 	ldr.w	r0, [sl]
 801c888:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801c88c:	6803      	ldr	r3, [r0, #0]
 801c88e:	9200      	str	r2, [sp, #0]
 801c890:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c892:	462b      	mov	r3, r5
 801c894:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c898:	47b0      	blx	r6
 801c89a:	9b05      	ldr	r3, [sp, #20]
 801c89c:	80a7      	strh	r7, [r4, #4]
 801c89e:	8023      	strh	r3, [r4, #0]
 801c8a0:	9b06      	ldr	r3, [sp, #24]
 801c8a2:	8063      	strh	r3, [r4, #2]
 801c8a4:	9b04      	ldr	r3, [sp, #16]
 801c8a6:	e007      	b.n	801c8b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801c8a8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801c8ac:	4288      	cmp	r0, r1
 801c8ae:	e785      	b.n	801c7bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	8023      	strh	r3, [r4, #0]
 801c8b4:	8063      	strh	r3, [r4, #2]
 801c8b6:	80a3      	strh	r3, [r4, #4]
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	80e3      	strh	r3, [r4, #6]
 801c8bc:	b013      	add	sp, #76	; 0x4c
 801c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8c2:	fb09 f606 	mul.w	r6, r9, r6
 801c8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8c8:	fb11 6602 	smlabb	r6, r1, r2, r6
 801c8cc:	9a07      	ldr	r2, [sp, #28]
 801c8ce:	4433      	add	r3, r6
 801c8d0:	461e      	mov	r6, r3
 801c8d2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801c8d6:	b16a      	cbz	r2, 801c8f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c8d8:	9a08      	ldr	r2, [sp, #32]
 801c8da:	4593      	cmp	fp, r2
 801c8dc:	d10a      	bne.n	801c8f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c8de:	f8da 0000 	ldr.w	r0, [sl]
 801c8e2:	fb09 f303 	mul.w	r3, r9, r3
 801c8e6:	4629      	mov	r1, r5
 801c8e8:	6802      	ldr	r2, [r0, #0]
 801c8ea:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c8ee:	4632      	mov	r2, r6
 801c8f0:	47d0      	blx	sl
 801c8f2:	e7d2      	b.n	801c89a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c8f4:	9a03      	ldr	r2, [sp, #12]
 801c8f6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801c934 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801c8fa:	fb02 5803 	mla	r8, r2, r3, r5
 801c8fe:	4545      	cmp	r5, r8
 801c900:	d2cb      	bcs.n	801c89a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c902:	f8db 0000 	ldr.w	r0, [fp]
 801c906:	4629      	mov	r1, r5
 801c908:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801c90c:	6802      	ldr	r2, [r0, #0]
 801c90e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c912:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c916:	4632      	mov	r2, r6
 801c918:	47d0      	blx	sl
 801c91a:	9b03      	ldr	r3, [sp, #12]
 801c91c:	444e      	add	r6, r9
 801c91e:	441d      	add	r5, r3
 801c920:	e7ed      	b.n	801c8fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801c922:	bf00      	nop
 801c924:	24006a30 	.word	0x24006a30
 801c928:	24006a32 	.word	0x24006a32
 801c92c:	24006a36 	.word	0x24006a36
 801c930:	24006a34 	.word	0x24006a34
 801c934:	24006a3c 	.word	0x24006a3c

0801c938 <_ZN8touchgfx8LCD24bppC1Ev>:
 801c938:	2200      	movs	r2, #0
 801c93a:	490d      	ldr	r1, [pc, #52]	; (801c970 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 801c93c:	6042      	str	r2, [r0, #4]
 801c93e:	6001      	str	r1, [r0, #0]
 801c940:	6602      	str	r2, [r0, #96]	; 0x60
 801c942:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c946:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c94a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c94e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c952:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c956:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c95a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c95e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c962:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c966:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c96a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c96e:	4770      	bx	lr
 801c970:	08025754 	.word	0x08025754

0801c974 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c978:	b091      	sub	sp, #68	; 0x44
 801c97a:	4607      	mov	r7, r0
 801c97c:	4688      	mov	r8, r1
 801c97e:	6810      	ldr	r0, [r2, #0]
 801c980:	6851      	ldr	r1, [r2, #4]
 801c982:	ac0c      	add	r4, sp, #48	; 0x30
 801c984:	4616      	mov	r6, r2
 801c986:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801c98a:	4d64      	ldr	r5, [pc, #400]	; (801cb1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801c98c:	f8df a190 	ldr.w	sl, [pc, #400]	; 801cb20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c990:	c403      	stmia	r4!, {r0, r1}
 801c992:	6818      	ldr	r0, [r3, #0]
 801c994:	ac0e      	add	r4, sp, #56	; 0x38
 801c996:	6859      	ldr	r1, [r3, #4]
 801c998:	c403      	stmia	r4!, {r0, r1}
 801c99a:	a80c      	add	r0, sp, #48	; 0x30
 801c99c:	f7fa f86c 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9a0:	4631      	mov	r1, r6
 801c9a2:	a80e      	add	r0, sp, #56	; 0x38
 801c9a4:	f7fa f890 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c9a8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c9ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c9b0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c9b4:	6828      	ldr	r0, [r5, #0]
 801c9b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c9ba:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801c9be:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801c9c2:	440f      	add	r7, r1
 801c9c4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c9c8:	440a      	add	r2, r1
 801c9ca:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c9ce:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c9d2:	4413      	add	r3, r2
 801c9d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c9d8:	6803      	ldr	r3, [r0, #0]
 801c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9dc:	4798      	blx	r3
 801c9de:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c9e2:	6828      	ldr	r0, [r5, #0]
 801c9e4:	d01f      	beq.n	801ca26 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801c9e6:	2201      	movs	r2, #1
 801c9e8:	2500      	movs	r5, #0
 801c9ea:	6801      	ldr	r1, [r0, #0]
 801c9ec:	b2a4      	uxth	r4, r4
 801c9ee:	b2b6      	uxth	r6, r6
 801c9f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c9f4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801c9f8:	250b      	movs	r5, #11
 801c9fa:	9507      	str	r5, [sp, #28]
 801c9fc:	f8ba 5000 	ldrh.w	r5, [sl]
 801ca00:	f8cd 9010 	str.w	r9, [sp, #16]
 801ca04:	9602      	str	r6, [sp, #8]
 801ca06:	9401      	str	r4, [sp, #4]
 801ca08:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801ca0c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ca10:	9203      	str	r2, [sp, #12]
 801ca12:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ca16:	9200      	str	r2, [sp, #0]
 801ca18:	4642      	mov	r2, r8
 801ca1a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ca1c:	4639      	mov	r1, r7
 801ca1e:	47a0      	blx	r4
 801ca20:	b011      	add	sp, #68	; 0x44
 801ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca26:	6803      	ldr	r3, [r0, #0]
 801ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca2a:	4798      	blx	r3
 801ca2c:	f8ba 5000 	ldrh.w	r5, [sl]
 801ca30:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ca34:	f04f 0e04 	mov.w	lr, #4
 801ca38:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ca3c:	436e      	muls	r6, r5
 801ca3e:	fb05 2303 	mla	r3, r5, r3, r2
 801ca42:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ca46:	1b2d      	subs	r5, r5, r4
 801ca48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca50:	4418      	add	r0, r3
 801ca52:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ca56:	1982      	adds	r2, r0, r6
 801ca58:	1b1b      	subs	r3, r3, r4
 801ca5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca60:	4290      	cmp	r0, r2
 801ca62:	d254      	bcs.n	801cb0e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ca64:	eb00 0a04 	add.w	sl, r0, r4
 801ca68:	4550      	cmp	r0, sl
 801ca6a:	d24c      	bcs.n	801cb06 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ca6c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ca70:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ca74:	eb08 0c01 	add.w	ip, r8, r1
 801ca78:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ca7c:	b173      	cbz	r3, 801ca9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ca7e:	2bff      	cmp	r3, #255	; 0xff
 801ca80:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ca84:	d10c      	bne.n	801caa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ca86:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ca8a:	d109      	bne.n	801caa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ca8c:	f880 b000 	strb.w	fp, [r0]
 801ca90:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ca94:	7043      	strb	r3, [r0, #1]
 801ca96:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ca9a:	7083      	strb	r3, [r0, #2]
 801ca9c:	3003      	adds	r0, #3
 801ca9e:	e7e3      	b.n	801ca68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801caa0:	fb09 f103 	mul.w	r1, r9, r3
 801caa4:	1c4b      	adds	r3, r1, #1
 801caa6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801caaa:	7801      	ldrb	r1, [r0, #0]
 801caac:	121b      	asrs	r3, r3, #8
 801caae:	b29e      	uxth	r6, r3
 801cab0:	43db      	mvns	r3, r3
 801cab2:	fb1b fb06 	smulbb	fp, fp, r6
 801cab6:	b2db      	uxtb	r3, r3
 801cab8:	fb01 b103 	mla	r1, r1, r3, fp
 801cabc:	b289      	uxth	r1, r1
 801cabe:	f101 0b01 	add.w	fp, r1, #1
 801cac2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801cac6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801caca:	fb1b fb03 	smulbb	fp, fp, r3
 801cace:	1209      	asrs	r1, r1, #8
 801cad0:	7001      	strb	r1, [r0, #0]
 801cad2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801cad6:	fb01 b106 	mla	r1, r1, r6, fp
 801cada:	b289      	uxth	r1, r1
 801cadc:	f101 0b01 	add.w	fp, r1, #1
 801cae0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801cae4:	1209      	asrs	r1, r1, #8
 801cae6:	7041      	strb	r1, [r0, #1]
 801cae8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801caec:	f890 c002 	ldrb.w	ip, [r0, #2]
 801caf0:	fb1c f303 	smulbb	r3, ip, r3
 801caf4:	fb01 3606 	mla	r6, r1, r6, r3
 801caf8:	b2b6      	uxth	r6, r6
 801cafa:	1c73      	adds	r3, r6, #1
 801cafc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801cb00:	1236      	asrs	r6, r6, #8
 801cb02:	7086      	strb	r6, [r0, #2]
 801cb04:	e7ca      	b.n	801ca9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb08:	4428      	add	r0, r5
 801cb0a:	441f      	add	r7, r3
 801cb0c:	e7a8      	b.n	801ca60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801cb0e:	4b03      	ldr	r3, [pc, #12]	; (801cb1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801cb10:	6818      	ldr	r0, [r3, #0]
 801cb12:	6803      	ldr	r3, [r0, #0]
 801cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb16:	4798      	blx	r3
 801cb18:	e782      	b.n	801ca20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801cb1a:	bf00      	nop
 801cb1c:	24006a3c 	.word	0x24006a3c
 801cb20:	24006a36 	.word	0x24006a36

0801cb24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb28:	b091      	sub	sp, #68	; 0x44
 801cb2a:	4680      	mov	r8, r0
 801cb2c:	460e      	mov	r6, r1
 801cb2e:	6810      	ldr	r0, [r2, #0]
 801cb30:	6851      	ldr	r1, [r2, #4]
 801cb32:	ad0c      	add	r5, sp, #48	; 0x30
 801cb34:	4614      	mov	r4, r2
 801cb36:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801cb3a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801ccd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801cb3e:	f8df a198 	ldr.w	sl, [pc, #408]	; 801ccd8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801cb42:	c503      	stmia	r5!, {r0, r1}
 801cb44:	6818      	ldr	r0, [r3, #0]
 801cb46:	ad0e      	add	r5, sp, #56	; 0x38
 801cb48:	6859      	ldr	r1, [r3, #4]
 801cb4a:	c503      	stmia	r5!, {r0, r1}
 801cb4c:	a80c      	add	r0, sp, #48	; 0x30
 801cb4e:	f7f9 ff93 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb52:	4621      	mov	r1, r4
 801cb54:	a80e      	add	r0, sp, #56	; 0x38
 801cb56:	f7f9 ffb7 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb5a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801cb5e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801cb62:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801cb66:	f8d9 0000 	ldr.w	r0, [r9]
 801cb6a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cb6e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801cb72:	eb08 0401 	add.w	r4, r8, r1
 801cb76:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801cb7a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801cb7e:	440a      	add	r2, r1
 801cb80:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801cb84:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801cb88:	4413      	add	r3, r2
 801cb8a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801cb8e:	6803      	ldr	r3, [r0, #0]
 801cb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb92:	4798      	blx	r3
 801cb94:	f010 0f80 	tst.w	r0, #128	; 0x80
 801cb98:	f8d9 0000 	ldr.w	r0, [r9]
 801cb9c:	d022      	beq.n	801cbe4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cb9e:	2200      	movs	r2, #0
 801cba0:	f04f 0c01 	mov.w	ip, #1
 801cba4:	6801      	ldr	r1, [r0, #0]
 801cba6:	b2ad      	uxth	r5, r5
 801cba8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801cbac:	e9cd c208 	strd	ip, r2, [sp, #32]
 801cbb0:	f04f 0c0b 	mov.w	ip, #11
 801cbb4:	f8cd c01c 	str.w	ip, [sp, #28]
 801cbb8:	f8ba c000 	ldrh.w	ip, [sl]
 801cbbc:	9704      	str	r7, [sp, #16]
 801cbbe:	9502      	str	r5, [sp, #8]
 801cbc0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801cbc4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801cbc8:	9203      	str	r2, [sp, #12]
 801cbca:	fa1f f288 	uxth.w	r2, r8
 801cbce:	9201      	str	r2, [sp, #4]
 801cbd0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cbd4:	9200      	str	r2, [sp, #0]
 801cbd6:	4632      	mov	r2, r6
 801cbd8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801cbda:	4621      	mov	r1, r4
 801cbdc:	47a8      	blx	r5
 801cbde:	b011      	add	sp, #68	; 0x44
 801cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbe4:	6803      	ldr	r3, [r0, #0]
 801cbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbe8:	4798      	blx	r3
 801cbea:	f8ba 2000 	ldrh.w	r2, [sl]
 801cbee:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801cbf2:	f04f 0e03 	mov.w	lr, #3
 801cbf6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801cbfa:	4355      	muls	r5, r2
 801cbfc:	fa1f fc87 	uxth.w	ip, r7
 801cc00:	fb02 1303 	mla	r3, r2, r3, r1
 801cc04:	eba2 0208 	sub.w	r2, r2, r8
 801cc08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc14:	4418      	add	r0, r3
 801cc16:	920b      	str	r2, [sp, #44]	; 0x2c
 801cc18:	1943      	adds	r3, r0, r5
 801cc1a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801cc1e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801cc22:	eba2 0208 	sub.w	r2, r2, r8
 801cc26:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cc2a:	b2ad      	uxth	r5, r5
 801cc2c:	4298      	cmp	r0, r3
 801cc2e:	d24a      	bcs.n	801ccc6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801cc30:	eb00 0908 	add.w	r9, r0, r8
 801cc34:	4621      	mov	r1, r4
 801cc36:	4548      	cmp	r0, r9
 801cc38:	460c      	mov	r4, r1
 801cc3a:	d240      	bcs.n	801ccbe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801cc3c:	f04f 0a04 	mov.w	sl, #4
 801cc40:	7824      	ldrb	r4, [r4, #0]
 801cc42:	2fff      	cmp	r7, #255	; 0xff
 801cc44:	f101 0101 	add.w	r1, r1, #1
 801cc48:	fb1e a404 	smlabb	r4, lr, r4, sl
 801cc4c:	eb06 0a04 	add.w	sl, r6, r4
 801cc50:	f816 b004 	ldrb.w	fp, [r6, r4]
 801cc54:	d02b      	beq.n	801ccae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801cc56:	7804      	ldrb	r4, [r0, #0]
 801cc58:	fb14 f405 	smulbb	r4, r4, r5
 801cc5c:	fb0b 440c 	mla	r4, fp, ip, r4
 801cc60:	b2a4      	uxth	r4, r4
 801cc62:	f104 0b01 	add.w	fp, r4, #1
 801cc66:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801cc6a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cc6e:	fb1b fb05 	smulbb	fp, fp, r5
 801cc72:	1224      	asrs	r4, r4, #8
 801cc74:	7004      	strb	r4, [r0, #0]
 801cc76:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801cc7a:	fb04 b40c 	mla	r4, r4, ip, fp
 801cc7e:	b2a4      	uxth	r4, r4
 801cc80:	f104 0b01 	add.w	fp, r4, #1
 801cc84:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801cc88:	1224      	asrs	r4, r4, #8
 801cc8a:	7044      	strb	r4, [r0, #1]
 801cc8c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801cc90:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cc94:	fb1a fa05 	smulbb	sl, sl, r5
 801cc98:	fb04 a40c 	mla	r4, r4, ip, sl
 801cc9c:	b2a4      	uxth	r4, r4
 801cc9e:	f104 0a01 	add.w	sl, r4, #1
 801cca2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cca6:	1224      	asrs	r4, r4, #8
 801cca8:	7084      	strb	r4, [r0, #2]
 801ccaa:	3003      	adds	r0, #3
 801ccac:	e7c3      	b.n	801cc36 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801ccae:	f880 b000 	strb.w	fp, [r0]
 801ccb2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ccb6:	7044      	strb	r4, [r0, #1]
 801ccb8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ccbc:	e7f4      	b.n	801cca8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801ccbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ccc0:	4420      	add	r0, r4
 801ccc2:	188c      	adds	r4, r1, r2
 801ccc4:	e7b2      	b.n	801cc2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801ccc6:	4b03      	ldr	r3, [pc, #12]	; (801ccd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801ccc8:	6818      	ldr	r0, [r3, #0]
 801ccca:	6803      	ldr	r3, [r0, #0]
 801cccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccce:	4798      	blx	r3
 801ccd0:	e785      	b.n	801cbde <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801ccd2:	bf00      	nop
 801ccd4:	24006a3c 	.word	0x24006a3c
 801ccd8:	24006a36 	.word	0x24006a36

0801ccdc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ccdc:	b4f0      	push	{r4, r5, r6, r7}
 801ccde:	460c      	mov	r4, r1
 801cce0:	4611      	mov	r1, r2
 801cce2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cce6:	461a      	mov	r2, r3
 801cce8:	780f      	ldrb	r7, [r1, #0]
 801ccea:	9b04      	ldr	r3, [sp, #16]
 801ccec:	784e      	ldrb	r6, [r1, #1]
 801ccee:	b11f      	cbz	r7, 801ccf8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801ccf0:	2f01      	cmp	r7, #1
 801ccf2:	d01d      	beq.n	801cd30 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801ccf4:	bcf0      	pop	{r4, r5, r6, r7}
 801ccf6:	4770      	bx	lr
 801ccf8:	2e03      	cmp	r6, #3
 801ccfa:	d8fb      	bhi.n	801ccf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ccfc:	e8df f006 	tbb	[pc, r6]
 801cd00:	16140702 	.word	0x16140702
 801cd04:	9504      	str	r5, [sp, #16]
 801cd06:	4620      	mov	r0, r4
 801cd08:	bcf0      	pop	{r4, r5, r6, r7}
 801cd0a:	f7ff be33 	b.w	801c974 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cd0e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801cd10:	2800      	cmp	r0, #0
 801cd12:	d0ef      	beq.n	801ccf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801cd14:	6806      	ldr	r6, [r0, #0]
 801cd16:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801cd1a:	68f5      	ldr	r5, [r6, #12]
 801cd1c:	4613      	mov	r3, r2
 801cd1e:	46ac      	mov	ip, r5
 801cd20:	460a      	mov	r2, r1
 801cd22:	4621      	mov	r1, r4
 801cd24:	bcf0      	pop	{r4, r5, r6, r7}
 801cd26:	4760      	bx	ip
 801cd28:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801cd2a:	e7f1      	b.n	801cd10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801cd2c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801cd2e:	e7ef      	b.n	801cd10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801cd30:	2e03      	cmp	r6, #3
 801cd32:	d8df      	bhi.n	801ccf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801cd34:	e8df f006 	tbb	[pc, r6]
 801cd38:	110f0702 	.word	0x110f0702
 801cd3c:	9504      	str	r5, [sp, #16]
 801cd3e:	4620      	mov	r0, r4
 801cd40:	bcf0      	pop	{r4, r5, r6, r7}
 801cd42:	f7ff beef 	b.w	801cb24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cd46:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	d0d3      	beq.n	801ccf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801cd4c:	6806      	ldr	r6, [r0, #0]
 801cd4e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801cd52:	68b5      	ldr	r5, [r6, #8]
 801cd54:	e7e2      	b.n	801cd1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801cd56:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801cd58:	e7f6      	b.n	801cd48 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801cd5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801cd5c:	e7f4      	b.n	801cd48 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801cd60 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801cd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd64:	4605      	mov	r5, r0
 801cd66:	b08f      	sub	sp, #60	; 0x3c
 801cd68:	460c      	mov	r4, r1
 801cd6a:	461f      	mov	r7, r3
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d052      	beq.n	801ce16 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801cd70:	6808      	ldr	r0, [r1, #0]
 801cd72:	ab0a      	add	r3, sp, #40	; 0x28
 801cd74:	6849      	ldr	r1, [r1, #4]
 801cd76:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801cf40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801cd7a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801cf44 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801cd7e:	c303      	stmia	r3!, {r0, r1}
 801cd80:	6810      	ldr	r0, [r2, #0]
 801cd82:	ab0c      	add	r3, sp, #48	; 0x30
 801cd84:	6851      	ldr	r1, [r2, #4]
 801cd86:	c303      	stmia	r3!, {r0, r1}
 801cd88:	a80a      	add	r0, sp, #40	; 0x28
 801cd8a:	f7f9 fe75 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd8e:	4621      	mov	r1, r4
 801cd90:	a80c      	add	r0, sp, #48	; 0x30
 801cd92:	f7f9 fe99 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd96:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cd9a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cd9e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cda2:	f8d8 0000 	ldr.w	r0, [r8]
 801cda6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdaa:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801cdae:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801cdb2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801cdb6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cdba:	440a      	add	r2, r1
 801cdbc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cdc0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cdc4:	4413      	add	r3, r2
 801cdc6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cdca:	6803      	ldr	r3, [r0, #0]
 801cdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdce:	4798      	blx	r3
 801cdd0:	2fff      	cmp	r7, #255	; 0xff
 801cdd2:	d023      	beq.n	801ce1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801cdd4:	f010 0f04 	tst.w	r0, #4
 801cdd8:	f8d8 0000 	ldr.w	r0, [r8]
 801cddc:	d021      	beq.n	801ce22 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801cdde:	2100      	movs	r1, #0
 801cde0:	f04f 0e01 	mov.w	lr, #1
 801cde4:	f8d0 c000 	ldr.w	ip, [r0]
 801cde8:	b2a4      	uxth	r4, r4
 801cdea:	9106      	str	r1, [sp, #24]
 801cdec:	b2b6      	uxth	r6, r6
 801cdee:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cdf2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801cdf6:	e9cd e107 	strd	lr, r1, [sp, #28]
 801cdfa:	f8b9 e000 	ldrh.w	lr, [r9]
 801cdfe:	9703      	str	r7, [sp, #12]
 801ce00:	9401      	str	r4, [sp, #4]
 801ce02:	9600      	str	r6, [sp, #0]
 801ce04:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ce08:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ce0c:	9102      	str	r1, [sp, #8]
 801ce0e:	4629      	mov	r1, r5
 801ce10:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801ce14:	47a0      	blx	r4
 801ce16:	b00f      	add	sp, #60	; 0x3c
 801ce18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce1c:	f010 0f01 	tst.w	r0, #1
 801ce20:	e7da      	b.n	801cdd8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801ce22:	6803      	ldr	r3, [r0, #0]
 801ce24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce26:	4798      	blx	r3
 801ce28:	f8b9 1000 	ldrh.w	r1, [r9]
 801ce2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ce30:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801ce34:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ce38:	434c      	muls	r4, r1
 801ce3a:	2fff      	cmp	r7, #255	; 0xff
 801ce3c:	fb01 2303 	mla	r3, r1, r3, r2
 801ce40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce44:	eba1 0106 	sub.w	r1, r1, r6
 801ce48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce50:	4418      	add	r0, r3
 801ce52:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ce56:	eba3 0606 	sub.w	r6, r3, r6
 801ce5a:	4404      	add	r4, r0
 801ce5c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801ce60:	d04a      	beq.n	801cef8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801ce62:	43fa      	mvns	r2, r7
 801ce64:	b2bb      	uxth	r3, r7
 801ce66:	b2d7      	uxtb	r7, r2
 801ce68:	42a0      	cmp	r0, r4
 801ce6a:	d263      	bcs.n	801cf34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801ce6c:	eb00 0e0c 	add.w	lr, r0, ip
 801ce70:	4586      	cmp	lr, r0
 801ce72:	f100 0803 	add.w	r8, r0, #3
 801ce76:	d93a      	bls.n	801ceee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801ce78:	f835 2b02 	ldrh.w	r2, [r5], #2
 801ce7c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801ce80:	00d0      	lsls	r0, r2, #3
 801ce82:	fb19 f907 	smulbb	r9, r9, r7
 801ce86:	b2c0      	uxtb	r0, r0
 801ce88:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ce8c:	fb00 9003 	mla	r0, r0, r3, r9
 801ce90:	b280      	uxth	r0, r0
 801ce92:	f100 0901 	add.w	r9, r0, #1
 801ce96:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ce9a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801ce9e:	fb19 f907 	smulbb	r9, r9, r7
 801cea2:	1200      	asrs	r0, r0, #8
 801cea4:	f808 0c03 	strb.w	r0, [r8, #-3]
 801cea8:	10d0      	asrs	r0, r2, #3
 801ceaa:	1212      	asrs	r2, r2, #8
 801ceac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ceb0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ceb4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801ceb8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cebc:	fb00 9003 	mla	r0, r0, r3, r9
 801cec0:	b280      	uxth	r0, r0
 801cec2:	f100 0901 	add.w	r9, r0, #1
 801cec6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ceca:	1200      	asrs	r0, r0, #8
 801cecc:	f808 0c02 	strb.w	r0, [r8, #-2]
 801ced0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801ced4:	fb10 f007 	smulbb	r0, r0, r7
 801ced8:	fb02 0203 	mla	r2, r2, r3, r0
 801cedc:	b292      	uxth	r2, r2
 801cede:	1c50      	adds	r0, r2, #1
 801cee0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cee4:	4640      	mov	r0, r8
 801cee6:	1212      	asrs	r2, r2, #8
 801cee8:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ceec:	e7c0      	b.n	801ce70 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801ceee:	4408      	add	r0, r1
 801cef0:	4435      	add	r5, r6
 801cef2:	e7b9      	b.n	801ce68 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801cef4:	4408      	add	r0, r1
 801cef6:	4435      	add	r5, r6
 801cef8:	42a0      	cmp	r0, r4
 801cefa:	d21b      	bcs.n	801cf34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801cefc:	eb00 070c 	add.w	r7, r0, ip
 801cf00:	42b8      	cmp	r0, r7
 801cf02:	d2f7      	bcs.n	801cef4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801cf04:	f835 3b02 	ldrh.w	r3, [r5], #2
 801cf08:	3003      	adds	r0, #3
 801cf0a:	00da      	lsls	r2, r3, #3
 801cf0c:	b2d2      	uxtb	r2, r2
 801cf0e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cf12:	f800 2c03 	strb.w	r2, [r0, #-3]
 801cf16:	10da      	asrs	r2, r3, #3
 801cf18:	121b      	asrs	r3, r3, #8
 801cf1a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801cf1e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801cf22:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801cf26:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801cf2a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801cf2e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801cf32:	e7e5      	b.n	801cf00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801cf34:	4b02      	ldr	r3, [pc, #8]	; (801cf40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801cf36:	6818      	ldr	r0, [r3, #0]
 801cf38:	6803      	ldr	r3, [r0, #0]
 801cf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf3c:	4798      	blx	r3
 801cf3e:	e76a      	b.n	801ce16 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801cf40:	24006a3c 	.word	0x24006a3c
 801cf44:	24006a36 	.word	0x24006a36

0801cf48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801cf48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf4c:	b08a      	sub	sp, #40	; 0x28
 801cf4e:	460d      	mov	r5, r1
 801cf50:	4604      	mov	r4, r0
 801cf52:	461e      	mov	r6, r3
 801cf54:	6808      	ldr	r0, [r1, #0]
 801cf56:	ab06      	add	r3, sp, #24
 801cf58:	6849      	ldr	r1, [r1, #4]
 801cf5a:	4f5d      	ldr	r7, [pc, #372]	; (801d0d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801cf5c:	c303      	stmia	r3!, {r0, r1}
 801cf5e:	6810      	ldr	r0, [r2, #0]
 801cf60:	ab08      	add	r3, sp, #32
 801cf62:	6851      	ldr	r1, [r2, #4]
 801cf64:	c303      	stmia	r3!, {r0, r1}
 801cf66:	a806      	add	r0, sp, #24
 801cf68:	f7f9 fd86 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf6c:	4629      	mov	r1, r5
 801cf6e:	a808      	add	r0, sp, #32
 801cf70:	f7f9 fdaa 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf74:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cf78:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cf7c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cf80:	6838      	ldr	r0, [r7, #0]
 801cf82:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf86:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801cf8a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801cf8e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cf92:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801cf96:	440a      	add	r2, r1
 801cf98:	f8ad 2020 	strh.w	r2, [sp, #32]
 801cf9c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cfa0:	4413      	add	r3, r2
 801cfa2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cfa6:	6803      	ldr	r3, [r0, #0]
 801cfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfaa:	4798      	blx	r3
 801cfac:	2eff      	cmp	r6, #255	; 0xff
 801cfae:	d119      	bne.n	801cfe4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801cfb0:	f010 0f20 	tst.w	r0, #32
 801cfb4:	6838      	ldr	r0, [r7, #0]
 801cfb6:	d018      	beq.n	801cfea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801cfb8:	b2ad      	uxth	r5, r5
 801cfba:	2700      	movs	r7, #0
 801cfbc:	6801      	ldr	r1, [r0, #0]
 801cfbe:	9501      	str	r5, [sp, #4]
 801cfc0:	fa1f f588 	uxth.w	r5, r8
 801cfc4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cfc8:	9500      	str	r5, [sp, #0]
 801cfca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cfce:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801cfd2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801cfd6:	9602      	str	r6, [sp, #8]
 801cfd8:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801cfda:	4621      	mov	r1, r4
 801cfdc:	47a8      	blx	r5
 801cfde:	b00a      	add	sp, #40	; 0x28
 801cfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cfe8:	e7e4      	b.n	801cfb4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801cfea:	6803      	ldr	r3, [r0, #0]
 801cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfee:	4798      	blx	r3
 801cff0:	4b38      	ldr	r3, [pc, #224]	; (801d0d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801cff2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cff6:	f8b3 c000 	ldrh.w	ip, [r3]
 801cffa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cffe:	fb0c f505 	mul.w	r5, ip, r5
 801d002:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801d006:	fb0c 2303 	mla	r3, ip, r3, r2
 801d00a:	ebac 0c08 	sub.w	ip, ip, r8
 801d00e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d012:	ebae 0e08 	sub.w	lr, lr, r8
 801d016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d01a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d01e:	4418      	add	r0, r3
 801d020:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801d024:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d028:	4405      	add	r5, r0
 801d02a:	42a8      	cmp	r0, r5
 801d02c:	d24a      	bcs.n	801d0c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801d02e:	eb00 0803 	add.w	r8, r0, r3
 801d032:	4540      	cmp	r0, r8
 801d034:	d243      	bcs.n	801d0be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801d036:	78e2      	ldrb	r2, [r4, #3]
 801d038:	b15a      	cbz	r2, 801d052 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d03a:	2aff      	cmp	r2, #255	; 0xff
 801d03c:	f894 9000 	ldrb.w	r9, [r4]
 801d040:	d10a      	bne.n	801d058 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801d042:	2eff      	cmp	r6, #255	; 0xff
 801d044:	d108      	bne.n	801d058 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801d046:	f880 9000 	strb.w	r9, [r0]
 801d04a:	7862      	ldrb	r2, [r4, #1]
 801d04c:	7042      	strb	r2, [r0, #1]
 801d04e:	78a2      	ldrb	r2, [r4, #2]
 801d050:	7082      	strb	r2, [r0, #2]
 801d052:	3003      	adds	r0, #3
 801d054:	3404      	adds	r4, #4
 801d056:	e7ec      	b.n	801d032 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801d058:	4372      	muls	r2, r6
 801d05a:	1c51      	adds	r1, r2, #1
 801d05c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801d060:	1209      	asrs	r1, r1, #8
 801d062:	fa1f fa81 	uxth.w	sl, r1
 801d066:	43c9      	mvns	r1, r1
 801d068:	fb19 f90a 	smulbb	r9, r9, sl
 801d06c:	b2ca      	uxtb	r2, r1
 801d06e:	7801      	ldrb	r1, [r0, #0]
 801d070:	fb01 9902 	mla	r9, r1, r2, r9
 801d074:	fa1f f989 	uxth.w	r9, r9
 801d078:	f109 0101 	add.w	r1, r9, #1
 801d07c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801d080:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d084:	f880 9000 	strb.w	r9, [r0]
 801d088:	f890 9001 	ldrb.w	r9, [r0, #1]
 801d08c:	7861      	ldrb	r1, [r4, #1]
 801d08e:	fb19 f902 	smulbb	r9, r9, r2
 801d092:	fb01 910a 	mla	r1, r1, sl, r9
 801d096:	b289      	uxth	r1, r1
 801d098:	f101 0901 	add.w	r9, r1, #1
 801d09c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801d0a0:	1209      	asrs	r1, r1, #8
 801d0a2:	7041      	strb	r1, [r0, #1]
 801d0a4:	7881      	ldrb	r1, [r0, #2]
 801d0a6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801d0aa:	fb11 f202 	smulbb	r2, r1, r2
 801d0ae:	fb09 220a 	mla	r2, r9, sl, r2
 801d0b2:	b292      	uxth	r2, r2
 801d0b4:	1c51      	adds	r1, r2, #1
 801d0b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d0ba:	1212      	asrs	r2, r2, #8
 801d0bc:	e7c8      	b.n	801d050 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801d0be:	4460      	add	r0, ip
 801d0c0:	4474      	add	r4, lr
 801d0c2:	e7b2      	b.n	801d02a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801d0c4:	6838      	ldr	r0, [r7, #0]
 801d0c6:	6803      	ldr	r3, [r0, #0]
 801d0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0ca:	4798      	blx	r3
 801d0cc:	e787      	b.n	801cfde <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801d0ce:	bf00      	nop
 801d0d0:	24006a3c 	.word	0x24006a3c
 801d0d4:	24006a36 	.word	0x24006a36

0801d0d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d0dc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d0e0:	4607      	mov	r7, r0
 801d0e2:	460c      	mov	r4, r1
 801d0e4:	4692      	mov	sl, r2
 801d0e6:	4699      	mov	r9, r3
 801d0e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d0ea:	b31d      	cbz	r5, 801d134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d0ec:	4608      	mov	r0, r1
 801d0ee:	f7fc fbdd 	bl	80198ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d0f2:	4680      	mov	r8, r0
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	f7fc fc0d 	bl	8019914 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d0fa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d0fe:	4620      	mov	r0, r4
 801d100:	f8ad a008 	strh.w	sl, [sp, #8]
 801d104:	f8ad 900a 	strh.w	r9, [sp, #10]
 801d108:	f8ad 800c 	strh.w	r8, [sp, #12]
 801d10c:	f7fc fcba 	bl	8019a84 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d110:	280b      	cmp	r0, #11
 801d112:	d80f      	bhi.n	801d134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d114:	e8df f000 	tbb	[pc, r0]
 801d118:	0e062a21 	.word	0x0e062a21
 801d11c:	0e0e0e0e 	.word	0x0e0e0e0e
 801d120:	110e0e0e 	.word	0x110e0e0e
 801d124:	4620      	mov	r0, r4
 801d126:	f7fc fc29 	bl	801997c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d12a:	462b      	mov	r3, r5
 801d12c:	4632      	mov	r2, r6
 801d12e:	a902      	add	r1, sp, #8
 801d130:	f7ff ff0a 	bl	801cf48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d134:	b004      	add	sp, #16
 801d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d13a:	4620      	mov	r0, r4
 801d13c:	f7fc fc1e 	bl	801997c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d140:	4680      	mov	r8, r0
 801d142:	4620      	mov	r0, r4
 801d144:	f7fc fc4a 	bl	80199dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d148:	ab02      	add	r3, sp, #8
 801d14a:	4602      	mov	r2, r0
 801d14c:	4641      	mov	r1, r8
 801d14e:	4638      	mov	r0, r7
 801d150:	e9cd 6500 	strd	r6, r5, [sp]
 801d154:	f7ff fdc2 	bl	801ccdc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d158:	e7ec      	b.n	801d134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d15a:	4620      	mov	r0, r4
 801d15c:	f7fc fc0e 	bl	801997c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d160:	462b      	mov	r3, r5
 801d162:	4632      	mov	r2, r6
 801d164:	a902      	add	r1, sp, #8
 801d166:	f7ff fdfb 	bl	801cd60 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d16a:	e7e3      	b.n	801d134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	4620      	mov	r0, r4
 801d170:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801d174:	f7fc fc02 	bl	801997c <_ZNK8touchgfx6Bitmap7getDataEv>
 801d178:	2300      	movs	r3, #0
 801d17a:	4601      	mov	r1, r0
 801d17c:	aa02      	add	r2, sp, #8
 801d17e:	4638      	mov	r0, r7
 801d180:	e9cd 5300 	strd	r5, r3, [sp]
 801d184:	4633      	mov	r3, r6
 801d186:	47c0      	blx	r8
 801d188:	e7d4      	b.n	801d134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801d18a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d18a:	b4f0      	push	{r4, r5, r6, r7}
 801d18c:	4616      	mov	r6, r2
 801d18e:	461c      	mov	r4, r3
 801d190:	460d      	mov	r5, r1
 801d192:	9a04      	ldr	r2, [sp, #16]
 801d194:	2e01      	cmp	r6, #1
 801d196:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d19a:	d00e      	beq.n	801d1ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801d19c:	d303      	bcc.n	801d1a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801d19e:	2e02      	cmp	r6, #2
 801d1a0:	d006      	beq.n	801d1b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801d1a2:	bcf0      	pop	{r4, r5, r6, r7}
 801d1a4:	4770      	bx	lr
 801d1a6:	4621      	mov	r1, r4
 801d1a8:	4628      	mov	r0, r5
 801d1aa:	bcf0      	pop	{r4, r5, r6, r7}
 801d1ac:	f7ff bdd8 	b.w	801cd60 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d1b0:	4621      	mov	r1, r4
 801d1b2:	4628      	mov	r0, r5
 801d1b4:	bcf0      	pop	{r4, r5, r6, r7}
 801d1b6:	f7ff bec7 	b.w	801cf48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d1ba:	6805      	ldr	r5, [r0, #0]
 801d1bc:	2600      	movs	r6, #0
 801d1be:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d1c2:	68ed      	ldr	r5, [r5, #12]
 801d1c4:	4613      	mov	r3, r2
 801d1c6:	4622      	mov	r2, r4
 801d1c8:	46ac      	mov	ip, r5
 801d1ca:	bcf0      	pop	{r4, r5, r6, r7}
 801d1cc:	4760      	bx	ip
	...

0801d1d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d1d0:	b160      	cbz	r0, 801d1ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801d1d2:	2903      	cmp	r1, #3
 801d1d4:	d818      	bhi.n	801d208 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d1d6:	e8df f001 	tbb	[pc, r1]
 801d1da:	1902      	.short	0x1902
 801d1dc:	1b06      	.short	0x1b06
 801d1de:	4b0e      	ldr	r3, [pc, #56]	; (801d218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d1e0:	8818      	ldrh	r0, [r3, #0]
 801d1e2:	4240      	negs	r0, r0
 801d1e4:	4770      	bx	lr
 801d1e6:	4b0c      	ldr	r3, [pc, #48]	; (801d218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d1e8:	8818      	ldrh	r0, [r3, #0]
 801d1ea:	4770      	bx	lr
 801d1ec:	2903      	cmp	r1, #3
 801d1ee:	d80b      	bhi.n	801d208 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d1f0:	a301      	add	r3, pc, #4	; (adr r3, 801d1f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801d1f2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d1f6:	bf00      	nop
 801d1f8:	0801d20d 	.word	0x0801d20d
 801d1fc:	0801d1e7 	.word	0x0801d1e7
 801d200:	0801d211 	.word	0x0801d211
 801d204:	0801d1df 	.word	0x0801d1df
 801d208:	2000      	movs	r0, #0
 801d20a:	4770      	bx	lr
 801d20c:	2001      	movs	r0, #1
 801d20e:	4770      	bx	lr
 801d210:	f04f 30ff 	mov.w	r0, #4294967295
 801d214:	4770      	bx	lr
 801d216:	bf00      	nop
 801d218:	24006a36 	.word	0x24006a36

0801d21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d21c:	b160      	cbz	r0, 801d238 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801d21e:	2903      	cmp	r1, #3
 801d220:	d818      	bhi.n	801d254 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d222:	e8df f001 	tbb	[pc, r1]
 801d226:	0219      	.short	0x0219
 801d228:	051b      	.short	0x051b
 801d22a:	4b0e      	ldr	r3, [pc, #56]	; (801d264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d22c:	8818      	ldrh	r0, [r3, #0]
 801d22e:	4770      	bx	lr
 801d230:	4b0c      	ldr	r3, [pc, #48]	; (801d264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d232:	8818      	ldrh	r0, [r3, #0]
 801d234:	4240      	negs	r0, r0
 801d236:	4770      	bx	lr
 801d238:	2903      	cmp	r1, #3
 801d23a:	d80b      	bhi.n	801d254 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d23c:	a301      	add	r3, pc, #4	; (adr r3, 801d244 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801d23e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d242:	bf00      	nop
 801d244:	0801d22b 	.word	0x0801d22b
 801d248:	0801d25d 	.word	0x0801d25d
 801d24c:	0801d231 	.word	0x0801d231
 801d250:	0801d259 	.word	0x0801d259
 801d254:	2000      	movs	r0, #0
 801d256:	4770      	bx	lr
 801d258:	2001      	movs	r0, #1
 801d25a:	4770      	bx	lr
 801d25c:	f04f 30ff 	mov.w	r0, #4294967295
 801d260:	4770      	bx	lr
 801d262:	bf00      	nop
 801d264:	24006a36 	.word	0x24006a36

0801d268 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d26c:	b097      	sub	sp, #92	; 0x5c
 801d26e:	910b      	str	r1, [sp, #44]	; 0x2c
 801d270:	a912      	add	r1, sp, #72	; 0x48
 801d272:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801d276:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801d27a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801d27e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801d282:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801d286:	e881 000c 	stmia.w	r1, {r2, r3}
 801d28a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801d28e:	930a      	str	r3, [sp, #40]	; 0x28
 801d290:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d294:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801d298:	9311      	str	r3, [sp, #68]	; 0x44
 801d29a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801d29e:	798d      	ldrb	r5, [r1, #6]
 801d2a0:	930c      	str	r3, [sp, #48]	; 0x30
 801d2a2:	7b4b      	ldrb	r3, [r1, #13]
 801d2a4:	0158      	lsls	r0, r3, #5
 801d2a6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d2aa:	4328      	orrs	r0, r5
 801d2ac:	9009      	str	r0, [sp, #36]	; 0x24
 801d2ae:	f000 817c 	beq.w	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d2b2:	011b      	lsls	r3, r3, #4
 801d2b4:	79c8      	ldrb	r0, [r1, #7]
 801d2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2ba:	4303      	orrs	r3, r0
 801d2bc:	930e      	str	r3, [sp, #56]	; 0x38
 801d2be:	f000 8174 	beq.w	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d2c2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d2c6:	b29b      	uxth	r3, r3
 801d2c8:	2f00      	cmp	r7, #0
 801d2ca:	f000 8116 	beq.w	801d4fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801d2ce:	1aff      	subs	r7, r7, r3
 801d2d0:	b2bf      	uxth	r7, r7
 801d2d2:	043b      	lsls	r3, r7, #16
 801d2d4:	d502      	bpl.n	801d2dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d2d6:	1bf6      	subs	r6, r6, r7
 801d2d8:	2700      	movs	r7, #0
 801d2da:	b236      	sxth	r6, r6
 801d2dc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d2e0:	a812      	add	r0, sp, #72	; 0x48
 801d2e2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d2e6:	428e      	cmp	r6, r1
 801d2e8:	b28b      	uxth	r3, r1
 801d2ea:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d2ee:	bfbf      	itttt	lt
 801d2f0:	18ff      	addlt	r7, r7, r3
 801d2f2:	1bbe      	sublt	r6, r7, r6
 801d2f4:	b2b7      	uxthlt	r7, r6
 801d2f6:	460e      	movlt	r6, r1
 801d2f8:	8891      	ldrh	r1, [r2, #4]
 801d2fa:	440b      	add	r3, r1
 801d2fc:	4631      	mov	r1, r6
 801d2fe:	b21b      	sxth	r3, r3
 801d300:	9310      	str	r3, [sp, #64]	; 0x40
 801d302:	88d3      	ldrh	r3, [r2, #6]
 801d304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d306:	449a      	add	sl, r3
 801d308:	fa0f f38a 	sxth.w	r3, sl
 801d30c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801d310:	930f      	str	r3, [sp, #60]	; 0x3c
 801d312:	4bb5      	ldr	r3, [pc, #724]	; (801d5e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801d314:	f893 b000 	ldrb.w	fp, [r3]
 801d318:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d31c:	f1dc 0300 	rsbs	r3, ip, #0
 801d320:	eb43 030c 	adc.w	r3, r3, ip
 801d324:	930d      	str	r3, [sp, #52]	; 0x34
 801d326:	464b      	mov	r3, r9
 801d328:	f7f9 fa1b 	bl	8016762 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d32c:	4631      	mov	r1, r6
 801d32e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801d332:	464b      	mov	r3, r9
 801d334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d336:	a812      	add	r0, sp, #72	; 0x48
 801d338:	f7f9 fa30 	bl	801679c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d33c:	a916      	add	r1, sp, #88	; 0x58
 801d33e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d342:	a815      	add	r0, sp, #84	; 0x54
 801d344:	f7f9 fb56 	bl	80169f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d348:	f1b9 0f00 	cmp.w	r9, #0
 801d34c:	f040 80d8 	bne.w	801d500 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801d350:	f1bb 0f01 	cmp.w	fp, #1
 801d354:	f040 80dc 	bne.w	801d510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801d358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d35a:	b153      	cbz	r3, 801d372 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801d35c:	2508      	movs	r5, #8
 801d35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d360:	fb95 f3f8 	sdiv	r3, r5, r8
 801d364:	1e5d      	subs	r5, r3, #1
 801d366:	4415      	add	r5, r2
 801d368:	fb95 f5f3 	sdiv	r5, r5, r3
 801d36c:	fb15 f503 	smulbb	r5, r5, r3
 801d370:	b2ad      	uxth	r5, r5
 801d372:	b907      	cbnz	r7, 801d376 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801d374:	b16c      	cbz	r4, 801d392 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801d376:	fb04 7305 	mla	r3, r4, r5, r7
 801d37a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d37c:	ebaa 0a04 	sub.w	sl, sl, r4
 801d380:	fb08 f303 	mul.w	r3, r8, r3
 801d384:	fa1f fa8a 	uxth.w	sl, sl
 801d388:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801d38c:	f003 0407 	and.w	r4, r3, #7
 801d390:	9226      	str	r2, [sp, #152]	; 0x98
 801d392:	4649      	mov	r1, r9
 801d394:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d396:	f7ff ff1b 	bl	801d1d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d39a:	4683      	mov	fp, r0
 801d39c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d39e:	f7ff ff3d 	bl	801d21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3a6:	4681      	mov	r9, r0
 801d3a8:	1a9b      	subs	r3, r3, r2
 801d3aa:	459a      	cmp	sl, r3
 801d3ac:	bfa8      	it	ge
 801d3ae:	469a      	movge	sl, r3
 801d3b0:	f1ba 0f00 	cmp.w	sl, #0
 801d3b4:	f340 80f9 	ble.w	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d3b8:	1bf6      	subs	r6, r6, r7
 801d3ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3bc:	1b9e      	subs	r6, r3, r6
 801d3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3c0:	429e      	cmp	r6, r3
 801d3c2:	bfd4      	ite	le
 801d3c4:	ebc7 0706 	rsble	r7, r7, r6
 801d3c8:	ebc7 0703 	rsbgt	r7, r7, r3
 801d3cc:	2f00      	cmp	r7, #0
 801d3ce:	f340 80ec 	ble.w	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d3d2:	1bed      	subs	r5, r5, r7
 801d3d4:	fb08 f305 	mul.w	r3, r8, r5
 801d3d8:	930d      	str	r3, [sp, #52]	; 0x34
 801d3da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d3e0:	930e      	str	r3, [sp, #56]	; 0x38
 801d3e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801d3ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3ec:	b2db      	uxtb	r3, r3
 801d3ee:	9310      	str	r3, [sp, #64]	; 0x40
 801d3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	f040 80de 	bne.w	801d5b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801d3f8:	4b7c      	ldr	r3, [pc, #496]	; (801d5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801d3fa:	6818      	ldr	r0, [r3, #0]
 801d3fc:	6803      	ldr	r3, [r0, #0]
 801d3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d400:	4798      	blx	r3
 801d402:	2301      	movs	r3, #1
 801d404:	4a7a      	ldr	r2, [pc, #488]	; (801d5f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801d406:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801d40a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801d40e:	fa03 f308 	lsl.w	r3, r3, r8
 801d412:	8811      	ldrh	r1, [r2, #0]
 801d414:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d418:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801d41c:	3b01      	subs	r3, #1
 801d41e:	fb06 bb07 	mla	fp, r6, r7, fp
 801d422:	b2db      	uxtb	r3, r3
 801d424:	930a      	str	r3, [sp, #40]	; 0x28
 801d426:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801d42a:	fb01 2303 	mla	r3, r1, r3, r2
 801d42e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d432:	18c3      	adds	r3, r0, r3
 801d434:	9309      	str	r3, [sp, #36]	; 0x24
 801d436:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d438:	781a      	ldrb	r2, [r3, #0]
 801d43a:	4122      	asrs	r2, r4
 801d43c:	b2d2      	uxtb	r2, r2
 801d43e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801d442:	f0c0 80d7 	bcc.w	801d5f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801d446:	46be      	mov	lr, r7
 801d448:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d44a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801d44e:	f0c0 80ba 	bcc.w	801d5c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801d452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d454:	4013      	ands	r3, r2
 801d456:	d041      	beq.n	801d4dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801d458:	20ff      	movs	r0, #255	; 0xff
 801d45a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d45c:	fb90 f5f5 	sdiv	r5, r0, r5
 801d460:	436b      	muls	r3, r5
 801d462:	2bfe      	cmp	r3, #254	; 0xfe
 801d464:	dd03      	ble.n	801d46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801d466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d468:	4285      	cmp	r5, r0
 801d46a:	f000 80a5 	beq.w	801d5b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801d46e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d470:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d472:	fb15 f303 	smulbb	r3, r5, r3
 801d476:	b29b      	uxth	r3, r3
 801d478:	1c5d      	adds	r5, r3, #1
 801d47a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d47e:	780d      	ldrb	r5, [r1, #0]
 801d480:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d484:	fa1f fc83 	uxth.w	ip, r3
 801d488:	43db      	mvns	r3, r3
 801d48a:	fb10 f90c 	smulbb	r9, r0, ip
 801d48e:	b2db      	uxtb	r3, r3
 801d490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d492:	fb05 9503 	mla	r5, r5, r3, r9
 801d496:	b2ad      	uxth	r5, r5
 801d498:	f105 0901 	add.w	r9, r5, #1
 801d49c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d4a0:	fb10 f90c 	smulbb	r9, r0, ip
 801d4a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d4a6:	122d      	asrs	r5, r5, #8
 801d4a8:	fb10 fc0c 	smulbb	ip, r0, ip
 801d4ac:	700d      	strb	r5, [r1, #0]
 801d4ae:	784d      	ldrb	r5, [r1, #1]
 801d4b0:	fb05 9503 	mla	r5, r5, r3, r9
 801d4b4:	b2ad      	uxth	r5, r5
 801d4b6:	f105 0901 	add.w	r9, r5, #1
 801d4ba:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d4be:	122d      	asrs	r5, r5, #8
 801d4c0:	704d      	strb	r5, [r1, #1]
 801d4c2:	788d      	ldrb	r5, [r1, #2]
 801d4c4:	fb05 cc03 	mla	ip, r5, r3, ip
 801d4c8:	fa1f fc8c 	uxth.w	ip, ip
 801d4cc:	f10c 0301 	add.w	r3, ip, #1
 801d4d0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d4d4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4d8:	f881 c002 	strb.w	ip, [r1, #2]
 801d4dc:	4444      	add	r4, r8
 801d4de:	4431      	add	r1, r6
 801d4e0:	b2a4      	uxth	r4, r4
 801d4e2:	2c07      	cmp	r4, #7
 801d4e4:	bf89      	itett	hi
 801d4e6:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801d4e8:	fa42 f208 	asrls.w	r2, r2, r8
 801d4ec:	2400      	movhi	r4, #0
 801d4ee:	785a      	ldrbhi	r2, [r3, #1]
 801d4f0:	bf8a      	itet	hi
 801d4f2:	3301      	addhi	r3, #1
 801d4f4:	b2d2      	uxtbls	r2, r2
 801d4f6:	9326      	strhi	r3, [sp, #152]	; 0x98
 801d4f8:	e7a7      	b.n	801d44a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801d4fa:	441e      	add	r6, r3
 801d4fc:	b236      	sxth	r6, r6
 801d4fe:	e6ed      	b.n	801d2dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d500:	f1b9 0f01 	cmp.w	r9, #1
 801d504:	f47f af28 	bne.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d508:	f1bb 0f01 	cmp.w	fp, #1
 801d50c:	f47f af24 	bne.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d510:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801d5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801d514:	f8db 0000 	ldr.w	r0, [fp]
 801d518:	6803      	ldr	r3, [r0, #0]
 801d51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d51c:	4798      	blx	r3
 801d51e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801d522:	465a      	mov	r2, fp
 801d524:	d006      	beq.n	801d534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801d526:	f1b8 0f04 	cmp.w	r8, #4
 801d52a:	d141      	bne.n	801d5b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801d52c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d52e:	3300      	adds	r3, #0
 801d530:	bf18      	it	ne
 801d532:	2301      	movne	r3, #1
 801d534:	0580      	lsls	r0, r0, #22
 801d536:	d566      	bpl.n	801d606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801d538:	f1b8 0f08 	cmp.w	r8, #8
 801d53c:	d163      	bne.n	801d606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801d53e:	2b00      	cmp	r3, #0
 801d540:	bf0c      	ite	eq
 801d542:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801d546:	f44f 7180 	movne.w	r1, #256	; 0x100
 801d54a:	2f00      	cmp	r7, #0
 801d54c:	f47f af04 	bne.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d550:	2c00      	cmp	r4, #0
 801d552:	f47f af01 	bne.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d558:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d55a:	18f3      	adds	r3, r6, r3
 801d55c:	4283      	cmp	r3, r0
 801d55e:	f73f aefb 	bgt.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d562:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d566:	4403      	add	r3, r0
 801d568:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d56a:	4283      	cmp	r3, r0
 801d56c:	f73f aef4 	bgt.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d570:	f1b8 0f08 	cmp.w	r8, #8
 801d574:	6810      	ldr	r0, [r2, #0]
 801d576:	f04f 0600 	mov.w	r6, #0
 801d57a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801d57e:	bf18      	it	ne
 801d580:	3501      	addne	r5, #1
 801d582:	6804      	ldr	r4, [r0, #0]
 801d584:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801d588:	bf18      	it	ne
 801d58a:	f025 0501 	bicne.w	r5, r5, #1
 801d58e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801d592:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d594:	bf18      	it	ne
 801d596:	b2ad      	uxthne	r5, r5
 801d598:	9104      	str	r1, [sp, #16]
 801d59a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d59c:	e9cd 5a00 	strd	r5, sl, [sp]
 801d5a0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801d5a4:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d5a6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801d5a8:	47a0      	blx	r4
 801d5aa:	b017      	add	sp, #92	; 0x5c
 801d5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	e7bf      	b.n	801d534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801d5b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d5b6:	e724      	b.n	801d402 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801d5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5ba:	700b      	strb	r3, [r1, #0]
 801d5bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d5be:	704b      	strb	r3, [r1, #1]
 801d5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5c2:	708b      	strb	r3, [r1, #2]
 801d5c4:	e78a      	b.n	801d4dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801d5c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5c8:	b153      	cbz	r3, 801d5e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d5ca:	441c      	add	r4, r3
 801d5cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d5ce:	b2a4      	uxth	r4, r4
 801d5d0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d5d4:	f004 0407 	and.w	r4, r4, #7
 801d5d8:	781a      	ldrb	r2, [r3, #0]
 801d5da:	9326      	str	r3, [sp, #152]	; 0x98
 801d5dc:	4122      	asrs	r2, r4
 801d5de:	b2d2      	uxtb	r2, r2
 801d5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5e2:	445b      	add	r3, fp
 801d5e4:	9309      	str	r3, [sp, #36]	; 0x24
 801d5e6:	e72a      	b.n	801d43e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801d5e8:	24006a34 	.word	0x24006a34
 801d5ec:	24006a3c 	.word	0x24006a3c
 801d5f0:	24006a36 	.word	0x24006a36
 801d5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d1d7      	bne.n	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d5fa:	4b06      	ldr	r3, [pc, #24]	; (801d614 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801d5fc:	6818      	ldr	r0, [r3, #0]
 801d5fe:	6803      	ldr	r3, [r0, #0]
 801d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d602:	4798      	blx	r3
 801d604:	e7d1      	b.n	801d5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d606:	2b00      	cmp	r3, #0
 801d608:	f43f aea6 	beq.w	801d358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d60c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d610:	e79b      	b.n	801d54a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801d612:	bf00      	nop
 801d614:	24006a3c 	.word	0x24006a3c

0801d618 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d618:	b538      	push	{r3, r4, r5, lr}
 801d61a:	4c15      	ldr	r4, [pc, #84]	; (801d670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d61c:	4605      	mov	r5, r0
 801d61e:	7823      	ldrb	r3, [r4, #0]
 801d620:	f3bf 8f5b 	dmb	ish
 801d624:	07da      	lsls	r2, r3, #31
 801d626:	d40b      	bmi.n	801d640 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d628:	4620      	mov	r0, r4
 801d62a:	f005 fb4c 	bl	8022cc6 <__cxa_guard_acquire>
 801d62e:	b138      	cbz	r0, 801d640 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d630:	4620      	mov	r0, r4
 801d632:	f005 fb54 	bl	8022cde <__cxa_guard_release>
 801d636:	4a0f      	ldr	r2, [pc, #60]	; (801d674 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d638:	490f      	ldr	r1, [pc, #60]	; (801d678 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d63a:	4810      	ldr	r0, [pc, #64]	; (801d67c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d63c:	f005 fb3c 	bl	8022cb8 <__aeabi_atexit>
 801d640:	4c0f      	ldr	r4, [pc, #60]	; (801d680 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d642:	7823      	ldrb	r3, [r4, #0]
 801d644:	f3bf 8f5b 	dmb	ish
 801d648:	07db      	lsls	r3, r3, #31
 801d64a:	d40b      	bmi.n	801d664 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d64c:	4620      	mov	r0, r4
 801d64e:	f005 fb3a 	bl	8022cc6 <__cxa_guard_acquire>
 801d652:	b138      	cbz	r0, 801d664 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d654:	4620      	mov	r0, r4
 801d656:	f005 fb42 	bl	8022cde <__cxa_guard_release>
 801d65a:	4a06      	ldr	r2, [pc, #24]	; (801d674 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d65c:	4909      	ldr	r1, [pc, #36]	; (801d684 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d65e:	480a      	ldr	r0, [pc, #40]	; (801d688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d660:	f005 fb2a 	bl	8022cb8 <__aeabi_atexit>
 801d664:	4b05      	ldr	r3, [pc, #20]	; (801d67c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d666:	612b      	str	r3, [r5, #16]
 801d668:	4b07      	ldr	r3, [pc, #28]	; (801d688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d66a:	616b      	str	r3, [r5, #20]
 801d66c:	bd38      	pop	{r3, r4, r5, pc}
 801d66e:	bf00      	nop
 801d670:	24006b14 	.word	0x24006b14
 801d674:	24000000 	.word	0x24000000
 801d678:	0801b461 	.word	0x0801b461
 801d67c:	2400009c 	.word	0x2400009c
 801d680:	24006b18 	.word	0x24006b18
 801d684:	0801b45f 	.word	0x0801b45f
 801d688:	240000a0 	.word	0x240000a0

0801d68c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d68c:	b538      	push	{r3, r4, r5, lr}
 801d68e:	4c15      	ldr	r4, [pc, #84]	; (801d6e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d690:	4605      	mov	r5, r0
 801d692:	7823      	ldrb	r3, [r4, #0]
 801d694:	f3bf 8f5b 	dmb	ish
 801d698:	07da      	lsls	r2, r3, #31
 801d69a:	d40b      	bmi.n	801d6b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d69c:	4620      	mov	r0, r4
 801d69e:	f005 fb12 	bl	8022cc6 <__cxa_guard_acquire>
 801d6a2:	b138      	cbz	r0, 801d6b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	f005 fb1a 	bl	8022cde <__cxa_guard_release>
 801d6aa:	4a0f      	ldr	r2, [pc, #60]	; (801d6e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d6ac:	490f      	ldr	r1, [pc, #60]	; (801d6ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d6ae:	4810      	ldr	r0, [pc, #64]	; (801d6f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d6b0:	f005 fb02 	bl	8022cb8 <__aeabi_atexit>
 801d6b4:	4c0f      	ldr	r4, [pc, #60]	; (801d6f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d6b6:	7823      	ldrb	r3, [r4, #0]
 801d6b8:	f3bf 8f5b 	dmb	ish
 801d6bc:	07db      	lsls	r3, r3, #31
 801d6be:	d40b      	bmi.n	801d6d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d6c0:	4620      	mov	r0, r4
 801d6c2:	f005 fb00 	bl	8022cc6 <__cxa_guard_acquire>
 801d6c6:	b138      	cbz	r0, 801d6d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	f005 fb08 	bl	8022cde <__cxa_guard_release>
 801d6ce:	4a06      	ldr	r2, [pc, #24]	; (801d6e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d6d0:	4909      	ldr	r1, [pc, #36]	; (801d6f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d6d2:	480a      	ldr	r0, [pc, #40]	; (801d6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d6d4:	f005 faf0 	bl	8022cb8 <__aeabi_atexit>
 801d6d8:	4b05      	ldr	r3, [pc, #20]	; (801d6f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d6da:	60ab      	str	r3, [r5, #8]
 801d6dc:	4b07      	ldr	r3, [pc, #28]	; (801d6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d6de:	60eb      	str	r3, [r5, #12]
 801d6e0:	bd38      	pop	{r3, r4, r5, pc}
 801d6e2:	bf00      	nop
 801d6e4:	24006af4 	.word	0x24006af4
 801d6e8:	24000000 	.word	0x24000000
 801d6ec:	0801b465 	.word	0x0801b465
 801d6f0:	2400007c 	.word	0x2400007c
 801d6f4:	24006af8 	.word	0x24006af8
 801d6f8:	0801b463 	.word	0x0801b463
 801d6fc:	24000080 	.word	0x24000080

0801d700 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801d700:	b510      	push	{r4, lr}
 801d702:	4604      	mov	r4, r0
 801d704:	f7ff ff88 	bl	801d618 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d708:	4620      	mov	r0, r4
 801d70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d70e:	f7ff bfbd 	b.w	801d68c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d714 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d714:	b538      	push	{r3, r4, r5, lr}
 801d716:	4c15      	ldr	r4, [pc, #84]	; (801d76c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d718:	4605      	mov	r5, r0
 801d71a:	7823      	ldrb	r3, [r4, #0]
 801d71c:	f3bf 8f5b 	dmb	ish
 801d720:	07da      	lsls	r2, r3, #31
 801d722:	d40b      	bmi.n	801d73c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d724:	4620      	mov	r0, r4
 801d726:	f005 face 	bl	8022cc6 <__cxa_guard_acquire>
 801d72a:	b138      	cbz	r0, 801d73c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d72c:	4620      	mov	r0, r4
 801d72e:	f005 fad6 	bl	8022cde <__cxa_guard_release>
 801d732:	4a0f      	ldr	r2, [pc, #60]	; (801d770 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d734:	490f      	ldr	r1, [pc, #60]	; (801d774 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d736:	4810      	ldr	r0, [pc, #64]	; (801d778 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d738:	f005 fabe 	bl	8022cb8 <__aeabi_atexit>
 801d73c:	4c0f      	ldr	r4, [pc, #60]	; (801d77c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d73e:	7823      	ldrb	r3, [r4, #0]
 801d740:	f3bf 8f5b 	dmb	ish
 801d744:	07db      	lsls	r3, r3, #31
 801d746:	d40b      	bmi.n	801d760 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d748:	4620      	mov	r0, r4
 801d74a:	f005 fabc 	bl	8022cc6 <__cxa_guard_acquire>
 801d74e:	b138      	cbz	r0, 801d760 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d750:	4620      	mov	r0, r4
 801d752:	f005 fac4 	bl	8022cde <__cxa_guard_release>
 801d756:	4a06      	ldr	r2, [pc, #24]	; (801d770 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d758:	4909      	ldr	r1, [pc, #36]	; (801d780 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d75a:	480a      	ldr	r0, [pc, #40]	; (801d784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d75c:	f005 faac 	bl	8022cb8 <__aeabi_atexit>
 801d760:	4b05      	ldr	r3, [pc, #20]	; (801d778 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d762:	622b      	str	r3, [r5, #32]
 801d764:	4b07      	ldr	r3, [pc, #28]	; (801d784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d766:	626b      	str	r3, [r5, #36]	; 0x24
 801d768:	bd38      	pop	{r3, r4, r5, pc}
 801d76a:	bf00      	nop
 801d76c:	24006b1c 	.word	0x24006b1c
 801d770:	24000000 	.word	0x24000000
 801d774:	0801b459 	.word	0x0801b459
 801d778:	240000a4 	.word	0x240000a4
 801d77c:	24006b20 	.word	0x24006b20
 801d780:	0801b457 	.word	0x0801b457
 801d784:	240000a8 	.word	0x240000a8

0801d788 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d788:	b538      	push	{r3, r4, r5, lr}
 801d78a:	4c15      	ldr	r4, [pc, #84]	; (801d7e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d78c:	4605      	mov	r5, r0
 801d78e:	7823      	ldrb	r3, [r4, #0]
 801d790:	f3bf 8f5b 	dmb	ish
 801d794:	07da      	lsls	r2, r3, #31
 801d796:	d40b      	bmi.n	801d7b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d798:	4620      	mov	r0, r4
 801d79a:	f005 fa94 	bl	8022cc6 <__cxa_guard_acquire>
 801d79e:	b138      	cbz	r0, 801d7b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	f005 fa9c 	bl	8022cde <__cxa_guard_release>
 801d7a6:	4a0f      	ldr	r2, [pc, #60]	; (801d7e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d7a8:	490f      	ldr	r1, [pc, #60]	; (801d7e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d7aa:	4810      	ldr	r0, [pc, #64]	; (801d7ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d7ac:	f005 fa84 	bl	8022cb8 <__aeabi_atexit>
 801d7b0:	4c0f      	ldr	r4, [pc, #60]	; (801d7f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d7b2:	7823      	ldrb	r3, [r4, #0]
 801d7b4:	f3bf 8f5b 	dmb	ish
 801d7b8:	07db      	lsls	r3, r3, #31
 801d7ba:	d40b      	bmi.n	801d7d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d7bc:	4620      	mov	r0, r4
 801d7be:	f005 fa82 	bl	8022cc6 <__cxa_guard_acquire>
 801d7c2:	b138      	cbz	r0, 801d7d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d7c4:	4620      	mov	r0, r4
 801d7c6:	f005 fa8a 	bl	8022cde <__cxa_guard_release>
 801d7ca:	4a06      	ldr	r2, [pc, #24]	; (801d7e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d7cc:	4909      	ldr	r1, [pc, #36]	; (801d7f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d7ce:	480a      	ldr	r0, [pc, #40]	; (801d7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d7d0:	f005 fa72 	bl	8022cb8 <__aeabi_atexit>
 801d7d4:	4b05      	ldr	r3, [pc, #20]	; (801d7ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d7d6:	61ab      	str	r3, [r5, #24]
 801d7d8:	4b07      	ldr	r3, [pc, #28]	; (801d7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d7da:	61eb      	str	r3, [r5, #28]
 801d7dc:	bd38      	pop	{r3, r4, r5, pc}
 801d7de:	bf00      	nop
 801d7e0:	24006afc 	.word	0x24006afc
 801d7e4:	24000000 	.word	0x24000000
 801d7e8:	0801b45d 	.word	0x0801b45d
 801d7ec:	24000084 	.word	0x24000084
 801d7f0:	24006b00 	.word	0x24006b00
 801d7f4:	0801b45b 	.word	0x0801b45b
 801d7f8:	24000088 	.word	0x24000088

0801d7fc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d7fc:	b510      	push	{r4, lr}
 801d7fe:	4604      	mov	r4, r0
 801d800:	f7ff ff88 	bl	801d714 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d804:	4620      	mov	r0, r4
 801d806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d80a:	f7ff bfbd 	b.w	801d788 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d810 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801d810:	b538      	push	{r3, r4, r5, lr}
 801d812:	4c15      	ldr	r4, [pc, #84]	; (801d868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801d814:	4605      	mov	r5, r0
 801d816:	7823      	ldrb	r3, [r4, #0]
 801d818:	f3bf 8f5b 	dmb	ish
 801d81c:	07da      	lsls	r2, r3, #31
 801d81e:	d40b      	bmi.n	801d838 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d820:	4620      	mov	r0, r4
 801d822:	f005 fa50 	bl	8022cc6 <__cxa_guard_acquire>
 801d826:	b138      	cbz	r0, 801d838 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d828:	4620      	mov	r0, r4
 801d82a:	f005 fa58 	bl	8022cde <__cxa_guard_release>
 801d82e:	4a0f      	ldr	r2, [pc, #60]	; (801d86c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d830:	490f      	ldr	r1, [pc, #60]	; (801d870 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801d832:	4810      	ldr	r0, [pc, #64]	; (801d874 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d834:	f005 fa40 	bl	8022cb8 <__aeabi_atexit>
 801d838:	4c0f      	ldr	r4, [pc, #60]	; (801d878 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801d83a:	7823      	ldrb	r3, [r4, #0]
 801d83c:	f3bf 8f5b 	dmb	ish
 801d840:	07db      	lsls	r3, r3, #31
 801d842:	d40b      	bmi.n	801d85c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d844:	4620      	mov	r0, r4
 801d846:	f005 fa3e 	bl	8022cc6 <__cxa_guard_acquire>
 801d84a:	b138      	cbz	r0, 801d85c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d84c:	4620      	mov	r0, r4
 801d84e:	f005 fa46 	bl	8022cde <__cxa_guard_release>
 801d852:	4a06      	ldr	r2, [pc, #24]	; (801d86c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d854:	4909      	ldr	r1, [pc, #36]	; (801d87c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801d856:	480a      	ldr	r0, [pc, #40]	; (801d880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d858:	f005 fa2e 	bl	8022cb8 <__aeabi_atexit>
 801d85c:	4b05      	ldr	r3, [pc, #20]	; (801d874 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d85e:	632b      	str	r3, [r5, #48]	; 0x30
 801d860:	4b07      	ldr	r3, [pc, #28]	; (801d880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d862:	636b      	str	r3, [r5, #52]	; 0x34
 801d864:	bd38      	pop	{r3, r4, r5, pc}
 801d866:	bf00      	nop
 801d868:	24006b04 	.word	0x24006b04
 801d86c:	24000000 	.word	0x24000000
 801d870:	0801b451 	.word	0x0801b451
 801d874:	2400008c 	.word	0x2400008c
 801d878:	24006b08 	.word	0x24006b08
 801d87c:	0801b44f 	.word	0x0801b44f
 801d880:	24000090 	.word	0x24000090

0801d884 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801d884:	b538      	push	{r3, r4, r5, lr}
 801d886:	4c15      	ldr	r4, [pc, #84]	; (801d8dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801d888:	4605      	mov	r5, r0
 801d88a:	7823      	ldrb	r3, [r4, #0]
 801d88c:	f3bf 8f5b 	dmb	ish
 801d890:	07da      	lsls	r2, r3, #31
 801d892:	d40b      	bmi.n	801d8ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d894:	4620      	mov	r0, r4
 801d896:	f005 fa16 	bl	8022cc6 <__cxa_guard_acquire>
 801d89a:	b138      	cbz	r0, 801d8ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d89c:	4620      	mov	r0, r4
 801d89e:	f005 fa1e 	bl	8022cde <__cxa_guard_release>
 801d8a2:	4a0f      	ldr	r2, [pc, #60]	; (801d8e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d8a4:	490f      	ldr	r1, [pc, #60]	; (801d8e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801d8a6:	4810      	ldr	r0, [pc, #64]	; (801d8e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d8a8:	f005 fa06 	bl	8022cb8 <__aeabi_atexit>
 801d8ac:	4c0f      	ldr	r4, [pc, #60]	; (801d8ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801d8ae:	7823      	ldrb	r3, [r4, #0]
 801d8b0:	f3bf 8f5b 	dmb	ish
 801d8b4:	07db      	lsls	r3, r3, #31
 801d8b6:	d40b      	bmi.n	801d8d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d8b8:	4620      	mov	r0, r4
 801d8ba:	f005 fa04 	bl	8022cc6 <__cxa_guard_acquire>
 801d8be:	b138      	cbz	r0, 801d8d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	f005 fa0c 	bl	8022cde <__cxa_guard_release>
 801d8c6:	4a06      	ldr	r2, [pc, #24]	; (801d8e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d8c8:	4909      	ldr	r1, [pc, #36]	; (801d8f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801d8ca:	480a      	ldr	r0, [pc, #40]	; (801d8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d8cc:	f005 f9f4 	bl	8022cb8 <__aeabi_atexit>
 801d8d0:	4b05      	ldr	r3, [pc, #20]	; (801d8e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d8d2:	62ab      	str	r3, [r5, #40]	; 0x28
 801d8d4:	4b07      	ldr	r3, [pc, #28]	; (801d8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d8d6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d8d8:	bd38      	pop	{r3, r4, r5, pc}
 801d8da:	bf00      	nop
 801d8dc:	24006adc 	.word	0x24006adc
 801d8e0:	24000000 	.word	0x24000000
 801d8e4:	0801b455 	.word	0x0801b455
 801d8e8:	24000064 	.word	0x24000064
 801d8ec:	24006ae0 	.word	0x24006ae0
 801d8f0:	0801b453 	.word	0x0801b453
 801d8f4:	24000068 	.word	0x24000068

0801d8f8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801d8f8:	b510      	push	{r4, lr}
 801d8fa:	4604      	mov	r4, r0
 801d8fc:	f7ff ff88 	bl	801d810 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801d900:	4620      	mov	r0, r4
 801d902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d906:	f7ff bfbd 	b.w	801d884 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801d90c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d90c:	b538      	push	{r3, r4, r5, lr}
 801d90e:	4c15      	ldr	r4, [pc, #84]	; (801d964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d910:	4605      	mov	r5, r0
 801d912:	7823      	ldrb	r3, [r4, #0]
 801d914:	f3bf 8f5b 	dmb	ish
 801d918:	07da      	lsls	r2, r3, #31
 801d91a:	d40b      	bmi.n	801d934 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d91c:	4620      	mov	r0, r4
 801d91e:	f005 f9d2 	bl	8022cc6 <__cxa_guard_acquire>
 801d922:	b138      	cbz	r0, 801d934 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d924:	4620      	mov	r0, r4
 801d926:	f005 f9da 	bl	8022cde <__cxa_guard_release>
 801d92a:	4a0f      	ldr	r2, [pc, #60]	; (801d968 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d92c:	490f      	ldr	r1, [pc, #60]	; (801d96c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d92e:	4810      	ldr	r0, [pc, #64]	; (801d970 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d930:	f005 f9c2 	bl	8022cb8 <__aeabi_atexit>
 801d934:	4c0f      	ldr	r4, [pc, #60]	; (801d974 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d936:	7823      	ldrb	r3, [r4, #0]
 801d938:	f3bf 8f5b 	dmb	ish
 801d93c:	07db      	lsls	r3, r3, #31
 801d93e:	d40b      	bmi.n	801d958 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d940:	4620      	mov	r0, r4
 801d942:	f005 f9c0 	bl	8022cc6 <__cxa_guard_acquire>
 801d946:	b138      	cbz	r0, 801d958 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d948:	4620      	mov	r0, r4
 801d94a:	f005 f9c8 	bl	8022cde <__cxa_guard_release>
 801d94e:	4a06      	ldr	r2, [pc, #24]	; (801d968 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d950:	4909      	ldr	r1, [pc, #36]	; (801d978 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d952:	480a      	ldr	r0, [pc, #40]	; (801d97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d954:	f005 f9b0 	bl	8022cb8 <__aeabi_atexit>
 801d958:	4b05      	ldr	r3, [pc, #20]	; (801d970 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d95a:	642b      	str	r3, [r5, #64]	; 0x40
 801d95c:	4b07      	ldr	r3, [pc, #28]	; (801d97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d95e:	646b      	str	r3, [r5, #68]	; 0x44
 801d960:	bd38      	pop	{r3, r4, r5, pc}
 801d962:	bf00      	nop
 801d964:	24006b0c 	.word	0x24006b0c
 801d968:	24000000 	.word	0x24000000
 801d96c:	0801b449 	.word	0x0801b449
 801d970:	24000094 	.word	0x24000094
 801d974:	24006b10 	.word	0x24006b10
 801d978:	0801b447 	.word	0x0801b447
 801d97c:	24000098 	.word	0x24000098

0801d980 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d980:	b538      	push	{r3, r4, r5, lr}
 801d982:	4c15      	ldr	r4, [pc, #84]	; (801d9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d984:	4605      	mov	r5, r0
 801d986:	7823      	ldrb	r3, [r4, #0]
 801d988:	f3bf 8f5b 	dmb	ish
 801d98c:	07da      	lsls	r2, r3, #31
 801d98e:	d40b      	bmi.n	801d9a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d990:	4620      	mov	r0, r4
 801d992:	f005 f998 	bl	8022cc6 <__cxa_guard_acquire>
 801d996:	b138      	cbz	r0, 801d9a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d998:	4620      	mov	r0, r4
 801d99a:	f005 f9a0 	bl	8022cde <__cxa_guard_release>
 801d99e:	4a0f      	ldr	r2, [pc, #60]	; (801d9dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d9a0:	490f      	ldr	r1, [pc, #60]	; (801d9e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d9a2:	4810      	ldr	r0, [pc, #64]	; (801d9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d9a4:	f005 f988 	bl	8022cb8 <__aeabi_atexit>
 801d9a8:	4c0f      	ldr	r4, [pc, #60]	; (801d9e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d9aa:	7823      	ldrb	r3, [r4, #0]
 801d9ac:	f3bf 8f5b 	dmb	ish
 801d9b0:	07db      	lsls	r3, r3, #31
 801d9b2:	d40b      	bmi.n	801d9cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f005 f986 	bl	8022cc6 <__cxa_guard_acquire>
 801d9ba:	b138      	cbz	r0, 801d9cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d9bc:	4620      	mov	r0, r4
 801d9be:	f005 f98e 	bl	8022cde <__cxa_guard_release>
 801d9c2:	4a06      	ldr	r2, [pc, #24]	; (801d9dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d9c4:	4909      	ldr	r1, [pc, #36]	; (801d9ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d9c6:	480a      	ldr	r0, [pc, #40]	; (801d9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d9c8:	f005 f976 	bl	8022cb8 <__aeabi_atexit>
 801d9cc:	4b05      	ldr	r3, [pc, #20]	; (801d9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d9ce:	63ab      	str	r3, [r5, #56]	; 0x38
 801d9d0:	4b07      	ldr	r3, [pc, #28]	; (801d9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d9d2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d9d4:	bd38      	pop	{r3, r4, r5, pc}
 801d9d6:	bf00      	nop
 801d9d8:	24006aec 	.word	0x24006aec
 801d9dc:	24000000 	.word	0x24000000
 801d9e0:	0801b44d 	.word	0x0801b44d
 801d9e4:	24000074 	.word	0x24000074
 801d9e8:	24006af0 	.word	0x24006af0
 801d9ec:	0801b44b 	.word	0x0801b44b
 801d9f0:	24000078 	.word	0x24000078

0801d9f4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801d9f4:	b510      	push	{r4, lr}
 801d9f6:	4604      	mov	r4, r0
 801d9f8:	f7ff ff88 	bl	801d90c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d9fc:	4620      	mov	r0, r4
 801d9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da02:	f7ff bfbd 	b.w	801d980 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801da08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801da08:	b538      	push	{r3, r4, r5, lr}
 801da0a:	4c15      	ldr	r4, [pc, #84]	; (801da60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801da0c:	4605      	mov	r5, r0
 801da0e:	7823      	ldrb	r3, [r4, #0]
 801da10:	f3bf 8f5b 	dmb	ish
 801da14:	07da      	lsls	r2, r3, #31
 801da16:	d40b      	bmi.n	801da30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801da18:	4620      	mov	r0, r4
 801da1a:	f005 f954 	bl	8022cc6 <__cxa_guard_acquire>
 801da1e:	b138      	cbz	r0, 801da30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801da20:	4620      	mov	r0, r4
 801da22:	f005 f95c 	bl	8022cde <__cxa_guard_release>
 801da26:	4a0f      	ldr	r2, [pc, #60]	; (801da64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801da28:	490f      	ldr	r1, [pc, #60]	; (801da68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801da2a:	4810      	ldr	r0, [pc, #64]	; (801da6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801da2c:	f005 f944 	bl	8022cb8 <__aeabi_atexit>
 801da30:	4c0f      	ldr	r4, [pc, #60]	; (801da70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801da32:	7823      	ldrb	r3, [r4, #0]
 801da34:	f3bf 8f5b 	dmb	ish
 801da38:	07db      	lsls	r3, r3, #31
 801da3a:	d40b      	bmi.n	801da54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801da3c:	4620      	mov	r0, r4
 801da3e:	f005 f942 	bl	8022cc6 <__cxa_guard_acquire>
 801da42:	b138      	cbz	r0, 801da54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801da44:	4620      	mov	r0, r4
 801da46:	f005 f94a 	bl	8022cde <__cxa_guard_release>
 801da4a:	4a06      	ldr	r2, [pc, #24]	; (801da64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801da4c:	4909      	ldr	r1, [pc, #36]	; (801da74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801da4e:	480a      	ldr	r0, [pc, #40]	; (801da78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801da50:	f005 f932 	bl	8022cb8 <__aeabi_atexit>
 801da54:	4b05      	ldr	r3, [pc, #20]	; (801da6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801da56:	652b      	str	r3, [r5, #80]	; 0x50
 801da58:	4b07      	ldr	r3, [pc, #28]	; (801da78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801da5a:	656b      	str	r3, [r5, #84]	; 0x54
 801da5c:	bd38      	pop	{r3, r4, r5, pc}
 801da5e:	bf00      	nop
 801da60:	24006ae4 	.word	0x24006ae4
 801da64:	24000000 	.word	0x24000000
 801da68:	0801b441 	.word	0x0801b441
 801da6c:	2400006c 	.word	0x2400006c
 801da70:	24006ae8 	.word	0x24006ae8
 801da74:	0801b43f 	.word	0x0801b43f
 801da78:	24000070 	.word	0x24000070

0801da7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801da7c:	b538      	push	{r3, r4, r5, lr}
 801da7e:	4c15      	ldr	r4, [pc, #84]	; (801dad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801da80:	4605      	mov	r5, r0
 801da82:	7823      	ldrb	r3, [r4, #0]
 801da84:	f3bf 8f5b 	dmb	ish
 801da88:	07da      	lsls	r2, r3, #31
 801da8a:	d40b      	bmi.n	801daa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801da8c:	4620      	mov	r0, r4
 801da8e:	f005 f91a 	bl	8022cc6 <__cxa_guard_acquire>
 801da92:	b138      	cbz	r0, 801daa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801da94:	4620      	mov	r0, r4
 801da96:	f005 f922 	bl	8022cde <__cxa_guard_release>
 801da9a:	4a0f      	ldr	r2, [pc, #60]	; (801dad8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801da9c:	490f      	ldr	r1, [pc, #60]	; (801dadc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801da9e:	4810      	ldr	r0, [pc, #64]	; (801dae0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801daa0:	f005 f90a 	bl	8022cb8 <__aeabi_atexit>
 801daa4:	4c0f      	ldr	r4, [pc, #60]	; (801dae4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801daa6:	7823      	ldrb	r3, [r4, #0]
 801daa8:	f3bf 8f5b 	dmb	ish
 801daac:	07db      	lsls	r3, r3, #31
 801daae:	d40b      	bmi.n	801dac8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dab0:	4620      	mov	r0, r4
 801dab2:	f005 f908 	bl	8022cc6 <__cxa_guard_acquire>
 801dab6:	b138      	cbz	r0, 801dac8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dab8:	4620      	mov	r0, r4
 801daba:	f005 f910 	bl	8022cde <__cxa_guard_release>
 801dabe:	4a06      	ldr	r2, [pc, #24]	; (801dad8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dac0:	4909      	ldr	r1, [pc, #36]	; (801dae8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801dac2:	480a      	ldr	r0, [pc, #40]	; (801daec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dac4:	f005 f8f8 	bl	8022cb8 <__aeabi_atexit>
 801dac8:	4b05      	ldr	r3, [pc, #20]	; (801dae0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801daca:	64ab      	str	r3, [r5, #72]	; 0x48
 801dacc:	4b07      	ldr	r3, [pc, #28]	; (801daec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dace:	64eb      	str	r3, [r5, #76]	; 0x4c
 801dad0:	bd38      	pop	{r3, r4, r5, pc}
 801dad2:	bf00      	nop
 801dad4:	24006ad4 	.word	0x24006ad4
 801dad8:	24000000 	.word	0x24000000
 801dadc:	0801b445 	.word	0x0801b445
 801dae0:	2400005c 	.word	0x2400005c
 801dae4:	24006ad8 	.word	0x24006ad8
 801dae8:	0801b443 	.word	0x0801b443
 801daec:	24000060 	.word	0x24000060

0801daf0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801daf0:	b510      	push	{r4, lr}
 801daf2:	4604      	mov	r4, r0
 801daf4:	f7ff ff88 	bl	801da08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801daf8:	4620      	mov	r0, r4
 801dafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dafe:	f7ff bfbd 	b.w	801da7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801db02 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801db02:	b510      	push	{r4, lr}
 801db04:	4604      	mov	r4, r0
 801db06:	f7ff fff3 	bl	801daf0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801db0a:	4620      	mov	r0, r4
 801db0c:	f7ff ff72 	bl	801d9f4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801db10:	4620      	mov	r0, r4
 801db12:	f7ff fe73 	bl	801d7fc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801db16:	4620      	mov	r0, r4
 801db18:	f7ff fdf2 	bl	801d700 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801db1c:	4620      	mov	r0, r4
 801db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db22:	f7ff bee9 	b.w	801d8f8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801db28 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801db28:	b538      	push	{r3, r4, r5, lr}
 801db2a:	4c0b      	ldr	r4, [pc, #44]	; (801db58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801db2c:	4605      	mov	r5, r0
 801db2e:	7823      	ldrb	r3, [r4, #0]
 801db30:	f3bf 8f5b 	dmb	ish
 801db34:	07db      	lsls	r3, r3, #31
 801db36:	d40b      	bmi.n	801db50 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801db38:	4620      	mov	r0, r4
 801db3a:	f005 f8c4 	bl	8022cc6 <__cxa_guard_acquire>
 801db3e:	b138      	cbz	r0, 801db50 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801db40:	4620      	mov	r0, r4
 801db42:	f005 f8cc 	bl	8022cde <__cxa_guard_release>
 801db46:	4a05      	ldr	r2, [pc, #20]	; (801db5c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801db48:	4905      	ldr	r1, [pc, #20]	; (801db60 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801db4a:	4806      	ldr	r0, [pc, #24]	; (801db64 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801db4c:	f005 f8b4 	bl	8022cb8 <__aeabi_atexit>
 801db50:	4b04      	ldr	r3, [pc, #16]	; (801db64 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801db52:	65ab      	str	r3, [r5, #88]	; 0x58
 801db54:	bd38      	pop	{r3, r4, r5, pc}
 801db56:	bf00      	nop
 801db58:	24006ac8 	.word	0x24006ac8
 801db5c:	24000000 	.word	0x24000000
 801db60:	0801b43d 	.word	0x0801b43d
 801db64:	24000054 	.word	0x24000054

0801db68 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	4c0b      	ldr	r4, [pc, #44]	; (801db98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801db6c:	4605      	mov	r5, r0
 801db6e:	7823      	ldrb	r3, [r4, #0]
 801db70:	f3bf 8f5b 	dmb	ish
 801db74:	07db      	lsls	r3, r3, #31
 801db76:	d40b      	bmi.n	801db90 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801db78:	4620      	mov	r0, r4
 801db7a:	f005 f8a4 	bl	8022cc6 <__cxa_guard_acquire>
 801db7e:	b138      	cbz	r0, 801db90 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801db80:	4620      	mov	r0, r4
 801db82:	f005 f8ac 	bl	8022cde <__cxa_guard_release>
 801db86:	4a05      	ldr	r2, [pc, #20]	; (801db9c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801db88:	4905      	ldr	r1, [pc, #20]	; (801dba0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801db8a:	4806      	ldr	r0, [pc, #24]	; (801dba4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801db8c:	f005 f894 	bl	8022cb8 <__aeabi_atexit>
 801db90:	4b04      	ldr	r3, [pc, #16]	; (801dba4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801db92:	65eb      	str	r3, [r5, #92]	; 0x5c
 801db94:	bd38      	pop	{r3, r4, r5, pc}
 801db96:	bf00      	nop
 801db98:	24006acc 	.word	0x24006acc
 801db9c:	24000000 	.word	0x24000000
 801dba0:	0801b43b 	.word	0x0801b43b
 801dba4:	24000058 	.word	0x24000058

0801dba8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801dba8:	b570      	push	{r4, r5, r6, lr}
 801dbaa:	4d0c      	ldr	r5, [pc, #48]	; (801dbdc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801dbac:	4606      	mov	r6, r0
 801dbae:	4c0c      	ldr	r4, [pc, #48]	; (801dbe0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801dbb0:	782b      	ldrb	r3, [r5, #0]
 801dbb2:	f3bf 8f5b 	dmb	ish
 801dbb6:	f013 0f01 	tst.w	r3, #1
 801dbba:	d10d      	bne.n	801dbd8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801dbbc:	4628      	mov	r0, r5
 801dbbe:	f005 f882 	bl	8022cc6 <__cxa_guard_acquire>
 801dbc2:	b148      	cbz	r0, 801dbd8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801dbc4:	4b07      	ldr	r3, [pc, #28]	; (801dbe4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801dbc6:	4628      	mov	r0, r5
 801dbc8:	6023      	str	r3, [r4, #0]
 801dbca:	f005 f888 	bl	8022cde <__cxa_guard_release>
 801dbce:	4a06      	ldr	r2, [pc, #24]	; (801dbe8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801dbd0:	4620      	mov	r0, r4
 801dbd2:	4906      	ldr	r1, [pc, #24]	; (801dbec <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801dbd4:	f005 f870 	bl	8022cb8 <__aeabi_atexit>
 801dbd8:	6634      	str	r4, [r6, #96]	; 0x60
 801dbda:	bd70      	pop	{r4, r5, r6, pc}
 801dbdc:	24006ad0 	.word	0x24006ad0
 801dbe0:	24006b24 	.word	0x24006b24
 801dbe4:	080255ac 	.word	0x080255ac
 801dbe8:	24000000 	.word	0x24000000
 801dbec:	0801b439 	.word	0x0801b439

0801dbf0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801dbf0:	b510      	push	{r4, lr}
 801dbf2:	4604      	mov	r4, r0
 801dbf4:	f7ff ff98 	bl	801db28 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	f7ff ffb5 	bl	801db68 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801dbfe:	4620      	mov	r0, r4
 801dc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc04:	f7ff bfd0 	b.w	801dba8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801dc08 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc0c:	b087      	sub	sp, #28
 801dc0e:	788d      	ldrb	r5, [r1, #2]
 801dc10:	f891 9000 	ldrb.w	r9, [r1]
 801dc14:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801dc18:	9501      	str	r5, [sp, #4]
 801dc1a:	784d      	ldrb	r5, [r1, #1]
 801dc1c:	9203      	str	r2, [sp, #12]
 801dc1e:	9502      	str	r5, [sp, #8]
 801dc20:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801dc24:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801dc28:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801dc2c:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801dc30:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801dc34:	fb06 0708 	mla	r7, r6, r8, r0
 801dc38:	2e00      	cmp	r6, #0
 801dc3a:	eb02 0a07 	add.w	sl, r2, r7
 801dc3e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801dc42:	9d01      	ldr	r5, [sp, #4]
 801dc44:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801dc48:	ea45 0509 	orr.w	r5, r5, r9
 801dc4c:	9505      	str	r5, [sp, #20]
 801dc4e:	f2c0 80b2 	blt.w	801ddb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801dc52:	45b3      	cmp	fp, r6
 801dc54:	f340 80af 	ble.w	801ddb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	f2c0 80aa 	blt.w	801ddb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801dc5e:	4580      	cmp	r8, r0
 801dc60:	f340 80a7 	ble.w	801ddb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801dc64:	9a03      	ldr	r2, [sp, #12]
 801dc66:	5dd7      	ldrb	r7, [r2, r7]
 801dc68:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dc6c:	441f      	add	r7, r3
 801dc6e:	1c42      	adds	r2, r0, #1
 801dc70:	f100 80a4 	bmi.w	801ddbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801dc74:	4590      	cmp	r8, r2
 801dc76:	f340 80a1 	ble.w	801ddbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801dc7a:	2c00      	cmp	r4, #0
 801dc7c:	f000 809e 	beq.w	801ddbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801dc80:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801dc84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc88:	441d      	add	r5, r3
 801dc8a:	3601      	adds	r6, #1
 801dc8c:	f100 809a 	bmi.w	801ddc4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801dc90:	45b3      	cmp	fp, r6
 801dc92:	f340 8097 	ble.w	801ddc4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801dc96:	f1bc 0f00 	cmp.w	ip, #0
 801dc9a:	f000 8093 	beq.w	801ddc4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801dc9e:	2800      	cmp	r0, #0
 801dca0:	f2c0 808e 	blt.w	801ddc0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801dca4:	4580      	cmp	r8, r0
 801dca6:	f340 808b 	ble.w	801ddc0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801dcaa:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801dcae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dcb2:	441e      	add	r6, r3
 801dcb4:	3001      	adds	r0, #1
 801dcb6:	f100 8088 	bmi.w	801ddca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dcba:	4580      	cmp	r8, r0
 801dcbc:	f340 8085 	ble.w	801ddca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dcc0:	2c00      	cmp	r4, #0
 801dcc2:	f000 8082 	beq.w	801ddca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dcc6:	44d0      	add	r8, sl
 801dcc8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dccc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dcd0:	4413      	add	r3, r2
 801dcd2:	b2a4      	uxth	r4, r4
 801dcd4:	f895 a000 	ldrb.w	sl, [r5]
 801dcd8:	fa1f fc8c 	uxth.w	ip, ip
 801dcdc:	fb04 fb0c 	mul.w	fp, r4, ip
 801dce0:	0124      	lsls	r4, r4, #4
 801dce2:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801dce6:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801dcea:	eba4 040b 	sub.w	r4, r4, fp
 801dcee:	fa1f f08c 	uxth.w	r0, ip
 801dcf2:	b2a2      	uxth	r2, r4
 801dcf4:	783c      	ldrb	r4, [r7, #0]
 801dcf6:	eba8 0800 	sub.w	r8, r8, r0
 801dcfa:	fa1f fc8e 	uxth.w	ip, lr
 801dcfe:	fb02 fa0a 	mul.w	sl, r2, sl
 801dd02:	ea6f 0e0e 	mvn.w	lr, lr
 801dd06:	fa1f f888 	uxth.w	r8, r8
 801dd0a:	fa5f fe8e 	uxtb.w	lr, lr
 801dd0e:	fb08 aa04 	mla	sl, r8, r4, sl
 801dd12:	7834      	ldrb	r4, [r6, #0]
 801dd14:	fb19 f90e 	smulbb	r9, r9, lr
 801dd18:	fb00 aa04 	mla	sl, r0, r4, sl
 801dd1c:	781c      	ldrb	r4, [r3, #0]
 801dd1e:	fb0b a404 	mla	r4, fp, r4, sl
 801dd22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801dd26:	fb04 990c 	mla	r9, r4, ip, r9
 801dd2a:	fa1f f989 	uxth.w	r9, r9
 801dd2e:	f109 0401 	add.w	r4, r9, #1
 801dd32:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801dd36:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dd3a:	f881 9000 	strb.w	r9, [r1]
 801dd3e:	f895 9001 	ldrb.w	r9, [r5, #1]
 801dd42:	787c      	ldrb	r4, [r7, #1]
 801dd44:	fb02 f909 	mul.w	r9, r2, r9
 801dd48:	fb08 9904 	mla	r9, r8, r4, r9
 801dd4c:	7874      	ldrb	r4, [r6, #1]
 801dd4e:	fb00 9904 	mla	r9, r0, r4, r9
 801dd52:	785c      	ldrb	r4, [r3, #1]
 801dd54:	fb0b 9404 	mla	r4, fp, r4, r9
 801dd58:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801dd5c:	9c02      	ldr	r4, [sp, #8]
 801dd5e:	fb14 f90e 	smulbb	r9, r4, lr
 801dd62:	fb0a 940c 	mla	r4, sl, ip, r9
 801dd66:	b2a4      	uxth	r4, r4
 801dd68:	f104 0901 	add.w	r9, r4, #1
 801dd6c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801dd70:	1224      	asrs	r4, r4, #8
 801dd72:	704c      	strb	r4, [r1, #1]
 801dd74:	78ad      	ldrb	r5, [r5, #2]
 801dd76:	78bc      	ldrb	r4, [r7, #2]
 801dd78:	436a      	muls	r2, r5
 801dd7a:	789b      	ldrb	r3, [r3, #2]
 801dd7c:	fb08 2204 	mla	r2, r8, r4, r2
 801dd80:	78b4      	ldrb	r4, [r6, #2]
 801dd82:	fb00 2004 	mla	r0, r0, r4, r2
 801dd86:	fb0b 0b03 	mla	fp, fp, r3, r0
 801dd8a:	9b01      	ldr	r3, [sp, #4]
 801dd8c:	fb13 fe0e 	smulbb	lr, r3, lr
 801dd90:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801dd94:	fb0b ec0c 	mla	ip, fp, ip, lr
 801dd98:	fa1f fc8c 	uxth.w	ip, ip
 801dd9c:	f10c 0e01 	add.w	lr, ip, #1
 801dda0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801dda4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dda8:	f881 c002 	strb.w	ip, [r1, #2]
 801ddac:	b007      	add	sp, #28
 801ddae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddb2:	af05      	add	r7, sp, #20
 801ddb4:	e75b      	b.n	801dc6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ddb6:	ad05      	add	r5, sp, #20
 801ddb8:	462f      	mov	r7, r5
 801ddba:	e766      	b.n	801dc8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ddbc:	ad05      	add	r5, sp, #20
 801ddbe:	e764      	b.n	801dc8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ddc0:	ae05      	add	r6, sp, #20
 801ddc2:	e777      	b.n	801dcb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ddc4:	ab05      	add	r3, sp, #20
 801ddc6:	461e      	mov	r6, r3
 801ddc8:	e783      	b.n	801dcd2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ddca:	ab05      	add	r3, sp, #20
 801ddcc:	e781      	b.n	801dcd2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ddce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ddce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd2:	b093      	sub	sp, #76	; 0x4c
 801ddd4:	9210      	str	r2, [sp, #64]	; 0x40
 801ddd6:	9309      	str	r3, [sp, #36]	; 0x24
 801ddd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ddda:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ddde:	9011      	str	r0, [sp, #68]	; 0x44
 801dde0:	930e      	str	r3, [sp, #56]	; 0x38
 801dde2:	6850      	ldr	r0, [r2, #4]
 801dde4:	910d      	str	r1, [sp, #52]	; 0x34
 801dde6:	6812      	ldr	r2, [r2, #0]
 801dde8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ddec:	fb00 1303 	mla	r3, r0, r3, r1
 801ddf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddf4:	18d3      	adds	r3, r2, r3
 801ddf6:	930a      	str	r3, [sp, #40]	; 0x28
 801ddf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	930c      	str	r3, [sp, #48]	; 0x30
 801ddfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de00:	685c      	ldr	r4, [r3, #4]
 801de02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de04:	3404      	adds	r4, #4
 801de06:	43db      	mvns	r3, r3
 801de08:	b2db      	uxtb	r3, r3
 801de0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801de0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de0e:	2b00      	cmp	r3, #0
 801de10:	dc03      	bgt.n	801de1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801de12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de14:	2b00      	cmp	r3, #0
 801de16:	f340 8250 	ble.w	801e2ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801de1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de24:	1e48      	subs	r0, r1, #1
 801de26:	1e55      	subs	r5, r2, #1
 801de28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	f340 80ee 	ble.w	801e00c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801de30:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801de32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801de34:	1436      	asrs	r6, r6, #16
 801de36:	ea4f 4323 	mov.w	r3, r3, asr #16
 801de3a:	d406      	bmi.n	801de4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de3c:	4286      	cmp	r6, r0
 801de3e:	da04      	bge.n	801de4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de40:	2b00      	cmp	r3, #0
 801de42:	db02      	blt.n	801de4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de44:	42ab      	cmp	r3, r5
 801de46:	f2c0 80e2 	blt.w	801e00e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801de4a:	3601      	adds	r6, #1
 801de4c:	f100 80cf 	bmi.w	801dfee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801de50:	42b1      	cmp	r1, r6
 801de52:	f2c0 80cc 	blt.w	801dfee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801de56:	3301      	adds	r3, #1
 801de58:	f100 80c9 	bmi.w	801dfee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801de5c:	429a      	cmp	r2, r3
 801de5e:	f2c0 80c6 	blt.w	801dfee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801de62:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801de66:	f1bb 0f00 	cmp.w	fp, #0
 801de6a:	f340 80f1 	ble.w	801e050 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801de6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801de70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801de72:	9824      	ldr	r0, [sp, #144]	; 0x90
 801de74:	141d      	asrs	r5, r3, #16
 801de76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801de78:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801de7c:	68c7      	ldr	r7, [r0, #12]
 801de7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801de80:	1418      	asrs	r0, r3, #16
 801de82:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801de86:	6892      	ldr	r2, [r2, #8]
 801de88:	f100 8137 	bmi.w	801e0fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801de8c:	f102 3cff 	add.w	ip, r2, #4294967295
 801de90:	4560      	cmp	r0, ip
 801de92:	f280 8132 	bge.w	801e0fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801de96:	2d00      	cmp	r5, #0
 801de98:	f2c0 812f 	blt.w	801e0fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801de9c:	f107 3cff 	add.w	ip, r7, #4294967295
 801dea0:	4565      	cmp	r5, ip
 801dea2:	f280 812a 	bge.w	801e0fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801dea6:	b212      	sxth	r2, r2
 801dea8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801deaa:	fb05 0002 	mla	r0, r5, r2, r0
 801deae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801deb0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801deb4:	4405      	add	r5, r0
 801deb6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801deba:	eb04 0e0c 	add.w	lr, r4, ip
 801debe:	f1b8 0f00 	cmp.w	r8, #0
 801dec2:	f000 810c 	beq.w	801e0de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801dec6:	786f      	ldrb	r7, [r5, #1]
 801dec8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801decc:	4427      	add	r7, r4
 801dece:	2900      	cmp	r1, #0
 801ded0:	f000 810d 	beq.w	801e0ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801ded4:	18a8      	adds	r0, r5, r2
 801ded6:	5caa      	ldrb	r2, [r5, r2]
 801ded8:	7840      	ldrb	r0, [r0, #1]
 801deda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dede:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dee2:	4422      	add	r2, r4
 801dee4:	4420      	add	r0, r4
 801dee6:	fa1f f388 	uxth.w	r3, r8
 801deea:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801deee:	b289      	uxth	r1, r1
 801def0:	f897 c000 	ldrb.w	ip, [r7]
 801def4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801def8:	fb03 f901 	mul.w	r9, r3, r1
 801defc:	011b      	lsls	r3, r3, #4
 801defe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801df02:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801df06:	eba3 0309 	sub.w	r3, r3, r9
 801df0a:	b289      	uxth	r1, r1
 801df0c:	b29b      	uxth	r3, r3
 801df0e:	eba8 0801 	sub.w	r8, r8, r1
 801df12:	fb03 fc0c 	mul.w	ip, r3, ip
 801df16:	fa1f f888 	uxth.w	r8, r8
 801df1a:	930f      	str	r3, [sp, #60]	; 0x3c
 801df1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df1e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801df22:	f892 a000 	ldrb.w	sl, [r2]
 801df26:	fb01 cc0a 	mla	ip, r1, sl, ip
 801df2a:	f890 a000 	ldrb.w	sl, [r0]
 801df2e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801df32:	f896 a000 	ldrb.w	sl, [r6]
 801df36:	fb1a fa03 	smulbb	sl, sl, r3
 801df3a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801df3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df40:	fb0c ac05 	mla	ip, ip, r5, sl
 801df44:	fa1f fc8c 	uxth.w	ip, ip
 801df48:	f10c 0a01 	add.w	sl, ip, #1
 801df4c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801df50:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df54:	f886 a000 	strb.w	sl, [r6]
 801df58:	f897 c001 	ldrb.w	ip, [r7, #1]
 801df5c:	f89e a001 	ldrb.w	sl, [lr, #1]
 801df60:	fb03 fc0c 	mul.w	ip, r3, ip
 801df64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df66:	fb08 cc0a 	mla	ip, r8, sl, ip
 801df6a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801df6e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801df72:	f890 a001 	ldrb.w	sl, [r0, #1]
 801df76:	fb09 cc0a 	mla	ip, r9, sl, ip
 801df7a:	f896 a001 	ldrb.w	sl, [r6, #1]
 801df7e:	fb1a fa03 	smulbb	sl, sl, r3
 801df82:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801df86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df88:	fb0c ac05 	mla	ip, ip, r5, sl
 801df8c:	fa1f fc8c 	uxth.w	ip, ip
 801df90:	f10c 0a01 	add.w	sl, ip, #1
 801df94:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801df98:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df9c:	f886 c001 	strb.w	ip, [r6, #1]
 801dfa0:	78bf      	ldrb	r7, [r7, #2]
 801dfa2:	f89e c002 	ldrb.w	ip, [lr, #2]
 801dfa6:	437b      	muls	r3, r7
 801dfa8:	fb08 330c 	mla	r3, r8, ip, r3
 801dfac:	f892 c002 	ldrb.w	ip, [r2, #2]
 801dfb0:	7882      	ldrb	r2, [r0, #2]
 801dfb2:	fb01 310c 	mla	r1, r1, ip, r3
 801dfb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfb8:	fb09 1902 	mla	r9, r9, r2, r1
 801dfbc:	78b1      	ldrb	r1, [r6, #2]
 801dfbe:	fb11 f103 	smulbb	r1, r1, r3
 801dfc2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801dfc6:	fb09 1505 	mla	r5, r9, r5, r1
 801dfca:	b2ad      	uxth	r5, r5
 801dfcc:	1c6b      	adds	r3, r5, #1
 801dfce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801dfd2:	122d      	asrs	r5, r5, #8
 801dfd4:	70b5      	strb	r5, [r6, #2]
 801dfd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfd8:	3603      	adds	r6, #3
 801dfda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dfdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dfe0:	4413      	add	r3, r2
 801dfe2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801dfe4:	931d      	str	r3, [sp, #116]	; 0x74
 801dfe6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dfe8:	4413      	add	r3, r2
 801dfea:	931e      	str	r3, [sp, #120]	; 0x78
 801dfec:	e73b      	b.n	801de66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dfee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dff0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801dff2:	4433      	add	r3, r6
 801dff4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801dff6:	931d      	str	r3, [sp, #116]	; 0x74
 801dff8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dffa:	4433      	add	r3, r6
 801dffc:	931e      	str	r3, [sp, #120]	; 0x78
 801dffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e000:	3b01      	subs	r3, #1
 801e002:	9309      	str	r3, [sp, #36]	; 0x24
 801e004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e006:	3303      	adds	r3, #3
 801e008:	930a      	str	r3, [sp, #40]	; 0x28
 801e00a:	e70d      	b.n	801de28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e00c:	d028      	beq.n	801e060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e010:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e012:	3b01      	subs	r3, #1
 801e014:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e016:	fb00 5003 	mla	r0, r0, r3, r5
 801e01a:	1400      	asrs	r0, r0, #16
 801e01c:	f53f af21 	bmi.w	801de62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e020:	3901      	subs	r1, #1
 801e022:	4288      	cmp	r0, r1
 801e024:	f6bf af1d 	bge.w	801de62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e028:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e02a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e02c:	fb01 0303 	mla	r3, r1, r3, r0
 801e030:	141b      	asrs	r3, r3, #16
 801e032:	f53f af16 	bmi.w	801de62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e036:	3a01      	subs	r2, #1
 801e038:	4293      	cmp	r3, r2
 801e03a:	f6bf af12 	bge.w	801de62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e040:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e044:	1cdf      	adds	r7, r3, #3
 801e046:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801e04a:	f1b9 0f00 	cmp.w	r9, #0
 801e04e:	dc73      	bgt.n	801e138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e05c:	441a      	add	r2, r3
 801e05e:	920a      	str	r2, [sp, #40]	; 0x28
 801e060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e062:	2b00      	cmp	r3, #0
 801e064:	f340 8129 	ble.w	801e2ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e06c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e06e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e072:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e076:	eef0 6a62 	vmov.f32	s13, s5
 801e07a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e07e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e082:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e086:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801e08a:	eef0 6a43 	vmov.f32	s13, s6
 801e08e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e092:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801e096:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e09a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e09e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e0aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e0ae:	ee12 2a90 	vmov	r2, s5
 801e0b2:	eef0 2a47 	vmov.f32	s5, s14
 801e0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0ba:	ee13 2a10 	vmov	r2, s6
 801e0be:	931f      	str	r3, [sp, #124]	; 0x7c
 801e0c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e0c2:	eeb0 3a67 	vmov.f32	s6, s15
 801e0c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0ca:	9320      	str	r3, [sp, #128]	; 0x80
 801e0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e0d0:	3b01      	subs	r3, #1
 801e0d2:	930d      	str	r3, [sp, #52]	; 0x34
 801e0d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e0d6:	bf08      	it	eq
 801e0d8:	4613      	moveq	r3, r2
 801e0da:	9309      	str	r3, [sp, #36]	; 0x24
 801e0dc:	e696      	b.n	801de0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e0de:	b149      	cbz	r1, 801e0f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801e0e0:	5caa      	ldrb	r2, [r5, r2]
 801e0e2:	4670      	mov	r0, lr
 801e0e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e0e8:	4422      	add	r2, r4
 801e0ea:	4677      	mov	r7, lr
 801e0ec:	e6fb      	b.n	801dee6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e0ee:	4670      	mov	r0, lr
 801e0f0:	4672      	mov	r2, lr
 801e0f2:	e6f8      	b.n	801dee6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e0f4:	4670      	mov	r0, lr
 801e0f6:	4672      	mov	r2, lr
 801e0f8:	e7f7      	b.n	801e0ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801e0fa:	f110 0c01 	adds.w	ip, r0, #1
 801e0fe:	f53f af6a 	bmi.w	801dfd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e102:	4562      	cmp	r2, ip
 801e104:	f6ff af67 	blt.w	801dfd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e108:	f115 0c01 	adds.w	ip, r5, #1
 801e10c:	f53f af63 	bmi.w	801dfd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e110:	4567      	cmp	r7, ip
 801e112:	f6ff af60 	blt.w	801dfd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e118:	b23f      	sxth	r7, r7
 801e11a:	b212      	sxth	r2, r2
 801e11c:	9002      	str	r0, [sp, #8]
 801e11e:	9701      	str	r7, [sp, #4]
 801e120:	9200      	str	r2, [sp, #0]
 801e122:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e126:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801e12a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801e12e:	4623      	mov	r3, r4
 801e130:	4631      	mov	r1, r6
 801e132:	f7ff fd69 	bl	801dc08 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e136:	e74e      	b.n	801dfd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e138:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e13a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e13c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e140:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e142:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e144:	1400      	asrs	r0, r0, #16
 801e146:	142d      	asrs	r5, r5, #16
 801e148:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e14a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e14e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e152:	fb02 5000 	mla	r0, r2, r0, r5
 801e156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e158:	f815 e000 	ldrb.w	lr, [r5, r0]
 801e15c:	eb05 0c00 	add.w	ip, r5, r0
 801e160:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e164:	eb04 060e 	add.w	r6, r4, lr
 801e168:	2b00      	cmp	r3, #0
 801e16a:	f000 8097 	beq.w	801e29c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801e16e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e176:	4425      	add	r5, r4
 801e178:	2900      	cmp	r1, #0
 801e17a:	f000 8098 	beq.w	801e2ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801e17e:	eb0c 0002 	add.w	r0, ip, r2
 801e182:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e186:	7840      	ldrb	r0, [r0, #1]
 801e188:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e18c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e190:	4422      	add	r2, r4
 801e192:	4420      	add	r0, r4
 801e194:	b29b      	uxth	r3, r3
 801e196:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e19a:	b289      	uxth	r1, r1
 801e19c:	f895 e000 	ldrb.w	lr, [r5]
 801e1a0:	3703      	adds	r7, #3
 801e1a2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e1a6:	fb03 f801 	mul.w	r8, r3, r1
 801e1aa:	011b      	lsls	r3, r3, #4
 801e1ac:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801e1b0:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e1b4:	eba3 0308 	sub.w	r3, r3, r8
 801e1b8:	b289      	uxth	r1, r1
 801e1ba:	b29b      	uxth	r3, r3
 801e1bc:	ebac 0c01 	sub.w	ip, ip, r1
 801e1c0:	fb03 fe0e 	mul.w	lr, r3, lr
 801e1c4:	fa1f fc8c 	uxth.w	ip, ip
 801e1c8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1cc:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e1d0:	f892 b000 	ldrb.w	fp, [r2]
 801e1d4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e1d8:	f890 b000 	ldrb.w	fp, [r0]
 801e1dc:	fb08 ee0b 	mla	lr, r8, fp, lr
 801e1e0:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801e1e4:	fb1b fb03 	smulbb	fp, fp, r3
 801e1e8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e1ee:	fb0e be0a 	mla	lr, lr, sl, fp
 801e1f2:	fa1f fe8e 	uxth.w	lr, lr
 801e1f6:	f10e 0b01 	add.w	fp, lr, #1
 801e1fa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e1fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e202:	f807 ec06 	strb.w	lr, [r7, #-6]
 801e206:	f895 e001 	ldrb.w	lr, [r5, #1]
 801e20a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e20e:	fb03 fe0e 	mul.w	lr, r3, lr
 801e212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e214:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e218:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e21c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e220:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e224:	fb08 ee0b 	mla	lr, r8, fp, lr
 801e228:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801e22c:	fb1b fb03 	smulbb	fp, fp, r3
 801e230:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e236:	fb0e be0a 	mla	lr, lr, sl, fp
 801e23a:	fa1f fe8e 	uxth.w	lr, lr
 801e23e:	f10e 0b01 	add.w	fp, lr, #1
 801e242:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e246:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e24a:	f807 ec05 	strb.w	lr, [r7, #-5]
 801e24e:	78ad      	ldrb	r5, [r5, #2]
 801e250:	78b6      	ldrb	r6, [r6, #2]
 801e252:	436b      	muls	r3, r5
 801e254:	7895      	ldrb	r5, [r2, #2]
 801e256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e258:	fb0c 3306 	mla	r3, ip, r6, r3
 801e25c:	fb01 3305 	mla	r3, r1, r5, r3
 801e260:	7885      	ldrb	r5, [r0, #2]
 801e262:	fb08 3805 	mla	r8, r8, r5, r3
 801e266:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801e26a:	fb13 f302 	smulbb	r3, r3, r2
 801e26e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e272:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e274:	fb08 380a 	mla	r8, r8, sl, r3
 801e278:	fa1f f888 	uxth.w	r8, r8
 801e27c:	f108 0301 	add.w	r3, r8, #1
 801e280:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801e284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e286:	4413      	add	r3, r2
 801e288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e28a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e28e:	931d      	str	r3, [sp, #116]	; 0x74
 801e290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e292:	f807 8c04 	strb.w	r8, [r7, #-4]
 801e296:	4413      	add	r3, r2
 801e298:	931e      	str	r3, [sp, #120]	; 0x78
 801e29a:	e6d6      	b.n	801e04a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e29c:	b151      	cbz	r1, 801e2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e29e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e2a2:	4630      	mov	r0, r6
 801e2a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e2a8:	4422      	add	r2, r4
 801e2aa:	4635      	mov	r5, r6
 801e2ac:	e772      	b.n	801e194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	4632      	mov	r2, r6
 801e2b2:	e76f      	b.n	801e194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e2b4:	4630      	mov	r0, r6
 801e2b6:	4632      	mov	r2, r6
 801e2b8:	e7f7      	b.n	801e2aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e2ba:	b013      	add	sp, #76	; 0x4c
 801e2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e2c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e2c4:	784c      	ldrb	r4, [r1, #1]
 801e2c6:	f891 a002 	ldrb.w	sl, [r1, #2]
 801e2ca:	0224      	lsls	r4, r4, #8
 801e2cc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801e2d0:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801e2d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e2d8:	f891 a000 	ldrb.w	sl, [r1]
 801e2dc:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801e2e0:	ea44 040a 	orr.w	r4, r4, sl
 801e2e4:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e2e8:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801e2ec:	9401      	str	r4, [sp, #4]
 801e2ee:	fb05 c70e 	mla	r7, r5, lr, ip
 801e2f2:	2d00      	cmp	r5, #0
 801e2f4:	eb02 0807 	add.w	r8, r2, r7
 801e2f8:	db72      	blt.n	801e3e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e2fa:	45a9      	cmp	r9, r5
 801e2fc:	dd70      	ble.n	801e3e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e2fe:	f1bc 0f00 	cmp.w	ip, #0
 801e302:	db6b      	blt.n	801e3dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e304:	45e6      	cmp	lr, ip
 801e306:	dd69      	ble.n	801e3dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e308:	5dd7      	ldrb	r7, [r2, r7]
 801e30a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e30e:	441f      	add	r7, r3
 801e310:	f11c 0201 	adds.w	r2, ip, #1
 801e314:	d467      	bmi.n	801e3e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e316:	4596      	cmp	lr, r2
 801e318:	dd65      	ble.n	801e3e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e31a:	2800      	cmp	r0, #0
 801e31c:	d063      	beq.n	801e3e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e31e:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e322:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e326:	441c      	add	r4, r3
 801e328:	3501      	adds	r5, #1
 801e32a:	d460      	bmi.n	801e3ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e32c:	45a9      	cmp	r9, r5
 801e32e:	dd5e      	ble.n	801e3ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e330:	2e00      	cmp	r6, #0
 801e332:	d05c      	beq.n	801e3ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e334:	f1bc 0f00 	cmp.w	ip, #0
 801e338:	db57      	blt.n	801e3ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e33a:	45e6      	cmp	lr, ip
 801e33c:	dd55      	ble.n	801e3ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e33e:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e346:	441d      	add	r5, r3
 801e348:	f11c 0201 	adds.w	r2, ip, #1
 801e34c:	d452      	bmi.n	801e3f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e34e:	4596      	cmp	lr, r2
 801e350:	dd50      	ble.n	801e3f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e352:	2800      	cmp	r0, #0
 801e354:	d04e      	beq.n	801e3f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e356:	44c6      	add	lr, r8
 801e358:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e35c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e360:	4413      	add	r3, r2
 801e362:	b280      	uxth	r0, r0
 801e364:	f897 8000 	ldrb.w	r8, [r7]
 801e368:	b2b2      	uxth	r2, r6
 801e36a:	fb00 f602 	mul.w	r6, r0, r2
 801e36e:	0100      	lsls	r0, r0, #4
 801e370:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801e374:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801e378:	1b80      	subs	r0, r0, r6
 801e37a:	fa1f fc82 	uxth.w	ip, r2
 801e37e:	b282      	uxth	r2, r0
 801e380:	7820      	ldrb	r0, [r4, #0]
 801e382:	ebae 0e0c 	sub.w	lr, lr, ip
 801e386:	4350      	muls	r0, r2
 801e388:	fa1f fe8e 	uxth.w	lr, lr
 801e38c:	fb0e 0808 	mla	r8, lr, r8, r0
 801e390:	7828      	ldrb	r0, [r5, #0]
 801e392:	fb0c 8800 	mla	r8, ip, r0, r8
 801e396:	7818      	ldrb	r0, [r3, #0]
 801e398:	fb06 8000 	mla	r0, r6, r0, r8
 801e39c:	1200      	asrs	r0, r0, #8
 801e39e:	7008      	strb	r0, [r1, #0]
 801e3a0:	7860      	ldrb	r0, [r4, #1]
 801e3a2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e3a6:	4350      	muls	r0, r2
 801e3a8:	fb0e 0808 	mla	r8, lr, r8, r0
 801e3ac:	7868      	ldrb	r0, [r5, #1]
 801e3ae:	fb0c 8800 	mla	r8, ip, r0, r8
 801e3b2:	7858      	ldrb	r0, [r3, #1]
 801e3b4:	fb06 8000 	mla	r0, r6, r0, r8
 801e3b8:	1200      	asrs	r0, r0, #8
 801e3ba:	7048      	strb	r0, [r1, #1]
 801e3bc:	78a0      	ldrb	r0, [r4, #2]
 801e3be:	78bf      	ldrb	r7, [r7, #2]
 801e3c0:	4350      	muls	r0, r2
 801e3c2:	78aa      	ldrb	r2, [r5, #2]
 801e3c4:	fb0e 0007 	mla	r0, lr, r7, r0
 801e3c8:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e3cc:	789a      	ldrb	r2, [r3, #2]
 801e3ce:	fb06 c202 	mla	r2, r6, r2, ip
 801e3d2:	1212      	asrs	r2, r2, #8
 801e3d4:	708a      	strb	r2, [r1, #2]
 801e3d6:	b002      	add	sp, #8
 801e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3dc:	af01      	add	r7, sp, #4
 801e3de:	e797      	b.n	801e310 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e3e0:	ac01      	add	r4, sp, #4
 801e3e2:	4627      	mov	r7, r4
 801e3e4:	e7a0      	b.n	801e328 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e3e6:	ac01      	add	r4, sp, #4
 801e3e8:	e79e      	b.n	801e328 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e3ea:	ad01      	add	r5, sp, #4
 801e3ec:	e7ac      	b.n	801e348 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801e3ee:	ab01      	add	r3, sp, #4
 801e3f0:	461d      	mov	r5, r3
 801e3f2:	e7b6      	b.n	801e362 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801e3f4:	ab01      	add	r3, sp, #4
 801e3f6:	e7b4      	b.n	801e362 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801e3f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3fc:	b08d      	sub	sp, #52	; 0x34
 801e3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e402:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801e406:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e408:	900b      	str	r0, [sp, #44]	; 0x2c
 801e40a:	9306      	str	r3, [sp, #24]
 801e40c:	6850      	ldr	r0, [r2, #4]
 801e40e:	6812      	ldr	r2, [r2, #0]
 801e410:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e412:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801e416:	fb00 1303 	mla	r3, r0, r3, r1
 801e41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e41e:	18d3      	adds	r3, r2, r3
 801e420:	9307      	str	r3, [sp, #28]
 801e422:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	9308      	str	r3, [sp, #32]
 801e428:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e42a:	685d      	ldr	r5, [r3, #4]
 801e42c:	3504      	adds	r5, #4
 801e42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e430:	2b00      	cmp	r3, #0
 801e432:	dc03      	bgt.n	801e43c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e436:	2b00      	cmp	r3, #0
 801e438:	f340 81e6 	ble.w	801e808 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801e43c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e43e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e442:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e446:	1e48      	subs	r0, r1, #1
 801e448:	1e56      	subs	r6, r2, #1
 801e44a:	9b06      	ldr	r3, [sp, #24]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	f340 80bd 	ble.w	801e5cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e452:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e454:	1427      	asrs	r7, r4, #16
 801e456:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e45a:	d406      	bmi.n	801e46a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e45c:	4287      	cmp	r7, r0
 801e45e:	da04      	bge.n	801e46a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e460:	2b00      	cmp	r3, #0
 801e462:	db02      	blt.n	801e46a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e464:	42b3      	cmp	r3, r6
 801e466:	f2c0 80b2 	blt.w	801e5ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e46a:	3701      	adds	r7, #1
 801e46c:	f100 80a1 	bmi.w	801e5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e470:	42b9      	cmp	r1, r7
 801e472:	f2c0 809e 	blt.w	801e5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e476:	3301      	adds	r3, #1
 801e478:	f100 809b 	bmi.w	801e5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e47c:	429a      	cmp	r2, r3
 801e47e:	f2c0 8098 	blt.w	801e5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e482:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801e486:	f1bb 0f00 	cmp.w	fp, #0
 801e48a:	f340 80bf 	ble.w	801e60c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e48e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e490:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e492:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e494:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e498:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801e49c:	1420      	asrs	r0, r4, #16
 801e49e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e4a0:	ea4f 4723 	mov.w	r7, r3, asr #16
 801e4a4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e4a8:	6892      	ldr	r2, [r2, #8]
 801e4aa:	f100 8103 	bmi.w	801e6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e4ae:	f102 3eff 	add.w	lr, r2, #4294967295
 801e4b2:	4570      	cmp	r0, lr
 801e4b4:	f280 80fe 	bge.w	801e6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e4b8:	2f00      	cmp	r7, #0
 801e4ba:	f2c0 80fb 	blt.w	801e6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e4be:	f10c 3eff 	add.w	lr, ip, #4294967295
 801e4c2:	4577      	cmp	r7, lr
 801e4c4:	f280 80f6 	bge.w	801e6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e4c8:	b212      	sxth	r2, r2
 801e4ca:	fb07 0002 	mla	r0, r7, r2, r0
 801e4ce:	9f08      	ldr	r7, [sp, #32]
 801e4d0:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e4d4:	eb07 0e00 	add.w	lr, r7, r0
 801e4d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e4dc:	eb05 0c08 	add.w	ip, r5, r8
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	f000 80d8 	beq.w	801e696 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e4e6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801e4ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e4ee:	442f      	add	r7, r5
 801e4f0:	2900      	cmp	r1, #0
 801e4f2:	f000 80d9 	beq.w	801e6a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e4f6:	eb0e 0002 	add.w	r0, lr, r2
 801e4fa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801e4fe:	7840      	ldrb	r0, [r0, #1]
 801e500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e508:	442a      	add	r2, r5
 801e50a:	4428      	add	r0, r5
 801e50c:	b29b      	uxth	r3, r3
 801e50e:	f815 a008 	ldrb.w	sl, [r5, r8]
 801e512:	b289      	uxth	r1, r1
 801e514:	f897 8000 	ldrb.w	r8, [r7]
 801e518:	fb03 f901 	mul.w	r9, r3, r1
 801e51c:	011b      	lsls	r3, r3, #4
 801e51e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e522:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e526:	eba3 0309 	sub.w	r3, r3, r9
 801e52a:	b289      	uxth	r1, r1
 801e52c:	b29b      	uxth	r3, r3
 801e52e:	ebae 0e01 	sub.w	lr, lr, r1
 801e532:	fb03 f808 	mul.w	r8, r3, r8
 801e536:	fa1f fe8e 	uxth.w	lr, lr
 801e53a:	fb0e 880a 	mla	r8, lr, sl, r8
 801e53e:	f892 a000 	ldrb.w	sl, [r2]
 801e542:	fb01 880a 	mla	r8, r1, sl, r8
 801e546:	f890 a000 	ldrb.w	sl, [r0]
 801e54a:	fb09 880a 	mla	r8, r9, sl, r8
 801e54e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e552:	f886 8000 	strb.w	r8, [r6]
 801e556:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e55a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801e55e:	fb03 f808 	mul.w	r8, r3, r8
 801e562:	fb0e 880a 	mla	r8, lr, sl, r8
 801e566:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e56a:	fb01 880a 	mla	r8, r1, sl, r8
 801e56e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e572:	fb09 880a 	mla	r8, r9, sl, r8
 801e576:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e57a:	f886 8001 	strb.w	r8, [r6, #1]
 801e57e:	78bf      	ldrb	r7, [r7, #2]
 801e580:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e584:	437b      	muls	r3, r7
 801e586:	7892      	ldrb	r2, [r2, #2]
 801e588:	fb0e 330c 	mla	r3, lr, ip, r3
 801e58c:	fb01 3102 	mla	r1, r1, r2, r3
 801e590:	7882      	ldrb	r2, [r0, #2]
 801e592:	fb09 1902 	mla	r9, r9, r2, r1
 801e596:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e59a:	f886 9002 	strb.w	r9, [r6, #2]
 801e59e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5a0:	3603      	adds	r6, #3
 801e5a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e5a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e5a8:	441c      	add	r4, r3
 801e5aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e5ac:	4413      	add	r3, r2
 801e5ae:	9318      	str	r3, [sp, #96]	; 0x60
 801e5b0:	e769      	b.n	801e486 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e5b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5b4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801e5b6:	441c      	add	r4, r3
 801e5b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e5ba:	443b      	add	r3, r7
 801e5bc:	9318      	str	r3, [sp, #96]	; 0x60
 801e5be:	9b06      	ldr	r3, [sp, #24]
 801e5c0:	3b01      	subs	r3, #1
 801e5c2:	9306      	str	r3, [sp, #24]
 801e5c4:	9b07      	ldr	r3, [sp, #28]
 801e5c6:	3303      	adds	r3, #3
 801e5c8:	9307      	str	r3, [sp, #28]
 801e5ca:	e73e      	b.n	801e44a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e5cc:	d026      	beq.n	801e61c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801e5ce:	9b06      	ldr	r3, [sp, #24]
 801e5d0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e5d2:	3b01      	subs	r3, #1
 801e5d4:	fb00 4003 	mla	r0, r0, r3, r4
 801e5d8:	1400      	asrs	r0, r0, #16
 801e5da:	f53f af52 	bmi.w	801e482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5de:	3901      	subs	r1, #1
 801e5e0:	4288      	cmp	r0, r1
 801e5e2:	f6bf af4e 	bge.w	801e482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e5e8:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e5ea:	fb01 0303 	mla	r3, r1, r3, r0
 801e5ee:	141b      	asrs	r3, r3, #16
 801e5f0:	f53f af47 	bmi.w	801e482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5f4:	3a01      	subs	r2, #1
 801e5f6:	4293      	cmp	r3, r2
 801e5f8:	f6bf af43 	bge.w	801e482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5fc:	9b07      	ldr	r3, [sp, #28]
 801e5fe:	f8dd a018 	ldr.w	sl, [sp, #24]
 801e602:	f103 0803 	add.w	r8, r3, #3
 801e606:	f1ba 0f00 	cmp.w	sl, #0
 801e60a:	dc71      	bgt.n	801e6f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e60c:	9b06      	ldr	r3, [sp, #24]
 801e60e:	9a07      	ldr	r2, [sp, #28]
 801e610:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e618:	441a      	add	r2, r3
 801e61a:	9207      	str	r2, [sp, #28]
 801e61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e61e:	2b00      	cmp	r3, #0
 801e620:	f340 80f2 	ble.w	801e808 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801e624:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e628:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e62a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e62e:	eeb0 6a62 	vmov.f32	s12, s5
 801e632:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e636:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e63a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e63e:	ee16 4a10 	vmov	r4, s12
 801e642:	eeb0 6a43 	vmov.f32	s12, s6
 801e646:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e64a:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801e64e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e652:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e656:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e65a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e65e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e662:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e666:	ee12 2a90 	vmov	r2, s5
 801e66a:	eef0 2a47 	vmov.f32	s5, s14
 801e66e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e672:	ee13 2a10 	vmov	r2, s6
 801e676:	9319      	str	r3, [sp, #100]	; 0x64
 801e678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e67a:	eeb0 3a67 	vmov.f32	s6, s15
 801e67e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e682:	931a      	str	r3, [sp, #104]	; 0x68
 801e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e688:	3b01      	subs	r3, #1
 801e68a:	9309      	str	r3, [sp, #36]	; 0x24
 801e68c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e68e:	bf08      	it	eq
 801e690:	4613      	moveq	r3, r2
 801e692:	9306      	str	r3, [sp, #24]
 801e694:	e6cb      	b.n	801e42e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e696:	b151      	cbz	r1, 801e6ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e698:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801e69c:	4660      	mov	r0, ip
 801e69e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e6a2:	442a      	add	r2, r5
 801e6a4:	4667      	mov	r7, ip
 801e6a6:	e731      	b.n	801e50c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e6a8:	4660      	mov	r0, ip
 801e6aa:	4662      	mov	r2, ip
 801e6ac:	e72e      	b.n	801e50c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e6ae:	4660      	mov	r0, ip
 801e6b0:	4662      	mov	r2, ip
 801e6b2:	e7f7      	b.n	801e6a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e6b4:	f110 0e01 	adds.w	lr, r0, #1
 801e6b8:	f53f af71 	bmi.w	801e59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e6bc:	4572      	cmp	r2, lr
 801e6be:	f6ff af6e 	blt.w	801e59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e6c2:	f117 0e01 	adds.w	lr, r7, #1
 801e6c6:	f53f af6a 	bmi.w	801e59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e6ca:	45f4      	cmp	ip, lr
 801e6cc:	f6ff af67 	blt.w	801e59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e6d0:	b212      	sxth	r2, r2
 801e6d2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801e6d6:	fa0f f38c 	sxth.w	r3, ip
 801e6da:	9200      	str	r2, [sp, #0]
 801e6dc:	4631      	mov	r1, r6
 801e6de:	9a08      	ldr	r2, [sp, #32]
 801e6e0:	9301      	str	r3, [sp, #4]
 801e6e2:	462b      	mov	r3, r5
 801e6e4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801e6e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e6ea:	f7ff fde9 	bl	801e2c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801e6ee:	e756      	b.n	801e59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e6f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e6f2:	1426      	asrs	r6, r4, #16
 801e6f4:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e6f6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e6fa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e6fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e700:	1400      	asrs	r0, r0, #16
 801e702:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e706:	fb02 6000 	mla	r0, r2, r0, r6
 801e70a:	9e08      	ldr	r6, [sp, #32]
 801e70c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e710:	eb06 0c00 	add.w	ip, r6, r0
 801e714:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e718:	eb05 070e 	add.w	r7, r5, lr
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	d064      	beq.n	801e7ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801e720:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801e724:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e728:	442e      	add	r6, r5
 801e72a:	2900      	cmp	r1, #0
 801e72c:	d066      	beq.n	801e7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801e72e:	eb0c 0002 	add.w	r0, ip, r2
 801e732:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e736:	7840      	ldrb	r0, [r0, #1]
 801e738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e73c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e740:	442a      	add	r2, r5
 801e742:	4428      	add	r0, r5
 801e744:	b29b      	uxth	r3, r3
 801e746:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801e74a:	b289      	uxth	r1, r1
 801e74c:	f896 e000 	ldrb.w	lr, [r6]
 801e750:	f108 0803 	add.w	r8, r8, #3
 801e754:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e758:	fb03 f901 	mul.w	r9, r3, r1
 801e75c:	011b      	lsls	r3, r3, #4
 801e75e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e762:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e766:	eba3 0309 	sub.w	r3, r3, r9
 801e76a:	b289      	uxth	r1, r1
 801e76c:	b29b      	uxth	r3, r3
 801e76e:	ebac 0c01 	sub.w	ip, ip, r1
 801e772:	fb03 fe0e 	mul.w	lr, r3, lr
 801e776:	fa1f fc8c 	uxth.w	ip, ip
 801e77a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e77e:	f892 b000 	ldrb.w	fp, [r2]
 801e782:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e786:	f890 b000 	ldrb.w	fp, [r0]
 801e78a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e78e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e792:	f808 ec06 	strb.w	lr, [r8, #-6]
 801e796:	f896 e001 	ldrb.w	lr, [r6, #1]
 801e79a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e79e:	fb03 fe0e 	mul.w	lr, r3, lr
 801e7a2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e7a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e7aa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e7ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e7b2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e7b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e7ba:	f808 ec05 	strb.w	lr, [r8, #-5]
 801e7be:	78b6      	ldrb	r6, [r6, #2]
 801e7c0:	78bf      	ldrb	r7, [r7, #2]
 801e7c2:	4373      	muls	r3, r6
 801e7c4:	7896      	ldrb	r6, [r2, #2]
 801e7c6:	7882      	ldrb	r2, [r0, #2]
 801e7c8:	fb0c 3307 	mla	r3, ip, r7, r3
 801e7cc:	fb01 3306 	mla	r3, r1, r6, r3
 801e7d0:	fb09 3902 	mla	r9, r9, r2, r3
 801e7d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e7d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e7d8:	441c      	add	r4, r3
 801e7da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e7dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7e0:	4413      	add	r3, r2
 801e7e2:	f808 9c04 	strb.w	r9, [r8, #-4]
 801e7e6:	9318      	str	r3, [sp, #96]	; 0x60
 801e7e8:	e70d      	b.n	801e606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e7ea:	b151      	cbz	r1, 801e802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801e7ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e7f0:	4638      	mov	r0, r7
 801e7f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7f6:	442a      	add	r2, r5
 801e7f8:	463e      	mov	r6, r7
 801e7fa:	e7a3      	b.n	801e744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e7fc:	4638      	mov	r0, r7
 801e7fe:	463a      	mov	r2, r7
 801e800:	e7a0      	b.n	801e744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e802:	4638      	mov	r0, r7
 801e804:	463a      	mov	r2, r7
 801e806:	e7f7      	b.n	801e7f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801e808:	b00d      	add	sp, #52	; 0x34
 801e80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e80e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801e80e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e812:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801e816:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e81a:	2d00      	cmp	r5, #0
 801e81c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801e820:	fb05 700c 	mla	r0, r5, ip, r7
 801e824:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801e828:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801e82c:	eb02 0800 	add.w	r8, r2, r0
 801e830:	f2c0 8118 	blt.w	801ea64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e834:	45a9      	cmp	r9, r5
 801e836:	f340 8115 	ble.w	801ea64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e83a:	2f00      	cmp	r7, #0
 801e83c:	f2c0 8110 	blt.w	801ea60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e840:	45bc      	cmp	ip, r7
 801e842:	f340 810d 	ble.w	801ea60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e846:	5c12      	ldrb	r2, [r2, r0]
 801e848:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e84c:	1c7a      	adds	r2, r7, #1
 801e84e:	f100 810c 	bmi.w	801ea6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e852:	4594      	cmp	ip, r2
 801e854:	f340 8109 	ble.w	801ea6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e858:	2c00      	cmp	r4, #0
 801e85a:	f000 8108 	beq.w	801ea6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801e85e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e862:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e866:	3501      	adds	r5, #1
 801e868:	f100 8105 	bmi.w	801ea76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e86c:	45a9      	cmp	r9, r5
 801e86e:	f340 8102 	ble.w	801ea76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e872:	f1be 0f00 	cmp.w	lr, #0
 801e876:	f000 8101 	beq.w	801ea7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801e87a:	2f00      	cmp	r7, #0
 801e87c:	f2c0 80f9 	blt.w	801ea72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e880:	45bc      	cmp	ip, r7
 801e882:	f340 80f6 	ble.w	801ea72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e886:	f818 200c 	ldrb.w	r2, [r8, ip]
 801e88a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e88e:	3701      	adds	r7, #1
 801e890:	f100 80f7 	bmi.w	801ea82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e894:	45bc      	cmp	ip, r7
 801e896:	f340 80f4 	ble.w	801ea82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e89a:	2c00      	cmp	r4, #0
 801e89c:	f000 80f3 	beq.w	801ea86 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801e8a0:	44c4      	add	ip, r8
 801e8a2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e8a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e8aa:	fa1f fc84 	uxth.w	ip, r4
 801e8ae:	fa1f f48e 	uxth.w	r4, lr
 801e8b2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e8b6:	fb04 fe0c 	mul.w	lr, r4, ip
 801e8ba:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e8be:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e8c2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801e8c6:	ebac 070e 	sub.w	r7, ip, lr
 801e8ca:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e8ce:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e8d2:	b2a4      	uxth	r4, r4
 801e8d4:	b2bf      	uxth	r7, r7
 801e8d6:	1b1b      	subs	r3, r3, r4
 801e8d8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e8dc:	fb07 fc0a 	mul.w	ip, r7, sl
 801e8e0:	b29b      	uxth	r3, r3
 801e8e2:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e8e6:	9300      	str	r3, [sp, #0]
 801e8e8:	fb04 cc09 	mla	ip, r4, r9, ip
 801e8ec:	fb0e cc08 	mla	ip, lr, r8, ip
 801e8f0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e8f4:	9301      	str	r3, [sp, #4]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	f000 80af 	beq.w	801ea5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801e8fc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e900:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e904:	fb0b fc0c 	mul.w	ip, fp, ip
 801e908:	fb0b f606 	mul.w	r6, fp, r6
 801e90c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e910:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e914:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801e918:	44dc      	add	ip, fp
 801e91a:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801e91e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e922:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e926:	fb0a fb0b 	mul.w	fp, sl, fp
 801e92a:	fb0a fa00 	mul.w	sl, sl, r0
 801e92e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801e932:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e936:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e93a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e93e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e942:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e946:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e94a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e94e:	0a36      	lsrs	r6, r6, #8
 801e950:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e954:	44dc      	add	ip, fp
 801e956:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801e95a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e95e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e962:	fb09 fb0b 	mul.w	fp, r9, fp
 801e966:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e96a:	fb09 f905 	mul.w	r9, r9, r5
 801e96e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e972:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e976:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801e97a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e97e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e982:	fb0c fc07 	mul.w	ip, ip, r7
 801e986:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e98a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801e98e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e992:	4458      	add	r0, fp
 801e994:	fb08 f505 	mul.w	r5, r8, r5
 801e998:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e99c:	fb08 f802 	mul.w	r8, r8, r2
 801e9a0:	0a00      	lsrs	r0, r0, #8
 801e9a2:	0a2a      	lsrs	r2, r5, #8
 801e9a4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e9a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e9ac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e9b0:	4415      	add	r5, r2
 801e9b2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801e9b6:	0a2d      	lsrs	r5, r5, #8
 801e9b8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e9bc:	9a00      	ldr	r2, [sp, #0]
 801e9be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e9c2:	fb03 cc02 	mla	ip, r3, r2, ip
 801e9c6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e9ca:	9b01      	ldr	r3, [sp, #4]
 801e9cc:	fb05 c50e 	mla	r5, r5, lr, ip
 801e9d0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e9d4:	fb00 5004 	mla	r0, r0, r4, r5
 801e9d8:	0a00      	lsrs	r0, r0, #8
 801e9da:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e9de:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801e9e2:	4378      	muls	r0, r7
 801e9e4:	fb02 0006 	mla	r0, r2, r6, r0
 801e9e8:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e9ec:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801e9f0:	fb04 e000 	mla	r0, r4, r0, lr
 801e9f4:	0a00      	lsrs	r0, r0, #8
 801e9f6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e9fa:	4328      	orrs	r0, r5
 801e9fc:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801ea00:	b2ad      	uxth	r5, r5
 801ea02:	b2c4      	uxtb	r4, r0
 801ea04:	436b      	muls	r3, r5
 801ea06:	fb14 f405 	smulbb	r4, r4, r5
 801ea0a:	1c5a      	adds	r2, r3, #1
 801ea0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea10:	780b      	ldrb	r3, [r1, #0]
 801ea12:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ea16:	b2d2      	uxtb	r2, r2
 801ea18:	fb03 4302 	mla	r3, r3, r2, r4
 801ea1c:	b29b      	uxth	r3, r3
 801ea1e:	1c5c      	adds	r4, r3, #1
 801ea20:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ea24:	784c      	ldrb	r4, [r1, #1]
 801ea26:	fb14 f402 	smulbb	r4, r4, r2
 801ea2a:	121b      	asrs	r3, r3, #8
 801ea2c:	700b      	strb	r3, [r1, #0]
 801ea2e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ea32:	fb03 4305 	mla	r3, r3, r5, r4
 801ea36:	b29b      	uxth	r3, r3
 801ea38:	1c5c      	adds	r4, r3, #1
 801ea3a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ea3e:	0c04      	lsrs	r4, r0, #16
 801ea40:	7888      	ldrb	r0, [r1, #2]
 801ea42:	121b      	asrs	r3, r3, #8
 801ea44:	fb10 f002 	smulbb	r0, r0, r2
 801ea48:	704b      	strb	r3, [r1, #1]
 801ea4a:	fb04 0005 	mla	r0, r4, r5, r0
 801ea4e:	b280      	uxth	r0, r0
 801ea50:	1c43      	adds	r3, r0, #1
 801ea52:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ea56:	1200      	asrs	r0, r0, #8
 801ea58:	7088      	strb	r0, [r1, #2]
 801ea5a:	b003      	add	sp, #12
 801ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea60:	2600      	movs	r6, #0
 801ea62:	e6f3      	b.n	801e84c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801ea64:	2000      	movs	r0, #0
 801ea66:	4606      	mov	r6, r0
 801ea68:	e6fd      	b.n	801e866 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ea6a:	2000      	movs	r0, #0
 801ea6c:	e6fb      	b.n	801e866 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ea6e:	4620      	mov	r0, r4
 801ea70:	e6f9      	b.n	801e866 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ea72:	2500      	movs	r5, #0
 801ea74:	e70b      	b.n	801e88e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801ea76:	2200      	movs	r2, #0
 801ea78:	4615      	mov	r5, r2
 801ea7a:	e716      	b.n	801e8aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ea7c:	4672      	mov	r2, lr
 801ea7e:	4675      	mov	r5, lr
 801ea80:	e713      	b.n	801e8aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ea82:	2200      	movs	r2, #0
 801ea84:	e711      	b.n	801e8aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ea86:	4622      	mov	r2, r4
 801ea88:	e70f      	b.n	801e8aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801ea8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea8e:	b09f      	sub	sp, #124	; 0x7c
 801ea90:	921b      	str	r2, [sp, #108]	; 0x6c
 801ea92:	9309      	str	r3, [sp, #36]	; 0x24
 801ea94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ea96:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ea9a:	901d      	str	r0, [sp, #116]	; 0x74
 801ea9c:	931c      	str	r3, [sp, #112]	; 0x70
 801ea9e:	6850      	ldr	r0, [r2, #4]
 801eaa0:	9119      	str	r1, [sp, #100]	; 0x64
 801eaa2:	6812      	ldr	r2, [r2, #0]
 801eaa4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801eaa6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801eaaa:	fb00 1303 	mla	r3, r0, r3, r1
 801eaae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eab2:	18d3      	adds	r3, r2, r3
 801eab4:	930c      	str	r3, [sp, #48]	; 0x30
 801eab6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	9312      	str	r3, [sp, #72]	; 0x48
 801eabc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eabe:	685e      	ldr	r6, [r3, #4]
 801eac0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801eac4:	3604      	adds	r6, #4
 801eac6:	930d      	str	r3, [sp, #52]	; 0x34
 801eac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	dc03      	bgt.n	801ead6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	f340 8378 	ble.w	801f1c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ead6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ead8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eadc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eae0:	1e48      	subs	r0, r1, #1
 801eae2:	1e57      	subs	r7, r2, #1
 801eae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	f340 818c 	ble.w	801ee04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801eaec:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801eaee:	142b      	asrs	r3, r5, #16
 801eaf0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801eaf4:	d406      	bmi.n	801eb04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eaf6:	4584      	cmp	ip, r0
 801eaf8:	da04      	bge.n	801eb04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	db02      	blt.n	801eb04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eafe:	42bb      	cmp	r3, r7
 801eb00:	f2c0 8181 	blt.w	801ee06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801eb04:	f11c 0c01 	adds.w	ip, ip, #1
 801eb08:	f100 816f 	bmi.w	801edea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801eb0c:	4561      	cmp	r1, ip
 801eb0e:	f2c0 816c 	blt.w	801edea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801eb12:	3301      	adds	r3, #1
 801eb14:	f100 8169 	bmi.w	801edea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	f2c0 8166 	blt.w	801edea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eb22:	931a      	str	r3, [sp, #104]	; 0x68
 801eb24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	f340 818c 	ble.w	801ee44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801eb2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb2e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801eb32:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801eb36:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eb3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eb3c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801eb40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb42:	141b      	asrs	r3, r3, #16
 801eb44:	f100 81d0 	bmi.w	801eee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eb48:	f100 38ff 	add.w	r8, r0, #4294967295
 801eb4c:	4543      	cmp	r3, r8
 801eb4e:	f280 81cb 	bge.w	801eee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eb52:	f1bc 0f00 	cmp.w	ip, #0
 801eb56:	f2c0 81c7 	blt.w	801eee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eb5a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801eb5e:	45c4      	cmp	ip, r8
 801eb60:	f280 81c2 	bge.w	801eee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eb64:	b200      	sxth	r0, r0
 801eb66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eb68:	fb0c 3300 	mla	r3, ip, r0, r3
 801eb6c:	eb04 0803 	add.w	r8, r4, r3
 801eb70:	5ce3      	ldrb	r3, [r4, r3]
 801eb72:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801eb76:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801eb7a:	2a00      	cmp	r2, #0
 801eb7c:	f000 81a9 	beq.w	801eed2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801eb80:	f898 c001 	ldrb.w	ip, [r8, #1]
 801eb84:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801eb88:	940e      	str	r4, [sp, #56]	; 0x38
 801eb8a:	0e24      	lsrs	r4, r4, #24
 801eb8c:	9415      	str	r4, [sp, #84]	; 0x54
 801eb8e:	b179      	cbz	r1, 801ebb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801eb90:	eb08 0c00 	add.w	ip, r8, r0
 801eb94:	f818 0000 	ldrb.w	r0, [r8, r0]
 801eb98:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801eb9c:	900a      	str	r0, [sp, #40]	; 0x28
 801eb9e:	0e00      	lsrs	r0, r0, #24
 801eba0:	9013      	str	r0, [sp, #76]	; 0x4c
 801eba2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801eba6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ebaa:	900f      	str	r0, [sp, #60]	; 0x3c
 801ebac:	0e00      	lsrs	r0, r0, #24
 801ebae:	9016      	str	r0, [sp, #88]	; 0x58
 801ebb0:	b292      	uxth	r2, r2
 801ebb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ebb4:	b289      	uxth	r1, r1
 801ebb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ebb8:	fb02 f901 	mul.w	r9, r2, r1
 801ebbc:	0112      	lsls	r2, r2, #4
 801ebbe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ebc2:	eba2 0809 	sub.w	r8, r2, r9
 801ebc6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ebca:	b289      	uxth	r1, r1
 801ebcc:	fa1f f888 	uxth.w	r8, r8
 801ebd0:	1a52      	subs	r2, r2, r1
 801ebd2:	fb08 f000 	mul.w	r0, r8, r0
 801ebd6:	b292      	uxth	r2, r2
 801ebd8:	fb02 000e 	mla	r0, r2, lr, r0
 801ebdc:	fb01 0004 	mla	r0, r1, r4, r0
 801ebe0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ebe2:	fb09 0004 	mla	r0, r9, r4, r0
 801ebe6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ebea:	2800      	cmp	r0, #0
 801ebec:	f000 80f2 	beq.w	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ebf0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ebf4:	d01b      	beq.n	801ec2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ebf6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ebfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ebfe:	fb0e fa0a 	mul.w	sl, lr, sl
 801ec02:	fb0e fe03 	mul.w	lr, lr, r3
 801ec06:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ec0a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ec0e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ec12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec16:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ec1a:	4453      	add	r3, sl
 801ec1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec20:	0a1b      	lsrs	r3, r3, #8
 801ec22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ec26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec2a:	ea43 030c 	orr.w	r3, r3, ip
 801ec2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec30:	2cff      	cmp	r4, #255	; 0xff
 801ec32:	d021      	beq.n	801ec78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ec34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ec36:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ec3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec3c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ec40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ec42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ec46:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec48:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ec4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ec50:	fb04 fa0a 	mul.w	sl, r4, sl
 801ec54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ec58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ec5c:	44de      	add	lr, fp
 801ec5e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ec62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ec6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ec6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ec72:	ea4e 040a 	orr.w	r4, lr, sl
 801ec76:	940e      	str	r4, [sp, #56]	; 0x38
 801ec78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec7a:	2cff      	cmp	r4, #255	; 0xff
 801ec7c:	d021      	beq.n	801ecc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ec7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ec80:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ec84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec86:	fb04 fb0b 	mul.w	fp, r4, fp
 801ec8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ec8c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ec90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec92:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ec96:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ec9a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ec9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eca2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eca6:	44de      	add	lr, fp
 801eca8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ecac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ecb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ecb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ecb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ecbc:	ea4e 040a 	orr.w	r4, lr, sl
 801ecc0:	940a      	str	r4, [sp, #40]	; 0x28
 801ecc2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ecc4:	2cff      	cmp	r4, #255	; 0xff
 801ecc6:	d021      	beq.n	801ed0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801ecc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ecca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ecce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ecd0:	fb04 fb0b 	mul.w	fp, r4, fp
 801ecd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ecd6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ecda:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ecdc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ece0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ece4:	fb04 fa0a 	mul.w	sl, r4, sl
 801ece8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ecec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ecf0:	44de      	add	lr, fp
 801ecf2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ecf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ecfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ecfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ed02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ed06:	ea4e 040a 	orr.w	r4, lr, sl
 801ed0a:	940f      	str	r4, [sp, #60]	; 0x3c
 801ed0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed0e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ed12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed16:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ed1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ed1c:	fb08 fc0c 	mul.w	ip, r8, ip
 801ed20:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ed24:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ed28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ed2a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ed2e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ed32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed34:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ed38:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ed3c:	fb08 f80e 	mul.w	r8, r8, lr
 801ed40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed44:	fb02 8303 	mla	r3, r2, r3, r8
 801ed48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed4e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ed52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed54:	fb01 330a 	mla	r3, r1, sl, r3
 801ed58:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ed5c:	fb09 3901 	mla	r9, r9, r1, r3
 801ed60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed62:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ed64:	4343      	muls	r3, r0
 801ed66:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ed6a:	1c58      	adds	r0, r3, #1
 801ed6c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ed70:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ed74:	ea4c 0c09 	orr.w	ip, ip, r9
 801ed78:	783b      	ldrb	r3, [r7, #0]
 801ed7a:	fa5f f28c 	uxtb.w	r2, ip
 801ed7e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ed82:	fb12 f201 	smulbb	r2, r2, r1
 801ed86:	b2c0      	uxtb	r0, r0
 801ed88:	fb03 2300 	mla	r3, r3, r0, r2
 801ed8c:	b29b      	uxth	r3, r3
 801ed8e:	1c5a      	adds	r2, r3, #1
 801ed90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ed94:	787a      	ldrb	r2, [r7, #1]
 801ed96:	fb12 f200 	smulbb	r2, r2, r0
 801ed9a:	121b      	asrs	r3, r3, #8
 801ed9c:	703b      	strb	r3, [r7, #0]
 801ed9e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801eda2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eda6:	fb03 2301 	mla	r3, r3, r1, r2
 801edaa:	b29b      	uxth	r3, r3
 801edac:	1c5a      	adds	r2, r3, #1
 801edae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801edb2:	121b      	asrs	r3, r3, #8
 801edb4:	707b      	strb	r3, [r7, #1]
 801edb6:	78bb      	ldrb	r3, [r7, #2]
 801edb8:	fb13 f000 	smulbb	r0, r3, r0
 801edbc:	fb0c 0c01 	mla	ip, ip, r1, r0
 801edc0:	fa1f fc8c 	uxth.w	ip, ip
 801edc4:	f10c 0301 	add.w	r3, ip, #1
 801edc8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801edcc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801edd0:	f887 c002 	strb.w	ip, [r7, #2]
 801edd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801edd6:	3703      	adds	r7, #3
 801edd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801edda:	441a      	add	r2, r3
 801eddc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801edde:	441d      	add	r5, r3
 801ede0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ede2:	9229      	str	r2, [sp, #164]	; 0xa4
 801ede4:	3b01      	subs	r3, #1
 801ede6:	931a      	str	r3, [sp, #104]	; 0x68
 801ede8:	e69c      	b.n	801eb24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801edea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801edec:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801edee:	441c      	add	r4, r3
 801edf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801edf2:	441d      	add	r5, r3
 801edf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edf6:	9429      	str	r4, [sp, #164]	; 0xa4
 801edf8:	3b01      	subs	r3, #1
 801edfa:	9309      	str	r3, [sp, #36]	; 0x24
 801edfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801edfe:	3303      	adds	r3, #3
 801ee00:	930c      	str	r3, [sp, #48]	; 0x30
 801ee02:	e66f      	b.n	801eae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ee04:	d026      	beq.n	801ee54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801ee06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee08:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ee0a:	3b01      	subs	r3, #1
 801ee0c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ee0e:	fb00 4003 	mla	r0, r0, r3, r4
 801ee12:	1400      	asrs	r0, r0, #16
 801ee14:	f53f ae83 	bmi.w	801eb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee18:	3901      	subs	r1, #1
 801ee1a:	4288      	cmp	r0, r1
 801ee1c:	f6bf ae7f 	bge.w	801eb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee20:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ee22:	fb01 5303 	mla	r3, r1, r3, r5
 801ee26:	141b      	asrs	r3, r3, #16
 801ee28:	f53f ae79 	bmi.w	801eb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee2c:	3a01      	subs	r2, #1
 801ee2e:	4293      	cmp	r3, r2
 801ee30:	f6bf ae75 	bge.w	801eb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee36:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ee3a:	f103 0e03 	add.w	lr, r3, #3
 801ee3e:	f1bb 0f00 	cmp.w	fp, #0
 801ee42:	dc71      	bgt.n	801ef28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ee44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee46:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ee4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ee50:	4423      	add	r3, r4
 801ee52:	930c      	str	r3, [sp, #48]	; 0x30
 801ee54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	f340 81b5 	ble.w	801f1c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ee5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee62:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee6a:	eef0 6a62 	vmov.f32	s13, s5
 801ee6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ee72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee7a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ee7e:	eef0 6a43 	vmov.f32	s13, s6
 801ee82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee86:	ee16 5a90 	vmov	r5, s13
 801ee8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eea2:	ee12 2a90 	vmov	r2, s5
 801eea6:	eef0 2a47 	vmov.f32	s5, s14
 801eeaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeae:	ee13 2a10 	vmov	r2, s6
 801eeb2:	932b      	str	r3, [sp, #172]	; 0xac
 801eeb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eeb6:	eeb0 3a67 	vmov.f32	s6, s15
 801eeba:	fb92 f3f3 	sdiv	r3, r2, r3
 801eebe:	932c      	str	r3, [sp, #176]	; 0xb0
 801eec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eec2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801eec4:	3b01      	subs	r3, #1
 801eec6:	9319      	str	r3, [sp, #100]	; 0x64
 801eec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eeca:	bf08      	it	eq
 801eecc:	4613      	moveq	r3, r2
 801eece:	9309      	str	r3, [sp, #36]	; 0x24
 801eed0:	e5fa      	b.n	801eac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eed2:	2900      	cmp	r1, #0
 801eed4:	f43f ae6c 	beq.w	801ebb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801eed8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801eedc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801eee0:	900a      	str	r0, [sp, #40]	; 0x28
 801eee2:	0e00      	lsrs	r0, r0, #24
 801eee4:	9013      	str	r0, [sp, #76]	; 0x4c
 801eee6:	e663      	b.n	801ebb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801eee8:	f113 0801 	adds.w	r8, r3, #1
 801eeec:	f53f af72 	bmi.w	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eef0:	4540      	cmp	r0, r8
 801eef2:	f6ff af6f 	blt.w	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eef6:	f11c 0801 	adds.w	r8, ip, #1
 801eefa:	f53f af6b 	bmi.w	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eefe:	45c6      	cmp	lr, r8
 801ef00:	f6ff af68 	blt.w	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ef04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ef06:	b200      	sxth	r0, r0
 801ef08:	9302      	str	r3, [sp, #8]
 801ef0a:	fa0f f38e 	sxth.w	r3, lr
 801ef0e:	9000      	str	r0, [sp, #0]
 801ef10:	9301      	str	r3, [sp, #4]
 801ef12:	4633      	mov	r3, r6
 801ef14:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ef16:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ef1a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801ef1e:	4639      	mov	r1, r7
 801ef20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ef22:	f7ff fc74 	bl	801e80e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801ef26:	e755      	b.n	801edd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ef28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ef2a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ef2e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ef30:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ef34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef36:	1427      	asrs	r7, r4, #16
 801ef38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ef3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef3e:	142b      	asrs	r3, r5, #16
 801ef40:	fb01 7303 	mla	r3, r1, r3, r7
 801ef44:	18e7      	adds	r7, r4, r3
 801ef46:	5ce3      	ldrb	r3, [r4, r3]
 801ef48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ef4c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ef50:	2a00      	cmp	r2, #0
 801ef52:	f000 812e 	beq.w	801f1b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801ef56:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ef5a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ef5e:	9410      	str	r4, [sp, #64]	; 0x40
 801ef60:	0e24      	lsrs	r4, r4, #24
 801ef62:	9417      	str	r4, [sp, #92]	; 0x5c
 801ef64:	b170      	cbz	r0, 801ef84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ef66:	eb07 0801 	add.w	r8, r7, r1
 801ef6a:	5c79      	ldrb	r1, [r7, r1]
 801ef6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef70:	910b      	str	r1, [sp, #44]	; 0x2c
 801ef72:	0e09      	lsrs	r1, r1, #24
 801ef74:	9114      	str	r1, [sp, #80]	; 0x50
 801ef76:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ef7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef7e:	9111      	str	r1, [sp, #68]	; 0x44
 801ef80:	0e09      	lsrs	r1, r1, #24
 801ef82:	9118      	str	r1, [sp, #96]	; 0x60
 801ef84:	b292      	uxth	r2, r2
 801ef86:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ef88:	b280      	uxth	r0, r0
 801ef8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ef8c:	fb02 f900 	mul.w	r9, r2, r0
 801ef90:	0112      	lsls	r2, r2, #4
 801ef92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ef96:	eba2 0809 	sub.w	r8, r2, r9
 801ef9a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ef9e:	b280      	uxth	r0, r0
 801efa0:	fa1f f888 	uxth.w	r8, r8
 801efa4:	1a12      	subs	r2, r2, r0
 801efa6:	fb08 f101 	mul.w	r1, r8, r1
 801efaa:	b292      	uxth	r2, r2
 801efac:	fb02 110c 	mla	r1, r2, ip, r1
 801efb0:	fb00 1104 	mla	r1, r0, r4, r1
 801efb4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801efb6:	fb09 1104 	mla	r1, r9, r4, r1
 801efba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801efbe:	2900      	cmp	r1, #0
 801efc0:	f000 80ec 	beq.w	801f19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801efc4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801efc8:	d019      	beq.n	801effe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801efca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801efce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801efd2:	fb0c fa0a 	mul.w	sl, ip, sl
 801efd6:	fb0c fc03 	mul.w	ip, ip, r3
 801efda:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801efde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801efe2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801efe6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801efea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801efee:	4453      	add	r3, sl
 801eff0:	0a3f      	lsrs	r7, r7, #8
 801eff2:	0a1b      	lsrs	r3, r3, #8
 801eff4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801eff8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801effc:	433b      	orrs	r3, r7
 801effe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f000:	2cff      	cmp	r4, #255	; 0xff
 801f002:	d020      	beq.n	801f046 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801f004:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f006:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f00a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f00c:	4367      	muls	r7, r4
 801f00e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f010:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f014:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f018:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f01a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f01e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f022:	fb04 fa0a 	mul.w	sl, r4, sl
 801f026:	44bc      	add	ip, r7
 801f028:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f02c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f030:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f034:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f038:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f03c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f040:	ea4c 040a 	orr.w	r4, ip, sl
 801f044:	9410      	str	r4, [sp, #64]	; 0x40
 801f046:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f048:	2cff      	cmp	r4, #255	; 0xff
 801f04a:	d020      	beq.n	801f08e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801f04c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f04e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f052:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f054:	4367      	muls	r7, r4
 801f056:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f058:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f05c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f060:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f062:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f066:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f06a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f06e:	44bc      	add	ip, r7
 801f070:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f078:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f07c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f080:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f084:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f088:	ea4c 040a 	orr.w	r4, ip, sl
 801f08c:	940b      	str	r4, [sp, #44]	; 0x2c
 801f08e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f090:	2cff      	cmp	r4, #255	; 0xff
 801f092:	d020      	beq.n	801f0d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801f094:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f096:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f09a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f09c:	4367      	muls	r7, r4
 801f09e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f0a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f0a8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f0aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f0ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f0b2:	fb04 fa0a 	mul.w	sl, r4, sl
 801f0b6:	44bc      	add	ip, r7
 801f0b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f0bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f0c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f0c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f0d0:	ea4c 040a 	orr.w	r4, ip, sl
 801f0d4:	9411      	str	r4, [sp, #68]	; 0x44
 801f0d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f0d8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f0dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f0e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f0e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f0e6:	fb08 f707 	mul.w	r7, r8, r7
 801f0ea:	fb02 770c 	mla	r7, r2, ip, r7
 801f0ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f0f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0f4:	fb00 770c 	mla	r7, r0, ip, r7
 801f0f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f0fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f0fe:	fb09 770c 	mla	r7, r9, ip, r7
 801f102:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f106:	fb08 f80c 	mul.w	r8, r8, ip
 801f10a:	0a3f      	lsrs	r7, r7, #8
 801f10c:	fb02 8303 	mla	r3, r2, r3, r8
 801f110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f112:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f116:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f11a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f11c:	fb00 330a 	mla	r3, r0, sl, r3
 801f120:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f124:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f126:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f12c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f130:	434b      	muls	r3, r1
 801f132:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f136:	1c59      	adds	r1, r3, #1
 801f138:	ea47 070c 	orr.w	r7, r7, ip
 801f13c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f140:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f144:	b2fa      	uxtb	r2, r7
 801f146:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f14a:	fb12 f200 	smulbb	r2, r2, r0
 801f14e:	b2c9      	uxtb	r1, r1
 801f150:	fb03 2301 	mla	r3, r3, r1, r2
 801f154:	b29b      	uxth	r3, r3
 801f156:	1c5a      	adds	r2, r3, #1
 801f158:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f15c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f160:	fb12 f201 	smulbb	r2, r2, r1
 801f164:	121b      	asrs	r3, r3, #8
 801f166:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f16a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f16e:	0c3f      	lsrs	r7, r7, #16
 801f170:	fb03 2300 	mla	r3, r3, r0, r2
 801f174:	b29b      	uxth	r3, r3
 801f176:	1c5a      	adds	r2, r3, #1
 801f178:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f17c:	121b      	asrs	r3, r3, #8
 801f17e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f182:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f186:	fb13 f101 	smulbb	r1, r3, r1
 801f18a:	fb07 1700 	mla	r7, r7, r0, r1
 801f18e:	b2bf      	uxth	r7, r7
 801f190:	1c7b      	adds	r3, r7, #1
 801f192:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f196:	123f      	asrs	r7, r7, #8
 801f198:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f19c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f19e:	f10e 0e03 	add.w	lr, lr, #3
 801f1a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f1a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1a8:	441a      	add	r2, r3
 801f1aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f1ac:	9229      	str	r2, [sp, #164]	; 0xa4
 801f1ae:	441d      	add	r5, r3
 801f1b0:	e645      	b.n	801ee3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801f1b2:	2800      	cmp	r0, #0
 801f1b4:	f43f aee6 	beq.w	801ef84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f1b8:	5c79      	ldrb	r1, [r7, r1]
 801f1ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f1be:	910b      	str	r1, [sp, #44]	; 0x2c
 801f1c0:	0e09      	lsrs	r1, r1, #24
 801f1c2:	9114      	str	r1, [sp, #80]	; 0x50
 801f1c4:	e6de      	b.n	801ef84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f1c6:	b01f      	add	sp, #124	; 0x7c
 801f1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801f1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801f1d4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f1d8:	2d00      	cmp	r5, #0
 801f1da:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f1de:	fb05 700e 	mla	r0, r5, lr, r7
 801f1e2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801f1e6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801f1ea:	eb02 0800 	add.w	r8, r2, r0
 801f1ee:	f2c0 8105 	blt.w	801f3fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f1f2:	45a9      	cmp	r9, r5
 801f1f4:	f340 8102 	ble.w	801f3fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f1f8:	2f00      	cmp	r7, #0
 801f1fa:	f2c0 80fd 	blt.w	801f3f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f1fe:	45be      	cmp	lr, r7
 801f200:	f340 80fa 	ble.w	801f3f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f204:	5c12      	ldrb	r2, [r2, r0]
 801f206:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f20a:	1c7a      	adds	r2, r7, #1
 801f20c:	f100 80f9 	bmi.w	801f402 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f210:	4596      	cmp	lr, r2
 801f212:	f340 80f6 	ble.w	801f402 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f216:	2c00      	cmp	r4, #0
 801f218:	f000 80f5 	beq.w	801f406 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801f21c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f220:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f224:	3501      	adds	r5, #1
 801f226:	f100 80f2 	bmi.w	801f40e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f22a:	45a9      	cmp	r9, r5
 801f22c:	f340 80ef 	ble.w	801f40e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f230:	f1bc 0f00 	cmp.w	ip, #0
 801f234:	f000 80ee 	beq.w	801f414 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801f238:	2f00      	cmp	r7, #0
 801f23a:	f2c0 80e6 	blt.w	801f40a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f23e:	45be      	cmp	lr, r7
 801f240:	f340 80e3 	ble.w	801f40a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f244:	f818 200e 	ldrb.w	r2, [r8, lr]
 801f248:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f24c:	3701      	adds	r7, #1
 801f24e:	f100 80e4 	bmi.w	801f41a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f252:	45be      	cmp	lr, r7
 801f254:	f340 80e1 	ble.w	801f41a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f258:	2c00      	cmp	r4, #0
 801f25a:	f000 80e0 	beq.w	801f41e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801f25e:	44c6      	add	lr, r8
 801f260:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f268:	b2a3      	uxth	r3, r4
 801f26a:	fa1f fc8c 	uxth.w	ip, ip
 801f26e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f272:	fb0c fe03 	mul.w	lr, ip, r3
 801f276:	011b      	lsls	r3, r3, #4
 801f278:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f27c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801f280:	eba3 070e 	sub.w	r7, r3, lr
 801f284:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801f288:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f28c:	fa1f f48c 	uxth.w	r4, ip
 801f290:	b2bf      	uxth	r7, r7
 801f292:	1b1b      	subs	r3, r3, r4
 801f294:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f298:	fb07 fc0a 	mul.w	ip, r7, sl
 801f29c:	b29b      	uxth	r3, r3
 801f29e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f2a2:	9300      	str	r3, [sp, #0]
 801f2a4:	fb04 cc09 	mla	ip, r4, r9, ip
 801f2a8:	fb0e cc08 	mla	ip, lr, r8, ip
 801f2ac:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f2b0:	9301      	str	r3, [sp, #4]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	f000 809d 	beq.w	801f3f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801f2b8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f2bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f2c0:	fb0b fc0c 	mul.w	ip, fp, ip
 801f2c4:	fb0b f606 	mul.w	r6, fp, r6
 801f2c8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f2cc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f2d0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f2d4:	44dc      	add	ip, fp
 801f2d6:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801f2da:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f2de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f2e2:	fb0a fb0b 	mul.w	fp, sl, fp
 801f2e6:	fb0a fa00 	mul.w	sl, sl, r0
 801f2ea:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f2ee:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f2f2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f2f6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f2fa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f2fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f302:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f306:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f30a:	0a36      	lsrs	r6, r6, #8
 801f30c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f310:	44dc      	add	ip, fp
 801f312:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f316:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f31a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f31e:	fb09 fb0b 	mul.w	fp, r9, fp
 801f322:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f326:	fb09 f905 	mul.w	r9, r9, r5
 801f32a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f32e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f332:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f336:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f33a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f33e:	fb0c fc07 	mul.w	ip, ip, r7
 801f342:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f346:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f34a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f34e:	4458      	add	r0, fp
 801f350:	fb08 f505 	mul.w	r5, r8, r5
 801f354:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f358:	fb08 f802 	mul.w	r8, r8, r2
 801f35c:	0a00      	lsrs	r0, r0, #8
 801f35e:	0a2a      	lsrs	r2, r5, #8
 801f360:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f364:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f368:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f36c:	4415      	add	r5, r2
 801f36e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f372:	0a2d      	lsrs	r5, r5, #8
 801f374:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f378:	9a00      	ldr	r2, [sp, #0]
 801f37a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f37e:	fb03 cc02 	mla	ip, r3, r2, ip
 801f382:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f386:	9b01      	ldr	r3, [sp, #4]
 801f388:	fb05 c50e 	mla	r5, r5, lr, ip
 801f38c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f390:	43db      	mvns	r3, r3
 801f392:	fb00 5004 	mla	r0, r0, r4, r5
 801f396:	b2db      	uxtb	r3, r3
 801f398:	0a00      	lsrs	r0, r0, #8
 801f39a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f39e:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801f3a2:	4378      	muls	r0, r7
 801f3a4:	fb02 0006 	mla	r0, r2, r6, r0
 801f3a8:	780a      	ldrb	r2, [r1, #0]
 801f3aa:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f3ae:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801f3b2:	fb04 e000 	mla	r0, r4, r0, lr
 801f3b6:	fb02 f403 	mul.w	r4, r2, r3
 801f3ba:	0a00      	lsrs	r0, r0, #8
 801f3bc:	1c62      	adds	r2, r4, #1
 801f3be:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f3c2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f3c6:	4328      	orrs	r0, r5
 801f3c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f3cc:	700a      	strb	r2, [r1, #0]
 801f3ce:	784a      	ldrb	r2, [r1, #1]
 801f3d0:	435a      	muls	r2, r3
 801f3d2:	1c54      	adds	r4, r2, #1
 801f3d4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801f3d8:	0a02      	lsrs	r2, r0, #8
 801f3da:	0c00      	lsrs	r0, r0, #16
 801f3dc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f3e0:	704a      	strb	r2, [r1, #1]
 801f3e2:	788a      	ldrb	r2, [r1, #2]
 801f3e4:	4353      	muls	r3, r2
 801f3e6:	1c5a      	adds	r2, r3, #1
 801f3e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f3ec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f3f0:	7088      	strb	r0, [r1, #2]
 801f3f2:	b003      	add	sp, #12
 801f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f8:	2600      	movs	r6, #0
 801f3fa:	e706      	b.n	801f20a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801f3fc:	2000      	movs	r0, #0
 801f3fe:	4606      	mov	r6, r0
 801f400:	e710      	b.n	801f224 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f402:	2000      	movs	r0, #0
 801f404:	e70e      	b.n	801f224 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f406:	4620      	mov	r0, r4
 801f408:	e70c      	b.n	801f224 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f40a:	2500      	movs	r5, #0
 801f40c:	e71e      	b.n	801f24c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801f40e:	2200      	movs	r2, #0
 801f410:	4615      	mov	r5, r2
 801f412:	e729      	b.n	801f268 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f414:	4662      	mov	r2, ip
 801f416:	4665      	mov	r5, ip
 801f418:	e726      	b.n	801f268 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f41a:	2200      	movs	r2, #0
 801f41c:	e724      	b.n	801f268 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f41e:	4622      	mov	r2, r4
 801f420:	e722      	b.n	801f268 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801f422 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f426:	b09b      	sub	sp, #108	; 0x6c
 801f428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f42c:	9218      	str	r2, [sp, #96]	; 0x60
 801f42e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f430:	9019      	str	r0, [sp, #100]	; 0x64
 801f432:	9116      	str	r1, [sp, #88]	; 0x58
 801f434:	6850      	ldr	r0, [r2, #4]
 801f436:	9307      	str	r3, [sp, #28]
 801f438:	6812      	ldr	r2, [r2, #0]
 801f43a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801f43c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f440:	fb00 1303 	mla	r3, r0, r3, r1
 801f444:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f448:	18d3      	adds	r3, r2, r3
 801f44a:	930a      	str	r3, [sp, #40]	; 0x28
 801f44c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	930f      	str	r3, [sp, #60]	; 0x3c
 801f452:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f454:	685e      	ldr	r6, [r3, #4]
 801f456:	3604      	adds	r6, #4
 801f458:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	dc03      	bgt.n	801f466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f45e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f460:	2b00      	cmp	r3, #0
 801f462:	f340 834f 	ble.w	801fb04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801f466:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f468:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f46c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f470:	1e48      	subs	r0, r1, #1
 801f472:	1e57      	subs	r7, r2, #1
 801f474:	9b07      	ldr	r3, [sp, #28]
 801f476:	2b00      	cmp	r3, #0
 801f478:	f340 8178 	ble.w	801f76c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f47c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f47e:	142b      	asrs	r3, r5, #16
 801f480:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f484:	d406      	bmi.n	801f494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f486:	4584      	cmp	ip, r0
 801f488:	da04      	bge.n	801f494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	db02      	blt.n	801f494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f48e:	42bb      	cmp	r3, r7
 801f490:	f2c0 816d 	blt.w	801f76e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f494:	f11c 0c01 	adds.w	ip, ip, #1
 801f498:	f100 815b 	bmi.w	801f752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f49c:	4561      	cmp	r1, ip
 801f49e:	f2c0 8158 	blt.w	801f752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f4a2:	3301      	adds	r3, #1
 801f4a4:	f100 8155 	bmi.w	801f752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	f2c0 8152 	blt.w	801f752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f4ae:	9b07      	ldr	r3, [sp, #28]
 801f4b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f4b2:	9317      	str	r3, [sp, #92]	; 0x5c
 801f4b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	f340 8178 	ble.w	801f7ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f4bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f4be:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f4c2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f4c6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f4ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f4cc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801f4d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f4d2:	141b      	asrs	r3, r3, #16
 801f4d4:	f100 81ba 	bmi.w	801f84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f4d8:	f101 38ff 	add.w	r8, r1, #4294967295
 801f4dc:	4543      	cmp	r3, r8
 801f4de:	f280 81b5 	bge.w	801f84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f4e2:	f1bc 0f00 	cmp.w	ip, #0
 801f4e6:	f2c0 81b1 	blt.w	801f84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f4ea:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f4ee:	45c4      	cmp	ip, r8
 801f4f0:	f280 81ac 	bge.w	801f84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f4f4:	b209      	sxth	r1, r1
 801f4f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4f8:	fb0c 3301 	mla	r3, ip, r1, r3
 801f4fc:	eb04 0803 	add.w	r8, r4, r3
 801f500:	5ce3      	ldrb	r3, [r4, r3]
 801f502:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f506:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f50a:	2a00      	cmp	r2, #0
 801f50c:	f000 8193 	beq.w	801f836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801f510:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f514:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f518:	940b      	str	r4, [sp, #44]	; 0x2c
 801f51a:	0e24      	lsrs	r4, r4, #24
 801f51c:	9412      	str	r4, [sp, #72]	; 0x48
 801f51e:	b178      	cbz	r0, 801f540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f520:	eb08 0c01 	add.w	ip, r8, r1
 801f524:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f528:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f52c:	9108      	str	r1, [sp, #32]
 801f52e:	0e09      	lsrs	r1, r1, #24
 801f530:	9110      	str	r1, [sp, #64]	; 0x40
 801f532:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f536:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f53a:	910c      	str	r1, [sp, #48]	; 0x30
 801f53c:	0e09      	lsrs	r1, r1, #24
 801f53e:	9113      	str	r1, [sp, #76]	; 0x4c
 801f540:	b292      	uxth	r2, r2
 801f542:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f544:	b280      	uxth	r0, r0
 801f546:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f548:	fb02 f900 	mul.w	r9, r2, r0
 801f54c:	0112      	lsls	r2, r2, #4
 801f54e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f552:	eba2 0809 	sub.w	r8, r2, r9
 801f556:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f55a:	b280      	uxth	r0, r0
 801f55c:	fa1f f888 	uxth.w	r8, r8
 801f560:	1a12      	subs	r2, r2, r0
 801f562:	fb08 f101 	mul.w	r1, r8, r1
 801f566:	b292      	uxth	r2, r2
 801f568:	fb02 110e 	mla	r1, r2, lr, r1
 801f56c:	fb00 1104 	mla	r1, r0, r4, r1
 801f570:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f572:	fb09 1104 	mla	r1, r9, r4, r1
 801f576:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f57a:	2900      	cmp	r1, #0
 801f57c:	f000 80de 	beq.w	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f580:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f584:	d01b      	beq.n	801f5be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801f586:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f58a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f58e:	fb0e fa0a 	mul.w	sl, lr, sl
 801f592:	fb0e fe03 	mul.w	lr, lr, r3
 801f596:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f59a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f59e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f5a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f5a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f5aa:	4453      	add	r3, sl
 801f5ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5b0:	0a1b      	lsrs	r3, r3, #8
 801f5b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f5b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f5ba:	ea43 030c 	orr.w	r3, r3, ip
 801f5be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5c0:	2cff      	cmp	r4, #255	; 0xff
 801f5c2:	d021      	beq.n	801f608 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f5c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f5c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f5ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5cc:	fb04 fb0b 	mul.w	fp, r4, fp
 801f5d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f5d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f5d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f5dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f5e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801f5e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f5e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f5ec:	44de      	add	lr, fp
 801f5ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f5f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f5f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f5fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f5fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f602:	ea4e 040a 	orr.w	r4, lr, sl
 801f606:	940b      	str	r4, [sp, #44]	; 0x2c
 801f608:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f60a:	2cff      	cmp	r4, #255	; 0xff
 801f60c:	d021      	beq.n	801f652 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f60e:	9c08      	ldr	r4, [sp, #32]
 801f610:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f614:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f616:	fb04 fb0b 	mul.w	fp, r4, fp
 801f61a:	9c08      	ldr	r4, [sp, #32]
 801f61c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f620:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f622:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f626:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f62a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f62e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f632:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f636:	44de      	add	lr, fp
 801f638:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f63c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f640:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f644:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f648:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f64c:	ea4e 040a 	orr.w	r4, lr, sl
 801f650:	9408      	str	r4, [sp, #32]
 801f652:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f654:	2cff      	cmp	r4, #255	; 0xff
 801f656:	d021      	beq.n	801f69c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f658:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f65a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f65e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f660:	fb04 fb0b 	mul.w	fp, r4, fp
 801f664:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f666:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f66a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f66c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f670:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f674:	fb04 fa0a 	mul.w	sl, r4, sl
 801f678:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f67c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f680:	44de      	add	lr, fp
 801f682:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f686:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f68a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f68e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f692:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f696:	ea4e 040a 	orr.w	r4, lr, sl
 801f69a:	940c      	str	r4, [sp, #48]	; 0x30
 801f69c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f69e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f6a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6a6:	43c9      	mvns	r1, r1
 801f6a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f6ac:	9c08      	ldr	r4, [sp, #32]
 801f6ae:	b2c9      	uxtb	r1, r1
 801f6b0:	fb08 fc0c 	mul.w	ip, r8, ip
 801f6b4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f6b8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f6bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f6be:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f6c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f6c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f6c8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f6cc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f6d0:	fb08 f80e 	mul.w	r8, r8, lr
 801f6d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6d8:	fb02 8303 	mla	r3, r2, r3, r8
 801f6dc:	9a08      	ldr	r2, [sp, #32]
 801f6de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f6e2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f6e8:	fb00 330a 	mla	r3, r0, sl, r3
 801f6ec:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801f6f0:	fb09 3900 	mla	r9, r9, r0, r3
 801f6f4:	783b      	ldrb	r3, [r7, #0]
 801f6f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f6fa:	fb03 f201 	mul.w	r2, r3, r1
 801f6fe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f702:	1c53      	adds	r3, r2, #1
 801f704:	ea4c 0c09 	orr.w	ip, ip, r9
 801f708:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f70c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f710:	703b      	strb	r3, [r7, #0]
 801f712:	787b      	ldrb	r3, [r7, #1]
 801f714:	434b      	muls	r3, r1
 801f716:	1c5a      	adds	r2, r3, #1
 801f718:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f71c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f720:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f724:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f728:	707b      	strb	r3, [r7, #1]
 801f72a:	78bb      	ldrb	r3, [r7, #2]
 801f72c:	4359      	muls	r1, r3
 801f72e:	1c4b      	adds	r3, r1, #1
 801f730:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f734:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801f738:	f887 c002 	strb.w	ip, [r7, #2]
 801f73c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f73e:	3703      	adds	r7, #3
 801f740:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f742:	441a      	add	r2, r3
 801f744:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f746:	441d      	add	r5, r3
 801f748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f74a:	9225      	str	r2, [sp, #148]	; 0x94
 801f74c:	3b01      	subs	r3, #1
 801f74e:	9317      	str	r3, [sp, #92]	; 0x5c
 801f750:	e6b0      	b.n	801f4b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f752:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f754:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f756:	441c      	add	r4, r3
 801f758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f75a:	441d      	add	r5, r3
 801f75c:	9b07      	ldr	r3, [sp, #28]
 801f75e:	9425      	str	r4, [sp, #148]	; 0x94
 801f760:	3b01      	subs	r3, #1
 801f762:	9307      	str	r3, [sp, #28]
 801f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f766:	3303      	adds	r3, #3
 801f768:	930a      	str	r3, [sp, #40]	; 0x28
 801f76a:	e683      	b.n	801f474 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f76c:	d026      	beq.n	801f7bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801f76e:	9b07      	ldr	r3, [sp, #28]
 801f770:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f772:	3b01      	subs	r3, #1
 801f774:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f776:	fb00 4003 	mla	r0, r0, r3, r4
 801f77a:	1400      	asrs	r0, r0, #16
 801f77c:	f53f ae97 	bmi.w	801f4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f780:	3901      	subs	r1, #1
 801f782:	4288      	cmp	r0, r1
 801f784:	f6bf ae93 	bge.w	801f4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f788:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f78a:	fb01 5303 	mla	r3, r1, r3, r5
 801f78e:	141b      	asrs	r3, r3, #16
 801f790:	f53f ae8d 	bmi.w	801f4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f794:	3a01      	subs	r2, #1
 801f796:	4293      	cmp	r3, r2
 801f798:	f6bf ae89 	bge.w	801f4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f79e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f7a2:	f103 0e03 	add.w	lr, r3, #3
 801f7a6:	f1bb 0f00 	cmp.w	fp, #0
 801f7aa:	dc6d      	bgt.n	801f888 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801f7ac:	9b07      	ldr	r3, [sp, #28]
 801f7ae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f7b8:	4423      	add	r3, r4
 801f7ba:	930a      	str	r3, [sp, #40]	; 0x28
 801f7bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	f340 81a0 	ble.w	801fb04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801f7c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f7ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7ce:	eeb0 6a62 	vmov.f32	s12, s5
 801f7d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7de:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801f7e2:	eeb0 6a43 	vmov.f32	s12, s6
 801f7e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7ea:	ee16 5a10 	vmov	r5, s12
 801f7ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f802:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f806:	ee12 2a90 	vmov	r2, s5
 801f80a:	eef0 2a47 	vmov.f32	s5, s14
 801f80e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f812:	ee13 2a10 	vmov	r2, s6
 801f816:	9327      	str	r3, [sp, #156]	; 0x9c
 801f818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f81a:	eeb0 3a67 	vmov.f32	s6, s15
 801f81e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f822:	9328      	str	r3, [sp, #160]	; 0xa0
 801f824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f826:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f828:	3b01      	subs	r3, #1
 801f82a:	9316      	str	r3, [sp, #88]	; 0x58
 801f82c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f82e:	bf08      	it	eq
 801f830:	4613      	moveq	r3, r2
 801f832:	9307      	str	r3, [sp, #28]
 801f834:	e610      	b.n	801f458 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f836:	2800      	cmp	r0, #0
 801f838:	f43f ae82 	beq.w	801f540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f83c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f840:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f844:	9108      	str	r1, [sp, #32]
 801f846:	0e09      	lsrs	r1, r1, #24
 801f848:	9110      	str	r1, [sp, #64]	; 0x40
 801f84a:	e679      	b.n	801f540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f84c:	f113 0801 	adds.w	r8, r3, #1
 801f850:	f53f af74 	bmi.w	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f854:	4541      	cmp	r1, r8
 801f856:	f6ff af71 	blt.w	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f85a:	f11c 0801 	adds.w	r8, ip, #1
 801f85e:	f53f af6d 	bmi.w	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f862:	45c6      	cmp	lr, r8
 801f864:	f6ff af6a 	blt.w	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f868:	b209      	sxth	r1, r1
 801f86a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801f86e:	fa0f f38e 	sxth.w	r3, lr
 801f872:	9100      	str	r1, [sp, #0]
 801f874:	4639      	mov	r1, r7
 801f876:	9301      	str	r3, [sp, #4]
 801f878:	4633      	mov	r3, r6
 801f87a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801f87e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f880:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f882:	f7ff fca3 	bl	801f1cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801f886:	e759      	b.n	801f73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f888:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f88a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f88e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f890:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f894:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f896:	1427      	asrs	r7, r4, #16
 801f898:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f89a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f89e:	142b      	asrs	r3, r5, #16
 801f8a0:	fb01 7303 	mla	r3, r1, r3, r7
 801f8a4:	18e7      	adds	r7, r4, r3
 801f8a6:	5ce3      	ldrb	r3, [r4, r3]
 801f8a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f8ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f8b0:	2a00      	cmp	r2, #0
 801f8b2:	f000 811d 	beq.w	801faf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801f8b6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f8ba:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f8be:	940d      	str	r4, [sp, #52]	; 0x34
 801f8c0:	0e24      	lsrs	r4, r4, #24
 801f8c2:	9414      	str	r4, [sp, #80]	; 0x50
 801f8c4:	b170      	cbz	r0, 801f8e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f8c6:	eb07 0801 	add.w	r8, r7, r1
 801f8ca:	5c79      	ldrb	r1, [r7, r1]
 801f8cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f8d0:	9109      	str	r1, [sp, #36]	; 0x24
 801f8d2:	0e09      	lsrs	r1, r1, #24
 801f8d4:	9111      	str	r1, [sp, #68]	; 0x44
 801f8d6:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f8da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f8de:	910e      	str	r1, [sp, #56]	; 0x38
 801f8e0:	0e09      	lsrs	r1, r1, #24
 801f8e2:	9115      	str	r1, [sp, #84]	; 0x54
 801f8e4:	b292      	uxth	r2, r2
 801f8e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f8e8:	b280      	uxth	r0, r0
 801f8ea:	fb02 f900 	mul.w	r9, r2, r0
 801f8ee:	0112      	lsls	r2, r2, #4
 801f8f0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f8f4:	eba2 0809 	sub.w	r8, r2, r9
 801f8f8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f8fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f8fe:	b280      	uxth	r0, r0
 801f900:	fa1f f888 	uxth.w	r8, r8
 801f904:	1a09      	subs	r1, r1, r0
 801f906:	fb08 f202 	mul.w	r2, r8, r2
 801f90a:	b289      	uxth	r1, r1
 801f90c:	fb01 220c 	mla	r2, r1, ip, r2
 801f910:	fb00 2204 	mla	r2, r0, r4, r2
 801f914:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f916:	fb09 2204 	mla	r2, r9, r4, r2
 801f91a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f91e:	2a00      	cmp	r2, #0
 801f920:	f000 80db 	beq.w	801fada <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801f924:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f928:	d019      	beq.n	801f95e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801f92a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f92e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f932:	fb0c fa0a 	mul.w	sl, ip, sl
 801f936:	fb0c fc03 	mul.w	ip, ip, r3
 801f93a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f93e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f942:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f946:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f94a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f94e:	4453      	add	r3, sl
 801f950:	0a3f      	lsrs	r7, r7, #8
 801f952:	0a1b      	lsrs	r3, r3, #8
 801f954:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f958:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f95c:	433b      	orrs	r3, r7
 801f95e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f960:	2cff      	cmp	r4, #255	; 0xff
 801f962:	d020      	beq.n	801f9a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801f964:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f966:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f96a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f96c:	4367      	muls	r7, r4
 801f96e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f970:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f974:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f978:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f97a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f97e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f982:	fb04 fa0a 	mul.w	sl, r4, sl
 801f986:	44bc      	add	ip, r7
 801f988:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f98c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f990:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f994:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f998:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f99c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f9a0:	ea4c 040a 	orr.w	r4, ip, sl
 801f9a4:	940d      	str	r4, [sp, #52]	; 0x34
 801f9a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f9a8:	2cff      	cmp	r4, #255	; 0xff
 801f9aa:	d020      	beq.n	801f9ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801f9ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f9ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f9b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f9b4:	4367      	muls	r7, r4
 801f9b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f9b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f9bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f9c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f9c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f9c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801f9ce:	44bc      	add	ip, r7
 801f9d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f9d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f9dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f9e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f9e8:	ea4c 040a 	orr.w	r4, ip, sl
 801f9ec:	9409      	str	r4, [sp, #36]	; 0x24
 801f9ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f9f0:	2cff      	cmp	r4, #255	; 0xff
 801f9f2:	d020      	beq.n	801fa36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801f9f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f9f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f9fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f9fc:	4367      	muls	r7, r4
 801f9fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fa00:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa04:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fa08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fa0a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa12:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa16:	44bc      	add	ip, r7
 801fa18:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fa1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fa30:	ea4c 040a 	orr.w	r4, ip, sl
 801fa34:	940e      	str	r4, [sp, #56]	; 0x38
 801fa36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa38:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fa3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa40:	43d2      	mvns	r2, r2
 801fa42:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fa46:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fa48:	b2d2      	uxtb	r2, r2
 801fa4a:	fb08 f707 	mul.w	r7, r8, r7
 801fa4e:	fb01 770c 	mla	r7, r1, ip, r7
 801fa52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fa56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fa58:	fb00 770c 	mla	r7, r0, ip, r7
 801fa5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fa60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa62:	fb09 770c 	mla	r7, r9, ip, r7
 801fa66:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fa6a:	fb08 f80c 	mul.w	r8, r8, ip
 801fa6e:	0a3f      	lsrs	r7, r7, #8
 801fa70:	fb01 8303 	mla	r3, r1, r3, r8
 801fa74:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fa76:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fa7a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801fa7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fa80:	fb00 330a 	mla	r3, r0, sl, r3
 801fa84:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801fa88:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fa8c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fa90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa94:	fb03 f102 	mul.w	r1, r3, r2
 801fa98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fa9c:	1c4b      	adds	r3, r1, #1
 801fa9e:	ea47 070c 	orr.w	r7, r7, ip
 801faa2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801faa6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801faaa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801faae:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801fab2:	4353      	muls	r3, r2
 801fab4:	1c59      	adds	r1, r3, #1
 801fab6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801faba:	0a3b      	lsrs	r3, r7, #8
 801fabc:	0c3f      	lsrs	r7, r7, #16
 801fabe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fac2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fac6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801faca:	435a      	muls	r2, r3
 801facc:	1c53      	adds	r3, r2, #1
 801face:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fad2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801fad6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fada:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fadc:	f10e 0e03 	add.w	lr, lr, #3
 801fae0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fae6:	441a      	add	r2, r3
 801fae8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801faea:	9225      	str	r2, [sp, #148]	; 0x94
 801faec:	441d      	add	r5, r3
 801faee:	e65a      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801faf0:	2800      	cmp	r0, #0
 801faf2:	f43f aef7 	beq.w	801f8e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801faf6:	5c79      	ldrb	r1, [r7, r1]
 801faf8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fafc:	9109      	str	r1, [sp, #36]	; 0x24
 801fafe:	0e09      	lsrs	r1, r1, #24
 801fb00:	9111      	str	r1, [sp, #68]	; 0x44
 801fb02:	e6ef      	b.n	801f8e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801fb04:	b01b      	add	sp, #108	; 0x6c
 801fb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801fb0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb0e:	b08d      	sub	sp, #52	; 0x34
 801fb10:	468b      	mov	fp, r1
 801fb12:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801fb16:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801fb1a:	fb0c 5703 	mla	r7, ip, r3, r5
 801fb1e:	f1bc 0f00 	cmp.w	ip, #0
 801fb22:	910b      	str	r1, [sp, #44]	; 0x2c
 801fb24:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb28:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fb2c:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801fb30:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801fb34:	eb02 0607 	add.w	r6, r2, r7
 801fb38:	f89b 4000 	ldrb.w	r4, [fp]
 801fb3c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801fb40:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801fb44:	f2c0 80c1 	blt.w	801fcca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801fb48:	45e6      	cmp	lr, ip
 801fb4a:	f340 80be 	ble.w	801fcca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801fb4e:	2d00      	cmp	r5, #0
 801fb50:	f2c0 80b7 	blt.w	801fcc2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801fb54:	42ab      	cmp	r3, r5
 801fb56:	f340 80b4 	ble.w	801fcc2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801fb5a:	5dd2      	ldrb	r2, [r2, r7]
 801fb5c:	9205      	str	r2, [sp, #20]
 801fb5e:	7872      	ldrb	r2, [r6, #1]
 801fb60:	9206      	str	r2, [sp, #24]
 801fb62:	78b2      	ldrb	r2, [r6, #2]
 801fb64:	9207      	str	r2, [sp, #28]
 801fb66:	1c6a      	adds	r2, r5, #1
 801fb68:	f100 80b6 	bmi.w	801fcd8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801fb6c:	4293      	cmp	r3, r2
 801fb6e:	f340 80b3 	ble.w	801fcd8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801fb72:	f1b8 0f00 	cmp.w	r8, #0
 801fb76:	f000 80af 	beq.w	801fcd8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801fb7a:	78f2      	ldrb	r2, [r6, #3]
 801fb7c:	9201      	str	r2, [sp, #4]
 801fb7e:	7932      	ldrb	r2, [r6, #4]
 801fb80:	9202      	str	r2, [sp, #8]
 801fb82:	7972      	ldrb	r2, [r6, #5]
 801fb84:	9203      	str	r2, [sp, #12]
 801fb86:	f11c 0c01 	adds.w	ip, ip, #1
 801fb8a:	f100 80ad 	bmi.w	801fce8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801fb8e:	45e6      	cmp	lr, ip
 801fb90:	f340 80aa 	ble.w	801fce8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801fb94:	f1ba 0f00 	cmp.w	sl, #0
 801fb98:	f000 80a6 	beq.w	801fce8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801fb9c:	2d00      	cmp	r5, #0
 801fb9e:	f2c0 809f 	blt.w	801fce0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801fba2:	42ab      	cmp	r3, r5
 801fba4:	f340 809c 	ble.w	801fce0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801fba8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801fbac:	f816 9002 	ldrb.w	r9, [r6, r2]
 801fbb0:	2203      	movs	r2, #3
 801fbb2:	fb03 6c02 	mla	ip, r3, r2, r6
 801fbb6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801fbba:	f89c e002 	ldrb.w	lr, [ip, #2]
 801fbbe:	9704      	str	r7, [sp, #16]
 801fbc0:	3501      	adds	r5, #1
 801fbc2:	f100 8098 	bmi.w	801fcf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801fbc6:	42ab      	cmp	r3, r5
 801fbc8:	f340 8095 	ble.w	801fcf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801fbcc:	f1b8 0f00 	cmp.w	r8, #0
 801fbd0:	f000 8091 	beq.w	801fcf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801fbd4:	f04f 0c03 	mov.w	ip, #3
 801fbd8:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801fbdc:	5cb5      	ldrb	r5, [r6, r2]
 801fbde:	fb03 620c 	mla	r2, r3, ip, r6
 801fbe2:	fb03 630c 	mla	r3, r3, ip, r6
 801fbe6:	7912      	ldrb	r2, [r2, #4]
 801fbe8:	795e      	ldrb	r6, [r3, #5]
 801fbea:	fa1f f388 	uxth.w	r3, r8
 801fbee:	fa1f fc8a 	uxth.w	ip, sl
 801fbf2:	fb03 f70c 	mul.w	r7, r3, ip
 801fbf6:	011b      	lsls	r3, r3, #4
 801fbf8:	9708      	str	r7, [sp, #32]
 801fbfa:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801fbfe:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801fc02:	1bdb      	subs	r3, r3, r7
 801fc04:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801fc08:	fa1f fc8c 	uxth.w	ip, ip
 801fc0c:	b29b      	uxth	r3, r3
 801fc0e:	9709      	str	r7, [sp, #36]	; 0x24
 801fc10:	ebaa 0a0c 	sub.w	sl, sl, ip
 801fc14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fc16:	930a      	str	r3, [sp, #40]	; 0x28
 801fc18:	fa1f fa8a 	uxth.w	sl, sl
 801fc1c:	ea6f 0807 	mvn.w	r8, r7
 801fc20:	9f01      	ldr	r7, [sp, #4]
 801fc22:	435f      	muls	r7, r3
 801fc24:	9b05      	ldr	r3, [sp, #20]
 801fc26:	fa5f f888 	uxtb.w	r8, r8
 801fc2a:	fb0a 7703 	mla	r7, sl, r3, r7
 801fc2e:	9b08      	ldr	r3, [sp, #32]
 801fc30:	fb14 f408 	smulbb	r4, r4, r8
 801fc34:	fb0c 7709 	mla	r7, ip, r9, r7
 801fc38:	fb10 f008 	smulbb	r0, r0, r8
 801fc3c:	fb11 f108 	smulbb	r1, r1, r8
 801fc40:	fb03 7705 	mla	r7, r3, r5, r7
 801fc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc46:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fc4a:	fb07 4703 	mla	r7, r7, r3, r4
 801fc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc50:	b2bf      	uxth	r7, r7
 801fc52:	1c7c      	adds	r4, r7, #1
 801fc54:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801fc58:	1224      	asrs	r4, r4, #8
 801fc5a:	f88b 4000 	strb.w	r4, [fp]
 801fc5e:	9c02      	ldr	r4, [sp, #8]
 801fc60:	435c      	muls	r4, r3
 801fc62:	9b06      	ldr	r3, [sp, #24]
 801fc64:	fb0a 4403 	mla	r4, sl, r3, r4
 801fc68:	9b04      	ldr	r3, [sp, #16]
 801fc6a:	fb0c 4403 	mla	r4, ip, r3, r4
 801fc6e:	9b08      	ldr	r3, [sp, #32]
 801fc70:	fb03 4402 	mla	r4, r3, r2, r4
 801fc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fc78:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fc7c:	fb04 0403 	mla	r4, r4, r3, r0
 801fc80:	9b03      	ldr	r3, [sp, #12]
 801fc82:	435a      	muls	r2, r3
 801fc84:	b2a4      	uxth	r4, r4
 801fc86:	4613      	mov	r3, r2
 801fc88:	9a07      	ldr	r2, [sp, #28]
 801fc8a:	1c60      	adds	r0, r4, #1
 801fc8c:	fb0a 3a02 	mla	sl, sl, r2, r3
 801fc90:	9b08      	ldr	r3, [sp, #32]
 801fc92:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801fc96:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fc9a:	1224      	asrs	r4, r4, #8
 801fc9c:	fb03 c606 	mla	r6, r3, r6, ip
 801fca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fca2:	f88b 4001 	strb.w	r4, [fp, #1]
 801fca6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fcaa:	fb06 1103 	mla	r1, r6, r3, r1
 801fcae:	b289      	uxth	r1, r1
 801fcb0:	1c4e      	adds	r6, r1, #1
 801fcb2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801fcb6:	1209      	asrs	r1, r1, #8
 801fcb8:	f88b 1002 	strb.w	r1, [fp, #2]
 801fcbc:	b00d      	add	sp, #52	; 0x34
 801fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fcc6:	9405      	str	r4, [sp, #20]
 801fcc8:	e74d      	b.n	801fb66 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801fcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fcce:	9401      	str	r4, [sp, #4]
 801fcd0:	9405      	str	r4, [sp, #20]
 801fcd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fcd6:	e756      	b.n	801fb86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801fcd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fcdc:	9401      	str	r4, [sp, #4]
 801fcde:	e752      	b.n	801fb86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801fce0:	468e      	mov	lr, r1
 801fce2:	9004      	str	r0, [sp, #16]
 801fce4:	46a1      	mov	r9, r4
 801fce6:	e76b      	b.n	801fbc0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801fce8:	460e      	mov	r6, r1
 801fcea:	4602      	mov	r2, r0
 801fcec:	4625      	mov	r5, r4
 801fcee:	468e      	mov	lr, r1
 801fcf0:	9004      	str	r0, [sp, #16]
 801fcf2:	46a1      	mov	r9, r4
 801fcf4:	e779      	b.n	801fbea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801fcf6:	460e      	mov	r6, r1
 801fcf8:	4602      	mov	r2, r0
 801fcfa:	4625      	mov	r5, r4
 801fcfc:	e775      	b.n	801fbea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801fcfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd02:	b09f      	sub	sp, #124	; 0x7c
 801fd04:	920e      	str	r2, [sp, #56]	; 0x38
 801fd06:	9307      	str	r3, [sp, #28]
 801fd08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fd0a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fd0e:	901d      	str	r0, [sp, #116]	; 0x74
 801fd10:	930c      	str	r3, [sp, #48]	; 0x30
 801fd12:	6850      	ldr	r0, [r2, #4]
 801fd14:	910b      	str	r1, [sp, #44]	; 0x2c
 801fd16:	6812      	ldr	r2, [r2, #0]
 801fd18:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fd1c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801fd20:	fb00 1303 	mla	r3, r0, r3, r1
 801fd24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd28:	18d3      	adds	r3, r2, r3
 801fd2a:	9308      	str	r3, [sp, #32]
 801fd2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	930a      	str	r3, [sp, #40]	; 0x28
 801fd32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd34:	43db      	mvns	r3, r3
 801fd36:	b2db      	uxtb	r3, r3
 801fd38:	9309      	str	r3, [sp, #36]	; 0x24
 801fd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	dc03      	bgt.n	801fd48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	f340 81f5 	ble.w	8020132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fd48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd52:	1e48      	subs	r0, r1, #1
 801fd54:	1e54      	subs	r4, r2, #1
 801fd56:	9b07      	ldr	r3, [sp, #28]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	f340 80d5 	ble.w	801ff08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fd5e:	ea5f 452a 	movs.w	r5, sl, asr #16
 801fd62:	ea4f 4328 	mov.w	r3, r8, asr #16
 801fd66:	d406      	bmi.n	801fd76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fd68:	4285      	cmp	r5, r0
 801fd6a:	da04      	bge.n	801fd76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	db02      	blt.n	801fd76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fd70:	42a3      	cmp	r3, r4
 801fd72:	f2c0 80ca 	blt.w	801ff0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fd76:	3501      	adds	r5, #1
 801fd78:	f100 80bb 	bmi.w	801fef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fd7c:	42a9      	cmp	r1, r5
 801fd7e:	f2c0 80b8 	blt.w	801fef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fd82:	3301      	adds	r3, #1
 801fd84:	f100 80b5 	bmi.w	801fef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fd88:	429a      	cmp	r2, r3
 801fd8a:	f2c0 80b2 	blt.w	801fef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fd8e:	9b07      	ldr	r3, [sp, #28]
 801fd90:	9d08      	ldr	r5, [sp, #32]
 801fd92:	930d      	str	r3, [sp, #52]	; 0x34
 801fd94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	f340 80d6 	ble.w	801ff48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801fd9c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801fd9e:	ea4f 4428 	mov.w	r4, r8, asr #16
 801fda2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fda4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801fda8:	68c6      	ldr	r6, [r0, #12]
 801fdaa:	ea5f 402a 	movs.w	r0, sl, asr #16
 801fdae:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801fdb2:	689b      	ldr	r3, [r3, #8]
 801fdb4:	f100 810f 	bmi.w	801ffd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fdb8:	1e5f      	subs	r7, r3, #1
 801fdba:	42b8      	cmp	r0, r7
 801fdbc:	f280 810b 	bge.w	801ffd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fdc0:	2c00      	cmp	r4, #0
 801fdc2:	f2c0 8108 	blt.w	801ffd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fdc6:	1e77      	subs	r7, r6, #1
 801fdc8:	42bc      	cmp	r4, r7
 801fdca:	f280 8104 	bge.w	801ffd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fdce:	b21b      	sxth	r3, r3
 801fdd0:	fb04 0003 	mla	r0, r4, r3, r0
 801fdd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fdd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fdda:	1826      	adds	r6, r4, r0
 801fddc:	5c24      	ldrb	r4, [r4, r0]
 801fdde:	78b7      	ldrb	r7, [r6, #2]
 801fde0:	7870      	ldrb	r0, [r6, #1]
 801fde2:	970f      	str	r7, [sp, #60]	; 0x3c
 801fde4:	7977      	ldrb	r7, [r6, #5]
 801fde6:	f896 e003 	ldrb.w	lr, [r6, #3]
 801fdea:	f896 c004 	ldrb.w	ip, [r6, #4]
 801fdee:	9710      	str	r7, [sp, #64]	; 0x40
 801fdf0:	b1c9      	cbz	r1, 801fe26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fdf2:	f04f 0b03 	mov.w	fp, #3
 801fdf6:	f06f 0904 	mvn.w	r9, #4
 801fdfa:	3605      	adds	r6, #5
 801fdfc:	fb13 930b 	smlabb	r3, r3, fp, r9
 801fe00:	eb06 0b03 	add.w	fp, r6, r3
 801fe04:	5cf3      	ldrb	r3, [r6, r3]
 801fe06:	9311      	str	r3, [sp, #68]	; 0x44
 801fe08:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801fe0c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe0e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801fe12:	9315      	str	r3, [sp, #84]	; 0x54
 801fe14:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801fe18:	9312      	str	r3, [sp, #72]	; 0x48
 801fe1a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801fe1e:	9314      	str	r3, [sp, #80]	; 0x50
 801fe20:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801fe24:	9316      	str	r3, [sp, #88]	; 0x58
 801fe26:	b292      	uxth	r2, r2
 801fe28:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fe2a:	b289      	uxth	r1, r1
 801fe2c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801fe30:	fb02 f601 	mul.w	r6, r2, r1
 801fe34:	0112      	lsls	r2, r2, #4
 801fe36:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801fe3a:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801fe3e:	1b92      	subs	r2, r2, r6
 801fe40:	b289      	uxth	r1, r1
 801fe42:	b292      	uxth	r2, r2
 801fe44:	eba9 0901 	sub.w	r9, r9, r1
 801fe48:	fb02 fe0e 	mul.w	lr, r2, lr
 801fe4c:	fa1f f989 	uxth.w	r9, r9
 801fe50:	fb02 fc0c 	mul.w	ip, r2, ip
 801fe54:	fb09 e404 	mla	r4, r9, r4, lr
 801fe58:	f895 e000 	ldrb.w	lr, [r5]
 801fe5c:	fb09 c000 	mla	r0, r9, r0, ip
 801fe60:	fb01 4407 	mla	r4, r1, r7, r4
 801fe64:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fe66:	fb06 4407 	mla	r4, r6, r7, r4
 801fe6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fe6c:	fb1e fe07 	smulbb	lr, lr, r7
 801fe70:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fe74:	fb04 e403 	mla	r4, r4, r3, lr
 801fe78:	b2a4      	uxth	r4, r4
 801fe7a:	f104 0e01 	add.w	lr, r4, #1
 801fe7e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801fe82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fe84:	fb01 0004 	mla	r0, r1, r4, r0
 801fe88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fe8a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fe8e:	fb06 0004 	mla	r0, r6, r4, r0
 801fe92:	786c      	ldrb	r4, [r5, #1]
 801fe94:	f885 e000 	strb.w	lr, [r5]
 801fe98:	fb14 f407 	smulbb	r4, r4, r7
 801fe9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fea0:	fb00 4003 	mla	r0, r0, r3, r4
 801fea4:	b280      	uxth	r0, r0
 801fea6:	1c44      	adds	r4, r0, #1
 801fea8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801feac:	1200      	asrs	r0, r0, #8
 801feae:	7068      	strb	r0, [r5, #1]
 801feb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801feb2:	4342      	muls	r2, r0
 801feb4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801feb6:	fb09 2200 	mla	r2, r9, r0, r2
 801feba:	9815      	ldr	r0, [sp, #84]	; 0x54
 801febc:	fb01 2100 	mla	r1, r1, r0, r2
 801fec0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fec2:	fb06 1602 	mla	r6, r6, r2, r1
 801fec6:	78a9      	ldrb	r1, [r5, #2]
 801fec8:	fb11 f107 	smulbb	r1, r1, r7
 801fecc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fed0:	fb06 1303 	mla	r3, r6, r3, r1
 801fed4:	b29b      	uxth	r3, r3
 801fed6:	1c5e      	adds	r6, r3, #1
 801fed8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fedc:	121b      	asrs	r3, r3, #8
 801fede:	70ab      	strb	r3, [r5, #2]
 801fee0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fee2:	3503      	adds	r5, #3
 801fee4:	449a      	add	sl, r3
 801fee6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fee8:	4498      	add	r8, r3
 801feea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801feec:	3b01      	subs	r3, #1
 801feee:	930d      	str	r3, [sp, #52]	; 0x34
 801fef0:	e750      	b.n	801fd94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fef2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fef4:	449a      	add	sl, r3
 801fef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fef8:	4498      	add	r8, r3
 801fefa:	9b07      	ldr	r3, [sp, #28]
 801fefc:	3b01      	subs	r3, #1
 801fefe:	9307      	str	r3, [sp, #28]
 801ff00:	9b08      	ldr	r3, [sp, #32]
 801ff02:	3303      	adds	r3, #3
 801ff04:	9308      	str	r3, [sp, #32]
 801ff06:	e726      	b.n	801fd56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ff08:	d026      	beq.n	801ff58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ff0a:	9b07      	ldr	r3, [sp, #28]
 801ff0c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ff0e:	3b01      	subs	r3, #1
 801ff10:	fb00 a003 	mla	r0, r0, r3, sl
 801ff14:	1400      	asrs	r0, r0, #16
 801ff16:	f53f af3a 	bmi.w	801fd8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff1a:	3901      	subs	r1, #1
 801ff1c:	4288      	cmp	r0, r1
 801ff1e:	f6bf af36 	bge.w	801fd8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff22:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ff24:	fb01 8303 	mla	r3, r1, r3, r8
 801ff28:	141b      	asrs	r3, r3, #16
 801ff2a:	f53f af30 	bmi.w	801fd8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff2e:	3a01      	subs	r2, #1
 801ff30:	4293      	cmp	r3, r2
 801ff32:	f6bf af2c 	bge.w	801fd8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff36:	9b08      	ldr	r3, [sp, #32]
 801ff38:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ff3c:	1cdd      	adds	r5, r3, #3
 801ff3e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801ff42:	f1bc 0f00 	cmp.w	ip, #0
 801ff46:	dc5f      	bgt.n	8020008 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801ff48:	9b07      	ldr	r3, [sp, #28]
 801ff4a:	9a08      	ldr	r2, [sp, #32]
 801ff4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff54:	441a      	add	r2, r3
 801ff56:	9208      	str	r2, [sp, #32]
 801ff58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	f340 80e9 	ble.w	8020132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ff60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ff66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff6e:	eef0 6a62 	vmov.f32	s13, s5
 801ff72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff7e:	ee16 aa90 	vmov	sl, s13
 801ff82:	eef0 6a43 	vmov.f32	s13, s6
 801ff86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff8a:	ee16 8a90 	vmov	r8, s13
 801ff8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffa2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffa6:	ee12 2a90 	vmov	r2, s5
 801ffaa:	eef0 2a47 	vmov.f32	s5, s14
 801ffae:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffb2:	ee13 2a10 	vmov	r2, s6
 801ffb6:	932b      	str	r3, [sp, #172]	; 0xac
 801ffb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ffba:	eeb0 3a67 	vmov.f32	s6, s15
 801ffbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffc2:	932c      	str	r3, [sp, #176]	; 0xb0
 801ffc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffc8:	3b01      	subs	r3, #1
 801ffca:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ffce:	bf08      	it	eq
 801ffd0:	4613      	moveq	r3, r2
 801ffd2:	9307      	str	r3, [sp, #28]
 801ffd4:	e6b1      	b.n	801fd3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ffd6:	1c47      	adds	r7, r0, #1
 801ffd8:	d482      	bmi.n	801fee0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ffda:	42bb      	cmp	r3, r7
 801ffdc:	db80      	blt.n	801fee0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ffde:	1c67      	adds	r7, r4, #1
 801ffe0:	f53f af7e 	bmi.w	801fee0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ffe4:	42be      	cmp	r6, r7
 801ffe6:	f6ff af7b 	blt.w	801fee0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ffea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ffec:	b236      	sxth	r6, r6
 801ffee:	9001      	str	r0, [sp, #4]
 801fff0:	b21b      	sxth	r3, r3
 801fff2:	9600      	str	r6, [sp, #0]
 801fff4:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fff6:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801fffa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801fffe:	4629      	mov	r1, r5
 8020000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020002:	f7ff fd82 	bl	801fb0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020006:	e76b      	b.n	801fee0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020008:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802000a:	ea4f 402a 	mov.w	r0, sl, asr #16
 802000e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020012:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020016:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802001a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802001e:	fb07 0101 	mla	r1, r7, r1, r0
 8020022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020024:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020028:	1844      	adds	r4, r0, r1
 802002a:	5c40      	ldrb	r0, [r0, r1]
 802002c:	78a6      	ldrb	r6, [r4, #2]
 802002e:	7861      	ldrb	r1, [r4, #1]
 8020030:	960f      	str	r6, [sp, #60]	; 0x3c
 8020032:	78e6      	ldrb	r6, [r4, #3]
 8020034:	910d      	str	r1, [sp, #52]	; 0x34
 8020036:	9610      	str	r6, [sp, #64]	; 0x40
 8020038:	f894 9004 	ldrb.w	r9, [r4, #4]
 802003c:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020040:	b192      	cbz	r2, 8020068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020042:	f06f 0604 	mvn.w	r6, #4
 8020046:	2103      	movs	r1, #3
 8020048:	3405      	adds	r4, #5
 802004a:	fb17 6701 	smlabb	r7, r7, r1, r6
 802004e:	19e6      	adds	r6, r4, r7
 8020050:	5de4      	ldrb	r4, [r4, r7]
 8020052:	9417      	str	r4, [sp, #92]	; 0x5c
 8020054:	7874      	ldrb	r4, [r6, #1]
 8020056:	9419      	str	r4, [sp, #100]	; 0x64
 8020058:	78b4      	ldrb	r4, [r6, #2]
 802005a:	941b      	str	r4, [sp, #108]	; 0x6c
 802005c:	78f4      	ldrb	r4, [r6, #3]
 802005e:	9418      	str	r4, [sp, #96]	; 0x60
 8020060:	7934      	ldrb	r4, [r6, #4]
 8020062:	941a      	str	r4, [sp, #104]	; 0x68
 8020064:	7974      	ldrb	r4, [r6, #5]
 8020066:	941c      	str	r4, [sp, #112]	; 0x70
 8020068:	b29b      	uxth	r3, r3
 802006a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802006c:	b292      	uxth	r2, r2
 802006e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020070:	3503      	adds	r5, #3
 8020072:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020076:	fb03 f402 	mul.w	r4, r3, r2
 802007a:	011b      	lsls	r3, r3, #4
 802007c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020080:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8020084:	1b1b      	subs	r3, r3, r4
 8020086:	b292      	uxth	r2, r2
 8020088:	b29b      	uxth	r3, r3
 802008a:	1ab6      	subs	r6, r6, r2
 802008c:	435f      	muls	r7, r3
 802008e:	b2b6      	uxth	r6, r6
 8020090:	fb03 f909 	mul.w	r9, r3, r9
 8020094:	fb03 fb0b 	mul.w	fp, r3, fp
 8020098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802009a:	fb06 7000 	mla	r0, r6, r0, r7
 802009e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80200a0:	fb06 bb03 	mla	fp, r6, r3, fp
 80200a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200a6:	fb02 0007 	mla	r0, r2, r7, r0
 80200aa:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80200ac:	fb02 bb03 	mla	fp, r2, r3, fp
 80200b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200b2:	fb04 0007 	mla	r0, r4, r7, r0
 80200b6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80200ba:	fb17 f701 	smulbb	r7, r7, r1
 80200be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80200c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80200c4:	fb00 700e 	mla	r0, r0, lr, r7
 80200c8:	fb06 9101 	mla	r1, r6, r1, r9
 80200cc:	b280      	uxth	r0, r0
 80200ce:	1c47      	adds	r7, r0, #1
 80200d0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80200d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80200d6:	1200      	asrs	r0, r0, #8
 80200d8:	f805 0c06 	strb.w	r0, [r5, #-6]
 80200dc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80200de:	fb02 1100 	mla	r1, r2, r0, r1
 80200e2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80200e4:	fb04 1100 	mla	r1, r4, r0, r1
 80200e8:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80200ec:	fb04 b403 	mla	r4, r4, r3, fp
 80200f0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80200f4:	fb10 f007 	smulbb	r0, r0, r7
 80200f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80200fc:	fb13 f307 	smulbb	r3, r3, r7
 8020100:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020104:	fb01 010e 	mla	r1, r1, lr, r0
 8020108:	fb04 340e 	mla	r4, r4, lr, r3
 802010c:	b289      	uxth	r1, r1
 802010e:	b2a4      	uxth	r4, r4
 8020110:	1c48      	adds	r0, r1, #1
 8020112:	1c63      	adds	r3, r4, #1
 8020114:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020118:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802011c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802011e:	1209      	asrs	r1, r1, #8
 8020120:	1224      	asrs	r4, r4, #8
 8020122:	449a      	add	sl, r3
 8020124:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020126:	f805 1c05 	strb.w	r1, [r5, #-5]
 802012a:	f805 4c04 	strb.w	r4, [r5, #-4]
 802012e:	4498      	add	r8, r3
 8020130:	e707      	b.n	801ff42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020132:	b01f      	add	sp, #124	; 0x7c
 8020134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020138 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802013c:	b087      	sub	sp, #28
 802013e:	780d      	ldrb	r5, [r1, #0]
 8020140:	784c      	ldrb	r4, [r1, #1]
 8020142:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020146:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 802014a:	9004      	str	r0, [sp, #16]
 802014c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020150:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8020154:	9005      	str	r0, [sp, #20]
 8020156:	fb06 bc03 	mla	ip, r6, r3, fp
 802015a:	2e00      	cmp	r6, #0
 802015c:	7888      	ldrb	r0, [r1, #2]
 802015e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020162:	eb02 090c 	add.w	r9, r2, ip
 8020166:	f2c0 8084 	blt.w	8020272 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802016a:	42b7      	cmp	r7, r6
 802016c:	f340 8081 	ble.w	8020272 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020170:	f1bb 0f00 	cmp.w	fp, #0
 8020174:	db79      	blt.n	802026a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020176:	455b      	cmp	r3, fp
 8020178:	dd77      	ble.n	802026a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802017a:	f812 200c 	ldrb.w	r2, [r2, ip]
 802017e:	9201      	str	r2, [sp, #4]
 8020180:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020184:	9202      	str	r2, [sp, #8]
 8020186:	f899 2002 	ldrb.w	r2, [r9, #2]
 802018a:	9203      	str	r2, [sp, #12]
 802018c:	f11b 0201 	adds.w	r2, fp, #1
 8020190:	d476      	bmi.n	8020280 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020192:	4293      	cmp	r3, r2
 8020194:	dd74      	ble.n	8020280 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020196:	9a04      	ldr	r2, [sp, #16]
 8020198:	2a00      	cmp	r2, #0
 802019a:	d071      	beq.n	8020280 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802019c:	f899 8003 	ldrb.w	r8, [r9, #3]
 80201a0:	f899 c004 	ldrb.w	ip, [r9, #4]
 80201a4:	f899 a005 	ldrb.w	sl, [r9, #5]
 80201a8:	3601      	adds	r6, #1
 80201aa:	d471      	bmi.n	8020290 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80201ac:	42b7      	cmp	r7, r6
 80201ae:	dd6f      	ble.n	8020290 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80201b0:	9a05      	ldr	r2, [sp, #20]
 80201b2:	2a00      	cmp	r2, #0
 80201b4:	d06c      	beq.n	8020290 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80201b6:	f1bb 0f00 	cmp.w	fp, #0
 80201ba:	db65      	blt.n	8020288 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80201bc:	455b      	cmp	r3, fp
 80201be:	dd63      	ble.n	8020288 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80201c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80201c4:	f819 e002 	ldrb.w	lr, [r9, r2]
 80201c8:	2203      	movs	r2, #3
 80201ca:	fb03 9602 	mla	r6, r3, r2, r9
 80201ce:	7877      	ldrb	r7, [r6, #1]
 80201d0:	78b6      	ldrb	r6, [r6, #2]
 80201d2:	f11b 0b01 	adds.w	fp, fp, #1
 80201d6:	d40c      	bmi.n	80201f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80201d8:	455b      	cmp	r3, fp
 80201da:	dd0a      	ble.n	80201f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80201dc:	9a04      	ldr	r2, [sp, #16]
 80201de:	b142      	cbz	r2, 80201f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80201e0:	2203      	movs	r2, #3
 80201e2:	fb13 2002 	smlabb	r0, r3, r2, r2
 80201e6:	f819 5000 	ldrb.w	r5, [r9, r0]
 80201ea:	fb03 9002 	mla	r0, r3, r2, r9
 80201ee:	7904      	ldrb	r4, [r0, #4]
 80201f0:	7940      	ldrb	r0, [r0, #5]
 80201f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80201f6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80201fa:	fb03 fb02 	mul.w	fp, r3, r2
 80201fe:	011b      	lsls	r3, r3, #4
 8020200:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020204:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020208:	eba3 030b 	sub.w	r3, r3, fp
 802020c:	b292      	uxth	r2, r2
 802020e:	b29b      	uxth	r3, r3
 8020210:	eba9 0902 	sub.w	r9, r9, r2
 8020214:	9304      	str	r3, [sp, #16]
 8020216:	fa1f f989 	uxth.w	r9, r9
 802021a:	fb03 f808 	mul.w	r8, r3, r8
 802021e:	9b01      	ldr	r3, [sp, #4]
 8020220:	fb09 8803 	mla	r8, r9, r3, r8
 8020224:	9b04      	ldr	r3, [sp, #16]
 8020226:	fb03 fc0c 	mul.w	ip, r3, ip
 802022a:	9b02      	ldr	r3, [sp, #8]
 802022c:	fb02 880e 	mla	r8, r2, lr, r8
 8020230:	fb09 cc03 	mla	ip, r9, r3, ip
 8020234:	9b04      	ldr	r3, [sp, #16]
 8020236:	fb0b 8805 	mla	r8, fp, r5, r8
 802023a:	fb02 c707 	mla	r7, r2, r7, ip
 802023e:	fb03 f30a 	mul.w	r3, r3, sl
 8020242:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020246:	fb0b 7404 	mla	r4, fp, r4, r7
 802024a:	f881 8000 	strb.w	r8, [r1]
 802024e:	1224      	asrs	r4, r4, #8
 8020250:	704c      	strb	r4, [r1, #1]
 8020252:	9c03      	ldr	r4, [sp, #12]
 8020254:	fb09 3904 	mla	r9, r9, r4, r3
 8020258:	fb02 9206 	mla	r2, r2, r6, r9
 802025c:	fb0b 2000 	mla	r0, fp, r0, r2
 8020260:	1200      	asrs	r0, r0, #8
 8020262:	7088      	strb	r0, [r1, #2]
 8020264:	b007      	add	sp, #28
 8020266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802026a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802026e:	9501      	str	r5, [sp, #4]
 8020270:	e78c      	b.n	802018c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8020272:	4682      	mov	sl, r0
 8020274:	46a4      	mov	ip, r4
 8020276:	46a8      	mov	r8, r5
 8020278:	9501      	str	r5, [sp, #4]
 802027a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802027e:	e793      	b.n	80201a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020280:	4682      	mov	sl, r0
 8020282:	46a4      	mov	ip, r4
 8020284:	46a8      	mov	r8, r5
 8020286:	e78f      	b.n	80201a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020288:	4606      	mov	r6, r0
 802028a:	4627      	mov	r7, r4
 802028c:	46ae      	mov	lr, r5
 802028e:	e7a0      	b.n	80201d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020290:	4606      	mov	r6, r0
 8020292:	4627      	mov	r7, r4
 8020294:	46ae      	mov	lr, r5
 8020296:	e7ac      	b.n	80201f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08020298 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802029c:	b09b      	sub	sp, #108	; 0x6c
 802029e:	920b      	str	r2, [sp, #44]	; 0x2c
 80202a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80202a2:	9019      	str	r0, [sp, #100]	; 0x64
 80202a4:	9109      	str	r1, [sp, #36]	; 0x24
 80202a6:	6850      	ldr	r0, [r2, #4]
 80202a8:	9306      	str	r3, [sp, #24]
 80202aa:	6812      	ldr	r2, [r2, #0]
 80202ac:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80202b0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80202b4:	fb00 1303 	mla	r3, r0, r3, r1
 80202b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202bc:	18d3      	adds	r3, r2, r3
 80202be:	9307      	str	r3, [sp, #28]
 80202c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	9308      	str	r3, [sp, #32]
 80202c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	dc03      	bgt.n	80202d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80202cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	f340 81ab 	ble.w	802062a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80202d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80202d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202de:	1e48      	subs	r0, r1, #1
 80202e0:	1e55      	subs	r5, r2, #1
 80202e2:	9b06      	ldr	r3, [sp, #24]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	f340 80b1 	ble.w	802044c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80202ea:	ea5f 462b 	movs.w	r6, fp, asr #16
 80202ee:	ea4f 4324 	mov.w	r3, r4, asr #16
 80202f2:	d406      	bmi.n	8020302 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202f4:	4286      	cmp	r6, r0
 80202f6:	da04      	bge.n	8020302 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	db02      	blt.n	8020302 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202fc:	42ab      	cmp	r3, r5
 80202fe:	f2c0 80a6 	blt.w	802044e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020302:	3601      	adds	r6, #1
 8020304:	f100 8097 	bmi.w	8020436 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020308:	42b1      	cmp	r1, r6
 802030a:	f2c0 8094 	blt.w	8020436 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802030e:	3301      	adds	r3, #1
 8020310:	f100 8091 	bmi.w	8020436 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020314:	429a      	cmp	r2, r3
 8020316:	f2c0 808e 	blt.w	8020436 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802031a:	9b06      	ldr	r3, [sp, #24]
 802031c:	9e07      	ldr	r6, [sp, #28]
 802031e:	930a      	str	r3, [sp, #40]	; 0x28
 8020320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020322:	2b00      	cmp	r3, #0
 8020324:	f340 80b0 	ble.w	8020488 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020328:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802032a:	1425      	asrs	r5, r4, #16
 802032c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802032e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020332:	68c7      	ldr	r7, [r0, #12]
 8020334:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020338:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802033c:	689b      	ldr	r3, [r3, #8]
 802033e:	f100 80ea 	bmi.w	8020516 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020342:	f103 3cff 	add.w	ip, r3, #4294967295
 8020346:	4560      	cmp	r0, ip
 8020348:	f280 80e5 	bge.w	8020516 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802034c:	2d00      	cmp	r5, #0
 802034e:	f2c0 80e2 	blt.w	8020516 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020352:	f107 3cff 	add.w	ip, r7, #4294967295
 8020356:	4565      	cmp	r5, ip
 8020358:	f280 80dd 	bge.w	8020516 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802035c:	b21b      	sxth	r3, r3
 802035e:	fb05 0003 	mla	r0, r5, r3, r0
 8020362:	9d08      	ldr	r5, [sp, #32]
 8020364:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020368:	182f      	adds	r7, r5, r0
 802036a:	5c2d      	ldrb	r5, [r5, r0]
 802036c:	7878      	ldrb	r0, [r7, #1]
 802036e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020372:	900c      	str	r0, [sp, #48]	; 0x30
 8020374:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020378:	f897 8004 	ldrb.w	r8, [r7, #4]
 802037c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020380:	b1c9      	cbz	r1, 80203b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020382:	f04f 0c03 	mov.w	ip, #3
 8020386:	f06f 0004 	mvn.w	r0, #4
 802038a:	3705      	adds	r7, #5
 802038c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8020390:	eb07 0c03 	add.w	ip, r7, r3
 8020394:	5cfb      	ldrb	r3, [r7, r3]
 8020396:	930d      	str	r3, [sp, #52]	; 0x34
 8020398:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802039c:	930f      	str	r3, [sp, #60]	; 0x3c
 802039e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80203a2:	9311      	str	r3, [sp, #68]	; 0x44
 80203a4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80203a8:	930e      	str	r3, [sp, #56]	; 0x38
 80203aa:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80203ae:	9310      	str	r3, [sp, #64]	; 0x40
 80203b0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80203b4:	9312      	str	r3, [sp, #72]	; 0x48
 80203b6:	b292      	uxth	r2, r2
 80203b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80203ba:	b289      	uxth	r1, r1
 80203bc:	fb02 f301 	mul.w	r3, r2, r1
 80203c0:	0112      	lsls	r2, r2, #4
 80203c2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80203c6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80203ca:	1ad2      	subs	r2, r2, r3
 80203cc:	b289      	uxth	r1, r1
 80203ce:	b292      	uxth	r2, r2
 80203d0:	1a7f      	subs	r7, r7, r1
 80203d2:	fb02 f909 	mul.w	r9, r2, r9
 80203d6:	b2bf      	uxth	r7, r7
 80203d8:	fb02 f808 	mul.w	r8, r2, r8
 80203dc:	fb02 fa0a 	mul.w	sl, r2, sl
 80203e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80203e2:	fb07 9905 	mla	r9, r7, r5, r9
 80203e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80203e8:	fb07 8800 	mla	r8, r7, r0, r8
 80203ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80203ee:	fb07 aa0e 	mla	sl, r7, lr, sl
 80203f2:	fb01 9905 	mla	r9, r1, r5, r9
 80203f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80203f8:	fb01 8800 	mla	r8, r1, r0, r8
 80203fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80203fe:	fb01 a102 	mla	r1, r1, r2, sl
 8020402:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020404:	fb03 9905 	mla	r9, r3, r5, r9
 8020408:	fb03 8800 	mla	r8, r3, r0, r8
 802040c:	fb03 1302 	mla	r3, r3, r2, r1
 8020410:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020414:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020418:	121b      	asrs	r3, r3, #8
 802041a:	f886 9000 	strb.w	r9, [r6]
 802041e:	f886 8001 	strb.w	r8, [r6, #1]
 8020422:	70b3      	strb	r3, [r6, #2]
 8020424:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020426:	3603      	adds	r6, #3
 8020428:	449b      	add	fp, r3
 802042a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802042c:	441c      	add	r4, r3
 802042e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020430:	3b01      	subs	r3, #1
 8020432:	930a      	str	r3, [sp, #40]	; 0x28
 8020434:	e774      	b.n	8020320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020436:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020438:	449b      	add	fp, r3
 802043a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802043c:	441c      	add	r4, r3
 802043e:	9b06      	ldr	r3, [sp, #24]
 8020440:	3b01      	subs	r3, #1
 8020442:	9306      	str	r3, [sp, #24]
 8020444:	9b07      	ldr	r3, [sp, #28]
 8020446:	3303      	adds	r3, #3
 8020448:	9307      	str	r3, [sp, #28]
 802044a:	e74a      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802044c:	d024      	beq.n	8020498 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802044e:	9b06      	ldr	r3, [sp, #24]
 8020450:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020452:	3b01      	subs	r3, #1
 8020454:	fb00 b003 	mla	r0, r0, r3, fp
 8020458:	1400      	asrs	r0, r0, #16
 802045a:	f53f af5e 	bmi.w	802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802045e:	3901      	subs	r1, #1
 8020460:	4288      	cmp	r0, r1
 8020462:	f6bf af5a 	bge.w	802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020466:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020468:	fb01 4303 	mla	r3, r1, r3, r4
 802046c:	141b      	asrs	r3, r3, #16
 802046e:	f53f af54 	bmi.w	802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020472:	3a01      	subs	r2, #1
 8020474:	4293      	cmp	r3, r2
 8020476:	f6bf af50 	bge.w	802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802047a:	9b07      	ldr	r3, [sp, #28]
 802047c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020480:	1cde      	adds	r6, r3, #3
 8020482:	f1be 0f00 	cmp.w	lr, #0
 8020486:	dc5f      	bgt.n	8020548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020488:	9b06      	ldr	r3, [sp, #24]
 802048a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802048e:	9b07      	ldr	r3, [sp, #28]
 8020490:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020494:	4423      	add	r3, r4
 8020496:	9307      	str	r3, [sp, #28]
 8020498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802049a:	2b00      	cmp	r3, #0
 802049c:	f340 80c5 	ble.w	802062a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80204a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204ae:	eef0 6a62 	vmov.f32	s13, s5
 80204b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80204b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204be:	ee16 ba90 	vmov	fp, s13
 80204c2:	eef0 6a43 	vmov.f32	s13, s6
 80204c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204ca:	ee16 4a90 	vmov	r4, s13
 80204ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204e6:	ee12 2a90 	vmov	r2, s5
 80204ea:	eef0 2a47 	vmov.f32	s5, s14
 80204ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80204f2:	ee13 2a10 	vmov	r2, s6
 80204f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80204f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204fa:	eeb0 3a67 	vmov.f32	s6, s15
 80204fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020502:	9328      	str	r3, [sp, #160]	; 0xa0
 8020504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020508:	3b01      	subs	r3, #1
 802050a:	9309      	str	r3, [sp, #36]	; 0x24
 802050c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802050e:	bf08      	it	eq
 8020510:	4613      	moveq	r3, r2
 8020512:	9306      	str	r3, [sp, #24]
 8020514:	e6d7      	b.n	80202c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020516:	f110 0c01 	adds.w	ip, r0, #1
 802051a:	d483      	bmi.n	8020424 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802051c:	4563      	cmp	r3, ip
 802051e:	db81      	blt.n	8020424 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020520:	f115 0c01 	adds.w	ip, r5, #1
 8020524:	f53f af7e 	bmi.w	8020424 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020528:	4567      	cmp	r7, ip
 802052a:	f6ff af7b 	blt.w	8020424 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802052e:	b23f      	sxth	r7, r7
 8020530:	b21b      	sxth	r3, r3
 8020532:	9700      	str	r7, [sp, #0]
 8020534:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8020538:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802053c:	9a08      	ldr	r2, [sp, #32]
 802053e:	4631      	mov	r1, r6
 8020540:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020542:	f7ff fdf9 	bl	8020138 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020546:	e76d      	b.n	8020424 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020548:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802054a:	ea4f 402b 	mov.w	r0, fp, asr #16
 802054e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020552:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020556:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802055a:	1421      	asrs	r1, r4, #16
 802055c:	930a      	str	r3, [sp, #40]	; 0x28
 802055e:	fb0c 0101 	mla	r1, ip, r1, r0
 8020562:	9808      	ldr	r0, [sp, #32]
 8020564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020568:	1845      	adds	r5, r0, r1
 802056a:	5c40      	ldrb	r0, [r0, r1]
 802056c:	796f      	ldrb	r7, [r5, #5]
 802056e:	7869      	ldrb	r1, [r5, #1]
 8020570:	f895 8002 	ldrb.w	r8, [r5, #2]
 8020574:	f895 a003 	ldrb.w	sl, [r5, #3]
 8020578:	f895 9004 	ldrb.w	r9, [r5, #4]
 802057c:	970c      	str	r7, [sp, #48]	; 0x30
 802057e:	b1a2      	cbz	r2, 80205aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8020580:	2703      	movs	r7, #3
 8020582:	f06f 0304 	mvn.w	r3, #4
 8020586:	3505      	adds	r5, #5
 8020588:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802058c:	eb05 070c 	add.w	r7, r5, ip
 8020590:	f815 500c 	ldrb.w	r5, [r5, ip]
 8020594:	9513      	str	r5, [sp, #76]	; 0x4c
 8020596:	787d      	ldrb	r5, [r7, #1]
 8020598:	9515      	str	r5, [sp, #84]	; 0x54
 802059a:	78bd      	ldrb	r5, [r7, #2]
 802059c:	9517      	str	r5, [sp, #92]	; 0x5c
 802059e:	78fd      	ldrb	r5, [r7, #3]
 80205a0:	9514      	str	r5, [sp, #80]	; 0x50
 80205a2:	793d      	ldrb	r5, [r7, #4]
 80205a4:	9516      	str	r5, [sp, #88]	; 0x58
 80205a6:	797d      	ldrb	r5, [r7, #5]
 80205a8:	9518      	str	r5, [sp, #96]	; 0x60
 80205aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80205ae:	b292      	uxth	r2, r2
 80205b0:	3603      	adds	r6, #3
 80205b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80205b6:	fb03 f502 	mul.w	r5, r3, r2
 80205ba:	011b      	lsls	r3, r3, #4
 80205bc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80205c0:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80205c4:	1b5b      	subs	r3, r3, r5
 80205c6:	b292      	uxth	r2, r2
 80205c8:	b29b      	uxth	r3, r3
 80205ca:	1abf      	subs	r7, r7, r2
 80205cc:	fb03 f909 	mul.w	r9, r3, r9
 80205d0:	b2bf      	uxth	r7, r7
 80205d2:	fb03 fa0a 	mul.w	sl, r3, sl
 80205d6:	fb07 9901 	mla	r9, r7, r1, r9
 80205da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80205dc:	fb07 aa00 	mla	sl, r7, r0, sl
 80205e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80205e2:	fb02 9901 	mla	r9, r2, r1, r9
 80205e6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80205e8:	fb02 aa00 	mla	sl, r2, r0, sl
 80205ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 80205ee:	fb05 9901 	mla	r9, r5, r1, r9
 80205f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80205f4:	fb05 aa00 	mla	sl, r5, r0, sl
 80205f8:	434b      	muls	r3, r1
 80205fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80205fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020600:	fb07 3308 	mla	r3, r7, r8, r3
 8020604:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020608:	f806 ac06 	strb.w	sl, [r6, #-6]
 802060c:	fb02 3201 	mla	r2, r2, r1, r3
 8020610:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020612:	f806 9c05 	strb.w	r9, [r6, #-5]
 8020616:	fb05 2503 	mla	r5, r5, r3, r2
 802061a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802061c:	122d      	asrs	r5, r5, #8
 802061e:	449b      	add	fp, r3
 8020620:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020622:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020626:	441c      	add	r4, r3
 8020628:	e72b      	b.n	8020482 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802062a:	b01b      	add	sp, #108	; 0x6c
 802062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020630 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020634:	b087      	sub	sp, #28
 8020636:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802063a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802063e:	fb05 7003 	mla	r0, r5, r3, r7
 8020642:	2d00      	cmp	r5, #0
 8020644:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8020648:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 802064c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020650:	f2c0 811f 	blt.w	8020892 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8020654:	45a8      	cmp	r8, r5
 8020656:	f340 811c 	ble.w	8020892 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802065a:	2f00      	cmp	r7, #0
 802065c:	f2c0 8117 	blt.w	802088e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8020660:	42bb      	cmp	r3, r7
 8020662:	f340 8114 	ble.w	802088e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8020666:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802066a:	1c7a      	adds	r2, r7, #1
 802066c:	f100 8114 	bmi.w	8020898 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8020670:	4293      	cmp	r3, r2
 8020672:	f340 8111 	ble.w	8020898 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8020676:	2c00      	cmp	r4, #0
 8020678:	f000 8110 	beq.w	802089c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802067c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020680:	3501      	adds	r5, #1
 8020682:	f100 810f 	bmi.w	80208a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8020686:	45a8      	cmp	r8, r5
 8020688:	f340 810c 	ble.w	80208a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802068c:	f1be 0f00 	cmp.w	lr, #0
 8020690:	f000 810b 	beq.w	80208aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8020694:	2f00      	cmp	r7, #0
 8020696:	f2c0 8103 	blt.w	80208a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802069a:	42bb      	cmp	r3, r7
 802069c:	f340 8100 	ble.w	80208a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80206a0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80206a4:	3701      	adds	r7, #1
 80206a6:	f100 8103 	bmi.w	80208b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80206aa:	42bb      	cmp	r3, r7
 80206ac:	f340 8100 	ble.w	80208b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80206b0:	2c00      	cmp	r4, #0
 80206b2:	f000 80ff 	beq.w	80208b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80206b6:	3301      	adds	r3, #1
 80206b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80206bc:	fa1f fc84 	uxth.w	ip, r4
 80206c0:	fa1f fe8e 	uxth.w	lr, lr
 80206c4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80206c8:	fb0c f90e 	mul.w	r9, ip, lr
 80206cc:	0e13      	lsrs	r3, r2, #24
 80206ce:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80206d2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80206d6:	9302      	str	r3, [sp, #8]
 80206d8:	ebac 0709 	sub.w	r7, ip, r9
 80206dc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80206e0:	fa1f f48e 	uxth.w	r4, lr
 80206e4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80206e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206ec:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80206f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80206f4:	1b1b      	subs	r3, r3, r4
 80206f6:	fb0a f606 	mul.w	r6, sl, r6
 80206fa:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80206fe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020702:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020706:	b29b      	uxth	r3, r3
 8020708:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802070c:	b2bf      	uxth	r7, r7
 802070e:	9301      	str	r3, [sp, #4]
 8020710:	44e6      	add	lr, ip
 8020712:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020716:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802071a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802071e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8020722:	9303      	str	r3, [sp, #12]
 8020724:	0a33      	lsrs	r3, r6, #8
 8020726:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802072a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802072e:	9304      	str	r3, [sp, #16]
 8020730:	fb0b f606 	mul.w	r6, fp, r6
 8020734:	fb0b f000 	mul.w	r0, fp, r0
 8020738:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802073c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020740:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020744:	44b6      	add	lr, r6
 8020746:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802074a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802074e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8020752:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020756:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802075a:	fb08 f606 	mul.w	r6, r8, r6
 802075e:	0a03      	lsrs	r3, r0, #8
 8020760:	fb08 f505 	mul.w	r5, r8, r5
 8020764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020768:	0a30      	lsrs	r0, r6, #8
 802076a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802076e:	9305      	str	r3, [sp, #20]
 8020770:	0e13      	lsrs	r3, r2, #24
 8020772:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020776:	fb0e fe07 	mul.w	lr, lr, r7
 802077a:	4430      	add	r0, r6
 802077c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020780:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020784:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020788:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802078c:	0a00      	lsrs	r0, r0, #8
 802078e:	435e      	muls	r6, r3
 8020790:	0a2d      	lsrs	r5, r5, #8
 8020792:	435a      	muls	r2, r3
 8020794:	9b03      	ldr	r3, [sp, #12]
 8020796:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802079a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802079e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80207a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207a6:	44b4      	add	ip, r6
 80207a8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80207ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207b0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80207b4:	9e01      	ldr	r6, [sp, #4]
 80207b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207ba:	fb03 ee06 	mla	lr, r3, r6, lr
 80207be:	9b04      	ldr	r3, [sp, #16]
 80207c0:	0a12      	lsrs	r2, r2, #8
 80207c2:	fb0c ee09 	mla	lr, ip, r9, lr
 80207c6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80207ca:	9b05      	ldr	r3, [sp, #20]
 80207cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80207d0:	fb00 ee04 	mla	lr, r0, r4, lr
 80207d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207d8:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80207dc:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80207e0:	9b01      	ldr	r3, [sp, #4]
 80207e2:	fb07 fe0e 	mul.w	lr, r7, lr
 80207e6:	fb07 f70b 	mul.w	r7, r7, fp
 80207ea:	fb03 ee06 	mla	lr, r3, r6, lr
 80207ee:	fb03 730a 	mla	r3, r3, sl, r7
 80207f2:	fb09 e202 	mla	r2, r9, r2, lr
 80207f6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80207fa:	fb04 2e0e 	mla	lr, r4, lr, r2
 80207fe:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8020802:	fb04 3408 	mla	r4, r4, r8, r3
 8020806:	9b02      	ldr	r3, [sp, #8]
 8020808:	b292      	uxth	r2, r2
 802080a:	fb09 4903 	mla	r9, r9, r3, r4
 802080e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020812:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020816:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802081a:	fb09 f902 	mul.w	r9, r9, r2
 802081e:	ea40 0e0e 	orr.w	lr, r0, lr
 8020822:	f109 0301 	add.w	r3, r9, #1
 8020826:	fa5f f08e 	uxtb.w	r0, lr
 802082a:	fb10 f002 	smulbb	r0, r0, r2
 802082e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020832:	780b      	ldrb	r3, [r1, #0]
 8020834:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8020838:	fa5f f989 	uxtb.w	r9, r9
 802083c:	fb03 0309 	mla	r3, r3, r9, r0
 8020840:	b29b      	uxth	r3, r3
 8020842:	1c58      	adds	r0, r3, #1
 8020844:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020848:	7848      	ldrb	r0, [r1, #1]
 802084a:	fb10 f009 	smulbb	r0, r0, r9
 802084e:	121b      	asrs	r3, r3, #8
 8020850:	700b      	strb	r3, [r1, #0]
 8020852:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8020856:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802085a:	fb03 0302 	mla	r3, r3, r2, r0
 802085e:	b29b      	uxth	r3, r3
 8020860:	1c58      	adds	r0, r3, #1
 8020862:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020866:	121b      	asrs	r3, r3, #8
 8020868:	704b      	strb	r3, [r1, #1]
 802086a:	788b      	ldrb	r3, [r1, #2]
 802086c:	fb13 f909 	smulbb	r9, r3, r9
 8020870:	fb0e 9e02 	mla	lr, lr, r2, r9
 8020874:	fa1f fe8e 	uxth.w	lr, lr
 8020878:	f10e 0301 	add.w	r3, lr, #1
 802087c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8020880:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020884:	f881 e002 	strb.w	lr, [r1, #2]
 8020888:	b007      	add	sp, #28
 802088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802088e:	2600      	movs	r6, #0
 8020890:	e6eb      	b.n	802066a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8020892:	2000      	movs	r0, #0
 8020894:	4606      	mov	r6, r0
 8020896:	e6f3      	b.n	8020680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8020898:	2000      	movs	r0, #0
 802089a:	e6f1      	b.n	8020680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802089c:	4620      	mov	r0, r4
 802089e:	e6ef      	b.n	8020680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80208a0:	2500      	movs	r5, #0
 80208a2:	e6ff      	b.n	80206a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80208a4:	2200      	movs	r2, #0
 80208a6:	4615      	mov	r5, r2
 80208a8:	e708      	b.n	80206bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80208aa:	4672      	mov	r2, lr
 80208ac:	4675      	mov	r5, lr
 80208ae:	e705      	b.n	80206bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80208b0:	2200      	movs	r2, #0
 80208b2:	e703      	b.n	80206bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80208b4:	4622      	mov	r2, r4
 80208b6:	e701      	b.n	80206bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080208b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208bc:	b09d      	sub	sp, #116	; 0x74
 80208be:	9219      	str	r2, [sp, #100]	; 0x64
 80208c0:	9307      	str	r3, [sp, #28]
 80208c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208c4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80208c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80208ca:	931a      	str	r3, [sp, #104]	; 0x68
 80208cc:	6850      	ldr	r0, [r2, #4]
 80208ce:	9117      	str	r1, [sp, #92]	; 0x5c
 80208d0:	6812      	ldr	r2, [r2, #0]
 80208d2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80208d6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80208da:	fb00 1303 	mla	r3, r0, r3, r1
 80208de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208e2:	18d3      	adds	r3, r2, r3
 80208e4:	930a      	str	r3, [sp, #40]	; 0x28
 80208e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	9310      	str	r3, [sp, #64]	; 0x40
 80208ec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80208f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80208f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	dc03      	bgt.n	8020900 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80208f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	f340 8368 	ble.w	8020fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020900:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020906:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802090a:	1e48      	subs	r0, r1, #1
 802090c:	1e57      	subs	r7, r2, #1
 802090e:	9b07      	ldr	r3, [sp, #28]
 8020910:	2b00      	cmp	r3, #0
 8020912:	f340 8187 	ble.w	8020c24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8020916:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802091a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802091e:	d406      	bmi.n	802092e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020920:	4584      	cmp	ip, r0
 8020922:	da04      	bge.n	802092e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020924:	2b00      	cmp	r3, #0
 8020926:	db02      	blt.n	802092e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020928:	42bb      	cmp	r3, r7
 802092a:	f2c0 817c 	blt.w	8020c26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802092e:	f11c 0c01 	adds.w	ip, ip, #1
 8020932:	f100 816c 	bmi.w	8020c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020936:	4561      	cmp	r1, ip
 8020938:	f2c0 8169 	blt.w	8020c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802093c:	3301      	adds	r3, #1
 802093e:	f100 8166 	bmi.w	8020c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020942:	429a      	cmp	r2, r3
 8020944:	f2c0 8163 	blt.w	8020c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020948:	9b07      	ldr	r3, [sp, #28]
 802094a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802094c:	9318      	str	r3, [sp, #96]	; 0x60
 802094e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020950:	2b00      	cmp	r3, #0
 8020952:	f340 8186 	ble.w	8020c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020956:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020958:	142a      	asrs	r2, r5, #16
 802095a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802095e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020962:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020966:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802096a:	f100 81cb 	bmi.w	8020d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802096e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020972:	4542      	cmp	r2, r8
 8020974:	f280 81c6 	bge.w	8020d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020978:	2800      	cmp	r0, #0
 802097a:	f2c0 81c3 	blt.w	8020d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802097e:	f103 38ff 	add.w	r8, r3, #4294967295
 8020982:	4540      	cmp	r0, r8
 8020984:	f280 81be 	bge.w	8020d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020988:	fa0f f38e 	sxth.w	r3, lr
 802098c:	fb00 2203 	mla	r2, r0, r3, r2
 8020990:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020992:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8020996:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802099a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802099e:	2900      	cmp	r1, #0
 80209a0:	f000 81a6 	beq.w	8020cf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80209a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80209a8:	900c      	str	r0, [sp, #48]	; 0x30
 80209aa:	0e00      	lsrs	r0, r0, #24
 80209ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80209ae:	f1bc 0f00 	cmp.w	ip, #0
 80209b2:	d00f      	beq.n	80209d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80209b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80209b8:	3b01      	subs	r3, #1
 80209ba:	009b      	lsls	r3, r3, #2
 80209bc:	3304      	adds	r3, #4
 80209be:	eb08 0003 	add.w	r0, r8, r3
 80209c2:	f858 3003 	ldr.w	r3, [r8, r3]
 80209c6:	9308      	str	r3, [sp, #32]
 80209c8:	0e1b      	lsrs	r3, r3, #24
 80209ca:	9311      	str	r3, [sp, #68]	; 0x44
 80209cc:	6843      	ldr	r3, [r0, #4]
 80209ce:	930d      	str	r3, [sp, #52]	; 0x34
 80209d0:	0e1b      	lsrs	r3, r3, #24
 80209d2:	9314      	str	r3, [sp, #80]	; 0x50
 80209d4:	b289      	uxth	r1, r1
 80209d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80209d8:	fa1f fc8c 	uxth.w	ip, ip
 80209dc:	0108      	lsls	r0, r1, #4
 80209de:	fb01 f90c 	mul.w	r9, r1, ip
 80209e2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80209e6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80209ea:	eba0 0809 	sub.w	r8, r0, r9
 80209ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80209f0:	fa1f f18c 	uxth.w	r1, ip
 80209f4:	fa1f f888 	uxth.w	r8, r8
 80209f8:	1a5b      	subs	r3, r3, r1
 80209fa:	fb08 f000 	mul.w	r0, r8, r0
 80209fe:	b29b      	uxth	r3, r3
 8020a00:	fb03 000e 	mla	r0, r3, lr, r0
 8020a04:	fb01 0004 	mla	r0, r1, r4, r0
 8020a08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a0a:	fb09 0004 	mla	r0, r9, r4, r0
 8020a0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020a12:	2800      	cmp	r0, #0
 8020a14:	f000 80f2 	beq.w	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020a18:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020a1c:	d01b      	beq.n	8020a56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020a1e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020a22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020a26:	fb0e fa0a 	mul.w	sl, lr, sl
 8020a2a:	fb0e fe02 	mul.w	lr, lr, r2
 8020a2e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020a32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020a36:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020a3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020a3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020a42:	4452      	add	r2, sl
 8020a44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a48:	0a12      	lsrs	r2, r2, #8
 8020a4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020a4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020a52:	ea42 020c 	orr.w	r2, r2, ip
 8020a56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a58:	2cff      	cmp	r4, #255	; 0xff
 8020a5a:	d021      	beq.n	8020aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020a5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020a62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a64:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020a70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a78:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a84:	44de      	add	lr, fp
 8020a86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a9a:	ea4e 040a 	orr.w	r4, lr, sl
 8020a9e:	940c      	str	r4, [sp, #48]	; 0x30
 8020aa0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020aa2:	2cff      	cmp	r4, #255	; 0xff
 8020aa4:	d021      	beq.n	8020aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020aa6:	9c08      	ldr	r4, [sp, #32]
 8020aa8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020aac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020aae:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ab2:	9c08      	ldr	r4, [sp, #32]
 8020ab4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ab8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020aba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020abe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ac2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ac6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020aca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ace:	44de      	add	lr, fp
 8020ad0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ad4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ad8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020adc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ae0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ae4:	ea4e 040a 	orr.w	r4, lr, sl
 8020ae8:	9408      	str	r4, [sp, #32]
 8020aea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020aec:	2cff      	cmp	r4, #255	; 0xff
 8020aee:	d021      	beq.n	8020b34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020af0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020af2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020af6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020af8:	fb04 fb0b 	mul.w	fp, r4, fp
 8020afc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020afe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020b08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b14:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020b18:	44de      	add	lr, fp
 8020b1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020b1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020b2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b2e:	ea4e 040a 	orr.w	r4, lr, sl
 8020b32:	940d      	str	r4, [sp, #52]	; 0x34
 8020b34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b36:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020b3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020b3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020b42:	9c08      	ldr	r4, [sp, #32]
 8020b44:	fb08 fc0c 	mul.w	ip, r8, ip
 8020b48:	fb03 cc0e 	mla	ip, r3, lr, ip
 8020b4c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020b50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020b52:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020b56:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020b5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b5c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020b60:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020b64:	fb08 f80e 	mul.w	r8, r8, lr
 8020b68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b6c:	fb03 8202 	mla	r2, r3, r2, r8
 8020b70:	9b08      	ldr	r3, [sp, #32]
 8020b72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b76:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8020b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b7c:	fb01 220a 	mla	r2, r1, sl, r2
 8020b80:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8020b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b86:	fb09 2901 	mla	r9, r9, r1, r2
 8020b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020b8c:	4343      	muls	r3, r0
 8020b8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b92:	1c58      	adds	r0, r3, #1
 8020b94:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020b98:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020b9c:	783b      	ldrb	r3, [r7, #0]
 8020b9e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020ba2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020ba6:	fa5f f28c 	uxtb.w	r2, ip
 8020baa:	b2c0      	uxtb	r0, r0
 8020bac:	fb12 f201 	smulbb	r2, r2, r1
 8020bb0:	fb03 2300 	mla	r3, r3, r0, r2
 8020bb4:	b29b      	uxth	r3, r3
 8020bb6:	1c5a      	adds	r2, r3, #1
 8020bb8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020bbc:	787a      	ldrb	r2, [r7, #1]
 8020bbe:	fb12 f200 	smulbb	r2, r2, r0
 8020bc2:	121b      	asrs	r3, r3, #8
 8020bc4:	703b      	strb	r3, [r7, #0]
 8020bc6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020bca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020bce:	fb03 2301 	mla	r3, r3, r1, r2
 8020bd2:	b29b      	uxth	r3, r3
 8020bd4:	1c5a      	adds	r2, r3, #1
 8020bd6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020bda:	121b      	asrs	r3, r3, #8
 8020bdc:	707b      	strb	r3, [r7, #1]
 8020bde:	78bb      	ldrb	r3, [r7, #2]
 8020be0:	fb13 f000 	smulbb	r0, r3, r0
 8020be4:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020be8:	fa1f fc8c 	uxth.w	ip, ip
 8020bec:	f10c 0301 	add.w	r3, ip, #1
 8020bf0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020bf4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020bf8:	f887 c002 	strb.w	ip, [r7, #2]
 8020bfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020bfe:	3703      	adds	r7, #3
 8020c00:	441d      	add	r5, r3
 8020c02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c04:	441e      	add	r6, r3
 8020c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020c08:	3b01      	subs	r3, #1
 8020c0a:	9318      	str	r3, [sp, #96]	; 0x60
 8020c0c:	e69f      	b.n	802094e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020c0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c10:	441d      	add	r5, r3
 8020c12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c14:	441e      	add	r6, r3
 8020c16:	9b07      	ldr	r3, [sp, #28]
 8020c18:	3b01      	subs	r3, #1
 8020c1a:	9307      	str	r3, [sp, #28]
 8020c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c1e:	3303      	adds	r3, #3
 8020c20:	930a      	str	r3, [sp, #40]	; 0x28
 8020c22:	e674      	b.n	802090e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020c24:	d025      	beq.n	8020c72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8020c26:	9b07      	ldr	r3, [sp, #28]
 8020c28:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020c2a:	3b01      	subs	r3, #1
 8020c2c:	fb00 5003 	mla	r0, r0, r3, r5
 8020c30:	1400      	asrs	r0, r0, #16
 8020c32:	f53f ae89 	bmi.w	8020948 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c36:	3901      	subs	r1, #1
 8020c38:	4288      	cmp	r0, r1
 8020c3a:	f6bf ae85 	bge.w	8020948 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c3e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020c40:	fb01 6303 	mla	r3, r1, r3, r6
 8020c44:	141b      	asrs	r3, r3, #16
 8020c46:	f53f ae7f 	bmi.w	8020948 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c4a:	3a01      	subs	r2, #1
 8020c4c:	4293      	cmp	r3, r2
 8020c4e:	f6bf ae7b 	bge.w	8020948 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c54:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020c58:	f103 0e03 	add.w	lr, r3, #3
 8020c5c:	f1bb 0f00 	cmp.w	fp, #0
 8020c60:	dc6e      	bgt.n	8020d40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8020c62:	9b07      	ldr	r3, [sp, #28]
 8020c64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c6e:	4423      	add	r3, r4
 8020c70:	930a      	str	r3, [sp, #40]	; 0x28
 8020c72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	f340 81ab 	ble.w	8020fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020c7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c88:	eef0 6a62 	vmov.f32	s13, s5
 8020c8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020c90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c98:	ee16 5a90 	vmov	r5, s13
 8020c9c:	eef0 6a43 	vmov.f32	s13, s6
 8020ca0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ca4:	ee16 6a90 	vmov	r6, s13
 8020ca8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020cb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020cb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020cb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020cbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020cc0:	ee12 2a90 	vmov	r2, s5
 8020cc4:	eef0 2a47 	vmov.f32	s5, s14
 8020cc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ccc:	ee13 2a10 	vmov	r2, s6
 8020cd0:	9329      	str	r3, [sp, #164]	; 0xa4
 8020cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020cd4:	eeb0 3a67 	vmov.f32	s6, s15
 8020cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cdc:	932a      	str	r3, [sp, #168]	; 0xa8
 8020cde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ce0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020ce2:	3b01      	subs	r3, #1
 8020ce4:	9317      	str	r3, [sp, #92]	; 0x5c
 8020ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020ce8:	bf08      	it	eq
 8020cea:	4613      	moveq	r3, r2
 8020cec:	9307      	str	r3, [sp, #28]
 8020cee:	e600      	b.n	80208f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020cf0:	f1bc 0f00 	cmp.w	ip, #0
 8020cf4:	f43f ae6e 	beq.w	80209d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020cf8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020cfc:	9308      	str	r3, [sp, #32]
 8020cfe:	0e1b      	lsrs	r3, r3, #24
 8020d00:	9311      	str	r3, [sp, #68]	; 0x44
 8020d02:	e667      	b.n	80209d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020d04:	f112 0801 	adds.w	r8, r2, #1
 8020d08:	f53f af78 	bmi.w	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020d0c:	45c6      	cmp	lr, r8
 8020d0e:	f6ff af75 	blt.w	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020d12:	f110 0801 	adds.w	r8, r0, #1
 8020d16:	f53f af71 	bmi.w	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020d1a:	4543      	cmp	r3, r8
 8020d1c:	f6ff af6e 	blt.w	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020d20:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020d22:	b21b      	sxth	r3, r3
 8020d24:	9201      	str	r2, [sp, #4]
 8020d26:	9300      	str	r3, [sp, #0]
 8020d28:	fa0f f38e 	sxth.w	r3, lr
 8020d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020d32:	e9cd c404 	strd	ip, r4, [sp, #16]
 8020d36:	4639      	mov	r1, r7
 8020d38:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020d3a:	f7ff fc79 	bl	8020630 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020d3e:	e75d      	b.n	8020bfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020d40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020d42:	142f      	asrs	r7, r5, #16
 8020d44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d46:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020d4a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020d4e:	1433      	asrs	r3, r6, #16
 8020d50:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020d54:	fb02 7303 	mla	r3, r2, r3, r7
 8020d58:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8020d5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020d60:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020d64:	2900      	cmp	r1, #0
 8020d66:	f000 812a 	beq.w	8020fbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020d6a:	687c      	ldr	r4, [r7, #4]
 8020d6c:	940e      	str	r4, [sp, #56]	; 0x38
 8020d6e:	0e24      	lsrs	r4, r4, #24
 8020d70:	9415      	str	r4, [sp, #84]	; 0x54
 8020d72:	b178      	cbz	r0, 8020d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020d74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8020d78:	3a01      	subs	r2, #1
 8020d7a:	0092      	lsls	r2, r2, #2
 8020d7c:	3204      	adds	r2, #4
 8020d7e:	eb07 0802 	add.w	r8, r7, r2
 8020d82:	58ba      	ldr	r2, [r7, r2]
 8020d84:	9209      	str	r2, [sp, #36]	; 0x24
 8020d86:	0e12      	lsrs	r2, r2, #24
 8020d88:	9212      	str	r2, [sp, #72]	; 0x48
 8020d8a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020d8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020d90:	0e12      	lsrs	r2, r2, #24
 8020d92:	9216      	str	r2, [sp, #88]	; 0x58
 8020d94:	b289      	uxth	r1, r1
 8020d96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020d98:	b280      	uxth	r0, r0
 8020d9a:	fb01 f900 	mul.w	r9, r1, r0
 8020d9e:	0109      	lsls	r1, r1, #4
 8020da0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020da4:	eba1 0809 	sub.w	r8, r1, r9
 8020da8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020dac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020dae:	b280      	uxth	r0, r0
 8020db0:	fa1f f888 	uxth.w	r8, r8
 8020db4:	1a12      	subs	r2, r2, r0
 8020db6:	fb08 f101 	mul.w	r1, r8, r1
 8020dba:	b292      	uxth	r2, r2
 8020dbc:	fb02 110c 	mla	r1, r2, ip, r1
 8020dc0:	fb00 1104 	mla	r1, r0, r4, r1
 8020dc4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020dc6:	fb09 1104 	mla	r1, r9, r4, r1
 8020dca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020dce:	2900      	cmp	r1, #0
 8020dd0:	f000 80ec 	beq.w	8020fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8020dd4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020dd8:	d019      	beq.n	8020e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020dda:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020dde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020de2:	fb0c fa0a 	mul.w	sl, ip, sl
 8020de6:	fb0c fc03 	mul.w	ip, ip, r3
 8020dea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020dee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020df2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020df6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020dfa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020dfe:	4453      	add	r3, sl
 8020e00:	0a3f      	lsrs	r7, r7, #8
 8020e02:	0a1b      	lsrs	r3, r3, #8
 8020e04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020e08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e0c:	433b      	orrs	r3, r7
 8020e0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020e10:	2cff      	cmp	r4, #255	; 0xff
 8020e12:	d020      	beq.n	8020e56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8020e14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020e1c:	4367      	muls	r7, r4
 8020e1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020e2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e32:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e36:	44bc      	add	ip, r7
 8020e38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e50:	ea4c 040a 	orr.w	r4, ip, sl
 8020e54:	940e      	str	r4, [sp, #56]	; 0x38
 8020e56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e58:	2cff      	cmp	r4, #255	; 0xff
 8020e5a:	d020      	beq.n	8020e9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8020e5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e5e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e64:	4367      	muls	r7, r4
 8020e66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e70:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e7e:	44bc      	add	ip, r7
 8020e80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e98:	ea4c 040a 	orr.w	r4, ip, sl
 8020e9c:	9409      	str	r4, [sp, #36]	; 0x24
 8020e9e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020ea0:	2cff      	cmp	r4, #255	; 0xff
 8020ea2:	d020      	beq.n	8020ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8020ea4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ea6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020eaa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020eac:	4367      	muls	r7, r4
 8020eae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020eb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020eb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020eb8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020eba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ebe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ec2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ec6:	44bc      	add	ip, r7
 8020ec8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ed0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ed4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ed8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020edc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ee0:	ea4c 040a 	orr.w	r4, ip, sl
 8020ee4:	940f      	str	r4, [sp, #60]	; 0x3c
 8020ee6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ee8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020eec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ef0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020ef4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020ef6:	fb08 f707 	mul.w	r7, r8, r7
 8020efa:	fb02 770c 	mla	r7, r2, ip, r7
 8020efe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020f02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020f04:	fb00 770c 	mla	r7, r0, ip, r7
 8020f08:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020f0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f0e:	fb09 770c 	mla	r7, r9, ip, r7
 8020f12:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020f16:	fb08 f80c 	mul.w	r8, r8, ip
 8020f1a:	0a3f      	lsrs	r7, r7, #8
 8020f1c:	fb02 8303 	mla	r3, r2, r3, r8
 8020f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f22:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020f26:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020f2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f2c:	fb00 330a 	mla	r3, r0, sl, r3
 8020f30:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020f34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020f36:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f40:	434b      	muls	r3, r1
 8020f42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f46:	1c59      	adds	r1, r3, #1
 8020f48:	ea47 070c 	orr.w	r7, r7, ip
 8020f4c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020f50:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020f54:	b2fa      	uxtb	r2, r7
 8020f56:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020f5a:	fb12 f200 	smulbb	r2, r2, r0
 8020f5e:	b2c9      	uxtb	r1, r1
 8020f60:	fb03 2301 	mla	r3, r3, r1, r2
 8020f64:	b29b      	uxth	r3, r3
 8020f66:	1c5a      	adds	r2, r3, #1
 8020f68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f6c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020f70:	fb12 f201 	smulbb	r2, r2, r1
 8020f74:	121b      	asrs	r3, r3, #8
 8020f76:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020f7a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020f7e:	0c3f      	lsrs	r7, r7, #16
 8020f80:	fb03 2300 	mla	r3, r3, r0, r2
 8020f84:	b29b      	uxth	r3, r3
 8020f86:	1c5a      	adds	r2, r3, #1
 8020f88:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f8c:	121b      	asrs	r3, r3, #8
 8020f8e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020f92:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020f96:	fb13 f101 	smulbb	r1, r3, r1
 8020f9a:	fb07 1700 	mla	r7, r7, r0, r1
 8020f9e:	b2bf      	uxth	r7, r7
 8020fa0:	1c79      	adds	r1, r7, #1
 8020fa2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020fa6:	123f      	asrs	r7, r7, #8
 8020fa8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020fac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020fae:	f10e 0e03 	add.w	lr, lr, #3
 8020fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020fb6:	441d      	add	r5, r3
 8020fb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020fba:	441e      	add	r6, r3
 8020fbc:	e64e      	b.n	8020c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8020fbe:	2800      	cmp	r0, #0
 8020fc0:	f43f aee8 	beq.w	8020d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020fc4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8020fca:	0e12      	lsrs	r2, r2, #24
 8020fcc:	9212      	str	r2, [sp, #72]	; 0x48
 8020fce:	e6e1      	b.n	8020d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020fd0:	b01d      	add	sp, #116	; 0x74
 8020fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fd6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8020fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fda:	b087      	sub	sp, #28
 8020fdc:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8020fe0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020fe4:	fb05 7003 	mla	r0, r5, r3, r7
 8020fe8:	2d00      	cmp	r5, #0
 8020fea:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8020fee:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8020ff2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020ff6:	f2c0 810a 	blt.w	802120e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020ffa:	45a8      	cmp	r8, r5
 8020ffc:	f340 8107 	ble.w	802120e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021000:	2f00      	cmp	r7, #0
 8021002:	f2c0 8102 	blt.w	802120a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021006:	42bb      	cmp	r3, r7
 8021008:	f340 80ff 	ble.w	802120a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802100c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021010:	1c7a      	adds	r2, r7, #1
 8021012:	f100 80ff 	bmi.w	8021214 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021016:	4293      	cmp	r3, r2
 8021018:	f340 80fc 	ble.w	8021214 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802101c:	2c00      	cmp	r4, #0
 802101e:	f000 80fb 	beq.w	8021218 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8021022:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021026:	3501      	adds	r5, #1
 8021028:	f100 80fa 	bmi.w	8021220 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802102c:	45a8      	cmp	r8, r5
 802102e:	f340 80f7 	ble.w	8021220 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021032:	f1be 0f00 	cmp.w	lr, #0
 8021036:	f000 80f6 	beq.w	8021226 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802103a:	2f00      	cmp	r7, #0
 802103c:	f2c0 80ee 	blt.w	802121c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021040:	42bb      	cmp	r3, r7
 8021042:	f340 80eb 	ble.w	802121c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021046:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802104a:	3701      	adds	r7, #1
 802104c:	f100 80ee 	bmi.w	802122c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021050:	42bb      	cmp	r3, r7
 8021052:	f340 80eb 	ble.w	802122c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021056:	2c00      	cmp	r4, #0
 8021058:	f000 80ea 	beq.w	8021230 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802105c:	3301      	adds	r3, #1
 802105e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021062:	fa1f fc84 	uxth.w	ip, r4
 8021066:	fa1f fe8e 	uxth.w	lr, lr
 802106a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802106e:	fb0c f90e 	mul.w	r9, ip, lr
 8021072:	0e13      	lsrs	r3, r2, #24
 8021074:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021078:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802107c:	9302      	str	r3, [sp, #8]
 802107e:	ebac 0709 	sub.w	r7, ip, r9
 8021082:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021086:	fa1f f48e 	uxth.w	r4, lr
 802108a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 802108e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021092:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021096:	fb0a fe0e 	mul.w	lr, sl, lr
 802109a:	1b1b      	subs	r3, r3, r4
 802109c:	fb0a f606 	mul.w	r6, sl, r6
 80210a0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80210a4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80210a8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80210ac:	b29b      	uxth	r3, r3
 80210ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210b2:	b2bf      	uxth	r7, r7
 80210b4:	9301      	str	r3, [sp, #4]
 80210b6:	44e6      	add	lr, ip
 80210b8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80210bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210c0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80210c4:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80210c8:	9303      	str	r3, [sp, #12]
 80210ca:	0a33      	lsrs	r3, r6, #8
 80210cc:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80210d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80210d4:	9304      	str	r3, [sp, #16]
 80210d6:	fb0b f606 	mul.w	r6, fp, r6
 80210da:	fb0b f000 	mul.w	r0, fp, r0
 80210de:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80210e2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80210e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210ea:	44b6      	add	lr, r6
 80210ec:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80210f0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80210f4:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80210f8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80210fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021100:	fb08 f606 	mul.w	r6, r8, r6
 8021104:	0a03      	lsrs	r3, r0, #8
 8021106:	fb08 f505 	mul.w	r5, r8, r5
 802110a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802110e:	0a30      	lsrs	r0, r6, #8
 8021110:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021114:	9305      	str	r3, [sp, #20]
 8021116:	0e13      	lsrs	r3, r2, #24
 8021118:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802111c:	fb0e fe07 	mul.w	lr, lr, r7
 8021120:	4430      	add	r0, r6
 8021122:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021126:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802112a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802112e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021132:	0a00      	lsrs	r0, r0, #8
 8021134:	435e      	muls	r6, r3
 8021136:	0a2d      	lsrs	r5, r5, #8
 8021138:	435a      	muls	r2, r3
 802113a:	9b03      	ldr	r3, [sp, #12]
 802113c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021140:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021144:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021148:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802114c:	44b4      	add	ip, r6
 802114e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8021152:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021156:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802115a:	9e01      	ldr	r6, [sp, #4]
 802115c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021160:	fb03 ee06 	mla	lr, r3, r6, lr
 8021164:	9b04      	ldr	r3, [sp, #16]
 8021166:	0a12      	lsrs	r2, r2, #8
 8021168:	fb0c ee09 	mla	lr, ip, r9, lr
 802116c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8021170:	9b05      	ldr	r3, [sp, #20]
 8021172:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021176:	fb00 ee04 	mla	lr, r0, r4, lr
 802117a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802117e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8021182:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8021186:	9b01      	ldr	r3, [sp, #4]
 8021188:	fb07 fe0e 	mul.w	lr, r7, lr
 802118c:	fb07 f70b 	mul.w	r7, r7, fp
 8021190:	fb03 ee06 	mla	lr, r3, r6, lr
 8021194:	fb03 730a 	mla	r3, r3, sl, r7
 8021198:	fb09 e202 	mla	r2, r9, r2, lr
 802119c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80211a0:	fb04 2e0e 	mla	lr, r4, lr, r2
 80211a4:	fb04 3408 	mla	r4, r4, r8, r3
 80211a8:	9b02      	ldr	r3, [sp, #8]
 80211aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211ae:	fb09 4903 	mla	r9, r9, r3, r4
 80211b2:	780b      	ldrb	r3, [r1, #0]
 80211b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80211b8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80211bc:	ea40 0e0e 	orr.w	lr, r0, lr
 80211c0:	fa5f f989 	uxtb.w	r9, r9
 80211c4:	fb03 f209 	mul.w	r2, r3, r9
 80211c8:	1c53      	adds	r3, r2, #1
 80211ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80211ce:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80211d2:	700b      	strb	r3, [r1, #0]
 80211d4:	784b      	ldrb	r3, [r1, #1]
 80211d6:	fb03 f309 	mul.w	r3, r3, r9
 80211da:	1c5a      	adds	r2, r3, #1
 80211dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80211e0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80211e4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80211e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80211ec:	704b      	strb	r3, [r1, #1]
 80211ee:	788b      	ldrb	r3, [r1, #2]
 80211f0:	fb03 f909 	mul.w	r9, r3, r9
 80211f4:	f109 0301 	add.w	r3, r9, #1
 80211f8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80211fc:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8021200:	f881 e002 	strb.w	lr, [r1, #2]
 8021204:	b007      	add	sp, #28
 8021206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802120a:	2600      	movs	r6, #0
 802120c:	e700      	b.n	8021010 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802120e:	2000      	movs	r0, #0
 8021210:	4606      	mov	r6, r0
 8021212:	e708      	b.n	8021026 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021214:	2000      	movs	r0, #0
 8021216:	e706      	b.n	8021026 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021218:	4620      	mov	r0, r4
 802121a:	e704      	b.n	8021026 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802121c:	2500      	movs	r5, #0
 802121e:	e714      	b.n	802104a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8021220:	2200      	movs	r2, #0
 8021222:	4615      	mov	r5, r2
 8021224:	e71d      	b.n	8021062 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021226:	4672      	mov	r2, lr
 8021228:	4675      	mov	r5, lr
 802122a:	e71a      	b.n	8021062 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802122c:	2200      	movs	r2, #0
 802122e:	e718      	b.n	8021062 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021230:	4622      	mov	r2, r4
 8021232:	e716      	b.n	8021062 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08021234 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021238:	b099      	sub	sp, #100	; 0x64
 802123a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 802123e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021240:	9017      	str	r0, [sp, #92]	; 0x5c
 8021242:	9306      	str	r3, [sp, #24]
 8021244:	6850      	ldr	r0, [r2, #4]
 8021246:	6812      	ldr	r2, [r2, #0]
 8021248:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802124c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8021250:	fb00 1303 	mla	r3, r0, r3, r1
 8021254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021258:	18d3      	adds	r3, r2, r3
 802125a:	9309      	str	r3, [sp, #36]	; 0x24
 802125c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802125e:	681b      	ldr	r3, [r3, #0]
 8021260:	930e      	str	r3, [sp, #56]	; 0x38
 8021262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021264:	2b00      	cmp	r3, #0
 8021266:	dc03      	bgt.n	8021270 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021268:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802126a:	2b00      	cmp	r3, #0
 802126c:	f340 8360 	ble.w	8021930 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021270:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021272:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021276:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802127a:	1e48      	subs	r0, r1, #1
 802127c:	1e57      	subs	r7, r2, #1
 802127e:	9b06      	ldr	r3, [sp, #24]
 8021280:	2b00      	cmp	r3, #0
 8021282:	f340 817b 	ble.w	802157c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8021286:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802128a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802128e:	d406      	bmi.n	802129e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021290:	4584      	cmp	ip, r0
 8021292:	da04      	bge.n	802129e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021294:	2b00      	cmp	r3, #0
 8021296:	db02      	blt.n	802129e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021298:	42bb      	cmp	r3, r7
 802129a:	f2c0 8170 	blt.w	802157e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802129e:	f11c 0c01 	adds.w	ip, ip, #1
 80212a2:	f100 8160 	bmi.w	8021566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80212a6:	4561      	cmp	r1, ip
 80212a8:	f2c0 815d 	blt.w	8021566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80212ac:	3301      	adds	r3, #1
 80212ae:	f100 815a 	bmi.w	8021566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80212b2:	429a      	cmp	r2, r3
 80212b4:	f2c0 8157 	blt.w	8021566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80212b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80212bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80212be:	f1b8 0f00 	cmp.w	r8, #0
 80212c2:	f340 8179 	ble.w	80215b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80212c6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80212c8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80212cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80212ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80212d2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80212d6:	142a      	asrs	r2, r5, #16
 80212d8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80212dc:	689b      	ldr	r3, [r3, #8]
 80212de:	f100 81be 	bmi.w	802165e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80212e2:	f103 39ff 	add.w	r9, r3, #4294967295
 80212e6:	454a      	cmp	r2, r9
 80212e8:	f280 81b9 	bge.w	802165e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80212ec:	f1bc 0f00 	cmp.w	ip, #0
 80212f0:	f2c0 81b5 	blt.w	802165e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80212f4:	f10e 39ff 	add.w	r9, lr, #4294967295
 80212f8:	45cc      	cmp	ip, r9
 80212fa:	f280 81b0 	bge.w	802165e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80212fe:	b21b      	sxth	r3, r3
 8021300:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021302:	fb0c 2203 	mla	r2, ip, r3, r2
 8021306:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802130a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802130e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021312:	2900      	cmp	r1, #0
 8021314:	f000 8197 	beq.w	8021646 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021318:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802131c:	940a      	str	r4, [sp, #40]	; 0x28
 802131e:	0e24      	lsrs	r4, r4, #24
 8021320:	9411      	str	r4, [sp, #68]	; 0x44
 8021322:	b180      	cbz	r0, 8021346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021328:	3b01      	subs	r3, #1
 802132a:	009b      	lsls	r3, r3, #2
 802132c:	3304      	adds	r3, #4
 802132e:	eb09 0c03 	add.w	ip, r9, r3
 8021332:	f859 3003 	ldr.w	r3, [r9, r3]
 8021336:	9307      	str	r3, [sp, #28]
 8021338:	0e1b      	lsrs	r3, r3, #24
 802133a:	930f      	str	r3, [sp, #60]	; 0x3c
 802133c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021340:	930b      	str	r3, [sp, #44]	; 0x2c
 8021342:	0e1b      	lsrs	r3, r3, #24
 8021344:	9312      	str	r3, [sp, #72]	; 0x48
 8021346:	b289      	uxth	r1, r1
 8021348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802134a:	b280      	uxth	r0, r0
 802134c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802134e:	fb01 fa00 	mul.w	sl, r1, r0
 8021352:	0109      	lsls	r1, r1, #4
 8021354:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021358:	eba1 090a 	sub.w	r9, r1, sl
 802135c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021360:	b280      	uxth	r0, r0
 8021362:	fa1f f989 	uxth.w	r9, r9
 8021366:	1a09      	subs	r1, r1, r0
 8021368:	fb09 f303 	mul.w	r3, r9, r3
 802136c:	b289      	uxth	r1, r1
 802136e:	fb01 330e 	mla	r3, r1, lr, r3
 8021372:	fb00 3304 	mla	r3, r0, r4, r3
 8021376:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021378:	fb0a 3304 	mla	r3, sl, r4, r3
 802137c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021380:	2b00      	cmp	r3, #0
 8021382:	f000 80e8 	beq.w	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021386:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802138a:	d01b      	beq.n	80213c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802138c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8021390:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021394:	fb0e fb0b 	mul.w	fp, lr, fp
 8021398:	fb0e fe02 	mul.w	lr, lr, r2
 802139c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80213a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213a4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80213a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80213ac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80213b0:	445a      	add	r2, fp
 80213b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213b6:	0a12      	lsrs	r2, r2, #8
 80213b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80213bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80213c0:	ea42 020c 	orr.w	r2, r2, ip
 80213c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213c6:	2cff      	cmp	r4, #255	; 0xff
 80213c8:	d021      	beq.n	802140e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80213ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80213cc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80213d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213d2:	fb04 fc0c 	mul.w	ip, r4, ip
 80213d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80213d8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80213dc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80213e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80213e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80213ee:	44e6      	add	lr, ip
 80213f0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80213f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213f8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80213fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021400:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021404:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021408:	ea4e 040b 	orr.w	r4, lr, fp
 802140c:	940a      	str	r4, [sp, #40]	; 0x28
 802140e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021410:	2cff      	cmp	r4, #255	; 0xff
 8021412:	d021      	beq.n	8021458 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021414:	9c07      	ldr	r4, [sp, #28]
 8021416:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802141a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802141c:	fb04 fc0c 	mul.w	ip, r4, ip
 8021420:	9c07      	ldr	r4, [sp, #28]
 8021422:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021426:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802142a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802142c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021430:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021434:	fb04 fb0b 	mul.w	fp, r4, fp
 8021438:	44e6      	add	lr, ip
 802143a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802143e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021442:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021446:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802144a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802144e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021452:	ea4e 040b 	orr.w	r4, lr, fp
 8021456:	9407      	str	r4, [sp, #28]
 8021458:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802145a:	2cff      	cmp	r4, #255	; 0xff
 802145c:	d021      	beq.n	80214a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802145e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021460:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021464:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021466:	fb04 fc0c 	mul.w	ip, r4, ip
 802146a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802146c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021470:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021474:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021476:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802147a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802147e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021482:	44e6      	add	lr, ip
 8021484:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021488:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802148c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021490:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021494:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021498:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802149c:	ea4e 040b 	orr.w	r4, lr, fp
 80214a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80214a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214a4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80214a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80214ac:	2bff      	cmp	r3, #255	; 0xff
 80214ae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80214b2:	9c07      	ldr	r4, [sp, #28]
 80214b4:	fb09 fc0c 	mul.w	ip, r9, ip
 80214b8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80214bc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80214c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214c2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80214c6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80214ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214cc:	fb0a cc0e 	mla	ip, sl, lr, ip
 80214d0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80214d4:	fb09 f90e 	mul.w	r9, r9, lr
 80214d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214dc:	fb01 9202 	mla	r2, r1, r2, r9
 80214e0:	9907      	ldr	r1, [sp, #28]
 80214e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214e6:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80214ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80214ec:	fb00 220b 	mla	r2, r0, fp, r2
 80214f0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80214f4:	fb0a 2a00 	mla	sl, sl, r0, r2
 80214f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021500:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021504:	fa5f f08c 	uxtb.w	r0, ip
 8021508:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802150c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021510:	f000 80a2 	beq.w	8021658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021514:	43db      	mvns	r3, r3
 8021516:	783a      	ldrb	r2, [r7, #0]
 8021518:	f897 a002 	ldrb.w	sl, [r7, #2]
 802151c:	b2db      	uxtb	r3, r3
 802151e:	fb02 fe03 	mul.w	lr, r2, r3
 8021522:	fb0a fa03 	mul.w	sl, sl, r3
 8021526:	f10e 0201 	add.w	r2, lr, #1
 802152a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 802152e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021532:	703a      	strb	r2, [r7, #0]
 8021534:	787a      	ldrb	r2, [r7, #1]
 8021536:	fb02 f003 	mul.w	r0, r2, r3
 802153a:	f10a 0301 	add.w	r3, sl, #1
 802153e:	1c42      	adds	r2, r0, #1
 8021540:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021544:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021548:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802154c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021550:	707a      	strb	r2, [r7, #1]
 8021552:	f887 c002 	strb.w	ip, [r7, #2]
 8021556:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021558:	3703      	adds	r7, #3
 802155a:	f108 38ff 	add.w	r8, r8, #4294967295
 802155e:	441d      	add	r5, r3
 8021560:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021562:	441e      	add	r6, r3
 8021564:	e6ab      	b.n	80212be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021566:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021568:	441d      	add	r5, r3
 802156a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802156c:	441e      	add	r6, r3
 802156e:	9b06      	ldr	r3, [sp, #24]
 8021570:	3b01      	subs	r3, #1
 8021572:	9306      	str	r3, [sp, #24]
 8021574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021576:	3303      	adds	r3, #3
 8021578:	9309      	str	r3, [sp, #36]	; 0x24
 802157a:	e680      	b.n	802127e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802157c:	d024      	beq.n	80215c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802157e:	9b06      	ldr	r3, [sp, #24]
 8021580:	9825      	ldr	r0, [sp, #148]	; 0x94
 8021582:	3b01      	subs	r3, #1
 8021584:	fb00 5003 	mla	r0, r0, r3, r5
 8021588:	1400      	asrs	r0, r0, #16
 802158a:	f53f ae95 	bmi.w	80212b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802158e:	3901      	subs	r1, #1
 8021590:	4288      	cmp	r0, r1
 8021592:	f6bf ae91 	bge.w	80212b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021596:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021598:	fb01 6303 	mla	r3, r1, r3, r6
 802159c:	141b      	asrs	r3, r3, #16
 802159e:	f53f ae8b 	bmi.w	80212b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80215a2:	3a01      	subs	r2, #1
 80215a4:	4293      	cmp	r3, r2
 80215a6:	f6bf ae87 	bge.w	80212b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80215aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215ac:	f8dd b018 	ldr.w	fp, [sp, #24]
 80215b0:	1cdf      	adds	r7, r3, #3
 80215b2:	f1bb 0f00 	cmp.w	fp, #0
 80215b6:	dc6e      	bgt.n	8021696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80215b8:	9b06      	ldr	r3, [sp, #24]
 80215ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80215be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215c4:	4423      	add	r3, r4
 80215c6:	9309      	str	r3, [sp, #36]	; 0x24
 80215c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	f340 81b0 	ble.w	8021930 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80215d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80215d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215de:	eef0 6a62 	vmov.f32	s13, s5
 80215e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215ee:	ee16 5a90 	vmov	r5, s13
 80215f2:	eef0 6a43 	vmov.f32	s13, s6
 80215f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215fa:	ee16 6a90 	vmov	r6, s13
 80215fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021602:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021606:	ee77 2a62 	vsub.f32	s5, s14, s5
 802160a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802160e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021612:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021616:	ee12 2a90 	vmov	r2, s5
 802161a:	eef0 2a47 	vmov.f32	s5, s14
 802161e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021622:	ee13 2a10 	vmov	r2, s6
 8021626:	9325      	str	r3, [sp, #148]	; 0x94
 8021628:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802162a:	eeb0 3a67 	vmov.f32	s6, s15
 802162e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021632:	9326      	str	r3, [sp, #152]	; 0x98
 8021634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021636:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021638:	3b01      	subs	r3, #1
 802163a:	9315      	str	r3, [sp, #84]	; 0x54
 802163c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802163e:	bf08      	it	eq
 8021640:	4613      	moveq	r3, r2
 8021642:	9306      	str	r3, [sp, #24]
 8021644:	e60d      	b.n	8021262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021646:	2800      	cmp	r0, #0
 8021648:	f43f ae7d 	beq.w	8021346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802164c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021650:	9307      	str	r3, [sp, #28]
 8021652:	0e1b      	lsrs	r3, r3, #24
 8021654:	930f      	str	r3, [sp, #60]	; 0x3c
 8021656:	e676      	b.n	8021346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021658:	7038      	strb	r0, [r7, #0]
 802165a:	7079      	strb	r1, [r7, #1]
 802165c:	e779      	b.n	8021552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802165e:	f112 0901 	adds.w	r9, r2, #1
 8021662:	f53f af78 	bmi.w	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021666:	454b      	cmp	r3, r9
 8021668:	f6ff af75 	blt.w	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802166c:	f11c 0901 	adds.w	r9, ip, #1
 8021670:	f53f af71 	bmi.w	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021674:	45ce      	cmp	lr, r9
 8021676:	f6ff af6e 	blt.w	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802167a:	b21b      	sxth	r3, r3
 802167c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021680:	fa0f f28e 	sxth.w	r2, lr
 8021684:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021688:	9200      	str	r2, [sp, #0]
 802168a:	4639      	mov	r1, r7
 802168c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802168e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021690:	f7ff fca1 	bl	8020fd6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021694:	e75f      	b.n	8021556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021696:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021698:	1429      	asrs	r1, r5, #16
 802169a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802169c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80216a0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80216a4:	1433      	asrs	r3, r6, #16
 80216a6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80216aa:	fb0c 1303 	mla	r3, ip, r3, r1
 80216ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80216b0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80216b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80216b8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80216bc:	2a00      	cmp	r2, #0
 80216be:	f000 8129 	beq.w	8021914 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80216c2:	684c      	ldr	r4, [r1, #4]
 80216c4:	940c      	str	r4, [sp, #48]	; 0x30
 80216c6:	0e24      	lsrs	r4, r4, #24
 80216c8:	9413      	str	r4, [sp, #76]	; 0x4c
 80216ca:	b198      	cbz	r0, 80216f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80216cc:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80216d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80216d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80216d8:	f10c 0c04 	add.w	ip, ip, #4
 80216dc:	eb01 080c 	add.w	r8, r1, ip
 80216e0:	f851 100c 	ldr.w	r1, [r1, ip]
 80216e4:	9108      	str	r1, [sp, #32]
 80216e6:	0e09      	lsrs	r1, r1, #24
 80216e8:	9110      	str	r1, [sp, #64]	; 0x40
 80216ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80216ee:	910d      	str	r1, [sp, #52]	; 0x34
 80216f0:	0e09      	lsrs	r1, r1, #24
 80216f2:	9114      	str	r1, [sp, #80]	; 0x50
 80216f4:	b292      	uxth	r2, r2
 80216f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80216f8:	b280      	uxth	r0, r0
 80216fa:	fb02 f900 	mul.w	r9, r2, r0
 80216fe:	0112      	lsls	r2, r2, #4
 8021700:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021704:	eba2 0809 	sub.w	r8, r2, r9
 8021708:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802170c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802170e:	b280      	uxth	r0, r0
 8021710:	fa1f f888 	uxth.w	r8, r8
 8021714:	1a09      	subs	r1, r1, r0
 8021716:	fb08 f202 	mul.w	r2, r8, r2
 802171a:	b289      	uxth	r1, r1
 802171c:	fb01 220e 	mla	r2, r1, lr, r2
 8021720:	fb00 2204 	mla	r2, r0, r4, r2
 8021724:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021726:	fb09 2204 	mla	r2, r9, r4, r2
 802172a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802172e:	2a00      	cmp	r2, #0
 8021730:	f000 80e8 	beq.w	8021904 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8021734:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021738:	d01b      	beq.n	8021772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802173a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802173e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021742:	fb0e fa0a 	mul.w	sl, lr, sl
 8021746:	fb0e fe03 	mul.w	lr, lr, r3
 802174a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802174e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021752:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021756:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802175a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802175e:	4453      	add	r3, sl
 8021760:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021764:	0a1b      	lsrs	r3, r3, #8
 8021766:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802176a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802176e:	ea43 030c 	orr.w	r3, r3, ip
 8021772:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021774:	2cff      	cmp	r4, #255	; 0xff
 8021776:	d021      	beq.n	80217bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8021778:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802177a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802177e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021780:	fb04 fc0c 	mul.w	ip, r4, ip
 8021784:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021786:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802178a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802178e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021790:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021794:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021798:	fb04 fa0a 	mul.w	sl, r4, sl
 802179c:	44e6      	add	lr, ip
 802179e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80217a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80217a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80217aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217b6:	ea4e 040a 	orr.w	r4, lr, sl
 80217ba:	940c      	str	r4, [sp, #48]	; 0x30
 80217bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80217be:	2cff      	cmp	r4, #255	; 0xff
 80217c0:	d021      	beq.n	8021806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80217c2:	9c08      	ldr	r4, [sp, #32]
 80217c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80217c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80217ca:	fb04 fc0c 	mul.w	ip, r4, ip
 80217ce:	9c08      	ldr	r4, [sp, #32]
 80217d0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80217d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80217d6:	fb04 fa0e 	mul.w	sl, r4, lr
 80217da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80217de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80217e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217e6:	44e6      	add	lr, ip
 80217e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80217ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80217f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80217f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021800:	ea4e 040a 	orr.w	r4, lr, sl
 8021804:	9408      	str	r4, [sp, #32]
 8021806:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021808:	2cff      	cmp	r4, #255	; 0xff
 802180a:	d021      	beq.n	8021850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802180c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802180e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021812:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021814:	fb04 fc0c 	mul.w	ip, r4, ip
 8021818:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802181a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802181e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021822:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021824:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021828:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802182c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021830:	44e6      	add	lr, ip
 8021832:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021836:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802183a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802183e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021842:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021846:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802184a:	ea4e 040a 	orr.w	r4, lr, sl
 802184e:	940d      	str	r4, [sp, #52]	; 0x34
 8021850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021852:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802185a:	2aff      	cmp	r2, #255	; 0xff
 802185c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021860:	9c08      	ldr	r4, [sp, #32]
 8021862:	fb08 fc0c 	mul.w	ip, r8, ip
 8021866:	fb01 cc0e 	mla	ip, r1, lr, ip
 802186a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802186e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021870:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021874:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021878:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802187a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802187e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021882:	fb08 f80e 	mul.w	r8, r8, lr
 8021886:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802188a:	fb01 8303 	mla	r3, r1, r3, r8
 802188e:	9908      	ldr	r1, [sp, #32]
 8021890:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021894:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021898:	990d      	ldr	r1, [sp, #52]	; 0x34
 802189a:	fb00 330a 	mla	r3, r0, sl, r3
 802189e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80218a2:	fb09 3e0e 	mla	lr, r9, lr, r3
 80218a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80218ae:	ea4c 0c0e 	orr.w	ip, ip, lr
 80218b2:	fa5f f08c 	uxtb.w	r0, ip
 80218b6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80218ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80218be:	d032      	beq.n	8021926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80218c0:	43d2      	mvns	r2, r2
 80218c2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80218c6:	b2d2      	uxtb	r2, r2
 80218c8:	fb0e fe02 	mul.w	lr, lr, r2
 80218cc:	f10e 0301 	add.w	r3, lr, #1
 80218d0:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80218d4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80218d8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80218dc:	4350      	muls	r0, r2
 80218de:	f807 3c03 	strb.w	r3, [r7, #-3]
 80218e2:	1c43      	adds	r3, r0, #1
 80218e4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80218e8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80218ec:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80218f0:	4353      	muls	r3, r2
 80218f2:	f807 1c02 	strb.w	r1, [r7, #-2]
 80218f6:	1c5a      	adds	r2, r3, #1
 80218f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80218fc:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8021900:	f807 cc01 	strb.w	ip, [r7, #-1]
 8021904:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021906:	3703      	adds	r7, #3
 8021908:	f10b 3bff 	add.w	fp, fp, #4294967295
 802190c:	441d      	add	r5, r3
 802190e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021910:	441e      	add	r6, r3
 8021912:	e64e      	b.n	80215b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8021914:	2800      	cmp	r0, #0
 8021916:	f43f aeed 	beq.w	80216f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802191a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802191e:	9108      	str	r1, [sp, #32]
 8021920:	0e09      	lsrs	r1, r1, #24
 8021922:	9110      	str	r1, [sp, #64]	; 0x40
 8021924:	e6e6      	b.n	80216f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021926:	f807 0c03 	strb.w	r0, [r7, #-3]
 802192a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802192e:	e7e7      	b.n	8021900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8021930:	b019      	add	sp, #100	; 0x64
 8021932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021938 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802193c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8021940:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021944:	2c00      	cmp	r4, #0
 8021946:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802194a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802194e:	fb00 4e03 	mla	lr, r0, r3, r4
 8021952:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8021956:	f2c0 80b8 	blt.w	8021aca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802195a:	45a1      	cmp	r9, r4
 802195c:	f340 80b5 	ble.w	8021aca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021960:	2800      	cmp	r0, #0
 8021962:	f2c0 80b2 	blt.w	8021aca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021966:	4580      	cmp	r8, r0
 8021968:	f340 80af 	ble.w	8021aca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802196c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8021970:	f01e 0f01 	tst.w	lr, #1
 8021974:	5d56      	ldrb	r6, [r2, r5]
 8021976:	bf0c      	ite	eq
 8021978:	f006 060f 	andeq.w	r6, r6, #15
 802197c:	1136      	asrne	r6, r6, #4
 802197e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021982:	b2f6      	uxtb	r6, r6
 8021984:	f114 0a01 	adds.w	sl, r4, #1
 8021988:	f100 80a1 	bmi.w	8021ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802198c:	45d1      	cmp	r9, sl
 802198e:	f340 809e 	ble.w	8021ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021992:	2800      	cmp	r0, #0
 8021994:	f2c0 809b 	blt.w	8021ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021998:	4580      	cmp	r8, r0
 802199a:	f340 8098 	ble.w	8021ace <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802199e:	2f00      	cmp	r7, #0
 80219a0:	f000 8097 	beq.w	8021ad2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80219a4:	f10e 0b01 	add.w	fp, lr, #1
 80219a8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80219ac:	f01b 0f01 	tst.w	fp, #1
 80219b0:	5d55      	ldrb	r5, [r2, r5]
 80219b2:	bf0c      	ite	eq
 80219b4:	f005 050f 	andeq.w	r5, r5, #15
 80219b8:	112d      	asrne	r5, r5, #4
 80219ba:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80219be:	b2ed      	uxtb	r5, r5
 80219c0:	f1bc 0f00 	cmp.w	ip, #0
 80219c4:	f000 8089 	beq.w	8021ada <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80219c8:	2c00      	cmp	r4, #0
 80219ca:	f100 0001 	add.w	r0, r0, #1
 80219ce:	f2c0 8082 	blt.w	8021ad6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80219d2:	45a1      	cmp	r9, r4
 80219d4:	dd7f      	ble.n	8021ad6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80219d6:	2800      	cmp	r0, #0
 80219d8:	db7d      	blt.n	8021ad6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80219da:	4580      	cmp	r8, r0
 80219dc:	dd7b      	ble.n	8021ad6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80219de:	eb03 0b0e 	add.w	fp, r3, lr
 80219e2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80219e6:	f01b 0f01 	tst.w	fp, #1
 80219ea:	5d14      	ldrb	r4, [r2, r4]
 80219ec:	bf0c      	ite	eq
 80219ee:	f004 040f 	andeq.w	r4, r4, #15
 80219f2:	1124      	asrne	r4, r4, #4
 80219f4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80219f8:	b2e4      	uxtb	r4, r4
 80219fa:	f1ba 0f00 	cmp.w	sl, #0
 80219fe:	db6f      	blt.n	8021ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021a00:	45d1      	cmp	r9, sl
 8021a02:	dd6d      	ble.n	8021ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021a04:	2800      	cmp	r0, #0
 8021a06:	db6b      	blt.n	8021ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021a08:	4580      	cmp	r8, r0
 8021a0a:	dd69      	ble.n	8021ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021a0c:	2f00      	cmp	r7, #0
 8021a0e:	d069      	beq.n	8021ae4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8021a10:	3301      	adds	r3, #1
 8021a12:	449e      	add	lr, r3
 8021a14:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021a18:	f01e 0f01 	tst.w	lr, #1
 8021a1c:	5cd0      	ldrb	r0, [r2, r3]
 8021a1e:	bf0c      	ite	eq
 8021a20:	f000 000f 	andeq.w	r0, r0, #15
 8021a24:	1100      	asrne	r0, r0, #4
 8021a26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021a2a:	b2c3      	uxtb	r3, r0
 8021a2c:	b2ba      	uxth	r2, r7
 8021a2e:	fa1f fc8c 	uxth.w	ip, ip
 8021a32:	fb02 f00c 	mul.w	r0, r2, ip
 8021a36:	0112      	lsls	r2, r2, #4
 8021a38:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021a3c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021a40:	1a12      	subs	r2, r2, r0
 8021a42:	fa1f fc8c 	uxth.w	ip, ip
 8021a46:	b292      	uxth	r2, r2
 8021a48:	eba7 070c 	sub.w	r7, r7, ip
 8021a4c:	436a      	muls	r2, r5
 8021a4e:	b2bf      	uxth	r7, r7
 8021a50:	fb06 2207 	mla	r2, r6, r7, r2
 8021a54:	fb0c 2404 	mla	r4, ip, r4, r2
 8021a58:	fb00 4303 	mla	r3, r0, r3, r4
 8021a5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021a60:	b38b      	cbz	r3, 8021ac6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8021a62:	4a21      	ldr	r2, [pc, #132]	; (8021ae8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8021a64:	6814      	ldr	r4, [r2, #0]
 8021a66:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8021a6a:	b2e5      	uxtb	r5, r4
 8021a6c:	4353      	muls	r3, r2
 8021a6e:	1c5a      	adds	r2, r3, #1
 8021a70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021a74:	1212      	asrs	r2, r2, #8
 8021a76:	b290      	uxth	r0, r2
 8021a78:	43d2      	mvns	r2, r2
 8021a7a:	fb15 f500 	smulbb	r5, r5, r0
 8021a7e:	b2d3      	uxtb	r3, r2
 8021a80:	780a      	ldrb	r2, [r1, #0]
 8021a82:	fb02 5203 	mla	r2, r2, r3, r5
 8021a86:	b292      	uxth	r2, r2
 8021a88:	1c55      	adds	r5, r2, #1
 8021a8a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021a8e:	784d      	ldrb	r5, [r1, #1]
 8021a90:	fb15 f503 	smulbb	r5, r5, r3
 8021a94:	1212      	asrs	r2, r2, #8
 8021a96:	700a      	strb	r2, [r1, #0]
 8021a98:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021a9c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021aa0:	fb02 5200 	mla	r2, r2, r0, r5
 8021aa4:	b292      	uxth	r2, r2
 8021aa6:	1c55      	adds	r5, r2, #1
 8021aa8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021aac:	1212      	asrs	r2, r2, #8
 8021aae:	704a      	strb	r2, [r1, #1]
 8021ab0:	788a      	ldrb	r2, [r1, #2]
 8021ab2:	fb12 f303 	smulbb	r3, r2, r3
 8021ab6:	fb04 3300 	mla	r3, r4, r0, r3
 8021aba:	b29b      	uxth	r3, r3
 8021abc:	1c5a      	adds	r2, r3, #1
 8021abe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ac2:	121b      	asrs	r3, r3, #8
 8021ac4:	708b      	strb	r3, [r1, #2]
 8021ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aca:	2600      	movs	r6, #0
 8021acc:	e75a      	b.n	8021984 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8021ace:	2500      	movs	r5, #0
 8021ad0:	e776      	b.n	80219c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8021ad2:	463d      	mov	r5, r7
 8021ad4:	e774      	b.n	80219c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8021ad6:	2400      	movs	r4, #0
 8021ad8:	e78f      	b.n	80219fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8021ada:	4663      	mov	r3, ip
 8021adc:	4664      	mov	r4, ip
 8021ade:	e7a5      	b.n	8021a2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8021ae0:	2300      	movs	r3, #0
 8021ae2:	e7a3      	b.n	8021a2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8021ae4:	463b      	mov	r3, r7
 8021ae6:	e7a1      	b.n	8021a2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8021ae8:	24006a44 	.word	0x24006a44

08021aec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af0:	b097      	sub	sp, #92	; 0x5c
 8021af2:	9214      	str	r2, [sp, #80]	; 0x50
 8021af4:	9309      	str	r3, [sp, #36]	; 0x24
 8021af6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021af8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021afc:	9015      	str	r0, [sp, #84]	; 0x54
 8021afe:	910c      	str	r1, [sp, #48]	; 0x30
 8021b00:	6850      	ldr	r0, [r2, #4]
 8021b02:	930e      	str	r3, [sp, #56]	; 0x38
 8021b04:	6812      	ldr	r2, [r2, #0]
 8021b06:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021b0a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8021b0e:	fb00 1303 	mla	r3, r0, r3, r1
 8021b12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b16:	eb02 0a03 	add.w	sl, r2, r3
 8021b1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b1c:	689b      	ldr	r3, [r3, #8]
 8021b1e:	3301      	adds	r3, #1
 8021b20:	f023 0301 	bic.w	r3, r3, #1
 8021b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b28:	681f      	ldr	r7, [r3, #0]
 8021b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	dc03      	bgt.n	8021b38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	f340 8247 	ble.w	8021fc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021b38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b42:	1e48      	subs	r0, r1, #1
 8021b44:	f102 3cff 	add.w	ip, r2, #4294967295
 8021b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	f340 80e5 	ble.w	8021d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021b50:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8021b54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021b58:	d406      	bmi.n	8021b68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021b5a:	4586      	cmp	lr, r0
 8021b5c:	da04      	bge.n	8021b68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	db02      	blt.n	8021b68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021b62:	4563      	cmp	r3, ip
 8021b64:	f2c0 80da 	blt.w	8021d1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021b68:	f11e 0e01 	adds.w	lr, lr, #1
 8021b6c:	f100 80cb 	bmi.w	8021d06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021b70:	4571      	cmp	r1, lr
 8021b72:	f2c0 80c8 	blt.w	8021d06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021b76:	3301      	adds	r3, #1
 8021b78:	f100 80c5 	bmi.w	8021d06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021b7c:	429a      	cmp	r2, r3
 8021b7e:	f2c0 80c2 	blt.w	8021d06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b84:	46d0      	mov	r8, sl
 8021b86:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8021b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	f340 80e3 	ble.w	8021d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021b94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b96:	1430      	asrs	r0, r6, #16
 8021b98:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021b9c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021ba0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021ba4:	142b      	asrs	r3, r5, #16
 8021ba6:	f100 812e 	bmi.w	8021e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021baa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8021bae:	455b      	cmp	r3, fp
 8021bb0:	f280 8129 	bge.w	8021e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021bb4:	2800      	cmp	r0, #0
 8021bb6:	f2c0 8126 	blt.w	8021e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021bba:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021bbe:	4558      	cmp	r0, fp
 8021bc0:	f280 8121 	bge.w	8021e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021bc4:	fb00 3309 	mla	r3, r0, r9, r3
 8021bc8:	0858      	lsrs	r0, r3, #1
 8021bca:	07dc      	lsls	r4, r3, #31
 8021bcc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021bd0:	bf54      	ite	pl
 8021bd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021bd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021bda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021bde:	fa5f fc8c 	uxtb.w	ip, ip
 8021be2:	2a00      	cmp	r2, #0
 8021be4:	f000 80fe 	beq.w	8021de4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8021be8:	1c58      	adds	r0, r3, #1
 8021bea:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021bee:	07c0      	lsls	r0, r0, #31
 8021bf0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021bf4:	bf54      	ite	pl
 8021bf6:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021bfa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021bfe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021c02:	fa5f f08e 	uxtb.w	r0, lr
 8021c06:	9010      	str	r0, [sp, #64]	; 0x40
 8021c08:	b1d9      	cbz	r1, 8021c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021c0a:	444b      	add	r3, r9
 8021c0c:	0858      	lsrs	r0, r3, #1
 8021c0e:	07dc      	lsls	r4, r3, #31
 8021c10:	f103 0301 	add.w	r3, r3, #1
 8021c14:	5c38      	ldrb	r0, [r7, r0]
 8021c16:	bf54      	ite	pl
 8021c18:	f000 000f 	andpl.w	r0, r0, #15
 8021c1c:	1100      	asrmi	r0, r0, #4
 8021c1e:	07dc      	lsls	r4, r3, #31
 8021c20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021c24:	b2c0      	uxtb	r0, r0
 8021c26:	900a      	str	r0, [sp, #40]	; 0x28
 8021c28:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021c2c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021c30:	bf54      	ite	pl
 8021c32:	f00e 030f 	andpl.w	r3, lr, #15
 8021c36:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021c3a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021c3e:	b2db      	uxtb	r3, r3
 8021c40:	9311      	str	r3, [sp, #68]	; 0x44
 8021c42:	b292      	uxth	r2, r2
 8021c44:	b289      	uxth	r1, r1
 8021c46:	0113      	lsls	r3, r2, #4
 8021c48:	fb02 f001 	mul.w	r0, r2, r1
 8021c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021c4e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021c52:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8021c56:	1a1b      	subs	r3, r3, r0
 8021c58:	b289      	uxth	r1, r1
 8021c5a:	b29b      	uxth	r3, r3
 8021c5c:	ebae 0e01 	sub.w	lr, lr, r1
 8021c60:	4353      	muls	r3, r2
 8021c62:	fa1f fe8e 	uxth.w	lr, lr
 8021c66:	fb0c 320e 	mla	r2, ip, lr, r3
 8021c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c6c:	fb01 2203 	mla	r2, r1, r3, r2
 8021c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c72:	fb00 2203 	mla	r2, r0, r3, r2
 8021c76:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c7a:	2a00      	cmp	r2, #0
 8021c7c:	d039      	beq.n	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c7e:	4bc7      	ldr	r3, [pc, #796]	; (8021f9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021c80:	6819      	ldr	r1, [r3, #0]
 8021c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c84:	fa5f fc81 	uxtb.w	ip, r1
 8021c88:	435a      	muls	r2, r3
 8021c8a:	1c53      	adds	r3, r2, #1
 8021c8c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021c90:	1212      	asrs	r2, r2, #8
 8021c92:	b290      	uxth	r0, r2
 8021c94:	43d2      	mvns	r2, r2
 8021c96:	fb1c fc00 	smulbb	ip, ip, r0
 8021c9a:	b2d3      	uxtb	r3, r2
 8021c9c:	f898 2000 	ldrb.w	r2, [r8]
 8021ca0:	fb02 c203 	mla	r2, r2, r3, ip
 8021ca4:	b292      	uxth	r2, r2
 8021ca6:	f102 0c01 	add.w	ip, r2, #1
 8021caa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021cae:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021cb2:	fb1c fc03 	smulbb	ip, ip, r3
 8021cb6:	1212      	asrs	r2, r2, #8
 8021cb8:	f888 2000 	strb.w	r2, [r8]
 8021cbc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021cc0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021cc4:	fb02 c200 	mla	r2, r2, r0, ip
 8021cc8:	b292      	uxth	r2, r2
 8021cca:	f102 0c01 	add.w	ip, r2, #1
 8021cce:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021cd2:	1212      	asrs	r2, r2, #8
 8021cd4:	f888 2001 	strb.w	r2, [r8, #1]
 8021cd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021cdc:	fb12 f303 	smulbb	r3, r2, r3
 8021ce0:	fb01 3300 	mla	r3, r1, r0, r3
 8021ce4:	b29b      	uxth	r3, r3
 8021ce6:	1c5a      	adds	r2, r3, #1
 8021ce8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021cec:	121b      	asrs	r3, r3, #8
 8021cee:	f888 3002 	strb.w	r3, [r8, #2]
 8021cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021cf4:	f108 0803 	add.w	r8, r8, #3
 8021cf8:	441d      	add	r5, r3
 8021cfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cfc:	441e      	add	r6, r3
 8021cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021d00:	3b01      	subs	r3, #1
 8021d02:	930d      	str	r3, [sp, #52]	; 0x34
 8021d04:	e742      	b.n	8021b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021d08:	f10a 0a03 	add.w	sl, sl, #3
 8021d0c:	441d      	add	r5, r3
 8021d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d10:	441e      	add	r6, r3
 8021d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d14:	3b01      	subs	r3, #1
 8021d16:	9309      	str	r3, [sp, #36]	; 0x24
 8021d18:	e716      	b.n	8021b48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021d1a:	d024      	beq.n	8021d66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d1e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021d20:	3b01      	subs	r3, #1
 8021d22:	fb00 5003 	mla	r0, r0, r3, r5
 8021d26:	1400      	asrs	r0, r0, #16
 8021d28:	f53f af2b 	bmi.w	8021b82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021d2c:	3901      	subs	r1, #1
 8021d2e:	4288      	cmp	r0, r1
 8021d30:	f6bf af27 	bge.w	8021b82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021d34:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021d36:	fb01 6303 	mla	r3, r1, r3, r6
 8021d3a:	141b      	asrs	r3, r3, #16
 8021d3c:	f53f af21 	bmi.w	8021b82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021d40:	3a01      	subs	r2, #1
 8021d42:	4293      	cmp	r3, r2
 8021d44:	f6bf af1d 	bge.w	8021b82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021d48:	f10a 0e03 	add.w	lr, sl, #3
 8021d4c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8021d50:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021d54:	f1b8 0f00 	cmp.w	r8, #0
 8021d58:	dc76      	bgt.n	8021e48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8021d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d64:	44a2      	add	sl, r4
 8021d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	f340 812c 	ble.w	8021fc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021d72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021d74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d7c:	eef0 6a62 	vmov.f32	s13, s5
 8021d80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d8c:	ee16 5a90 	vmov	r5, s13
 8021d90:	eef0 6a43 	vmov.f32	s13, s6
 8021d94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d98:	ee16 6a90 	vmov	r6, s13
 8021d9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021da0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021da4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021da8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021dac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021db0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021db4:	ee12 2a90 	vmov	r2, s5
 8021db8:	eef0 2a47 	vmov.f32	s5, s14
 8021dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dc0:	ee13 2a10 	vmov	r2, s6
 8021dc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8021dc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021dc8:	eeb0 3a67 	vmov.f32	s6, s15
 8021dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dd0:	9324      	str	r3, [sp, #144]	; 0x90
 8021dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021dd6:	3b01      	subs	r3, #1
 8021dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8021dda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ddc:	bf08      	it	eq
 8021dde:	4613      	moveq	r3, r2
 8021de0:	9309      	str	r3, [sp, #36]	; 0x24
 8021de2:	e6a2      	b.n	8021b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021de4:	2900      	cmp	r1, #0
 8021de6:	f43f af2c 	beq.w	8021c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021dea:	eb09 0003 	add.w	r0, r9, r3
 8021dee:	0843      	lsrs	r3, r0, #1
 8021df0:	07c0      	lsls	r0, r0, #31
 8021df2:	5cfb      	ldrb	r3, [r7, r3]
 8021df4:	bf54      	ite	pl
 8021df6:	f003 030f 	andpl.w	r3, r3, #15
 8021dfa:	111b      	asrmi	r3, r3, #4
 8021dfc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021e00:	b2db      	uxtb	r3, r3
 8021e02:	930a      	str	r3, [sp, #40]	; 0x28
 8021e04:	e71d      	b.n	8021c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021e06:	f113 0b01 	adds.w	fp, r3, #1
 8021e0a:	f53f af72 	bmi.w	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021e0e:	45dc      	cmp	ip, fp
 8021e10:	f6ff af6f 	blt.w	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021e14:	f110 0b01 	adds.w	fp, r0, #1
 8021e18:	f53f af6b 	bmi.w	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021e1c:	45de      	cmp	lr, fp
 8021e1e:	f6ff af68 	blt.w	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021e22:	9302      	str	r3, [sp, #8]
 8021e24:	fa0f f38e 	sxth.w	r3, lr
 8021e28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e2a:	9301      	str	r3, [sp, #4]
 8021e2c:	fa0f f38c 	sxth.w	r3, ip
 8021e30:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021e34:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021e38:	9300      	str	r3, [sp, #0]
 8021e3a:	463a      	mov	r2, r7
 8021e3c:	464b      	mov	r3, r9
 8021e3e:	4641      	mov	r1, r8
 8021e40:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021e42:	f7ff fd79 	bl	8021938 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8021e46:	e754      	b.n	8021cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021e48:	142a      	asrs	r2, r5, #16
 8021e4a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021e4e:	1433      	asrs	r3, r6, #16
 8021e50:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021e54:	fb09 2303 	mla	r3, r9, r3, r2
 8021e58:	085a      	lsrs	r2, r3, #1
 8021e5a:	07dc      	lsls	r4, r3, #31
 8021e5c:	5cba      	ldrb	r2, [r7, r2]
 8021e5e:	bf54      	ite	pl
 8021e60:	f002 020f 	andpl.w	r2, r2, #15
 8021e64:	1112      	asrmi	r2, r2, #4
 8021e66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021e6a:	b2d2      	uxtb	r2, r2
 8021e6c:	2900      	cmp	r1, #0
 8021e6e:	f000 8097 	beq.w	8021fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021e72:	f103 0b01 	add.w	fp, r3, #1
 8021e76:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8021e7a:	f01b 0f01 	tst.w	fp, #1
 8021e7e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021e82:	bf0c      	ite	eq
 8021e84:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021e88:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021e8c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021e90:	fa5f f48c 	uxtb.w	r4, ip
 8021e94:	9412      	str	r4, [sp, #72]	; 0x48
 8021e96:	b300      	cbz	r0, 8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021e98:	444b      	add	r3, r9
 8021e9a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021e9e:	07dc      	lsls	r4, r3, #31
 8021ea0:	f103 0301 	add.w	r3, r3, #1
 8021ea4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021ea8:	bf54      	ite	pl
 8021eaa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021eae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021eb2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021eb6:	fa5f f48c 	uxtb.w	r4, ip
 8021eba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021ebe:	940b      	str	r4, [sp, #44]	; 0x2c
 8021ec0:	07dc      	lsls	r4, r3, #31
 8021ec2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021ec6:	bf54      	ite	pl
 8021ec8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021ecc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021ed0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021ed4:	fa5f f38c 	uxtb.w	r3, ip
 8021ed8:	9313      	str	r3, [sp, #76]	; 0x4c
 8021eda:	b289      	uxth	r1, r1
 8021edc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ede:	b280      	uxth	r0, r0
 8021ee0:	fb01 f300 	mul.w	r3, r1, r0
 8021ee4:	0109      	lsls	r1, r1, #4
 8021ee6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021eea:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021eee:	1ac9      	subs	r1, r1, r3
 8021ef0:	b280      	uxth	r0, r0
 8021ef2:	b289      	uxth	r1, r1
 8021ef4:	ebac 0c00 	sub.w	ip, ip, r0
 8021ef8:	4361      	muls	r1, r4
 8021efa:	fa1f fc8c 	uxth.w	ip, ip
 8021efe:	fb02 120c 	mla	r2, r2, ip, r1
 8021f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021f04:	fb00 2001 	mla	r0, r0, r1, r2
 8021f08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021f0a:	fb03 0302 	mla	r3, r3, r2, r0
 8021f0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d039      	beq.n	8021f8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021f16:	4a21      	ldr	r2, [pc, #132]	; (8021f9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021f18:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021f1c:	6810      	ldr	r0, [r2, #0]
 8021f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021f20:	fa5f fc80 	uxtb.w	ip, r0
 8021f24:	4353      	muls	r3, r2
 8021f26:	1c5a      	adds	r2, r3, #1
 8021f28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f2c:	121b      	asrs	r3, r3, #8
 8021f2e:	b29a      	uxth	r2, r3
 8021f30:	43db      	mvns	r3, r3
 8021f32:	fb1c fc02 	smulbb	ip, ip, r2
 8021f36:	b2db      	uxtb	r3, r3
 8021f38:	fb01 c103 	mla	r1, r1, r3, ip
 8021f3c:	b289      	uxth	r1, r1
 8021f3e:	f101 0c01 	add.w	ip, r1, #1
 8021f42:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021f46:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8021f4a:	fb1c fc03 	smulbb	ip, ip, r3
 8021f4e:	1209      	asrs	r1, r1, #8
 8021f50:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021f54:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021f58:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021f5c:	fb01 c102 	mla	r1, r1, r2, ip
 8021f60:	b289      	uxth	r1, r1
 8021f62:	f101 0c01 	add.w	ip, r1, #1
 8021f66:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021f6a:	1209      	asrs	r1, r1, #8
 8021f6c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021f70:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021f74:	fb11 f303 	smulbb	r3, r1, r3
 8021f78:	fb00 3002 	mla	r0, r0, r2, r3
 8021f7c:	b280      	uxth	r0, r0
 8021f7e:	1c42      	adds	r2, r0, #1
 8021f80:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021f84:	1200      	asrs	r0, r0, #8
 8021f86:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8021f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021f8c:	f10e 0e03 	add.w	lr, lr, #3
 8021f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8021f94:	441d      	add	r5, r3
 8021f96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f98:	441e      	add	r6, r3
 8021f9a:	e6db      	b.n	8021d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021f9c:	24006a44 	.word	0x24006a44
 8021fa0:	2800      	cmp	r0, #0
 8021fa2:	d09a      	beq.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021fa4:	444b      	add	r3, r9
 8021fa6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021faa:	07db      	lsls	r3, r3, #31
 8021fac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021fb0:	bf54      	ite	pl
 8021fb2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021fb6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021fba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021fbe:	fa5f f38c 	uxtb.w	r3, ip
 8021fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021fc4:	e789      	b.n	8021eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021fc6:	b017      	add	sp, #92	; 0x5c
 8021fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021fcc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fd0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8021fd4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021fd8:	2d00      	cmp	r5, #0
 8021fda:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021fde:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8021fe2:	fb04 5e03 	mla	lr, r4, r3, r5
 8021fe6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8021fea:	f2c0 80b1 	blt.w	8022150 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021fee:	45a9      	cmp	r9, r5
 8021ff0:	f340 80ae 	ble.w	8022150 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021ff4:	2c00      	cmp	r4, #0
 8021ff6:	f2c0 80ab 	blt.w	8022150 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021ffa:	45a0      	cmp	r8, r4
 8021ffc:	f340 80a8 	ble.w	8022150 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022000:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8022004:	f01e 0f01 	tst.w	lr, #1
 8022008:	5d97      	ldrb	r7, [r2, r6]
 802200a:	bf0c      	ite	eq
 802200c:	f007 070f 	andeq.w	r7, r7, #15
 8022010:	113f      	asrne	r7, r7, #4
 8022012:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8022016:	b2ff      	uxtb	r7, r7
 8022018:	f115 0a01 	adds.w	sl, r5, #1
 802201c:	f100 809a 	bmi.w	8022154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022020:	45d1      	cmp	r9, sl
 8022022:	f340 8097 	ble.w	8022154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022026:	2c00      	cmp	r4, #0
 8022028:	f2c0 8094 	blt.w	8022154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802202c:	45a0      	cmp	r8, r4
 802202e:	f340 8091 	ble.w	8022154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022032:	2800      	cmp	r0, #0
 8022034:	f000 8090 	beq.w	8022158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022038:	f10e 0b01 	add.w	fp, lr, #1
 802203c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022040:	f01b 0f01 	tst.w	fp, #1
 8022044:	5d96      	ldrb	r6, [r2, r6]
 8022046:	bf0c      	ite	eq
 8022048:	f006 060f 	andeq.w	r6, r6, #15
 802204c:	1136      	asrne	r6, r6, #4
 802204e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022052:	b2f6      	uxtb	r6, r6
 8022054:	f1bc 0f00 	cmp.w	ip, #0
 8022058:	f000 8082 	beq.w	8022160 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802205c:	2d00      	cmp	r5, #0
 802205e:	f104 0401 	add.w	r4, r4, #1
 8022062:	db7b      	blt.n	802215c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022064:	45a9      	cmp	r9, r5
 8022066:	dd79      	ble.n	802215c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022068:	2c00      	cmp	r4, #0
 802206a:	db77      	blt.n	802215c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802206c:	45a0      	cmp	r8, r4
 802206e:	dd75      	ble.n	802215c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022070:	eb03 0b0e 	add.w	fp, r3, lr
 8022074:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022078:	f01b 0f01 	tst.w	fp, #1
 802207c:	5d55      	ldrb	r5, [r2, r5]
 802207e:	bf0c      	ite	eq
 8022080:	f005 050f 	andeq.w	r5, r5, #15
 8022084:	112d      	asrne	r5, r5, #4
 8022086:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802208a:	b2ed      	uxtb	r5, r5
 802208c:	f1ba 0f00 	cmp.w	sl, #0
 8022090:	db69      	blt.n	8022166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022092:	45d1      	cmp	r9, sl
 8022094:	dd67      	ble.n	8022166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022096:	2c00      	cmp	r4, #0
 8022098:	db65      	blt.n	8022166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802209a:	45a0      	cmp	r8, r4
 802209c:	dd63      	ble.n	8022166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802209e:	2800      	cmp	r0, #0
 80220a0:	d063      	beq.n	802216a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80220a2:	3301      	adds	r3, #1
 80220a4:	449e      	add	lr, r3
 80220a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80220aa:	f01e 0f01 	tst.w	lr, #1
 80220ae:	5cd4      	ldrb	r4, [r2, r3]
 80220b0:	bf0c      	ite	eq
 80220b2:	f004 040f 	andeq.w	r4, r4, #15
 80220b6:	1124      	asrne	r4, r4, #4
 80220b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80220bc:	b2e3      	uxtb	r3, r4
 80220be:	b282      	uxth	r2, r0
 80220c0:	fa1f fc8c 	uxth.w	ip, ip
 80220c4:	fb02 f40c 	mul.w	r4, r2, ip
 80220c8:	0112      	lsls	r2, r2, #4
 80220ca:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80220ce:	fa1f f08c 	uxth.w	r0, ip
 80220d2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80220d6:	1b12      	subs	r2, r2, r4
 80220d8:	ebac 0c00 	sub.w	ip, ip, r0
 80220dc:	b292      	uxth	r2, r2
 80220de:	fa1f fc8c 	uxth.w	ip, ip
 80220e2:	4372      	muls	r2, r6
 80220e4:	fb07 220c 	mla	r2, r7, ip, r2
 80220e8:	fb00 2005 	mla	r0, r0, r5, r2
 80220ec:	fb04 0303 	mla	r3, r4, r3, r0
 80220f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80220f4:	b353      	cbz	r3, 802214c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80220f6:	4a1e      	ldr	r2, [pc, #120]	; (8022170 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80220f8:	7808      	ldrb	r0, [r1, #0]
 80220fa:	6814      	ldr	r4, [r2, #0]
 80220fc:	b29a      	uxth	r2, r3
 80220fe:	43db      	mvns	r3, r3
 8022100:	b2e5      	uxtb	r5, r4
 8022102:	b2db      	uxtb	r3, r3
 8022104:	fb15 f502 	smulbb	r5, r5, r2
 8022108:	fb00 5003 	mla	r0, r0, r3, r5
 802210c:	b280      	uxth	r0, r0
 802210e:	1c45      	adds	r5, r0, #1
 8022110:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022114:	784d      	ldrb	r5, [r1, #1]
 8022116:	fb15 f503 	smulbb	r5, r5, r3
 802211a:	1200      	asrs	r0, r0, #8
 802211c:	7008      	strb	r0, [r1, #0]
 802211e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022122:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022126:	fb00 5002 	mla	r0, r0, r2, r5
 802212a:	b280      	uxth	r0, r0
 802212c:	1c45      	adds	r5, r0, #1
 802212e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022132:	1200      	asrs	r0, r0, #8
 8022134:	7048      	strb	r0, [r1, #1]
 8022136:	7888      	ldrb	r0, [r1, #2]
 8022138:	fb10 f303 	smulbb	r3, r0, r3
 802213c:	fb04 3202 	mla	r2, r4, r2, r3
 8022140:	b292      	uxth	r2, r2
 8022142:	1c53      	adds	r3, r2, #1
 8022144:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022148:	1212      	asrs	r2, r2, #8
 802214a:	708a      	strb	r2, [r1, #2]
 802214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022150:	2700      	movs	r7, #0
 8022152:	e761      	b.n	8022018 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8022154:	2600      	movs	r6, #0
 8022156:	e77d      	b.n	8022054 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022158:	4606      	mov	r6, r0
 802215a:	e77b      	b.n	8022054 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802215c:	2500      	movs	r5, #0
 802215e:	e795      	b.n	802208c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8022160:	4663      	mov	r3, ip
 8022162:	4665      	mov	r5, ip
 8022164:	e7ab      	b.n	80220be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022166:	2300      	movs	r3, #0
 8022168:	e7a9      	b.n	80220be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802216a:	4603      	mov	r3, r0
 802216c:	e7a7      	b.n	80220be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802216e:	bf00      	nop
 8022170:	24006a44 	.word	0x24006a44

08022174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022178:	b093      	sub	sp, #76	; 0x4c
 802217a:	461c      	mov	r4, r3
 802217c:	920c      	str	r2, [sp, #48]	; 0x30
 802217e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022180:	9011      	str	r0, [sp, #68]	; 0x44
 8022182:	9107      	str	r1, [sp, #28]
 8022184:	6850      	ldr	r0, [r2, #4]
 8022186:	6812      	ldr	r2, [r2, #0]
 8022188:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802218c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8022190:	fb00 1303 	mla	r3, r0, r3, r1
 8022194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022198:	eb02 0b03 	add.w	fp, r2, r3
 802219c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802219e:	689b      	ldr	r3, [r3, #8]
 80221a0:	3301      	adds	r3, #1
 80221a2:	f023 0301 	bic.w	r3, r3, #1
 80221a6:	9309      	str	r3, [sp, #36]	; 0x24
 80221a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221aa:	f8d3 8000 	ldr.w	r8, [r3]
 80221ae:	9b07      	ldr	r3, [sp, #28]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	dc03      	bgt.n	80221bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80221b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	f340 822b 	ble.w	8022612 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80221bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221c6:	1e48      	subs	r0, r1, #1
 80221c8:	1e57      	subs	r7, r2, #1
 80221ca:	2c00      	cmp	r4, #0
 80221cc:	f340 80d7 	ble.w	802237e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80221d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80221d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80221d8:	d406      	bmi.n	80221e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80221da:	4584      	cmp	ip, r0
 80221dc:	da04      	bge.n	80221e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80221de:	2b00      	cmp	r3, #0
 80221e0:	db02      	blt.n	80221e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80221e2:	42bb      	cmp	r3, r7
 80221e4:	f2c0 80cc 	blt.w	8022380 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80221e8:	f11c 0c01 	adds.w	ip, ip, #1
 80221ec:	f100 80bf 	bmi.w	802236e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80221f0:	4561      	cmp	r1, ip
 80221f2:	f2c0 80bc 	blt.w	802236e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80221f6:	3301      	adds	r3, #1
 80221f8:	f100 80b9 	bmi.w	802236e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80221fc:	429a      	cmp	r2, r3
 80221fe:	f2c0 80b6 	blt.w	802236e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022202:	46a2      	mov	sl, r4
 8022204:	465f      	mov	r7, fp
 8022206:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802220a:	f1ba 0f00 	cmp.w	sl, #0
 802220e:	f340 80d4 	ble.w	80223ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022212:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8022216:	1430      	asrs	r0, r6, #16
 8022218:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802221c:	9308      	str	r3, [sp, #32]
 802221e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022220:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022224:	142b      	asrs	r3, r5, #16
 8022226:	f100 8124 	bmi.w	8022472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802222a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802222e:	4293      	cmp	r3, r2
 8022230:	f280 811f 	bge.w	8022472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022234:	2800      	cmp	r0, #0
 8022236:	f2c0 811c 	blt.w	8022472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802223a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802223e:	4290      	cmp	r0, r2
 8022240:	f280 8117 	bge.w	8022472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022244:	fb00 3309 	mla	r3, r0, r9, r3
 8022248:	0858      	lsrs	r0, r3, #1
 802224a:	07da      	lsls	r2, r3, #31
 802224c:	9a08      	ldr	r2, [sp, #32]
 802224e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022252:	bf54      	ite	pl
 8022254:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022258:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802225c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022260:	fa5f fc8c 	uxtb.w	ip, ip
 8022264:	2a00      	cmp	r2, #0
 8022266:	f000 80ed 	beq.w	8022444 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802226a:	1c58      	adds	r0, r3, #1
 802226c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022270:	07c0      	lsls	r0, r0, #31
 8022272:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022276:	bf54      	ite	pl
 8022278:	f00e 0e0f 	andpl.w	lr, lr, #15
 802227c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022280:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022284:	fa5f fe8e 	uxtb.w	lr, lr
 8022288:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802228c:	b1c9      	cbz	r1, 80222c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802228e:	444b      	add	r3, r9
 8022290:	0858      	lsrs	r0, r3, #1
 8022292:	07da      	lsls	r2, r3, #31
 8022294:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022298:	bf54      	ite	pl
 802229a:	f000 000f 	andpl.w	r0, r0, #15
 802229e:	1100      	asrmi	r0, r0, #4
 80222a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80222a4:	b2c0      	uxtb	r0, r0
 80222a6:	900a      	str	r0, [sp, #40]	; 0x28
 80222a8:	1c58      	adds	r0, r3, #1
 80222aa:	0843      	lsrs	r3, r0, #1
 80222ac:	07c2      	lsls	r2, r0, #31
 80222ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 80222b2:	bf54      	ite	pl
 80222b4:	f003 030f 	andpl.w	r3, r3, #15
 80222b8:	111b      	asrmi	r3, r3, #4
 80222ba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80222be:	b2db      	uxtb	r3, r3
 80222c0:	930e      	str	r3, [sp, #56]	; 0x38
 80222c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80222c6:	b289      	uxth	r1, r1
 80222c8:	fb02 f301 	mul.w	r3, r2, r1
 80222cc:	0112      	lsls	r2, r2, #4
 80222ce:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80222d2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80222d6:	1ad2      	subs	r2, r2, r3
 80222d8:	b289      	uxth	r1, r1
 80222da:	b292      	uxth	r2, r2
 80222dc:	1a40      	subs	r0, r0, r1
 80222de:	fa1f fe80 	uxth.w	lr, r0
 80222e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80222e4:	4342      	muls	r2, r0
 80222e6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80222ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80222ec:	fb01 c102 	mla	r1, r1, r2, ip
 80222f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222f2:	fb03 1302 	mla	r3, r3, r2, r1
 80222f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222fa:	b383      	cbz	r3, 802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80222fc:	4ac6      	ldr	r2, [pc, #792]	; (8022618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80222fe:	2bff      	cmp	r3, #255	; 0xff
 8022300:	6812      	ldr	r2, [r2, #0]
 8022302:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8022306:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802230a:	b2d2      	uxtb	r2, r2
 802230c:	f000 80ac 	beq.w	8022468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022310:	b299      	uxth	r1, r3
 8022312:	43db      	mvns	r3, r3
 8022314:	f897 c000 	ldrb.w	ip, [r7]
 8022318:	fb12 f201 	smulbb	r2, r2, r1
 802231c:	b2db      	uxtb	r3, r3
 802231e:	fb10 f001 	smulbb	r0, r0, r1
 8022322:	fb0c 2203 	mla	r2, ip, r3, r2
 8022326:	fb1e f101 	smulbb	r1, lr, r1
 802232a:	b292      	uxth	r2, r2
 802232c:	f102 0c01 	add.w	ip, r2, #1
 8022330:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022334:	1212      	asrs	r2, r2, #8
 8022336:	703a      	strb	r2, [r7, #0]
 8022338:	787a      	ldrb	r2, [r7, #1]
 802233a:	fb02 0003 	mla	r0, r2, r3, r0
 802233e:	b280      	uxth	r0, r0
 8022340:	1c42      	adds	r2, r0, #1
 8022342:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022346:	78ba      	ldrb	r2, [r7, #2]
 8022348:	fb02 1303 	mla	r3, r2, r3, r1
 802234c:	1200      	asrs	r0, r0, #8
 802234e:	b29b      	uxth	r3, r3
 8022350:	7078      	strb	r0, [r7, #1]
 8022352:	f103 0e01 	add.w	lr, r3, #1
 8022356:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802235a:	121b      	asrs	r3, r3, #8
 802235c:	70bb      	strb	r3, [r7, #2]
 802235e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022360:	3703      	adds	r7, #3
 8022362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022366:	441d      	add	r5, r3
 8022368:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802236a:	441e      	add	r6, r3
 802236c:	e74d      	b.n	802220a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802236e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022370:	3c01      	subs	r4, #1
 8022372:	f10b 0b03 	add.w	fp, fp, #3
 8022376:	441d      	add	r5, r3
 8022378:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802237a:	441e      	add	r6, r3
 802237c:	e725      	b.n	80221ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802237e:	d021      	beq.n	80223c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022380:	1e63      	subs	r3, r4, #1
 8022382:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022384:	fb00 5003 	mla	r0, r0, r3, r5
 8022388:	1400      	asrs	r0, r0, #16
 802238a:	f53f af3a 	bmi.w	8022202 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802238e:	3901      	subs	r1, #1
 8022390:	4288      	cmp	r0, r1
 8022392:	f6bf af36 	bge.w	8022202 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022396:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022398:	fb01 6303 	mla	r3, r1, r3, r6
 802239c:	141b      	asrs	r3, r3, #16
 802239e:	f53f af30 	bmi.w	8022202 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80223a2:	3a01      	subs	r2, #1
 80223a4:	4293      	cmp	r3, r2
 80223a6:	f6bf af2c 	bge.w	8022202 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80223aa:	f10b 0c03 	add.w	ip, fp, #3
 80223ae:	46a6      	mov	lr, r4
 80223b0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80223b4:	f1be 0f00 	cmp.w	lr, #0
 80223b8:	dc79      	bgt.n	80224ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80223ba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80223be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80223c2:	44a3      	add	fp, r4
 80223c4:	9b07      	ldr	r3, [sp, #28]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	f340 8123 	ble.w	8022612 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80223cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80223d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80223d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80223da:	eef0 6a62 	vmov.f32	s13, s5
 80223de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80223e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223ea:	ee16 5a90 	vmov	r5, s13
 80223ee:	eef0 6a43 	vmov.f32	s13, s6
 80223f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223f6:	ee16 6a90 	vmov	r6, s13
 80223fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802240a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802240e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022412:	ee12 2a90 	vmov	r2, s5
 8022416:	eef0 2a47 	vmov.f32	s5, s14
 802241a:	fb92 f3f3 	sdiv	r3, r2, r3
 802241e:	ee13 2a10 	vmov	r2, s6
 8022422:	931f      	str	r3, [sp, #124]	; 0x7c
 8022424:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022426:	eeb0 3a67 	vmov.f32	s6, s15
 802242a:	fb92 f3f3 	sdiv	r3, r2, r3
 802242e:	9320      	str	r3, [sp, #128]	; 0x80
 8022430:	9b07      	ldr	r3, [sp, #28]
 8022432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022434:	3b01      	subs	r3, #1
 8022436:	9307      	str	r3, [sp, #28]
 8022438:	bf08      	it	eq
 802243a:	4614      	moveq	r4, r2
 802243c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802243e:	bf18      	it	ne
 8022440:	461c      	movne	r4, r3
 8022442:	e6b4      	b.n	80221ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022444:	2900      	cmp	r1, #0
 8022446:	f43f af3c 	beq.w	80222c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802244a:	eb09 0003 	add.w	r0, r9, r3
 802244e:	0843      	lsrs	r3, r0, #1
 8022450:	07c0      	lsls	r0, r0, #31
 8022452:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022456:	bf54      	ite	pl
 8022458:	f003 030f 	andpl.w	r3, r3, #15
 802245c:	111b      	asrmi	r3, r3, #4
 802245e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022462:	b2db      	uxtb	r3, r3
 8022464:	930a      	str	r3, [sp, #40]	; 0x28
 8022466:	e72c      	b.n	80222c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022468:	703a      	strb	r2, [r7, #0]
 802246a:	7078      	strb	r0, [r7, #1]
 802246c:	f887 e002 	strb.w	lr, [r7, #2]
 8022470:	e775      	b.n	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022472:	1c5a      	adds	r2, r3, #1
 8022474:	f53f af73 	bmi.w	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022478:	4594      	cmp	ip, r2
 802247a:	f6ff af70 	blt.w	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802247e:	1c42      	adds	r2, r0, #1
 8022480:	f53f af6d 	bmi.w	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022484:	4596      	cmp	lr, r2
 8022486:	f6ff af6a 	blt.w	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802248a:	9302      	str	r3, [sp, #8]
 802248c:	fa0f f38e 	sxth.w	r3, lr
 8022490:	9a08      	ldr	r2, [sp, #32]
 8022492:	9301      	str	r3, [sp, #4]
 8022494:	fa0f f38c 	sxth.w	r3, ip
 8022498:	9105      	str	r1, [sp, #20]
 802249a:	4639      	mov	r1, r7
 802249c:	9300      	str	r3, [sp, #0]
 802249e:	464b      	mov	r3, r9
 80224a0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80224a4:	4642      	mov	r2, r8
 80224a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80224a8:	f7ff fd90 	bl	8021fcc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80224ac:	e757      	b.n	802235e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80224ae:	142a      	asrs	r2, r5, #16
 80224b0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80224b4:	1433      	asrs	r3, r6, #16
 80224b6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80224ba:	fb09 2303 	mla	r3, r9, r3, r2
 80224be:	085a      	lsrs	r2, r3, #1
 80224c0:	07d9      	lsls	r1, r3, #31
 80224c2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80224c6:	bf54      	ite	pl
 80224c8:	f002 020f 	andpl.w	r2, r2, #15
 80224cc:	1112      	asrmi	r2, r2, #4
 80224ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80224d2:	b2d2      	uxtb	r2, r2
 80224d4:	2800      	cmp	r0, #0
 80224d6:	f000 8085 	beq.w	80225e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80224da:	f103 0a01 	add.w	sl, r3, #1
 80224de:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80224e2:	f01a 0f01 	tst.w	sl, #1
 80224e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80224ea:	bf0c      	ite	eq
 80224ec:	f001 010f 	andeq.w	r1, r1, #15
 80224f0:	1109      	asrne	r1, r1, #4
 80224f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80224f6:	b2c9      	uxtb	r1, r1
 80224f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80224fa:	b1df      	cbz	r7, 8022534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80224fc:	444b      	add	r3, r9
 80224fe:	0859      	lsrs	r1, r3, #1
 8022500:	f013 0f01 	tst.w	r3, #1
 8022504:	f103 0301 	add.w	r3, r3, #1
 8022508:	f818 1001 	ldrb.w	r1, [r8, r1]
 802250c:	bf0c      	ite	eq
 802250e:	f001 010f 	andeq.w	r1, r1, #15
 8022512:	1109      	asrne	r1, r1, #4
 8022514:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022518:	b2c9      	uxtb	r1, r1
 802251a:	910b      	str	r1, [sp, #44]	; 0x2c
 802251c:	0859      	lsrs	r1, r3, #1
 802251e:	07db      	lsls	r3, r3, #31
 8022520:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022524:	bf54      	ite	pl
 8022526:	f001 010f 	andpl.w	r1, r1, #15
 802252a:	1109      	asrmi	r1, r1, #4
 802252c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022530:	b2c9      	uxtb	r1, r1
 8022532:	9110      	str	r1, [sp, #64]	; 0x40
 8022534:	b280      	uxth	r0, r0
 8022536:	b2bf      	uxth	r7, r7
 8022538:	fb00 f307 	mul.w	r3, r0, r7
 802253c:	0100      	lsls	r0, r0, #4
 802253e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022542:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022546:	1ac0      	subs	r0, r0, r3
 8022548:	b2bf      	uxth	r7, r7
 802254a:	b280      	uxth	r0, r0
 802254c:	1bc9      	subs	r1, r1, r7
 802254e:	fa1f fa81 	uxth.w	sl, r1
 8022552:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022554:	4348      	muls	r0, r1
 8022556:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022558:	fb02 020a 	mla	r2, r2, sl, r0
 802255c:	fb07 2701 	mla	r7, r7, r1, r2
 8022560:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022562:	fb03 7302 	mla	r3, r3, r2, r7
 8022566:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802256a:	b393      	cbz	r3, 80225d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802256c:	4a2a      	ldr	r2, [pc, #168]	; (8022618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802256e:	2bff      	cmp	r3, #255	; 0xff
 8022570:	6811      	ldr	r1, [r2, #0]
 8022572:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8022576:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802257a:	b2c9      	uxtb	r1, r1
 802257c:	d042      	beq.n	8022604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802257e:	b298      	uxth	r0, r3
 8022580:	43db      	mvns	r3, r3
 8022582:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8022586:	fb11 f100 	smulbb	r1, r1, r0
 802258a:	b2db      	uxtb	r3, r3
 802258c:	fb17 f700 	smulbb	r7, r7, r0
 8022590:	fb02 1103 	mla	r1, r2, r3, r1
 8022594:	fb1a f000 	smulbb	r0, sl, r0
 8022598:	b289      	uxth	r1, r1
 802259a:	1c4a      	adds	r2, r1, #1
 802259c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80225a0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80225a4:	fb02 7703 	mla	r7, r2, r3, r7
 80225a8:	1209      	asrs	r1, r1, #8
 80225aa:	b2bf      	uxth	r7, r7
 80225ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80225b0:	1c7a      	adds	r2, r7, #1
 80225b2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80225b6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80225ba:	fb02 0303 	mla	r3, r2, r3, r0
 80225be:	123f      	asrs	r7, r7, #8
 80225c0:	b29b      	uxth	r3, r3
 80225c2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80225c6:	1c5a      	adds	r2, r3, #1
 80225c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225cc:	121b      	asrs	r3, r3, #8
 80225ce:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80225d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80225d4:	f10c 0c03 	add.w	ip, ip, #3
 80225d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80225dc:	441d      	add	r5, r3
 80225de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80225e0:	441e      	add	r6, r3
 80225e2:	e6e7      	b.n	80223b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80225e4:	2f00      	cmp	r7, #0
 80225e6:	d0a5      	beq.n	8022534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80225e8:	444b      	add	r3, r9
 80225ea:	0859      	lsrs	r1, r3, #1
 80225ec:	07db      	lsls	r3, r3, #31
 80225ee:	f818 1001 	ldrb.w	r1, [r8, r1]
 80225f2:	bf54      	ite	pl
 80225f4:	f001 010f 	andpl.w	r1, r1, #15
 80225f8:	1109      	asrmi	r1, r1, #4
 80225fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80225fe:	b2c9      	uxtb	r1, r1
 8022600:	910b      	str	r1, [sp, #44]	; 0x2c
 8022602:	e797      	b.n	8022534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022604:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8022608:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802260c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8022610:	e7df      	b.n	80225d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022612:	b013      	add	sp, #76	; 0x4c
 8022614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022618:	24006a44 	.word	0x24006a44

0802261c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 802261c:	b530      	push	{r4, r5, lr}
 802261e:	b29d      	uxth	r5, r3
 8022620:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8022624:	780c      	ldrb	r4, [r1, #0]
 8022626:	b298      	uxth	r0, r3
 8022628:	7813      	ldrb	r3, [r2, #0]
 802262a:	fb14 f405 	smulbb	r4, r4, r5
 802262e:	fb13 f300 	smulbb	r3, r3, r0
 8022632:	441c      	add	r4, r3
 8022634:	b2a4      	uxth	r4, r4
 8022636:	1c63      	adds	r3, r4, #1
 8022638:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802263c:	7853      	ldrb	r3, [r2, #1]
 802263e:	fb13 f300 	smulbb	r3, r3, r0
 8022642:	1224      	asrs	r4, r4, #8
 8022644:	7014      	strb	r4, [r2, #0]
 8022646:	784c      	ldrb	r4, [r1, #1]
 8022648:	fb14 f405 	smulbb	r4, r4, r5
 802264c:	441c      	add	r4, r3
 802264e:	b2a4      	uxth	r4, r4
 8022650:	1c63      	adds	r3, r4, #1
 8022652:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022656:	1224      	asrs	r4, r4, #8
 8022658:	7054      	strb	r4, [r2, #1]
 802265a:	788b      	ldrb	r3, [r1, #2]
 802265c:	7891      	ldrb	r1, [r2, #2]
 802265e:	fb13 f305 	smulbb	r3, r3, r5
 8022662:	fb11 f000 	smulbb	r0, r1, r0
 8022666:	4403      	add	r3, r0
 8022668:	b29b      	uxth	r3, r3
 802266a:	1c59      	adds	r1, r3, #1
 802266c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022670:	121b      	asrs	r3, r3, #8
 8022672:	7093      	strb	r3, [r2, #2]
 8022674:	bd30      	pop	{r4, r5, pc}
	...

08022678 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8022678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802267c:	461c      	mov	r4, r3
 802267e:	b08b      	sub	sp, #44	; 0x2c
 8022680:	460e      	mov	r6, r1
 8022682:	4615      	mov	r5, r2
 8022684:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022686:	4682      	mov	sl, r0
 8022688:	6861      	ldr	r1, [r4, #4]
 802268a:	aa06      	add	r2, sp, #24
 802268c:	6820      	ldr	r0, [r4, #0]
 802268e:	2702      	movs	r7, #2
 8022690:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 8022694:	3504      	adds	r5, #4
 8022696:	c203      	stmia	r2!, {r0, r1}
 8022698:	6818      	ldr	r0, [r3, #0]
 802269a:	aa08      	add	r2, sp, #32
 802269c:	6859      	ldr	r1, [r3, #4]
 802269e:	c203      	stmia	r2!, {r0, r1}
 80226a0:	a806      	add	r0, sp, #24
 80226a2:	f7f4 f9e9 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226a6:	4621      	mov	r1, r4
 80226a8:	a808      	add	r0, sp, #32
 80226aa:	f7f4 fa0d 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80226ae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80226b2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 80226b6:	f002 0301 	and.w	r3, r2, #1
 80226ba:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80226be:	9302      	str	r3, [sp, #8]
 80226c0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80226c4:	f003 0101 	and.w	r1, r3, #1
 80226c8:	9101      	str	r1, [sp, #4]
 80226ca:	9801      	ldr	r0, [sp, #4]
 80226cc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80226d0:	4403      	add	r3, r0
 80226d2:	fb01 2303 	mla	r3, r1, r3, r2
 80226d6:	fb93 f3f7 	sdiv	r3, r3, r7
 80226da:	441e      	add	r6, r3
 80226dc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80226e0:	441a      	add	r2, r3
 80226e2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80226e6:	4419      	add	r1, r3
 80226e8:	4b70      	ldr	r3, [pc, #448]	; (80228ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80226ea:	f8ad 2020 	strh.w	r2, [sp, #32]
 80226ee:	6818      	ldr	r0, [r3, #0]
 80226f0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80226f4:	6803      	ldr	r3, [r0, #0]
 80226f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226f8:	4798      	blx	r3
 80226fa:	4a6d      	ldr	r2, [pc, #436]	; (80228b0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80226fc:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022700:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022704:	8813      	ldrh	r3, [r2, #0]
 8022706:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802270a:	fb03 1404 	mla	r4, r3, r4, r1
 802270e:	4611      	mov	r1, r2
 8022710:	fb0b f303 	mul.w	r3, fp, r3
 8022714:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802271c:	4404      	add	r4, r0
 802271e:	4423      	add	r3, r4
 8022720:	d073      	beq.n	802280a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8022722:	9705      	str	r7, [sp, #20]
 8022724:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022728:	9b03      	ldr	r3, [sp, #12]
 802272a:	429c      	cmp	r4, r3
 802272c:	f080 80b5 	bcs.w	802289a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8022730:	9b02      	ldr	r3, [sp, #8]
 8022732:	b35b      	cbz	r3, 802278c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8022734:	7831      	ldrb	r1, [r6, #0]
 8022736:	4622      	mov	r2, r4
 8022738:	1c77      	adds	r7, r6, #1
 802273a:	3403      	adds	r4, #3
 802273c:	f001 010f 	and.w	r1, r1, #15
 8022740:	f108 3bff 	add.w	fp, r8, #4294967295
 8022744:	464b      	mov	r3, r9
 8022746:	4650      	mov	r0, sl
 8022748:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802274c:	4429      	add	r1, r5
 802274e:	f7ff ff65 	bl	802261c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8022752:	f1bb 0f01 	cmp.w	fp, #1
 8022756:	dd1c      	ble.n	8022792 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8022758:	7839      	ldrb	r1, [r7, #0]
 802275a:	4622      	mov	r2, r4
 802275c:	464b      	mov	r3, r9
 802275e:	4650      	mov	r0, sl
 8022760:	0909      	lsrs	r1, r1, #4
 8022762:	f1ab 0b02 	sub.w	fp, fp, #2
 8022766:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802276a:	4429      	add	r1, r5
 802276c:	f7ff ff56 	bl	802261c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8022770:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022774:	1ce2      	adds	r2, r4, #3
 8022776:	464b      	mov	r3, r9
 8022778:	f001 010f 	and.w	r1, r1, #15
 802277c:	4650      	mov	r0, sl
 802277e:	3406      	adds	r4, #6
 8022780:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022784:	4429      	add	r1, r5
 8022786:	f7ff ff49 	bl	802261c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802278a:	e7e2      	b.n	8022752 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802278c:	4637      	mov	r7, r6
 802278e:	46c3      	mov	fp, r8
 8022790:	e7df      	b.n	8022752 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8022792:	d10a      	bne.n	80227aa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8022794:	7839      	ldrb	r1, [r7, #0]
 8022796:	4622      	mov	r2, r4
 8022798:	3403      	adds	r4, #3
 802279a:	464b      	mov	r3, r9
 802279c:	0909      	lsrs	r1, r1, #4
 802279e:	4650      	mov	r0, sl
 80227a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80227a4:	4429      	add	r1, r5
 80227a6:	f7ff ff39 	bl	802261c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80227aa:	9b04      	ldr	r3, [sp, #16]
 80227ac:	9a01      	ldr	r2, [sp, #4]
 80227ae:	881b      	ldrh	r3, [r3, #0]
 80227b0:	eba3 0308 	sub.w	r3, r3, r8
 80227b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227b8:	441c      	add	r4, r3
 80227ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80227be:	4413      	add	r3, r2
 80227c0:	9a05      	ldr	r2, [sp, #20]
 80227c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80227c6:	441e      	add	r6, r3
 80227c8:	e7ae      	b.n	8022728 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80227ca:	4632      	mov	r2, r6
 80227cc:	46c4      	mov	ip, r8
 80227ce:	e037      	b.n	8022840 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80227d0:	d10e      	bne.n	80227f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80227d2:	7812      	ldrb	r2, [r2, #0]
 80227d4:	3003      	adds	r0, #3
 80227d6:	0912      	lsrs	r2, r2, #4
 80227d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227dc:	18ac      	adds	r4, r5, r2
 80227de:	5caa      	ldrb	r2, [r5, r2]
 80227e0:	f800 2c03 	strb.w	r2, [r0, #-3]
 80227e4:	7862      	ldrb	r2, [r4, #1]
 80227e6:	f800 2c02 	strb.w	r2, [r0, #-2]
 80227ea:	78a2      	ldrb	r2, [r4, #2]
 80227ec:	f800 2c01 	strb.w	r2, [r0, #-1]
 80227f0:	880c      	ldrh	r4, [r1, #0]
 80227f2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80227f6:	eba4 0408 	sub.w	r4, r4, r8
 80227fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227fe:	4404      	add	r4, r0
 8022800:	9801      	ldr	r0, [sp, #4]
 8022802:	4402      	add	r2, r0
 8022804:	fb92 f2f7 	sdiv	r2, r2, r7
 8022808:	4416      	add	r6, r2
 802280a:	429c      	cmp	r4, r3
 802280c:	d245      	bcs.n	802289a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802280e:	9a02      	ldr	r2, [sp, #8]
 8022810:	2a00      	cmp	r2, #0
 8022812:	d0da      	beq.n	80227ca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8022814:	7830      	ldrb	r0, [r6, #0]
 8022816:	1c72      	adds	r2, r6, #1
 8022818:	3403      	adds	r4, #3
 802281a:	f000 000f 	and.w	r0, r0, #15
 802281e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022822:	eb05 0c00 	add.w	ip, r5, r0
 8022826:	5c28      	ldrb	r0, [r5, r0]
 8022828:	f804 0c03 	strb.w	r0, [r4, #-3]
 802282c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022830:	f804 0c02 	strb.w	r0, [r4, #-2]
 8022834:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8022838:	f108 3cff 	add.w	ip, r8, #4294967295
 802283c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8022840:	f1bc 0f01 	cmp.w	ip, #1
 8022844:	4620      	mov	r0, r4
 8022846:	f104 0406 	add.w	r4, r4, #6
 802284a:	ddc1      	ble.n	80227d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 802284c:	7810      	ldrb	r0, [r2, #0]
 802284e:	f1ac 0c02 	sub.w	ip, ip, #2
 8022852:	0900      	lsrs	r0, r0, #4
 8022854:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022858:	eb05 0e00 	add.w	lr, r5, r0
 802285c:	5c28      	ldrb	r0, [r5, r0]
 802285e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8022862:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022866:	f804 0c05 	strb.w	r0, [r4, #-5]
 802286a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802286e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8022872:	f812 0b01 	ldrb.w	r0, [r2], #1
 8022876:	f000 000f 	and.w	r0, r0, #15
 802287a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802287e:	eb05 0e00 	add.w	lr, r5, r0
 8022882:	5c28      	ldrb	r0, [r5, r0]
 8022884:	f804 0c03 	strb.w	r0, [r4, #-3]
 8022888:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802288c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8022890:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022894:	f804 0c01 	strb.w	r0, [r4, #-1]
 8022898:	e7d2      	b.n	8022840 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802289a:	4b04      	ldr	r3, [pc, #16]	; (80228ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802289c:	6818      	ldr	r0, [r3, #0]
 802289e:	6803      	ldr	r3, [r0, #0]
 80228a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228a2:	4798      	blx	r3
 80228a4:	b00b      	add	sp, #44	; 0x2c
 80228a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228aa:	bf00      	nop
 80228ac:	24006a3c 	.word	0x24006a3c
 80228b0:	24006a36 	.word	0x24006a36

080228b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80228b4:	b530      	push	{r4, r5, lr}
 80228b6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80228ba:	780d      	ldrb	r5, [r1, #0]
 80228bc:	28ff      	cmp	r0, #255	; 0xff
 80228be:	d107      	bne.n	80228d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80228c0:	2bff      	cmp	r3, #255	; 0xff
 80228c2:	d105      	bne.n	80228d0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80228c4:	7015      	strb	r5, [r2, #0]
 80228c6:	784b      	ldrb	r3, [r1, #1]
 80228c8:	7053      	strb	r3, [r2, #1]
 80228ca:	788b      	ldrb	r3, [r1, #2]
 80228cc:	7093      	strb	r3, [r2, #2]
 80228ce:	bd30      	pop	{r4, r5, pc}
 80228d0:	fb10 f003 	smulbb	r0, r0, r3
 80228d4:	b283      	uxth	r3, r0
 80228d6:	1c58      	adds	r0, r3, #1
 80228d8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80228dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80228e0:	b284      	uxth	r4, r0
 80228e2:	43c0      	mvns	r0, r0
 80228e4:	fb15 f504 	smulbb	r5, r5, r4
 80228e8:	b2c3      	uxtb	r3, r0
 80228ea:	7810      	ldrb	r0, [r2, #0]
 80228ec:	fb00 5003 	mla	r0, r0, r3, r5
 80228f0:	b280      	uxth	r0, r0
 80228f2:	1c45      	adds	r5, r0, #1
 80228f4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80228f8:	7855      	ldrb	r5, [r2, #1]
 80228fa:	fb15 f503 	smulbb	r5, r5, r3
 80228fe:	1200      	asrs	r0, r0, #8
 8022900:	7010      	strb	r0, [r2, #0]
 8022902:	7848      	ldrb	r0, [r1, #1]
 8022904:	fb00 5004 	mla	r0, r0, r4, r5
 8022908:	b280      	uxth	r0, r0
 802290a:	1c45      	adds	r5, r0, #1
 802290c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022910:	1200      	asrs	r0, r0, #8
 8022912:	7050      	strb	r0, [r2, #1]
 8022914:	7888      	ldrb	r0, [r1, #2]
 8022916:	7891      	ldrb	r1, [r2, #2]
 8022918:	fb11 f303 	smulbb	r3, r1, r3
 802291c:	fb00 3304 	mla	r3, r0, r4, r3
 8022920:	b29b      	uxth	r3, r3
 8022922:	1c59      	adds	r1, r3, #1
 8022924:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022928:	121b      	asrs	r3, r3, #8
 802292a:	e7cf      	b.n	80228cc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0802292c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022930:	461d      	mov	r5, r3
 8022932:	b08f      	sub	sp, #60	; 0x3c
 8022934:	460c      	mov	r4, r1
 8022936:	4616      	mov	r6, r2
 8022938:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802293a:	4680      	mov	r8, r0
 802293c:	6869      	ldr	r1, [r5, #4]
 802293e:	aa0a      	add	r2, sp, #40	; 0x28
 8022940:	6828      	ldr	r0, [r5, #0]
 8022942:	3604      	adds	r6, #4
 8022944:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 8022948:	4f57      	ldr	r7, [pc, #348]	; (8022aa8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802294a:	c203      	stmia	r2!, {r0, r1}
 802294c:	6818      	ldr	r0, [r3, #0]
 802294e:	aa0c      	add	r2, sp, #48	; 0x30
 8022950:	6859      	ldr	r1, [r3, #4]
 8022952:	c203      	stmia	r2!, {r0, r1}
 8022954:	a80a      	add	r0, sp, #40	; 0x28
 8022956:	f7f4 f88f 	bl	8016a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802295a:	4629      	mov	r1, r5
 802295c:	a80c      	add	r0, sp, #48	; 0x30
 802295e:	2502      	movs	r5, #2
 8022960:	f7f4 f8b2 	bl	8016ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022964:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022968:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 802296c:	f002 0301 	and.w	r3, r2, #1
 8022970:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8022974:	9304      	str	r3, [sp, #16]
 8022976:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802297a:	f003 0101 	and.w	r1, r3, #1
 802297e:	9103      	str	r1, [sp, #12]
 8022980:	9803      	ldr	r0, [sp, #12]
 8022982:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8022986:	4403      	add	r3, r0
 8022988:	6838      	ldr	r0, [r7, #0]
 802298a:	fb01 2303 	mla	r3, r1, r3, r2
 802298e:	fb93 f3f5 	sdiv	r3, r3, r5
 8022992:	18e5      	adds	r5, r4, r3
 8022994:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022998:	441a      	add	r2, r3
 802299a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802299e:	4419      	add	r1, r3
 80229a0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80229a4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80229a8:	6803      	ldr	r3, [r0, #0]
 80229aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229ac:	4798      	blx	r3
 80229ae:	4a3f      	ldr	r2, [pc, #252]	; (8022aac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80229b0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 80229b4:	8813      	ldrh	r3, [r2, #0]
 80229b6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80229ba:	9207      	str	r2, [sp, #28]
 80229bc:	fb03 1404 	mla	r4, r3, r4, r1
 80229c0:	fb0a f303 	mul.w	r3, sl, r3
 80229c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80229c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229cc:	4404      	add	r4, r0
 80229ce:	18e3      	adds	r3, r4, r3
 80229d0:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80229d4:	9b05      	ldr	r3, [sp, #20]
 80229d6:	429c      	cmp	r4, r3
 80229d8:	d25d      	bcs.n	8022a96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80229da:	9b04      	ldr	r3, [sp, #16]
 80229dc:	2b00      	cmp	r3, #0
 80229de:	d037      	beq.n	8022a50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80229e0:	782b      	ldrb	r3, [r5, #0]
 80229e2:	1c6f      	adds	r7, r5, #1
 80229e4:	f003 030f 	and.w	r3, r3, #15
 80229e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80229ec:	9309      	str	r3, [sp, #36]	; 0x24
 80229ee:	0e1b      	lsrs	r3, r3, #24
 80229f0:	d006      	beq.n	8022a00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80229f2:	9300      	str	r3, [sp, #0]
 80229f4:	4622      	mov	r2, r4
 80229f6:	464b      	mov	r3, r9
 80229f8:	a909      	add	r1, sp, #36	; 0x24
 80229fa:	4640      	mov	r0, r8
 80229fc:	f7ff ff5a 	bl	80228b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022a00:	3403      	adds	r4, #3
 8022a02:	f10b 3aff 	add.w	sl, fp, #4294967295
 8022a06:	f1ba 0f01 	cmp.w	sl, #1
 8022a0a:	dd24      	ble.n	8022a56 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8022a0c:	783b      	ldrb	r3, [r7, #0]
 8022a0e:	091b      	lsrs	r3, r3, #4
 8022a10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022a14:	9308      	str	r3, [sp, #32]
 8022a16:	0e1b      	lsrs	r3, r3, #24
 8022a18:	d006      	beq.n	8022a28 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8022a1a:	9300      	str	r3, [sp, #0]
 8022a1c:	4622      	mov	r2, r4
 8022a1e:	464b      	mov	r3, r9
 8022a20:	a908      	add	r1, sp, #32
 8022a22:	4640      	mov	r0, r8
 8022a24:	f7ff ff46 	bl	80228b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022a28:	f817 3b01 	ldrb.w	r3, [r7], #1
 8022a2c:	f003 030f 	and.w	r3, r3, #15
 8022a30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022a34:	9309      	str	r3, [sp, #36]	; 0x24
 8022a36:	0e1b      	lsrs	r3, r3, #24
 8022a38:	d006      	beq.n	8022a48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8022a3a:	9300      	str	r3, [sp, #0]
 8022a3c:	1ce2      	adds	r2, r4, #3
 8022a3e:	464b      	mov	r3, r9
 8022a40:	a909      	add	r1, sp, #36	; 0x24
 8022a42:	4640      	mov	r0, r8
 8022a44:	f7ff ff36 	bl	80228b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022a48:	3406      	adds	r4, #6
 8022a4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8022a4e:	e7da      	b.n	8022a06 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8022a50:	462f      	mov	r7, r5
 8022a52:	46da      	mov	sl, fp
 8022a54:	e7d7      	b.n	8022a06 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8022a56:	d10e      	bne.n	8022a76 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8022a58:	783b      	ldrb	r3, [r7, #0]
 8022a5a:	091b      	lsrs	r3, r3, #4
 8022a5c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022a60:	9309      	str	r3, [sp, #36]	; 0x24
 8022a62:	0e1b      	lsrs	r3, r3, #24
 8022a64:	d006      	beq.n	8022a74 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8022a66:	9300      	str	r3, [sp, #0]
 8022a68:	4622      	mov	r2, r4
 8022a6a:	464b      	mov	r3, r9
 8022a6c:	a909      	add	r1, sp, #36	; 0x24
 8022a6e:	4640      	mov	r0, r8
 8022a70:	f7ff ff20 	bl	80228b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022a74:	3403      	adds	r4, #3
 8022a76:	9b07      	ldr	r3, [sp, #28]
 8022a78:	9a03      	ldr	r2, [sp, #12]
 8022a7a:	881b      	ldrh	r3, [r3, #0]
 8022a7c:	eba3 030b 	sub.w	r3, r3, fp
 8022a80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a84:	441c      	add	r4, r3
 8022a86:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8022a8a:	4413      	add	r3, r2
 8022a8c:	2202      	movs	r2, #2
 8022a8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8022a92:	441d      	add	r5, r3
 8022a94:	e79e      	b.n	80229d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8022a96:	9b06      	ldr	r3, [sp, #24]
 8022a98:	6818      	ldr	r0, [r3, #0]
 8022a9a:	6803      	ldr	r3, [r0, #0]
 8022a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a9e:	4798      	blx	r3
 8022aa0:	b00f      	add	sp, #60	; 0x3c
 8022aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aa6:	bf00      	nop
 8022aa8:	24006a3c 	.word	0x24006a3c
 8022aac:	24006a36 	.word	0x24006a36

08022ab0 <CRC_Lock>:
 8022ab0:	4a20      	ldr	r2, [pc, #128]	; (8022b34 <CRC_Lock+0x84>)
 8022ab2:	b530      	push	{r4, r5, lr}
 8022ab4:	6813      	ldr	r3, [r2, #0]
 8022ab6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022aba:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022abe:	f023 0301 	bic.w	r3, r3, #1
 8022ac2:	6013      	str	r3, [r2, #0]
 8022ac4:	4b1c      	ldr	r3, [pc, #112]	; (8022b38 <CRC_Lock+0x88>)
 8022ac6:	681a      	ldr	r2, [r3, #0]
 8022ac8:	4022      	ands	r2, r4
 8022aca:	42aa      	cmp	r2, r5
 8022acc:	d005      	beq.n	8022ada <CRC_Lock+0x2a>
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022ad4:	4023      	ands	r3, r4
 8022ad6:	4293      	cmp	r3, r2
 8022ad8:	d124      	bne.n	8022b24 <CRC_Lock+0x74>
 8022ada:	4b18      	ldr	r3, [pc, #96]	; (8022b3c <CRC_Lock+0x8c>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	bb0b      	cbnz	r3, 8022b24 <CRC_Lock+0x74>
 8022ae0:	4b17      	ldr	r3, [pc, #92]	; (8022b40 <CRC_Lock+0x90>)
 8022ae2:	681a      	ldr	r2, [r3, #0]
 8022ae4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022ae8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022aec:	d00d      	beq.n	8022b0a <CRC_Lock+0x5a>
 8022aee:	681a      	ldr	r2, [r3, #0]
 8022af0:	f240 4483 	movw	r4, #1155	; 0x483
 8022af4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022af8:	42a2      	cmp	r2, r4
 8022afa:	d006      	beq.n	8022b0a <CRC_Lock+0x5a>
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	f240 4285 	movw	r2, #1157	; 0x485
 8022b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022b06:	4293      	cmp	r3, r2
 8022b08:	d10c      	bne.n	8022b24 <CRC_Lock+0x74>
 8022b0a:	4b0e      	ldr	r3, [pc, #56]	; (8022b44 <CRC_Lock+0x94>)
 8022b0c:	2201      	movs	r2, #1
 8022b0e:	601a      	str	r2, [r3, #0]
 8022b10:	681a      	ldr	r2, [r3, #0]
 8022b12:	2a00      	cmp	r2, #0
 8022b14:	d1fc      	bne.n	8022b10 <CRC_Lock+0x60>
 8022b16:	4b0c      	ldr	r3, [pc, #48]	; (8022b48 <CRC_Lock+0x98>)
 8022b18:	6018      	str	r0, [r3, #0]
 8022b1a:	6818      	ldr	r0, [r3, #0]
 8022b1c:	1a43      	subs	r3, r0, r1
 8022b1e:	4258      	negs	r0, r3
 8022b20:	4158      	adcs	r0, r3
 8022b22:	bd30      	pop	{r4, r5, pc}
 8022b24:	4b09      	ldr	r3, [pc, #36]	; (8022b4c <CRC_Lock+0x9c>)
 8022b26:	2201      	movs	r2, #1
 8022b28:	601a      	str	r2, [r3, #0]
 8022b2a:	681a      	ldr	r2, [r3, #0]
 8022b2c:	2a00      	cmp	r2, #0
 8022b2e:	d1fc      	bne.n	8022b2a <CRC_Lock+0x7a>
 8022b30:	4b07      	ldr	r3, [pc, #28]	; (8022b50 <CRC_Lock+0xa0>)
 8022b32:	e7f1      	b.n	8022b18 <CRC_Lock+0x68>
 8022b34:	e0002000 	.word	0xe0002000
 8022b38:	e000ed00 	.word	0xe000ed00
 8022b3c:	e0042000 	.word	0xe0042000
 8022b40:	5c001000 	.word	0x5c001000
 8022b44:	58024c08 	.word	0x58024c08
 8022b48:	58024c00 	.word	0x58024c00
 8022b4c:	40023008 	.word	0x40023008
 8022b50:	40023000 	.word	0x40023000

08022b54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022b54:	6101      	str	r1, [r0, #16]
 8022b56:	4770      	bx	lr

08022b58 <_ZN8touchgfx8Gestures4tickEv>:
 8022b58:	7b83      	ldrb	r3, [r0, #14]
 8022b5a:	b14b      	cbz	r3, 8022b70 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022b5c:	8903      	ldrh	r3, [r0, #8]
 8022b5e:	3301      	adds	r3, #1
 8022b60:	b29b      	uxth	r3, r3
 8022b62:	2b07      	cmp	r3, #7
 8022b64:	8103      	strh	r3, [r0, #8]
 8022b66:	bf81      	itttt	hi
 8022b68:	2300      	movhi	r3, #0
 8022b6a:	8143      	strhhi	r3, [r0, #10]
 8022b6c:	8183      	strhhi	r3, [r0, #12]
 8022b6e:	7383      	strbhi	r3, [r0, #14]
 8022b70:	4770      	bx	lr
	...

08022b74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022b74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022b78:	4698      	mov	r8, r3
 8022b7a:	8883      	ldrh	r3, [r0, #4]
 8022b7c:	4604      	mov	r4, r0
 8022b7e:	4617      	mov	r7, r2
 8022b80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022b84:	eba8 0303 	sub.w	r3, r8, r3
 8022b88:	4a19      	ldr	r2, [pc, #100]	; (8022bf0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8022b8a:	460e      	mov	r6, r1
 8022b8c:	b21b      	sxth	r3, r3
 8022b8e:	88c1      	ldrh	r1, [r0, #6]
 8022b90:	9200      	str	r2, [sp, #0]
 8022b92:	2000      	movs	r0, #0
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	8aa2      	ldrh	r2, [r4, #20]
 8022b98:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022b9c:	bfb8      	it	lt
 8022b9e:	425b      	neglt	r3, r3
 8022ba0:	f88d 0004 	strb.w	r0, [sp, #4]
 8022ba4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022ba8:	b21b      	sxth	r3, r3
 8022baa:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022bae:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022bb2:	4293      	cmp	r3, r2
 8022bb4:	dc07      	bgt.n	8022bc6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022bb6:	1a69      	subs	r1, r5, r1
 8022bb8:	b209      	sxth	r1, r1
 8022bba:	2900      	cmp	r1, #0
 8022bbc:	bfb8      	it	lt
 8022bbe:	4249      	neglt	r1, r1
 8022bc0:	b209      	sxth	r1, r1
 8022bc2:	428a      	cmp	r2, r1
 8022bc4:	da10      	bge.n	8022be8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022bc6:	6920      	ldr	r0, [r4, #16]
 8022bc8:	4669      	mov	r1, sp
 8022bca:	eba8 0606 	sub.w	r6, r8, r6
 8022bce:	1bef      	subs	r7, r5, r7
 8022bd0:	6803      	ldr	r3, [r0, #0]
 8022bd2:	685b      	ldr	r3, [r3, #4]
 8022bd4:	4798      	blx	r3
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	2001      	movs	r0, #1
 8022bda:	8166      	strh	r6, [r4, #10]
 8022bdc:	8123      	strh	r3, [r4, #8]
 8022bde:	81a7      	strh	r7, [r4, #12]
 8022be0:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022be4:	80e5      	strh	r5, [r4, #6]
 8022be6:	73a0      	strb	r0, [r4, #14]
 8022be8:	b004      	add	sp, #16
 8022bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bee:	bf00      	nop
 8022bf0:	08025520 	.word	0x08025520

08022bf4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bf6:	461e      	mov	r6, r3
 8022bf8:	1e4b      	subs	r3, r1, #1
 8022bfa:	b085      	sub	sp, #20
 8022bfc:	4604      	mov	r4, r0
 8022bfe:	2b01      	cmp	r3, #1
 8022c00:	460d      	mov	r5, r1
 8022c02:	4617      	mov	r7, r2
 8022c04:	d84b      	bhi.n	8022c9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022c06:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022c0a:	1cd3      	adds	r3, r2, #3
 8022c0c:	b29b      	uxth	r3, r3
 8022c0e:	2b06      	cmp	r3, #6
 8022c10:	d916      	bls.n	8022c40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022c12:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8022cb4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022c16:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022c1a:	f8cd c004 	str.w	ip, [sp, #4]
 8022c1e:	f04f 0c00 	mov.w	ip, #0
 8022c22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022c26:	6900      	ldr	r0, [r0, #16]
 8022c28:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022c2c:	a901      	add	r1, sp, #4
 8022c2e:	f88d c008 	strb.w	ip, [sp, #8]
 8022c32:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022c36:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022c3a:	6803      	ldr	r3, [r0, #0]
 8022c3c:	689b      	ldr	r3, [r3, #8]
 8022c3e:	4798      	blx	r3
 8022c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022c44:	1cd3      	adds	r3, r2, #3
 8022c46:	b29b      	uxth	r3, r3
 8022c48:	2b06      	cmp	r3, #6
 8022c4a:	d916      	bls.n	8022c7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022c4c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8022cb4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022c50:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022c54:	f8cd c004 	str.w	ip, [sp, #4]
 8022c58:	f04f 0c01 	mov.w	ip, #1
 8022c5c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022c60:	6920      	ldr	r0, [r4, #16]
 8022c62:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022c66:	a901      	add	r1, sp, #4
 8022c68:	f88d c008 	strb.w	ip, [sp, #8]
 8022c6c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022c70:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022c74:	6803      	ldr	r3, [r0, #0]
 8022c76:	689b      	ldr	r3, [r3, #8]
 8022c78:	4798      	blx	r3
 8022c7a:	4b0d      	ldr	r3, [pc, #52]	; (8022cb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8022c7c:	a901      	add	r1, sp, #4
 8022c7e:	6920      	ldr	r0, [r4, #16]
 8022c80:	9301      	str	r3, [sp, #4]
 8022c82:	2300      	movs	r3, #0
 8022c84:	f88d 5008 	strb.w	r5, [sp, #8]
 8022c88:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022c8c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022c90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022c94:	6803      	ldr	r3, [r0, #0]
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	4798      	blx	r3
 8022c9a:	b005      	add	sp, #20
 8022c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c9e:	2900      	cmp	r1, #0
 8022ca0:	d1eb      	bne.n	8022c7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022ca2:	80a2      	strh	r2, [r4, #4]
 8022ca4:	80c6      	strh	r6, [r0, #6]
 8022ca6:	60a1      	str	r1, [r4, #8]
 8022ca8:	81a1      	strh	r1, [r4, #12]
 8022caa:	73a1      	strb	r1, [r4, #14]
 8022cac:	e7e5      	b.n	8022c7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022cae:	bf00      	nop
 8022cb0:	0802550c 	.word	0x0802550c
 8022cb4:	08025534 	.word	0x08025534

08022cb8 <__aeabi_atexit>:
 8022cb8:	460b      	mov	r3, r1
 8022cba:	4601      	mov	r1, r0
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f000 b90f 	b.w	8022ee0 <__cxa_atexit>

08022cc2 <_ZdlPvj>:
 8022cc2:	f000 b812 	b.w	8022cea <_ZdlPv>

08022cc6 <__cxa_guard_acquire>:
 8022cc6:	6803      	ldr	r3, [r0, #0]
 8022cc8:	07db      	lsls	r3, r3, #31
 8022cca:	d406      	bmi.n	8022cda <__cxa_guard_acquire+0x14>
 8022ccc:	7843      	ldrb	r3, [r0, #1]
 8022cce:	b103      	cbz	r3, 8022cd2 <__cxa_guard_acquire+0xc>
 8022cd0:	deff      	udf	#255	; 0xff
 8022cd2:	2301      	movs	r3, #1
 8022cd4:	7043      	strb	r3, [r0, #1]
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	4770      	bx	lr
 8022cda:	2000      	movs	r0, #0
 8022cdc:	4770      	bx	lr

08022cde <__cxa_guard_release>:
 8022cde:	2301      	movs	r3, #1
 8022ce0:	6003      	str	r3, [r0, #0]
 8022ce2:	4770      	bx	lr

08022ce4 <__cxa_pure_virtual>:
 8022ce4:	b508      	push	{r3, lr}
 8022ce6:	f000 f80f 	bl	8022d08 <_ZSt9terminatev>

08022cea <_ZdlPv>:
 8022cea:	f000 b845 	b.w	8022d78 <free>

08022cee <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022cee:	b508      	push	{r3, lr}
 8022cf0:	4780      	blx	r0
 8022cf2:	f000 f80e 	bl	8022d12 <abort>
	...

08022cf8 <_ZSt13get_terminatev>:
 8022cf8:	4b02      	ldr	r3, [pc, #8]	; (8022d04 <_ZSt13get_terminatev+0xc>)
 8022cfa:	6818      	ldr	r0, [r3, #0]
 8022cfc:	f3bf 8f5b 	dmb	ish
 8022d00:	4770      	bx	lr
 8022d02:	bf00      	nop
 8022d04:	240000ac 	.word	0x240000ac

08022d08 <_ZSt9terminatev>:
 8022d08:	b508      	push	{r3, lr}
 8022d0a:	f7ff fff5 	bl	8022cf8 <_ZSt13get_terminatev>
 8022d0e:	f7ff ffee 	bl	8022cee <_ZN10__cxxabiv111__terminateEPFvvE>

08022d12 <abort>:
 8022d12:	b508      	push	{r3, lr}
 8022d14:	2006      	movs	r0, #6
 8022d16:	f000 fa39 	bl	802318c <raise>
 8022d1a:	2001      	movs	r0, #1
 8022d1c:	f7de fd24 	bl	8001768 <_exit>

08022d20 <__assert_func>:
 8022d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d22:	4614      	mov	r4, r2
 8022d24:	461a      	mov	r2, r3
 8022d26:	4b09      	ldr	r3, [pc, #36]	; (8022d4c <__assert_func+0x2c>)
 8022d28:	681b      	ldr	r3, [r3, #0]
 8022d2a:	4605      	mov	r5, r0
 8022d2c:	68d8      	ldr	r0, [r3, #12]
 8022d2e:	b14c      	cbz	r4, 8022d44 <__assert_func+0x24>
 8022d30:	4b07      	ldr	r3, [pc, #28]	; (8022d50 <__assert_func+0x30>)
 8022d32:	9100      	str	r1, [sp, #0]
 8022d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022d38:	4906      	ldr	r1, [pc, #24]	; (8022d54 <__assert_func+0x34>)
 8022d3a:	462b      	mov	r3, r5
 8022d3c:	f000 f982 	bl	8023044 <fiprintf>
 8022d40:	f7ff ffe7 	bl	8022d12 <abort>
 8022d44:	4b04      	ldr	r3, [pc, #16]	; (8022d58 <__assert_func+0x38>)
 8022d46:	461c      	mov	r4, r3
 8022d48:	e7f3      	b.n	8022d32 <__assert_func+0x12>
 8022d4a:	bf00      	nop
 8022d4c:	24000108 	.word	0x24000108
 8022d50:	080257a4 	.word	0x080257a4
 8022d54:	080257b1 	.word	0x080257b1
 8022d58:	080257df 	.word	0x080257df

08022d5c <atexit>:
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	4601      	mov	r1, r0
 8022d60:	461a      	mov	r2, r3
 8022d62:	4618      	mov	r0, r3
 8022d64:	f000 bac0 	b.w	80232e8 <__register_exitproc>

08022d68 <malloc>:
 8022d68:	4b02      	ldr	r3, [pc, #8]	; (8022d74 <malloc+0xc>)
 8022d6a:	4601      	mov	r1, r0
 8022d6c:	6818      	ldr	r0, [r3, #0]
 8022d6e:	f000 b82b 	b.w	8022dc8 <_malloc_r>
 8022d72:	bf00      	nop
 8022d74:	24000108 	.word	0x24000108

08022d78 <free>:
 8022d78:	4b02      	ldr	r3, [pc, #8]	; (8022d84 <free+0xc>)
 8022d7a:	4601      	mov	r1, r0
 8022d7c:	6818      	ldr	r0, [r3, #0]
 8022d7e:	f000 bb11 	b.w	80233a4 <_free_r>
 8022d82:	bf00      	nop
 8022d84:	24000108 	.word	0x24000108

08022d88 <sbrk_aligned>:
 8022d88:	b570      	push	{r4, r5, r6, lr}
 8022d8a:	4e0e      	ldr	r6, [pc, #56]	; (8022dc4 <sbrk_aligned+0x3c>)
 8022d8c:	460c      	mov	r4, r1
 8022d8e:	6831      	ldr	r1, [r6, #0]
 8022d90:	4605      	mov	r5, r0
 8022d92:	b911      	cbnz	r1, 8022d9a <sbrk_aligned+0x12>
 8022d94:	f000 fa4a 	bl	802322c <_sbrk_r>
 8022d98:	6030      	str	r0, [r6, #0]
 8022d9a:	4621      	mov	r1, r4
 8022d9c:	4628      	mov	r0, r5
 8022d9e:	f000 fa45 	bl	802322c <_sbrk_r>
 8022da2:	1c43      	adds	r3, r0, #1
 8022da4:	d00a      	beq.n	8022dbc <sbrk_aligned+0x34>
 8022da6:	1cc4      	adds	r4, r0, #3
 8022da8:	f024 0403 	bic.w	r4, r4, #3
 8022dac:	42a0      	cmp	r0, r4
 8022dae:	d007      	beq.n	8022dc0 <sbrk_aligned+0x38>
 8022db0:	1a21      	subs	r1, r4, r0
 8022db2:	4628      	mov	r0, r5
 8022db4:	f000 fa3a 	bl	802322c <_sbrk_r>
 8022db8:	3001      	adds	r0, #1
 8022dba:	d101      	bne.n	8022dc0 <sbrk_aligned+0x38>
 8022dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8022dc0:	4620      	mov	r0, r4
 8022dc2:	bd70      	pop	{r4, r5, r6, pc}
 8022dc4:	2400736c 	.word	0x2400736c

08022dc8 <_malloc_r>:
 8022dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022dcc:	1ccd      	adds	r5, r1, #3
 8022dce:	f025 0503 	bic.w	r5, r5, #3
 8022dd2:	3508      	adds	r5, #8
 8022dd4:	2d0c      	cmp	r5, #12
 8022dd6:	bf38      	it	cc
 8022dd8:	250c      	movcc	r5, #12
 8022dda:	2d00      	cmp	r5, #0
 8022ddc:	4607      	mov	r7, r0
 8022dde:	db01      	blt.n	8022de4 <_malloc_r+0x1c>
 8022de0:	42a9      	cmp	r1, r5
 8022de2:	d905      	bls.n	8022df0 <_malloc_r+0x28>
 8022de4:	230c      	movs	r3, #12
 8022de6:	603b      	str	r3, [r7, #0]
 8022de8:	2600      	movs	r6, #0
 8022dea:	4630      	mov	r0, r6
 8022dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022df0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022ec4 <_malloc_r+0xfc>
 8022df4:	f000 f868 	bl	8022ec8 <__malloc_lock>
 8022df8:	f8d8 3000 	ldr.w	r3, [r8]
 8022dfc:	461c      	mov	r4, r3
 8022dfe:	bb5c      	cbnz	r4, 8022e58 <_malloc_r+0x90>
 8022e00:	4629      	mov	r1, r5
 8022e02:	4638      	mov	r0, r7
 8022e04:	f7ff ffc0 	bl	8022d88 <sbrk_aligned>
 8022e08:	1c43      	adds	r3, r0, #1
 8022e0a:	4604      	mov	r4, r0
 8022e0c:	d155      	bne.n	8022eba <_malloc_r+0xf2>
 8022e0e:	f8d8 4000 	ldr.w	r4, [r8]
 8022e12:	4626      	mov	r6, r4
 8022e14:	2e00      	cmp	r6, #0
 8022e16:	d145      	bne.n	8022ea4 <_malloc_r+0xdc>
 8022e18:	2c00      	cmp	r4, #0
 8022e1a:	d048      	beq.n	8022eae <_malloc_r+0xe6>
 8022e1c:	6823      	ldr	r3, [r4, #0]
 8022e1e:	4631      	mov	r1, r6
 8022e20:	4638      	mov	r0, r7
 8022e22:	eb04 0903 	add.w	r9, r4, r3
 8022e26:	f000 fa01 	bl	802322c <_sbrk_r>
 8022e2a:	4581      	cmp	r9, r0
 8022e2c:	d13f      	bne.n	8022eae <_malloc_r+0xe6>
 8022e2e:	6821      	ldr	r1, [r4, #0]
 8022e30:	1a6d      	subs	r5, r5, r1
 8022e32:	4629      	mov	r1, r5
 8022e34:	4638      	mov	r0, r7
 8022e36:	f7ff ffa7 	bl	8022d88 <sbrk_aligned>
 8022e3a:	3001      	adds	r0, #1
 8022e3c:	d037      	beq.n	8022eae <_malloc_r+0xe6>
 8022e3e:	6823      	ldr	r3, [r4, #0]
 8022e40:	442b      	add	r3, r5
 8022e42:	6023      	str	r3, [r4, #0]
 8022e44:	f8d8 3000 	ldr.w	r3, [r8]
 8022e48:	2b00      	cmp	r3, #0
 8022e4a:	d038      	beq.n	8022ebe <_malloc_r+0xf6>
 8022e4c:	685a      	ldr	r2, [r3, #4]
 8022e4e:	42a2      	cmp	r2, r4
 8022e50:	d12b      	bne.n	8022eaa <_malloc_r+0xe2>
 8022e52:	2200      	movs	r2, #0
 8022e54:	605a      	str	r2, [r3, #4]
 8022e56:	e00f      	b.n	8022e78 <_malloc_r+0xb0>
 8022e58:	6822      	ldr	r2, [r4, #0]
 8022e5a:	1b52      	subs	r2, r2, r5
 8022e5c:	d41f      	bmi.n	8022e9e <_malloc_r+0xd6>
 8022e5e:	2a0b      	cmp	r2, #11
 8022e60:	d917      	bls.n	8022e92 <_malloc_r+0xca>
 8022e62:	1961      	adds	r1, r4, r5
 8022e64:	42a3      	cmp	r3, r4
 8022e66:	6025      	str	r5, [r4, #0]
 8022e68:	bf18      	it	ne
 8022e6a:	6059      	strne	r1, [r3, #4]
 8022e6c:	6863      	ldr	r3, [r4, #4]
 8022e6e:	bf08      	it	eq
 8022e70:	f8c8 1000 	streq.w	r1, [r8]
 8022e74:	5162      	str	r2, [r4, r5]
 8022e76:	604b      	str	r3, [r1, #4]
 8022e78:	4638      	mov	r0, r7
 8022e7a:	f104 060b 	add.w	r6, r4, #11
 8022e7e:	f000 f829 	bl	8022ed4 <__malloc_unlock>
 8022e82:	f026 0607 	bic.w	r6, r6, #7
 8022e86:	1d23      	adds	r3, r4, #4
 8022e88:	1af2      	subs	r2, r6, r3
 8022e8a:	d0ae      	beq.n	8022dea <_malloc_r+0x22>
 8022e8c:	1b9b      	subs	r3, r3, r6
 8022e8e:	50a3      	str	r3, [r4, r2]
 8022e90:	e7ab      	b.n	8022dea <_malloc_r+0x22>
 8022e92:	42a3      	cmp	r3, r4
 8022e94:	6862      	ldr	r2, [r4, #4]
 8022e96:	d1dd      	bne.n	8022e54 <_malloc_r+0x8c>
 8022e98:	f8c8 2000 	str.w	r2, [r8]
 8022e9c:	e7ec      	b.n	8022e78 <_malloc_r+0xb0>
 8022e9e:	4623      	mov	r3, r4
 8022ea0:	6864      	ldr	r4, [r4, #4]
 8022ea2:	e7ac      	b.n	8022dfe <_malloc_r+0x36>
 8022ea4:	4634      	mov	r4, r6
 8022ea6:	6876      	ldr	r6, [r6, #4]
 8022ea8:	e7b4      	b.n	8022e14 <_malloc_r+0x4c>
 8022eaa:	4613      	mov	r3, r2
 8022eac:	e7cc      	b.n	8022e48 <_malloc_r+0x80>
 8022eae:	230c      	movs	r3, #12
 8022eb0:	603b      	str	r3, [r7, #0]
 8022eb2:	4638      	mov	r0, r7
 8022eb4:	f000 f80e 	bl	8022ed4 <__malloc_unlock>
 8022eb8:	e797      	b.n	8022dea <_malloc_r+0x22>
 8022eba:	6025      	str	r5, [r4, #0]
 8022ebc:	e7dc      	b.n	8022e78 <_malloc_r+0xb0>
 8022ebe:	605b      	str	r3, [r3, #4]
 8022ec0:	deff      	udf	#255	; 0xff
 8022ec2:	bf00      	nop
 8022ec4:	24007368 	.word	0x24007368

08022ec8 <__malloc_lock>:
 8022ec8:	4801      	ldr	r0, [pc, #4]	; (8022ed0 <__malloc_lock+0x8>)
 8022eca:	f000 b9fc 	b.w	80232c6 <__retarget_lock_acquire_recursive>
 8022ece:	bf00      	nop
 8022ed0:	240074b1 	.word	0x240074b1

08022ed4 <__malloc_unlock>:
 8022ed4:	4801      	ldr	r0, [pc, #4]	; (8022edc <__malloc_unlock+0x8>)
 8022ed6:	f000 b9f7 	b.w	80232c8 <__retarget_lock_release_recursive>
 8022eda:	bf00      	nop
 8022edc:	240074b1 	.word	0x240074b1

08022ee0 <__cxa_atexit>:
 8022ee0:	b510      	push	{r4, lr}
 8022ee2:	4c05      	ldr	r4, [pc, #20]	; (8022ef8 <__cxa_atexit+0x18>)
 8022ee4:	4613      	mov	r3, r2
 8022ee6:	b12c      	cbz	r4, 8022ef4 <__cxa_atexit+0x14>
 8022ee8:	460a      	mov	r2, r1
 8022eea:	4601      	mov	r1, r0
 8022eec:	2002      	movs	r0, #2
 8022eee:	f000 f9fb 	bl	80232e8 <__register_exitproc>
 8022ef2:	bd10      	pop	{r4, pc}
 8022ef4:	4620      	mov	r0, r4
 8022ef6:	e7fc      	b.n	8022ef2 <__cxa_atexit+0x12>
 8022ef8:	080232e9 	.word	0x080232e9

08022efc <std>:
 8022efc:	2300      	movs	r3, #0
 8022efe:	b510      	push	{r4, lr}
 8022f00:	4604      	mov	r4, r0
 8022f02:	e9c0 3300 	strd	r3, r3, [r0]
 8022f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022f0a:	6083      	str	r3, [r0, #8]
 8022f0c:	8181      	strh	r1, [r0, #12]
 8022f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8022f10:	81c2      	strh	r2, [r0, #14]
 8022f12:	6183      	str	r3, [r0, #24]
 8022f14:	4619      	mov	r1, r3
 8022f16:	2208      	movs	r2, #8
 8022f18:	305c      	adds	r0, #92	; 0x5c
 8022f1a:	f000 f906 	bl	802312a <memset>
 8022f1e:	4b0d      	ldr	r3, [pc, #52]	; (8022f54 <std+0x58>)
 8022f20:	6263      	str	r3, [r4, #36]	; 0x24
 8022f22:	4b0d      	ldr	r3, [pc, #52]	; (8022f58 <std+0x5c>)
 8022f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8022f26:	4b0d      	ldr	r3, [pc, #52]	; (8022f5c <std+0x60>)
 8022f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022f2a:	4b0d      	ldr	r3, [pc, #52]	; (8022f60 <std+0x64>)
 8022f2c:	6323      	str	r3, [r4, #48]	; 0x30
 8022f2e:	4b0d      	ldr	r3, [pc, #52]	; (8022f64 <std+0x68>)
 8022f30:	6224      	str	r4, [r4, #32]
 8022f32:	429c      	cmp	r4, r3
 8022f34:	d006      	beq.n	8022f44 <std+0x48>
 8022f36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8022f3a:	4294      	cmp	r4, r2
 8022f3c:	d002      	beq.n	8022f44 <std+0x48>
 8022f3e:	33d0      	adds	r3, #208	; 0xd0
 8022f40:	429c      	cmp	r4, r3
 8022f42:	d105      	bne.n	8022f50 <std+0x54>
 8022f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f4c:	f000 b9ba 	b.w	80232c4 <__retarget_lock_init_recursive>
 8022f50:	bd10      	pop	{r4, pc}
 8022f52:	bf00      	nop
 8022f54:	080230a5 	.word	0x080230a5
 8022f58:	080230c7 	.word	0x080230c7
 8022f5c:	080230ff 	.word	0x080230ff
 8022f60:	08023123 	.word	0x08023123
 8022f64:	24007370 	.word	0x24007370

08022f68 <stdio_exit_handler>:
 8022f68:	4a02      	ldr	r2, [pc, #8]	; (8022f74 <stdio_exit_handler+0xc>)
 8022f6a:	4903      	ldr	r1, [pc, #12]	; (8022f78 <stdio_exit_handler+0x10>)
 8022f6c:	4803      	ldr	r0, [pc, #12]	; (8022f7c <stdio_exit_handler+0x14>)
 8022f6e:	f000 b87b 	b.w	8023068 <_fwalk_sglue>
 8022f72:	bf00      	nop
 8022f74:	240000b0 	.word	0x240000b0
 8022f78:	08023af1 	.word	0x08023af1
 8022f7c:	240000bc 	.word	0x240000bc

08022f80 <cleanup_stdio>:
 8022f80:	6841      	ldr	r1, [r0, #4]
 8022f82:	4b0c      	ldr	r3, [pc, #48]	; (8022fb4 <cleanup_stdio+0x34>)
 8022f84:	4299      	cmp	r1, r3
 8022f86:	b510      	push	{r4, lr}
 8022f88:	4604      	mov	r4, r0
 8022f8a:	d001      	beq.n	8022f90 <cleanup_stdio+0x10>
 8022f8c:	f000 fdb0 	bl	8023af0 <_fflush_r>
 8022f90:	68a1      	ldr	r1, [r4, #8]
 8022f92:	4b09      	ldr	r3, [pc, #36]	; (8022fb8 <cleanup_stdio+0x38>)
 8022f94:	4299      	cmp	r1, r3
 8022f96:	d002      	beq.n	8022f9e <cleanup_stdio+0x1e>
 8022f98:	4620      	mov	r0, r4
 8022f9a:	f000 fda9 	bl	8023af0 <_fflush_r>
 8022f9e:	68e1      	ldr	r1, [r4, #12]
 8022fa0:	4b06      	ldr	r3, [pc, #24]	; (8022fbc <cleanup_stdio+0x3c>)
 8022fa2:	4299      	cmp	r1, r3
 8022fa4:	d004      	beq.n	8022fb0 <cleanup_stdio+0x30>
 8022fa6:	4620      	mov	r0, r4
 8022fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fac:	f000 bda0 	b.w	8023af0 <_fflush_r>
 8022fb0:	bd10      	pop	{r4, pc}
 8022fb2:	bf00      	nop
 8022fb4:	24007370 	.word	0x24007370
 8022fb8:	240073d8 	.word	0x240073d8
 8022fbc:	24007440 	.word	0x24007440

08022fc0 <global_stdio_init.part.0>:
 8022fc0:	b510      	push	{r4, lr}
 8022fc2:	4b0b      	ldr	r3, [pc, #44]	; (8022ff0 <global_stdio_init.part.0+0x30>)
 8022fc4:	4c0b      	ldr	r4, [pc, #44]	; (8022ff4 <global_stdio_init.part.0+0x34>)
 8022fc6:	4a0c      	ldr	r2, [pc, #48]	; (8022ff8 <global_stdio_init.part.0+0x38>)
 8022fc8:	601a      	str	r2, [r3, #0]
 8022fca:	4620      	mov	r0, r4
 8022fcc:	2200      	movs	r2, #0
 8022fce:	2104      	movs	r1, #4
 8022fd0:	f7ff ff94 	bl	8022efc <std>
 8022fd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8022fd8:	2201      	movs	r2, #1
 8022fda:	2109      	movs	r1, #9
 8022fdc:	f7ff ff8e 	bl	8022efc <std>
 8022fe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8022fe4:	2202      	movs	r2, #2
 8022fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fea:	2112      	movs	r1, #18
 8022fec:	f7ff bf86 	b.w	8022efc <std>
 8022ff0:	240074a8 	.word	0x240074a8
 8022ff4:	24007370 	.word	0x24007370
 8022ff8:	08022f69 	.word	0x08022f69

08022ffc <__sfp_lock_acquire>:
 8022ffc:	4801      	ldr	r0, [pc, #4]	; (8023004 <__sfp_lock_acquire+0x8>)
 8022ffe:	f000 b962 	b.w	80232c6 <__retarget_lock_acquire_recursive>
 8023002:	bf00      	nop
 8023004:	240074b2 	.word	0x240074b2

08023008 <__sfp_lock_release>:
 8023008:	4801      	ldr	r0, [pc, #4]	; (8023010 <__sfp_lock_release+0x8>)
 802300a:	f000 b95d 	b.w	80232c8 <__retarget_lock_release_recursive>
 802300e:	bf00      	nop
 8023010:	240074b2 	.word	0x240074b2

08023014 <__sinit>:
 8023014:	b510      	push	{r4, lr}
 8023016:	4604      	mov	r4, r0
 8023018:	f7ff fff0 	bl	8022ffc <__sfp_lock_acquire>
 802301c:	6a23      	ldr	r3, [r4, #32]
 802301e:	b11b      	cbz	r3, 8023028 <__sinit+0x14>
 8023020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023024:	f7ff bff0 	b.w	8023008 <__sfp_lock_release>
 8023028:	4b04      	ldr	r3, [pc, #16]	; (802303c <__sinit+0x28>)
 802302a:	6223      	str	r3, [r4, #32]
 802302c:	4b04      	ldr	r3, [pc, #16]	; (8023040 <__sinit+0x2c>)
 802302e:	681b      	ldr	r3, [r3, #0]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d1f5      	bne.n	8023020 <__sinit+0xc>
 8023034:	f7ff ffc4 	bl	8022fc0 <global_stdio_init.part.0>
 8023038:	e7f2      	b.n	8023020 <__sinit+0xc>
 802303a:	bf00      	nop
 802303c:	08022f81 	.word	0x08022f81
 8023040:	240074a8 	.word	0x240074a8

08023044 <fiprintf>:
 8023044:	b40e      	push	{r1, r2, r3}
 8023046:	b503      	push	{r0, r1, lr}
 8023048:	4601      	mov	r1, r0
 802304a:	ab03      	add	r3, sp, #12
 802304c:	4805      	ldr	r0, [pc, #20]	; (8023064 <fiprintf+0x20>)
 802304e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023052:	6800      	ldr	r0, [r0, #0]
 8023054:	9301      	str	r3, [sp, #4]
 8023056:	f000 fa1b 	bl	8023490 <_vfiprintf_r>
 802305a:	b002      	add	sp, #8
 802305c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023060:	b003      	add	sp, #12
 8023062:	4770      	bx	lr
 8023064:	24000108 	.word	0x24000108

08023068 <_fwalk_sglue>:
 8023068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802306c:	4607      	mov	r7, r0
 802306e:	4688      	mov	r8, r1
 8023070:	4614      	mov	r4, r2
 8023072:	2600      	movs	r6, #0
 8023074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023078:	f1b9 0901 	subs.w	r9, r9, #1
 802307c:	d505      	bpl.n	802308a <_fwalk_sglue+0x22>
 802307e:	6824      	ldr	r4, [r4, #0]
 8023080:	2c00      	cmp	r4, #0
 8023082:	d1f7      	bne.n	8023074 <_fwalk_sglue+0xc>
 8023084:	4630      	mov	r0, r6
 8023086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802308a:	89ab      	ldrh	r3, [r5, #12]
 802308c:	2b01      	cmp	r3, #1
 802308e:	d907      	bls.n	80230a0 <_fwalk_sglue+0x38>
 8023090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023094:	3301      	adds	r3, #1
 8023096:	d003      	beq.n	80230a0 <_fwalk_sglue+0x38>
 8023098:	4629      	mov	r1, r5
 802309a:	4638      	mov	r0, r7
 802309c:	47c0      	blx	r8
 802309e:	4306      	orrs	r6, r0
 80230a0:	3568      	adds	r5, #104	; 0x68
 80230a2:	e7e9      	b.n	8023078 <_fwalk_sglue+0x10>

080230a4 <__sread>:
 80230a4:	b510      	push	{r4, lr}
 80230a6:	460c      	mov	r4, r1
 80230a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230ac:	f000 f898 	bl	80231e0 <_read_r>
 80230b0:	2800      	cmp	r0, #0
 80230b2:	bfab      	itete	ge
 80230b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80230b6:	89a3      	ldrhlt	r3, [r4, #12]
 80230b8:	181b      	addge	r3, r3, r0
 80230ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80230be:	bfac      	ite	ge
 80230c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80230c2:	81a3      	strhlt	r3, [r4, #12]
 80230c4:	bd10      	pop	{r4, pc}

080230c6 <__swrite>:
 80230c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230ca:	461f      	mov	r7, r3
 80230cc:	898b      	ldrh	r3, [r1, #12]
 80230ce:	05db      	lsls	r3, r3, #23
 80230d0:	4605      	mov	r5, r0
 80230d2:	460c      	mov	r4, r1
 80230d4:	4616      	mov	r6, r2
 80230d6:	d505      	bpl.n	80230e4 <__swrite+0x1e>
 80230d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230dc:	2302      	movs	r3, #2
 80230de:	2200      	movs	r2, #0
 80230e0:	f000 f86c 	bl	80231bc <_lseek_r>
 80230e4:	89a3      	ldrh	r3, [r4, #12]
 80230e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80230ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80230ee:	81a3      	strh	r3, [r4, #12]
 80230f0:	4632      	mov	r2, r6
 80230f2:	463b      	mov	r3, r7
 80230f4:	4628      	mov	r0, r5
 80230f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80230fa:	f000 b8a7 	b.w	802324c <_write_r>

080230fe <__sseek>:
 80230fe:	b510      	push	{r4, lr}
 8023100:	460c      	mov	r4, r1
 8023102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023106:	f000 f859 	bl	80231bc <_lseek_r>
 802310a:	1c43      	adds	r3, r0, #1
 802310c:	89a3      	ldrh	r3, [r4, #12]
 802310e:	bf15      	itete	ne
 8023110:	6560      	strne	r0, [r4, #84]	; 0x54
 8023112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802311a:	81a3      	strheq	r3, [r4, #12]
 802311c:	bf18      	it	ne
 802311e:	81a3      	strhne	r3, [r4, #12]
 8023120:	bd10      	pop	{r4, pc}

08023122 <__sclose>:
 8023122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023126:	f000 b839 	b.w	802319c <_close_r>

0802312a <memset>:
 802312a:	4402      	add	r2, r0
 802312c:	4603      	mov	r3, r0
 802312e:	4293      	cmp	r3, r2
 8023130:	d100      	bne.n	8023134 <memset+0xa>
 8023132:	4770      	bx	lr
 8023134:	f803 1b01 	strb.w	r1, [r3], #1
 8023138:	e7f9      	b.n	802312e <memset+0x4>

0802313a <_raise_r>:
 802313a:	291f      	cmp	r1, #31
 802313c:	b538      	push	{r3, r4, r5, lr}
 802313e:	4604      	mov	r4, r0
 8023140:	460d      	mov	r5, r1
 8023142:	d904      	bls.n	802314e <_raise_r+0x14>
 8023144:	2316      	movs	r3, #22
 8023146:	6003      	str	r3, [r0, #0]
 8023148:	f04f 30ff 	mov.w	r0, #4294967295
 802314c:	bd38      	pop	{r3, r4, r5, pc}
 802314e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8023150:	b112      	cbz	r2, 8023158 <_raise_r+0x1e>
 8023152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023156:	b94b      	cbnz	r3, 802316c <_raise_r+0x32>
 8023158:	4620      	mov	r0, r4
 802315a:	f000 f865 	bl	8023228 <_getpid_r>
 802315e:	462a      	mov	r2, r5
 8023160:	4601      	mov	r1, r0
 8023162:	4620      	mov	r0, r4
 8023164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023168:	f000 b84c 	b.w	8023204 <_kill_r>
 802316c:	2b01      	cmp	r3, #1
 802316e:	d00a      	beq.n	8023186 <_raise_r+0x4c>
 8023170:	1c59      	adds	r1, r3, #1
 8023172:	d103      	bne.n	802317c <_raise_r+0x42>
 8023174:	2316      	movs	r3, #22
 8023176:	6003      	str	r3, [r0, #0]
 8023178:	2001      	movs	r0, #1
 802317a:	e7e7      	b.n	802314c <_raise_r+0x12>
 802317c:	2400      	movs	r4, #0
 802317e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023182:	4628      	mov	r0, r5
 8023184:	4798      	blx	r3
 8023186:	2000      	movs	r0, #0
 8023188:	e7e0      	b.n	802314c <_raise_r+0x12>
	...

0802318c <raise>:
 802318c:	4b02      	ldr	r3, [pc, #8]	; (8023198 <raise+0xc>)
 802318e:	4601      	mov	r1, r0
 8023190:	6818      	ldr	r0, [r3, #0]
 8023192:	f7ff bfd2 	b.w	802313a <_raise_r>
 8023196:	bf00      	nop
 8023198:	24000108 	.word	0x24000108

0802319c <_close_r>:
 802319c:	b538      	push	{r3, r4, r5, lr}
 802319e:	4d06      	ldr	r5, [pc, #24]	; (80231b8 <_close_r+0x1c>)
 80231a0:	2300      	movs	r3, #0
 80231a2:	4604      	mov	r4, r0
 80231a4:	4608      	mov	r0, r1
 80231a6:	602b      	str	r3, [r5, #0]
 80231a8:	f7de fb21 	bl	80017ee <_close>
 80231ac:	1c43      	adds	r3, r0, #1
 80231ae:	d102      	bne.n	80231b6 <_close_r+0x1a>
 80231b0:	682b      	ldr	r3, [r5, #0]
 80231b2:	b103      	cbz	r3, 80231b6 <_close_r+0x1a>
 80231b4:	6023      	str	r3, [r4, #0]
 80231b6:	bd38      	pop	{r3, r4, r5, pc}
 80231b8:	240074ac 	.word	0x240074ac

080231bc <_lseek_r>:
 80231bc:	b538      	push	{r3, r4, r5, lr}
 80231be:	4d07      	ldr	r5, [pc, #28]	; (80231dc <_lseek_r+0x20>)
 80231c0:	4604      	mov	r4, r0
 80231c2:	4608      	mov	r0, r1
 80231c4:	4611      	mov	r1, r2
 80231c6:	2200      	movs	r2, #0
 80231c8:	602a      	str	r2, [r5, #0]
 80231ca:	461a      	mov	r2, r3
 80231cc:	f7de fb36 	bl	800183c <_lseek>
 80231d0:	1c43      	adds	r3, r0, #1
 80231d2:	d102      	bne.n	80231da <_lseek_r+0x1e>
 80231d4:	682b      	ldr	r3, [r5, #0]
 80231d6:	b103      	cbz	r3, 80231da <_lseek_r+0x1e>
 80231d8:	6023      	str	r3, [r4, #0]
 80231da:	bd38      	pop	{r3, r4, r5, pc}
 80231dc:	240074ac 	.word	0x240074ac

080231e0 <_read_r>:
 80231e0:	b538      	push	{r3, r4, r5, lr}
 80231e2:	4d07      	ldr	r5, [pc, #28]	; (8023200 <_read_r+0x20>)
 80231e4:	4604      	mov	r4, r0
 80231e6:	4608      	mov	r0, r1
 80231e8:	4611      	mov	r1, r2
 80231ea:	2200      	movs	r2, #0
 80231ec:	602a      	str	r2, [r5, #0]
 80231ee:	461a      	mov	r2, r3
 80231f0:	f7de fac4 	bl	800177c <_read>
 80231f4:	1c43      	adds	r3, r0, #1
 80231f6:	d102      	bne.n	80231fe <_read_r+0x1e>
 80231f8:	682b      	ldr	r3, [r5, #0]
 80231fa:	b103      	cbz	r3, 80231fe <_read_r+0x1e>
 80231fc:	6023      	str	r3, [r4, #0]
 80231fe:	bd38      	pop	{r3, r4, r5, pc}
 8023200:	240074ac 	.word	0x240074ac

08023204 <_kill_r>:
 8023204:	b538      	push	{r3, r4, r5, lr}
 8023206:	4d07      	ldr	r5, [pc, #28]	; (8023224 <_kill_r+0x20>)
 8023208:	2300      	movs	r3, #0
 802320a:	4604      	mov	r4, r0
 802320c:	4608      	mov	r0, r1
 802320e:	4611      	mov	r1, r2
 8023210:	602b      	str	r3, [r5, #0]
 8023212:	f7de fa99 	bl	8001748 <_kill>
 8023216:	1c43      	adds	r3, r0, #1
 8023218:	d102      	bne.n	8023220 <_kill_r+0x1c>
 802321a:	682b      	ldr	r3, [r5, #0]
 802321c:	b103      	cbz	r3, 8023220 <_kill_r+0x1c>
 802321e:	6023      	str	r3, [r4, #0]
 8023220:	bd38      	pop	{r3, r4, r5, pc}
 8023222:	bf00      	nop
 8023224:	240074ac 	.word	0x240074ac

08023228 <_getpid_r>:
 8023228:	f7de ba86 	b.w	8001738 <_getpid>

0802322c <_sbrk_r>:
 802322c:	b538      	push	{r3, r4, r5, lr}
 802322e:	4d06      	ldr	r5, [pc, #24]	; (8023248 <_sbrk_r+0x1c>)
 8023230:	2300      	movs	r3, #0
 8023232:	4604      	mov	r4, r0
 8023234:	4608      	mov	r0, r1
 8023236:	602b      	str	r3, [r5, #0]
 8023238:	f7de fb0e 	bl	8001858 <_sbrk>
 802323c:	1c43      	adds	r3, r0, #1
 802323e:	d102      	bne.n	8023246 <_sbrk_r+0x1a>
 8023240:	682b      	ldr	r3, [r5, #0]
 8023242:	b103      	cbz	r3, 8023246 <_sbrk_r+0x1a>
 8023244:	6023      	str	r3, [r4, #0]
 8023246:	bd38      	pop	{r3, r4, r5, pc}
 8023248:	240074ac 	.word	0x240074ac

0802324c <_write_r>:
 802324c:	b538      	push	{r3, r4, r5, lr}
 802324e:	4d07      	ldr	r5, [pc, #28]	; (802326c <_write_r+0x20>)
 8023250:	4604      	mov	r4, r0
 8023252:	4608      	mov	r0, r1
 8023254:	4611      	mov	r1, r2
 8023256:	2200      	movs	r2, #0
 8023258:	602a      	str	r2, [r5, #0]
 802325a:	461a      	mov	r2, r3
 802325c:	f7de faab 	bl	80017b6 <_write>
 8023260:	1c43      	adds	r3, r0, #1
 8023262:	d102      	bne.n	802326a <_write_r+0x1e>
 8023264:	682b      	ldr	r3, [r5, #0]
 8023266:	b103      	cbz	r3, 802326a <_write_r+0x1e>
 8023268:	6023      	str	r3, [r4, #0]
 802326a:	bd38      	pop	{r3, r4, r5, pc}
 802326c:	240074ac 	.word	0x240074ac

08023270 <__errno>:
 8023270:	4b01      	ldr	r3, [pc, #4]	; (8023278 <__errno+0x8>)
 8023272:	6818      	ldr	r0, [r3, #0]
 8023274:	4770      	bx	lr
 8023276:	bf00      	nop
 8023278:	24000108 	.word	0x24000108

0802327c <__libc_init_array>:
 802327c:	b570      	push	{r4, r5, r6, lr}
 802327e:	4d0d      	ldr	r5, [pc, #52]	; (80232b4 <__libc_init_array+0x38>)
 8023280:	4c0d      	ldr	r4, [pc, #52]	; (80232b8 <__libc_init_array+0x3c>)
 8023282:	1b64      	subs	r4, r4, r5
 8023284:	10a4      	asrs	r4, r4, #2
 8023286:	2600      	movs	r6, #0
 8023288:	42a6      	cmp	r6, r4
 802328a:	d109      	bne.n	80232a0 <__libc_init_array+0x24>
 802328c:	4d0b      	ldr	r5, [pc, #44]	; (80232bc <__libc_init_array+0x40>)
 802328e:	4c0c      	ldr	r4, [pc, #48]	; (80232c0 <__libc_init_array+0x44>)
 8023290:	f000 fd70 	bl	8023d74 <_init>
 8023294:	1b64      	subs	r4, r4, r5
 8023296:	10a4      	asrs	r4, r4, #2
 8023298:	2600      	movs	r6, #0
 802329a:	42a6      	cmp	r6, r4
 802329c:	d105      	bne.n	80232aa <__libc_init_array+0x2e>
 802329e:	bd70      	pop	{r4, r5, r6, pc}
 80232a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80232a4:	4798      	blx	r3
 80232a6:	3601      	adds	r6, #1
 80232a8:	e7ee      	b.n	8023288 <__libc_init_array+0xc>
 80232aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80232ae:	4798      	blx	r3
 80232b0:	3601      	adds	r6, #1
 80232b2:	e7f2      	b.n	802329a <__libc_init_array+0x1e>
 80232b4:	0802583c 	.word	0x0802583c
 80232b8:	0802583c 	.word	0x0802583c
 80232bc:	0802583c 	.word	0x0802583c
 80232c0:	08025850 	.word	0x08025850

080232c4 <__retarget_lock_init_recursive>:
 80232c4:	4770      	bx	lr

080232c6 <__retarget_lock_acquire_recursive>:
 80232c6:	4770      	bx	lr

080232c8 <__retarget_lock_release_recursive>:
 80232c8:	4770      	bx	lr

080232ca <memcpy>:
 80232ca:	440a      	add	r2, r1
 80232cc:	4291      	cmp	r1, r2
 80232ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80232d2:	d100      	bne.n	80232d6 <memcpy+0xc>
 80232d4:	4770      	bx	lr
 80232d6:	b510      	push	{r4, lr}
 80232d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80232dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80232e0:	4291      	cmp	r1, r2
 80232e2:	d1f9      	bne.n	80232d8 <memcpy+0xe>
 80232e4:	bd10      	pop	{r4, pc}
	...

080232e8 <__register_exitproc>:
 80232e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80232ec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80233a0 <__register_exitproc+0xb8>
 80232f0:	4606      	mov	r6, r0
 80232f2:	f8d8 0000 	ldr.w	r0, [r8]
 80232f6:	461f      	mov	r7, r3
 80232f8:	460d      	mov	r5, r1
 80232fa:	4691      	mov	r9, r2
 80232fc:	f7ff ffe3 	bl	80232c6 <__retarget_lock_acquire_recursive>
 8023300:	4b23      	ldr	r3, [pc, #140]	; (8023390 <__register_exitproc+0xa8>)
 8023302:	681c      	ldr	r4, [r3, #0]
 8023304:	b934      	cbnz	r4, 8023314 <__register_exitproc+0x2c>
 8023306:	4c23      	ldr	r4, [pc, #140]	; (8023394 <__register_exitproc+0xac>)
 8023308:	601c      	str	r4, [r3, #0]
 802330a:	4b23      	ldr	r3, [pc, #140]	; (8023398 <__register_exitproc+0xb0>)
 802330c:	b113      	cbz	r3, 8023314 <__register_exitproc+0x2c>
 802330e:	681b      	ldr	r3, [r3, #0]
 8023310:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023314:	6863      	ldr	r3, [r4, #4]
 8023316:	2b1f      	cmp	r3, #31
 8023318:	dd07      	ble.n	802332a <__register_exitproc+0x42>
 802331a:	f8d8 0000 	ldr.w	r0, [r8]
 802331e:	f7ff ffd3 	bl	80232c8 <__retarget_lock_release_recursive>
 8023322:	f04f 30ff 	mov.w	r0, #4294967295
 8023326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802332a:	b32e      	cbz	r6, 8023378 <__register_exitproc+0x90>
 802332c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023330:	b968      	cbnz	r0, 802334e <__register_exitproc+0x66>
 8023332:	4b1a      	ldr	r3, [pc, #104]	; (802339c <__register_exitproc+0xb4>)
 8023334:	2b00      	cmp	r3, #0
 8023336:	d0f0      	beq.n	802331a <__register_exitproc+0x32>
 8023338:	f44f 7084 	mov.w	r0, #264	; 0x108
 802333c:	f7ff fd14 	bl	8022d68 <malloc>
 8023340:	2800      	cmp	r0, #0
 8023342:	d0ea      	beq.n	802331a <__register_exitproc+0x32>
 8023344:	2300      	movs	r3, #0
 8023346:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802334a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802334e:	6863      	ldr	r3, [r4, #4]
 8023350:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023354:	2201      	movs	r2, #1
 8023356:	409a      	lsls	r2, r3
 8023358:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802335c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023360:	4313      	orrs	r3, r2
 8023362:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023366:	2e02      	cmp	r6, #2
 8023368:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802336c:	bf02      	ittt	eq
 802336e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023372:	4313      	orreq	r3, r2
 8023374:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023378:	6863      	ldr	r3, [r4, #4]
 802337a:	f8d8 0000 	ldr.w	r0, [r8]
 802337e:	1c5a      	adds	r2, r3, #1
 8023380:	3302      	adds	r3, #2
 8023382:	6062      	str	r2, [r4, #4]
 8023384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023388:	f7ff ff9e 	bl	80232c8 <__retarget_lock_release_recursive>
 802338c:	2000      	movs	r0, #0
 802338e:	e7ca      	b.n	8023326 <__register_exitproc+0x3e>
 8023390:	24007540 	.word	0x24007540
 8023394:	240074b4 	.word	0x240074b4
 8023398:	080257e0 	.word	0x080257e0
 802339c:	08022d69 	.word	0x08022d69
 80233a0:	2400010c 	.word	0x2400010c

080233a4 <_free_r>:
 80233a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80233a6:	2900      	cmp	r1, #0
 80233a8:	d044      	beq.n	8023434 <_free_r+0x90>
 80233aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80233ae:	9001      	str	r0, [sp, #4]
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	f1a1 0404 	sub.w	r4, r1, #4
 80233b6:	bfb8      	it	lt
 80233b8:	18e4      	addlt	r4, r4, r3
 80233ba:	f7ff fd85 	bl	8022ec8 <__malloc_lock>
 80233be:	4a1e      	ldr	r2, [pc, #120]	; (8023438 <_free_r+0x94>)
 80233c0:	9801      	ldr	r0, [sp, #4]
 80233c2:	6813      	ldr	r3, [r2, #0]
 80233c4:	b933      	cbnz	r3, 80233d4 <_free_r+0x30>
 80233c6:	6063      	str	r3, [r4, #4]
 80233c8:	6014      	str	r4, [r2, #0]
 80233ca:	b003      	add	sp, #12
 80233cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80233d0:	f7ff bd80 	b.w	8022ed4 <__malloc_unlock>
 80233d4:	42a3      	cmp	r3, r4
 80233d6:	d908      	bls.n	80233ea <_free_r+0x46>
 80233d8:	6825      	ldr	r5, [r4, #0]
 80233da:	1961      	adds	r1, r4, r5
 80233dc:	428b      	cmp	r3, r1
 80233de:	bf01      	itttt	eq
 80233e0:	6819      	ldreq	r1, [r3, #0]
 80233e2:	685b      	ldreq	r3, [r3, #4]
 80233e4:	1949      	addeq	r1, r1, r5
 80233e6:	6021      	streq	r1, [r4, #0]
 80233e8:	e7ed      	b.n	80233c6 <_free_r+0x22>
 80233ea:	461a      	mov	r2, r3
 80233ec:	685b      	ldr	r3, [r3, #4]
 80233ee:	b10b      	cbz	r3, 80233f4 <_free_r+0x50>
 80233f0:	42a3      	cmp	r3, r4
 80233f2:	d9fa      	bls.n	80233ea <_free_r+0x46>
 80233f4:	6811      	ldr	r1, [r2, #0]
 80233f6:	1855      	adds	r5, r2, r1
 80233f8:	42a5      	cmp	r5, r4
 80233fa:	d10b      	bne.n	8023414 <_free_r+0x70>
 80233fc:	6824      	ldr	r4, [r4, #0]
 80233fe:	4421      	add	r1, r4
 8023400:	1854      	adds	r4, r2, r1
 8023402:	42a3      	cmp	r3, r4
 8023404:	6011      	str	r1, [r2, #0]
 8023406:	d1e0      	bne.n	80233ca <_free_r+0x26>
 8023408:	681c      	ldr	r4, [r3, #0]
 802340a:	685b      	ldr	r3, [r3, #4]
 802340c:	6053      	str	r3, [r2, #4]
 802340e:	440c      	add	r4, r1
 8023410:	6014      	str	r4, [r2, #0]
 8023412:	e7da      	b.n	80233ca <_free_r+0x26>
 8023414:	d902      	bls.n	802341c <_free_r+0x78>
 8023416:	230c      	movs	r3, #12
 8023418:	6003      	str	r3, [r0, #0]
 802341a:	e7d6      	b.n	80233ca <_free_r+0x26>
 802341c:	6825      	ldr	r5, [r4, #0]
 802341e:	1961      	adds	r1, r4, r5
 8023420:	428b      	cmp	r3, r1
 8023422:	bf04      	itt	eq
 8023424:	6819      	ldreq	r1, [r3, #0]
 8023426:	685b      	ldreq	r3, [r3, #4]
 8023428:	6063      	str	r3, [r4, #4]
 802342a:	bf04      	itt	eq
 802342c:	1949      	addeq	r1, r1, r5
 802342e:	6021      	streq	r1, [r4, #0]
 8023430:	6054      	str	r4, [r2, #4]
 8023432:	e7ca      	b.n	80233ca <_free_r+0x26>
 8023434:	b003      	add	sp, #12
 8023436:	bd30      	pop	{r4, r5, pc}
 8023438:	24007368 	.word	0x24007368

0802343c <__sfputc_r>:
 802343c:	6893      	ldr	r3, [r2, #8]
 802343e:	3b01      	subs	r3, #1
 8023440:	2b00      	cmp	r3, #0
 8023442:	b410      	push	{r4}
 8023444:	6093      	str	r3, [r2, #8]
 8023446:	da08      	bge.n	802345a <__sfputc_r+0x1e>
 8023448:	6994      	ldr	r4, [r2, #24]
 802344a:	42a3      	cmp	r3, r4
 802344c:	db01      	blt.n	8023452 <__sfputc_r+0x16>
 802344e:	290a      	cmp	r1, #10
 8023450:	d103      	bne.n	802345a <__sfputc_r+0x1e>
 8023452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023456:	f000 bb73 	b.w	8023b40 <__swbuf_r>
 802345a:	6813      	ldr	r3, [r2, #0]
 802345c:	1c58      	adds	r0, r3, #1
 802345e:	6010      	str	r0, [r2, #0]
 8023460:	7019      	strb	r1, [r3, #0]
 8023462:	4608      	mov	r0, r1
 8023464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023468:	4770      	bx	lr

0802346a <__sfputs_r>:
 802346a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802346c:	4606      	mov	r6, r0
 802346e:	460f      	mov	r7, r1
 8023470:	4614      	mov	r4, r2
 8023472:	18d5      	adds	r5, r2, r3
 8023474:	42ac      	cmp	r4, r5
 8023476:	d101      	bne.n	802347c <__sfputs_r+0x12>
 8023478:	2000      	movs	r0, #0
 802347a:	e007      	b.n	802348c <__sfputs_r+0x22>
 802347c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023480:	463a      	mov	r2, r7
 8023482:	4630      	mov	r0, r6
 8023484:	f7ff ffda 	bl	802343c <__sfputc_r>
 8023488:	1c43      	adds	r3, r0, #1
 802348a:	d1f3      	bne.n	8023474 <__sfputs_r+0xa>
 802348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023490 <_vfiprintf_r>:
 8023490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023494:	460d      	mov	r5, r1
 8023496:	b09d      	sub	sp, #116	; 0x74
 8023498:	4614      	mov	r4, r2
 802349a:	4698      	mov	r8, r3
 802349c:	4606      	mov	r6, r0
 802349e:	b118      	cbz	r0, 80234a8 <_vfiprintf_r+0x18>
 80234a0:	6a03      	ldr	r3, [r0, #32]
 80234a2:	b90b      	cbnz	r3, 80234a8 <_vfiprintf_r+0x18>
 80234a4:	f7ff fdb6 	bl	8023014 <__sinit>
 80234a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234aa:	07d9      	lsls	r1, r3, #31
 80234ac:	d405      	bmi.n	80234ba <_vfiprintf_r+0x2a>
 80234ae:	89ab      	ldrh	r3, [r5, #12]
 80234b0:	059a      	lsls	r2, r3, #22
 80234b2:	d402      	bmi.n	80234ba <_vfiprintf_r+0x2a>
 80234b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234b6:	f7ff ff06 	bl	80232c6 <__retarget_lock_acquire_recursive>
 80234ba:	89ab      	ldrh	r3, [r5, #12]
 80234bc:	071b      	lsls	r3, r3, #28
 80234be:	d501      	bpl.n	80234c4 <_vfiprintf_r+0x34>
 80234c0:	692b      	ldr	r3, [r5, #16]
 80234c2:	b99b      	cbnz	r3, 80234ec <_vfiprintf_r+0x5c>
 80234c4:	4629      	mov	r1, r5
 80234c6:	4630      	mov	r0, r6
 80234c8:	f000 fb78 	bl	8023bbc <__swsetup_r>
 80234cc:	b170      	cbz	r0, 80234ec <_vfiprintf_r+0x5c>
 80234ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234d0:	07dc      	lsls	r4, r3, #31
 80234d2:	d504      	bpl.n	80234de <_vfiprintf_r+0x4e>
 80234d4:	f04f 30ff 	mov.w	r0, #4294967295
 80234d8:	b01d      	add	sp, #116	; 0x74
 80234da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234de:	89ab      	ldrh	r3, [r5, #12]
 80234e0:	0598      	lsls	r0, r3, #22
 80234e2:	d4f7      	bmi.n	80234d4 <_vfiprintf_r+0x44>
 80234e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234e6:	f7ff feef 	bl	80232c8 <__retarget_lock_release_recursive>
 80234ea:	e7f3      	b.n	80234d4 <_vfiprintf_r+0x44>
 80234ec:	2300      	movs	r3, #0
 80234ee:	9309      	str	r3, [sp, #36]	; 0x24
 80234f0:	2320      	movs	r3, #32
 80234f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80234f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80234fa:	2330      	movs	r3, #48	; 0x30
 80234fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80236b0 <_vfiprintf_r+0x220>
 8023500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023504:	f04f 0901 	mov.w	r9, #1
 8023508:	4623      	mov	r3, r4
 802350a:	469a      	mov	sl, r3
 802350c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023510:	b10a      	cbz	r2, 8023516 <_vfiprintf_r+0x86>
 8023512:	2a25      	cmp	r2, #37	; 0x25
 8023514:	d1f9      	bne.n	802350a <_vfiprintf_r+0x7a>
 8023516:	ebba 0b04 	subs.w	fp, sl, r4
 802351a:	d00b      	beq.n	8023534 <_vfiprintf_r+0xa4>
 802351c:	465b      	mov	r3, fp
 802351e:	4622      	mov	r2, r4
 8023520:	4629      	mov	r1, r5
 8023522:	4630      	mov	r0, r6
 8023524:	f7ff ffa1 	bl	802346a <__sfputs_r>
 8023528:	3001      	adds	r0, #1
 802352a:	f000 80a9 	beq.w	8023680 <_vfiprintf_r+0x1f0>
 802352e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023530:	445a      	add	r2, fp
 8023532:	9209      	str	r2, [sp, #36]	; 0x24
 8023534:	f89a 3000 	ldrb.w	r3, [sl]
 8023538:	2b00      	cmp	r3, #0
 802353a:	f000 80a1 	beq.w	8023680 <_vfiprintf_r+0x1f0>
 802353e:	2300      	movs	r3, #0
 8023540:	f04f 32ff 	mov.w	r2, #4294967295
 8023544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023548:	f10a 0a01 	add.w	sl, sl, #1
 802354c:	9304      	str	r3, [sp, #16]
 802354e:	9307      	str	r3, [sp, #28]
 8023550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023554:	931a      	str	r3, [sp, #104]	; 0x68
 8023556:	4654      	mov	r4, sl
 8023558:	2205      	movs	r2, #5
 802355a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802355e:	4854      	ldr	r0, [pc, #336]	; (80236b0 <_vfiprintf_r+0x220>)
 8023560:	f7dc fec6 	bl	80002f0 <memchr>
 8023564:	9a04      	ldr	r2, [sp, #16]
 8023566:	b9d8      	cbnz	r0, 80235a0 <_vfiprintf_r+0x110>
 8023568:	06d1      	lsls	r1, r2, #27
 802356a:	bf44      	itt	mi
 802356c:	2320      	movmi	r3, #32
 802356e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023572:	0713      	lsls	r3, r2, #28
 8023574:	bf44      	itt	mi
 8023576:	232b      	movmi	r3, #43	; 0x2b
 8023578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802357c:	f89a 3000 	ldrb.w	r3, [sl]
 8023580:	2b2a      	cmp	r3, #42	; 0x2a
 8023582:	d015      	beq.n	80235b0 <_vfiprintf_r+0x120>
 8023584:	9a07      	ldr	r2, [sp, #28]
 8023586:	4654      	mov	r4, sl
 8023588:	2000      	movs	r0, #0
 802358a:	f04f 0c0a 	mov.w	ip, #10
 802358e:	4621      	mov	r1, r4
 8023590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023594:	3b30      	subs	r3, #48	; 0x30
 8023596:	2b09      	cmp	r3, #9
 8023598:	d94d      	bls.n	8023636 <_vfiprintf_r+0x1a6>
 802359a:	b1b0      	cbz	r0, 80235ca <_vfiprintf_r+0x13a>
 802359c:	9207      	str	r2, [sp, #28]
 802359e:	e014      	b.n	80235ca <_vfiprintf_r+0x13a>
 80235a0:	eba0 0308 	sub.w	r3, r0, r8
 80235a4:	fa09 f303 	lsl.w	r3, r9, r3
 80235a8:	4313      	orrs	r3, r2
 80235aa:	9304      	str	r3, [sp, #16]
 80235ac:	46a2      	mov	sl, r4
 80235ae:	e7d2      	b.n	8023556 <_vfiprintf_r+0xc6>
 80235b0:	9b03      	ldr	r3, [sp, #12]
 80235b2:	1d19      	adds	r1, r3, #4
 80235b4:	681b      	ldr	r3, [r3, #0]
 80235b6:	9103      	str	r1, [sp, #12]
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	bfbb      	ittet	lt
 80235bc:	425b      	neglt	r3, r3
 80235be:	f042 0202 	orrlt.w	r2, r2, #2
 80235c2:	9307      	strge	r3, [sp, #28]
 80235c4:	9307      	strlt	r3, [sp, #28]
 80235c6:	bfb8      	it	lt
 80235c8:	9204      	strlt	r2, [sp, #16]
 80235ca:	7823      	ldrb	r3, [r4, #0]
 80235cc:	2b2e      	cmp	r3, #46	; 0x2e
 80235ce:	d10c      	bne.n	80235ea <_vfiprintf_r+0x15a>
 80235d0:	7863      	ldrb	r3, [r4, #1]
 80235d2:	2b2a      	cmp	r3, #42	; 0x2a
 80235d4:	d134      	bne.n	8023640 <_vfiprintf_r+0x1b0>
 80235d6:	9b03      	ldr	r3, [sp, #12]
 80235d8:	1d1a      	adds	r2, r3, #4
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	9203      	str	r2, [sp, #12]
 80235de:	2b00      	cmp	r3, #0
 80235e0:	bfb8      	it	lt
 80235e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80235e6:	3402      	adds	r4, #2
 80235e8:	9305      	str	r3, [sp, #20]
 80235ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80236c0 <_vfiprintf_r+0x230>
 80235ee:	7821      	ldrb	r1, [r4, #0]
 80235f0:	2203      	movs	r2, #3
 80235f2:	4650      	mov	r0, sl
 80235f4:	f7dc fe7c 	bl	80002f0 <memchr>
 80235f8:	b138      	cbz	r0, 802360a <_vfiprintf_r+0x17a>
 80235fa:	9b04      	ldr	r3, [sp, #16]
 80235fc:	eba0 000a 	sub.w	r0, r0, sl
 8023600:	2240      	movs	r2, #64	; 0x40
 8023602:	4082      	lsls	r2, r0
 8023604:	4313      	orrs	r3, r2
 8023606:	3401      	adds	r4, #1
 8023608:	9304      	str	r3, [sp, #16]
 802360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802360e:	4829      	ldr	r0, [pc, #164]	; (80236b4 <_vfiprintf_r+0x224>)
 8023610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023614:	2206      	movs	r2, #6
 8023616:	f7dc fe6b 	bl	80002f0 <memchr>
 802361a:	2800      	cmp	r0, #0
 802361c:	d03f      	beq.n	802369e <_vfiprintf_r+0x20e>
 802361e:	4b26      	ldr	r3, [pc, #152]	; (80236b8 <_vfiprintf_r+0x228>)
 8023620:	bb1b      	cbnz	r3, 802366a <_vfiprintf_r+0x1da>
 8023622:	9b03      	ldr	r3, [sp, #12]
 8023624:	3307      	adds	r3, #7
 8023626:	f023 0307 	bic.w	r3, r3, #7
 802362a:	3308      	adds	r3, #8
 802362c:	9303      	str	r3, [sp, #12]
 802362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023630:	443b      	add	r3, r7
 8023632:	9309      	str	r3, [sp, #36]	; 0x24
 8023634:	e768      	b.n	8023508 <_vfiprintf_r+0x78>
 8023636:	fb0c 3202 	mla	r2, ip, r2, r3
 802363a:	460c      	mov	r4, r1
 802363c:	2001      	movs	r0, #1
 802363e:	e7a6      	b.n	802358e <_vfiprintf_r+0xfe>
 8023640:	2300      	movs	r3, #0
 8023642:	3401      	adds	r4, #1
 8023644:	9305      	str	r3, [sp, #20]
 8023646:	4619      	mov	r1, r3
 8023648:	f04f 0c0a 	mov.w	ip, #10
 802364c:	4620      	mov	r0, r4
 802364e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023652:	3a30      	subs	r2, #48	; 0x30
 8023654:	2a09      	cmp	r2, #9
 8023656:	d903      	bls.n	8023660 <_vfiprintf_r+0x1d0>
 8023658:	2b00      	cmp	r3, #0
 802365a:	d0c6      	beq.n	80235ea <_vfiprintf_r+0x15a>
 802365c:	9105      	str	r1, [sp, #20]
 802365e:	e7c4      	b.n	80235ea <_vfiprintf_r+0x15a>
 8023660:	fb0c 2101 	mla	r1, ip, r1, r2
 8023664:	4604      	mov	r4, r0
 8023666:	2301      	movs	r3, #1
 8023668:	e7f0      	b.n	802364c <_vfiprintf_r+0x1bc>
 802366a:	ab03      	add	r3, sp, #12
 802366c:	9300      	str	r3, [sp, #0]
 802366e:	462a      	mov	r2, r5
 8023670:	4b12      	ldr	r3, [pc, #72]	; (80236bc <_vfiprintf_r+0x22c>)
 8023672:	a904      	add	r1, sp, #16
 8023674:	4630      	mov	r0, r6
 8023676:	f3af 8000 	nop.w
 802367a:	4607      	mov	r7, r0
 802367c:	1c78      	adds	r0, r7, #1
 802367e:	d1d6      	bne.n	802362e <_vfiprintf_r+0x19e>
 8023680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023682:	07d9      	lsls	r1, r3, #31
 8023684:	d405      	bmi.n	8023692 <_vfiprintf_r+0x202>
 8023686:	89ab      	ldrh	r3, [r5, #12]
 8023688:	059a      	lsls	r2, r3, #22
 802368a:	d402      	bmi.n	8023692 <_vfiprintf_r+0x202>
 802368c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802368e:	f7ff fe1b 	bl	80232c8 <__retarget_lock_release_recursive>
 8023692:	89ab      	ldrh	r3, [r5, #12]
 8023694:	065b      	lsls	r3, r3, #25
 8023696:	f53f af1d 	bmi.w	80234d4 <_vfiprintf_r+0x44>
 802369a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802369c:	e71c      	b.n	80234d8 <_vfiprintf_r+0x48>
 802369e:	ab03      	add	r3, sp, #12
 80236a0:	9300      	str	r3, [sp, #0]
 80236a2:	462a      	mov	r2, r5
 80236a4:	4b05      	ldr	r3, [pc, #20]	; (80236bc <_vfiprintf_r+0x22c>)
 80236a6:	a904      	add	r1, sp, #16
 80236a8:	4630      	mov	r0, r6
 80236aa:	f000 f879 	bl	80237a0 <_printf_i>
 80236ae:	e7e4      	b.n	802367a <_vfiprintf_r+0x1ea>
 80236b0:	080257e4 	.word	0x080257e4
 80236b4:	080257ee 	.word	0x080257ee
 80236b8:	00000000 	.word	0x00000000
 80236bc:	0802346b 	.word	0x0802346b
 80236c0:	080257ea 	.word	0x080257ea

080236c4 <_printf_common>:
 80236c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80236c8:	4616      	mov	r6, r2
 80236ca:	4699      	mov	r9, r3
 80236cc:	688a      	ldr	r2, [r1, #8]
 80236ce:	690b      	ldr	r3, [r1, #16]
 80236d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80236d4:	4293      	cmp	r3, r2
 80236d6:	bfb8      	it	lt
 80236d8:	4613      	movlt	r3, r2
 80236da:	6033      	str	r3, [r6, #0]
 80236dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80236e0:	4607      	mov	r7, r0
 80236e2:	460c      	mov	r4, r1
 80236e4:	b10a      	cbz	r2, 80236ea <_printf_common+0x26>
 80236e6:	3301      	adds	r3, #1
 80236e8:	6033      	str	r3, [r6, #0]
 80236ea:	6823      	ldr	r3, [r4, #0]
 80236ec:	0699      	lsls	r1, r3, #26
 80236ee:	bf42      	ittt	mi
 80236f0:	6833      	ldrmi	r3, [r6, #0]
 80236f2:	3302      	addmi	r3, #2
 80236f4:	6033      	strmi	r3, [r6, #0]
 80236f6:	6825      	ldr	r5, [r4, #0]
 80236f8:	f015 0506 	ands.w	r5, r5, #6
 80236fc:	d106      	bne.n	802370c <_printf_common+0x48>
 80236fe:	f104 0a19 	add.w	sl, r4, #25
 8023702:	68e3      	ldr	r3, [r4, #12]
 8023704:	6832      	ldr	r2, [r6, #0]
 8023706:	1a9b      	subs	r3, r3, r2
 8023708:	42ab      	cmp	r3, r5
 802370a:	dc26      	bgt.n	802375a <_printf_common+0x96>
 802370c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023710:	1e13      	subs	r3, r2, #0
 8023712:	6822      	ldr	r2, [r4, #0]
 8023714:	bf18      	it	ne
 8023716:	2301      	movne	r3, #1
 8023718:	0692      	lsls	r2, r2, #26
 802371a:	d42b      	bmi.n	8023774 <_printf_common+0xb0>
 802371c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023720:	4649      	mov	r1, r9
 8023722:	4638      	mov	r0, r7
 8023724:	47c0      	blx	r8
 8023726:	3001      	adds	r0, #1
 8023728:	d01e      	beq.n	8023768 <_printf_common+0xa4>
 802372a:	6823      	ldr	r3, [r4, #0]
 802372c:	6922      	ldr	r2, [r4, #16]
 802372e:	f003 0306 	and.w	r3, r3, #6
 8023732:	2b04      	cmp	r3, #4
 8023734:	bf02      	ittt	eq
 8023736:	68e5      	ldreq	r5, [r4, #12]
 8023738:	6833      	ldreq	r3, [r6, #0]
 802373a:	1aed      	subeq	r5, r5, r3
 802373c:	68a3      	ldr	r3, [r4, #8]
 802373e:	bf0c      	ite	eq
 8023740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023744:	2500      	movne	r5, #0
 8023746:	4293      	cmp	r3, r2
 8023748:	bfc4      	itt	gt
 802374a:	1a9b      	subgt	r3, r3, r2
 802374c:	18ed      	addgt	r5, r5, r3
 802374e:	2600      	movs	r6, #0
 8023750:	341a      	adds	r4, #26
 8023752:	42b5      	cmp	r5, r6
 8023754:	d11a      	bne.n	802378c <_printf_common+0xc8>
 8023756:	2000      	movs	r0, #0
 8023758:	e008      	b.n	802376c <_printf_common+0xa8>
 802375a:	2301      	movs	r3, #1
 802375c:	4652      	mov	r2, sl
 802375e:	4649      	mov	r1, r9
 8023760:	4638      	mov	r0, r7
 8023762:	47c0      	blx	r8
 8023764:	3001      	adds	r0, #1
 8023766:	d103      	bne.n	8023770 <_printf_common+0xac>
 8023768:	f04f 30ff 	mov.w	r0, #4294967295
 802376c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023770:	3501      	adds	r5, #1
 8023772:	e7c6      	b.n	8023702 <_printf_common+0x3e>
 8023774:	18e1      	adds	r1, r4, r3
 8023776:	1c5a      	adds	r2, r3, #1
 8023778:	2030      	movs	r0, #48	; 0x30
 802377a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802377e:	4422      	add	r2, r4
 8023780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023788:	3302      	adds	r3, #2
 802378a:	e7c7      	b.n	802371c <_printf_common+0x58>
 802378c:	2301      	movs	r3, #1
 802378e:	4622      	mov	r2, r4
 8023790:	4649      	mov	r1, r9
 8023792:	4638      	mov	r0, r7
 8023794:	47c0      	blx	r8
 8023796:	3001      	adds	r0, #1
 8023798:	d0e6      	beq.n	8023768 <_printf_common+0xa4>
 802379a:	3601      	adds	r6, #1
 802379c:	e7d9      	b.n	8023752 <_printf_common+0x8e>
	...

080237a0 <_printf_i>:
 80237a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80237a4:	7e0f      	ldrb	r7, [r1, #24]
 80237a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80237a8:	2f78      	cmp	r7, #120	; 0x78
 80237aa:	4691      	mov	r9, r2
 80237ac:	4680      	mov	r8, r0
 80237ae:	460c      	mov	r4, r1
 80237b0:	469a      	mov	sl, r3
 80237b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80237b6:	d807      	bhi.n	80237c8 <_printf_i+0x28>
 80237b8:	2f62      	cmp	r7, #98	; 0x62
 80237ba:	d80a      	bhi.n	80237d2 <_printf_i+0x32>
 80237bc:	2f00      	cmp	r7, #0
 80237be:	f000 80d4 	beq.w	802396a <_printf_i+0x1ca>
 80237c2:	2f58      	cmp	r7, #88	; 0x58
 80237c4:	f000 80c0 	beq.w	8023948 <_printf_i+0x1a8>
 80237c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80237cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80237d0:	e03a      	b.n	8023848 <_printf_i+0xa8>
 80237d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80237d6:	2b15      	cmp	r3, #21
 80237d8:	d8f6      	bhi.n	80237c8 <_printf_i+0x28>
 80237da:	a101      	add	r1, pc, #4	; (adr r1, 80237e0 <_printf_i+0x40>)
 80237dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80237e0:	08023839 	.word	0x08023839
 80237e4:	0802384d 	.word	0x0802384d
 80237e8:	080237c9 	.word	0x080237c9
 80237ec:	080237c9 	.word	0x080237c9
 80237f0:	080237c9 	.word	0x080237c9
 80237f4:	080237c9 	.word	0x080237c9
 80237f8:	0802384d 	.word	0x0802384d
 80237fc:	080237c9 	.word	0x080237c9
 8023800:	080237c9 	.word	0x080237c9
 8023804:	080237c9 	.word	0x080237c9
 8023808:	080237c9 	.word	0x080237c9
 802380c:	08023951 	.word	0x08023951
 8023810:	08023879 	.word	0x08023879
 8023814:	0802390b 	.word	0x0802390b
 8023818:	080237c9 	.word	0x080237c9
 802381c:	080237c9 	.word	0x080237c9
 8023820:	08023973 	.word	0x08023973
 8023824:	080237c9 	.word	0x080237c9
 8023828:	08023879 	.word	0x08023879
 802382c:	080237c9 	.word	0x080237c9
 8023830:	080237c9 	.word	0x080237c9
 8023834:	08023913 	.word	0x08023913
 8023838:	682b      	ldr	r3, [r5, #0]
 802383a:	1d1a      	adds	r2, r3, #4
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	602a      	str	r2, [r5, #0]
 8023840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023848:	2301      	movs	r3, #1
 802384a:	e09f      	b.n	802398c <_printf_i+0x1ec>
 802384c:	6820      	ldr	r0, [r4, #0]
 802384e:	682b      	ldr	r3, [r5, #0]
 8023850:	0607      	lsls	r7, r0, #24
 8023852:	f103 0104 	add.w	r1, r3, #4
 8023856:	6029      	str	r1, [r5, #0]
 8023858:	d501      	bpl.n	802385e <_printf_i+0xbe>
 802385a:	681e      	ldr	r6, [r3, #0]
 802385c:	e003      	b.n	8023866 <_printf_i+0xc6>
 802385e:	0646      	lsls	r6, r0, #25
 8023860:	d5fb      	bpl.n	802385a <_printf_i+0xba>
 8023862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023866:	2e00      	cmp	r6, #0
 8023868:	da03      	bge.n	8023872 <_printf_i+0xd2>
 802386a:	232d      	movs	r3, #45	; 0x2d
 802386c:	4276      	negs	r6, r6
 802386e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023872:	485a      	ldr	r0, [pc, #360]	; (80239dc <_printf_i+0x23c>)
 8023874:	230a      	movs	r3, #10
 8023876:	e012      	b.n	802389e <_printf_i+0xfe>
 8023878:	682b      	ldr	r3, [r5, #0]
 802387a:	6820      	ldr	r0, [r4, #0]
 802387c:	1d19      	adds	r1, r3, #4
 802387e:	6029      	str	r1, [r5, #0]
 8023880:	0605      	lsls	r5, r0, #24
 8023882:	d501      	bpl.n	8023888 <_printf_i+0xe8>
 8023884:	681e      	ldr	r6, [r3, #0]
 8023886:	e002      	b.n	802388e <_printf_i+0xee>
 8023888:	0641      	lsls	r1, r0, #25
 802388a:	d5fb      	bpl.n	8023884 <_printf_i+0xe4>
 802388c:	881e      	ldrh	r6, [r3, #0]
 802388e:	4853      	ldr	r0, [pc, #332]	; (80239dc <_printf_i+0x23c>)
 8023890:	2f6f      	cmp	r7, #111	; 0x6f
 8023892:	bf0c      	ite	eq
 8023894:	2308      	moveq	r3, #8
 8023896:	230a      	movne	r3, #10
 8023898:	2100      	movs	r1, #0
 802389a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802389e:	6865      	ldr	r5, [r4, #4]
 80238a0:	60a5      	str	r5, [r4, #8]
 80238a2:	2d00      	cmp	r5, #0
 80238a4:	bfa2      	ittt	ge
 80238a6:	6821      	ldrge	r1, [r4, #0]
 80238a8:	f021 0104 	bicge.w	r1, r1, #4
 80238ac:	6021      	strge	r1, [r4, #0]
 80238ae:	b90e      	cbnz	r6, 80238b4 <_printf_i+0x114>
 80238b0:	2d00      	cmp	r5, #0
 80238b2:	d04b      	beq.n	802394c <_printf_i+0x1ac>
 80238b4:	4615      	mov	r5, r2
 80238b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80238ba:	fb03 6711 	mls	r7, r3, r1, r6
 80238be:	5dc7      	ldrb	r7, [r0, r7]
 80238c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80238c4:	4637      	mov	r7, r6
 80238c6:	42bb      	cmp	r3, r7
 80238c8:	460e      	mov	r6, r1
 80238ca:	d9f4      	bls.n	80238b6 <_printf_i+0x116>
 80238cc:	2b08      	cmp	r3, #8
 80238ce:	d10b      	bne.n	80238e8 <_printf_i+0x148>
 80238d0:	6823      	ldr	r3, [r4, #0]
 80238d2:	07de      	lsls	r6, r3, #31
 80238d4:	d508      	bpl.n	80238e8 <_printf_i+0x148>
 80238d6:	6923      	ldr	r3, [r4, #16]
 80238d8:	6861      	ldr	r1, [r4, #4]
 80238da:	4299      	cmp	r1, r3
 80238dc:	bfde      	ittt	le
 80238de:	2330      	movle	r3, #48	; 0x30
 80238e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80238e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80238e8:	1b52      	subs	r2, r2, r5
 80238ea:	6122      	str	r2, [r4, #16]
 80238ec:	f8cd a000 	str.w	sl, [sp]
 80238f0:	464b      	mov	r3, r9
 80238f2:	aa03      	add	r2, sp, #12
 80238f4:	4621      	mov	r1, r4
 80238f6:	4640      	mov	r0, r8
 80238f8:	f7ff fee4 	bl	80236c4 <_printf_common>
 80238fc:	3001      	adds	r0, #1
 80238fe:	d14a      	bne.n	8023996 <_printf_i+0x1f6>
 8023900:	f04f 30ff 	mov.w	r0, #4294967295
 8023904:	b004      	add	sp, #16
 8023906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802390a:	6823      	ldr	r3, [r4, #0]
 802390c:	f043 0320 	orr.w	r3, r3, #32
 8023910:	6023      	str	r3, [r4, #0]
 8023912:	4833      	ldr	r0, [pc, #204]	; (80239e0 <_printf_i+0x240>)
 8023914:	2778      	movs	r7, #120	; 0x78
 8023916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802391a:	6823      	ldr	r3, [r4, #0]
 802391c:	6829      	ldr	r1, [r5, #0]
 802391e:	061f      	lsls	r7, r3, #24
 8023920:	f851 6b04 	ldr.w	r6, [r1], #4
 8023924:	d402      	bmi.n	802392c <_printf_i+0x18c>
 8023926:	065f      	lsls	r7, r3, #25
 8023928:	bf48      	it	mi
 802392a:	b2b6      	uxthmi	r6, r6
 802392c:	07df      	lsls	r7, r3, #31
 802392e:	bf48      	it	mi
 8023930:	f043 0320 	orrmi.w	r3, r3, #32
 8023934:	6029      	str	r1, [r5, #0]
 8023936:	bf48      	it	mi
 8023938:	6023      	strmi	r3, [r4, #0]
 802393a:	b91e      	cbnz	r6, 8023944 <_printf_i+0x1a4>
 802393c:	6823      	ldr	r3, [r4, #0]
 802393e:	f023 0320 	bic.w	r3, r3, #32
 8023942:	6023      	str	r3, [r4, #0]
 8023944:	2310      	movs	r3, #16
 8023946:	e7a7      	b.n	8023898 <_printf_i+0xf8>
 8023948:	4824      	ldr	r0, [pc, #144]	; (80239dc <_printf_i+0x23c>)
 802394a:	e7e4      	b.n	8023916 <_printf_i+0x176>
 802394c:	4615      	mov	r5, r2
 802394e:	e7bd      	b.n	80238cc <_printf_i+0x12c>
 8023950:	682b      	ldr	r3, [r5, #0]
 8023952:	6826      	ldr	r6, [r4, #0]
 8023954:	6961      	ldr	r1, [r4, #20]
 8023956:	1d18      	adds	r0, r3, #4
 8023958:	6028      	str	r0, [r5, #0]
 802395a:	0635      	lsls	r5, r6, #24
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	d501      	bpl.n	8023964 <_printf_i+0x1c4>
 8023960:	6019      	str	r1, [r3, #0]
 8023962:	e002      	b.n	802396a <_printf_i+0x1ca>
 8023964:	0670      	lsls	r0, r6, #25
 8023966:	d5fb      	bpl.n	8023960 <_printf_i+0x1c0>
 8023968:	8019      	strh	r1, [r3, #0]
 802396a:	2300      	movs	r3, #0
 802396c:	6123      	str	r3, [r4, #16]
 802396e:	4615      	mov	r5, r2
 8023970:	e7bc      	b.n	80238ec <_printf_i+0x14c>
 8023972:	682b      	ldr	r3, [r5, #0]
 8023974:	1d1a      	adds	r2, r3, #4
 8023976:	602a      	str	r2, [r5, #0]
 8023978:	681d      	ldr	r5, [r3, #0]
 802397a:	6862      	ldr	r2, [r4, #4]
 802397c:	2100      	movs	r1, #0
 802397e:	4628      	mov	r0, r5
 8023980:	f7dc fcb6 	bl	80002f0 <memchr>
 8023984:	b108      	cbz	r0, 802398a <_printf_i+0x1ea>
 8023986:	1b40      	subs	r0, r0, r5
 8023988:	6060      	str	r0, [r4, #4]
 802398a:	6863      	ldr	r3, [r4, #4]
 802398c:	6123      	str	r3, [r4, #16]
 802398e:	2300      	movs	r3, #0
 8023990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023994:	e7aa      	b.n	80238ec <_printf_i+0x14c>
 8023996:	6923      	ldr	r3, [r4, #16]
 8023998:	462a      	mov	r2, r5
 802399a:	4649      	mov	r1, r9
 802399c:	4640      	mov	r0, r8
 802399e:	47d0      	blx	sl
 80239a0:	3001      	adds	r0, #1
 80239a2:	d0ad      	beq.n	8023900 <_printf_i+0x160>
 80239a4:	6823      	ldr	r3, [r4, #0]
 80239a6:	079b      	lsls	r3, r3, #30
 80239a8:	d413      	bmi.n	80239d2 <_printf_i+0x232>
 80239aa:	68e0      	ldr	r0, [r4, #12]
 80239ac:	9b03      	ldr	r3, [sp, #12]
 80239ae:	4298      	cmp	r0, r3
 80239b0:	bfb8      	it	lt
 80239b2:	4618      	movlt	r0, r3
 80239b4:	e7a6      	b.n	8023904 <_printf_i+0x164>
 80239b6:	2301      	movs	r3, #1
 80239b8:	4632      	mov	r2, r6
 80239ba:	4649      	mov	r1, r9
 80239bc:	4640      	mov	r0, r8
 80239be:	47d0      	blx	sl
 80239c0:	3001      	adds	r0, #1
 80239c2:	d09d      	beq.n	8023900 <_printf_i+0x160>
 80239c4:	3501      	adds	r5, #1
 80239c6:	68e3      	ldr	r3, [r4, #12]
 80239c8:	9903      	ldr	r1, [sp, #12]
 80239ca:	1a5b      	subs	r3, r3, r1
 80239cc:	42ab      	cmp	r3, r5
 80239ce:	dcf2      	bgt.n	80239b6 <_printf_i+0x216>
 80239d0:	e7eb      	b.n	80239aa <_printf_i+0x20a>
 80239d2:	2500      	movs	r5, #0
 80239d4:	f104 0619 	add.w	r6, r4, #25
 80239d8:	e7f5      	b.n	80239c6 <_printf_i+0x226>
 80239da:	bf00      	nop
 80239dc:	080257f5 	.word	0x080257f5
 80239e0:	08025806 	.word	0x08025806

080239e4 <__sflush_r>:
 80239e4:	898a      	ldrh	r2, [r1, #12]
 80239e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239ea:	4605      	mov	r5, r0
 80239ec:	0710      	lsls	r0, r2, #28
 80239ee:	460c      	mov	r4, r1
 80239f0:	d458      	bmi.n	8023aa4 <__sflush_r+0xc0>
 80239f2:	684b      	ldr	r3, [r1, #4]
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	dc05      	bgt.n	8023a04 <__sflush_r+0x20>
 80239f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	dc02      	bgt.n	8023a04 <__sflush_r+0x20>
 80239fe:	2000      	movs	r0, #0
 8023a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023a06:	2e00      	cmp	r6, #0
 8023a08:	d0f9      	beq.n	80239fe <__sflush_r+0x1a>
 8023a0a:	2300      	movs	r3, #0
 8023a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023a10:	682f      	ldr	r7, [r5, #0]
 8023a12:	6a21      	ldr	r1, [r4, #32]
 8023a14:	602b      	str	r3, [r5, #0]
 8023a16:	d032      	beq.n	8023a7e <__sflush_r+0x9a>
 8023a18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023a1a:	89a3      	ldrh	r3, [r4, #12]
 8023a1c:	075a      	lsls	r2, r3, #29
 8023a1e:	d505      	bpl.n	8023a2c <__sflush_r+0x48>
 8023a20:	6863      	ldr	r3, [r4, #4]
 8023a22:	1ac0      	subs	r0, r0, r3
 8023a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023a26:	b10b      	cbz	r3, 8023a2c <__sflush_r+0x48>
 8023a28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023a2a:	1ac0      	subs	r0, r0, r3
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	4602      	mov	r2, r0
 8023a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023a32:	6a21      	ldr	r1, [r4, #32]
 8023a34:	4628      	mov	r0, r5
 8023a36:	47b0      	blx	r6
 8023a38:	1c43      	adds	r3, r0, #1
 8023a3a:	89a3      	ldrh	r3, [r4, #12]
 8023a3c:	d106      	bne.n	8023a4c <__sflush_r+0x68>
 8023a3e:	6829      	ldr	r1, [r5, #0]
 8023a40:	291d      	cmp	r1, #29
 8023a42:	d82b      	bhi.n	8023a9c <__sflush_r+0xb8>
 8023a44:	4a29      	ldr	r2, [pc, #164]	; (8023aec <__sflush_r+0x108>)
 8023a46:	410a      	asrs	r2, r1
 8023a48:	07d6      	lsls	r6, r2, #31
 8023a4a:	d427      	bmi.n	8023a9c <__sflush_r+0xb8>
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	6062      	str	r2, [r4, #4]
 8023a50:	04d9      	lsls	r1, r3, #19
 8023a52:	6922      	ldr	r2, [r4, #16]
 8023a54:	6022      	str	r2, [r4, #0]
 8023a56:	d504      	bpl.n	8023a62 <__sflush_r+0x7e>
 8023a58:	1c42      	adds	r2, r0, #1
 8023a5a:	d101      	bne.n	8023a60 <__sflush_r+0x7c>
 8023a5c:	682b      	ldr	r3, [r5, #0]
 8023a5e:	b903      	cbnz	r3, 8023a62 <__sflush_r+0x7e>
 8023a60:	6560      	str	r0, [r4, #84]	; 0x54
 8023a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023a64:	602f      	str	r7, [r5, #0]
 8023a66:	2900      	cmp	r1, #0
 8023a68:	d0c9      	beq.n	80239fe <__sflush_r+0x1a>
 8023a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023a6e:	4299      	cmp	r1, r3
 8023a70:	d002      	beq.n	8023a78 <__sflush_r+0x94>
 8023a72:	4628      	mov	r0, r5
 8023a74:	f7ff fc96 	bl	80233a4 <_free_r>
 8023a78:	2000      	movs	r0, #0
 8023a7a:	6360      	str	r0, [r4, #52]	; 0x34
 8023a7c:	e7c0      	b.n	8023a00 <__sflush_r+0x1c>
 8023a7e:	2301      	movs	r3, #1
 8023a80:	4628      	mov	r0, r5
 8023a82:	47b0      	blx	r6
 8023a84:	1c41      	adds	r1, r0, #1
 8023a86:	d1c8      	bne.n	8023a1a <__sflush_r+0x36>
 8023a88:	682b      	ldr	r3, [r5, #0]
 8023a8a:	2b00      	cmp	r3, #0
 8023a8c:	d0c5      	beq.n	8023a1a <__sflush_r+0x36>
 8023a8e:	2b1d      	cmp	r3, #29
 8023a90:	d001      	beq.n	8023a96 <__sflush_r+0xb2>
 8023a92:	2b16      	cmp	r3, #22
 8023a94:	d101      	bne.n	8023a9a <__sflush_r+0xb6>
 8023a96:	602f      	str	r7, [r5, #0]
 8023a98:	e7b1      	b.n	80239fe <__sflush_r+0x1a>
 8023a9a:	89a3      	ldrh	r3, [r4, #12]
 8023a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023aa0:	81a3      	strh	r3, [r4, #12]
 8023aa2:	e7ad      	b.n	8023a00 <__sflush_r+0x1c>
 8023aa4:	690f      	ldr	r7, [r1, #16]
 8023aa6:	2f00      	cmp	r7, #0
 8023aa8:	d0a9      	beq.n	80239fe <__sflush_r+0x1a>
 8023aaa:	0793      	lsls	r3, r2, #30
 8023aac:	680e      	ldr	r6, [r1, #0]
 8023aae:	bf08      	it	eq
 8023ab0:	694b      	ldreq	r3, [r1, #20]
 8023ab2:	600f      	str	r7, [r1, #0]
 8023ab4:	bf18      	it	ne
 8023ab6:	2300      	movne	r3, #0
 8023ab8:	eba6 0807 	sub.w	r8, r6, r7
 8023abc:	608b      	str	r3, [r1, #8]
 8023abe:	f1b8 0f00 	cmp.w	r8, #0
 8023ac2:	dd9c      	ble.n	80239fe <__sflush_r+0x1a>
 8023ac4:	6a21      	ldr	r1, [r4, #32]
 8023ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023ac8:	4643      	mov	r3, r8
 8023aca:	463a      	mov	r2, r7
 8023acc:	4628      	mov	r0, r5
 8023ace:	47b0      	blx	r6
 8023ad0:	2800      	cmp	r0, #0
 8023ad2:	dc06      	bgt.n	8023ae2 <__sflush_r+0xfe>
 8023ad4:	89a3      	ldrh	r3, [r4, #12]
 8023ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ada:	81a3      	strh	r3, [r4, #12]
 8023adc:	f04f 30ff 	mov.w	r0, #4294967295
 8023ae0:	e78e      	b.n	8023a00 <__sflush_r+0x1c>
 8023ae2:	4407      	add	r7, r0
 8023ae4:	eba8 0800 	sub.w	r8, r8, r0
 8023ae8:	e7e9      	b.n	8023abe <__sflush_r+0xda>
 8023aea:	bf00      	nop
 8023aec:	dfbffffe 	.word	0xdfbffffe

08023af0 <_fflush_r>:
 8023af0:	b538      	push	{r3, r4, r5, lr}
 8023af2:	690b      	ldr	r3, [r1, #16]
 8023af4:	4605      	mov	r5, r0
 8023af6:	460c      	mov	r4, r1
 8023af8:	b913      	cbnz	r3, 8023b00 <_fflush_r+0x10>
 8023afa:	2500      	movs	r5, #0
 8023afc:	4628      	mov	r0, r5
 8023afe:	bd38      	pop	{r3, r4, r5, pc}
 8023b00:	b118      	cbz	r0, 8023b0a <_fflush_r+0x1a>
 8023b02:	6a03      	ldr	r3, [r0, #32]
 8023b04:	b90b      	cbnz	r3, 8023b0a <_fflush_r+0x1a>
 8023b06:	f7ff fa85 	bl	8023014 <__sinit>
 8023b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d0f3      	beq.n	8023afa <_fflush_r+0xa>
 8023b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023b14:	07d0      	lsls	r0, r2, #31
 8023b16:	d404      	bmi.n	8023b22 <_fflush_r+0x32>
 8023b18:	0599      	lsls	r1, r3, #22
 8023b1a:	d402      	bmi.n	8023b22 <_fflush_r+0x32>
 8023b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b1e:	f7ff fbd2 	bl	80232c6 <__retarget_lock_acquire_recursive>
 8023b22:	4628      	mov	r0, r5
 8023b24:	4621      	mov	r1, r4
 8023b26:	f7ff ff5d 	bl	80239e4 <__sflush_r>
 8023b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023b2c:	07da      	lsls	r2, r3, #31
 8023b2e:	4605      	mov	r5, r0
 8023b30:	d4e4      	bmi.n	8023afc <_fflush_r+0xc>
 8023b32:	89a3      	ldrh	r3, [r4, #12]
 8023b34:	059b      	lsls	r3, r3, #22
 8023b36:	d4e1      	bmi.n	8023afc <_fflush_r+0xc>
 8023b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b3a:	f7ff fbc5 	bl	80232c8 <__retarget_lock_release_recursive>
 8023b3e:	e7dd      	b.n	8023afc <_fflush_r+0xc>

08023b40 <__swbuf_r>:
 8023b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b42:	460e      	mov	r6, r1
 8023b44:	4614      	mov	r4, r2
 8023b46:	4605      	mov	r5, r0
 8023b48:	b118      	cbz	r0, 8023b52 <__swbuf_r+0x12>
 8023b4a:	6a03      	ldr	r3, [r0, #32]
 8023b4c:	b90b      	cbnz	r3, 8023b52 <__swbuf_r+0x12>
 8023b4e:	f7ff fa61 	bl	8023014 <__sinit>
 8023b52:	69a3      	ldr	r3, [r4, #24]
 8023b54:	60a3      	str	r3, [r4, #8]
 8023b56:	89a3      	ldrh	r3, [r4, #12]
 8023b58:	071a      	lsls	r2, r3, #28
 8023b5a:	d525      	bpl.n	8023ba8 <__swbuf_r+0x68>
 8023b5c:	6923      	ldr	r3, [r4, #16]
 8023b5e:	b31b      	cbz	r3, 8023ba8 <__swbuf_r+0x68>
 8023b60:	6823      	ldr	r3, [r4, #0]
 8023b62:	6922      	ldr	r2, [r4, #16]
 8023b64:	1a98      	subs	r0, r3, r2
 8023b66:	6963      	ldr	r3, [r4, #20]
 8023b68:	b2f6      	uxtb	r6, r6
 8023b6a:	4283      	cmp	r3, r0
 8023b6c:	4637      	mov	r7, r6
 8023b6e:	dc04      	bgt.n	8023b7a <__swbuf_r+0x3a>
 8023b70:	4621      	mov	r1, r4
 8023b72:	4628      	mov	r0, r5
 8023b74:	f7ff ffbc 	bl	8023af0 <_fflush_r>
 8023b78:	b9e0      	cbnz	r0, 8023bb4 <__swbuf_r+0x74>
 8023b7a:	68a3      	ldr	r3, [r4, #8]
 8023b7c:	3b01      	subs	r3, #1
 8023b7e:	60a3      	str	r3, [r4, #8]
 8023b80:	6823      	ldr	r3, [r4, #0]
 8023b82:	1c5a      	adds	r2, r3, #1
 8023b84:	6022      	str	r2, [r4, #0]
 8023b86:	701e      	strb	r6, [r3, #0]
 8023b88:	6962      	ldr	r2, [r4, #20]
 8023b8a:	1c43      	adds	r3, r0, #1
 8023b8c:	429a      	cmp	r2, r3
 8023b8e:	d004      	beq.n	8023b9a <__swbuf_r+0x5a>
 8023b90:	89a3      	ldrh	r3, [r4, #12]
 8023b92:	07db      	lsls	r3, r3, #31
 8023b94:	d506      	bpl.n	8023ba4 <__swbuf_r+0x64>
 8023b96:	2e0a      	cmp	r6, #10
 8023b98:	d104      	bne.n	8023ba4 <__swbuf_r+0x64>
 8023b9a:	4621      	mov	r1, r4
 8023b9c:	4628      	mov	r0, r5
 8023b9e:	f7ff ffa7 	bl	8023af0 <_fflush_r>
 8023ba2:	b938      	cbnz	r0, 8023bb4 <__swbuf_r+0x74>
 8023ba4:	4638      	mov	r0, r7
 8023ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ba8:	4621      	mov	r1, r4
 8023baa:	4628      	mov	r0, r5
 8023bac:	f000 f806 	bl	8023bbc <__swsetup_r>
 8023bb0:	2800      	cmp	r0, #0
 8023bb2:	d0d5      	beq.n	8023b60 <__swbuf_r+0x20>
 8023bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8023bb8:	e7f4      	b.n	8023ba4 <__swbuf_r+0x64>
	...

08023bbc <__swsetup_r>:
 8023bbc:	b538      	push	{r3, r4, r5, lr}
 8023bbe:	4b2a      	ldr	r3, [pc, #168]	; (8023c68 <__swsetup_r+0xac>)
 8023bc0:	4605      	mov	r5, r0
 8023bc2:	6818      	ldr	r0, [r3, #0]
 8023bc4:	460c      	mov	r4, r1
 8023bc6:	b118      	cbz	r0, 8023bd0 <__swsetup_r+0x14>
 8023bc8:	6a03      	ldr	r3, [r0, #32]
 8023bca:	b90b      	cbnz	r3, 8023bd0 <__swsetup_r+0x14>
 8023bcc:	f7ff fa22 	bl	8023014 <__sinit>
 8023bd0:	89a3      	ldrh	r3, [r4, #12]
 8023bd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023bd6:	0718      	lsls	r0, r3, #28
 8023bd8:	d422      	bmi.n	8023c20 <__swsetup_r+0x64>
 8023bda:	06d9      	lsls	r1, r3, #27
 8023bdc:	d407      	bmi.n	8023bee <__swsetup_r+0x32>
 8023bde:	2309      	movs	r3, #9
 8023be0:	602b      	str	r3, [r5, #0]
 8023be2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023be6:	81a3      	strh	r3, [r4, #12]
 8023be8:	f04f 30ff 	mov.w	r0, #4294967295
 8023bec:	e034      	b.n	8023c58 <__swsetup_r+0x9c>
 8023bee:	0758      	lsls	r0, r3, #29
 8023bf0:	d512      	bpl.n	8023c18 <__swsetup_r+0x5c>
 8023bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023bf4:	b141      	cbz	r1, 8023c08 <__swsetup_r+0x4c>
 8023bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023bfa:	4299      	cmp	r1, r3
 8023bfc:	d002      	beq.n	8023c04 <__swsetup_r+0x48>
 8023bfe:	4628      	mov	r0, r5
 8023c00:	f7ff fbd0 	bl	80233a4 <_free_r>
 8023c04:	2300      	movs	r3, #0
 8023c06:	6363      	str	r3, [r4, #52]	; 0x34
 8023c08:	89a3      	ldrh	r3, [r4, #12]
 8023c0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023c0e:	81a3      	strh	r3, [r4, #12]
 8023c10:	2300      	movs	r3, #0
 8023c12:	6063      	str	r3, [r4, #4]
 8023c14:	6923      	ldr	r3, [r4, #16]
 8023c16:	6023      	str	r3, [r4, #0]
 8023c18:	89a3      	ldrh	r3, [r4, #12]
 8023c1a:	f043 0308 	orr.w	r3, r3, #8
 8023c1e:	81a3      	strh	r3, [r4, #12]
 8023c20:	6923      	ldr	r3, [r4, #16]
 8023c22:	b94b      	cbnz	r3, 8023c38 <__swsetup_r+0x7c>
 8023c24:	89a3      	ldrh	r3, [r4, #12]
 8023c26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c2e:	d003      	beq.n	8023c38 <__swsetup_r+0x7c>
 8023c30:	4621      	mov	r1, r4
 8023c32:	4628      	mov	r0, r5
 8023c34:	f000 f840 	bl	8023cb8 <__smakebuf_r>
 8023c38:	89a0      	ldrh	r0, [r4, #12]
 8023c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c3e:	f010 0301 	ands.w	r3, r0, #1
 8023c42:	d00a      	beq.n	8023c5a <__swsetup_r+0x9e>
 8023c44:	2300      	movs	r3, #0
 8023c46:	60a3      	str	r3, [r4, #8]
 8023c48:	6963      	ldr	r3, [r4, #20]
 8023c4a:	425b      	negs	r3, r3
 8023c4c:	61a3      	str	r3, [r4, #24]
 8023c4e:	6923      	ldr	r3, [r4, #16]
 8023c50:	b943      	cbnz	r3, 8023c64 <__swsetup_r+0xa8>
 8023c52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023c56:	d1c4      	bne.n	8023be2 <__swsetup_r+0x26>
 8023c58:	bd38      	pop	{r3, r4, r5, pc}
 8023c5a:	0781      	lsls	r1, r0, #30
 8023c5c:	bf58      	it	pl
 8023c5e:	6963      	ldrpl	r3, [r4, #20]
 8023c60:	60a3      	str	r3, [r4, #8]
 8023c62:	e7f4      	b.n	8023c4e <__swsetup_r+0x92>
 8023c64:	2000      	movs	r0, #0
 8023c66:	e7f7      	b.n	8023c58 <__swsetup_r+0x9c>
 8023c68:	24000108 	.word	0x24000108

08023c6c <__swhatbuf_r>:
 8023c6c:	b570      	push	{r4, r5, r6, lr}
 8023c6e:	460c      	mov	r4, r1
 8023c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c74:	2900      	cmp	r1, #0
 8023c76:	b096      	sub	sp, #88	; 0x58
 8023c78:	4615      	mov	r5, r2
 8023c7a:	461e      	mov	r6, r3
 8023c7c:	da0d      	bge.n	8023c9a <__swhatbuf_r+0x2e>
 8023c7e:	89a3      	ldrh	r3, [r4, #12]
 8023c80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023c84:	f04f 0100 	mov.w	r1, #0
 8023c88:	bf0c      	ite	eq
 8023c8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023c8e:	2340      	movne	r3, #64	; 0x40
 8023c90:	2000      	movs	r0, #0
 8023c92:	6031      	str	r1, [r6, #0]
 8023c94:	602b      	str	r3, [r5, #0]
 8023c96:	b016      	add	sp, #88	; 0x58
 8023c98:	bd70      	pop	{r4, r5, r6, pc}
 8023c9a:	466a      	mov	r2, sp
 8023c9c:	f000 f848 	bl	8023d30 <_fstat_r>
 8023ca0:	2800      	cmp	r0, #0
 8023ca2:	dbec      	blt.n	8023c7e <__swhatbuf_r+0x12>
 8023ca4:	9901      	ldr	r1, [sp, #4]
 8023ca6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023caa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023cae:	4259      	negs	r1, r3
 8023cb0:	4159      	adcs	r1, r3
 8023cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023cb6:	e7eb      	b.n	8023c90 <__swhatbuf_r+0x24>

08023cb8 <__smakebuf_r>:
 8023cb8:	898b      	ldrh	r3, [r1, #12]
 8023cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023cbc:	079d      	lsls	r5, r3, #30
 8023cbe:	4606      	mov	r6, r0
 8023cc0:	460c      	mov	r4, r1
 8023cc2:	d507      	bpl.n	8023cd4 <__smakebuf_r+0x1c>
 8023cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023cc8:	6023      	str	r3, [r4, #0]
 8023cca:	6123      	str	r3, [r4, #16]
 8023ccc:	2301      	movs	r3, #1
 8023cce:	6163      	str	r3, [r4, #20]
 8023cd0:	b002      	add	sp, #8
 8023cd2:	bd70      	pop	{r4, r5, r6, pc}
 8023cd4:	ab01      	add	r3, sp, #4
 8023cd6:	466a      	mov	r2, sp
 8023cd8:	f7ff ffc8 	bl	8023c6c <__swhatbuf_r>
 8023cdc:	9900      	ldr	r1, [sp, #0]
 8023cde:	4605      	mov	r5, r0
 8023ce0:	4630      	mov	r0, r6
 8023ce2:	f7ff f871 	bl	8022dc8 <_malloc_r>
 8023ce6:	b948      	cbnz	r0, 8023cfc <__smakebuf_r+0x44>
 8023ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023cec:	059a      	lsls	r2, r3, #22
 8023cee:	d4ef      	bmi.n	8023cd0 <__smakebuf_r+0x18>
 8023cf0:	f023 0303 	bic.w	r3, r3, #3
 8023cf4:	f043 0302 	orr.w	r3, r3, #2
 8023cf8:	81a3      	strh	r3, [r4, #12]
 8023cfa:	e7e3      	b.n	8023cc4 <__smakebuf_r+0xc>
 8023cfc:	89a3      	ldrh	r3, [r4, #12]
 8023cfe:	6020      	str	r0, [r4, #0]
 8023d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023d04:	81a3      	strh	r3, [r4, #12]
 8023d06:	9b00      	ldr	r3, [sp, #0]
 8023d08:	6163      	str	r3, [r4, #20]
 8023d0a:	9b01      	ldr	r3, [sp, #4]
 8023d0c:	6120      	str	r0, [r4, #16]
 8023d0e:	b15b      	cbz	r3, 8023d28 <__smakebuf_r+0x70>
 8023d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023d14:	4630      	mov	r0, r6
 8023d16:	f000 f81d 	bl	8023d54 <_isatty_r>
 8023d1a:	b128      	cbz	r0, 8023d28 <__smakebuf_r+0x70>
 8023d1c:	89a3      	ldrh	r3, [r4, #12]
 8023d1e:	f023 0303 	bic.w	r3, r3, #3
 8023d22:	f043 0301 	orr.w	r3, r3, #1
 8023d26:	81a3      	strh	r3, [r4, #12]
 8023d28:	89a3      	ldrh	r3, [r4, #12]
 8023d2a:	431d      	orrs	r5, r3
 8023d2c:	81a5      	strh	r5, [r4, #12]
 8023d2e:	e7cf      	b.n	8023cd0 <__smakebuf_r+0x18>

08023d30 <_fstat_r>:
 8023d30:	b538      	push	{r3, r4, r5, lr}
 8023d32:	4d07      	ldr	r5, [pc, #28]	; (8023d50 <_fstat_r+0x20>)
 8023d34:	2300      	movs	r3, #0
 8023d36:	4604      	mov	r4, r0
 8023d38:	4608      	mov	r0, r1
 8023d3a:	4611      	mov	r1, r2
 8023d3c:	602b      	str	r3, [r5, #0]
 8023d3e:	f7dd fd62 	bl	8001806 <_fstat>
 8023d42:	1c43      	adds	r3, r0, #1
 8023d44:	d102      	bne.n	8023d4c <_fstat_r+0x1c>
 8023d46:	682b      	ldr	r3, [r5, #0]
 8023d48:	b103      	cbz	r3, 8023d4c <_fstat_r+0x1c>
 8023d4a:	6023      	str	r3, [r4, #0]
 8023d4c:	bd38      	pop	{r3, r4, r5, pc}
 8023d4e:	bf00      	nop
 8023d50:	240074ac 	.word	0x240074ac

08023d54 <_isatty_r>:
 8023d54:	b538      	push	{r3, r4, r5, lr}
 8023d56:	4d06      	ldr	r5, [pc, #24]	; (8023d70 <_isatty_r+0x1c>)
 8023d58:	2300      	movs	r3, #0
 8023d5a:	4604      	mov	r4, r0
 8023d5c:	4608      	mov	r0, r1
 8023d5e:	602b      	str	r3, [r5, #0]
 8023d60:	f7dd fd61 	bl	8001826 <_isatty>
 8023d64:	1c43      	adds	r3, r0, #1
 8023d66:	d102      	bne.n	8023d6e <_isatty_r+0x1a>
 8023d68:	682b      	ldr	r3, [r5, #0]
 8023d6a:	b103      	cbz	r3, 8023d6e <_isatty_r+0x1a>
 8023d6c:	6023      	str	r3, [r4, #0]
 8023d6e:	bd38      	pop	{r3, r4, r5, pc}
 8023d70:	240074ac 	.word	0x240074ac

08023d74 <_init>:
 8023d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d76:	bf00      	nop
 8023d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d7a:	bc08      	pop	{r3}
 8023d7c:	469e      	mov	lr, r3
 8023d7e:	4770      	bx	lr

08023d80 <_fini>:
 8023d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d82:	bf00      	nop
 8023d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d86:	bc08      	pop	{r3}
 8023d88:	469e      	mov	lr, r3
 8023d8a:	4770      	bx	lr
